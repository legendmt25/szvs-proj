
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00023c7c  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000031e0  90023f1c  90023f1c  00043f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  900270fc  900270fc  000470fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  900272b4  900272b4  000a1d98  2**0
                  CONTENTS
  6 .ARM          00000000  900272b4  900272b4  000a1d98  2**0
                  CONTENTS
  7 .preinit_array 00000000  900272b4  900272b4  000a1d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  900272b4  900272b4  000472b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  900272d0  900272d0  000472d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  900272d8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  90027418  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020b04  24005b40  9002ce18  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  24026644  9002ce18  00056644  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000a1d98  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002164  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000034  90202164  90202164  00062164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0003fc00  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  000b0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  000b0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  000a1dc6  2**0
                  CONTENTS, READONLY
 21 .debug_line   00077b37  00000000  00000000  000a1e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001199bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000c4cce  00000000  00000000  00119a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00015a83  00000000  00000000  001de6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 000031b8  00000000  00000000  001f4180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001af966  00000000  00000000  001f7338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 000065ba  00000000  00000000  003a6c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004ae71  00000000  00000000  003ad258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000a844  00000000  00000000  003f80cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00038bf7  00000000  00000000  00402910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	90023f04 	.word	0x90023f04

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	90023f04 	.word	0x90023f04

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fc75 	bl	90006c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f023 f8c3 	bl	90023538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 fe6b 	bl	9000408c <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	900272d8 	.word	0x900272d8
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003c8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003cc:	24026644 	.word	0x24026644

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 fee7 	bl	900021b0 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be6b 	b.w	900020c0 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 bee2 	b.w	900021b4 <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f022 fcf2 	bl	90022e32 <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4403      	add	r3, r0
90000470:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 fb00 	bl	90006ab4 <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 fb79 	bl	90006bd0 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f022 fc9c 	bl	90022e32 <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f007 ff5d 	bl	900083c4 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f007 ff55 	bl	900083c4 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f007 ff4d 	bl	900083c4 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f007 ff45 	bl	900083c4 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b5c 	.word	0x24005b5c
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f007 bf2f 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f007 bf26 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f007 bf1d 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f007 bf14 	b.w	900083d0 <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b5c 	.word	0x24005b5c
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f007 befb 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f007 bef2 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f007 bee9 	b.w	900083d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f007 bee0 	b.w	900083d0 <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b5c 	.word	0x24005b5c
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f007 bed0 	b.w	900083d8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f007 becc 	b.w	900083d8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f007 bec8 	b.w	900083d8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f007 bec4 	b.w	900083d8 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	24026263 	.word	0x24026263

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f022 fbe2 	bl	90022e90 <__assert_func>
900006cc:	24026258 	.word	0x24026258
900006d0:	2402625a 	.word	0x2402625a
900006d4:	2402625e 	.word	0x2402625e
900006d8:	24026260 	.word	0x24026260
900006dc:	90023f9c 	.word	0x90023f9c
900006e0:	90024000 	.word	0x90024000
900006e4:	90024044 	.word	0x90024044

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f011 fd52 	bl	90012194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be32 	b.w	90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be36 	b.w	90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 fef5 	bl	900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bde0 	b.w	90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f001 bff0 	b.w	90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfda 	b.w	9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bde4 	b.w	90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f010 bf6a 	b.w	90011644 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f022 fb5c 	bl	90022e32 <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	2402625c 	.word	0x2402625c
900007d0:	2402625a 	.word	0x2402625a
900007d4:	24026258 	.word	0x24026258

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f022 fb31 	bl	90022e90 <__assert_func>
9000082e:	bf00      	nop
90000830:	24026262 	.word	0x24026262
90000834:	90000675 	.word	0x90000675
90000838:	24026263 	.word	0x24026263
9000083c:	9002408c 	.word	0x9002408c
90000840:	900240c4 	.word	0x900240c4
90000844:	90024044 	.word	0x90024044

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8bb 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f007 fdae 	bl	900083d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f007 fda9 	bl	900083d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f007 fda4 	bl	900083d0 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8a6 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f011 fc7d 	bl	90012194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff4a 	bl	90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f022 fab6 	bl	90022e90 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	24026262 	.word	0x24026262
90000930:	d0000000 	.word	0xd0000000
90000934:	24026263 	.word	0x24026263
90000938:	9002408c 	.word	0x9002408c
9000093c:	900240c4 	.word	0x900240c4
90000940:	90024044 	.word	0x90024044

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f011 fc3b 	bl	900121c8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f011 fc35 	bl	900121c8 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	24026264 	.word	0x24026264

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f022 fa70 	bl	90022e90 <__assert_func>
900009b0:	900241ec 	.word	0x900241ec
900009b4:	90025be0 	.word	0x90025be0
900009b8:	90024248 	.word	0x90024248

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f022 fa36 	bl	90022e32 <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
900009d2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d4:	4c65      	ldr	r4, [pc, #404]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d8:	2002      	movs	r0, #2
900009da:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009dc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009de:	0705      	lsls	r5, r0, #28
900009e0:	d003      	beq.n	900009ea <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009e2:	f020 000f 	bic.w	r0, r0, #15
900009e6:	4c61      	ldr	r4, [pc, #388]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
900009e8:	3010      	adds	r0, #16
900009ea:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009ec:	0900      	lsrs	r0, r0, #4
900009ee:	4c5f      	ldr	r4, [pc, #380]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
900009f0:	2700      	movs	r7, #0
900009f2:	4e5f      	ldr	r6, [pc, #380]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009f4:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009fa:	4d5e      	ldr	r5, [pc, #376]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009fc:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
900009fe:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a00:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a04:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a06:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a08:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a0c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a0e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a10:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a14:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a16:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a18:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a1c:	616f      	str	r7, [r5, #20]
90000a1e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a22:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a24:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a28:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a2c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a2e:	4852      	ldr	r0, [pc, #328]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a30:	4c52      	ldr	r4, [pc, #328]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a32:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a34:	4b52      	ldr	r3, [pc, #328]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a36:	4853      	ldr	r0, [pc, #332]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a38:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a3a:	4b53      	ldr	r3, [pc, #332]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a3c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a40:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a42:	4b52      	ldr	r3, [pc, #328]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a44:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	4b52      	ldr	r3, [pc, #328]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a48:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a4e:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a50:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
90000a54:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a58:	686b      	ldr	r3, [r5, #4]
90000a5a:	f008 fde9 	bl	90009630 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a5e:	f8d9 3000 	ldr.w	r3, [r9]
90000a62:	b11b      	cbz	r3, 90000a6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a64:	4b4c      	ldr	r3, [pc, #304]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a66:	681b      	ldr	r3, [r3, #0]
90000a68:	2b00      	cmp	r3, #0
90000a6a:	d17d      	bne.n	90000b68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a6c:	f8d8 3000 	ldr.w	r3, [r8]
90000a70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a74:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a78:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a7c:	2901      	cmp	r1, #1
90000a7e:	d042      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000a80:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000a82:	2b01      	cmp	r3, #1
90000a84:	d029      	beq.n	90000ada <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a86:	6833      	ldr	r3, [r6, #0]
90000a88:	b9c3      	cbnz	r3, 90000abc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000a8a:	f8db 3000 	ldr.w	r3, [fp]
90000a8e:	fab3 f383 	clz	r3, r3
90000a92:	095b      	lsrs	r3, r3, #5
90000a94:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a96:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000a98:	6823      	ldr	r3, [r4, #0]
90000a9a:	2b02      	cmp	r3, #2
90000a9c:	d013      	beq.n	90000ac6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000a9e:	6823      	ldr	r3, [r4, #0]
90000aa0:	2b01      	cmp	r3, #1
90000aa2:	d1dc      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000aa4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000aa6:	4a3c      	ldr	r2, [pc, #240]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000aa8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000aac:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ab0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ab4:	6013      	str	r3, [r2, #0]
}
90000ab6:	b005      	add	sp, #20
90000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000abc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000abe:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ac0:	6823      	ldr	r3, [r4, #0]
90000ac2:	2b02      	cmp	r3, #2
90000ac4:	d1eb      	bne.n	90000a9e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ac6:	4b35      	ldr	r3, [pc, #212]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ac8:	f04f 31ff 	mov.w	r1, #4294967295
90000acc:	6818      	ldr	r0, [r3, #0]
90000ace:	f00c fe21 	bl	9000d714 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000ad2:	6823      	ldr	r3, [r4, #0]
90000ad4:	2b01      	cmp	r3, #1
90000ad6:	d1c2      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000ad8:	e7e4      	b.n	90000aa4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000ada:	4b29      	ldr	r3, [pc, #164]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000adc:	681b      	ldr	r3, [r3, #0]
90000ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000ae2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae6:	2b00      	cmp	r3, #0
90000ae8:	d1cd      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aea:	f8d8 3000 	ldr.w	r3, [r8]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c5      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4821      	ldr	r0, [pc, #132]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f008 fede 	bl	900098c0 <HAL_JPEG_Resume>
90000b04:	e7bf      	b.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8db 1000 	ldr.w	r1, [fp]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1b8      	bne.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b0e:	3301      	adds	r3, #1
      };
90000b10:	4920      	ldr	r1, [pc, #128]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b12:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b16:	2b01      	cmp	r3, #1
      };
90000b18:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b1c:	bf88      	it	hi
90000b1e:	463b      	movhi	r3, r7
90000b20:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b24:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b28:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b2a:	3302      	adds	r3, #2
90000b2c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b30:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b34:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b36:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b38:	fbb1 f3f0 	udiv	r3, r1, r0
90000b3c:	fb00 1113 	mls	r1, r0, r3, r1
90000b40:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b42:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b46:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b4a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4911      	ldr	r1, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b4e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b52:	4a06      	ldr	r2, [pc, #24]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b54:	680b      	ldr	r3, [r1, #0]
90000b56:	68d2      	ldr	r2, [r2, #12]
90000b58:	4413      	add	r3, r2
90000b5a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b5c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b5e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b62:	691b      	ldr	r3, [r3, #16]
90000b64:	4798      	blx	r3
90000b66:	e78b      	b.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b68:	2301      	movs	r3, #1
90000b6a:	e794      	b.n	90000a96 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b6c:	24005ba0 	.word	0x24005ba0
90000b70:	24005b9c 	.word	0x24005b9c
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b74 	.word	0x24005b74
90000b7c:	24005b8c 	.word	0x24005b8c
90000b80:	24005b88 	.word	0x24005b88
90000b84:	2400af00 	.word	0x2400af00
90000b88:	24005b7c 	.word	0x24005b7c
90000b8c:	24005b78 	.word	0x24005b78
90000b90:	24005b80 	.word	0x24005b80
90000b94:	24005b94 	.word	0x24005b94
90000b98:	24005b6c 	.word	0x24005b6c
90000b9c:	24005bd8 	.word	0x24005bd8
90000ba0:	24005b70 	.word	0x24005b70
90000ba4:	24005b84 	.word	0x24005b84
90000ba8:	24005b90 	.word	0x24005b90
90000bac:	24005bb4 	.word	0x24005bb4

90000bb0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb2:	6803      	ldr	r3, [r0, #0]
90000bb4:	2901      	cmp	r1, #1
90000bb6:	4e2a      	ldr	r6, [pc, #168]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bb8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bbc:	bf38      	it	cc
90000bbe:	2101      	movcc	r1, #1
90000bc0:	42b3      	cmp	r3, r6
90000bc2:	460d      	mov	r5, r1
90000bc4:	d138      	bne.n	90000c38 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000bc6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bc8:	4299      	cmp	r1, r3
90000bca:	d82a      	bhi.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bcc:	1e6b      	subs	r3, r5, #1
90000bce:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bd2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bd6:	b350      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bda:	2b0f      	cmp	r3, #15
90000bdc:	d937      	bls.n	90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bde:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000be0:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000be4:	68db      	ldr	r3, [r3, #12]
90000be6:	4631      	mov	r1, r6
90000be8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bea:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bec:	2210      	movs	r2, #16
90000bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bf0:	6803      	ldr	r3, [r0, #0]
90000bf2:	691b      	ldr	r3, [r3, #16]
90000bf4:	4798      	blx	r3
90000bf6:	b1b0      	cbz	r0, 90000c26 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000bfa:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000bfc:	b1bb      	cbz	r3, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000bfe:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c00:	7a93      	ldrb	r3, [r2, #10]
90000c02:	7a51      	ldrb	r1, [r2, #9]
90000c04:	041b      	lsls	r3, r3, #16
90000c06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c0a:	7a11      	ldrb	r1, [r2, #8]
90000c0c:	7ad2      	ldrb	r2, [r2, #11]
90000c0e:	430b      	orrs	r3, r1
90000c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c14:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c16:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c18:	3a04      	subs	r2, #4
90000c1a:	441a      	add	r2, r3
90000c1c:	61a2      	str	r2, [r4, #24]
}
90000c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c20:	68a3      	ldr	r3, [r4, #8]
{
90000c22:	461d      	mov	r5, r3
90000c24:	e7d2      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c26:	230d      	movs	r3, #13
90000c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c2c:	e7e4      	b.n	90000bf8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c2e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c34:	58d3      	ldr	r3, [r2, r3]
90000c36:	e7ed      	b.n	90000c14 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c38:	4798      	blx	r3
90000c3a:	4285      	cmp	r5, r0
90000c3c:	d9c6      	bls.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c3e:	6823      	ldr	r3, [r4, #0]
90000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c42:	42b3      	cmp	r3, r6
90000c44:	d0ec      	beq.n	90000c20 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c46:	4620      	mov	r0, r4
90000c48:	4798      	blx	r3
90000c4a:	4605      	mov	r5, r0
90000c4c:	e7be      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c50:	4b04      	ldr	r3, [pc, #16]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c54:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c5a:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c5c:	f022 f918 	bl	90022e90 <__assert_func>
90000c60:	90000989 	.word	0x90000989
90000c64:	900242a4 	.word	0x900242a4
90000c68:	900242b8 	.word	0x900242b8
90000c6c:	90024248 	.word	0x90024248

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e4 	beq.w	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e7 	bls.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80cf 	beq.w	90000e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80dc 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cbc:	18b1      	adds	r1, r6, r2
90000cbe:	5cb2      	ldrb	r2, [r6, r2]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80c0 	bcc.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d053      	beq.n	90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f008 fc6b 	bl	90009630 <HAL_JPEG_Decode_DMA>
    return 0;
90000d5a:	e008      	b.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 3000 	ldr.w	r3, [sl]
90000d60:	fab3 f383 	clz	r3, r3
90000d64:	095b      	lsrs	r3, r3, #5
90000d66:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d68:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d6a:	6833      	ldr	r3, [r6, #0]
90000d6c:	b9db      	cbnz	r3, 90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6e:	f8d9 3000 	ldr.w	r3, [r9]
90000d72:	b11b      	cbz	r3, 90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d74:	4b49      	ldr	r3, [pc, #292]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d76:	681b      	ldr	r3, [r3, #0]
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d161      	bne.n	90000e40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7c:	f8d8 3000 	ldr.w	r3, [r8]
90000d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d84:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d88:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8c:	2901      	cmp	r1, #1
90000d8e:	d024      	beq.n	90000dda <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000d90:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d92:	2b01      	cmp	r3, #1
90000d94:	d00b      	beq.n	90000dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d96:	683b      	ldr	r3, [r7, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d0df      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000d9c:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9e:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000da0:	6833      	ldr	r3, [r6, #0]
90000da2:	2b00      	cmp	r3, #0
90000da4:	d0e3      	beq.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000da6:	2001      	movs	r0, #1
90000da8:	b003      	add	sp, #12
90000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dae:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000db0:	681b      	ldr	r3, [r3, #0]
90000db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dba:	2b00      	cmp	r3, #0
90000dbc:	d1eb      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbe:	f8d8 3000 	ldr.w	r3, [r8]
90000dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	d1e3      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dce:	2102      	movs	r1, #2
90000dd0:	482f      	ldr	r0, [pc, #188]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000dd2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd4:	f008 fd74 	bl	900098c0 <HAL_JPEG_Resume>
90000dd8:	e7dd      	b.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dda:	f8da 1000 	ldr.w	r1, [sl]
90000dde:	2901      	cmp	r1, #1
90000de0:	d1d6      	bne.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000de2:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de6:	3301      	adds	r3, #1
      };
90000de8:	482a      	ldr	r0, [pc, #168]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000dea:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dee:	2b01      	cmp	r3, #1
      };
90000df0:	f8d0 e000 	ldr.w	lr, [r0]
90000df4:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df8:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfc:	bf88      	it	hi
90000dfe:	2300      	movhi	r3, #0
90000e00:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e04:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e08:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e0c:	2300      	movs	r3, #0
90000e0e:	604a      	str	r2, [r1, #4]
      count_++;
90000e10:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e14:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e18:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e1a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e22:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e26:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e28:	481a      	ldr	r0, [pc, #104]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e2a:	68c9      	ldr	r1, [r1, #12]
90000e2c:	6802      	ldr	r2, [r0, #0]
90000e2e:	440a      	add	r2, r1
90000e30:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e32:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e34:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e38:	6803      	ldr	r3, [r0, #0]
90000e3a:	691b      	ldr	r3, [r3, #16]
90000e3c:	4798      	blx	r3
90000e3e:	e7a7      	b.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e40:	2301      	movs	r3, #1
90000e42:	e791      	b.n	90000d68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e44:	230d      	movs	r3, #13
90000e46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e4a:	e72c      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e50:	f106 0308 	add.w	r3, r6, #8
90000e54:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e56:	4419      	add	r1, r3
90000e58:	e74f      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e5a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5c:	4b10      	ldr	r3, [pc, #64]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5e:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e60:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e66:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e68:	f022 f812 	bl	90022e90 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	463e      	mov	r6, r7
90000e6e:	e7ee      	b.n	90000e4e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e70:	24005ba0 	.word	0x24005ba0
90000e74:	24005b74 	.word	0x24005b74
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005b9c 	.word	0x24005b9c
90000e80:	24005b88 	.word	0x24005b88
90000e84:	24005b7c 	.word	0x24005b7c
90000e88:	24005b78 	.word	0x24005b78
90000e8c:	24005b80 	.word	0x24005b80
90000e90:	2400af00 	.word	0x2400af00
90000e94:	24005b94 	.word	0x24005b94
90000e98:	24005b8c 	.word	0x24005b8c
90000e9c:	24005b6c 	.word	0x24005b6c
90000ea0:	900242a4 	.word	0x900242a4
90000ea4:	900242b8 	.word	0x900242b8
90000ea8:	90024248 	.word	0x90024248
90000eac:	24005b84 	.word	0x24005b84
90000eb0:	24005b70 	.word	0x24005b70
90000eb4:	24005b90 	.word	0x24005b90
90000eb8:	24005bb4 	.word	0x24005bb4

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18a1      	adds	r1, r4, r2
90000f06:	5ca2      	ldrb	r2, [r4, r2]
90000f08:	788c      	ldrb	r4, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	0424      	lsls	r4, r4, #16
90000f0e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f12:	4314      	orrs	r4, r2
90000f14:	78ca      	ldrb	r2, [r1, #3]
90000f16:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f4e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f50:	188b      	adds	r3, r1, r2
90000f52:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2101      	moveq	r1, #1
90000f90:	2100      	movne	r1, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69ab      	ldr	r3, [r5, #24]
90000f96:	441c      	add	r4, r3
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fc4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fca:	4608      	mov	r0, r1
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d22      	adds	r2, r4, #4
90000fda:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	588c      	ldr	r4, [r1, r2]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f021 ff4e 	bl	90022e90 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	4614      	mov	r4, r2
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ec      	movs	r1, #236	; 0xec
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f021 ff46 	bl	90022e90 <__assert_func>
90001004:	900242a4 	.word	0x900242a4
90001008:	900242b8 	.word	0x900242b8
9000100c:	90024248 	.word	0x90024248
90001010:	900242fc 	.word	0x900242fc
90001014:	90024348 	.word	0x90024348

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 809b 	beq.w	9000115a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d061      	beq.n	900010f4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8097 	bls.w	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d04c      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d04b      	beq.n	900010f2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001066:	1b52      	subs	r2, r2, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000106a:	eb03 0e0c 	add.w	lr, r3, ip
9000106e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001072:	eb03 0805 	add.w	r8, r3, r5
90001076:	f813 c005 	ldrb.w	ip, [r3, r5]
9000107a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000107e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001082:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001086:	f89e 5002 	ldrb.w	r5, [lr, #2]
9000108a:	f89e e003 	ldrb.w	lr, [lr, #3]
9000108e:	042d      	lsls	r5, r5, #16
90001090:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001094:	433d      	orrs	r5, r7
90001096:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000109a:	eb03 0e02 	add.w	lr, r3, r2
9000109e:	5c9b      	ldrb	r3, [r3, r2]
900010a0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a8:	194a      	adds	r2, r1, r5
900010aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010ac:	f102 0e08 	add.w	lr, r2, #8
900010b0:	45be      	cmp	lr, r7
900010b2:	d213      	bcs.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010b4:	f243 0730 	movw	r7, #12336	; 0x3030
900010b8:	45bc      	cmp	ip, r7
900010ba:	d124      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010bc:	f246 3764 	movw	r7, #25444	; 0x6364
900010c0:	42bb      	cmp	r3, r7
900010c2:	d120      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010c4:	bb1d      	cbnz	r5, 9000110e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010c6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010cc:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010d0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010d2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010d4:	d002      	beq.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010d6:	2001      	movs	r0, #1
}
900010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010dc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010de:	6a23      	ldr	r3, [r4, #32]
900010e0:	2000      	movs	r0, #0
900010e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010ea:	230d      	movs	r3, #13
900010ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010f0:	e7ae      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010f2:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010f6:	4629      	mov	r1, r5
900010f8:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010fa:	f832 c005 	ldrh.w	ip, [r2, r5]
900010fe:	442a      	add	r2, r5
90001100:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001102:	6855      	ldr	r5, [r2, #4]
90001104:	e7d0      	b.n	900010a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001106:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001108:	2d00      	cmp	r5, #0
9000110a:	d1dd      	bne.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000110c:	e7db      	b.n	900010c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000110e:	f101 0708 	add.w	r7, r1, #8
90001112:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001114:	b1f0      	cbz	r0, 90001154 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001118:	429d      	cmp	r5, r3
9000111a:	d824      	bhi.n	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000111c:	6803      	ldr	r3, [r0, #0]
9000111e:	4639      	mov	r1, r7
90001120:	68db      	ldr	r3, [r3, #12]
90001122:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001126:	462a      	mov	r2, r5
90001128:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000112a:	6803      	ldr	r3, [r0, #0]
9000112c:	691b      	ldr	r3, [r3, #16]
9000112e:	4798      	blx	r3
90001130:	b910      	cbnz	r0, 90001138 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001132:	230d      	movs	r3, #13
90001134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000113a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000113c:	b126      	cbz	r6, 90001148 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000113e:	4633      	mov	r3, r6
90001140:	462a      	mov	r2, r5
90001142:	4620      	mov	r0, r4
90001144:	f7ff fc42 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001148:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000114c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000114e:	442a      	add	r2, r5
            frameNumber++;
90001150:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001152:	e7b9      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001156:	4439      	add	r1, r7
90001158:	e7f0      	b.n	9000113c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000115a:	4b07      	ldr	r3, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115c:	21b8      	movs	r1, #184	; 0xb8
9000115e:	4a07      	ldr	r2, [pc, #28]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001160:	4807      	ldr	r0, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001162:	f021 fe95 	bl	90022e90 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001168:	4b06      	ldr	r3, [pc, #24]	; (90001184 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000116a:	4a07      	ldr	r2, [pc, #28]	; (90001188 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000116c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000116e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001172:	4803      	ldr	r0, [pc, #12]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001174:	f021 fe8c 	bl	90022e90 <__assert_func>
90001178:	900242fc 	.word	0x900242fc
9000117c:	9002437c 	.word	0x9002437c
90001180:	90024248 	.word	0x90024248
90001184:	900242a4 	.word	0x900242a4
90001188:	900242b8 	.word	0x900242b8

9000118c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000118e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001190:	4b0f      	ldr	r3, [pc, #60]	; (900011d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001192:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001194:	6003      	str	r3, [r0, #0]
90001196:	63c5      	str	r5, [r0, #60]	; 0x3c
90001198:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000119c:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011a0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011a4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011a8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011ac:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011b0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b8:	f002 fa3e 	bl	90003638 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011bc:	462a      	mov	r2, r5
900011be:	4629      	mov	r1, r5
900011c0:	2001      	movs	r0, #1
900011c2:	f00c fa57 	bl	9000d674 <osSemaphoreNew>
900011c6:	4b03      	ldr	r3, [pc, #12]	; (900011d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c8:	4602      	mov	r2, r0
}
900011ca:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011cc:	601a      	str	r2, [r3, #0]
}
900011ce:	bd38      	pop	{r3, r4, r5, pc}
900011d0:	900244fc 	.word	0x900244fc
900011d4:	24005bd8 	.word	0x24005bd8

900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011dc:	2100      	movs	r1, #0
    if (reader != 0)
900011de:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011e0:	b083      	sub	sp, #12
900011e2:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011e4:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011ea:	2e00      	cmp	r6, #0
900011ec:	f000 81aa 	beq.w	90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
900011f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011f2:	2b47      	cmp	r3, #71	; 0x47
900011f4:	f240 8202 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900011f8:	6833      	ldr	r3, [r6, #0]
900011fa:	4630      	mov	r0, r6
900011fc:	68db      	ldr	r3, [r3, #12]
900011fe:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001200:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001202:	2248      	movs	r2, #72	; 0x48
90001204:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001206:	6803      	ldr	r3, [r0, #0]
90001208:	691b      	ldr	r3, [r3, #16]
9000120a:	4798      	blx	r3
9000120c:	2800      	cmp	r0, #0
9000120e:	f000 80ce 	beq.w	900013ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001212:	2300      	movs	r3, #0
    if (reader != 0)
90001214:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001216:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001218:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000121a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000121c:	2e00      	cmp	r6, #0
9000121e:	f000 8192 	beq.w	90001546 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001226:	2204      	movs	r2, #4
90001228:	49be      	ldr	r1, [pc, #760]	; (90001524 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000122a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000122e:	4658      	mov	r0, fp
90001230:	f022 f8d0 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001234:	2800      	cmp	r0, #0
90001236:	f040 81ea 	bne.w	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000123a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000123e:	2204      	movs	r2, #4
90001240:	49b9      	ldr	r1, [pc, #740]	; (90001528 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001242:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001244:	4440      	add	r0, r8
90001246:	f022 f8c5 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000124a:	2800      	cmp	r0, #0
9000124c:	f040 81fa 	bne.w	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001250:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001254:	2204      	movs	r2, #4
90001256:	49b5      	ldr	r1, [pc, #724]	; (9000152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001258:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000125c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001260:	f022 f8b8 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001264:	9001      	str	r0, [sp, #4]
90001266:	2800      	cmp	r0, #0
90001268:	f040 81e2 	bne.w	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000126c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001270:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001274:	0424      	lsls	r4, r4, #16
90001276:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000127a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000127e:	f89b 2010 	ldrb.w	r2, [fp, #16]
90001282:	4314      	orrs	r4, r2
    assert(aviListSize);
90001284:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001288:	f000 81cb 	beq.w	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
9000128c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001290:	2204      	movs	r2, #4
90001292:	49a7      	ldr	r1, [pc, #668]	; (90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
90001294:	4440      	add	r0, r8
90001296:	f022 f89d 	bl	900233d4 <strncmp>
    if (compare(offset, "hdrl", 4))
9000129a:	2800      	cmp	r0, #0
9000129c:	f000 808b 	beq.w	900013b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	2306      	movs	r3, #6
        foundFrame = false;
900012a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ae:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a0      	ldr	r1, [pc, #640]	; (90001534 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012b4:	f022 f88e 	bl	900233d4 <strncmp>
    if (compare(offset, "avih", 4))
900012b8:	2800      	cmp	r0, #0
900012ba:	f000 8085 	beq.w	900013c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012be:	2307      	movs	r3, #7
900012c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012c4:	4454      	add	r4, sl
900012c6:	3408      	adds	r4, #8
    if (reader != 0)
900012c8:	f1b9 0f00 	cmp.w	r9, #0
900012cc:	d015      	beq.n	900012fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012d0:	2b0b      	cmp	r3, #11
900012d2:	f240 8193 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012d6:	f8d9 3000 	ldr.w	r3, [r9]
900012da:	4621      	mov	r1, r4
900012dc:	4648      	mov	r0, r9
900012de:	68db      	ldr	r3, [r3, #12]
900012e0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012e4:	220c      	movs	r2, #12
900012e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e8:	6803      	ldr	r3, [r0, #0]
900012ea:	691b      	ldr	r3, [r3, #16]
900012ec:	4798      	blx	r3
900012ee:	b910      	cbnz	r0, 900012f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
900012f0:	230d      	movs	r3, #13
900012f2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f8:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
900012fa:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
900012fe:	4f8e      	ldr	r7, [pc, #568]	; (90001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001300:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001304:	2e00      	cmp	r6, #0
90001306:	d041      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001308:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000130a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000130e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001310:	eba8 0303 	sub.w	r3, r8, r3
90001314:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001316:	f022 f85d 	bl	900233d4 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131a:	2800      	cmp	r0, #0
9000131c:	d03e      	beq.n	9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000131e:	f1b9 0f00 	cmp.w	r9, #0
90001322:	d13e      	bne.n	900013a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001324:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001326:	42a3      	cmp	r3, r4
90001328:	f240 80a7 	bls.w	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000132c:	3404      	adds	r4, #4
    if (reader != 0)
9000132e:	2e00      	cmp	r6, #0
90001330:	d046      	beq.n	900013c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001332:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001334:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001338:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133c:	eb01 0204 	add.w	r2, r1, r4
90001340:	5d09      	ldrb	r1, [r1, r4]
90001342:	7894      	ldrb	r4, [r2, #2]
90001344:	7850      	ldrb	r0, [r2, #1]
90001346:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134a:	78d2      	ldrb	r2, [r2, #3]
9000134c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001350:	ea44 0401 	orr.w	r4, r4, r1
90001354:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001358:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000135a:	f240 814f 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000135e:	6833      	ldr	r3, [r6, #0]
90001360:	4621      	mov	r1, r4
90001362:	4630      	mov	r0, r6
90001364:	68db      	ldr	r3, [r3, #12]
90001366:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001368:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136a:	220c      	movs	r2, #12
9000136c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000136e:	6803      	ldr	r3, [r0, #0]
90001370:	691b      	ldr	r3, [r3, #16]
90001372:	4798      	blx	r3
90001374:	b910      	cbnz	r0, 9000137c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001376:	230d      	movs	r3, #13
90001378:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000137c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000137e:	f104 0808 	add.w	r8, r4, #8
90001382:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001386:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001388:	2e00      	cmp	r6, #0
9000138a:	d1bd      	bne.n	90001308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
9000138c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000138e:	2204      	movs	r2, #4
90001390:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
90001392:	4440      	add	r0, r8
    return strncmp(src, str, num);
90001394:	f022 f81e 	bl	900233d4 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001398:	2800      	cmp	r0, #0
9000139a:	d1c0      	bne.n	9000131e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
9000139c:	f1b9 0f00 	cmp.w	r9, #0
900013a0:	d06b      	beq.n	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013a2:	230a      	movs	r3, #10
900013a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013a8:	b003      	add	sp, #12
900013aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ae:	230d      	movs	r3, #13
900013b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013b4:	e72d      	b.n	90001212 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013b6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013ba:	f04f 0b01 	mov.w	fp, #1
900013be:	e776      	b.n	900012ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013c2:	591c      	ldr	r4, [r3, r4]
900013c4:	4444      	add	r4, r8
    return movieData + offset;
900013c6:	e79b      	b.n	90001300 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013c8:	f1bb 0f00 	cmp.w	fp, #0
900013cc:	f43f af7a 	beq.w	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013d0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d4:	f1b9 0f00 	cmp.w	r9, #0
900013d8:	f000 80f4 	beq.w	900015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013e0:	1ac9      	subs	r1, r1, r3
900013e2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900013e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013ea:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ee:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013f2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013fa:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	4439      	add	r1, r7
90001402:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001404:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001408:	f89e e003 	ldrb.w	lr, [lr, #3]
9000140c:	041b      	lsls	r3, r3, #16
9000140e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001412:	ea43 0308 	orr.w	r3, r3, r8
90001416:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000141a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001422:	099b      	lsrs	r3, r3, #6
90001424:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001426:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000142a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142e:	041b      	lsls	r3, r3, #16
90001430:	f812 e000 	ldrb.w	lr, [r2, r0]
90001434:	f89c c003 	ldrb.w	ip, [ip, #3]
90001438:	1850      	adds	r0, r2, r1
9000143a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143e:	ea43 030e 	orr.w	r3, r3, lr
90001442:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001446:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001448:	7883      	ldrb	r3, [r0, #2]
9000144a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	5c51      	ldrb	r1, [r2, r1]
90001452:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001456:	430b      	orrs	r3, r1
90001458:	78c1      	ldrb	r1, [r0, #3]
9000145a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001460:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001462:	788b      	ldrb	r3, [r1, #2]
90001464:	7848      	ldrb	r0, [r1, #1]
90001466:	041b      	lsls	r3, r3, #16
90001468:	5dd2      	ldrb	r2, [r2, r7]
9000146a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146e:	4313      	orrs	r3, r2
90001470:	78ca      	ldrb	r2, [r1, #3]
90001472:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001476:	612b      	str	r3, [r5, #16]
90001478:	e724      	b.n	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000147a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000147e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001480:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001482:	2e00      	cmp	r6, #0
90001484:	f000 80b2 	beq.w	900015ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
90001488:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000148a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000148c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001490:	f104 0c02 	add.w	ip, r4, #2
90001494:	1c67      	adds	r7, r4, #1
90001496:	f811 e004 	ldrb.w	lr, [r1, r4]
9000149a:	1ce0      	adds	r0, r4, #3
9000149c:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014a0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014a2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014a6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014aa:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ae:	ea43 030e 	orr.w	r3, r3, lr
900014b2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014ba:	4443      	add	r3, r8
900014bc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014be:	f811 300c 	ldrb.w	r3, [r1, ip]
900014c2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014c6:	5d0f      	ldrb	r7, [r1, r4]
900014c8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014cc:	5c09      	ldrb	r1, [r1, r0]
900014ce:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014d2:	ea44 0407 	orr.w	r4, r4, r7
900014d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014da:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014dc:	f240 808e 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900014e0:	6833      	ldr	r3, [r6, #0]
900014e2:	4621      	mov	r1, r4
900014e4:	4630      	mov	r0, r6
900014e6:	68db      	ldr	r3, [r3, #12]
900014e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014ec:	2204      	movs	r2, #4
900014ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014f0:	6803      	ldr	r3, [r0, #0]
900014f2:	691b      	ldr	r3, [r3, #16]
900014f4:	4798      	blx	r3
900014f6:	2800      	cmp	r0, #0
900014f8:	d05a      	beq.n	900015b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
900014fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900014fc:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900014fe:	2b00      	cmp	r3, #0
90001500:	f000 80aa 	beq.w	90001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001504:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001506:	2204      	movs	r2, #4
90001508:	490c      	ldr	r1, [pc, #48]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000150a:	f021 ff63 	bl	900233d4 <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000150e:	2800      	cmp	r0, #0
90001510:	d166      	bne.n	900015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001512:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001514:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001516:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001518:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000151a:	622b      	str	r3, [r5, #32]
}
9000151c:	b003      	add	sp, #12
9000151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001522:	bf00      	nop
90001524:	900243d8 	.word	0x900243d8
90001528:	90024490 	.word	0x90024490
9000152c:	90024488 	.word	0x90024488
90001530:	90024480 	.word	0x90024480
90001534:	90024468 	.word	0x90024468
90001538:	90024470 	.word	0x90024470
9000153c:	90024478 	.word	0x90024478
90001540:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001544:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001546:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000154a:	2204      	movs	r2, #4
9000154c:	4944      	ldr	r1, [pc, #272]	; (90001660 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000154e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001552:	4620      	mov	r0, r4
90001554:	f021 ff3e 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001558:	2800      	cmp	r0, #0
9000155a:	d158      	bne.n	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000155c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001560:	2204      	movs	r2, #4
90001562:	4940      	ldr	r1, [pc, #256]	; (90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001564:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001566:	4440      	add	r0, r8
90001568:	f021 ff34 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000156c:	2800      	cmp	r0, #0
9000156e:	d169      	bne.n	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001570:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001574:	2204      	movs	r2, #4
90001576:	493c      	ldr	r1, [pc, #240]	; (90001668 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001578:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000157c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001580:	f021 ff28 	bl	900233d4 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001584:	4683      	mov	fp, r0
90001586:	2800      	cmp	r0, #0
90001588:	d152      	bne.n	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000158a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000158c:	2c00      	cmp	r4, #0
9000158e:	d048      	beq.n	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
90001590:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	4935      	ldr	r1, [pc, #212]	; (9000166c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90001598:	4440      	add	r0, r8
9000159a:	f021 ff1b 	bl	900233d4 <strncmp>
    if (compare(offset, "hdrl", 4))
9000159e:	b958      	cbnz	r0, 900015b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015a0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015a4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015a8:	4440      	add	r0, r8
900015aa:	f04f 0900 	mov.w	r9, #0
900015ae:	e67f      	b.n	900012b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015b0:	230d      	movs	r3, #13
900015b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015b6:	e7a0      	b.n	900014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015b8:	2306      	movs	r3, #6
    offset += 4;
900015ba:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015c2:	e7f1      	b.n	900015a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015c6:	585a      	ldr	r2, [r3, r1]
900015c8:	443b      	add	r3, r7
900015ca:	4929      	ldr	r1, [pc, #164]	; (90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015cc:	fba1 1202 	umull	r1, r2, r1, r2
900015d0:	0992      	lsrs	r2, r2, #6
900015d2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015d6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015da:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015de:	e74a      	b.n	90001476 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015e0:	230b      	movs	r3, #11
900015e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015e6:	b003      	add	sp, #12
900015e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900015ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900015ee:	5903      	ldr	r3, [r0, r4]
900015f0:	4443      	add	r3, r8
900015f2:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900015f4:	5904      	ldr	r4, [r0, r4]
900015f6:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
900015f8:	4420      	add	r0, r4
900015fa:	e784      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900015fc:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900015fe:	4b1d      	ldr	r3, [pc, #116]	; (90001674 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001600:	4a1d      	ldr	r2, [pc, #116]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001602:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001604:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001608:	481c      	ldr	r0, [pc, #112]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000160a:	f021 fc41 	bl	90022e90 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000160e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001610:	4b1b      	ldr	r3, [pc, #108]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001612:	4a1c      	ldr	r2, [pc, #112]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001614:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001618:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000161c:	4817      	ldr	r0, [pc, #92]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000161e:	f021 fc37 	bl	90022e90 <__assert_func>
    assert(aviListSize);
90001622:	4b19      	ldr	r3, [pc, #100]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001624:	f240 1149 	movw	r1, #329	; 0x149
90001628:	4a16      	ldr	r2, [pc, #88]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000162a:	4814      	ldr	r0, [pc, #80]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162c:	f021 fc30 	bl	90022e90 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001630:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001632:	4b16      	ldr	r3, [pc, #88]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001634:	4a13      	ldr	r2, [pc, #76]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001636:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000163a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000163e:	480f      	ldr	r0, [pc, #60]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001640:	f021 fc26 	bl	90022e90 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001644:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001646:	4b12      	ldr	r3, [pc, #72]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001648:	4a0e      	ldr	r2, [pc, #56]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000164e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001652:	480a      	ldr	r0, [pc, #40]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001654:	f021 fc1c 	bl	90022e90 <__assert_func>
        src = (const char*)movieData + offset;
90001658:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000165a:	4420      	add	r0, r4
9000165c:	e753      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000165e:	bf00      	nop
90001660:	900243d8 	.word	0x900243d8
90001664:	90024490 	.word	0x90024490
90001668:	90024488 	.word	0x90024488
9000166c:	90024480 	.word	0x90024480
90001670:	10624dd3 	.word	0x10624dd3
90001674:	900242a4 	.word	0x900242a4
90001678:	900242b8 	.word	0x900242b8
9000167c:	90024248 	.word	0x90024248
90001680:	900243e0 	.word	0x900243e0
90001684:	900243fc 	.word	0x900243fc
90001688:	9002445c 	.word	0x9002445c
9000168c:	90024444 	.word	0x90024444
90001690:	9002442c 	.word	0x9002442c

90001694 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001694:	b410      	push	{r4}
    reader = 0; //not using reader
90001696:	2400      	movs	r4, #0
    movieLength = length;
90001698:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
9000169c:	6304      	str	r4, [r0, #48]	; 0x30
}
9000169e:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016a2:	f7ff bd99 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016a6:	bf00      	nop

900016a8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016a8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016aa:	680b      	ldr	r3, [r1, #0]
{
900016ac:	4604      	mov	r4, r0
    movieData = 0;
900016ae:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016b0:	4608      	mov	r0, r1
900016b2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016b4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016b8:	4798      	blx	r3
900016ba:	4603      	mov	r3, r0
    readVideoHeader();
900016bc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016be:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016c4:	f7ff bd88 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016c8 <HAL_JPEG_InfoReadyCallback>:
{
900016c8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ca:	684b      	ldr	r3, [r1, #4]
{
900016cc:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ce:	2b01      	cmp	r3, #1
900016d0:	d01a      	beq.n	90001708 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016d2:	2b02      	cmp	r3, #2
900016d4:	d010      	beq.n	900016f8 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016d6:	b94b      	cbnz	r3, 900016ec <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016d8:	68cb      	ldr	r3, [r1, #12]
900016da:	0759      	lsls	r1, r3, #29
900016dc:	d12f      	bne.n	9000173e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016de:	6883      	ldr	r3, [r0, #8]
900016e0:	075a      	lsls	r2, r3, #29
900016e2:	d003      	beq.n	900016ec <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016e4:	f023 0307 	bic.w	r3, r3, #7
900016e8:	3308      	adds	r3, #8
900016ea:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
900016ec:	4a1a      	ldr	r2, [pc, #104]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
900016ee:	491b      	ldr	r1, [pc, #108]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
900016f0:	f00f fc50 	bl	90010f94 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
900016f4:	bb40      	cbnz	r0, 90001748 <HAL_JPEG_InfoReadyCallback+0x80>
}
900016f6:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	071a      	lsls	r2, r3, #28
900016fc:	d0ef      	beq.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900016fe:	f023 030f 	bic.w	r3, r3, #15
90001702:	3310      	adds	r3, #16
90001704:	60cb      	str	r3, [r1, #12]
90001706:	e7ea      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001708:	68cb      	ldr	r3, [r1, #12]
9000170a:	071a      	lsls	r2, r3, #28
9000170c:	d003      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000170e:	f023 030f 	bic.w	r3, r3, #15
90001712:	3310      	adds	r3, #16
90001714:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001716:	6883      	ldr	r3, [r0, #8]
90001718:	0719      	lsls	r1, r3, #28
9000171a:	d003      	beq.n	90001724 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000171c:	f023 030f 	bic.w	r3, r3, #15
90001720:	3310      	adds	r3, #16
90001722:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001724:	4a0c      	ldr	r2, [pc, #48]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
90001726:	490d      	ldr	r1, [pc, #52]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
90001728:	f001 fefa 	bl	90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000172c:	2800      	cmp	r0, #0
9000172e:	d0e2      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001730:	4b0b      	ldr	r3, [pc, #44]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
90001732:	f240 212e 	movw	r1, #558	; 0x22e
90001736:	4a0b      	ldr	r2, [pc, #44]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001738:	480b      	ldr	r0, [pc, #44]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000173a:	f021 fba9 	bl	90022e90 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000173e:	f023 0307 	bic.w	r3, r3, #7
90001742:	3308      	adds	r3, #8
90001744:	60c3      	str	r3, [r0, #12]
90001746:	e7ca      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001748:	4b05      	ldr	r3, [pc, #20]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000174e:	4a05      	ldr	r2, [pc, #20]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	4805      	ldr	r0, [pc, #20]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f021 fb9d 	bl	90022e90 <__assert_func>
90001756:	bf00      	nop
90001758:	24005b98 	.word	0x24005b98
9000175c:	24005bd4 	.word	0x24005bd4
90001760:	90024498 	.word	0x90024498
90001764:	900244ac 	.word	0x900244ac
90001768:	90024248 	.word	0x90024248

9000176c <HAL_JPEG_GetDataCallback>:
{
9000176c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000176e:	4c0c      	ldr	r4, [pc, #48]	; (900017a0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001770:	4a0c      	ldr	r2, [pc, #48]	; (900017a4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001772:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001774:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001776:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001778:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000177a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000177c:	d302      	bcc.n	90001784 <HAL_JPEG_GetDataCallback+0x18>
}
9000177e:	f85d 4b04 	ldr.w	r4, [sp], #4
90001782:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
90001784:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001786:	4b08      	ldr	r3, [pc, #32]	; (900017a8 <HAL_JPEG_GetDataCallback+0x3c>)
90001788:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000178a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000178e:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001790:	bf28      	it	cs
90001792:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179a:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000179c:	f007 bfc2 	b.w	90009724 <HAL_JPEG_ConfigInputBuffer>
900017a0:	24005b7c 	.word	0x24005b7c
900017a4:	24005b80 	.word	0x24005b80
900017a8:	24005b78 	.word	0x24005b78

900017ac <HAL_JPEG_DataReadyCallback>:
{
900017ac:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ae:	4e1e      	ldr	r6, [pc, #120]	; (90001828 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017b0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017b2:	2001      	movs	r0, #1
900017b4:	4c1d      	ldr	r4, [pc, #116]	; (9000182c <HAL_JPEG_DataReadyCallback+0x80>)
900017b6:	6833      	ldr	r3, [r6, #0]
900017b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017bc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017be:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017c2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017c8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ca:	d91a      	bls.n	90001802 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017cc:	2200      	movs	r2, #0
900017ce:	4613      	mov	r3, r2
900017d0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017d6:	005a      	lsls	r2, r3, #1
900017d8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017dc:	b9c9      	cbnz	r1, 90001812 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017de:	4914      	ldr	r1, [pc, #80]	; (90001830 <HAL_JPEG_DataReadyCallback+0x84>)
900017e0:	4413      	add	r3, r2
900017e2:	4628      	mov	r0, r5
900017e4:	68ca      	ldr	r2, [r1, #12]
900017e6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
900017ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900017ee:	6861      	ldr	r1, [r4, #4]
900017f0:	01d2      	lsls	r2, r2, #7
900017f2:	f007 ff9b 	bl	9000972c <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
900017f6:	4b0f      	ldr	r3, [pc, #60]	; (90001834 <HAL_JPEG_DataReadyCallback+0x88>)
}
900017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
900017fc:	6818      	ldr	r0, [r3, #0]
900017fe:	f00b bfbd 	b.w	9000d77c <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001802:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001806:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001808:	005a      	lsls	r2, r3, #1
9000180a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000180e:	2900      	cmp	r1, #0
90001810:	d0e5      	beq.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001812:	2102      	movs	r1, #2
90001814:	4628      	mov	r0, r5
90001816:	f007 ff4d 	bl	900096b4 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000181a:	4a07      	ldr	r2, [pc, #28]	; (90001838 <HAL_JPEG_DataReadyCallback+0x8c>)
9000181c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000181e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001820:	6011      	str	r1, [r2, #0]
90001822:	fa03 f201 	lsl.w	r2, r3, r1
90001826:	e7da      	b.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
90001828:	24005b88 	.word	0x24005b88
9000182c:	24000004 	.word	0x24000004
90001830:	24005ba0 	.word	0x24005ba0
90001834:	24005bd8 	.word	0x24005bd8
90001838:	24005b9c 	.word	0x24005b9c

9000183c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000183c:	b672      	cpsid	i
  while (1)
9000183e:	e7fe      	b.n	9000183e <HAL_JPEG_ErrorCallback+0x2>

90001840 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001840:	4b01      	ldr	r3, [pc, #4]	; (90001848 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001842:	2201      	movs	r2, #1
90001844:	601a      	str	r2, [r3, #0]
}
90001846:	4770      	bx	lr
90001848:	24005b90 	.word	0x24005b90

9000184c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000184c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000184e:	491b      	ldr	r1, [pc, #108]	; (900018bc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001850:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001852:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001854:	4c1a      	ldr	r4, [pc, #104]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001856:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001858:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000185c:	4e19      	ldr	r6, [pc, #100]	; (900018c4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001862:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001866:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001868:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000186a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000186e:	68cb      	ldr	r3, [r1, #12]
90001870:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001874:	690e      	ldr	r6, [r1, #16]
90001876:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000187c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001880:	d317      	bcc.n	900018b2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001882:	6889      	ldr	r1, [r1, #8]
90001884:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001888:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000188a:	490f      	ldr	r1, [pc, #60]	; (900018c8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
9000188c:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001890:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
90001892:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001894:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001896:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001898:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000189a:	4411      	add	r1, r2
9000189c:	4a08      	ldr	r2, [pc, #32]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
9000189e:	4461      	add	r1, ip
900018a0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018a4:	4909      	ldr	r1, [pc, #36]	; (900018cc <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018a6:	4b0a      	ldr	r3, [pc, #40]	; (900018d0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018a8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018aa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018ac:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ae:	6013      	str	r3, [r2, #0]
}
900018b0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018b2:	0519      	lsls	r1, r3, #20
900018b4:	f041 0110 	orr.w	r1, r1, #16
900018b8:	6461      	str	r1, [r4, #68]	; 0x44
900018ba:	e7e6      	b.n	9000188a <DMA2D_CopyBuffer+0x3e>
900018bc:	24005ba0 	.word	0x24005ba0
900018c0:	52001000 	.word	0x52001000
900018c4:	24005b98 	.word	0x24005b98
900018c8:	24005b74 	.word	0x24005b74
900018cc:	ff09000b 	.word	0xff09000b
900018d0:	00010201 	.word	0x00010201

900018d4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018d4:	2200      	movs	r2, #0
900018d6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018d8:	490b      	ldr	r1, [pc, #44]	; (90001908 <DMA2D_ExternalJobCompleted+0x34>)
900018da:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018dc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018de:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
900018e0:	b911      	cbnz	r1, 900018e8 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
900018e2:	4b0a      	ldr	r3, [pc, #40]	; (9000190c <DMA2D_ExternalJobCompleted+0x38>)
900018e4:	2201      	movs	r2, #1
900018e6:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
900018e8:	4b09      	ldr	r3, [pc, #36]	; (90001910 <DMA2D_ExternalJobCompleted+0x3c>)
900018ea:	490a      	ldr	r1, [pc, #40]	; (90001914 <DMA2D_ExternalJobCompleted+0x40>)
900018ec:	681b      	ldr	r3, [r3, #0]
900018ee:	68c9      	ldr	r1, [r1, #12]
900018f0:	6802      	ldr	r2, [r0, #0]
900018f2:	1a5b      	subs	r3, r3, r1
900018f4:	429a      	cmp	r2, r3
900018f6:	d302      	bcc.n	900018fe <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
900018f8:	4b07      	ldr	r3, [pc, #28]	; (90001918 <DMA2D_ExternalJobCompleted+0x44>)
900018fa:	2201      	movs	r2, #1
900018fc:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
900018fe:	4b07      	ldr	r3, [pc, #28]	; (9000191c <DMA2D_ExternalJobCompleted+0x48>)
90001900:	6818      	ldr	r0, [r3, #0]
90001902:	f00b bf3b 	b.w	9000d77c <osSemaphoreRelease>
90001906:	bf00      	nop
90001908:	24005bb4 	.word	0x24005bb4
9000190c:	24005b70 	.word	0x24005b70
90001910:	24005b98 	.word	0x24005b98
90001914:	24005ba0 	.word	0x24005ba0
90001918:	24005b6c 	.word	0x24005b6c
9000191c:	24005bd8 	.word	0x24005bd8

90001920 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001920:	4b03      	ldr	r3, [pc, #12]	; (90001930 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001922:	2200      	movs	r2, #0
90001924:	2102      	movs	r1, #2
90001926:	60da      	str	r2, [r3, #12]
90001928:	6019      	str	r1, [r3, #0]
9000192a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000192e:	4770      	bx	lr
90001930:	24005bb4 	.word	0x24005bb4

90001934 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001934:	2101      	movs	r1, #1
90001936:	2200      	movs	r2, #0
{
90001938:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000193a:	4608      	mov	r0, r1
9000193c:	f00b fe9a 	bl	9000d674 <osSemaphoreNew>
90001940:	4b0b      	ldr	r3, [pc, #44]	; (90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001942:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001944:	b140      	cbz	r0, 90001958 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001946:	2200      	movs	r2, #0
90001948:	2104      	movs	r1, #4
9000194a:	2001      	movs	r0, #1
9000194c:	f00b ff42 	bl	9000d7d4 <osMessageQueueNew>
90001950:	4b08      	ldr	r3, [pc, #32]	; (90001974 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001952:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001954:	b130      	cbz	r0, 90001964 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001956:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001958:	4b07      	ldr	r3, [pc, #28]	; (90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000195a:	2128      	movs	r1, #40	; 0x28
9000195c:	4a07      	ldr	r2, [pc, #28]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000195e:	4808      	ldr	r0, [pc, #32]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001960:	f021 fa96 	bl	90022e90 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001964:	4b07      	ldr	r3, [pc, #28]	; (90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001966:	212c      	movs	r1, #44	; 0x2c
90001968:	4a04      	ldr	r2, [pc, #16]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000196a:	4805      	ldr	r0, [pc, #20]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000196c:	f021 fa90 	bl	90022e90 <__assert_func>
90001970:	24005be0 	.word	0x24005be0
90001974:	24005bdc 	.word	0x24005bdc
90001978:	90024538 	.word	0x90024538
9000197c:	90024584 	.word	0x90024584
90001980:	900245b4 	.word	0x900245b4
90001984:	90024608 	.word	0x90024608

90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001988:	4b02      	ldr	r3, [pc, #8]	; (90001994 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
9000198a:	f04f 31ff 	mov.w	r1, #4294967295
9000198e:	6818      	ldr	r0, [r3, #0]
90001990:	f00b bec0 	b.w	9000d714 <osSemaphoreAcquire>
90001994:	24005be0 	.word	0x24005be0

90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001998:	4b01      	ldr	r3, [pc, #4]	; (900019a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
9000199a:	6818      	ldr	r0, [r3, #0]
9000199c:	f00b beee 	b.w	9000d77c <osSemaphoreRelease>
900019a0:	24005be0 	.word	0x24005be0

900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019a4:	4b02      	ldr	r3, [pc, #8]	; (900019b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019a6:	2100      	movs	r1, #0
900019a8:	6818      	ldr	r0, [r3, #0]
900019aa:	f00b beb3 	b.w	9000d714 <osSemaphoreAcquire>
900019ae:	bf00      	nop
900019b0:	24005be0 	.word	0x24005be0

900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019b4:	4b01      	ldr	r3, [pc, #4]	; (900019bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019b6:	6818      	ldr	r0, [r3, #0]
900019b8:	f00b bee0 	b.w	9000d77c <osSemaphoreRelease>
900019bc:	24005be0 	.word	0x24005be0

900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019c0:	4803      	ldr	r0, [pc, #12]	; (900019d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019c2:	2300      	movs	r3, #0
900019c4:	4903      	ldr	r1, [pc, #12]	; (900019d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019c6:	461a      	mov	r2, r3
900019c8:	6800      	ldr	r0, [r0, #0]
900019ca:	f00b bf41 	b.w	9000d850 <osMessageQueuePut>
900019ce:	bf00      	nop
900019d0:	24005bdc 	.word	0x24005bdc
900019d4:	2400001c 	.word	0x2400001c

900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019d8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019da:	2300      	movs	r3, #0
{
900019dc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019de:	4c07      	ldr	r4, [pc, #28]	; (900019fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019e0:	461a      	mov	r2, r3
900019e2:	a901      	add	r1, sp, #4
900019e4:	6820      	ldr	r0, [r4, #0]
900019e6:	f00b ff75 	bl	9000d8d4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
900019ea:	f04f 33ff 	mov.w	r3, #4294967295
900019ee:	2200      	movs	r2, #0
900019f0:	a901      	add	r1, sp, #4
900019f2:	6820      	ldr	r0, [r4, #0]
900019f4:	f00b ff6e 	bl	9000d8d4 <osMessageQueueGet>
}
900019f8:	b002      	add	sp, #8
900019fa:	bd10      	pop	{r4, pc}
900019fc:	24005bdc 	.word	0x24005bdc

90001a00 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a00:	6803      	ldr	r3, [r0, #0]
90001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a04:	4718      	bx	r3
90001a06:	bf00      	nop

90001a08 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a08:	2001      	movs	r0, #1
90001a0a:	4770      	bx	lr

90001a0c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a0c:	4905      	ldr	r1, [pc, #20]	; (90001a24 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a12:	4b05      	ldr	r3, [pc, #20]	; (90001a28 <_ZN8STM32DMAD1Ev+0x1c>)
90001a14:	6001      	str	r1, [r0, #0]
90001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a1e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a22:	4770      	bx	lr
90001a24:	900247b4 	.word	0x900247b4
90001a28:	e000e100 	.word	0xe000e100

90001a2c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a2c:	4b0f      	ldr	r3, [pc, #60]	; (90001a6c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a2e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a30:	490f      	ldr	r1, [pc, #60]	; (90001a70 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a36:	480f      	ldr	r0, [pc, #60]	; (90001a74 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a38:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a3c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a46:	f002 0210 	and.w	r2, r2, #16
90001a4a:	9201      	str	r2, [sp, #4]
90001a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a50:	f042 0210 	orr.w	r2, r2, #16
90001a54:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a58:	f022 0210 	bic.w	r2, r2, #16
90001a5c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a5e:	4b06      	ldr	r3, [pc, #24]	; (90001a78 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a64:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a66:	b002      	add	sp, #8
90001a68:	4770      	bx	lr
90001a6a:	bf00      	nop
90001a6c:	58024400 	.word	0x58024400
90001a70:	2400ae98 	.word	0x2400ae98
90001a74:	90001e25 	.word	0x90001e25
90001a78:	e000e100 	.word	0xe000e100

90001a7c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a7c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop

90001a84 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a84:	4909      	ldr	r1, [pc, #36]	; (90001aac <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a8a:	4b09      	ldr	r3, [pc, #36]	; (90001ab0 <_ZN8STM32DMAD0Ev+0x2c>)
90001a8c:	b510      	push	{r4, lr}
90001a8e:	6001      	str	r1, [r0, #0]
90001a90:	4604      	mov	r4, r0
90001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a9a:	f3bf 8f6f 	isb	sy
}
90001a9e:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aa2:	f021 f9c6 	bl	90022e32 <_ZdlPvj>
90001aa6:	4620      	mov	r0, r4
90001aa8:	bd10      	pop	{r4, pc}
90001aaa:	bf00      	nop
90001aac:	900247b4 	.word	0x900247b4
90001ab0:	e000e100 	.word	0xe000e100

90001ab4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ab4:	b510      	push	{r4, lr}
90001ab6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ab8:	f04f 31ff 	mov.w	r1, #4294967295
90001abc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ac0:	f00b fd92 	bl	9000d5e8 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ac4:	6860      	ldr	r0, [r4, #4]
90001ac6:	6803      	ldr	r3, [r0, #0]
90001ac8:	681b      	ldr	r3, [r3, #0]
90001aca:	4798      	blx	r3
90001acc:	b978      	cbnz	r0, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ace:	7a63      	ldrb	r3, [r4, #9]
90001ad0:	b16b      	cbz	r3, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ad2:	7a23      	ldrb	r3, [r4, #8]
90001ad4:	b92b      	cbnz	r3, 90001ae2 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001ad6:	6822      	ldr	r2, [r4, #0]
90001ad8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001ada:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001ade:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001ae0:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001ae2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001aea:	f00b bda1 	b.w	9000d630 <osMutexRelease>
      return count_ == 0;
90001aee:	4b0b      	ldr	r3, [pc, #44]	; (90001b1c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001af0:	68da      	ldr	r2, [r3, #12]
90001af2:	2a00      	cmp	r2, #0
90001af4:	d0f5      	beq.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
90001af6:	7a22      	ldrb	r2, [r4, #8]
90001af8:	2a00      	cmp	r2, #0
90001afa:	d1f2      	bne.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001afc:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001afe:	2201      	movs	r2, #1
      return buffer_[head_];
90001b00:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b02:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b06:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b0c:	f7ff fe9e 	bl	9000184c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b10:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b18:	f00b bd8a 	b.w	9000d630 <osMutexRelease>
90001b1c:	24005bb4 	.word	0x24005bb4

90001b20 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b20:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b22:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b26:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b28:	b943      	cbnz	r3, 90001b3c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b2a:	6803      	ldr	r3, [r0, #0]
90001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b2e:	4798      	blx	r3
      return count_ == 0;
90001b30:	4b15      	ldr	r3, [pc, #84]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b32:	68da      	ldr	r2, [r3, #12]
90001b34:	b10a      	cbz	r2, 90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b36:	7a22      	ldrb	r2, [r4, #8]
90001b38:	b1d2      	cbz	r2, 90001b70 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b3a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b3c:	4b12      	ldr	r3, [pc, #72]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b3e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b40:	2a00      	cmp	r2, #0
90001b42:	d0fa      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b44:	7a01      	ldrb	r1, [r0, #8]
90001b46:	2900      	cmp	r1, #0
90001b48:	d0f7      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b4a:	2100      	movs	r1, #0
      count_--;
90001b4c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b4e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b52:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b54:	1c41      	adds	r1, r0, #1
      count_--;
90001b56:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b58:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b5a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b5e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b66:	6059      	str	r1, [r3, #4]
    }
90001b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b6c:	f7ff beb2 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b70:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b72:	2201      	movs	r2, #1
      return buffer_[head_];
90001b74:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b76:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b7a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b7c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b84:	f7ff be62 	b.w	9000184c <DMA2D_CopyBuffer>
90001b88:	24005bb4 	.word	0x24005bb4

90001b8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001b8c:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001b8e:	7f8b      	ldrb	r3, [r1, #30]
90001b90:	2b0a      	cmp	r3, #10
90001b92:	d83e      	bhi.n	90001c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001b94:	e8df f003 	tbb	[pc, r3]
90001b98:	3d2a063b 	.word	0x3d2a063b
90001b9c:	063d3d3d 	.word	0x063d3d3d
90001ba0:	0606      	.short	0x0606
90001ba2:	06          	.byte	0x06
90001ba3:	00          	.byte	0x00
90001ba4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ba6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001baa:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bac:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bae:	4b1c      	ldr	r3, [pc, #112]	; (90001c20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bb4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bb8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bba:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bbc:	6908      	ldr	r0, [r1, #16]
90001bbe:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bc2:	680d      	ldr	r5, [r1, #0]
90001bc4:	2d08      	cmp	r5, #8
90001bc6:	d013      	beq.n	90001bf0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001bc8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bca:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bcc:	4c15      	ldr	r4, [pc, #84]	; (90001c24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bce:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bd0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bd2:	0a0a      	lsrs	r2, r1, #8
90001bd4:	0948      	lsrs	r0, r1, #5
90001bd6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bda:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001be2:	4302      	orrs	r2, r0
90001be4:	430a      	orrs	r2, r1
90001be6:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be8:	601c      	str	r4, [r3, #0]
    }
}
90001bea:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001bec:	2400      	movs	r4, #0
90001bee:	e7da      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf0:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001bf4:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001bf6:	4a0c      	ldr	r2, [pc, #48]	; (90001c28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001bf8:	7f0c      	ldrb	r4, [r1, #28]
90001bfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001bfe:	4c0b      	ldr	r4, [pc, #44]	; (90001c2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c00:	61da      	str	r2, [r3, #28]
90001c02:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c04:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c06:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c08:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c0a:	601c      	str	r4, [r3, #0]
}
90001c0c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c0e:	2402      	movs	r4, #2
90001c10:	e7c9      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c12:	4b07      	ldr	r3, [pc, #28]	; (90001c30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c14:	2188      	movs	r1, #136	; 0x88
90001c16:	4a07      	ldr	r2, [pc, #28]	; (90001c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c18:	4807      	ldr	r0, [pc, #28]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c1a:	f021 f939 	bl	90022e90 <__assert_func>
90001c1e:	bf00      	nop
90001c20:	52001000 	.word	0x52001000
90001c24:	00030201 	.word	0x00030201
90001c28:	00010009 	.word	0x00010009
90001c2c:	00020201 	.word	0x00020201
90001c30:	9002464c 	.word	0x9002464c
90001c34:	90024668 	.word	0x90024668
90001c38:	900246b4 	.word	0x900246b4

90001c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c3e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c42:	f1be 0f0b 	cmp.w	lr, #11
90001c46:	f200 80c1 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c4a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c4e:	0063      	.short	0x0063
90001c50:	004c0065 	.word	0x004c0065
90001c54:	00bf00bf 	.word	0x00bf00bf
90001c58:	00bf00bf 	.word	0x00bf00bf
90001c5c:	000c000c 	.word	0x000c000c
90001c60:	000c000c 	.word	0x000c000c
90001c64:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c66:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c68:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c6c:	f1bc 0f0b 	cmp.w	ip, #11
90001c70:	f200 80ac 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c74:	e8df f00c 	tbb	[pc, ip]
90001c78:	aa0e4b52 	.word	0xaa0e4b52
90001c7c:	06aaaaaa 	.word	0x06aaaaaa
90001c80:	06060606 	.word	0x06060606
    switch (format)
90001c84:	f1ac 0307 	sub.w	r3, ip, #7
90001c88:	2b03      	cmp	r3, #3
90001c8a:	f200 80a5 	bhi.w	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001c8e:	2605      	movs	r6, #5
90001c90:	2701      	movs	r7, #1
90001c92:	e001      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001c94:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c96:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c98:	8a8b      	ldrh	r3, [r1, #20]
90001c9a:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001c9c:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001c9e:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001ca2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ca4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca8:	4b52      	ldr	r3, [pc, #328]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001caa:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cac:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cae:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cb0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cb2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cb6:	6908      	ldr	r0, [r1, #16]
90001cb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cba:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cbc:	680a      	ldr	r2, [r1, #0]
90001cbe:	2a80      	cmp	r2, #128	; 0x80
90001cc0:	d03b      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cc2:	d812      	bhi.n	90001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cc4:	2a20      	cmp	r2, #32
90001cc6:	d02c      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cc8:	2a40      	cmp	r2, #64	; 0x40
90001cca:	d02a      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ccc:	2a04      	cmp	r2, #4
90001cce:	d169      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cd2:	4949      	ldr	r1, [pc, #292]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cdc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cde:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ce0:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ce2:	6019      	str	r1, [r3, #0]
}
90001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001ce6:	2500      	movs	r5, #0
90001ce8:	e7be      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001cea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001cee:	d067      	beq.n	90001dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001cf0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001cf4:	d156      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf6:	7f0c      	ldrb	r4, [r1, #28]
90001cf8:	4a40      	ldr	r2, [pc, #256]	; (90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001cfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001cfe:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d00:	4a3d      	ldr	r2, [pc, #244]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d02:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d04:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d06:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d08:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d0a:	601a      	str	r2, [r3, #0]
}
90001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d0e:	2601      	movs	r6, #1
90001d10:	4637      	mov	r7, r6
90001d12:	e7c1      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d14:	2502      	movs	r5, #2
90001d16:	e7a7      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d18:	2501      	movs	r5, #1
90001d1a:	e7a5      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d1c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d1e:	4637      	mov	r7, r6
90001d20:	e7ba      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d22:	7f0b      	ldrb	r3, [r1, #28]
90001d24:	4a33      	ldr	r2, [pc, #204]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d26:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d2e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d30:	4b31      	ldr	r3, [pc, #196]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d32:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d34:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d36:	6013      	str	r3, [r2, #0]
}
90001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d3a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d3c:	1d14      	adds	r4, r2, #4
90001d3e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d40:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d42:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d48:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d4c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d50:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d52:	b9b1      	cbnz	r1, 90001d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d54:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d56:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d58:	69d8      	ldr	r0, [r3, #28]
90001d5a:	4a29      	ldr	r2, [pc, #164]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d5c:	3901      	subs	r1, #1
90001d5e:	4002      	ands	r2, r0
90001d60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d64:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d66:	4a23      	ldr	r2, [pc, #140]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d68:	69d3      	ldr	r3, [r2, #28]
90001d6a:	f043 0320 	orr.w	r3, r3, #32
90001d6e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d70:	69d3      	ldr	r3, [r2, #28]
90001d72:	069b      	lsls	r3, r3, #26
90001d74:	d4fc      	bmi.n	90001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d76:	2310      	movs	r3, #16
90001d78:	6093      	str	r3, [r2, #8]
            if(blend)
90001d7a:	b324      	cbz	r4, 90001dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d7c:	4b1e      	ldr	r3, [pc, #120]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d7e:	6013      	str	r3, [r2, #0]
}
90001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d82:	2901      	cmp	r1, #1
90001d84:	d12e      	bne.n	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d86:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001d88:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d8a:	69d8      	ldr	r0, [r3, #28]
90001d8c:	4a1c      	ldr	r2, [pc, #112]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d8e:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001d92:	bf18      	it	ne
90001d94:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d96:	4002      	ands	r2, r0
90001d98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d9c:	f042 0210 	orr.w	r2, r2, #16
90001da0:	61da      	str	r2, [r3, #28]
                break;
90001da2:	e7e0      	b.n	90001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001da6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da8:	4b12      	ldr	r3, [pc, #72]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001daa:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dae:	bf14      	ite	ne
90001db0:	4a14      	ldrne	r2, [pc, #80]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001db2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001db6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dba:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dbc:	601a      	str	r2, [r3, #0]
}
90001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	7f0c      	ldrb	r4, [r1, #28]
90001dc2:	4a11      	ldr	r2, [pc, #68]	; (90001e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001dc4:	e799      	b.n	90001cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	4b0f      	ldr	r3, [pc, #60]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001dc8:	6013      	str	r3, [r2, #0]
}
90001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dcc:	4b0f      	ldr	r3, [pc, #60]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dce:	2167      	movs	r1, #103	; 0x67
90001dd0:	4a0f      	ldr	r2, [pc, #60]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dd2:	4810      	ldr	r0, [pc, #64]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dd4:	f021 f85c 	bl	90022e90 <__assert_func>
        assert(0 && "Unsupported Format!");
90001dd8:	4b0c      	ldr	r3, [pc, #48]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dda:	2188      	movs	r1, #136	; 0x88
90001ddc:	4a0e      	ldr	r2, [pc, #56]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dde:	480d      	ldr	r0, [pc, #52]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001de0:	f021 f856 	bl	90022e90 <__assert_func>
                assert(0 && "Unsupported format");
90001de4:	4b0d      	ldr	r3, [pc, #52]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001de6:	f44f 7189 	mov.w	r1, #274	; 0x112
90001dea:	4a0d      	ldr	r2, [pc, #52]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001dec:	4809      	ldr	r0, [pc, #36]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dee:	f021 f84f 	bl	90022e90 <__assert_func>
90001df2:	bf00      	nop
90001df4:	52001000 	.word	0x52001000
90001df8:	00020201 	.word	0x00020201
90001dfc:	00020009 	.word	0x00020009
90001e00:	ffff00ef 	.word	0xffff00ef
90001e04:	00010201 	.word	0x00010201
90001e08:	0002000a 	.word	0x0002000a
90001e0c:	9002464c 	.word	0x9002464c
90001e10:	90024704 	.word	0x90024704
90001e14:	900246b4 	.word	0x900246b4
90001e18:	90024668 	.word	0x90024668
90001e1c:	90024750 	.word	0x90024750
90001e20:	9002476c 	.word	0x9002476c

90001e24 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e24:	4b1f      	ldr	r3, [pc, #124]	; (90001ea4 <DMA2D_XferCpltCallback+0x80>)
90001e26:	4920      	ldr	r1, [pc, #128]	; (90001ea8 <DMA2D_XferCpltCallback+0x84>)
90001e28:	681b      	ldr	r3, [r3, #0]
    {
90001e2a:	b570      	push	{r4, r5, r6, lr}
90001e2c:	685c      	ldr	r4, [r3, #4]
90001e2e:	6823      	ldr	r3, [r4, #0]
90001e30:	695a      	ldr	r2, [r3, #20]
90001e32:	428a      	cmp	r2, r1
90001e34:	d125      	bne.n	90001e82 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e36:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e3a:	b942      	cbnz	r2, 90001e4e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e3e:	4620      	mov	r0, r4
90001e40:	4798      	blx	r3
      return count_ == 0;
90001e42:	4b1a      	ldr	r3, [pc, #104]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e44:	68da      	ldr	r2, [r3, #12]
90001e46:	b10a      	cbz	r2, 90001e4c <DMA2D_XferCpltCallback+0x28>
90001e48:	7a22      	ldrb	r2, [r4, #8]
90001e4a:	b1f2      	cbz	r2, 90001e8a <DMA2D_XferCpltCallback+0x66>
    }
90001e4c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e4e:	4b17      	ldr	r3, [pc, #92]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
90001e50:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e52:	2a00      	cmp	r2, #0
90001e54:	d0fa      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
90001e56:	7a21      	ldrb	r1, [r4, #8]
90001e58:	2900      	cmp	r1, #0
90001e5a:	d0f7      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e5c:	2100      	movs	r1, #0
      count_--;
90001e5e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e60:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e64:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e66:	1c41      	adds	r1, r0, #1
      count_--;
90001e68:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e6a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e6c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e70:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e7c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e7e:	f7ff bd29 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
90001e82:	4620      	mov	r0, r4
90001e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e88:	4710      	bx	r2
      return buffer_[head_];
90001e8a:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001e8c:	2201      	movs	r2, #1
      return buffer_[head_];
90001e8e:	3002      	adds	r0, #2
                started_by_external_job = true;
90001e90:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001e94:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e9e:	f7ff bcd5 	b.w	9000184c <DMA2D_CopyBuffer>
90001ea2:	bf00      	nop
90001ea4:	24026264 	.word	0x24026264
90001ea8:	90001b21 	.word	0x90001b21
90001eac:	24005bb4 	.word	0x24005bb4

90001eb0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001eb0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb2:	4b10      	ldr	r3, [pc, #64]	; (90001ef4 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001eb4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001eb8:	2500      	movs	r5, #0
90001eba:	300c      	adds	r0, #12
90001ebc:	2260      	movs	r2, #96	; 0x60
90001ebe:	7235      	strb	r5, [r6, #8]
90001ec0:	7275      	strb	r5, [r6, #9]
90001ec2:	6070      	str	r0, [r6, #4]
90001ec4:	f844 3b20 	str.w	r3, [r4], #32
90001ec8:	4621      	mov	r1, r4
90001eca:	f010 faa7 	bl	9001241c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ece:	4621      	mov	r1, r4
90001ed0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ed4:	60cd      	str	r5, [r1, #12]
90001ed6:	3124      	adds	r1, #36	; 0x24
90001ed8:	428b      	cmp	r3, r1
90001eda:	d1fb      	bne.n	90001ed4 <_ZN8STM32DMAC1Ev+0x24>
90001edc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ee0:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ee2:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001ee6:	f00b fb3f 	bl	9000d568 <osMutexNew>
90001eea:	4603      	mov	r3, r0
}
90001eec:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001eee:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001ef2:	bd70      	pop	{r4, r5, r6, pc}
90001ef4:	900247b4 	.word	0x900247b4

90001ef8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001ef8:	2001      	movs	r0, #1
90001efa:	4770      	bx	lr

90001efc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001efc:	200c      	movs	r0, #12
90001efe:	4770      	bx	lr

90001f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f08:	3008      	adds	r0, #8
90001f0a:	4770      	bx	lr

90001f0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f14:	3008      	adds	r0, #8
90001f16:	4770      	bx	lr

90001f18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f18:	2001      	movs	r0, #1
90001f1a:	4770      	bx	lr

90001f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f1c:	20ec      	movs	r0, #236	; 0xec
90001f1e:	4770      	bx	lr

90001f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f20:	23ec      	movs	r3, #236	; 0xec
90001f22:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f26:	3008      	adds	r0, #8
90001f28:	4770      	bx	lr
90001f2a:	bf00      	nop

90001f2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f2c:	23ec      	movs	r3, #236	; 0xec
90001f2e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f32:	3008      	adds	r0, #8
90001f34:	4770      	bx	lr
90001f36:	bf00      	nop

90001f38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f38:	2001      	movs	r0, #1
90001f3a:	4770      	bx	lr

90001f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f3c:	2010      	movs	r0, #16
90001f3e:	4770      	bx	lr

90001f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f40:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f44:	3008      	adds	r0, #8
90001f46:	4770      	bx	lr

90001f48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f48:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f4c:	3008      	adds	r0, #8
90001f4e:	4770      	bx	lr

90001f50 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f50:	4608      	mov	r0, r1
90001f52:	f003 b8f5 	b.w	90005140 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f56:	bf00      	nop

90001f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f58:	4b03      	ldr	r3, [pc, #12]	; (90001f68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f5a:	b510      	push	{r4, lr}
90001f5c:	4604      	mov	r4, r0
90001f5e:	6003      	str	r3, [r0, #0]
90001f60:	f00f f8c7 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f64:	4620      	mov	r0, r4
90001f66:	bd10      	pop	{r4, pc}
90001f68:	9002486c 	.word	0x9002486c

90001f6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f6c:	4b05      	ldr	r3, [pc, #20]	; (90001f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f6e:	b510      	push	{r4, lr}
90001f70:	4604      	mov	r4, r0
90001f72:	6003      	str	r3, [r0, #0]
90001f74:	f00f f8bd 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f78:	2114      	movs	r1, #20
90001f7a:	4620      	mov	r0, r4
90001f7c:	f020 ff59 	bl	90022e32 <_ZdlPvj>
90001f80:	4620      	mov	r0, r4
90001f82:	bd10      	pop	{r4, pc}
90001f84:	9002486c 	.word	0x9002486c

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001f88:	4b03      	ldr	r3, [pc, #12]	; (90001f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f8a:	b510      	push	{r4, lr}
90001f8c:	4604      	mov	r4, r0
90001f8e:	6003      	str	r3, [r0, #0]
90001f90:	f00f f8af 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f94:	4620      	mov	r0, r4
90001f96:	bd10      	pop	{r4, pc}
90001f98:	90024838 	.word	0x90024838

90001f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f9c:	4b05      	ldr	r3, [pc, #20]	; (90001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f9e:	b510      	push	{r4, lr}
90001fa0:	4604      	mov	r4, r0
90001fa2:	6003      	str	r3, [r0, #0]
90001fa4:	f00f f8a5 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fa8:	21f4      	movs	r1, #244	; 0xf4
90001faa:	4620      	mov	r0, r4
90001fac:	f020 ff41 	bl	90022e32 <_ZdlPvj>
90001fb0:	4620      	mov	r0, r4
90001fb2:	bd10      	pop	{r4, pc}
90001fb4:	90024838 	.word	0x90024838

90001fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fb8:	4b03      	ldr	r3, [pc, #12]	; (90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fba:	b510      	push	{r4, lr}
90001fbc:	4604      	mov	r4, r0
90001fbe:	6003      	str	r3, [r0, #0]
90001fc0:	f00f f897 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fc4:	4620      	mov	r0, r4
90001fc6:	bd10      	pop	{r4, pc}
90001fc8:	90024804 	.word	0x90024804

90001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fcc:	4b05      	ldr	r3, [pc, #20]	; (90001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fce:	b510      	push	{r4, lr}
90001fd0:	4604      	mov	r4, r0
90001fd2:	6003      	str	r3, [r0, #0]
90001fd4:	f00f f88d 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fd8:	2118      	movs	r1, #24
90001fda:	4620      	mov	r0, r4
90001fdc:	f020 ff29 	bl	90022e32 <_ZdlPvj>
90001fe0:	4620      	mov	r0, r4
90001fe2:	bd10      	pop	{r4, pc}
90001fe4:	90024804 	.word	0x90024804

90001fe8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90001fe8:	b510      	push	{r4, lr}
90001fea:	4a0c      	ldr	r2, [pc, #48]	; (9000201c <_ZN12FrontendHeapD1Ev+0x34>)
90001fec:	4604      	mov	r4, r0
90001fee:	4b0c      	ldr	r3, [pc, #48]	; (90002020 <_ZN12FrontendHeapD1Ev+0x38>)
90001ff0:	f500 7090 	add.w	r0, r0, #288	; 0x120
90001ff4:	6022      	str	r2, [r4, #0]
90001ff6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90001ffa:	f00f f87a 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001ffe:	4620      	mov	r0, r4
90002000:	4b08      	ldr	r3, [pc, #32]	; (90002024 <_ZN12FrontendHeapD1Ev+0x3c>)
90002002:	f840 3f2c 	str.w	r3, [r0, #44]!
90002006:	f00f f874 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000200a:	4620      	mov	r0, r4
9000200c:	4b06      	ldr	r3, [pc, #24]	; (90002028 <_ZN12FrontendHeapD1Ev+0x40>)
9000200e:	f840 3f14 	str.w	r3, [r0, #20]!
90002012:	f00f f86e 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002016:	4620      	mov	r0, r4
90002018:	bd10      	pop	{r4, pc}
9000201a:	bf00      	nop
9000201c:	900248a0 	.word	0x900248a0
90002020:	9002486c 	.word	0x9002486c
90002024:	90024838 	.word	0x90024838
90002028:	90024804 	.word	0x90024804

9000202c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
9000202c:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
9000202e:	4c0c      	ldr	r4, [pc, #48]	; (90002060 <__tcf_0+0x34>)
90002030:	4a0c      	ldr	r2, [pc, #48]	; (90002064 <__tcf_0+0x38>)
90002032:	4b0d      	ldr	r3, [pc, #52]	; (90002068 <__tcf_0+0x3c>)
90002034:	f504 7090 	add.w	r0, r4, #288	; 0x120
90002038:	6022      	str	r2, [r4, #0]
9000203a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
9000203e:	f00f f858 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002042:	4620      	mov	r0, r4
90002044:	4b09      	ldr	r3, [pc, #36]	; (9000206c <__tcf_0+0x40>)
90002046:	f840 3f2c 	str.w	r3, [r0, #44]!
9000204a:	f00f f852 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000204e:	4620      	mov	r0, r4
90002050:	4b07      	ldr	r3, [pc, #28]	; (90002070 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002056:	f840 3f14 	str.w	r3, [r0, #20]!
9000205a:	f00f b84a 	b.w	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000205e:	bf00      	nop
90002060:	24005be8 	.word	0x24005be8
90002064:	900248a0 	.word	0x900248a0
90002068:	9002486c 	.word	0x9002486c
9000206c:	90024838 	.word	0x90024838
90002070:	90024804 	.word	0x90024804

90002074 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002074:	b510      	push	{r4, lr}
90002076:	4a0e      	ldr	r2, [pc, #56]	; (900020b0 <_ZN12FrontendHeapD0Ev+0x3c>)
90002078:	4604      	mov	r4, r0
9000207a:	4b0e      	ldr	r3, [pc, #56]	; (900020b4 <_ZN12FrontendHeapD0Ev+0x40>)
9000207c:	f500 7090 	add.w	r0, r0, #288	; 0x120
90002080:	6022      	str	r2, [r4, #0]
90002082:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90002086:	f00f f834 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208a:	4620      	mov	r0, r4
9000208c:	4b0a      	ldr	r3, [pc, #40]	; (900020b8 <_ZN12FrontendHeapD0Ev+0x44>)
9000208e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002092:	f00f f82e 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002096:	4b09      	ldr	r3, [pc, #36]	; (900020bc <_ZN12FrontendHeapD0Ev+0x48>)
90002098:	4620      	mov	r0, r4
9000209a:	f840 3f14 	str.w	r3, [r0, #20]!
9000209e:	f00f f828 	bl	900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a2:	4620      	mov	r0, r4
900020a4:	f44f 7126 	mov.w	r1, #664	; 0x298
900020a8:	f020 fec3 	bl	90022e32 <_ZdlPvj>
900020ac:	4620      	mov	r0, r4
900020ae:	bd10      	pop	{r4, pc}
900020b0:	900248a0 	.word	0x900248a0
900020b4:	9002486c 	.word	0x9002486c
900020b8:	90024838 	.word	0x90024838
900020bc:	90024804 	.word	0x90024804

900020c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020c4:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020c6:	2400      	movs	r4, #0
900020c8:	f002 fe50 	bl	90004d6c <_ZN14BitmapDatabase11getInstanceEv>
900020cc:	4605      	mov	r5, r0
900020ce:	f002 fe51 	bl	90004d74 <_ZN14BitmapDatabase15getInstanceSizeEv>
900020d2:	4623      	mov	r3, r4
900020d4:	4601      	mov	r1, r0
900020d6:	4622      	mov	r2, r4
900020d8:	4628      	mov	r0, r5
900020da:	9400      	str	r4, [sp, #0]
900020dc:	f015 f8b4 	bl	90017248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900020e0:	4b28      	ldr	r3, [pc, #160]	; (90002184 <touchgfx_init+0xc4>)
900020e2:	4a29      	ldr	r2, [pc, #164]	; (90002188 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900020e4:	4620      	mov	r0, r4
        static FrontendHeap instance;
900020e6:	4c29      	ldr	r4, [pc, #164]	; (9000218c <touchgfx_init+0xcc>)
900020e8:	601a      	str	r2, [r3, #0]
900020ea:	f003 fbdb 	bl	900058a4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900020ee:	4828      	ldr	r0, [pc, #160]	; (90002190 <touchgfx_init+0xd0>)
900020f0:	f015 f812 	bl	90017118 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
900020f4:	6823      	ldr	r3, [r4, #0]
900020f6:	f3bf 8f5b 	dmb	ish
900020fa:	07db      	lsls	r3, r3, #31
900020fc:	d505      	bpl.n	9000210a <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
900020fe:	4825      	ldr	r0, [pc, #148]	; (90002194 <touchgfx_init+0xd4>)
}
90002100:	b002      	add	sp, #8
90002102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002106:	f7fe bbd9 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000210a:	4620      	mov	r0, r4
9000210c:	f020 fe93 	bl	90022e36 <__cxa_guard_acquire>
90002110:	2800      	cmp	r0, #0
90002112:	d0f4      	beq.n	900020fe <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
90002114:	4d20      	ldr	r5, [pc, #128]	; (90002198 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90002116:	4b21      	ldr	r3, [pc, #132]	; (9000219c <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002118:	f505 769e 	add.w	r6, r5, #316	; 0x13c
        : presenterStorage(pres),
9000211c:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002120:	f105 082c 	add.w	r8, r5, #44	; 0x2c
          transitionStorage(tra),
90002124:	f505 7790 	add.w	r7, r5, #288	; 0x120
90002128:	602b      	str	r3, [r5, #0]
9000212a:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
9000212c:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
9000212e:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002132:	f00e ffdf 	bl	900110f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002136:	4b1a      	ldr	r3, [pc, #104]	; (900021a0 <touchgfx_init+0xe0>)
90002138:	4640      	mov	r0, r8
9000213a:	616b      	str	r3, [r5, #20]
9000213c:	f00e ffda 	bl	900110f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002140:	4b18      	ldr	r3, [pc, #96]	; (900021a4 <touchgfx_init+0xe4>)
90002142:	4638      	mov	r0, r7
90002144:	62eb      	str	r3, [r5, #44]	; 0x2c
90002146:	f00e ffd5 	bl	900110f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000214a:	4b17      	ldr	r3, [pc, #92]	; (900021a8 <touchgfx_init+0xe8>)
9000214c:	f505 709a 	add.w	r0, r5, #308	; 0x134
90002150:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
90002154:	f003 fc28 	bl	900059a8 <_ZN5ModelC1Ev>
90002158:	462a      	mov	r2, r5
9000215a:	f505 719a 	add.w	r1, r5, #308	; 0x134
9000215e:	4630      	mov	r0, r6
90002160:	f003 fc16 	bl	90005990 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002164:	4630      	mov	r0, r6
90002166:	f002 ffeb 	bl	90005140 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000216a:	4810      	ldr	r0, [pc, #64]	; (900021ac <touchgfx_init+0xec>)
9000216c:	f020 feae 	bl	90022ecc <atexit>
90002170:	4620      	mov	r0, r4
90002172:	f020 fe6c 	bl	90022e4e <__cxa_guard_release>
90002176:	4807      	ldr	r0, [pc, #28]	; (90002194 <touchgfx_init+0xd4>)
}
90002178:	b002      	add	sp, #8
9000217a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000217e:	f7fe bb9d 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
90002182:	bf00      	nop
90002184:	240262c0 	.word	0x240262c0
90002188:	24006cb4 	.word	0x24006cb4
9000218c:	24005be4 	.word	0x24005be4
90002190:	24000020 	.word	0x24000020
90002194:	24006c2c 	.word	0x24006c2c
90002198:	24005be8 	.word	0x24005be8
9000219c:	900248a0 	.word	0x900248a0
900021a0:	90024804 	.word	0x90024804
900021a4:	90024838 	.word	0x90024838
900021a8:	9002486c 	.word	0x9002486c
900021ac:	9000202d 	.word	0x9000202d

900021b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021b0:	4770      	bx	lr
900021b2:	bf00      	nop

900021b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021b4:	4801      	ldr	r0, [pc, #4]	; (900021bc <touchgfx_taskEntry+0x8>)
900021b6:	f7fe bb47 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021ba:	bf00      	nop
900021bc:	24006c2c 	.word	0x24006c2c

900021c0 <_GLOBAL__sub_I_touchgfx_init>:
}
900021c0:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021c2:	4b26      	ldr	r3, [pc, #152]	; (9000225c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021c4:	4c26      	ldr	r4, [pc, #152]	; (90002260 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021c6:	4e27      	ldr	r6, [pc, #156]	; (90002264 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021c8:	4d27      	ldr	r5, [pc, #156]	; (90002268 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021ca:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021cc:	4630      	mov	r0, r6
900021ce:	f7ff fe6f 	bl	90001eb0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021d2:	4628      	mov	r0, r5
900021d4:	f018 f942 	bl	9001a45c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
900021d8:	4b24      	ldr	r3, [pc, #144]	; (9000226c <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
900021da:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900021e0:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900021e4:	62da      	str	r2, [r3, #44]	; 0x2c
900021e6:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
900021e8:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
900021ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
900021ee:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
900021f0:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
900021f4:	4c1e      	ldr	r4, [pc, #120]	; (90002270 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
900021f6:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
900021f8:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
900021fc:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
900021fe:	2401      	movs	r4, #1
90002200:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
90002204:	4c1b      	ldr	r4, [pc, #108]	; (90002274 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
90002206:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002208:	4c1b      	ldr	r4, [pc, #108]	; (90002278 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
9000220a:	8020      	strh	r0, [r4, #0]
9000220c:	4c1b      	ldr	r4, [pc, #108]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
9000220e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002212:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002214:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002218:	4c19      	ldr	r4, [pc, #100]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000221a:	481a      	ldr	r0, [pc, #104]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
9000221c:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
9000221e:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
90002222:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
90002226:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
9000222a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
9000222e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002232:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
90002236:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
9000223a:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000223e:	8021      	strh	r1, [r4, #0]
90002240:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
90002242:	4c11      	ldr	r4, [pc, #68]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002244:	4811      	ldr	r0, [pc, #68]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
90002246:	4912      	ldr	r1, [pc, #72]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90002248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000224c:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
9000224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
90002252:	6018      	str	r0, [r3, #0]
          cc_in(0)
90002254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002258:	67d9      	str	r1, [r3, #124]	; 0x7c
}
9000225a:	bd70      	pop	{r4, r5, r6, pc}
9000225c:	90023f8c 	.word	0x90023f8c
90002260:	24005e80 	.word	0x24005e80
90002264:	24005e84 	.word	0x24005e84
90002268:	24006cb8 	.word	0x24006cb8
9000226c:	24006c2c 	.word	0x24006c2c
90002270:	01000001 	.word	0x01000001
90002274:	24026264 	.word	0x24026264
90002278:	24026258 	.word	0x24026258
9000227c:	2402625e 	.word	0x2402625e
90002280:	2402625a 	.word	0x2402625a
90002284:	24026260 	.word	0x24026260
90002288:	2402625c 	.word	0x2402625c
9000228c:	9002411c 	.word	0x9002411c
90002290:	90023f64 	.word	0x90023f64

90002294 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002294:	4801      	ldr	r0, [pc, #4]	; (9000229c <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002296:	f7ff bbb9 	b.w	90001a0c <_ZN8STM32DMAD1Ev>
9000229a:	bf00      	nop
9000229c:	24005e84 	.word	0x24005e84

900022a0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022a4:	b112      	cbz	r2, 900022ac <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022a6:	6803      	ldr	r3, [r0, #0]
900022a8:	695b      	ldr	r3, [r3, #20]
900022aa:	4718      	bx	r3
        }
    }
900022ac:	4770      	bx	lr
900022ae:	bf00      	nop

900022b0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022b0:	2000      	movs	r0, #0
900022b2:	4770      	bx	lr

900022b4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022b4:	8081      	strh	r1, [r0, #4]
    }
900022b6:	4770      	bx	lr

900022b8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022b8:	80c1      	strh	r1, [r0, #6]
    }
900022ba:	4770      	bx	lr

900022bc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022bc:	8101      	strh	r1, [r0, #8]
    }
900022be:	4770      	bx	lr

900022c0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022c0:	8141      	strh	r1, [r0, #10]
    }
900022c2:	4770      	bx	lr

900022c4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022c4:	4770      	bx	lr
900022c6:	bf00      	nop

900022c8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022c8:	4770      	bx	lr
900022ca:	bf00      	nop

900022cc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022cc:	4770      	bx	lr
900022ce:	bf00      	nop

900022d0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022d0:	4770      	bx	lr
900022d2:	bf00      	nop

900022d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022d4:	4770      	bx	lr
900022d6:	bf00      	nop

900022d8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022d8:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022dc:	6803      	ldr	r3, [r0, #0]
900022de:	eba2 020c 	sub.w	r2, r2, ip
900022e2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900022e8:	eba1 010c 	sub.w	r1, r1, ip
900022ec:	b212      	sxth	r2, r2
900022ee:	b209      	sxth	r1, r1
900022f0:	4718      	bx	r3
900022f2:	bf00      	nop

900022f4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900022f4:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022f6:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
900022fa:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022fe:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
90002302:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
90002306:	6010      	str	r0, [r2, #0]
    }
90002308:	4770      	bx	lr
9000230a:	bf00      	nop

9000230c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
9000230c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002310:	b11a      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002312:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002316:	b102      	cbz	r2, 9000231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002318:	6018      	str	r0, [r3, #0]
        }
    }
9000231a:	4770      	bx	lr

9000231c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
9000231c:	2000      	movs	r0, #0
9000231e:	4770      	bx	lr

90002320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002320:	4b03      	ldr	r3, [pc, #12]	; (90002330 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90002322:	2290      	movs	r2, #144	; 0x90
90002324:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002328:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
9000232c:	4770      	bx	lr
9000232e:	bf00      	nop
90002330:	e000e100 	.word	0xe000e100

90002334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002334:	4a09      	ldr	r2, [pc, #36]	; (9000235c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90002336:	490a      	ldr	r1, [pc, #40]	; (90002360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002338:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000233a:	480a      	ldr	r0, [pc, #40]	; (90002364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000233c:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002340:	3b01      	subs	r3, #1
90002342:	b29b      	uxth	r3, r3
90002344:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002346:	6911      	ldr	r1, [r2, #16]
90002348:	f3c1 010a 	ubfx	r1, r1, #0, #11
9000234c:	3901      	subs	r1, #1
9000234e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002350:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90002352:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002354:	f043 0301 	orr.w	r3, r3, #1
90002358:	6353      	str	r3, [r2, #52]	; 0x34
}
9000235a:	4770      	bx	lr
9000235c:	50001000 	.word	0x50001000
90002360:	24006d34 	.word	0x24006d34
90002364:	24006d32 	.word	0x24006d32

90002368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002368:	4b01      	ldr	r3, [pc, #4]	; (90002370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
9000236a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
9000236e:	4770      	bx	lr
90002370:	50001000 	.word	0x50001000

90002374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002374:	4b02      	ldr	r3, [pc, #8]	; (90002380 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002376:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002378:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000237c:	625a      	str	r2, [r3, #36]	; 0x24
}
9000237e:	4770      	bx	lr
90002380:	50001000 	.word	0x50001000

90002384 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
90002384:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002388:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
9000238a:	4770      	bx	lr

9000238c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
9000238c:	4770      	bx	lr
9000238e:	bf00      	nop

90002390 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002390:	eb00 0081 	add.w	r0, r0, r1, lsl #2
90002394:	4611      	mov	r1, r2
90002396:	6840      	ldr	r0, [r0, #4]
90002398:	6803      	ldr	r3, [r0, #0]
9000239a:	68db      	ldr	r3, [r3, #12]
9000239c:	4718      	bx	r3
9000239e:	bf00      	nop

900023a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023a0:	b510      	push	{r4, lr}
900023a2:	4604      	mov	r4, r0
900023a4:	2148      	movs	r1, #72	; 0x48
900023a6:	f020 fd44 	bl	90022e32 <_ZdlPvj>
900023aa:	4620      	mov	r0, r4
900023ac:	bd10      	pop	{r4, pc}
900023ae:	bf00      	nop

900023b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023b0:	b911      	cbnz	r1, 900023b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023b2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023b6:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023b8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023ba:	4a03      	ldr	r2, [pc, #12]	; (900023c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023bc:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023c0:	4b02      	ldr	r3, [pc, #8]	; (900023cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023c2:	4803      	ldr	r0, [pc, #12]	; (900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023c4:	f020 fd64 	bl	90022e90 <__assert_func>
900023c8:	900248c0 	.word	0x900248c0
900023cc:	900248ac 	.word	0x900248ac
900023d0:	90024a4c 	.word	0x90024a4c

900023d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023d4:	b921      	cbnz	r1, 900023e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023d6:	6840      	ldr	r0, [r0, #4]
900023d8:	4611      	mov	r1, r2
900023da:	6803      	ldr	r3, [r0, #0]
900023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023de:	4718      	bx	r3
        assert(handle < no_streams);
900023e0:	4b03      	ldr	r3, [pc, #12]	; (900023f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900023e2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900023e6:	4a03      	ldr	r2, [pc, #12]	; (900023f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900023e8:	4803      	ldr	r0, [pc, #12]	; (900023f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900023ea:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900023ec:	f020 fd50 	bl	90022e90 <__assert_func>
900023f0:	900248ac 	.word	0x900248ac
900023f4:	90024a90 	.word	0x90024a90
900023f8:	90024a4c 	.word	0x90024a4c

900023fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900023fc:	b909      	cbnz	r1, 90002402 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900023fe:	68c0      	ldr	r0, [r0, #12]
90002400:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
90002402:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002404:	4a02      	ldr	r2, [pc, #8]	; (90002410 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
90002406:	2179      	movs	r1, #121	; 0x79
90002408:	4b02      	ldr	r3, [pc, #8]	; (90002414 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
9000240a:	4803      	ldr	r0, [pc, #12]	; (90002418 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
9000240c:	f020 fd40 	bl	90022e90 <__assert_func>
90002410:	90024c40 	.word	0x90024c40
90002414:	900248ac 	.word	0x900248ac
90002418:	90024a4c 	.word	0x90024a4c

9000241c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
9000241c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000241e:	460c      	mov	r4, r1
90002420:	b949      	cbnz	r1, 90002436 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
90002422:	4611      	mov	r1, r2
90002424:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
90002426:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002428:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
9000242a:	681c      	ldr	r4, [r3, #0]
9000242c:	4618      	mov	r0, r3
9000242e:	68a3      	ldr	r3, [r4, #8]
    }
90002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002434:	4718      	bx	r3
        assert(handle < no_streams);
90002436:	4b03      	ldr	r3, [pc, #12]	; (90002444 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002438:	2190      	movs	r1, #144	; 0x90
9000243a:	4a03      	ldr	r2, [pc, #12]	; (90002448 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
9000243c:	4803      	ldr	r0, [pc, #12]	; (9000244c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
9000243e:	f020 fd27 	bl	90022e90 <__assert_func>
90002442:	bf00      	nop
90002444:	900248ac 	.word	0x900248ac
90002448:	90024df4 	.word	0x90024df4
9000244c:	90024a4c 	.word	0x90024a4c

90002450 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002450:	b921      	cbnz	r1, 9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
90002452:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
90002456:	e9c0 3206 	strd	r3, r2, [r0, #24]
9000245a:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
9000245c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000245e:	4a03      	ldr	r2, [pc, #12]	; (9000246c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002460:	2182      	movs	r1, #130	; 0x82
90002462:	4b03      	ldr	r3, [pc, #12]	; (90002470 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002464:	4803      	ldr	r0, [pc, #12]	; (90002474 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
90002466:	f020 fd13 	bl	90022e90 <__assert_func>
9000246a:	bf00      	nop
9000246c:	90024fd0 	.word	0x90024fd0
90002470:	900248ac 	.word	0x900248ac
90002474:	90024a4c 	.word	0x90024a4c

90002478 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002478:	f00f b920 	b.w	900116bc <_ZN8touchgfx3HAL10beginFrameEv>

9000247c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
9000247c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002480:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
90002482:	b113      	cbz	r3, 9000248a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
90002484:	4b1a      	ldr	r3, [pc, #104]	; (900024f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
90002486:	2201      	movs	r2, #1
90002488:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
9000248a:	4c1a      	ldr	r4, [pc, #104]	; (900024f4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
9000248c:	f00f f922 	bl	900116d4 <_ZN8touchgfx3HAL8endFrameEv>
90002490:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
90002494:	b963      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
90002496:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
9000249a:	b94b      	cbnz	r3, 900024b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
9000249c:	2301      	movs	r3, #1
        SEM_POST(semDecode);
9000249e:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024a4:	f00b f96a 	bl	9000d77c <osSemaphoreRelease>
        if (uiHasMutex)
900024a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024ac:	b9cb      	cbnz	r3, 900024e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024ae:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024b0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024b4:	69e1      	ldr	r1, [r4, #28]
900024b6:	6922      	ldr	r2, [r4, #16]
900024b8:	fb00 f303 	mul.w	r3, r0, r3
900024bc:	fb01 f202 	mul.w	r2, r1, r2
900024c0:	4293      	cmp	r3, r2
900024c2:	d3eb      	bcc.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024c4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024c8:	b138      	cbz	r0, 900024da <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024ca:	1a9b      	subs	r3, r3, r2
900024cc:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024d0:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024d2:	bf98      	it	ls
900024d4:	f102 32ff 	addls.w	r2, r2, #4294967295
900024d8:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024da:	2301      	movs	r3, #1
900024dc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900024e0:	e7dc      	b.n	9000249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900024e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
900024e4:	f00b f8a4 	bl	9000d630 <osMutexRelease>
            uiHasMutex = false;
900024e8:	2300      	movs	r3, #0
900024ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900024ee:	bd10      	pop	{r4, pc}
900024f0:	24006d30 	.word	0x24006d30
900024f4:	24006d80 	.word	0x24006d80

900024f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900024f8:	f00f b8aa 	b.w	90011650 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900024fc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900024fc:	f00f ba05 	b.w	9001190a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002500 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90002504:	b903      	cbnz	r3, 90002508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
90002506:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002508:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
9000250a:	f04f 31ff 	mov.w	r1, #4294967295
9000250e:	4604      	mov	r4, r0
90002510:	6c40      	ldr	r0, [r0, #68]	; 0x44
90002512:	f00b f869 	bl	9000d5e8 <osMutexAcquire>
            firstDrawThisFrame = false;
90002516:	f44f 7380 	mov.w	r3, #256	; 0x100
9000251a:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
9000251e:	bd10      	pop	{r4, pc}

90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002520:	b538      	push	{r3, r4, r5, lr}
90002522:	460c      	mov	r4, r1
90002524:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
90002526:	f04f 31ff 	mov.w	r1, #4294967295
9000252a:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
9000252c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002530:	f00b f85a 	bl	9000d5e8 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
90002534:	6c68      	ldr	r0, [r5, #68]	; 0x44
90002536:	f00b f87b 	bl	9000d630 <osMutexRelease>
        streams[handle].isActive = false;
9000253a:	2300      	movs	r3, #0
9000253c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
90002544:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002548:	b90b      	cbnz	r3, 9000254e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
9000254a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
9000254c:	63ab      	str	r3, [r5, #56]	; 0x38
    }
9000254e:	bd38      	pop	{r3, r4, r5, pc}

90002550 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002550:	4814      	ldr	r0, [pc, #80]	; (900025a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
90002552:	6943      	ldr	r3, [r0, #20]
90002554:	03d9      	lsls	r1, r3, #15
90002556:	d523      	bpl.n	900025a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002558:	2300      	movs	r3, #0
{
9000255a:	b510      	push	{r4, lr}
9000255c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002560:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90002564:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002568:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000256c:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002570:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90002574:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002578:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000257c:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000257e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90002582:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002584:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002588:	1c5a      	adds	r2, r3, #1
9000258a:	d1f8      	bne.n	9000257e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
9000258c:	f1ac 0c20 	sub.w	ip, ip, #32
90002590:	f11c 0f20 	cmn.w	ip, #32
90002594:	d1f0      	bne.n	90002578 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
90002596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000259a:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
9000259e:	bd10      	pop	{r4, pc}
900025a0:	4770      	bx	lr
900025a2:	bf00      	nop
900025a4:	e000ed00 	.word	0xe000ed00

900025a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025a8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025aa:	2900      	cmp	r1, #0
900025ac:	d133      	bne.n	90002616 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025ae:	4604      	mov	r4, r0
        switch (cmd)
900025b0:	2a05      	cmp	r2, #5
900025b2:	d809      	bhi.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025b4:	e8df f002 	tbb	[pc, r2]
900025b8:	27221e0f 	.word	0x27221e0f
900025bc:	0903      	.short	0x0903
            stream.isPlaying = false;
900025be:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900025c0:	2301      	movs	r3, #1
            stream.isPlaying = false;
900025c2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
900025c6:	6203      	str	r3, [r0, #32]
    }
900025c8:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900025ca:	3b00      	subs	r3, #0
900025cc:	bf18      	it	ne
900025ce:	2301      	movne	r3, #1
900025d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025d4:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025d6:	6840      	ldr	r0, [r0, #4]
900025d8:	6803      	ldr	r3, [r0, #0]
900025da:	691b      	ldr	r3, [r3, #16]
900025dc:	4798      	blx	r3
900025de:	2800      	cmp	r0, #0
900025e0:	d0f2      	beq.n	900025c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025e2:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025e4:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025e6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025ea:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900025ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900025f2:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900025f4:	2300      	movs	r3, #0
900025f6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900025fa:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900025fc:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900025fe:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002600:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002604:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002606:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002608:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
9000260a:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
9000260c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002610:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002614:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002616:	4b03      	ldr	r3, [pc, #12]	; (90002624 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002618:	21a2      	movs	r1, #162	; 0xa2
9000261a:	4a03      	ldr	r2, [pc, #12]	; (90002628 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
9000261c:	4803      	ldr	r0, [pc, #12]	; (9000262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
9000261e:	f020 fc37 	bl	90022e90 <__assert_func>
90002622:	bf00      	nop
90002624:	900248ac 	.word	0x900248ac
90002628:	9002518c 	.word	0x9002518c
9000262c:	90024a4c 	.word	0x90024a4c

90002630 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002630:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002632:	bb39      	cbnz	r1, 90002684 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
90002634:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002638:	4604      	mov	r4, r0
9000263a:	b923      	cbnz	r3, 90002646 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
9000263c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002640:	b963      	cbnz	r3, 9000265c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
90002642:	2001      	movs	r0, #1
    }
90002644:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
90002646:	4912      	ldr	r1, [pc, #72]	; (90002690 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002648:	6943      	ldr	r3, [r0, #20]
9000264a:	6809      	ldr	r1, [r1, #0]
9000264c:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002650:	440b      	add	r3, r1
90002652:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
90002654:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002658:	2b00      	cmp	r3, #0
9000265a:	d0f2      	beq.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
9000265c:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
9000265e:	4610      	mov	r0, r2
90002660:	6813      	ldr	r3, [r2, #0]
90002662:	695b      	ldr	r3, [r3, #20]
90002664:	6311      	str	r1, [r2, #48]	; 0x30
90002666:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002668:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
9000266a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
9000266e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
90002672:	2800      	cmp	r0, #0
90002674:	d1e5      	bne.n	90002642 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
90002676:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
9000267a:	2b00      	cmp	r3, #0
9000267c:	d1e2      	bne.n	90002644 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
9000267e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
90002682:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002684:	4b03      	ldr	r3, [pc, #12]	; (90002694 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
90002686:	21d0      	movs	r1, #208	; 0xd0
90002688:	4a03      	ldr	r2, [pc, #12]	; (90002698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
9000268a:	4804      	ldr	r0, [pc, #16]	; (9000269c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
9000268c:	f020 fc00 	bl	90022e90 <__assert_func>
90002690:	24026264 	.word	0x24026264
90002694:	900248ac 	.word	0x900248ac
90002698:	90025360 	.word	0x90025360
9000269c:	90024a4c 	.word	0x90024a4c

900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026a0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026a4:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026a6:	b9fb      	cbnz	r3, 900026e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900026a8:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026aa:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
900026ac:	60c3      	str	r3, [r0, #12]
900026ae:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026b2:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
900026b6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026ba:	6103      	str	r3, [r0, #16]
900026bc:	6143      	str	r3, [r0, #20]
900026be:	6183      	str	r3, [r0, #24]
900026c0:	61c3      	str	r3, [r0, #28]
900026c2:	6203      	str	r3, [r0, #32]
900026c4:	6243      	str	r3, [r0, #36]	; 0x24
900026c6:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ca:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026ce:	4432      	add	r2, r6
900026d0:	4294      	cmp	r4, r2
900026d2:	d810      	bhi.n	900026f6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026d4:	4a0b      	ldr	r2, [pc, #44]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026d6:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026d8:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026da:	4618      	mov	r0, r3
        format = bufferFormat;
900026dc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900026e0:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900026e4:	630b      	str	r3, [r1, #48]	; 0x30
900026e6:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900026e8:	4b07      	ldr	r3, [pc, #28]	; (90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900026ea:	f240 11c5 	movw	r1, #453	; 0x1c5
900026ee:	4a07      	ldr	r2, [pc, #28]	; (9000270c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900026f0:	4807      	ldr	r0, [pc, #28]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026f2:	f020 fbcd 	bl	90022e90 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900026f6:	4b07      	ldr	r3, [pc, #28]	; (90002714 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900026f8:	2152      	movs	r1, #82	; 0x52
900026fa:	4a07      	ldr	r2, [pc, #28]	; (90002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900026fc:	4804      	ldr	r0, [pc, #16]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026fe:	f020 fbc7 	bl	90022e90 <__assert_func>
90002702:	bf00      	nop
90002704:	012001e0 	.word	0x012001e0
90002708:	90025500 	.word	0x90025500
9000270c:	90025530 	.word	0x90025530
90002710:	90024a4c 	.word	0x90024a4c
90002714:	900256b8 	.word	0x900256b8
90002718:	900256f4 	.word	0x900256f4

9000271c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000271c:	4b08      	ldr	r3, [pc, #32]	; (90002740 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
9000271e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002726:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000272a:	f3bf 8f6f 	isb	sy
9000272e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002736:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000273a:	f3bf 8f6f 	isb	sy
}
9000273e:	4770      	bx	lr
90002740:	e000e100 	.word	0xe000e100

90002744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002744:	4b03      	ldr	r3, [pc, #12]	; (90002754 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90002746:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000274a:	609a      	str	r2, [r3, #8]
9000274c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002750:	609a      	str	r2, [r3, #8]
}
90002752:	4770      	bx	lr
90002754:	e000e100 	.word	0xe000e100

90002758 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002758:	b538      	push	{r3, r4, r5, lr}
9000275a:	4604      	mov	r4, r0
    HAL::initialize();
9000275c:	f00e ffc7 	bl	900116ee <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002760:	6823      	ldr	r3, [r4, #0]
90002762:	6e5d      	ldr	r5, [r3, #100]	; 0x64
90002764:	f011 fd6a 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
90002768:	4601      	mov	r1, r0
9000276a:	4620      	mov	r0, r4
9000276c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000276e:	6823      	ldr	r3, [r4, #0]
90002770:	4a16      	ldr	r2, [pc, #88]	; (900027cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
90002772:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90002776:	4295      	cmp	r5, r2
90002778:	d11c      	bne.n	900027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
9000277a:	4a15      	ldr	r2, [pc, #84]	; (900027d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000277c:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
9000277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90002782:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002786:	4813      	ldr	r0, [pc, #76]	; (900027d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002788:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
9000278c:	4a12      	ldr	r2, [pc, #72]	; (900027d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000278e:	7005      	strb	r5, [r0, #0]
90002790:	4293      	cmp	r3, r2
90002792:	d116      	bne.n	900027c2 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002794:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002796:	4a11      	ldr	r2, [pc, #68]	; (900027dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002798:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000279a:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
9000279c:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
9000279e:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027a2:	4b0f      	ldr	r3, [pc, #60]	; (900027e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027a4:	490f      	ldr	r1, [pc, #60]	; (900027e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027a6:	4a10      	ldr	r2, [pc, #64]	; (900027e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027a8:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027aa:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027ac:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027ae:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027b2:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027b4:	4a0d      	ldr	r2, [pc, #52]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027b6:	2300      	movs	r3, #0
900027b8:	4620      	mov	r0, r4
900027ba:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027be:	47a8      	blx	r5
900027c0:	e7ec      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027c2:	2100      	movs	r1, #0
900027c4:	4620      	mov	r0, r4
900027c6:	4798      	blx	r3
900027c8:	e7e8      	b.n	9000279c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027ca:	bf00      	nop
900027cc:	900007f1 	.word	0x900007f1
900027d0:	d003fc00 	.word	0xd003fc00
900027d4:	24026262 	.word	0x24026262
900027d8:	90000675 	.word	0x90000675
900027dc:	24026263 	.word	0x24026263
900027e0:	24006d80 	.word	0x24006d80
900027e4:	24006d38 	.word	0x24006d38
900027e8:	d00bf400 	.word	0xd00bf400
900027ec:	d007f800 	.word	0xd007f800

900027f0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900027f0:	b510      	push	{r4, lr}
        return instance;
900027f2:	4c14      	ldr	r4, [pc, #80]	; (90002844 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900027f4:	6823      	ldr	r3, [r4, #0]
900027f6:	b323      	cbz	r3, 90002842 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900027f8:	4b13      	ldr	r3, [pc, #76]	; (90002848 <HAL_LTDC_LineEventCallback+0x58>)
900027fa:	4a14      	ldr	r2, [pc, #80]	; (9000284c <HAL_LTDC_LineEventCallback+0x5c>)
900027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900027fe:	8811      	ldrh	r1, [r2, #0]
90002800:	428b      	cmp	r3, r1
90002802:	d00a      	beq.n	9000281a <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002804:	f007 ffb0 	bl	9000a768 <HAL_LTDC_ProgramLineEvent>
90002808:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
9000280a:	6803      	ldr	r3, [r0, #0]
9000280c:	6a1b      	ldr	r3, [r3, #32]
9000280e:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002810:	2000      	movs	r0, #0
        }
    }
90002812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002816:	f7fd bed1 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
9000281a:	4b0d      	ldr	r3, [pc, #52]	; (90002850 <HAL_LTDC_LineEventCallback+0x60>)
9000281c:	8819      	ldrh	r1, [r3, #0]
9000281e:	f007 ffa3 	bl	9000a768 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002822:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002824:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002828:	3301      	adds	r3, #1
9000282a:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
9000282e:	f7ff f8c7 	bl	900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002832:	6820      	ldr	r0, [r4, #0]
90002834:	f00f fcae 	bl	90012194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002838:	2000      	movs	r0, #0
    }
9000283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
9000283e:	f7fd be89 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002842:	bd10      	pop	{r4, pc}
90002844:	24026264 	.word	0x24026264
90002848:	50001000 	.word	0x50001000
9000284c:	24006d34 	.word	0x24006d34
90002850:	24006d32 	.word	0x24006d32

90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002858:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002914 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
9000285c:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
9000285e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002860:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002864:	4604      	mov	r4, r0
90002866:	e024      	b.n	900028b2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002868:	682b      	ldr	r3, [r5, #0]
9000286a:	4628      	mov	r0, r5
9000286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000286e:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002870:	2300      	movs	r3, #0
90002872:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002874:	6829      	ldr	r1, [r5, #0]
90002876:	f44f 7390 	mov.w	r3, #288	; 0x120
9000287a:	9700      	str	r7, [sp, #0]
9000287c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002880:	f8d1 9014 	ldr.w	r9, [r1, #20]
90002884:	4628      	mov	r0, r5
90002886:	68a1      	ldr	r1, [r4, #8]
90002888:	47c8      	blx	r9
                    stream.frameCount++;
9000288a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000288c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002890:	3301      	adds	r3, #1
90002892:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
90002894:	2800      	cmp	r0, #0
90002896:	d033      	beq.n	90002900 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002898:	682b      	ldr	r3, [r5, #0]
9000289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000289c:	4543      	cmp	r3, r8
9000289e:	d131      	bne.n	90002904 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
900028a0:	6968      	ldr	r0, [r5, #20]
900028a2:	3801      	subs	r0, #1
                    stream.doDecode = false;
900028a4:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028a6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028a8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028ae:	f00a febf 	bl	9000d630 <osMutexRelease>
            SEM_WAIT(semDecode);
900028b2:	f04f 31ff 	mov.w	r1, #4294967295
900028b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028b8:	f00a ff2c 	bl	9000d714 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028bc:	f04f 31ff 	mov.w	r1, #4294967295
900028c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028c2:	f00a fe91 	bl	9000d5e8 <osMutexAcquire>
                if (stream.doDecode)
900028c6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028ca:	2b00      	cmp	r3, #0
900028cc:	d0ee      	beq.n	900028ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028ce:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028d0:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028d2:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028d6:	2900      	cmp	r1, #0
900028d8:	d1c6      	bne.n	90002868 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028dc:	2b00      	cmp	r3, #0
900028de:	d0c9      	beq.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900028e0:	682a      	ldr	r2, [r5, #0]
900028e2:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900028e6:	4541      	cmp	r1, r8
900028e8:	d10f      	bne.n	9000290a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900028ea:	6968      	ldr	r0, [r5, #20]
900028ec:	18c1      	adds	r1, r0, r3
900028ee:	4628      	mov	r0, r5
900028f0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900028f2:	6923      	ldr	r3, [r4, #16]
900028f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900028f6:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900028f8:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900028fa:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900028fc:	6123      	str	r3, [r4, #16]
900028fe:	e7b9      	b.n	90002874 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
90002900:	2001      	movs	r0, #1
90002902:	e7cf      	b.n	900028a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002904:	4628      	mov	r0, r5
90002906:	4798      	blx	r3
90002908:	e7cb      	b.n	900028a2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
9000290a:	4628      	mov	r0, r5
9000290c:	4788      	blx	r1
9000290e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002910:	e7ec      	b.n	900028ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002912:	bf00      	nop
90002914:	90000969 	.word	0x90000969

90002918 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002918:	4801      	ldr	r0, [pc, #4]	; (90002920 <videoTaskFunc+0x8>)
{
9000291a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
9000291c:	f7ff ff9a 	bl	90002854 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002920:	24006d80 	.word	0x24006d80

90002924 <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002924:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002926:	4815      	ldr	r0, [pc, #84]	; (9000297c <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002928:	2500      	movs	r5, #0
9000292a:	f7fe fc2f 	bl	9000118c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000292e:	4c14      	ldr	r4, [pc, #80]	; (90002980 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002930:	4914      	ldr	r1, [pc, #80]	; (90002984 <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002932:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002936:	462a      	mov	r2, r5
90002938:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000293a:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
9000293c:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000293e:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002940:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002942:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002944:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002946:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000294a:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000294c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002950:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002954:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002958:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
9000295c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002960:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002964:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002968:	f00a fe84 	bl	9000d674 <osSemaphoreNew>
9000296c:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
9000296e:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002970:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002972:	f00a fdf9 	bl	9000d568 <osMutexNew>
90002976:	6460      	str	r0, [r4, #68]	; 0x44
}
90002978:	bd38      	pop	{r3, r4, r5, pc}
9000297a:	bf00      	nop
9000297c:	24006d38 	.word	0x24006d38
90002980:	24006d80 	.word	0x24006d80
90002984:	900258a0 	.word	0x900258a0

90002988 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000298c:	4c7e      	ldr	r4, [pc, #504]	; (90002b88 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
9000298e:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002990:	fba4 4303 	umull	r4, r3, r4, r3
{
90002994:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002996:	0a19      	lsrs	r1, r3, #8
{
90002998:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
9000299a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
9000299e:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029a0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029a4:	4293      	cmp	r3, r2
900029a6:	930b      	str	r3, [sp, #44]	; 0x2c
900029a8:	f240 80e9 	bls.w	90002b7e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ac:	4b77      	ldr	r3, [pc, #476]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029ae:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002b9c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029b4:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002ba0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029b8:	930a      	str	r3, [sp, #40]	; 0x28
900029ba:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029bc:	f04f 0e02 	mov.w	lr, #2
900029c0:	9908      	ldr	r1, [sp, #32]
900029c2:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029c6:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029c8:	3101      	adds	r1, #1
    currentMCU++;
900029ca:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029ce:	980a      	ldr	r0, [sp, #40]	; 0x28
900029d0:	9108      	str	r1, [sp, #32]
900029d2:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029d6:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029da:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029de:	005b      	lsls	r3, r3, #1
900029e0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
900029e4:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
900029e6:	e009      	b.n	900029fc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
900029e8:	9b01      	ldr	r3, [sp, #4]
900029ea:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
900029ee:	d30f      	bcc.n	90002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
900029f0:	f1be 0f10 	cmp.w	lr, #16
900029f4:	f000 80b6 	beq.w	90002b64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
900029f8:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
900029fc:	f1be 0f0a 	cmp.w	lr, #10
90002a00:	d1f2      	bne.n	900029e8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a02:	9b06      	ldr	r3, [sp, #24]
90002a04:	3380      	adds	r3, #128	; 0x80
90002a06:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a08:	9b01      	ldr	r3, [sp, #4]
90002a0a:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a0e:	d2f3      	bcs.n	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a10:	9a01      	ldr	r2, [sp, #4]
90002a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a14:	f8cd e01c 	str.w	lr, [sp, #28]
90002a18:	4413      	add	r3, r2
90002a1a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a1e:	f103 0c10 	add.w	ip, r3, #16
90002a22:	3330      	adds	r3, #48	; 0x30
90002a24:	4696      	mov	lr, r2
90002a26:	9102      	str	r1, [sp, #8]
90002a28:	9305      	str	r3, [sp, #20]
90002a2a:	9b02      	ldr	r3, [sp, #8]
90002a2c:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a30:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a34:	4674      	mov	r4, lr
90002a36:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a38:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a3c:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a3e:	4954      	ldr	r1, [pc, #336]	; (90002b90 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a40:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a42:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a46:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a48:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002a4c:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a4e:	4951      	ldr	r1, [pc, #324]	; (90002b94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a50:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a58:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a5c:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a5e:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a60:	4b4d      	ldr	r3, [pc, #308]	; (90002b98 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002a62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a66:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a6a:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a6e:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a70:	eb03 0b02 	add.w	fp, r3, r2
90002a74:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a78:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a7a:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a7e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a82:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a86:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a8a:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002a8e:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002a92:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002a96:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002a9a:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a9e:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aa2:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002aa6:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa8:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aac:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab0:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ab4:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ab8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002abc:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ac0:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002ac4:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ac8:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002acc:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad0:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ad4:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ad8:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ada:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ade:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ae2:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002ae6:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aea:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aee:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002af2:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002af6:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002afa:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002afe:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b00:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b02:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b04:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b06:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b0a:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b0e:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b12:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b16:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b1a:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b1e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b22:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b26:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b2a:	d185      	bne.n	90002a38 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b2c:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b2e:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b32:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b36:	3304      	adds	r3, #4
90002b38:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b3a:	9b05      	ldr	r3, [sp, #20]
90002b3c:	4563      	cmp	r3, ip
90002b3e:	f47f af74 	bne.w	90002a2a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b42:	9b04      	ldr	r3, [sp, #16]
90002b44:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b48:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b4a:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b4e:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b50:	9b03      	ldr	r3, [sp, #12]
90002b52:	f103 0310 	add.w	r3, r3, #16
90002b56:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b58:	9b01      	ldr	r3, [sp, #4]
90002b5a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b5e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b60:	f47f af4a 	bne.w	900029f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b64:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b66:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b6c:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b70:	4293      	cmp	r3, r2
90002b72:	f47f af22 	bne.w	900029ba <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b76:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b7a:	4a04      	ldr	r2, [pc, #16]	; (90002b8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b7c:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b7e:	ee17 0a90 	vmov	r0, s15
90002b82:	b00d      	add	sp, #52	; 0x34
90002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002b88:	aaaaaaab 	.word	0xaaaaaaab
90002b8c:	24009a48 	.word	0x24009a48
90002b90:	24007dc8 	.word	0x24007dc8
90002b94:	240079c8 	.word	0x240079c8
90002b98:	240085c8 	.word	0x240085c8
90002b9c:	240081c8 	.word	0x240081c8
90002ba0:	900258d8 	.word	0x900258d8

90002ba4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002ba8:	0a1c      	lsrs	r4, r3, #8
{
90002baa:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bb0:	ee07 4a90 	vmov	s15, r4
{
90002bb4:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bb6:	429a      	cmp	r2, r3
{
90002bb8:	9007      	str	r0, [sp, #28]
90002bba:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bbc:	930b      	str	r3, [sp, #44]	; 0x2c
90002bbe:	f080 814a 	bcs.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bc2:	4ba7      	ldr	r3, [pc, #668]	; (90002e60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002bc4:	4da7      	ldr	r5, [pc, #668]	; (90002e64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002bc8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002bcc:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bd0:	691b      	ldr	r3, [r3, #16]
90002bd2:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bd6:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002bda:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bde:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002be0:	9301      	str	r3, [sp, #4]
90002be2:	e008      	b.n	90002bf6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be4:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002bec:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bee:	9b08      	ldr	r3, [sp, #32]
90002bf0:	4293      	cmp	r3, r2
90002bf2:	f000 8130 	beq.w	90002e56 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bf6:	9a07      	ldr	r2, [sp, #28]
90002bf8:	9908      	ldr	r1, [sp, #32]
90002bfa:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002bfe:	010b      	lsls	r3, r1, #4
90002c00:	3101      	adds	r1, #1
    currentMCU++;
90002c02:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c06:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c08:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c0a:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c0c:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c10:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c14:	fb01 f202 	mul.w	r2, r1, r2
90002c18:	005b      	lsls	r3, r3, #1
90002c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c1e:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c20:	2308      	movs	r3, #8
90002c22:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c24:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c28:	4293      	cmp	r3, r2
90002c2a:	d9db      	bls.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c2e:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c30:	9a03      	ldr	r2, [sp, #12]
90002c32:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c36:	9a02      	ldr	r2, [sp, #8]
90002c38:	f103 0020 	add.w	r0, r3, #32
90002c3c:	3204      	adds	r2, #4
90002c3e:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c40:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c44:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c46:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c4a:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c4c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c50:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c52:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c56:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c5a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c5c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c60:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c64:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c66:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c68:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c6c:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c70:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c74:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c78:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c7a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c7e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002c82:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002c86:	08e4      	lsrs	r4, r4, #3
90002c88:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002c8c:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002c90:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002c94:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002c98:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c9c:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c9e:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca0:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ca2:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002caa:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cae:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cb0:	08c0      	lsrs	r0, r0, #3
90002cb2:	08a4      	lsrs	r4, r4, #2
90002cb4:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cb8:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cbc:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cc4:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc8:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002ccc:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cd0:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cd4:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cd6:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002cda:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cde:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ce0:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ce2:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ce6:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cea:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cee:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf2:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cf4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cf8:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002cfc:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d00:	08e4      	lsrs	r4, r4, #3
90002d02:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d06:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d0a:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d0e:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d12:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d16:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d18:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d1a:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d1c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d20:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d24:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d28:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d2a:	08c0      	lsrs	r0, r0, #3
90002d2c:	08a4      	lsrs	r4, r4, #2
90002d2e:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d32:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d36:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d3a:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d3e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d42:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d46:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d4a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d4e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d54:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d58:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d5a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d5c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d60:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d64:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d68:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d6c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d72:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d76:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d7a:	08e4      	lsrs	r4, r4, #3
90002d7c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d80:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d84:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d88:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002d8c:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d90:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d92:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d94:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d96:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d9a:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d9e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002da2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002da4:	08c0      	lsrs	r0, r0, #3
90002da6:	08a4      	lsrs	r4, r4, #2
90002da8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002dac:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002db0:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002db4:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002db8:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002dc0:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dc4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc8:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dca:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002dce:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dd2:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dd4:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dd6:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dda:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dde:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002de2:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002de6:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002de8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dec:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002df0:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002df4:	08e4      	lsrs	r4, r4, #3
90002df6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dfa:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002dfe:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e02:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e06:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e0a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e0c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e0e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e10:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e14:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e18:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e1c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e1e:	08c0      	lsrs	r0, r0, #3
90002e20:	08a4      	lsrs	r4, r4, #2
90002e22:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e26:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e2a:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e2e:	9804      	ldr	r0, [sp, #16]
90002e30:	4283      	cmp	r3, r0
90002e32:	f47f af05 	bne.w	90002c40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e36:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e38:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e3a:	3308      	adds	r3, #8
90002e3c:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e3e:	9b03      	ldr	r3, [sp, #12]
90002e40:	3308      	adds	r3, #8
90002e42:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e44:	9b00      	ldr	r3, [sp, #0]
90002e46:	4413      	add	r3, r2
90002e48:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e4a:	9b05      	ldr	r3, [sp, #20]
90002e4c:	3b01      	subs	r3, #1
90002e4e:	9305      	str	r3, [sp, #20]
90002e50:	f47f aee8 	bne.w	90002c24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e54:	e6c6      	b.n	90002be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e56:	ee17 0a90 	vmov	r0, s15
90002e5a:	b00d      	add	sp, #52	; 0x34
90002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e60:	24009a48 	.word	0x24009a48
90002e64:	240079c8 	.word	0x240079c8
90002e68:	240085c8 	.word	0x240085c8
90002e6c:	240081c8 	.word	0x240081c8
90002e70:	24007dc8 	.word	0x24007dc8
90002e74:	900258d8 	.word	0x900258d8

90002e78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e7c:	4cb6      	ldr	r4, [pc, #728]	; (90003158 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e7e:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e80:	fba4 4303 	umull	r4, r3, r4, r3
{
90002e84:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e86:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002e88:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e8c:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002e90:	429a      	cmp	r2, r3
90002e92:	9306      	str	r3, [sp, #24]
{
90002e94:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002e98:	f080 8158 	bcs.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002e9c:	4baf      	ldr	r3, [pc, #700]	; (9000315c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e9e:	4cb0      	ldr	r4, [pc, #704]	; (90003160 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ea2:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003168 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea6:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eaa:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002eac:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eb0:	48ac      	ldr	r0, [pc, #688]	; (90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002eb2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003170 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002eb6:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eb8:	9300      	str	r3, [sp, #0]
90002eba:	e007      	b.n	90002ecc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002ebc:	9b04      	ldr	r3, [sp, #16]
90002ebe:	33c0      	adds	r3, #192	; 0xc0
90002ec0:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002ec2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ec6:	4293      	cmp	r3, r2
90002ec8:	f000 8140 	beq.w	9000314c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ecc:	9e05      	ldr	r6, [sp, #20]
90002ece:	9f07      	ldr	r7, [sp, #28]
90002ed0:	00f2      	lsls	r2, r6, #3
90002ed2:	3601      	adds	r6, #1
90002ed4:	9904      	ldr	r1, [sp, #16]
90002ed6:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ed8:	9e03      	ldr	r6, [sp, #12]
90002eda:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ede:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002ee2:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ee6:	fb06 f505 	mul.w	r5, r6, r5
90002eea:	0052      	lsls	r2, r2, #1
90002eec:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002ef0:	2508      	movs	r5, #8
90002ef2:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ef4:	9d00      	ldr	r5, [sp, #0]
90002ef6:	4295      	cmp	r5, r2
90002ef8:	d9e0      	bls.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002efa:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002efe:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f00:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f04:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f06:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f0a:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f0e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f12:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f14:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f18:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f1c:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f1e:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f20:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f22:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f26:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f2a:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f2e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f30:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f34:	08ed      	lsrs	r5, r5, #3
90002f36:	08bf      	lsrs	r7, r7, #2
90002f38:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f3c:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f3e:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f42:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f44:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f48:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f4c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f50:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f54:	4425      	add	r5, r4
90002f56:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f5a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f5e:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f62:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f64:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f66:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f68:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f6c:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f70:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f74:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f76:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f7a:	08ed      	lsrs	r5, r5, #3
90002f7c:	08bf      	lsrs	r7, r7, #2
90002f7e:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002f82:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f84:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002f88:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002f8a:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f8c:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002f90:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f94:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f96:	4427      	add	r7, r4
90002f98:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f9c:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f9e:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fa2:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fa4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fa8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fb0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fb4:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fb6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fba:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fbc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fc0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fc4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90002fc8:	08fe      	lsrs	r6, r7, #3
90002fca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90002fce:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90002fd2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002fd6:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd8:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fdc:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90002fe0:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90002fec:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fee:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ffa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003000:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003004:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003008:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000300c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003010:	08fe      	lsrs	r6, r7, #3
90003012:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003016:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000301a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301e:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003020:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003024:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003028:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000302c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003030:	4427      	add	r7, r4
90003032:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003036:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003040:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003042:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003044:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003048:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000304c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003050:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003054:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003058:	08fe      	lsrs	r6, r7, #3
9000305a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000305e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003062:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003066:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003068:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000306c:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003074:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307e:	44b9      	add	r9, r7
90003080:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003084:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003090:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	4427      	add	r7, r4
900030c2:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003104:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003108:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000310a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003140:	9d01      	ldr	r5, [sp, #4]
90003142:	3d01      	subs	r5, #1
90003144:	9501      	str	r5, [sp, #4]
90003146:	f47f aed5 	bne.w	90002ef4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000314a:	e6b7      	b.n	90002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9000314c:	ee17 0a90 	vmov	r0, s15
90003150:	b009      	add	sp, #36	; 0x24
90003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003156:	bf00      	nop
90003158:	aaaaaaab 	.word	0xaaaaaaab
9000315c:	24009a48 	.word	0x24009a48
90003160:	900258d8 	.word	0x900258d8
90003164:	240081c8 	.word	0x240081c8
90003168:	240085c8 	.word	0x240085c8
9000316c:	240079c8 	.word	0x240079c8
90003170:	24007dc8 	.word	0x24007dc8

90003174 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003178:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
9000317c:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
9000317e:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003180:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90003184:	f080 8088 	bcs.w	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003188:	4b45      	ldr	r3, [pc, #276]	; (900032a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000318a:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000318e:	691e      	ldr	r6, [r3, #16]
90003190:	e003      	b.n	9000319a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90003192:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
90003194:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003198:	d07e      	beq.n	90003298 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000319a:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9000319c:	4604      	mov	r4, r0
9000319e:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a2:	3201      	adds	r2, #1
900031a4:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031a8:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031ac:	fb08 f505 	mul.w	r5, r8, r5
900031b0:	005b      	lsls	r3, r3, #1
900031b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031b6:	429e      	cmp	r6, r3
900031b8:	d9eb      	bls.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031ba:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031be:	18cd      	adds	r5, r1, r3
          pLum++;
900031c0:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031c2:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031c6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031ca:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ce:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031d2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031d6:	ea47 070c 	orr.w	r7, r7, ip
900031da:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031dc:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031de:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031e2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031e6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031ea:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031ee:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031f2:	ea47 070c 	orr.w	r7, r7, ip
900031f6:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900031f8:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031fc:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003200:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003204:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003208:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000320c:	ea47 070c 	orr.w	r7, r7, ip
90003210:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90003212:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003216:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000321a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000321e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003222:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003226:	ea47 070c 	orr.w	r7, r7, ip
9000322a:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9000322c:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003230:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003234:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003238:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000323c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003240:	ea47 070c 	orr.w	r7, r7, ip
90003244:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90003246:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000324a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000324e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003252:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003256:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000325a:	ea47 070c 	orr.w	r7, r7, ip
9000325e:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003260:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003264:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003268:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000326c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003270:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003274:	ea47 070c 	orr.w	r7, r7, ip
90003278:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000327a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000327e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003282:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003286:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000328a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000328e:	ea47 070c 	orr.w	r7, r7, ip
90003292:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90003294:	d18f      	bne.n	900031b6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90003296:	e77c      	b.n	90003192 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003298:	ee17 0a90 	vmov	r0, s15
9000329c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032a0:	24009a48 	.word	0x24009a48

900032a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032a8:	0a1c      	lsrs	r4, r3, #8
{
900032aa:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032b0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032b4:	429a      	cmp	r2, r3
900032b6:	9300      	str	r3, [sp, #0]
900032b8:	f080 8129 	bcs.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032bc:	4b96      	ldr	r3, [pc, #600]	; (90003518 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032be:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9000351c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032c4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032c8:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032ca:	9401      	str	r4, [sp, #4]
900032cc:	e005      	b.n	900032da <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900032ce:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032d4:	429a      	cmp	r2, r3
900032d6:	f000 811a 	beq.w	9000350e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032da:	00d3      	lsls	r3, r2, #3
900032dc:	9c01      	ldr	r4, [sp, #4]
900032de:	3201      	adds	r2, #1
    currentMCU++;
900032e0:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032e4:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900032e8:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900032ec:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032ee:	fb08 f505 	mul.w	r5, r8, r5
900032f2:	0064      	lsls	r4, r4, #1
900032f4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032f8:	42a6      	cmp	r6, r4
900032fa:	d9e8      	bls.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900032fc:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
90003300:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003302:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90003306:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
9000330a:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000330e:	fb19 f90a 	smulbb	r9, r9, sl
90003312:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003316:	f813 5c08 	ldrb.w	r5, [r3, #-8]
9000331a:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000331e:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003322:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003326:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000332a:	ea4f 2595 	mov.w	r5, r5, lsr #10
9000332e:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003332:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
90003336:	fb19 f90a 	smulbb	r9, r9, sl
9000333a:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000333e:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003342:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003344:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003346:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003348:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000334c:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003350:	fb19 f90a 	smulbb	r9, r9, sl
90003354:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003358:	f813 5c07 	ldrb.w	r5, [r3, #-7]
9000335c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003360:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003364:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003368:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000336c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003370:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003374:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003378:	fb19 f90a 	smulbb	r9, r9, sl
9000337c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003380:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003384:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003386:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003388:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000338c:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003390:	fb19 f90a 	smulbb	r9, r9, sl
90003394:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003398:	f813 5c06 	ldrb.w	r5, [r3, #-6]
9000339c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ac:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033b0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033b4:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900033b8:	fb19 f90a 	smulbb	r9, r9, sl
900033bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900033c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900033c6:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033c8:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033cc:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900033d0:	fb19 f90a 	smulbb	r9, r9, sl
900033d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033d8:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900033dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033f4:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900033f8:	fb19 f90a 	smulbb	r9, r9, sl
900033fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003400:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003404:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003406:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90003408:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000340c:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90003410:	fb19 f90a 	smulbb	r9, r9, sl
90003414:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003418:	f813 5c04 	ldrb.w	r5, [r3, #-4]
9000341c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003420:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003424:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003428:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000342c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003430:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003434:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003438:	fb19 f90a 	smulbb	r9, r9, sl
9000343c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003444:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003446:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003448:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000344c:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003458:	f813 5c03 	ldrb.w	r5, [r3, #-3]
9000345c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003460:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003464:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003468:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000346c:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003470:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003474:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003478:	fb19 f90a 	smulbb	r9, r9, sl
9000347c:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003484:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003486:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003488:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000348c:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003498:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
9000349c:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034a0:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034a8:	ea4f 2555 	mov.w	r5, r5, lsr #9
900034ac:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034b0:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034b4:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900034b8:	fb19 f90a 	smulbb	r9, r9, sl
900034bc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034c4:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034c6:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034c8:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034cc:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034d8:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900034dc:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e0:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034e4:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034ec:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034f0:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034f4:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900034f8:	fb19 f90a 	smulbb	r9, r9, sl
900034fc:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90003504:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
90003506:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90003508:	f47f aef6 	bne.w	900032f8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
9000350c:	e6df      	b.n	900032ce <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
9000350e:	ee17 0a90 	vmov	r0, s15
90003512:	b003      	add	sp, #12
90003514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003518:	24009a48 	.word	0x24009a48
9000351c:	80808081 	.word	0x80808081

90003520 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003520:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003522:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003524:	6805      	ldr	r5, [r0, #0]
90003526:	4c3e      	ldr	r4, [pc, #248]	; (90003620 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003528:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000352a:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000352c:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000352e:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003532:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90003536:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003538:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000353c:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000353e:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003540:	d027      	beq.n	90003592 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90003542:	b9ed      	cbnz	r5, 90003580 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90003544:	4837      	ldr	r0, [pc, #220]	; (90003624 <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
90003546:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003548:	f013 0107 	ands.w	r1, r3, #7
9000354c:	d02b      	beq.n	900035a6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000354e:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90003552:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003554:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003556:	4419      	add	r1, r3
90003558:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355a:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000355c:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000355e:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003560:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
90003564:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90003566:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
9000356a:	fb05 6611 	mls	r6, r5, r1, r6
9000356e:	b106      	cbz	r6, 90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003570:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003572:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90003576:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003578:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
9000357a:	6013      	str	r3, [r2, #0]
}
9000357c:	bcf0      	pop	{r4, r5, r6, r7}
9000357e:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003580:	2d30      	cmp	r5, #48	; 0x30
90003582:	d119      	bne.n	900035b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90003584:	4828      	ldr	r0, [pc, #160]	; (90003628 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
90003586:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003588:	f013 0107 	ands.w	r1, r3, #7
9000358c:	d1df      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000358e:	6161      	str	r1, [r4, #20]
90003590:	e00a      	b.n	900035a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90003592:	2f01      	cmp	r7, #1
90003594:	d024      	beq.n	900035e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90003596:	2f02      	cmp	r7, #2
90003598:	d011      	beq.n	900035be <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9000359a:	4824      	ldr	r0, [pc, #144]	; (9000362c <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
9000359c:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000359e:	f013 0107 	ands.w	r1, r3, #7
900035a2:	d1d4      	bne.n	9000354e <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
900035a4:	e7f3      	b.n	9000358e <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900035a6:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035a8:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900035aa:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ac:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035ae:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035b0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035b2:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035b6:	e7d6      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900035b8:	2001      	movs	r0, #1
}
900035ba:	bcf0      	pop	{r4, r5, r6, r7}
900035bc:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035be:	481c      	ldr	r0, [pc, #112]	; (90003630 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900035c0:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035c2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035c4:	f013 010f 	ands.w	r1, r3, #15
900035c8:	d022      	beq.n	90003610 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035ca:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900035ce:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035d0:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d2:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900035d4:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035d6:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035d8:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035da:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035dc:	62a1      	str	r1, [r4, #40]	; 0x28
900035de:	e7c1      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035e0:	4814      	ldr	r0, [pc, #80]	; (90003634 <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900035e2:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035e4:	f013 010f 	ands.w	r1, r3, #15
900035e8:	d107      	bne.n	900035fa <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035ec:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035ee:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035f0:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035f2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035f4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035f8:	e7b5      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035fa:	f1c1 0110 	rsb	r1, r1, #16
900035fe:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003600:	4419      	add	r1, r3
90003602:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003604:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003606:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003608:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000360a:	e9c4 5507 	strd	r5, r5, [r4, #28]
9000360e:	e7a9      	b.n	90003564 <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
90003610:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90003612:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003614:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
90003616:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000361a:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000361c:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000361e:	e7a2      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
90003620:	24009a48 	.word	0x24009a48
90003624:	90003175 	.word	0x90003175
90003628:	900032a5 	.word	0x900032a5
9000362c:	90002e79 	.word	0x90002e79
90003630:	90002ba5 	.word	0x90002ba5
90003634:	90002989 	.word	0x90002989

90003638 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000363c:	f8df c12c 	ldr.w	ip, [pc, #300]	; 9000376c <TGFX_JPEG_InitColorTables+0x134>
90003640:	b0a5      	sub	sp, #148	; 0x94
90003642:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003770 <TGFX_JPEG_InitColorTables+0x138>
90003646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000364a:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003774 <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
9000364e:	2300      	movs	r3, #0
90003650:	4f3d      	ldr	r7, [pc, #244]	; (90003748 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003652:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
90003656:	4e3d      	ldr	r6, [pc, #244]	; (9000374c <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003658:	f249 4ad0 	movw	sl, #38096	; 0x94d0
9000365c:	4d3c      	ldr	r5, [pc, #240]	; (90003750 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
9000365e:	f644 498b 	movw	r9, #19595	; 0x4c8b
90003662:	4c3c      	ldr	r4, [pc, #240]	; (90003754 <TGFX_JPEG_InitColorTables+0x11c>)
90003664:	483c      	ldr	r0, [pc, #240]	; (90003758 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003666:	f249 6245 	movw	r2, #38469	; 0x9645
9000366a:	fb02 f203 	mul.w	r2, r2, r3
9000366e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003672:	1412      	asrs	r2, r2, #16
90003674:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003678:	f641 522f 	movw	r2, #7471	; 0x1d2f
9000367c:	fb02 f203 	mul.w	r2, r2, r3
90003680:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003684:	1412      	asrs	r2, r2, #16
90003686:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368a:	4a34      	ldr	r2, [pc, #208]	; (9000375c <TGFX_JPEG_InitColorTables+0x124>)
9000368c:	fb02 f203 	mul.w	r2, r2, r3
90003690:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003694:	1412      	asrs	r2, r2, #16
90003696:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000369a:	4a31      	ldr	r2, [pc, #196]	; (90003760 <TGFX_JPEG_InitColorTables+0x128>)
9000369c:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a0:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
900036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036aa:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ae:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036b2:	4a2c      	ldr	r2, [pc, #176]	; (90003764 <TGFX_JPEG_InitColorTables+0x12c>)
900036b4:	fb02 b203 	mla	r2, r2, r3, fp
900036b8:	ea4f 4222 	mov.w	r2, r2, asr #16
900036bc:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c0:	4a29      	ldr	r2, [pc, #164]	; (90003768 <TGFX_JPEG_InitColorTables+0x130>)
900036c2:	fb02 a203 	mla	r2, r2, r3, sl
900036c6:	ea4f 4222 	mov.w	r2, r2, asr #16
900036ca:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ce:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036d2:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d4:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d8:	f343 024f 	sbfx	r2, r3, #1, #16
900036dc:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036e0:	d1c1      	bne.n	90003666 <TGFX_JPEG_InitColorTables+0x2e>
900036e2:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003778 <TGFX_JPEG_InitColorTables+0x140>
900036e6:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036e8:	f04f 0c00 	mov.w	ip, #0
900036ec:	e007      	b.n	900036fe <TGFX_JPEG_InitColorTables+0xc6>
900036ee:	f10c 0c01 	add.w	ip, ip, #1
900036f2:	4641      	mov	r1, r8
900036f4:	f10e 0e20 	add.w	lr, lr, #32
900036f8:	f1bc 0f10 	cmp.w	ip, #16
900036fc:	d03e      	beq.n	9000377c <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900036fe:	f1bc 0f07 	cmp.w	ip, #7
90003702:	f101 0808 	add.w	r8, r1, #8
90003706:	4672      	mov	r2, lr
90003708:	f04f 0001 	mov.w	r0, #1
9000370c:	bf94      	ite	ls
9000370e:	2600      	movls	r6, #0
90003710:	2601      	movhi	r6, #1
90003712:	fa1f f388 	uxth.w	r3, r8
90003716:	2400      	movs	r4, #0
90003718:	2c07      	cmp	r4, #7
9000371a:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
9000371e:	bf94      	ite	ls
90003720:	2700      	movls	r7, #0
90003722:	2701      	movhi	r7, #1
90003724:	2f00      	cmp	r7, #0
90003726:	f000 8407 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
9000372a:	2e00      	cmp	r6, #0
9000372c:	f000 8404 	beq.w	90003f38 <TGFX_JPEG_InitColorTables+0x900>
90003730:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
90003734:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003736:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003738:	d0d9      	beq.n	900036ee <TGFX_JPEG_InitColorTables+0xb6>
9000373a:	3301      	adds	r3, #1
9000373c:	3401      	adds	r4, #1
9000373e:	3001      	adds	r0, #1
90003740:	3101      	adds	r1, #1
90003742:	3202      	adds	r2, #2
90003744:	b29b      	uxth	r3, r3
90003746:	e7e7      	b.n	90003718 <TGFX_JPEG_InitColorTables+0xe0>
90003748:	2400a604 	.word	0x2400a604
9000374c:	240089c4 	.word	0x240089c4
90003750:	24006dc4 	.word	0x24006dc4
90003754:	24008dc4 	.word	0x24008dc4
90003758:	240071c4 	.word	0x240071c4
9000375c:	ffffd4d1 	.word	0xffffd4d1
90003760:	ffffab30 	.word	0xffffab30
90003764:	ffff94d1 	.word	0xffff94d1
90003768:	ffffeb30 	.word	0xffffeb30
9000376c:	240075c4 	.word	0x240075c4
90003770:	2400aa04 	.word	0x2400aa04
90003774:	240091c4 	.word	0x240091c4
90003778:	2400a408 	.word	0x2400a408
9000377c:	4b07      	ldr	r3, [pc, #28]	; (9000379c <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
9000377e:	2000      	movs	r0, #0
90003780:	4907      	ldr	r1, [pc, #28]	; (900037a0 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
90003782:	f04f 0c80 	mov.w	ip, #128	; 0x80
90003786:	9304      	str	r3, [sp, #16]
90003788:	4b06      	ldr	r3, [pc, #24]	; (900037a4 <TGFX_JPEG_InitColorTables+0x16c>)
9000378a:	4a07      	ldr	r2, [pc, #28]	; (900037a8 <TGFX_JPEG_InitColorTables+0x170>)
9000378c:	9303      	str	r3, [sp, #12]
9000378e:	4b07      	ldr	r3, [pc, #28]	; (900037ac <TGFX_JPEG_InitColorTables+0x174>)
90003790:	f8df e01c 	ldr.w	lr, [pc, #28]	; 900037b0 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
90003794:	469b      	mov	fp, r3
90003796:	9002      	str	r0, [sp, #8]
90003798:	e00c      	b.n	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
9000379a:	bf00      	nop
9000379c:	240095c8 	.word	0x240095c8
900037a0:	24009c88 	.word	0x24009c88
900037a4:	240097c8 	.word	0x240097c8
900037a8:	24009f08 	.word	0x24009f08
900037ac:	24009a88 	.word	0x24009a88
900037b0:	2400a108 	.word	0x2400a108
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037b4:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037b6:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037ba:	f10c 0640 	add.w	r6, ip, #64	; 0x40
900037be:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c0:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
900037c2:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c4:	b2ad      	uxth	r5, r5
900037c6:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c8:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037ca:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037cc:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ce:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d0:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900037d2:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d4:	9606      	str	r6, [sp, #24]
900037d6:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d8:	f503 7580 	add.w	r5, r3, #256	; 0x100
900037dc:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900037e0:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900037e4:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e8:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900037ea:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037ec:	fa1f fa8a 	uxth.w	sl, sl
900037f0:	f365 060f 	bfi	r6, r5, #0, #16
900037f4:	fa1f f989 	uxth.w	r9, r9
900037f8:	f365 461f 	bfi	r6, r5, #16, #16
900037fc:	4635      	mov	r5, r6
900037fe:	9e04      	ldr	r6, [sp, #16]
90003800:	9500      	str	r5, [sp, #0]
90003802:	4634      	mov	r4, r6
90003804:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003806:	f10c 0541 	add.w	r5, ip, #65	; 0x41
9000380a:	b2ad      	uxth	r5, r5
9000380c:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000380e:	f10c 0502 	add.w	r5, ip, #2
90003812:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003816:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000381a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000381e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003822:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003826:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000382a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000382e:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003832:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003836:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000383a:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003842:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003846:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000384a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000384e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003852:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003856:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000385a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000385e:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003862:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003866:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000386a:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000386e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003872:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003876:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000387a:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000387e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003882:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003886:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000388e:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003892:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003896:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000389a:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000389e:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038a2:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038a6:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038aa:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b2:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b6:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038ba:	b2ad      	uxth	r5, r5
900038bc:	f365 000f 	bfi	r0, r5, #0, #16
900038c0:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038c4:	f203 1541 	addw	r5, r3, #321	; 0x141
900038c8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038cc:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038d0:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038da:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038de:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038e0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038e4:	f203 1047 	addw	r0, r3, #327	; 0x147
900038e8:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ec:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038f0:	b280      	uxth	r0, r0
900038f2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038fa:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038fe:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003906:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000390a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003912:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003916:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000391a:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000391e:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003920:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003924:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003928:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000392a:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000392c:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003930:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003932:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003936:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003938:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000393c:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000393e:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003940:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003942:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003946:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003948:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000394a:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394e:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003950:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003952:	b2ad      	uxth	r5, r5
90003954:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003956:	f503 75c3 	add.w	r5, r3, #390	; 0x186
9000395a:	b2ad      	uxth	r5, r5
9000395c:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000395e:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003962:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003966:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003968:	b29b      	uxth	r3, r3
9000396a:	9323      	str	r3, [sp, #140]	; 0x8c
9000396c:	2300      	movs	r3, #0
9000396e:	f36a 030f 	bfi	r3, sl, #0, #16
90003972:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003976:	f04f 0a00 	mov.w	sl, #0
9000397a:	f369 0a0f 	bfi	sl, r9, #0, #16
9000397e:	60a3      	str	r3, [r4, #8]
90003980:	f369 4a1f 	bfi	sl, r9, #16, #16
90003984:	f04f 0900 	mov.w	r9, #0
90003988:	f368 090f 	bfi	r9, r8, #0, #16
9000398c:	f8c4 a00c 	str.w	sl, [r4, #12]
90003990:	f368 491f 	bfi	r9, r8, #16, #16
90003994:	f04f 0800 	mov.w	r8, #0
90003998:	f367 080f 	bfi	r8, r7, #0, #16
9000399c:	f8c4 9010 	str.w	r9, [r4, #16]
900039a0:	f367 481f 	bfi	r8, r7, #16, #16
900039a4:	2700      	movs	r7, #0
900039a6:	f366 070f 	bfi	r7, r6, #0, #16
900039aa:	f8c4 8014 	str.w	r8, [r4, #20]
900039ae:	f366 471f 	bfi	r7, r6, #16, #16
900039b2:	2600      	movs	r6, #0
900039b4:	f365 060f 	bfi	r6, r5, #0, #16
900039b8:	61a7      	str	r7, [r4, #24]
900039ba:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
900039be:	f104 0520 	add.w	r5, r4, #32
900039c2:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c4:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039c6:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039c8:	f36c 050f 	bfi	r5, ip, #0, #16
900039cc:	9c08      	ldr	r4, [sp, #32]
900039ce:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
900039d2:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039d6:	6005      	str	r5, [r0, #0]
900039d8:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
900039da:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039de:	f364 050f 	bfi	r5, r4, #0, #16
900039e2:	f364 451f 	bfi	r5, r4, #16, #16
900039e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900039e8:	6045      	str	r5, [r0, #4]
900039ea:	2500      	movs	r5, #0
900039ec:	f364 050f 	bfi	r5, r4, #0, #16
900039f0:	f364 451f 	bfi	r5, r4, #16, #16
900039f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
900039f6:	6085      	str	r5, [r0, #8]
900039f8:	2500      	movs	r5, #0
900039fa:	f364 050f 	bfi	r5, r4, #0, #16
900039fe:	f364 451f 	bfi	r5, r4, #16, #16
90003a02:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003a04:	60c5      	str	r5, [r0, #12]
90003a06:	2500      	movs	r5, #0
90003a08:	f364 050f 	bfi	r5, r4, #0, #16
90003a0c:	f364 451f 	bfi	r5, r4, #16, #16
90003a10:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003a12:	6105      	str	r5, [r0, #16]
90003a14:	2500      	movs	r5, #0
90003a16:	f364 050f 	bfi	r5, r4, #0, #16
90003a1a:	f364 451f 	bfi	r5, r4, #16, #16
90003a1e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003a20:	6145      	str	r5, [r0, #20]
90003a22:	2500      	movs	r5, #0
90003a24:	f364 050f 	bfi	r5, r4, #0, #16
90003a28:	f364 451f 	bfi	r5, r4, #16, #16
90003a2c:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003a2e:	6185      	str	r5, [r0, #24]
90003a30:	2500      	movs	r5, #0
90003a32:	f364 050f 	bfi	r5, r4, #0, #16
90003a36:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003a3a:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a3e:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a40:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003a42:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a44:	9c05      	ldr	r4, [sp, #20]
90003a46:	f364 050f 	bfi	r5, r4, #0, #16
90003a4a:	f364 451f 	bfi	r5, r4, #16, #16
90003a4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003a50:	f84b 5c20 	str.w	r5, [fp, #-32]
90003a54:	2500      	movs	r5, #0
90003a56:	f364 050f 	bfi	r5, r4, #0, #16
90003a5a:	f364 451f 	bfi	r5, r4, #16, #16
90003a5e:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003a62:	2500      	movs	r5, #0
90003a64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a66:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a68:	f364 050f 	bfi	r5, r4, #0, #16
90003a6c:	f364 451f 	bfi	r5, r4, #16, #16
90003a70:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003a72:	f84b 5c18 	str.w	r5, [fp, #-24]
90003a76:	2500      	movs	r5, #0
90003a78:	f364 050f 	bfi	r5, r4, #0, #16
90003a7c:	f364 451f 	bfi	r5, r4, #16, #16
90003a80:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003a82:	f84b 5c14 	str.w	r5, [fp, #-20]
90003a86:	2500      	movs	r5, #0
90003a88:	f364 050f 	bfi	r5, r4, #0, #16
90003a8c:	f364 451f 	bfi	r5, r4, #16, #16
90003a90:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003a92:	f84b 5c10 	str.w	r5, [fp, #-16]
90003a96:	2500      	movs	r5, #0
90003a98:	f364 050f 	bfi	r5, r4, #0, #16
90003a9c:	f364 451f 	bfi	r5, r4, #16, #16
90003aa0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003aa2:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003aa6:	2500      	movs	r5, #0
90003aa8:	f364 050f 	bfi	r5, r4, #0, #16
90003aac:	f364 451f 	bfi	r5, r4, #16, #16
90003ab0:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003ab2:	f84b 5c08 	str.w	r5, [fp, #-8]
90003ab6:	2500      	movs	r5, #0
90003ab8:	f364 050f 	bfi	r5, r4, #0, #16
90003abc:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003ac0:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ac2:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ac6:	2500      	movs	r5, #0
90003ac8:	f360 050f 	bfi	r5, r0, #0, #16
90003acc:	f360 451f 	bfi	r5, r0, #16, #16
90003ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
90003ad2:	f841 5c20 	str.w	r5, [r1, #-32]
90003ad6:	2500      	movs	r5, #0
90003ad8:	f360 050f 	bfi	r5, r0, #0, #16
90003adc:	f360 451f 	bfi	r5, r0, #16, #16
90003ae0:	980e      	ldr	r0, [sp, #56]	; 0x38
90003ae2:	f841 5c1c 	str.w	r5, [r1, #-28]
90003ae6:	2500      	movs	r5, #0
90003ae8:	f360 050f 	bfi	r5, r0, #0, #16
90003aec:	f360 451f 	bfi	r5, r0, #16, #16
90003af0:	9812      	ldr	r0, [sp, #72]	; 0x48
90003af2:	f841 5c18 	str.w	r5, [r1, #-24]
90003af6:	2500      	movs	r5, #0
90003af8:	f360 050f 	bfi	r5, r0, #0, #16
90003afc:	f360 451f 	bfi	r5, r0, #16, #16
90003b00:	9816      	ldr	r0, [sp, #88]	; 0x58
90003b02:	f841 5c14 	str.w	r5, [r1, #-20]
90003b06:	2500      	movs	r5, #0
90003b08:	f360 050f 	bfi	r5, r0, #0, #16
90003b0c:	f360 451f 	bfi	r5, r0, #16, #16
90003b10:	981a      	ldr	r0, [sp, #104]	; 0x68
90003b12:	f841 5c10 	str.w	r5, [r1, #-16]
90003b16:	2500      	movs	r5, #0
90003b18:	f360 050f 	bfi	r5, r0, #0, #16
90003b1c:	f360 451f 	bfi	r5, r0, #16, #16
90003b20:	981e      	ldr	r0, [sp, #120]	; 0x78
90003b22:	f841 5c0c 	str.w	r5, [r1, #-12]
90003b26:	2500      	movs	r5, #0
90003b28:	f360 050f 	bfi	r5, r0, #0, #16
90003b2c:	f360 451f 	bfi	r5, r0, #16, #16
90003b30:	9822      	ldr	r0, [sp, #136]	; 0x88
90003b32:	f841 5c08 	str.w	r5, [r1, #-8]
90003b36:	2500      	movs	r5, #0
90003b38:	f360 050f 	bfi	r5, r0, #0, #16
90003b3c:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b40:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b42:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b46:	2500      	movs	r5, #0
90003b48:	f360 050f 	bfi	r5, r0, #0, #16
90003b4c:	f360 451f 	bfi	r5, r0, #16, #16
90003b50:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b54:	9d00      	ldr	r5, [sp, #0]
90003b56:	f8ce 5000 	str.w	r5, [lr]
90003b5a:	9801      	ldr	r0, [sp, #4]
90003b5c:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003b62:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b64:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b68:	2300      	movs	r3, #0
90003b6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003b6c:	f366 030f 	bfi	r3, r6, #0, #16
90003b70:	f366 431f 	bfi	r3, r6, #16, #16
90003b74:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b76:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003b7a:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b7e:	f842 3c1c 	str.w	r3, [r2, #-28]
90003b82:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003b84:	9f02      	ldr	r7, [sp, #8]
90003b86:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b8a:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003b8e:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b90:	f366 431f 	bfi	r3, r6, #16, #16
90003b94:	f842 3c18 	str.w	r3, [r2, #-24]
90003b98:	f04f 0300 	mov.w	r3, #0
90003b9c:	f365 030f 	bfi	r3, r5, #0, #16
90003ba0:	f365 431f 	bfi	r3, r5, #16, #16
90003ba4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003ba6:	f842 3c14 	str.w	r3, [r2, #-20]
90003baa:	f04f 0300 	mov.w	r3, #0
90003bae:	f365 040f 	bfi	r4, r5, #0, #16
90003bb2:	f360 030f 	bfi	r3, r0, #0, #16
90003bb6:	f365 441f 	bfi	r4, r5, #16, #16
90003bba:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003bbc:	f360 431f 	bfi	r3, r0, #16, #16
90003bc0:	f04f 0000 	mov.w	r0, #0
90003bc4:	f842 4c0c 	str.w	r4, [r2, #-12]
90003bc8:	f842 3c10 	str.w	r3, [r2, #-16]
90003bcc:	4603      	mov	r3, r0
90003bce:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003bd0:	f365 000f 	bfi	r0, r5, #0, #16
90003bd4:	f364 030f 	bfi	r3, r4, #0, #16
90003bd8:	f365 401f 	bfi	r0, r5, #16, #16
90003bdc:	f364 431f 	bfi	r3, r4, #16, #16
90003be0:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003be4:	f47f ade6 	bne.w	900037b4 <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003be8:	48db      	ldr	r0, [pc, #876]	; (90003f58 <TGFX_JPEG_InitColorTables+0x920>)
90003bea:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003bee:	49db      	ldr	r1, [pc, #876]	; (90003f5c <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf0:	6004      	str	r4, [r0, #0]
90003bf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003bf6:	4ada      	ldr	r2, [pc, #872]	; (90003f60 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf8:	6044      	str	r4, [r0, #4]
90003bfa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003bfe:	4bd9      	ldr	r3, [pc, #868]	; (90003f64 <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c00:	6084      	str	r4, [r0, #8]
90003c02:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c06:	4fd8      	ldr	r7, [pc, #864]	; (90003f68 <TGFX_JPEG_InitColorTables+0x930>)
90003c08:	60c4      	str	r4, [r0, #12]
90003c0a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c0e:	4ed7      	ldr	r6, [pc, #860]	; (90003f6c <TGFX_JPEG_InitColorTables+0x934>)
90003c10:	6104      	str	r4, [r0, #16]
90003c12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c16:	4dd6      	ldr	r5, [pc, #856]	; (90003f70 <TGFX_JPEG_InitColorTables+0x938>)
90003c18:	6144      	str	r4, [r0, #20]
90003c1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c1e:	f8df b374 	ldr.w	fp, [pc, #884]	; 90003f94 <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c22:	6184      	str	r4, [r0, #24]
90003c24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c28:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90003f98 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c2c:	61c4      	str	r4, [r0, #28]
90003c2e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c32:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90003f9c <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c36:	6204      	str	r4, [r0, #32]
90003c38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c3c:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90003fa0 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c40:	6244      	str	r4, [r0, #36]	; 0x24
90003c42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c46:	f8df e35c 	ldr.w	lr, [pc, #860]	; 90003fa4 <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c4a:	6284      	str	r4, [r0, #40]	; 0x28
90003c4c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c50:	62c4      	str	r4, [r0, #44]	; 0x2c
90003c52:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c56:	6304      	str	r4, [r0, #48]	; 0x30
90003c58:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c5c:	6344      	str	r4, [r0, #52]	; 0x34
90003c5e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c62:	6384      	str	r4, [r0, #56]	; 0x38
90003c64:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c68:	63c4      	str	r4, [r0, #60]	; 0x3c
90003c6a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c6e:	6404      	str	r4, [r0, #64]	; 0x40
90003c70:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c74:	6444      	str	r4, [r0, #68]	; 0x44
90003c76:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c7a:	6484      	str	r4, [r0, #72]	; 0x48
90003c7c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c80:	64c4      	str	r4, [r0, #76]	; 0x4c
90003c82:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c86:	6504      	str	r4, [r0, #80]	; 0x50
90003c88:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c8c:	6544      	str	r4, [r0, #84]	; 0x54
90003c8e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c92:	6584      	str	r4, [r0, #88]	; 0x58
90003c94:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c98:	65c4      	str	r4, [r0, #92]	; 0x5c
90003c9a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c9e:	6604      	str	r4, [r0, #96]	; 0x60
90003ca0:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ca4:	6644      	str	r4, [r0, #100]	; 0x64
90003ca6:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003caa:	6684      	str	r4, [r0, #104]	; 0x68
90003cac:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb0:	66c4      	str	r4, [r0, #108]	; 0x6c
90003cb2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb6:	6704      	str	r4, [r0, #112]	; 0x70
90003cb8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cbc:	6744      	str	r4, [r0, #116]	; 0x74
90003cbe:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc2:	6784      	str	r4, [r0, #120]	; 0x78
90003cc4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc8:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cce:	48a9      	ldr	r0, [pc, #676]	; (90003f74 <TGFX_JPEG_InitColorTables+0x93c>)
90003cd0:	e9c1 4000 	strd	r4, r0, [r1]
90003cd4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cd8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cdc:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003ce0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ce4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ce8:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003cec:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cf0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cf4:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003cf8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cfc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d00:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003d04:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d08:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d0c:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003d10:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d14:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d18:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003d1c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d20:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d24:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003d28:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d2c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d30:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003d34:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d38:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d3c:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003d40:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d44:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d48:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003d4c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d50:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d54:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003d58:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d5c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d60:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003d64:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d68:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d6c:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003d70:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d74:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d78:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003d7c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d80:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d84:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003d88:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d8c:	497a      	ldr	r1, [pc, #488]	; (90003f78 <TGFX_JPEG_InitColorTables+0x940>)
90003d8e:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003d92:	e9c2 4100 	strd	r4, r1, [r2]
90003d96:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003d9a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d9e:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003da2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003da6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003daa:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003dae:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003db2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003db6:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003dba:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dbe:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dc2:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003dc6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dca:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dce:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003dd2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dd6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dda:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003dde:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003de2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003de6:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003dea:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dee:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003df2:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003df6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dfa:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dfe:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003e02:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e06:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e0a:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003e0e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e12:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e16:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003e1a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e1e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e22:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003e26:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e2a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e2e:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003e32:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e36:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e3a:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003e3e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e42:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e46:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e4a:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e4e:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003e52:	4a4a      	ldr	r2, [pc, #296]	; (90003f7c <TGFX_JPEG_InitColorTables+0x944>)
90003e54:	e9c3 4000 	strd	r4, r0, [r3]
90003e58:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003e5c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e60:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e64:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e68:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e6c:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003e70:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003e74:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e78:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e7c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e80:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e84:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003e88:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003e8c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e90:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e94:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e98:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e9c:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003ea0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003ea4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eac:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003eb0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003eb4:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003eb8:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003ebc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ec0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ec4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ec8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ecc:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003ed0:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003ed4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003edc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ee0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ee4:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003ee8:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003eec:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ef0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ef4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ef8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003efc:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003f00:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003f04:	4c1e      	ldr	r4, [pc, #120]	; (90003f80 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f06:	481f      	ldr	r0, [pc, #124]	; (90003f84 <TGFX_JPEG_InitColorTables+0x94c>)
90003f08:	491f      	ldr	r1, [pc, #124]	; (90003f88 <TGFX_JPEG_InitColorTables+0x950>)
90003f0a:	4a20      	ldr	r2, [pc, #128]	; (90003f8c <TGFX_JPEG_InitColorTables+0x954>)
90003f0c:	4b20      	ldr	r3, [pc, #128]	; (90003f90 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003f12:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003f14:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003f18:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f1a:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003f1e:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003f24:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003f28:	4452      	add	r2, sl
90003f2a:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f2c:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003f30:	d1ed      	bne.n	90003f0e <TGFX_JPEG_InitColorTables+0x8d6>
}
90003f32:	b025      	add	sp, #148	; 0x94
90003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003f38:	f1bc 0f07 	cmp.w	ip, #7
90003f3c:	d803      	bhi.n	90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f3e:	b117      	cbz	r7, 90003f46 <TGFX_JPEG_InitColorTables+0x90e>
90003f40:	460d      	mov	r5, r1
90003f42:	f7ff bbf7 	b.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003f46:	2c07      	cmp	r4, #7
90003f48:	f63f abf4 	bhi.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
90003f4c:	2e00      	cmp	r6, #0
90003f4e:	f43f abf1 	beq.w	90003734 <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003f52:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003f54:	f7ff bbf1 	b.w	9000373a <TGFX_JPEG_InitColorTables+0x102>
90003f58:	2400a388 	.word	0x2400a388
90003f5c:	240099c8 	.word	0x240099c8
90003f60:	24009e88 	.word	0x24009e88
90003f64:	2400a308 	.word	0x2400a308
90003f68:	240085c4 	.word	0x240085c4
90003f6c:	240079c4 	.word	0x240079c4
90003f70:	240081c4 	.word	0x240081c4
90003f74:	00430042 	.word	0x00430042
90003f78:	00830082 	.word	0x00830082
90003f7c:	00c700c6 	.word	0x00c700c6
90003f80:	24007dc4 	.word	0x24007dc4
90003f84:	002c0c00 	.word	0x002c0c00
90003f88:	005b6800 	.word	0x005b6800
90003f8c:	ff1db000 	.word	0xff1db000
90003f90:	ff4d0c00 	.word	0xff4d0c00
90003f94:	000166e8 	.word	0x000166e8
90003f98:	0001c5a0 	.word	0x0001c5a0
90003f9c:	ffff4930 	.word	0xffff4930
90003fa0:	ffffa7e8 	.word	0xffffa7e8
90003fa4:	00b3f400 	.word	0x00b3f400

90003fa8 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003fa8:	4901      	ldr	r1, [pc, #4]	; (90003fb0 <vApplicationIdleHook+0x8>)
90003faa:	2000      	movs	r0, #0
90003fac:	f00b bd84 	b.w	9000fab8 <vTaskSetApplicationTaskTag>
90003fb0:	90000945 	.word	0x90000945

90003fb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003fb6:	2064      	movs	r0, #100	; 0x64
90003fb8:	f009 fac8 	bl	9000d54c <osDelay>
  for(;;)
90003fbc:	e7fb      	b.n	90003fb6 <StartDefaultTask+0x2>
90003fbe:	bf00      	nop

90003fc0 <readTask>:
{
  /* USER CODE BEGIN readTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
90003fc0:	4c05      	ldr	r4, [pc, #20]	; (90003fd8 <readTask+0x18>)
{
90003fc2:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
90003fc4:	4620      	mov	r0, r4
90003fc6:	2108      	movs	r1, #8
90003fc8:	f004 fa06 	bl	900083d8 <HAL_GPIO_TogglePin>
    osDelay(15000);
90003fcc:	f643 2098 	movw	r0, #15000	; 0x3a98
90003fd0:	f009 fabc 	bl	9000d54c <osDelay>
  for(;;)
90003fd4:	e7f6      	b.n	90003fc4 <readTask+0x4>
90003fd6:	bf00      	nop
90003fd8:	58021000 	.word	0x58021000

90003fdc <SystemClock_Config>:
{
90003fdc:	b570      	push	{r4, r5, r6, lr}
90003fde:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90003fe0:	224c      	movs	r2, #76	; 0x4c
90003fe2:	2100      	movs	r1, #0
90003fe4:	a80a      	add	r0, sp, #40	; 0x28
90003fe6:	f01f f9ed 	bl	900233c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90003fea:	2220      	movs	r2, #32
90003fec:	2100      	movs	r1, #0
90003fee:	a802      	add	r0, sp, #8
90003ff0:	f01f f9e8 	bl	900233c4 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90003ff4:	2002      	movs	r0, #2
90003ff6:	f006 fdf5 	bl	9000abe4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003ffa:	4b22      	ldr	r3, [pc, #136]	; (90004084 <SystemClock_Config+0xa8>)
90003ffc:	2100      	movs	r1, #0
90003ffe:	4a22      	ldr	r2, [pc, #136]	; (90004088 <SystemClock_Config+0xac>)
90004000:	9101      	str	r1, [sp, #4]
90004002:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90004004:	f021 0101 	bic.w	r1, r1, #1
90004008:	62d9      	str	r1, [r3, #44]	; 0x2c
9000400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000400c:	f003 0301 	and.w	r3, r3, #1
90004010:	9301      	str	r3, [sp, #4]
90004012:	6993      	ldr	r3, [r2, #24]
90004014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90004018:	6193      	str	r3, [r2, #24]
9000401a:	6993      	ldr	r3, [r2, #24]
9000401c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90004020:	9301      	str	r3, [sp, #4]
90004022:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90004024:	6993      	ldr	r3, [r2, #24]
90004026:	0499      	lsls	r1, r3, #18
90004028:	d5fc      	bpl.n	90004024 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000402a:	2201      	movs	r2, #1
9000402c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90004030:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90004032:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90004034:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004036:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90004038:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000403a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
9000403e:	2205      	movs	r2, #5
90004040:	23a0      	movs	r3, #160	; 0xa0
90004042:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004046:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90004048:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000404c:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000404e:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90004052:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004056:	f006 fe6d 	bl	9000ad34 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000405a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000405c:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000405e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90004060:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004062:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004066:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004068:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
9000406a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
9000406c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000406e:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004070:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90004074:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004078:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000407a:	f007 f9ef 	bl	9000b45c <HAL_RCC_ClockConfig>
}
9000407e:	b01e      	add	sp, #120	; 0x78
90004080:	bd70      	pop	{r4, r5, r6, pc}
90004082:	bf00      	nop
90004084:	58000400 	.word	0x58000400
90004088:	58024800 	.word	0x58024800

9000408c <main>:
{
9000408c:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000408e:	2400      	movs	r4, #0
{
90004090:	b09c      	sub	sp, #112	; 0x70
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004092:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004094:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004096:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004098:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
9000409c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_MPU_Disable();
900040a0:	f003 fd88 	bl	90007bb4 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
900040a4:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900040a8:	49d5      	ldr	r1, [pc, #852]	; (90004400 <main+0x374>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040aa:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.BaseAddress = 0x24000000;
900040ac:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900040ae:	4bd5      	ldr	r3, [pc, #852]	; (90004404 <main+0x378>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900040b0:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
900040b4:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040b8:	f003 fd9a 	bl	90007bf0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
900040bc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040c0:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900040c2:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
  MPU_InitStruct.BaseAddress = 0x90000000;
900040c6:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900040c8:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900040cc:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
900040d0:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040d4:	f003 fd8c 	bl	90007bf0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900040d8:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040da:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900040dc:	f8ad 6047 	strh.w	r6, [sp, #71]	; 0x47
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
900040e0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
900040e4:	231a      	movs	r3, #26
900040e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900040ea:	f240 1301 	movw	r3, #257	; 0x101
900040ee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040f2:	f003 fd7d 	bl	90007bf0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
900040f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900040fa:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
900040fc:	f8ad 404a 	strh.w	r4, [sp, #74]	; 0x4a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004100:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004102:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004106:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000410a:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000410e:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90004110:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004114:	f003 fd6c 	bl	90007bf0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004118:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000411a:	a80f      	add	r0, sp, #60	; 0x3c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000411c:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90004120:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004124:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004128:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000412c:	f003 fd60 	bl	90007bf0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90004130:	4620      	mov	r0, r4
90004132:	f003 fd4d 	bl	90007bd0 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90004136:	4ab4      	ldr	r2, [pc, #720]	; (90004408 <main+0x37c>)
90004138:	6953      	ldr	r3, [r2, #20]
9000413a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
9000413e:	d111      	bne.n	90004164 <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
90004140:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004144:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90004148:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000414c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004150:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90004154:	6953      	ldr	r3, [r2, #20]
90004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000415a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000415c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004160:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90004164:	48a8      	ldr	r0, [pc, #672]	; (90004408 <main+0x37c>)
90004166:	6943      	ldr	r3, [r0, #20]
90004168:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
9000416c:	d124      	bne.n	900041b8 <main+0x12c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000416e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90004172:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90004176:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000417a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000417e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004182:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90004186:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004188:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000418c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000418e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90004192:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004194:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90004198:	1c5a      	adds	r2, r3, #1
9000419a:	d1f8      	bne.n	9000418e <main+0x102>
    } while(sets-- != 0U);
9000419c:	3c20      	subs	r4, #32
9000419e:	f114 0f20 	cmn.w	r4, #32
900041a2:	d1f1      	bne.n	90004188 <main+0xfc>
900041a4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900041a8:	6943      	ldr	r3, [r0, #20]
900041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900041ae:	6143      	str	r3, [r0, #20]
900041b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900041b4:	f3bf 8f6f 	isb	sy
  HAL_Init();
900041b8:	f002 fdb0 	bl	90006d1c <HAL_Init>
  SystemClock_Config();
900041bc:	f7ff ff0e 	bl	90003fdc <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
900041c0:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041c2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
900041c4:	4d91      	ldr	r5, [pc, #580]	; (9000440c <main+0x380>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900041c6:	21c0      	movs	r1, #192	; 0xc0
900041c8:	4891      	ldr	r0, [pc, #580]	; (90004410 <main+0x384>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041ca:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900041cc:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900041ce:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900041d0:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
900041d4:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041d8:	2704      	movs	r7, #4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900041da:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900041de:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
900041e2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  __HAL_RCC_GPIOK_CLK_ENABLE();
900041e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900041ee:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900041f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900041f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900041fa:	9301      	str	r3, [sp, #4]
900041fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900041fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004206:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000420a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004212:	9302      	str	r3, [sp, #8]
90004214:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90004216:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000421e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004222:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000422a:	9303      	str	r3, [sp, #12]
9000422c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000422e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004232:	f043 0310 	orr.w	r3, r3, #16
90004236:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000423a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000423e:	f003 0310 	and.w	r3, r3, #16
90004242:	9304      	str	r3, [sp, #16]
90004244:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90004246:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000424a:	f043 0302 	orr.w	r3, r3, #2
9000424e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004252:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004256:	f003 0302 	and.w	r3, r3, #2
9000425a:	9305      	str	r3, [sp, #20]
9000425c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
9000425e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90004266:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000426a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004272:	9306      	str	r3, [sp, #24]
90004274:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90004276:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000427a:	f043 0308 	orr.w	r3, r3, #8
9000427e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004282:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004286:	f003 0308 	and.w	r3, r3, #8
9000428a:	9307      	str	r3, [sp, #28]
9000428c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000428e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004292:	f043 0320 	orr.w	r3, r3, #32
90004296:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000429a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000429e:	f003 0320 	and.w	r3, r3, #32
900042a2:	9308      	str	r3, [sp, #32]
900042a4:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900042a6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900042ae:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
900042ba:	9309      	str	r3, [sp, #36]	; 0x24
900042bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
900042be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042c2:	f043 0304 	orr.w	r3, r3, #4
900042c6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042ce:	f003 0304 	and.w	r3, r3, #4
900042d2:	930a      	str	r3, [sp, #40]	; 0x28
900042d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
900042d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042da:	f043 0301 	orr.w	r3, r3, #1
900042de:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042e6:	f003 0301 	and.w	r3, r3, #1
900042ea:	930b      	str	r3, [sp, #44]	; 0x2c
900042ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
900042ee:	f004 f86f 	bl	900083d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
900042f2:	4622      	mov	r2, r4
900042f4:	2180      	movs	r1, #128	; 0x80
900042f6:	4847      	ldr	r0, [pc, #284]	; (90004414 <main+0x388>)
900042f8:	f004 f86a 	bl	900083d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
900042fc:	4622      	mov	r2, r4
900042fe:	2108      	movs	r1, #8
90004300:	4845      	ldr	r0, [pc, #276]	; (90004418 <main+0x38c>)
90004302:	f004 f865 	bl	900083d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004306:	4622      	mov	r2, r4
90004308:	2108      	movs	r1, #8
9000430a:	4844      	ldr	r0, [pc, #272]	; (9000441c <main+0x390>)
9000430c:	f004 f860 	bl	900083d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004310:	2201      	movs	r2, #1
90004312:	4843      	ldr	r0, [pc, #268]	; (90004420 <main+0x394>)
90004314:	4611      	mov	r1, r2
90004316:	f004 f85b 	bl	900083d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
9000431a:	4622      	mov	r2, r4
9000431c:	2144      	movs	r1, #68	; 0x44
9000431e:	4841      	ldr	r0, [pc, #260]	; (90004424 <main+0x398>)
90004320:	f004 f856 	bl	900083d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004324:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004326:	a90f      	add	r1, sp, #60	; 0x3c
90004328:	4839      	ldr	r0, [pc, #228]	; (90004410 <main+0x384>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000432a:	e9cd 360f 	strd	r3, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000432e:	e9cd 4911 	strd	r4, r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004332:	f003 fe4d 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004336:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004338:	a90f      	add	r1, sp, #60	; 0x3c
9000433a:	4836      	ldr	r0, [pc, #216]	; (90004414 <main+0x388>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
9000433c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000433e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004340:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004344:	f003 fe44 	bl	90007fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004348:	a90f      	add	r1, sp, #60	; 0x3c
9000434a:	4833      	ldr	r0, [pc, #204]	; (90004418 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000434c:	e9cd 860f 	strd	r8, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004350:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004354:	f003 fe3c 	bl	90007fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004358:	a90f      	add	r1, sp, #60	; 0x3c
9000435a:	4830      	ldr	r0, [pc, #192]	; (9000441c <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000435c:	e9cd 860f 	strd	r8, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004360:	e9cd 4911 	strd	r4, r9, [sp, #68]	; 0x44
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004364:	f003 fe34 	bl	90007fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004368:	a90f      	add	r1, sp, #60	; 0x3c
9000436a:	482d      	ldr	r0, [pc, #180]	; (90004420 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000436c:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004370:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004374:	f003 fe2c 	bl	90007fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004378:	a90f      	add	r1, sp, #60	; 0x3c
9000437a:	482a      	ldr	r0, [pc, #168]	; (90004424 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000437c:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004380:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004384:	f003 fe24 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004388:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
9000438c:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90004390:	a90f      	add	r1, sp, #60	; 0x3c
90004392:	4824      	ldr	r0, [pc, #144]	; (90004424 <main+0x398>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004394:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004398:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000439c:	f003 fe18 	bl	90007fd0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900043a0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900043a4:	4622      	mov	r2, r4
900043a6:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900043a8:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900043aa:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900043ac:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900043b0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
900043b4:	4d1c      	ldr	r5, [pc, #112]	; (90004428 <main+0x39c>)
  __HAL_RCC_MDMA_CLK_ENABLE();
900043b6:	4033      	ands	r3, r6
900043b8:	9300      	str	r3, [sp, #0]
900043ba:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900043bc:	f003 fb9c 	bl	90007af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900043c0:	207a      	movs	r0, #122	; 0x7a
900043c2:	f003 fbd7 	bl	90007b74 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900043c6:	2234      	movs	r2, #52	; 0x34
900043c8:	4621      	mov	r1, r4
900043ca:	a80f      	add	r0, sp, #60	; 0x3c
900043cc:	f01e fffa 	bl	900233c4 <memset>
  hltdc.Instance = LTDC;
900043d0:	4b16      	ldr	r3, [pc, #88]	; (9000442c <main+0x3a0>)
  hltdc.Init.AccumulatedVBP = 11;
900043d2:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
900043d4:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
900043d8:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900043da:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
900043dc:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
900043e0:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
900043e2:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900043e4:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
900043e6:	f8c5 8018 	str.w	r8, [r5, #24]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900043ea:	f04f 0802 	mov.w	r8, #2
  hltdc.Init.Backcolor.Red = 0;
900043ee:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
900043f2:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900043f6:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900043fa:	4628      	mov	r0, r5
900043fc:	e018      	b.n	90004430 <main+0x3a4>
900043fe:	bf00      	nop
90004400:	03000012 	.word	0x03000012
90004404:	01010001 	.word	0x01010001
90004408:	e000ed00 	.word	0xe000ed00
9000440c:	58024400 	.word	0x58024400
90004410:	58020400 	.word	0x58020400
90004414:	58020c00 	.word	0x58020c00
90004418:	58021000 	.word	0x58021000
9000441c:	58021800 	.word	0x58021800
90004420:	58022800 	.word	0x58022800
90004424:	58020000 	.word	0x58020000
90004428:	2400af58 	.word	0x2400af58
9000442c:	50001000 	.word	0x50001000
  hltdc.Init.AccumulatedActiveH = 283;
90004430:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90004434:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004438:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
9000443c:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004440:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004444:	f005 ffea 	bl	9000a41c <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
90004448:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000444c:	4622      	mov	r2, r4
9000444e:	a90f      	add	r1, sp, #60	; 0x3c
  pLayerCfg.WindowX1 = 480;
90004450:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004452:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
90004454:	9319      	str	r3, [sp, #100]	; 0x64
  pLayerCfg.WindowY1 = 272;
90004456:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
9000445a:	4d5d      	ldr	r5, [pc, #372]	; (900045d0 <main+0x544>)
  pLayerCfg.WindowY1 = 272;
9000445c:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.ImageHeight = 272;
9000445e:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.Alpha = 255;
90004460:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
90004462:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.Alpha = 255;
90004464:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004466:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
9000446a:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000446c:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha0 = 0;
9000446e:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
90004470:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
90004472:	f8ad 406c 	strh.w	r4, [sp, #108]	; 0x6c
  pLayerCfg.Backcolor.Red = 0;
90004476:	f88d 406e 	strb.w	r4, [sp, #110]	; 0x6e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000447a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000447e:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004482:	f006 f89f 	bl	9000a5c4 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
90004486:	4b53      	ldr	r3, [pc, #332]	; (900045d4 <main+0x548>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004488:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
9000448a:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
9000448c:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
9000448e:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90004490:	e9c5 4811 	strd	r4, r8, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90004494:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90004498:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
9000449c:	e9c5 4801 	strd	r4, r8, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900044a0:	f003 fc4e 	bl	90007d40 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900044a4:	4631      	mov	r1, r6
900044a6:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
900044a8:	4d4b      	ldr	r5, [pc, #300]	; (900045d8 <main+0x54c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900044aa:	f003 fd21 	bl	90007ef0 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
900044ae:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900044b0:	484a      	ldr	r0, [pc, #296]	; (900045dc <main+0x550>)
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900044b2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
900044b6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900044b8:	a90f      	add	r1, sp, #60	; 0x3c
  SdramTiming.RowCycleDelay = 7;
900044ba:	9312      	str	r3, [sp, #72]	; 0x48
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900044bc:	4b48      	ldr	r3, [pc, #288]	; (900045e0 <main+0x554>)
  SdramTiming.WriteRecoveryTime = 5;
900044be:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900044c2:	6003      	str	r3, [r0, #0]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900044c4:	2310      	movs	r3, #16
  SdramTiming.LoadToActiveDelay = 2;
900044c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900044ca:	6103      	str	r3, [r0, #16]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900044cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.SelfRefreshTime = 4;
900044d0:	9711      	str	r7, [sp, #68]	; 0x44
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900044d2:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900044d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900044d8:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
900044dc:	60c7      	str	r7, [r0, #12]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900044de:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900044e0:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900044e2:	e9c0 e308 	strd	lr, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
900044e6:	e9cd 8814 	strd	r8, r8, [sp, #80]	; 0x50
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900044ea:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900044ee:	f008 fc99 	bl	9000ce24 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
900044f2:	4620      	mov	r0, r4
900044f4:	f002 f9a4 	bl	90006840 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900044f8:	4620      	mov	r0, r4
900044fa:	f002 f9eb 	bl	900068d4 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
900044fe:	f7fb ff69 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004502:	4b38      	ldr	r3, [pc, #224]	; (900045e4 <main+0x558>)
90004504:	4838      	ldr	r0, [pc, #224]	; (900045e8 <main+0x55c>)
90004506:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004508:	f004 ff5c 	bl	900093c4 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
9000450c:	4837      	ldr	r0, [pc, #220]	; (900045ec <main+0x560>)
9000450e:	4b38      	ldr	r3, [pc, #224]	; (900045f0 <main+0x564>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004510:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90004512:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90004514:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90004516:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
9000451a:	f003 fb9b 	bl	90007c54 <HAL_CRC_Init>
  hadc1.Instance = ADC1;
9000451e:	4b35      	ldr	r3, [pc, #212]	; (900045f4 <main+0x568>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
90004520:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
90004522:	82ac      	strh	r4, [r5, #20]
  hadc1.Instance = ADC1;
90004524:	602b      	str	r3, [r5, #0]
  hadc1.Init.NbrOfConversion = 1;
90004526:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
90004528:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
9000452a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
9000452c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  ADC_MultiModeTypeDef multimode = {0};
90004530:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
90004532:	9415      	str	r4, [sp, #84]	; 0x54
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
90004534:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
90004538:	e9c5 4703 	strd	r4, r7, [r5, #12]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
9000453c:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
90004540:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
90004544:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
90004548:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
9000454c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  ADC_MultiModeTypeDef multimode = {0};
90004550:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
90004554:	f003 f948 	bl	900077e8 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
90004558:	a90c      	add	r1, sp, #48	; 0x30
9000455a:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
9000455c:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
9000455e:	f003 fa51 	bl	90007a04 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
90004562:	4b25      	ldr	r3, [pc, #148]	; (900045f8 <main+0x56c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
90004564:	a90f      	add	r1, sp, #60	; 0x3c
90004566:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
90004568:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
9000456a:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
9000456c:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
9000456e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90004570:	f240 73ff 	movw	r3, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
90004574:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
90004576:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.Offset = 0;
90004578:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.OffsetSignedSaturation = DISABLE;
9000457a:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
9000457e:	f002 fc9f 	bl	90006ec0 <HAL_ADC_ConfigChannel>
  MX_TouchGFX_Init();
90004582:	f7fb ff2b 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
90004586:	f7fb ff27 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
9000458a:	f008 ff69 	bl	9000d460 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000458e:	4a1b      	ldr	r2, [pc, #108]	; (900045fc <main+0x570>)
90004590:	4621      	mov	r1, r4
90004592:	481b      	ldr	r0, [pc, #108]	; (90004600 <main+0x574>)
90004594:	f008 ff90 	bl	9000d4b8 <osThreadNew>
90004598:	4b1a      	ldr	r3, [pc, #104]	; (90004604 <main+0x578>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000459a:	4a1b      	ldr	r2, [pc, #108]	; (90004608 <main+0x57c>)
9000459c:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000459e:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900045a0:	481a      	ldr	r0, [pc, #104]	; (9000460c <main+0x580>)
900045a2:	f008 ff89 	bl	9000d4b8 <osThreadNew>
900045a6:	4b1a      	ldr	r3, [pc, #104]	; (90004610 <main+0x584>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900045a8:	4a1a      	ldr	r2, [pc, #104]	; (90004614 <main+0x588>)
900045aa:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900045ac:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900045ae:	481a      	ldr	r0, [pc, #104]	; (90004618 <main+0x58c>)
900045b0:	f008 ff82 	bl	9000d4b8 <osThreadNew>
900045b4:	4b19      	ldr	r3, [pc, #100]	; (9000461c <main+0x590>)
900045b6:	4605      	mov	r5, r0
  readTask0Handle = osThreadNew(readTask, NULL, &readTask0_attributes);
900045b8:	4a19      	ldr	r2, [pc, #100]	; (90004620 <main+0x594>)
900045ba:	4621      	mov	r1, r4
900045bc:	4819      	ldr	r0, [pc, #100]	; (90004624 <main+0x598>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900045be:	601d      	str	r5, [r3, #0]
  readTask0Handle = osThreadNew(readTask, NULL, &readTask0_attributes);
900045c0:	f008 ff7a 	bl	9000d4b8 <osThreadNew>
900045c4:	4b18      	ldr	r3, [pc, #96]	; (90004628 <main+0x59c>)
900045c6:	6018      	str	r0, [r3, #0]
  osKernelStart();
900045c8:	f008 ff5c 	bl	9000d484 <osKernelStart>
  while (1)
900045cc:	e7fe      	b.n	900045cc <main+0x540>
900045ce:	bf00      	nop
900045d0:	2400ae98 	.word	0x2400ae98
900045d4:	52001000 	.word	0x52001000
900045d8:	2400ae10 	.word	0x2400ae10
900045dc:	2400b0d8 	.word	0x2400b0d8
900045e0:	52004140 	.word	0x52004140
900045e4:	52003000 	.word	0x52003000
900045e8:	2400af00 	.word	0x2400af00
900045ec:	2400ae74 	.word	0x2400ae74
900045f0:	58024c00 	.word	0x58024c00
900045f4:	40022000 	.word	0x40022000
900045f8:	2a000400 	.word	0x2a000400
900045fc:	90025c28 	.word	0x90025c28
90004600:	90003fb5 	.word	0x90003fb5
90004604:	2400ae0c 	.word	0x2400ae0c
90004608:	90025c04 	.word	0x90025c04
9000460c:	900003ed 	.word	0x900003ed
90004610:	2400ae08 	.word	0x2400ae08
90004614:	90025c70 	.word	0x90025c70
90004618:	90002919 	.word	0x90002919
9000461c:	2400b110 	.word	0x2400b110
90004620:	90025c4c 	.word	0x90025c4c
90004624:	90003fc1 	.word	0x90003fc1
90004628:	2400b10c 	.word	0x2400b10c

9000462c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
9000462c:	4b03      	ldr	r3, [pc, #12]	; (9000463c <HAL_TIM_PeriodElapsedCallback+0x10>)
9000462e:	6802      	ldr	r2, [r0, #0]
90004630:	429a      	cmp	r2, r3
90004632:	d000      	beq.n	90004636 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004634:	4770      	bx	lr
    HAL_IncTick();
90004636:	f002 bba1 	b.w	90006d7c <HAL_IncTick>
9000463a:	bf00      	nop
9000463c:	40001000 	.word	0x40001000

90004640 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004640:	4770      	bx	lr
90004642:	bf00      	nop

90004644 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004644:	4b0b      	ldr	r3, [pc, #44]	; (90004674 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004646:	2200      	movs	r2, #0
90004648:	210f      	movs	r1, #15
9000464a:	f06f 0001 	mvn.w	r0, #1
{
9000464e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004650:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004654:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004656:	f044 0402 	orr.w	r4, r4, #2
9000465a:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
9000465e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90004662:	f003 0302 	and.w	r3, r3, #2
90004666:	9301      	str	r3, [sp, #4]
90004668:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000466a:	b003      	add	sp, #12
9000466c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004670:	f003 ba42 	b.w	90007af8 <HAL_NVIC_SetPriority>
90004674:	58024400 	.word	0x58024400

90004678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
90004678:	b510      	push	{r4, lr}
9000467a:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000467c:	2100      	movs	r1, #0
{
9000467e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004680:	22c0      	movs	r2, #192	; 0xc0
90004682:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004684:	9106      	str	r1, [sp, #24]
90004686:	e9cd 1102 	strd	r1, r1, [sp, #8]
9000468a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000468e:	f01e fe99 	bl	900233c4 <memset>
  if(hadc->Instance==ADC1)
90004692:	4b25      	ldr	r3, [pc, #148]	; (90004728 <HAL_ADC_MspInit+0xb0>)
90004694:	6822      	ldr	r2, [r4, #0]
90004696:	429a      	cmp	r2, r3
90004698:	d001      	beq.n	9000469e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
9000469a:	b038      	add	sp, #224	; 0xe0
9000469c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PLL2.PLL2P = 2;
9000469e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2M = 32;
900046a0:	2220      	movs	r2, #32
    PeriphClkInitStruct.PLL2.PLL2N = 129;
900046a2:	2181      	movs	r1, #129	; 0x81
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900046a4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLL2.PLL2P = 2;
900046a6:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2M = 32;
900046a8:	920a      	str	r2, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
900046aa:	2202      	movs	r2, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
900046ac:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
900046ae:	23c0      	movs	r3, #192	; 0xc0
    PeriphClkInitStruct.PLL2.PLL2N = 129;
900046b0:	910b      	str	r1, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
900046b2:	ed9f 7b19 	vldr	d7, [pc, #100]	; 90004718 <HAL_ADC_MspInit+0xa0>
    PeriphClkInitStruct.PLL2.PLL2R = 2;
900046b6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
900046ba:	ed8d 7b08 	vstr	d7, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900046be:	f007 f9e5 	bl	9000ba8c <HAL_RCCEx_PeriphCLKConfig>
900046c2:	bb20      	cbnz	r0, 9000470e <HAL_ADC_MspInit+0x96>
    __HAL_RCC_ADC12_CLK_ENABLE();
900046c4:	4b19      	ldr	r3, [pc, #100]	; (9000472c <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900046c6:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900046c8:	a902      	add	r1, sp, #8
900046ca:	4819      	ldr	r0, [pc, #100]	; (90004730 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
900046cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
900046d0:	f042 0220 	orr.w	r2, r2, #32
900046d4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
900046d8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
900046dc:	f002 0220 	and.w	r2, r2, #32
900046e0:	9200      	str	r2, [sp, #0]
900046e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900046e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900046e8:	f042 0204 	orr.w	r2, r2, #4
900046ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900046f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900046f4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900046f6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
900046fa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 90004720 <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
900046fe:	9301      	str	r3, [sp, #4]
90004700:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
90004702:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90004706:	f003 fc63 	bl	90007fd0 <HAL_GPIO_Init>
}
9000470a:	b038      	add	sp, #224	; 0xe0
9000470c:	bd10      	pop	{r4, pc}
      Error_Handler();
9000470e:	f7ff ff97 	bl	90004640 <Error_Handler>
90004712:	e7d7      	b.n	900046c4 <HAL_ADC_MspInit+0x4c>
90004714:	f3af 8000 	nop.w
90004718:	00080000 	.word	0x00080000
9000471c:	00000000 	.word	0x00000000
90004720:	00000001 	.word	0x00000001
90004724:	00000003 	.word	0x00000003
90004728:	40022000 	.word	0x40022000
9000472c:	58024400 	.word	0x58024400
90004730:	58020800 	.word	0x58020800

90004734 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90004734:	4b0a      	ldr	r3, [pc, #40]	; (90004760 <HAL_CRC_MspInit+0x2c>)
90004736:	6802      	ldr	r2, [r0, #0]
90004738:	429a      	cmp	r2, r3
9000473a:	d000      	beq.n	9000473e <HAL_CRC_MspInit+0xa>
9000473c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
9000473e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
90004742:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90004744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004748:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
9000474c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004758:	9301      	str	r3, [sp, #4]
9000475a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
9000475c:	b002      	add	sp, #8
9000475e:	4770      	bx	lr
90004760:	58024c00 	.word	0x58024c00

90004764 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004764:	4b0f      	ldr	r3, [pc, #60]	; (900047a4 <HAL_DMA2D_MspInit+0x40>)
90004766:	6802      	ldr	r2, [r0, #0]
90004768:	429a      	cmp	r2, r3
9000476a:	d000      	beq.n	9000476e <HAL_DMA2D_MspInit+0xa>
9000476c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000476e:	4b0e      	ldr	r3, [pc, #56]	; (900047a8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004770:	205a      	movs	r0, #90	; 0x5a
90004772:	2200      	movs	r2, #0
90004774:	2105      	movs	r1, #5
{
90004776:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004778:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
9000477c:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000477e:	f044 0410 	orr.w	r4, r4, #16
90004782:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
90004786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
9000478a:	f003 0310 	and.w	r3, r3, #16
9000478e:	9301      	str	r3, [sp, #4]
90004790:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004792:	f003 f9b1 	bl	90007af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90004796:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90004798:	b002      	add	sp, #8
9000479a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
9000479e:	f003 b9e9 	b.w	90007b74 <HAL_NVIC_EnableIRQ>
900047a2:	bf00      	nop
900047a4:	52001000 	.word	0x52001000
900047a8:	58024400 	.word	0x58024400

900047ac <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900047ac:	4b3f      	ldr	r3, [pc, #252]	; (900048ac <HAL_JPEG_MspInit+0x100>)
900047ae:	6802      	ldr	r2, [r0, #0]
900047b0:	429a      	cmp	r2, r3
900047b2:	d000      	beq.n	900047b6 <HAL_JPEG_MspInit+0xa>
900047b4:	4770      	bx	lr
{
900047b6:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900047b8:	4b3d      	ldr	r3, [pc, #244]	; (900048b0 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047ba:	2211      	movs	r2, #17
900047bc:	4e3d      	ldr	r6, [pc, #244]	; (900048b4 <HAL_JPEG_MspInit+0x108>)
{
900047be:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900047c0:	4d3d      	ldr	r5, [pc, #244]	; (900048b8 <HAL_JPEG_MspInit+0x10c>)
900047c2:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047c4:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900047c6:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
900047c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900047cc:	493b      	ldr	r1, [pc, #236]	; (900048bc <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
900047ce:	f042 0220 	orr.w	r2, r2, #32
900047d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900047d6:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
900047d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900047dc:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
900047de:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900047e2:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
900047e4:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900047e6:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
900047e8:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900047ea:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900047ec:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900047f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900047f4:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900047f6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
900047f8:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
900047fc:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004800:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90004802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
90004806:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
9000480a:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000480e:	2313      	movs	r3, #19
90004810:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90004812:	2302      	movs	r3, #2
90004814:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
90004816:	f005 ffc9 	bl	9000a7ac <HAL_MDMA_Init>
9000481a:	2800      	cmp	r0, #0
9000481c:	d13a      	bne.n	90004894 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
9000481e:	2200      	movs	r2, #0
90004820:	4824      	ldr	r0, [pc, #144]	; (900048b4 <HAL_JPEG_MspInit+0x108>)
90004822:	4611      	mov	r1, r2
90004824:	f006 f860 	bl	9000a8e8 <HAL_MDMA_ConfigPostRequestMask>
90004828:	2800      	cmp	r0, #0
9000482a:	d13c      	bne.n	900048a6 <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000482c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000482e:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004830:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004832:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004834:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
90004836:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004838:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000483c:	4920      	ldr	r1, [pc, #128]	; (900048c0 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000483e:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004840:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
90004842:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004844:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004846:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
9000484a:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000484e:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004850:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004852:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004856:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004858:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000485c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004860:	4815      	ldr	r0, [pc, #84]	; (900048b8 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004862:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004864:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004866:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004868:	f005 ffa0 	bl	9000a7ac <HAL_MDMA_Init>
9000486c:	b9c0      	cbnz	r0, 900048a0 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
9000486e:	2200      	movs	r2, #0
90004870:	4811      	ldr	r0, [pc, #68]	; (900048b8 <HAL_JPEG_MspInit+0x10c>)
90004872:	4611      	mov	r1, r2
90004874:	f006 f838 	bl	9000a8e8 <HAL_MDMA_ConfigPostRequestMask>
90004878:	b978      	cbnz	r0, 9000489a <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000487a:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
9000487c:	2079      	movs	r0, #121	; 0x79
9000487e:	2200      	movs	r2, #0
90004880:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004882:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004884:	f003 f938 	bl	90007af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004888:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
9000488a:	b002      	add	sp, #8
9000488c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004890:	f003 b970 	b.w	90007b74 <HAL_NVIC_EnableIRQ>
      Error_Handler();
90004894:	f7ff fed4 	bl	90004640 <Error_Handler>
90004898:	e7c1      	b.n	9000481e <HAL_JPEG_MspInit+0x72>
      Error_Handler();
9000489a:	f7ff fed1 	bl	90004640 <Error_Handler>
9000489e:	e7ec      	b.n	9000487a <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900048a0:	f7ff fece 	bl	90004640 <Error_Handler>
900048a4:	e7e3      	b.n	9000486e <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900048a6:	f7ff fecb 	bl	90004640 <Error_Handler>
900048aa:	e7bf      	b.n	9000482c <HAL_JPEG_MspInit+0x80>
900048ac:	52003000 	.word	0x52003000
900048b0:	58024400 	.word	0x58024400
900048b4:	2400b000 	.word	0x2400b000
900048b8:	2400b06c 	.word	0x2400b06c
900048bc:	52000200 	.word	0x52000200
900048c0:	520001c0 	.word	0x520001c0

900048c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900048c4:	b570      	push	{r4, r5, r6, lr}
900048c6:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900048c8:	2100      	movs	r1, #0
{
900048ca:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900048cc:	22c0      	movs	r2, #192	; 0xc0
900048ce:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900048d0:	9109      	str	r1, [sp, #36]	; 0x24
900048d2:	e9cd 1105 	strd	r1, r1, [sp, #20]
900048d6:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900048da:	f01e fd73 	bl	900233c4 <memset>
  if(hltdc->Instance==LTDC)
900048de:	4b4a      	ldr	r3, [pc, #296]	; (90004a08 <HAL_LTDC_MspInit+0x144>)
900048e0:	6822      	ldr	r2, [r4, #0]
900048e2:	429a      	cmp	r2, r3
900048e4:	d001      	beq.n	900048ea <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
900048e6:	b03a      	add	sp, #232	; 0xe8
900048e8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
900048ea:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
900048ec:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900048ee:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
900048f2:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
900048f4:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
900048f6:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
900048f8:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900048fa:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
900048fc:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
900048fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004902:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004904:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004906:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
9000490a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000490e:	f007 f8bd 	bl	9000ba8c <HAL_RCCEx_PeriphCLKConfig>
90004912:	2800      	cmp	r0, #0
90004914:	d174      	bne.n	90004a00 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004916:	4b3d      	ldr	r3, [pc, #244]	; (90004a0c <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004918:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000491a:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000491c:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
9000491e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004922:	a905      	add	r1, sp, #20
90004924:	483a      	ldr	r0, [pc, #232]	; (90004a10 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004926:	f042 0208 	orr.w	r2, r2, #8
9000492a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
9000492e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004932:	f002 0208 	and.w	r2, r2, #8
90004936:	9200      	str	r2, [sp, #0]
90004938:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
9000493a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000493e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004942:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004946:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000494a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
9000494e:	9201      	str	r2, [sp, #4]
90004950:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004952:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000495a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000495e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004962:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004966:	9202      	str	r2, [sp, #8]
90004968:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
9000496a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004972:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004976:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000497a:	f402 7200 	and.w	r2, r2, #512	; 0x200
9000497e:	9203      	str	r2, [sp, #12]
90004980:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004982:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
9000498a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000498e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004992:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004998:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000499a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
9000499c:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000499e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900049a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900049a6:	f003 fb13 	bl	90007fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049aa:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049ae:	a905      	add	r1, sp, #20
900049b0:	4818      	ldr	r0, [pc, #96]	; (90004a14 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049b8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049bc:	f003 fb08 	bl	90007fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900049c0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900049c4:	a905      	add	r1, sp, #20
900049c6:	4814      	ldr	r0, [pc, #80]	; (90004a18 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900049c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049ce:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900049d2:	f003 fafd 	bl	90007fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900049d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900049da:	a905      	add	r1, sp, #20
900049dc:	480f      	ldr	r0, [pc, #60]	; (90004a1c <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049de:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
900049e0:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900049e4:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900049e8:	f003 faf2 	bl	90007fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
900049ec:	462a      	mov	r2, r5
900049ee:	2105      	movs	r1, #5
900049f0:	2058      	movs	r0, #88	; 0x58
900049f2:	f003 f881 	bl	90007af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
900049f6:	2058      	movs	r0, #88	; 0x58
900049f8:	f003 f8bc 	bl	90007b74 <HAL_NVIC_EnableIRQ>
}
900049fc:	b03a      	add	sp, #232	; 0xe8
900049fe:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004a00:	f7ff fe1e 	bl	90004640 <Error_Handler>
90004a04:	e787      	b.n	90004916 <HAL_LTDC_MspInit+0x52>
90004a06:	bf00      	nop
90004a08:	50001000 	.word	0x50001000
90004a0c:	58024400 	.word	0x58024400
90004a10:	58022800 	.word	0x58022800
90004a14:	58022000 	.word	0x58022000
90004a18:	58022400 	.word	0x58022400
90004a1c:	58021c00 	.word	0x58021c00

90004a20 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004a20:	4836      	ldr	r0, [pc, #216]	; (90004afc <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a22:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a24:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004a26:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a28:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004a2e:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004a32:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004a34:	b109      	cbz	r1, 90004a3a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004a36:	b038      	add	sp, #224	; 0xe0
90004a38:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004a3a:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a3c:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004a3e:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a40:	a80a      	add	r0, sp, #40	; 0x28
90004a42:	f01e fcbf 	bl	900233c4 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004a4a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a4c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a52:	f007 f81b 	bl	9000ba8c <HAL_RCCEx_PeriphCLKConfig>
90004a56:	2800      	cmp	r0, #0
90004a58:	d14c      	bne.n	90004af4 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004a5a:	4b29      	ldr	r3, [pc, #164]	; (90004b00 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a5c:	f64f 7083 	movw	r0, #65411	; 0xff83
90004a60:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a62:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004a64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a68:	2600      	movs	r6, #0
90004a6a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004a70:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004a74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a78:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004a82:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004a84:	a902      	add	r1, sp, #8
90004a86:	481f      	ldr	r0, [pc, #124]	; (90004b04 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004a88:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004a8e:	f003 fa9f 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004a92:	f248 1233 	movw	r2, #33075	; 0x8133
90004a96:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004a98:	a902      	add	r1, sp, #8
90004a9a:	481b      	ldr	r0, [pc, #108]	; (90004b08 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a9c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004aa2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004aa6:	f003 fa93 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004aaa:	f24c 7203 	movw	r2, #50947	; 0xc703
90004aae:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004ab0:	a902      	add	r1, sp, #8
90004ab2:	4816      	ldr	r0, [pc, #88]	; (90004b0c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ab4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004aba:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004abe:	f003 fa87 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004ac2:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004ac6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004ac8:	a902      	add	r1, sp, #8
90004aca:	4811      	ldr	r0, [pc, #68]	; (90004b10 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004acc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004ad2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004ad6:	f003 fa7b 	bl	90007fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004ada:	22e0      	movs	r2, #224	; 0xe0
90004adc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004ade:	a902      	add	r1, sp, #8
90004ae0:	480c      	ldr	r0, [pc, #48]	; (90004b14 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ae2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004ae4:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004aec:	f003 fa70 	bl	90007fd0 <HAL_GPIO_Init>
}
90004af0:	b038      	add	sp, #224	; 0xe0
90004af2:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004af4:	f7ff fda4 	bl	90004640 <Error_Handler>
90004af8:	e7af      	b.n	90004a5a <HAL_SDRAM_MspInit+0x3a>
90004afa:	bf00      	nop
90004afc:	2400b118 	.word	0x2400b118
90004b00:	58024400 	.word	0x58024400
90004b04:	58021000 	.word	0x58021000
90004b08:	58021800 	.word	0x58021800
90004b0c:	58020c00 	.word	0x58020c00
90004b10:	58021400 	.word	0x58021400
90004b14:	58021c00 	.word	0x58021c00

90004b18 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004b18:	4b13      	ldr	r3, [pc, #76]	; (90004b68 <HAL_SDRAM_MspDeInit+0x50>)
90004b1a:	681a      	ldr	r2, [r3, #0]
90004b1c:	b102      	cbz	r2, 90004b20 <HAL_SDRAM_MspDeInit+0x8>
90004b1e:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004b20:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004b22:	4a12      	ldr	r2, [pc, #72]	; (90004b6c <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004b24:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b26:	f64f 7183 	movw	r1, #65411	; 0xff83
90004b2a:	4811      	ldr	r0, [pc, #68]	; (90004b70 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004b2c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004b2e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004b36:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b3a:	f003 fb7b 	bl	90008234 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004b3e:	f248 1133 	movw	r1, #33075	; 0x8133
90004b42:	480c      	ldr	r0, [pc, #48]	; (90004b74 <HAL_SDRAM_MspDeInit+0x5c>)
90004b44:	f003 fb76 	bl	90008234 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004b48:	f24c 7103 	movw	r1, #50947	; 0xc703
90004b4c:	480a      	ldr	r0, [pc, #40]	; (90004b78 <HAL_SDRAM_MspDeInit+0x60>)
90004b4e:	f003 fb71 	bl	90008234 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004b52:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004b56:	4809      	ldr	r0, [pc, #36]	; (90004b7c <HAL_SDRAM_MspDeInit+0x64>)
90004b58:	f003 fb6c 	bl	90008234 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b5c:	21e0      	movs	r1, #224	; 0xe0
90004b5e:	4808      	ldr	r0, [pc, #32]	; (90004b80 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b64:	f003 bb66 	b.w	90008234 <HAL_GPIO_DeInit>
90004b68:	2400b114 	.word	0x2400b114
90004b6c:	58024400 	.word	0x58024400
90004b70:	58021000 	.word	0x58021000
90004b74:	58021800 	.word	0x58021800
90004b78:	58020c00 	.word	0x58020c00
90004b7c:	58021400 	.word	0x58021400
90004b80:	58021c00 	.word	0x58021c00

90004b84 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004b84:	280f      	cmp	r0, #15
90004b86:	d901      	bls.n	90004b8c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004b88:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004b8a:	4770      	bx	lr
{
90004b8c:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004b8e:	4601      	mov	r1, r0
{
90004b90:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004b92:	2200      	movs	r2, #0
90004b94:	4604      	mov	r4, r0
90004b96:	2036      	movs	r0, #54	; 0x36
90004b98:	f002 ffae 	bl	90007af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004b9c:	2036      	movs	r0, #54	; 0x36
90004b9e:	f002 ffe9 	bl	90007b74 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004ba2:	4b1a      	ldr	r3, [pc, #104]	; (90004c0c <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004ba4:	4a1a      	ldr	r2, [pc, #104]	; (90004c10 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004ba6:	4669      	mov	r1, sp
90004ba8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004baa:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004bac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004bb0:	f042 0210 	orr.w	r2, r2, #16
90004bb4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004bbc:	f003 0310 	and.w	r3, r3, #16
90004bc0:	9301      	str	r3, [sp, #4]
90004bc2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004bc4:	f006 fe42 	bl	9000b84c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004bc8:	9b07      	ldr	r3, [sp, #28]
90004bca:	b9bb      	cbnz	r3, 90004bfc <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004bcc:	f006 fdae 	bl	9000b72c <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004bd0:	4b10      	ldr	r3, [pc, #64]	; (90004c14 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004bd2:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004bd4:	4c10      	ldr	r4, [pc, #64]	; (90004c18 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004bd6:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004bda:	4d10      	ldr	r5, [pc, #64]	; (90004c1c <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004bdc:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004be0:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004be2:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004be4:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004be6:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004be8:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004bea:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004bee:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004bf0:	f008 f98a 	bl	9000cf08 <HAL_TIM_Base_Init>
90004bf4:	b130      	cbz	r0, 90004c04 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004bf6:	2001      	movs	r0, #1
}
90004bf8:	b00b      	add	sp, #44	; 0x2c
90004bfa:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004bfc:	f006 fd96 	bl	9000b72c <HAL_RCC_GetPCLK1Freq>
90004c00:	0040      	lsls	r0, r0, #1
90004c02:	e7e5      	b.n	90004bd0 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004c04:	4620      	mov	r0, r4
90004c06:	f008 fa35 	bl	9000d074 <HAL_TIM_Base_Start_IT>
90004c0a:	e7f5      	b.n	90004bf8 <HAL_InitTick+0x74>
90004c0c:	58024400 	.word	0x58024400
90004c10:	24000060 	.word	0x24000060
90004c14:	431bde83 	.word	0x431bde83
90004c18:	2400b11c 	.word	0x2400b11c
90004c1c:	40001000 	.word	0x40001000

90004c20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004c20:	4770      	bx	lr
90004c22:	bf00      	nop

90004c24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004c24:	e7fe      	b.n	90004c24 <HardFault_Handler>
90004c26:	bf00      	nop

90004c28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004c28:	e7fe      	b.n	90004c28 <MemManage_Handler>
90004c2a:	bf00      	nop

90004c2c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004c2c:	e7fe      	b.n	90004c2c <BusFault_Handler>
90004c2e:	bf00      	nop

90004c30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004c30:	e7fe      	b.n	90004c30 <UsageFault_Handler>
90004c32:	bf00      	nop

90004c34 <DebugMon_Handler>:
90004c34:	4770      	bx	lr
90004c36:	bf00      	nop

90004c38 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004c38:	4801      	ldr	r0, [pc, #4]	; (90004c40 <TIM6_DAC_IRQHandler+0x8>)
90004c3a:	f008 ba7f 	b.w	9000d13c <HAL_TIM_IRQHandler>
90004c3e:	bf00      	nop
90004c40:	2400b11c 	.word	0x2400b11c

90004c44 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004c44:	4801      	ldr	r0, [pc, #4]	; (90004c4c <LTDC_IRQHandler+0x8>)
90004c46:	f005 bc5b 	b.w	9000a500 <HAL_LTDC_IRQHandler>
90004c4a:	bf00      	nop
90004c4c:	2400af58 	.word	0x2400af58

90004c50 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004c50:	4801      	ldr	r0, [pc, #4]	; (90004c58 <DMA2D_IRQHandler+0x8>)
90004c52:	f003 b8b9 	b.w	90007dc8 <HAL_DMA2D_IRQHandler>
90004c56:	bf00      	nop
90004c58:	2400ae98 	.word	0x2400ae98

90004c5c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004c5c:	4801      	ldr	r0, [pc, #4]	; (90004c64 <JPEG_IRQHandler+0x8>)
90004c5e:	f005 bb3b 	b.w	9000a2d8 <HAL_JPEG_IRQHandler>
90004c62:	bf00      	nop
90004c64:	2400af00 	.word	0x2400af00

90004c68 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c68:	4804      	ldr	r0, [pc, #16]	; (90004c7c <MDMA_IRQHandler+0x14>)
{
90004c6a:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004c6c:	f005 fefc 	bl	9000aa68 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c70:	4803      	ldr	r0, [pc, #12]	; (90004c80 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004c76:	f005 bef7 	b.w	9000aa68 <HAL_MDMA_IRQHandler>
90004c7a:	bf00      	nop
90004c7c:	2400b06c 	.word	0x2400b06c
90004c80:	2400b000 	.word	0x2400b000

90004c84 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004c84:	2001      	movs	r0, #1
90004c86:	4770      	bx	lr

90004c88 <_kill>:

int _kill(int pid, int sig)
{
90004c88:	b508      	push	{r3, lr}
	errno = EINVAL;
90004c8a:	f01e fc4f 	bl	9002352c <__errno>
90004c8e:	2216      	movs	r2, #22
90004c90:	4603      	mov	r3, r0
	return -1;
}
90004c92:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004c96:	601a      	str	r2, [r3, #0]
}
90004c98:	bd08      	pop	{r3, pc}
90004c9a:	bf00      	nop

90004c9c <_exit>:

void _exit (int status)
{
90004c9c:	b508      	push	{r3, lr}
	errno = EINVAL;
90004c9e:	f01e fc45 	bl	9002352c <__errno>
90004ca2:	2316      	movs	r3, #22
90004ca4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004ca6:	e7fe      	b.n	90004ca6 <_exit+0xa>

90004ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004ca8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004caa:	1e16      	subs	r6, r2, #0
90004cac:	dd07      	ble.n	90004cbe <_read+0x16>
90004cae:	460c      	mov	r4, r1
90004cb0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004cb2:	f3af 8000 	nop.w
90004cb6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cba:	42a5      	cmp	r5, r4
90004cbc:	d1f9      	bne.n	90004cb2 <_read+0xa>
	}

return len;
}
90004cbe:	4630      	mov	r0, r6
90004cc0:	bd70      	pop	{r4, r5, r6, pc}
90004cc2:	bf00      	nop

90004cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004cc4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cc6:	1e16      	subs	r6, r2, #0
90004cc8:	dd07      	ble.n	90004cda <_write+0x16>
90004cca:	460c      	mov	r4, r1
90004ccc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004cce:	f814 0b01 	ldrb.w	r0, [r4], #1
90004cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cd6:	42ac      	cmp	r4, r5
90004cd8:	d1f9      	bne.n	90004cce <_write+0xa>
	}
	return len;
}
90004cda:	4630      	mov	r0, r6
90004cdc:	bd70      	pop	{r4, r5, r6, pc}
90004cde:	bf00      	nop

90004ce0 <_close>:

int _close(int file)
{
	return -1;
}
90004ce0:	f04f 30ff 	mov.w	r0, #4294967295
90004ce4:	4770      	bx	lr
90004ce6:	bf00      	nop

90004ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004cec:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004cee:	604b      	str	r3, [r1, #4]
}
90004cf0:	4770      	bx	lr
90004cf2:	bf00      	nop

90004cf4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004cf4:	2001      	movs	r0, #1
90004cf6:	4770      	bx	lr

90004cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004cf8:	2000      	movs	r0, #0
90004cfa:	4770      	bx	lr

90004cfc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004cfc:	4a0a      	ldr	r2, [pc, #40]	; (90004d28 <_sbrk+0x2c>)
{
90004cfe:	b508      	push	{r3, lr}
90004d00:	4603      	mov	r3, r0
	if (heap_end == 0)
90004d02:	6810      	ldr	r0, [r2, #0]
90004d04:	b128      	cbz	r0, 90004d12 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004d06:	4403      	add	r3, r0
90004d08:	4669      	mov	r1, sp
90004d0a:	428b      	cmp	r3, r1
90004d0c:	d805      	bhi.n	90004d1a <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004d0e:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004d10:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004d12:	4906      	ldr	r1, [pc, #24]	; (90004d2c <_sbrk+0x30>)
90004d14:	4608      	mov	r0, r1
90004d16:	6011      	str	r1, [r2, #0]
90004d18:	e7f5      	b.n	90004d06 <_sbrk+0xa>
		errno = ENOMEM;
90004d1a:	f01e fc07 	bl	9002352c <__errno>
90004d1e:	220c      	movs	r2, #12
90004d20:	4603      	mov	r3, r0
		return NULL;
90004d22:	2000      	movs	r0, #0
		errno = ENOMEM;
90004d24:	601a      	str	r2, [r3, #0]
}
90004d26:	bd08      	pop	{r3, pc}
90004d28:	2400b168 	.word	0x2400b168
90004d2c:	24026648 	.word	0x24026648

90004d30 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004d30:	4770      	bx	lr
90004d32:	bf00      	nop

90004d34 <_ZN23ApplicationFontProviderD0Ev>:
90004d34:	b510      	push	{r4, lr}
90004d36:	4604      	mov	r4, r0
90004d38:	2104      	movs	r1, #4
90004d3a:	f01e f87a 	bl	90022e32 <_ZdlPvj>
90004d3e:	4620      	mov	r0, r4
90004d40:	bd10      	pop	{r4, pc}
90004d42:	bf00      	nop

90004d44 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004d44:	2901      	cmp	r1, #1
{
90004d46:	b508      	push	{r3, lr}
    switch (typography)
90004d48:	d004      	beq.n	90004d54 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004d4a:	2902      	cmp	r1, #2
90004d4c:	d00a      	beq.n	90004d64 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004d4e:	b129      	cbz	r1, 90004d5c <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004d50:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004d52:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004d54:	f000 fdf4 	bl	90005940 <_ZN17TypedTextDatabase8getFontsEv>
90004d58:	6840      	ldr	r0, [r0, #4]
}
90004d5a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004d5c:	f000 fdf0 	bl	90005940 <_ZN17TypedTextDatabase8getFontsEv>
90004d60:	6800      	ldr	r0, [r0, #0]
}
90004d62:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004d64:	f000 fdec 	bl	90005940 <_ZN17TypedTextDatabase8getFontsEv>
90004d68:	6880      	ldr	r0, [r0, #8]
}
90004d6a:	bd08      	pop	{r3, pc}

90004d6c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004d6c:	4800      	ldr	r0, [pc, #0]	; (90004d70 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004d6e:	4770      	bx	lr
90004d70:	90025ca8 	.word	0x90025ca8

90004d74 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004d74:	2001      	movs	r0, #1
90004d76:	4770      	bx	lr

90004d78 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004d78:	b169      	cbz	r1, 90004d96 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d7a:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004d7c:	b530      	push	{r4, r5, lr}
90004d7e:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004d80:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d82:	6895      	ldr	r5, [r2, #8]
90004d84:	f10d 0303 	add.w	r3, sp, #3
90004d88:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004d8a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004d8c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004d90:	47a8      	blx	r5
        return glyph;
    }
90004d92:	b003      	add	sp, #12
90004d94:	bd30      	pop	{r4, r5, pc}
            return 0;
90004d96:	4608      	mov	r0, r1
    }
90004d98:	4770      	bx	lr
90004d9a:	bf00      	nop

90004d9c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004d9c:	89c0      	ldrh	r0, [r0, #14]
90004d9e:	4770      	bx	lr

90004da0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004da0:	8a00      	ldrh	r0, [r0, #16]
90004da2:	4770      	bx	lr

90004da4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004da4:	88c0      	ldrh	r0, [r0, #6]
90004da6:	4770      	bx	lr

90004da8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004da8:	8880      	ldrh	r0, [r0, #4]
90004daa:	4770      	bx	lr

90004dac <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004dac:	7a80      	ldrb	r0, [r0, #10]
    }
90004dae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004db2:	4770      	bx	lr

90004db4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004db4:	7a80      	ldrb	r0, [r0, #10]
    }
90004db6:	09c0      	lsrs	r0, r0, #7
90004db8:	4770      	bx	lr
90004dba:	bf00      	nop

90004dbc <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004dbc:	4770      	bx	lr
90004dbe:	bf00      	nop

90004dc0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004dc0:	b510      	push	{r4, lr}
90004dc2:	4604      	mov	r4, r0
    }
90004dc4:	2108      	movs	r1, #8
90004dc6:	f01e f834 	bl	90022e32 <_ZdlPvj>
90004dca:	4620      	mov	r0, r4
90004dcc:	bd10      	pop	{r4, pc}
90004dce:	bf00      	nop

90004dd0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004dd0:	4770      	bx	lr
90004dd2:	bf00      	nop

90004dd4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004dd4:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004dd8:	6808      	ldr	r0, [r1, #0]
90004dda:	6849      	ldr	r1, [r1, #4]
90004ddc:	c303      	stmia	r3!, {r0, r1}
    }
90004dde:	4770      	bx	lr

90004de0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004de0:	4770      	bx	lr
90004de2:	bf00      	nop

90004de4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004de4:	4770      	bx	lr
90004de6:	bf00      	nop

90004de8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004de8:	6041      	str	r1, [r0, #4]
    }
90004dea:	4770      	bx	lr

90004dec <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004dec:	4770      	bx	lr
90004dee:	bf00      	nop

90004df0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004df0:	4905      	ldr	r1, [pc, #20]	; (90004e08 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004df2:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004df4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004df8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004dfc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004e00:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004e04:	4770      	bx	lr
90004e06:	bf00      	nop
90004e08:	90004e95 	.word	0x90004e95

90004e0c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004e0c:	2301      	movs	r3, #1
90004e0e:	7203      	strb	r3, [r0, #8]
    }
90004e10:	4770      	bx	lr
90004e12:	bf00      	nop

90004e14 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004e14:	4770      	bx	lr
90004e16:	bf00      	nop

90004e18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004e18:	4770      	bx	lr
90004e1a:	bf00      	nop

90004e1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004e1c:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004e1e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004e20:	6841      	ldr	r1, [r0, #4]
90004e22:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004e26:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004e2a:	07d2      	lsls	r2, r2, #31
90004e2c:	d401      	bmi.n	90004e32 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004e2e:	689b      	ldr	r3, [r3, #8]
90004e30:	4718      	bx	r3
90004e32:	f851 200c 	ldr.w	r2, [r1, ip]
90004e36:	689b      	ldr	r3, [r3, #8]
90004e38:	58d3      	ldr	r3, [r2, r3]
90004e3a:	4718      	bx	r3

90004e3c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004e3c:	6843      	ldr	r3, [r0, #4]
90004e3e:	b13b      	cbz	r3, 90004e50 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004e40:	6883      	ldr	r3, [r0, #8]
90004e42:	b10b      	cbz	r3, 90004e48 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004e44:	2001      	movs	r0, #1
    }
90004e46:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004e48:	68c0      	ldr	r0, [r0, #12]
90004e4a:	f000 0001 	and.w	r0, r0, #1
90004e4e:	4770      	bx	lr
90004e50:	4618      	mov	r0, r3
90004e52:	4770      	bx	lr

90004e54 <_ZN8touchgfx12NoTransitionD0Ev>:
90004e54:	b510      	push	{r4, lr}
90004e56:	4604      	mov	r4, r0
90004e58:	210c      	movs	r1, #12
90004e5a:	f01d ffea 	bl	90022e32 <_ZdlPvj>
90004e5e:	4620      	mov	r0, r4
90004e60:	bd10      	pop	{r4, pc}
90004e62:	bf00      	nop

90004e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e64:	b510      	push	{r4, lr}
90004e66:	4604      	mov	r4, r0
90004e68:	2110      	movs	r1, #16
90004e6a:	f01d ffe2 	bl	90022e32 <_ZdlPvj>
90004e6e:	4620      	mov	r0, r4
90004e70:	bd10      	pop	{r4, pc}
90004e72:	bf00      	nop

90004e74 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004e74:	b510      	push	{r4, lr}
90004e76:	4604      	mov	r4, r0
90004e78:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004e7c:	f01d ffd9 	bl	90022e32 <_ZdlPvj>
90004e80:	4620      	mov	r0, r4
90004e82:	bd10      	pop	{r4, pc}

90004e84 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004e84:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004e86:	f00f f9d9 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
    }
90004e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004e8e:	f00f be1f 	b.w	90014ad0 <_ZN8touchgfx11Application10invalidateEv>
90004e92:	bf00      	nop

90004e94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004e98:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004e9c:	4607      	mov	r7, r0
90004e9e:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004ea0:	68a0      	ldr	r0, [r4, #8]
90004ea2:	6803      	ldr	r3, [r0, #0]
90004ea4:	6a1b      	ldr	r3, [r3, #32]
90004ea6:	4798      	blx	r3
90004ea8:	28eb      	cmp	r0, #235	; 0xeb
90004eaa:	f240 80a8 	bls.w	90004ffe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004eae:	6860      	ldr	r0, [r4, #4]
90004eb0:	6803      	ldr	r3, [r0, #0]
90004eb2:	6a1b      	ldr	r3, [r3, #32]
90004eb4:	4798      	blx	r3
90004eb6:	280f      	cmp	r0, #15
90004eb8:	f240 809b 	bls.w	90004ff2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x15e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004ebc:	68e0      	ldr	r0, [r4, #12]
90004ebe:	6803      	ldr	r3, [r0, #0]
90004ec0:	6a1b      	ldr	r3, [r3, #32]
90004ec2:	4798      	blx	r3
90004ec4:	280b      	cmp	r0, #11
90004ec6:	f240 80a0 	bls.w	9000500a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x176>
    if (*currentTrans)
90004eca:	f8df 9170 	ldr.w	r9, [pc, #368]	; 9000503c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>
    Application::getInstance()->clearAllTimerWidgets();
90004ece:	f00f f9b5 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004ed2:	3004      	adds	r0, #4
90004ed4:	f00f f9d7 	bl	90014286 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004ed8:	f8d9 0000 	ldr.w	r0, [r9]
90004edc:	b130      	cbz	r0, 90004eec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->tearDown();
90004ede:	6803      	ldr	r3, [r0, #0]
90004ee0:	494d      	ldr	r1, [pc, #308]	; (90005018 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004ee2:	68da      	ldr	r2, [r3, #12]
90004ee4:	428a      	cmp	r2, r1
90004ee6:	d17c      	bne.n	90004fe2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14e>
        (*currentTrans)->~Transition();
90004ee8:	681b      	ldr	r3, [r3, #0]
90004eea:	4798      	blx	r3
    if (*currentScreen)
90004eec:	f8df 8150 	ldr.w	r8, [pc, #336]	; 90005040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
90004ef0:	f8d8 0000 	ldr.w	r0, [r8]
90004ef4:	2800      	cmp	r0, #0
90004ef6:	d061      	beq.n	90004fbc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
        (*currentScreen)->tearDownScreen();
90004ef8:	6803      	ldr	r3, [r0, #0]
90004efa:	695b      	ldr	r3, [r3, #20]
90004efc:	4798      	blx	r3
    if (*currentPresenter)
90004efe:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f02:	2800      	cmp	r0, #0
90004f04:	d055      	beq.n	90004fb2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x11e>
        (*currentPresenter)->deactivate();
90004f06:	6803      	ldr	r3, [r0, #0]
90004f08:	685b      	ldr	r3, [r3, #4]
90004f0a:	4798      	blx	r3
    if (*currentScreen)
90004f0c:	f8d8 0000 	ldr.w	r0, [r8]
90004f10:	b110      	cbz	r0, 90004f18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->~Screen();
90004f12:	6803      	ldr	r3, [r0, #0]
90004f14:	681b      	ldr	r3, [r3, #0]
90004f16:	4798      	blx	r3
    if (*currentPresenter)
90004f18:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f1c:	b110      	cbz	r0, 90004f24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->~Presenter();
90004f1e:	6803      	ldr	r3, [r0, #0]
90004f20:	689b      	ldr	r3, [r3, #8]
90004f22:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004f24:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004f26:	2100      	movs	r1, #0
90004f28:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004f2a:	468b      	mov	fp, r1
90004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f2e:	4798      	blx	r3
90004f30:	4b3a      	ldr	r3, [pc, #232]	; (9000501c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004f32:	4605      	mov	r5, r0
90004f34:	f8c0 b004 	str.w	fp, [r0, #4]
90004f38:	f880 b008 	strb.w	fp, [r0, #8]
90004f3c:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004f3e:	68a0      	ldr	r0, [r4, #8]
90004f40:	602b      	str	r3, [r5, #0]
90004f42:	6803      	ldr	r3, [r0, #0]
90004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f46:	4798      	blx	r3
90004f48:	4606      	mov	r6, r0
90004f4a:	f000 fda3 	bl	90005a94 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004f4e:	6860      	ldr	r0, [r4, #4]
90004f50:	4659      	mov	r1, fp
90004f52:	6803      	ldr	r3, [r0, #0]
90004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f56:	4798      	blx	r3
90004f58:	4604      	mov	r4, r0
90004f5a:	4631      	mov	r1, r6
90004f5c:	f000 fd70 	bl	90005a40 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004f60:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004f64:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004f68:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004f6c:	b35c      	cbz	r4, 90004fc6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x132>
90004f6e:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004f70:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004f74:	4630      	mov	r0, r6
90004f76:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004f78:	f8c4 a008 	str.w	sl, [r4, #8]
90004f7c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004f7e:	63f4      	str	r4, [r6, #60]	; 0x3c
90004f80:	4798      	blx	r3
    newPresenter->activate();
90004f82:	6823      	ldr	r3, [r4, #0]
90004f84:	4620      	mov	r0, r4
90004f86:	681b      	ldr	r3, [r3, #0]
90004f88:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004f8a:	4629      	mov	r1, r5
90004f8c:	4630      	mov	r0, r6
90004f8e:	f010 fdef 	bl	90015b70 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004f92:	682b      	ldr	r3, [r5, #0]
90004f94:	4922      	ldr	r1, [pc, #136]	; (90005020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004f96:	691a      	ldr	r2, [r3, #16]
90004f98:	428a      	cmp	r2, r1
90004f9a:	d116      	bne.n	90004fca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
    newTransition->invalidate();
90004f9c:	695b      	ldr	r3, [r3, #20]
90004f9e:	4a21      	ldr	r2, [pc, #132]	; (90005024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004fa0:	4293      	cmp	r3, r2
90004fa2:	d119      	bne.n	90004fd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
        Application::getInstance()->invalidate();
90004fa4:	f00f f94a 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
}
90004fa8:	b001      	add	sp, #4
90004faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004fae:	f00f bd8f 	b.w	90014ad0 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90004fb2:	f8d8 0000 	ldr.w	r0, [r8]
90004fb6:	2800      	cmp	r0, #0
90004fb8:	d1ab      	bne.n	90004f12 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
90004fba:	e7b3      	b.n	90004f24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    if (*currentPresenter)
90004fbc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004fc0:	2800      	cmp	r0, #0
90004fc2:	d1a0      	bne.n	90004f06 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
90004fc4:	e7ae      	b.n	90004f24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    model->bind(newPresenter);
90004fc6:	4623      	mov	r3, r4
90004fc8:	e7d2      	b.n	90004f70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xdc>
    newTransition->init();
90004fca:	4628      	mov	r0, r5
90004fcc:	4790      	blx	r2
    newTransition->invalidate();
90004fce:	682b      	ldr	r3, [r5, #0]
90004fd0:	4a14      	ldr	r2, [pc, #80]	; (90005024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004fd2:	695b      	ldr	r3, [r3, #20]
90004fd4:	4293      	cmp	r3, r2
90004fd6:	d0e5      	beq.n	90004fa4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x110>
90004fd8:	4628      	mov	r0, r5
90004fda:	b001      	add	sp, #4
90004fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004fe0:	4718      	bx	r3
        (*currentTrans)->tearDown();
90004fe2:	4790      	blx	r2
    if (*currentTrans)
90004fe4:	f8d9 0000 	ldr.w	r0, [r9]
90004fe8:	2800      	cmp	r0, #0
90004fea:	f43f af7f 	beq.w	90004eec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->~Transition();
90004fee:	6803      	ldr	r3, [r0, #0]
90004ff0:	e77a      	b.n	90004ee8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x54>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004ff2:	4b0d      	ldr	r3, [pc, #52]	; (90005028 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90004ff4:	21a4      	movs	r1, #164	; 0xa4
90004ff6:	4a0d      	ldr	r2, [pc, #52]	; (9000502c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004ff8:	480d      	ldr	r0, [pc, #52]	; (90005030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004ffa:	f01d ff49 	bl	90022e90 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004ffe:	4b0d      	ldr	r3, [pc, #52]	; (90005034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
90005000:	21a3      	movs	r1, #163	; 0xa3
90005002:	4a0a      	ldr	r2, [pc, #40]	; (9000502c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005004:	480a      	ldr	r0, [pc, #40]	; (90005030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005006:	f01d ff43 	bl	90022e90 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000500a:	4b0b      	ldr	r3, [pc, #44]	; (90005038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
9000500c:	21a5      	movs	r1, #165	; 0xa5
9000500e:	4a07      	ldr	r2, [pc, #28]	; (9000502c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005010:	4807      	ldr	r0, [pc, #28]	; (90005030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005012:	f01d ff3d 	bl	90022e90 <__assert_func>
90005016:	bf00      	nop
90005018:	90004de1 	.word	0x90004de1
9000501c:	9002605c 	.word	0x9002605c
90005020:	90004de5 	.word	0x90004de5
90005024:	90004e85 	.word	0x90004e85
90005028:	90025ea8 	.word	0x90025ea8
9000502c:	90025d5c 	.word	0x90025d5c
90005030:	90025e60 	.word	0x90025e60
90005034:	90025ccc 	.word	0x90025ccc
90005038:	90025f4c 	.word	0x90025f4c
9000503c:	240262a4 	.word	0x240262a4
90005040:	240262a0 	.word	0x240262a0

90005044 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005044:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90005048:	b1d3      	cbz	r3, 90005080 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
9000504a:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
9000504c:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000504e:	68d1      	ldr	r1, [r2, #12]
90005050:	4604      	mov	r4, r0
90005052:	4818      	ldr	r0, [pc, #96]	; (900050b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005054:	4281      	cmp	r1, r0
90005056:	d118      	bne.n	9000508a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90005058:	6858      	ldr	r0, [r3, #4]
9000505a:	b180      	cbz	r0, 9000507e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
9000505c:	6899      	ldr	r1, [r3, #8]
9000505e:	b1e1      	cbz	r1, 9000509a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90005060:	6892      	ldr	r2, [r2, #8]
90005062:	4915      	ldr	r1, [pc, #84]	; (900050b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005064:	428a      	cmp	r2, r1
90005066:	d122      	bne.n	900050ae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005068:	68da      	ldr	r2, [r3, #12]
9000506a:	6858      	ldr	r0, [r3, #4]
9000506c:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005070:	07d2      	lsls	r2, r2, #31
90005072:	d406      	bmi.n	90005082 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90005074:	689b      	ldr	r3, [r3, #8]
90005076:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90005078:	2300      	movs	r3, #0
9000507a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
9000507e:	bd70      	pop	{r4, r5, r6, pc}
90005080:	4770      	bx	lr
90005082:	6899      	ldr	r1, [r3, #8]
90005084:	6803      	ldr	r3, [r0, #0]
90005086:	585b      	ldr	r3, [r3, r1]
90005088:	e7f5      	b.n	90005076 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000508a:	4618      	mov	r0, r3
9000508c:	4788      	blx	r1
9000508e:	2800      	cmp	r0, #0
90005090:	d0f5      	beq.n	9000507e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90005092:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
90005096:	681a      	ldr	r2, [r3, #0]
90005098:	e7e2      	b.n	90005060 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
9000509a:	68dd      	ldr	r5, [r3, #12]
9000509c:	07ee      	lsls	r6, r5, #31
9000509e:	d5ee      	bpl.n	9000507e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900050a0:	6892      	ldr	r2, [r2, #8]
900050a2:	4e05      	ldr	r6, [pc, #20]	; (900050b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900050a4:	42b2      	cmp	r2, r6
900050a6:	d102      	bne.n	900050ae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900050a8:	eb00 0065 	add.w	r0, r0, r5, asr #1
900050ac:	e7ea      	b.n	90005084 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900050ae:	4618      	mov	r0, r3
900050b0:	4790      	blx	r2
900050b2:	e7e1      	b.n	90005078 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900050b4:	90004e3d 	.word	0x90004e3d
900050b8:	90004e1d 	.word	0x90004e1d

900050bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900050bc:	b570      	push	{r4, r5, r6, lr}
900050be:	4604      	mov	r4, r0
900050c0:	4616      	mov	r6, r2
900050c2:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900050c4:	f00f f980 	bl	900143c8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900050c8:	4a18      	ldr	r2, [pc, #96]	; (9000512c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
900050ca:	2300      	movs	r3, #0
      frontendHeap(heap),
900050cc:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
900050d0:	6014      	str	r4, [r2, #0]
        return instance;
900050d2:	4e17      	ldr	r6, [pc, #92]	; (90005130 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
900050d4:	4a17      	ldr	r2, [pc, #92]	; (90005134 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
900050d6:	6830      	ldr	r0, [r6, #0]
900050d8:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900050da:	4a17      	ldr	r2, [pc, #92]	; (90005138 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
900050dc:	4917      	ldr	r1, [pc, #92]	; (9000513c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
900050de:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
900050e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900050e6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
900050ea:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
900050ee:	6802      	ldr	r2, [r0, #0]
900050f0:	6892      	ldr	r2, [r2, #8]
900050f2:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
900050f4:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
900050f8:	d115      	bne.n	90005126 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
900050fa:	f44f 7380 	mov.w	r3, #256	; 0x100
900050fe:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
90005102:	2000      	movs	r0, #0
90005104:	f000 fbce 	bl	900058a4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90005108:	6833      	ldr	r3, [r6, #0]
9000510a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9000510e:	b12a      	cbz	r2, 9000511c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90005112:	b118      	cbz	r0, 9000511c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005114:	f016 ff89 	bl	9001c02a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005118:	4620      	mov	r0, r4
9000511a:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
9000511c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
9000511e:	f016 ff84 	bl	9001c02a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005122:	4620      	mov	r0, r4
90005124:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005126:	4619      	mov	r1, r3
90005128:	4790      	blx	r2
9000512a:	e7ea      	b.n	90005102 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
9000512c:	240262b0 	.word	0x240262b0
90005130:	24026264 	.word	0x24026264
90005134:	90026010 	.word	0x90026010
90005138:	90025ff8 	.word	0x90025ff8
9000513c:	90000665 	.word	0x90000665

90005140 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005140:	4905      	ldr	r1, [pc, #20]	; (90005158 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90005142:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005144:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005148:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
9000514c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005150:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005154:	4770      	bx	lr
90005156:	bf00      	nop
90005158:	90004e95 	.word	0x90004e95

9000515c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
9000515c:	6a40      	ldr	r0, [r0, #36]	; 0x24
9000515e:	4770      	bx	lr

90005160 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005160:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005162:	4770      	bx	lr

90005164 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005164:	4770      	bx	lr
90005166:	bf00      	nop

90005168 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90005168:	888b      	ldrh	r3, [r1, #4]
9000516a:	69c0      	ldr	r0, [r0, #28]
9000516c:	0adb      	lsrs	r3, r3, #11
9000516e:	680a      	ldr	r2, [r1, #0]
90005170:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005174:	4410      	add	r0, r2
90005176:	4770      	bx	lr

90005178 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90005178:	b1da      	cbz	r2, 900051b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
9000517a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
9000517c:	7b14      	ldrb	r4, [r2, #12]
9000517e:	b1b4      	cbz	r4, 900051ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005180:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005184:	f892 e00b 	ldrb.w	lr, [r2, #11]
90005188:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
9000518c:	6a03      	ldr	r3, [r0, #32]
9000518e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90005192:	ea4e 0202 	orr.w	r2, lr, r2
90005196:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
9000519a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
9000519e:	881a      	ldrh	r2, [r3, #0]
900051a0:	428a      	cmp	r2, r1
900051a2:	d008      	beq.n	900051b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051a4:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
900051a8:	d801      	bhi.n	900051ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051aa:	4283      	cmp	r3, r0
900051ac:	d1f7      	bne.n	9000519e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900051ae:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900051b0:	bd10      	pop	{r4, pc}
        return 0;
900051b2:	4610      	mov	r0, r2
}
900051b4:	4770      	bx	lr
            return kerndata->distance;
900051b6:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900051ba:	bd10      	pop	{r4, pc}

900051bc <_ZN8touchgfx13GeneratedFontD0Ev>:
900051bc:	b510      	push	{r4, lr}
900051be:	4604      	mov	r4, r0
900051c0:	212c      	movs	r1, #44	; 0x2c
900051c2:	f01d fe36 	bl	90022e32 <_ZdlPvj>
900051c6:	4620      	mov	r0, r4
900051c8:	bd10      	pop	{r4, pc}
900051ca:	bf00      	nop

900051cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051cc:	b530      	push	{r4, r5, lr}
900051ce:	b08b      	sub	sp, #44	; 0x2c
900051d0:	4604      	mov	r4, r0
900051d2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
900051d6:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051d8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
900051dc:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051de:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
900051e2:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051e4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
900051e8:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051ea:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
900051ee:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051f0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
900051f4:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051f6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
900051fa:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900051fc:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005200:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005202:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005206:	9508      	str	r5, [sp, #32]
90005208:	f010 f90a 	bl	90015420 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
9000520c:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
9000520e:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005210:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90005212:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005214:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005216:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005218:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
9000521a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9000521c:	62a3      	str	r3, [r4, #40]	; 0x28
9000521e:	4b02      	ldr	r3, [pc, #8]	; (90005228 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005220:	6023      	str	r3, [r4, #0]
}
90005222:	b00b      	add	sp, #44	; 0x2c
90005224:	bd30      	pop	{r4, r5, pc}
90005226:	bf00      	nop
90005228:	90026080 	.word	0x90026080

9000522c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
9000522c:	4770      	bx	lr
9000522e:	bf00      	nop

90005230 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005230:	4770      	bx	lr
90005232:	bf00      	nop

90005234 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005234:	4770      	bx	lr
90005236:	bf00      	nop

90005238 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005238:	4770      	bx	lr
9000523a:	bf00      	nop

9000523c <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
9000523c:	b530      	push	{r4, r5, lr}
9000523e:	b085      	sub	sp, #20
90005240:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
90005242:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005244:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005246:	466d      	mov	r5, sp
90005248:	4601      	mov	r1, r0
        rect.width = width;
9000524a:	8102      	strh	r2, [r0, #8]
9000524c:	343c      	adds	r4, #60	; 0x3c
9000524e:	4628      	mov	r0, r5
90005250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005254:	4798      	blx	r3
90005256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000525a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
9000525e:	b005      	add	sp, #20
90005260:	bd30      	pop	{r4, r5, pc}
90005262:	bf00      	nop

90005264 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005264:	b530      	push	{r4, r5, lr}
90005266:	b085      	sub	sp, #20
90005268:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
9000526a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
9000526c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000526e:	466d      	mov	r5, sp
90005270:	4601      	mov	r1, r0
        rect.height = height;
90005272:	8142      	strh	r2, [r0, #10]
90005274:	343c      	adds	r4, #60	; 0x3c
90005276:	4628      	mov	r0, r5
90005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000527c:	4798      	blx	r3
9000527e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005286:	b005      	add	sp, #20
90005288:	bd30      	pop	{r4, r5, pc}
9000528a:	bf00      	nop

9000528c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
9000528c:	2200      	movs	r2, #0
9000528e:	6002      	str	r2, [r0, #0]
90005290:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005292:	4770      	bx	lr

90005294 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005294:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005298:	4770      	bx	lr
9000529a:	bf00      	nop

9000529c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
9000529c:	2000      	movs	r0, #0
9000529e:	4770      	bx	lr

900052a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
900052a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900052a4:	b112      	cbz	r2, 900052ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
900052a6:	6803      	ldr	r3, [r0, #0]
900052a8:	695b      	ldr	r3, [r3, #20]
900052aa:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
900052ac:	4770      	bx	lr
900052ae:	bf00      	nop

900052b0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900052b0:	2200      	movs	r2, #0
900052b2:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
900052b6:	6082      	str	r2, [r0, #8]
900052b8:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
900052bc:	4770      	bx	lr
900052be:	bf00      	nop

900052c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
900052c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
900052c2:	4770      	bx	lr

900052c4 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
900052c4:	4770      	bx	lr
900052c6:	bf00      	nop

900052c8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
900052c8:	4770      	bx	lr
900052ca:	bf00      	nop

900052cc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
900052cc:	4770      	bx	lr
900052ce:	bf00      	nop

900052d0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
900052d0:	b510      	push	{r4, lr}
900052d2:	4604      	mov	r4, r0
900052d4:	214c      	movs	r1, #76	; 0x4c
900052d6:	f01d fdac 	bl	90022e32 <_ZdlPvj>
900052da:	4620      	mov	r0, r4
900052dc:	bd10      	pop	{r4, pc}
900052de:	bf00      	nop

900052e0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
900052e0:	b510      	push	{r4, lr}
900052e2:	4604      	mov	r4, r0
}
900052e4:	21ec      	movs	r1, #236	; 0xec
900052e6:	f01d fda4 	bl	90022e32 <_ZdlPvj>
900052ea:	4620      	mov	r0, r4
900052ec:	bd10      	pop	{r4, pc}
900052ee:	bf00      	nop

900052f0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900052f0:	4b1b      	ldr	r3, [pc, #108]	; (90005360 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052f2:	6802      	ldr	r2, [r0, #0]
900052f4:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
900052f6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900052f8:	6b55      	ldr	r5, [r2, #52]	; 0x34
900052fa:	b323      	cbz	r3, 90005346 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
900052fc:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
900052fe:	4919      	ldr	r1, [pc, #100]	; (90005364 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005300:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90005302:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005304:	8809      	ldrh	r1, [r1, #0]
90005306:	4291      	cmp	r1, r2
90005308:	d923      	bls.n	90005352 <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
9000530a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9000530e:	4b16      	ldr	r3, [pc, #88]	; (90005368 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005310:	681b      	ldr	r3, [r3, #0]
90005312:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005316:	4a15      	ldr	r2, [pc, #84]	; (9000536c <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005318:	6803      	ldr	r3, [r0, #0]
9000531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000531c:	4293      	cmp	r3, r2
9000531e:	d107      	bne.n	90005330 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005320:	88c0      	ldrh	r0, [r0, #6]
90005322:	4b13      	ldr	r3, [pc, #76]	; (90005370 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005324:	1a31      	subs	r1, r6, r0
90005326:	429d      	cmp	r5, r3
90005328:	b209      	sxth	r1, r1
9000532a:	d107      	bne.n	9000533c <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
9000532c:	80e1      	strh	r1, [r4, #6]
    }
9000532e:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005330:	4798      	blx	r3
90005332:	4b0f      	ldr	r3, [pc, #60]	; (90005370 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005334:	1a31      	subs	r1, r6, r0
90005336:	429d      	cmp	r5, r3
90005338:	b209      	sxth	r1, r1
9000533a:	d0f7      	beq.n	9000532c <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
9000533c:	4620      	mov	r0, r4
9000533e:	462b      	mov	r3, r5
    }
90005340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005344:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005346:	4b0b      	ldr	r3, [pc, #44]	; (90005374 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005348:	216c      	movs	r1, #108	; 0x6c
9000534a:	4a0b      	ldr	r2, [pc, #44]	; (90005378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
9000534c:	480b      	ldr	r0, [pc, #44]	; (9000537c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
9000534e:	f01d fd9f 	bl	90022e90 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005352:	4b0b      	ldr	r3, [pc, #44]	; (90005380 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005354:	216d      	movs	r1, #109	; 0x6d
90005356:	4a08      	ldr	r2, [pc, #32]	; (90005378 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005358:	4808      	ldr	r0, [pc, #32]	; (9000537c <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
9000535a:	f01d fd99 	bl	90022e90 <__assert_func>
9000535e:	bf00      	nop
90005360:	240262b4 	.word	0x240262b4
90005364:	240262b8 	.word	0x240262b8
90005368:	240262bc 	.word	0x240262bc
9000536c:	90004da5 	.word	0x90004da5
90005370:	900022b9 	.word	0x900022b9
90005374:	900260d8 	.word	0x900260d8
90005378:	9002611c 	.word	0x9002611c
9000537c:	90026158 	.word	0x90026158
90005380:	900261a0 	.word	0x900261a0

90005384 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005384:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000538a:	4f25      	ldr	r7, [pc, #148]	; (90005420 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
9000538c:	4605      	mov	r5, r0
        setX(x);
9000538e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005390:	4690      	mov	r8, r2
90005392:	42be      	cmp	r6, r7
90005394:	d125      	bne.n	900053e2 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005396:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005398:	80a9      	strh	r1, [r5, #4]
9000539a:	4922      	ldr	r1, [pc, #136]	; (90005424 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
9000539c:	428c      	cmp	r4, r1
9000539e:	d126      	bne.n	900053ee <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053a0:	4921      	ldr	r1, [pc, #132]	; (90005428 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053a2:	fa1f f888 	uxth.w	r8, r8
900053a6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
900053a8:	680b      	ldr	r3, [r1, #0]
900053aa:	2b00      	cmp	r3, #0
900053ac:	d032      	beq.n	90005414 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
900053ae:	491f      	ldr	r1, [pc, #124]	; (9000542c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
900053b0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053b2:	8809      	ldrh	r1, [r1, #0]
900053b4:	4291      	cmp	r1, r2
900053b6:	d927      	bls.n	90005408 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
900053b8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900053bc:	4b1c      	ldr	r3, [pc, #112]	; (90005430 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
900053be:	681b      	ldr	r3, [r3, #0]
900053c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900053c4:	4a1b      	ldr	r2, [pc, #108]	; (90005434 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
900053c6:	6803      	ldr	r3, [r0, #0]
900053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900053ca:	4293      	cmp	r3, r2
900053cc:	d11a      	bne.n	90005404 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
900053ce:	88c0      	ldrh	r0, [r0, #6]
900053d0:	4b19      	ldr	r3, [pc, #100]	; (90005438 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
900053d2:	eba8 0200 	sub.w	r2, r8, r0
900053d6:	429e      	cmp	r6, r3
900053d8:	b211      	sxth	r1, r2
900053da:	d10e      	bne.n	900053fa <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
900053dc:	80e9      	strh	r1, [r5, #6]
    }
900053de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
900053e2:	47b0      	blx	r6
        setBaselineY(baselineY);
900053e4:	682b      	ldr	r3, [r5, #0]
900053e6:	490f      	ldr	r1, [pc, #60]	; (90005424 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900053e8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
900053ea:	428c      	cmp	r4, r1
900053ec:	d0d8      	beq.n	900053a0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
900053ee:	4641      	mov	r1, r8
900053f0:	4628      	mov	r0, r5
900053f2:	4623      	mov	r3, r4
    }
900053f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
900053f8:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053fa:	4628      	mov	r0, r5
900053fc:	4633      	mov	r3, r6
    }
900053fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005402:	4718      	bx	r3
90005404:	4798      	blx	r3
90005406:	e7e3      	b.n	900053d0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005408:	4b0c      	ldr	r3, [pc, #48]	; (9000543c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
9000540a:	216d      	movs	r1, #109	; 0x6d
9000540c:	4a0c      	ldr	r2, [pc, #48]	; (90005440 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
9000540e:	480d      	ldr	r0, [pc, #52]	; (90005444 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005410:	f01d fd3e 	bl	90022e90 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005414:	4b0c      	ldr	r3, [pc, #48]	; (90005448 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005416:	216c      	movs	r1, #108	; 0x6c
90005418:	4a09      	ldr	r2, [pc, #36]	; (90005440 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
9000541a:	480a      	ldr	r0, [pc, #40]	; (90005444 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
9000541c:	f01d fd38 	bl	90022e90 <__assert_func>
90005420:	900022b5 	.word	0x900022b5
90005424:	900052f1 	.word	0x900052f1
90005428:	240262b4 	.word	0x240262b4
9000542c:	240262b8 	.word	0x240262b8
90005430:	240262bc 	.word	0x240262bc
90005434:	90004da5 	.word	0x90004da5
90005438:	900022b9 	.word	0x900022b9
9000543c:	900261a0 	.word	0x900261a0
90005440:	9002611c 	.word	0x9002611c
90005444:	90026158 	.word	0x90026158
90005448:	900260d8 	.word	0x900260d8

9000544c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
9000544c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90005450:	b086      	sub	sp, #24
90005452:	4604      	mov	r4, r0
        : presenter(0)
90005454:	f010 f9e0 	bl	90015818 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005458:	4b5e      	ldr	r3, [pc, #376]	; (900055d4 <_ZN15Screen1ViewBaseC1Ev+0x188>)
9000545a:	2500      	movs	r5, #0
9000545c:	4a5e      	ldr	r2, [pc, #376]	; (900055d8 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
9000545e:	f64f 76ff 	movw	r6, #65535	; 0xffff
          touchable(false),
90005462:	f44f 7880 	mov.w	r8, #256	; 0x100
90005466:	f104 076c 	add.w	r7, r4, #108	; 0x6c
9000546a:	f04f 09ff 	mov.w	r9, #255	; 0xff
9000546e:	6423      	str	r3, [r4, #64]	; 0x40
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
90005470:	a904      	add	r1, sp, #16
        : Widget(), bitmap(bmp), alpha(255)
90005472:	4b5a      	ldr	r3, [pc, #360]	; (900055dc <_ZN15Screen1ViewBaseC1Ev+0x190>)
        Image::setBitmap(bmp);
90005474:	4638      	mov	r0, r7
90005476:	6022      	str	r2, [r4, #0]
90005478:	f04f 3aff 	mov.w	sl, #4294967295
9000547c:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
90005480:	f884 9066 	strb.w	r9, [r4, #102]	; 0x66
90005484:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
90005488:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
9000548c:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
90005490:	66e3      	str	r3, [r4, #108]	; 0x6c
90005492:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005494:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
90005496:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
90005498:	66a5      	str	r5, [r4, #104]	; 0x68
9000549a:	f8ad 6010 	strh.w	r6, [sp, #16]
        : x(0), y(0), width(0), height(0)
9000549e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
900054a2:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
900054a6:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
900054aa:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
900054ae:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
          nextSibling(0),
900054b2:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
          cachedAbsX(0),
900054b6:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
900054ba:	f00d f992 	bl	900127e2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : TextAreaWithWildcardBase(), wc1(0)
900054be:	4b48      	ldr	r3, [pc, #288]	; (900055e0 <_ZN15Screen1ViewBaseC1Ev+0x194>)
          touchable(false),
900054c0:	f8a4 80bc 	strh.w	r8, [r4, #188]	; 0xbc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
900054c4:	f104 0804 	add.w	r8, r4, #4
        : typedTextId(id)
900054c8:	f8a4 60c4 	strh.w	r6, [r4, #196]	; 0xc4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
900054cc:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900054d0:	f8c4 90ce 	str.w	r9, [r4, #206]	; 0xce
900054d4:	f104 0140 	add.w	r1, r4, #64	; 0x40
900054d8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
900054dc:	4640      	mov	r0, r8
        rect.x = x;
900054de:	4b41      	ldr	r3, [pc, #260]	; (900055e4 <_ZN15Screen1ViewBaseC1Ev+0x198>)
900054e0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 90005610 <_ZN15Screen1ViewBaseC1Ev+0x1c4>
900054e4:	64a3      	str	r3, [r4, #72]	; 0x48
900054e6:	66a6      	str	r6, [r4, #104]	; 0x68
        : color(col)
900054e8:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
900054ec:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900054f0:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
900054f4:	f8c4 a0d8 	str.w	sl, [r4, #216]	; 0xd8
900054f8:	6465      	str	r5, [r4, #68]	; 0x44
900054fa:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
        : x(0), y(0), width(0), height(0)
900054fe:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
90005502:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
          nextSibling(0),
90005506:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
          cachedAbsX(0),
9000550a:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
9000550e:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
90005512:	f00b fe03 	bl	9001111c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_RAYS_ID));
90005516:	a904      	add	r1, sp, #16
90005518:	4638      	mov	r0, r7
        rect.x = x;
9000551a:	6725      	str	r5, [r4, #112]	; 0x70
9000551c:	f8ad 5010 	strh.w	r5, [sp, #16]
90005520:	f00d f95f 	bl	900127e2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90005524:	4639      	mov	r1, r7
90005526:	4640      	mov	r0, r8
90005528:	f00b fdf8 	bl	9001111c <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000552c:	4a2e      	ldr	r2, [pc, #184]	; (900055e8 <_ZN15Screen1ViewBaseC1Ev+0x19c>)
        setX(x);
9000552e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        color = newColor;
90005532:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    textArea1.setXY(161, 124);
90005536:	f104 0698 	add.w	r6, r4, #152	; 0x98
        boundingArea = calculateBoundingArea();
9000553a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
9000553e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
90005542:	4a2a      	ldr	r2, [pc, #168]	; (900055ec <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
        linespace = space;
90005544:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
90005548:	4293      	cmp	r3, r2
9000554a:	d12c      	bne.n	900055a6 <_ZN15Screen1ViewBaseC1Ev+0x15a>
        boundingArea = calculateBoundingArea();
9000554c:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
90005550:	e9c4 5a35 	strd	r5, sl, [r4, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005554:	4b26      	ldr	r3, [pc, #152]	; (900055f0 <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
90005556:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
9000555a:	681b      	ldr	r3, [r3, #0]
9000555c:	b3a3      	cbz	r3, 900055c8 <_ZN15Screen1ViewBaseC1Ev+0x17c>
        return typedTextId < numberOfTypedTexts;
9000555e:	4b25      	ldr	r3, [pc, #148]	; (900055f4 <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005560:	881b      	ldrh	r3, [r3, #0]
90005562:	b35b      	cbz	r3, 900055bc <_ZN15Screen1ViewBaseC1Ev+0x170>
        return texts->getText(typedTextId);
90005564:	4b24      	ldr	r3, [pc, #144]	; (900055f8 <_ZN15Screen1ViewBaseC1Ev+0x1ac>)
90005566:	2100      	movs	r1, #0
90005568:	6818      	ldr	r0, [r3, #0]
9000556a:	f000 f9d9 	bl	90005920 <_ZNK8touchgfx5Texts7getTextEt>
9000556e:	4a23      	ldr	r2, [pc, #140]	; (900055fc <_ZN15Screen1ViewBaseC1Ev+0x1b0>)
90005570:	4603      	mov	r3, r0
90005572:	2104      	movs	r1, #4
90005574:	4628      	mov	r0, r5
90005576:	f011 fdc1 	bl	900170fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
9000557a:	4630      	mov	r0, r6
        wc1 = value;
9000557c:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
90005580:	f00d f848 	bl	90012614 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90005584:	2301      	movs	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
90005586:	a904      	add	r1, sp, #16
90005588:	4630      	mov	r0, r6
9000558a:	f8ad 3014 	strh.w	r3, [sp, #20]
9000558e:	f8cd 9010 	str.w	r9, [sp, #16]
90005592:	f00d f85f 	bl	90012654 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90005596:	4640      	mov	r0, r8
90005598:	4631      	mov	r1, r6
9000559a:	f00b fdbf 	bl	9001111c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000559e:	4620      	mov	r0, r4
900055a0:	b006      	add	sp, #24
900055a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900055a6:	466d      	mov	r5, sp
900055a8:	4631      	mov	r1, r6
900055aa:	4628      	mov	r0, r5
900055ac:	4798      	blx	r3
900055ae:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
900055b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900055b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
900055ba:	e7cb      	b.n	90005554 <_ZN15Screen1ViewBaseC1Ev+0x108>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900055bc:	4b10      	ldr	r3, [pc, #64]	; (90005600 <_ZN15Screen1ViewBaseC1Ev+0x1b4>)
900055be:	2161      	movs	r1, #97	; 0x61
900055c0:	4a10      	ldr	r2, [pc, #64]	; (90005604 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
900055c2:	4811      	ldr	r0, [pc, #68]	; (90005608 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
900055c4:	f01d fc64 	bl	90022e90 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900055c8:	4b10      	ldr	r3, [pc, #64]	; (9000560c <_ZN15Screen1ViewBaseC1Ev+0x1c0>)
900055ca:	2160      	movs	r1, #96	; 0x60
900055cc:	4a0d      	ldr	r2, [pc, #52]	; (90005604 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
900055ce:	480e      	ldr	r0, [pc, #56]	; (90005608 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
900055d0:	f01d fc5e 	bl	90022e90 <__assert_func>
900055d4:	90026c18 	.word	0x90026c18
900055d8:	900262b4 	.word	0x900262b4
900055dc:	90026c80 	.word	0x90026c80
900055e0:	90026224 	.word	0x90026224
900055e4:	011001e0 	.word	0x011001e0
900055e8:	007c00a1 	.word	0x007c00a1
900055ec:	900052b1 	.word	0x900052b1
900055f0:	240262b4 	.word	0x240262b4
900055f4:	240262b8 	.word	0x240262b8
900055f8:	240262c0 	.word	0x240262c0
900055fc:	90026218 	.word	0x90026218
90005600:	900261a0 	.word	0x900261a0
90005604:	900261e0 	.word	0x900261e0
90005608:	90026158 	.word	0x90026158
9000560c:	900260d8 	.word	0x900260d8
90005610:	90025cc4 	.word	0x90025cc4

90005614 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005614:	4770      	bx	lr
90005616:	bf00      	nop

90005618 <_Z23getFont_verdana_10_4bppv>:
{
90005618:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000561a:	4d18      	ldr	r5, [pc, #96]	; (9000567c <_Z23getFont_verdana_10_4bppv+0x64>)
{
9000561c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000561e:	682c      	ldr	r4, [r5, #0]
90005620:	f3bf 8f5b 	dmb	ish
90005624:	f014 0401 	ands.w	r4, r4, #1
90005628:	d002      	beq.n	90005630 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
9000562a:	4815      	ldr	r0, [pc, #84]	; (90005680 <_Z23getFont_verdana_10_4bppv+0x68>)
9000562c:	b00f      	add	sp, #60	; 0x3c
9000562e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005630:	4628      	mov	r0, r5
90005632:	f01d fc00 	bl	90022e36 <__cxa_guard_acquire>
90005636:	2800      	cmp	r0, #0
90005638:	d0f7      	beq.n	9000562a <_Z23getFont_verdana_10_4bppv+0x12>
9000563a:	213f      	movs	r1, #63	; 0x3f
9000563c:	2201      	movs	r2, #1
9000563e:	230a      	movs	r3, #10
90005640:	2004      	movs	r0, #4
90005642:	9204      	str	r2, [sp, #16]
90005644:	9300      	str	r3, [sp, #0]
90005646:	9003      	str	r0, [sp, #12]
90005648:	480d      	ldr	r0, [pc, #52]	; (90005680 <_Z23getFont_verdana_10_4bppv+0x68>)
9000564a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000564e:	490d      	ldr	r1, [pc, #52]	; (90005684 <_Z23getFont_verdana_10_4bppv+0x6c>)
90005650:	9108      	str	r1, [sp, #32]
90005652:	490d      	ldr	r1, [pc, #52]	; (90005688 <_Z23getFont_verdana_10_4bppv+0x70>)
90005654:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005658:	9107      	str	r1, [sp, #28]
9000565a:	490c      	ldr	r1, [pc, #48]	; (9000568c <_Z23getFont_verdana_10_4bppv+0x74>)
9000565c:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005660:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005664:	f7ff fdb2 	bl	900051cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005668:	4809      	ldr	r0, [pc, #36]	; (90005690 <_Z23getFont_verdana_10_4bppv+0x78>)
9000566a:	f01d fc2f 	bl	90022ecc <atexit>
9000566e:	4628      	mov	r0, r5
90005670:	f01d fbed 	bl	90022e4e <__cxa_guard_release>
}
90005674:	4802      	ldr	r0, [pc, #8]	; (90005680 <_Z23getFont_verdana_10_4bppv+0x68>)
90005676:	b00f      	add	sp, #60	; 0x3c
90005678:	bd30      	pop	{r4, r5, pc}
9000567a:	bf00      	nop
9000567c:	2400b16c 	.word	0x2400b16c
90005680:	2400b170 	.word	0x2400b170
90005684:	900270fc 	.word	0x900270fc
90005688:	900272a8 	.word	0x900272a8
9000568c:	90201c10 	.word	0x90201c10
90005690:	90005615 	.word	0x90005615

90005694 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90005694:	4770      	bx	lr
90005696:	bf00      	nop

90005698 <_Z23getFont_verdana_20_4bppv>:
{
90005698:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000569a:	4d19      	ldr	r5, [pc, #100]	; (90005700 <_Z23getFont_verdana_20_4bppv+0x68>)
{
9000569c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000569e:	682c      	ldr	r4, [r5, #0]
900056a0:	f3bf 8f5b 	dmb	ish
900056a4:	f014 0401 	ands.w	r4, r4, #1
900056a8:	d002      	beq.n	900056b0 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
900056aa:	4816      	ldr	r0, [pc, #88]	; (90005704 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056ac:	b00f      	add	sp, #60	; 0x3c
900056ae:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900056b0:	4628      	mov	r0, r5
900056b2:	f01d fbc0 	bl	90022e36 <__cxa_guard_acquire>
900056b6:	2800      	cmp	r0, #0
900056b8:	d0f7      	beq.n	900056aa <_Z23getFont_verdana_20_4bppv+0x12>
900056ba:	213f      	movs	r1, #63	; 0x3f
900056bc:	4a12      	ldr	r2, [pc, #72]	; (90005708 <_Z23getFont_verdana_20_4bppv+0x70>)
900056be:	2301      	movs	r3, #1
900056c0:	2014      	movs	r0, #20
900056c2:	9208      	str	r2, [sp, #32]
900056c4:	2204      	movs	r2, #4
900056c6:	9304      	str	r3, [sp, #16]
900056c8:	9000      	str	r0, [sp, #0]
900056ca:	9401      	str	r4, [sp, #4]
900056cc:	480d      	ldr	r0, [pc, #52]	; (90005704 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056ce:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
900056d2:	490e      	ldr	r1, [pc, #56]	; (9000570c <_Z23getFont_verdana_20_4bppv+0x74>)
900056d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
900056d8:	9107      	str	r1, [sp, #28]
900056da:	2318      	movs	r3, #24
900056dc:	490c      	ldr	r1, [pc, #48]	; (90005710 <_Z23getFont_verdana_20_4bppv+0x78>)
900056de:	e9cd 4202 	strd	r4, r2, [sp, #8]
900056e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900056e6:	225f      	movs	r2, #95	; 0x5f
900056e8:	f7ff fd70 	bl	900051cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900056ec:	4809      	ldr	r0, [pc, #36]	; (90005714 <_Z23getFont_verdana_20_4bppv+0x7c>)
900056ee:	f01d fbed 	bl	90022ecc <atexit>
900056f2:	4628      	mov	r0, r5
900056f4:	f01d fbab 	bl	90022e4e <__cxa_guard_release>
}
900056f8:	4802      	ldr	r0, [pc, #8]	; (90005704 <_Z23getFont_verdana_20_4bppv+0x6c>)
900056fa:	b00f      	add	sp, #60	; 0x3c
900056fc:	bd30      	pop	{r4, r5, pc}
900056fe:	bf00      	nop
90005700:	2400b19c 	.word	0x2400b19c
90005704:	2400b1a0 	.word	0x2400b1a0
90005708:	90027100 	.word	0x90027100
9000570c:	900272ac 	.word	0x900272ac
90005710:	90201c20 	.word	0x90201c20
90005714:	90005695 	.word	0x90005695

90005718 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005718:	4770      	bx	lr
9000571a:	bf00      	nop

9000571c <_Z23getFont_verdana_40_4bppv>:
{
9000571c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000571e:	4d18      	ldr	r5, [pc, #96]	; (90005780 <_Z23getFont_verdana_40_4bppv+0x64>)
{
90005720:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005722:	682c      	ldr	r4, [r5, #0]
90005724:	f3bf 8f5b 	dmb	ish
90005728:	f014 0401 	ands.w	r4, r4, #1
9000572c:	d002      	beq.n	90005734 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
9000572e:	4815      	ldr	r0, [pc, #84]	; (90005784 <_Z23getFont_verdana_40_4bppv+0x68>)
90005730:	b00f      	add	sp, #60	; 0x3c
90005732:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005734:	4628      	mov	r0, r5
90005736:	f01d fb7e 	bl	90022e36 <__cxa_guard_acquire>
9000573a:	2800      	cmp	r0, #0
9000573c:	d0f7      	beq.n	9000572e <_Z23getFont_verdana_40_4bppv+0x12>
9000573e:	213f      	movs	r1, #63	; 0x3f
90005740:	2201      	movs	r2, #1
90005742:	2328      	movs	r3, #40	; 0x28
90005744:	2004      	movs	r0, #4
90005746:	9204      	str	r2, [sp, #16]
90005748:	9300      	str	r3, [sp, #0]
9000574a:	9003      	str	r0, [sp, #12]
9000574c:	480d      	ldr	r0, [pc, #52]	; (90005784 <_Z23getFont_verdana_40_4bppv+0x68>)
9000574e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005752:	490d      	ldr	r1, [pc, #52]	; (90005788 <_Z23getFont_verdana_40_4bppv+0x6c>)
90005754:	9108      	str	r1, [sp, #32]
90005756:	490d      	ldr	r1, [pc, #52]	; (9000578c <_Z23getFont_verdana_40_4bppv+0x70>)
90005758:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000575c:	9107      	str	r1, [sp, #28]
9000575e:	490c      	ldr	r1, [pc, #48]	; (90005790 <_Z23getFont_verdana_40_4bppv+0x74>)
90005760:	e9cd 4405 	strd	r4, r4, [sp, #20]
90005764:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005768:	f7ff fd30 	bl	900051cc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
9000576c:	4809      	ldr	r0, [pc, #36]	; (90005794 <_Z23getFont_verdana_40_4bppv+0x78>)
9000576e:	f01d fbad 	bl	90022ecc <atexit>
90005772:	4628      	mov	r0, r5
90005774:	f01d fb6b 	bl	90022e4e <__cxa_guard_release>
}
90005778:	4802      	ldr	r0, [pc, #8]	; (90005784 <_Z23getFont_verdana_40_4bppv+0x68>)
9000577a:	b00f      	add	sp, #60	; 0x3c
9000577c:	bd30      	pop	{r4, r5, pc}
9000577e:	bf00      	nop
90005780:	2400b1cc 	.word	0x2400b1cc
90005784:	2400b1d0 	.word	0x2400b1d0
90005788:	900272a4 	.word	0x900272a4
9000578c:	900272b0 	.word	0x900272b0
90005790:	90202154 	.word	0x90202154
90005794:	90005719 	.word	0x90005719

90005798 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90005798:	2000      	movs	r0, #0
9000579a:	4770      	bx	lr

9000579c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
9000579c:	2000      	movs	r0, #0
9000579e:	4770      	bx	lr

900057a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900057a0:	b40e      	push	{r1, r2, r3}
900057a2:	b500      	push	{lr}
900057a4:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900057a6:	2100      	movs	r1, #0
{
900057a8:	ab03      	add	r3, sp, #12
900057aa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900057ae:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900057b0:	f00f fc5e 	bl	90015070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900057b4:	b002      	add	sp, #8
900057b6:	f85d eb04 	ldr.w	lr, [sp], #4
900057ba:	b003      	add	sp, #12
900057bc:	4770      	bx	lr
900057be:	bf00      	nop

900057c0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900057c0:	b40c      	push	{r2, r3}
900057c2:	b500      	push	{lr}
900057c4:	b083      	sub	sp, #12
900057c6:	ab04      	add	r3, sp, #16
900057c8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
900057cc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
900057ce:	f00f fc4f 	bl	90015070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900057d2:	b003      	add	sp, #12
900057d4:	f85d eb04 	ldr.w	lr, [sp], #4
900057d8:	b002      	add	sp, #8
900057da:	4770      	bx	lr

900057dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
900057dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
900057de:	b510      	push	{r4, lr}
900057e0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
900057e2:	b133      	cbz	r3, 900057f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
900057e4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
900057e6:	b39b      	cbz	r3, 90005850 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
900057e8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
900057ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900057ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
900057f0:	b923      	cbnz	r3, 900057fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
900057f2:	4620      	mov	r0, r4
}
900057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
900057f8:	f010 bdd4 	b.w	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
900057fc:	f010 fed0 	bl	900165a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90005800:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90005802:	2b01      	cmp	r3, #1
90005804:	d92a      	bls.n	9000585c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005806:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90005808:	1c53      	adds	r3, r2, #1
9000580a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
9000580c:	2b09      	cmp	r3, #9
9000580e:	d812      	bhi.n	90005836 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90005810:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005814:	f640 103f 	movw	r0, #2367	; 0x93f
90005818:	8c49      	ldrh	r1, [r1, #34]	; 0x22
9000581a:	4281      	cmp	r1, r0
9000581c:	d1e9      	bne.n	900057f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
9000581e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005822:	0052      	lsls	r2, r2, #1
90005824:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005826:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
9000582a:	4422      	add	r2, r4
9000582c:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90005830:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90005832:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90005834:	e7dd      	b.n	900057f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005836:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9000583a:	f640 113f 	movw	r1, #2367	; 0x93f
9000583e:	89db      	ldrh	r3, [r3, #14]
90005840:	428b      	cmp	r3, r1
90005842:	d1d6      	bne.n	900057f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005844:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005848:	2300      	movs	r3, #0
9000584a:	0052      	lsls	r2, r2, #1
9000584c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
9000584e:	e7ea      	b.n	90005826 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90005850:	4b05      	ldr	r3, [pc, #20]	; (90005868 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90005852:	21c5      	movs	r1, #197	; 0xc5
90005854:	4a05      	ldr	r2, [pc, #20]	; (9000586c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005856:	4806      	ldr	r0, [pc, #24]	; (90005870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005858:	f01d fb1a 	bl	90022e90 <__assert_func>
            assert(offset < used);
9000585c:	4b05      	ldr	r3, [pc, #20]	; (90005874 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
9000585e:	21cb      	movs	r1, #203	; 0xcb
90005860:	4a05      	ldr	r2, [pc, #20]	; (90005878 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90005862:	4803      	ldr	r0, [pc, #12]	; (90005870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005864:	f01d fb14 	bl	90022e90 <__assert_func>
90005868:	900262e0 	.word	0x900262e0
9000586c:	900262ec 	.word	0x900262ec
90005870:	90026398 	.word	0x90026398
90005874:	900263e4 	.word	0x900263e4
90005878:	900263f4 	.word	0x900263f4

9000587c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
9000587c:	f010 bd5b 	b.w	90016336 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90005880 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90005880:	b510      	push	{r4, lr}
90005882:	b086      	sub	sp, #24
90005884:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90005888:	ac0a      	add	r4, sp, #40	; 0x28
{
9000588a:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000588e:	461a      	mov	r2, r3
90005890:	9b09      	ldr	r3, [sp, #36]	; 0x24
90005892:	4661      	mov	r1, ip
90005894:	9401      	str	r4, [sp, #4]
90005896:	9300      	str	r3, [sp, #0]
90005898:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
9000589a:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000589c:	f00e f88a 	bl	900139b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900058a0:	b006      	add	sp, #24
900058a2:	bd10      	pop	{r4, pc}

900058a4 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
900058a4:	b9e0      	cbnz	r0, 900058e0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
900058a6:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
900058a8:	4b13      	ldr	r3, [pc, #76]	; (900058f8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
900058aa:	681b      	ldr	r3, [r3, #0]
900058ac:	b1cb      	cbz	r3, 900058e2 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058ae:	4c13      	ldr	r4, [pc, #76]	; (900058fc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058b0:	4813      	ldr	r0, [pc, #76]	; (90005900 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900058b2:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058b6:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058b8:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900058ba:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900058bc:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900058be:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900058c0:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
900058c2:	4b10      	ldr	r3, [pc, #64]	; (90005904 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
900058c4:	2200      	movs	r2, #0
900058c6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
900058c8:	f000 f83a 	bl	90005940 <_ZN17TypedTextDatabase8getFontsEv>
900058cc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
900058ce:	f000 f835 	bl	9000593c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
900058d2:	4b0d      	ldr	r3, [pc, #52]	; (90005908 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
900058d4:	4a0d      	ldr	r2, [pc, #52]	; (9000590c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
900058d6:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
900058d8:	4b0d      	ldr	r3, [pc, #52]	; (90005910 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
900058da:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
900058dc:	8018      	strh	r0, [r3, #0]
    }
}
900058de:	bd38      	pop	{r3, r4, r5, pc}
900058e0:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
900058e2:	4c0c      	ldr	r4, [pc, #48]	; (90005914 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
900058e4:	4905      	ldr	r1, [pc, #20]	; (900058fc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
900058e6:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
900058e8:	480b      	ldr	r0, [pc, #44]	; (90005918 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
900058ea:	4b05      	ldr	r3, [pc, #20]	; (90005900 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900058ec:	4a0b      	ldr	r2, [pc, #44]	; (9000591c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
900058ee:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
900058f0:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
900058f2:	2c00      	cmp	r4, #0
900058f4:	d1e5      	bne.n	900058c2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
900058f6:	bd38      	pop	{r3, r4, r5, pc}
900058f8:	2400b1fc 	.word	0x2400b1fc
900058fc:	2400b200 	.word	0x2400b200
90005900:	2400b204 	.word	0x2400b204
90005904:	2400b208 	.word	0x2400b208
90005908:	240262b4 	.word	0x240262b4
9000590c:	240262bc 	.word	0x240262bc
90005910:	240262b8 	.word	0x240262b8
90005914:	90202194 	.word	0x90202194
90005918:	9020216c 	.word	0x9020216c
9000591c:	90202164 	.word	0x90202164

90005920 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90005920:	4a04      	ldr	r2, [pc, #16]	; (90005934 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90005922:	4b05      	ldr	r3, [pc, #20]	; (90005938 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005924:	6812      	ldr	r2, [r2, #0]
90005926:	681b      	ldr	r3, [r3, #0]
90005928:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
9000592c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90005930:	4770      	bx	lr
90005932:	bf00      	nop
90005934:	2400b204 	.word	0x2400b204
90005938:	2400b200 	.word	0x2400b200

9000593c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
9000593c:	2002      	movs	r0, #2
9000593e:	4770      	bx	lr

90005940 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90005940:	4800      	ldr	r0, [pc, #0]	; (90005944 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90005942:	4770      	bx	lr
90005944:	2400b20c 	.word	0x2400b20c

90005948 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90005948:	b510      	push	{r4, lr}
};
9000594a:	4c05      	ldr	r4, [pc, #20]	; (90005960 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
9000594c:	f7ff fea4 	bl	90005698 <_Z23getFont_verdana_20_4bppv>
};
90005950:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90005952:	f7ff fee3 	bl	9000571c <_Z23getFont_verdana_40_4bppv>
};
90005956:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90005958:	f7ff fe5e 	bl	90005618 <_Z23getFont_verdana_10_4bppv>
};
9000595c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
9000595e:	bd10      	pop	{r4, pc}
90005960:	2400b20c 	.word	0x2400b20c

90005964 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90005964:	4770      	bx	lr
90005966:	bf00      	nop

90005968 <_ZN19FrontendApplicationD0Ev>:
90005968:	b510      	push	{r4, lr}
9000596a:	4604      	mov	r4, r0
9000596c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90005970:	f01d fa5f 	bl	90022e32 <_ZdlPvj>
90005974:	4620      	mov	r0, r4
90005976:	bd10      	pop	{r4, pc}

90005978 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90005978:	b510      	push	{r4, lr}
9000597a:	4604      	mov	r4, r0
    {
        model.tick();
9000597c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90005980:	f000 f818 	bl	900059b4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90005984:	4620      	mov	r0, r4
    }
90005986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
9000598a:	f00e bcd9 	b.w	90014340 <_ZN8touchgfx11Application15handleTickEventEv>
9000598e:	bf00      	nop

90005990 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90005990:	b510      	push	{r4, lr}
90005992:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90005994:	f7ff fb92 	bl	900050bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90005998:	4b01      	ldr	r3, [pc, #4]	; (900059a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
9000599a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
9000599c:	6023      	str	r3, [r4, #0]
}
9000599e:	bd10      	pop	{r4, pc}
900059a0:	900264d0 	.word	0x900264d0

900059a4 <_ZN13ModelListener6setADCEi>:
    }
    virtual void setADC(int value) {};
900059a4:	4770      	bx	lr
900059a6:	bf00      	nop

900059a8 <_ZN5ModelC1Ev>:
	{
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
	}
}
#endif
Model::Model() : modelListener(0), ADC_VAL(50)
900059a8:	2100      	movs	r1, #0
900059aa:	2232      	movs	r2, #50	; 0x32
900059ac:	e9c0 1200 	strd	r1, r2, [r0]
{

}
900059b0:	4770      	bx	lr
900059b2:	bf00      	nop

900059b4 <_ZN5Model4tickEv>:

void Model::tick()
{
900059b4:	b570      	push	{r4, r5, r6, lr}
900059b6:	4605      	mov	r5, r0
#ifndef SIMULATOR
	HAL_ADC_Start(&hadc1);
900059b8:	480e      	ldr	r0, [pc, #56]	; (900059f4 <_ZN5Model4tickEv+0x40>)
900059ba:	f001 fd7b 	bl	900074b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
900059be:	210a      	movs	r1, #10
900059c0:	480c      	ldr	r0, [pc, #48]	; (900059f4 <_ZN5Model4tickEv+0x40>)
900059c2:	f001 f9f3 	bl	90006dac <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
900059c6:	480b      	ldr	r0, [pc, #44]	; (900059f4 <_ZN5Model4tickEv+0x40>)
900059c8:	f001 fa76 	bl	90006eb8 <HAL_ADC_GetValue>
900059cc:	4604      	mov	r4, r0
	HAL_ADC_Stop (&hadc1);
900059ce:	4809      	ldr	r0, [pc, #36]	; (900059f4 <_ZN5Model4tickEv+0x40>)
900059d0:	f001 fe28 	bl	90007624 <HAL_ADC_Stop>

	ADC_VAL = map(value, 0, 65535, 0, 100);
	modelListener->setADC(ADC_VAL);
900059d4:	6828      	ldr	r0, [r5, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
900059d6:	2265      	movs	r2, #101	; 0x65
	ADC_VAL = map(value, 0, 65535, 0, 100);
900059d8:	b2a1      	uxth	r1, r4
	modelListener->setADC(ADC_VAL);
900059da:	6803      	ldr	r3, [r0, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
900059dc:	fb02 f101 	mul.w	r1, r2, r1
900059e0:	4a05      	ldr	r2, [pc, #20]	; (900059f8 <_ZN5Model4tickEv+0x44>)
	modelListener->setADC(ADC_VAL);
900059e2:	689b      	ldr	r3, [r3, #8]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
900059e4:	1409      	asrs	r1, r1, #16
900059e6:	4293      	cmp	r3, r2
	ADC_VAL = map(value, 0, 65535, 0, 100);
900059e8:	6069      	str	r1, [r5, #4]
	modelListener->setADC(ADC_VAL);
900059ea:	d100      	bne.n	900059ee <_ZN5Model4tickEv+0x3a>
	#endif
}
900059ec:	bd70      	pop	{r4, r5, r6, pc}
900059ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->setADC(ADC_VAL);
900059f2:	4718      	bx	r3
900059f4:	2400ae10 	.word	0x2400ae10
900059f8:	900059a5 	.word	0x900059a5

900059fc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
900059fc:	4770      	bx	lr
900059fe:	bf00      	nop

90005a00 <_ZThn4_N16Screen1PresenterD1Ev>:
90005a00:	3804      	subs	r0, #4
90005a02:	4770      	bx	lr

90005a04 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90005a04:	4770      	bx	lr
90005a06:	bf00      	nop

90005a08 <_ZN16Screen1Presenter6setADCEi>:

}

void Screen1Presenter::setADC (int value)
{
	view.setADC(value);
90005a08:	68c0      	ldr	r0, [r0, #12]
90005a0a:	6803      	ldr	r3, [r0, #0]
90005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005a0e:	4718      	bx	r3

90005a10 <_ZN16Screen1PresenterD0Ev>:
90005a10:	b510      	push	{r4, lr}
90005a12:	4604      	mov	r4, r0
90005a14:	2110      	movs	r1, #16
90005a16:	f01d fa0c 	bl	90022e32 <_ZdlPvj>
90005a1a:	4620      	mov	r0, r4
90005a1c:	bd10      	pop	{r4, pc}
90005a1e:	bf00      	nop

90005a20 <_ZThn4_N16Screen1PresenterD0Ev>:
90005a20:	b500      	push	{lr}
90005a22:	3804      	subs	r0, #4
90005a24:	b083      	sub	sp, #12
90005a26:	2110      	movs	r1, #16
90005a28:	9001      	str	r0, [sp, #4]
90005a2a:	f01d fa02 	bl	90022e32 <_ZdlPvj>
90005a2e:	9801      	ldr	r0, [sp, #4]
90005a30:	b003      	add	sp, #12
90005a32:	f85d fb04 	ldr.w	pc, [sp], #4
90005a36:	bf00      	nop

90005a38 <_ZThn4_N16Screen1Presenter6setADCEi>:
90005a38:	6880      	ldr	r0, [r0, #8]
90005a3a:	6803      	ldr	r3, [r0, #0]
90005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005a3e:	4718      	bx	r3

90005a40 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90005a40:	4a06      	ldr	r2, [pc, #24]	; (90005a5c <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90005a42:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90005a44:	b410      	push	{r4}
    ModelListener() : model(0) {}
90005a46:	2400      	movs	r4, #0
90005a48:	6084      	str	r4, [r0, #8]
    : view(v)
90005a4a:	f102 0408 	add.w	r4, r2, #8
90005a4e:	3224      	adds	r2, #36	; 0x24
90005a50:	e9c0 4200 	strd	r4, r2, [r0]
}
90005a54:	f85d 4b04 	ldr.w	r4, [sp], #4
90005a58:	4770      	bx	lr
90005a5a:	bf00      	nop
90005a5c:	90026514 	.word	0x90026514

90005a60 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005a60:	4770      	bx	lr
90005a62:	bf00      	nop

90005a64 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90005a64:	4b03      	ldr	r3, [pc, #12]	; (90005a74 <_ZN11Screen1ViewD1Ev+0x10>)
90005a66:	b510      	push	{r4, lr}
90005a68:	4604      	mov	r4, r0
90005a6a:	6003      	str	r3, [r0, #0]
90005a6c:	f7ff fc2a 	bl	900052c4 <_ZN15Screen1ViewBaseD1Ev>
90005a70:	4620      	mov	r0, r4
90005a72:	bd10      	pop	{r4, pc}
90005a74:	90026550 	.word	0x90026550

90005a78 <_ZN11Screen1ViewD0Ev>:
90005a78:	4b05      	ldr	r3, [pc, #20]	; (90005a90 <_ZN11Screen1ViewD0Ev+0x18>)
90005a7a:	b510      	push	{r4, lr}
90005a7c:	4604      	mov	r4, r0
90005a7e:	6003      	str	r3, [r0, #0]
90005a80:	f7ff fc20 	bl	900052c4 <_ZN15Screen1ViewBaseD1Ev>
90005a84:	21ec      	movs	r1, #236	; 0xec
90005a86:	4620      	mov	r0, r4
90005a88:	f01d f9d3 	bl	90022e32 <_ZdlPvj>
90005a8c:	4620      	mov	r0, r4
90005a8e:	bd10      	pop	{r4, pc}
90005a90:	90026550 	.word	0x90026550

90005a94 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90005a94:	b510      	push	{r4, lr}
90005a96:	4604      	mov	r4, r0
90005a98:	f7ff fcd8 	bl	9000544c <_ZN15Screen1ViewBaseC1Ev>
90005a9c:	4b01      	ldr	r3, [pc, #4]	; (90005aa4 <_ZN11Screen1ViewC1Ev+0x10>)
}
90005a9e:	4620      	mov	r0, r4
Screen1View::Screen1View()
90005aa0:	6023      	str	r3, [r4, #0]
}
90005aa2:	bd10      	pop	{r4, pc}
90005aa4:	90026550 	.word	0x90026550

90005aa8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005aa8:	f7ff bc0e 	b.w	900052c8 <_ZN15Screen1ViewBase11setupScreenEv>

90005aac <_ZN11Screen1View6setADCEi>:

void Screen1View::setADC(int value) {
90005aac:	b510      	push	{r4, lr}
90005aae:	4604      	mov	r4, r0
90005ab0:	460b      	mov	r3, r1
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
90005ab2:	4a05      	ldr	r2, [pc, #20]	; (90005ac8 <_ZN11Screen1View6setADCEi+0x1c>)
90005ab4:	2104      	movs	r1, #4
90005ab6:	30e4      	adds	r0, #228	; 0xe4
90005ab8:	f011 fb20 	bl	900170fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
90005abc:	f104 0098 	add.w	r0, r4, #152	; 0x98
};
90005ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
90005ac4:	f00f bbff 	b.w	900152c6 <_ZNK8touchgfx8Drawable10invalidateEv>
90005ac8:	90026544 	.word	0x90026544

90005acc <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005acc:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005ad0:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90005ad2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005ad6:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005ada:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005adc:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90005ade:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005ae2:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005ae6:	4770      	bx	lr

90005ae8 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005ae8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005aec:	2b01      	cmp	r3, #1
90005aee:	d102      	bne.n	90005af6 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90005af0:	2300      	movs	r3, #0
90005af2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005af6:	2000      	movs	r0, #0
90005af8:	4770      	bx	lr
90005afa:	bf00      	nop

90005afc <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005afc:	2000      	movs	r0, #0
90005afe:	4770      	bx	lr

90005b00 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005b00:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005b02:	6904      	ldr	r4, [r0, #16]
90005b04:	8900      	ldrh	r0, [r0, #8]
90005b06:	46a4      	mov	ip, r4
}
90005b08:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005b0c:	4760      	bx	ip
90005b0e:	bf00      	nop

90005b10 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005b10:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005b12:	68c4      	ldr	r4, [r0, #12]
90005b14:	8900      	ldrh	r0, [r0, #8]
90005b16:	46a4      	mov	ip, r4
}
90005b18:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005b1c:	4760      	bx	ip
90005b1e:	bf00      	nop

90005b20 <FT5336_GestureConfig>:
{
90005b20:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005b22:	f100 0518 	add.w	r5, r0, #24
{
90005b26:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005b28:	7809      	ldrb	r1, [r1, #0]
90005b2a:	4628      	mov	r0, r5
90005b2c:	f000 f96c 	bl	90005e08 <ft5336_radian_value>
90005b30:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005b32:	7931      	ldrb	r1, [r6, #4]
90005b34:	4628      	mov	r0, r5
90005b36:	f000 f975 	bl	90005e24 <ft5336_offset_left_right>
90005b3a:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90005b3c:	7a31      	ldrb	r1, [r6, #8]
90005b3e:	4628      	mov	r0, r5
90005b40:	f000 f97e 	bl	90005e40 <ft5336_offset_up_down>
90005b44:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005b46:	7b31      	ldrb	r1, [r6, #12]
90005b48:	4628      	mov	r0, r5
90005b4a:	f000 f987 	bl	90005e5c <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b4e:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005b50:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b52:	4628      	mov	r0, r5
90005b54:	f000 f990 	bl	90005e78 <ft5336_distance_up_down>
90005b58:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b5a:	7d31      	ldrb	r1, [r6, #20]
90005b5c:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005b5e:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005b60:	f000 f998 	bl	90005e94 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90005b64:	42c4      	cmn	r4, r0
}
90005b66:	bf14      	ite	ne
90005b68:	f04f 30ff 	movne.w	r0, #4294967295
90005b6c:	2000      	moveq	r0, #0
90005b6e:	bd70      	pop	{r4, r5, r6, pc}

90005b70 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90005b70:	3018      	adds	r0, #24
90005b72:	f000 b9ab 	b.w	90005ecc <ft5336_chip_id>
90005b76:	bf00      	nop

90005b78 <FT5336_GetState>:
{
90005b78:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b7a:	f100 0518 	add.w	r5, r0, #24
{
90005b7e:	b083      	sub	sp, #12
90005b80:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005b82:	4628      	mov	r0, r5
90005b84:	a901      	add	r1, sp, #4
90005b86:	f000 f931 	bl	90005dec <ft5336_td_status>
90005b8a:	bb10      	cbnz	r0, 90005bd2 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005b8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b90:	2b05      	cmp	r3, #5
90005b92:	bf94      	ite	ls
90005b94:	4619      	movls	r1, r3
90005b96:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b98:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005b9a:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005b9c:	4628      	mov	r0, r5
90005b9e:	2103      	movs	r1, #3
90005ba0:	eb0d 0203 	add.w	r2, sp, r3
90005ba4:	f000 f910 	bl	90005dc8 <ft5336_read_reg>
90005ba8:	b9b0      	cbnz	r0, 90005bd8 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005baa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005bb2:	0212      	lsls	r2, r2, #8
90005bb4:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bb8:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005bba:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bbe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005bc2:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005bc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005bc8:	430b      	orrs	r3, r1
90005bca:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005bce:	b003      	add	sp, #12
90005bd0:	bd30      	pop	{r4, r5, pc}
90005bd2:	f04f 31ff 	mov.w	r1, #4294967295
90005bd6:	e7df      	b.n	90005b98 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005bd8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005bdc:	e7f7      	b.n	90005bce <FT5336_GetState+0x56>
90005bde:	bf00      	nop

90005be0 <FT5336_GetMultiTouchState>:
{
90005be0:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005be2:	f100 0518 	add.w	r5, r0, #24
{
90005be6:	b088      	sub	sp, #32
90005be8:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005bea:	4628      	mov	r0, r5
90005bec:	4669      	mov	r1, sp
90005bee:	f000 f8fd 	bl	90005dec <ft5336_td_status>
90005bf2:	2800      	cmp	r0, #0
90005bf4:	f040 809a 	bne.w	90005d2c <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005bf8:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005bfc:	2b05      	cmp	r3, #5
90005bfe:	bf94      	ite	ls
90005c00:	4619      	movls	r1, r3
90005c02:	2100      	movhi	r1, #0
90005c04:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005c06:	231e      	movs	r3, #30
90005c08:	466a      	mov	r2, sp
90005c0a:	4628      	mov	r0, r5
90005c0c:	2103      	movs	r1, #3
90005c0e:	f000 f8db 	bl	90005dc8 <ft5336_read_reg>
90005c12:	2800      	cmp	r0, #0
90005c14:	f040 808d 	bne.w	90005d32 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c18:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c20:	020a      	lsls	r2, r1, #8
90005c22:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c26:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c28:	f89d c007 	ldrb.w	ip, [sp, #7]
90005c2c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c30:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c36:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c3a:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c3c:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c40:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c42:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c44:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c46:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c48:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c4c:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c52:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c56:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c58:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c5e:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c60:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c62:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c64:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c68:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c6a:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c6c:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c70:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005c74:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c76:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c78:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c7a:	ea45 050c 	orr.w	r5, r5, ip
90005c7e:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c82:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c86:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005c88:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c8a:	0212      	lsls	r2, r2, #8
90005c8c:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005c90:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c92:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c96:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c9a:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005c9c:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005c9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
90005ca2:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ca4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ca8:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005caa:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cb0:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
90005cb6:	4313      	orrs	r3, r2
90005cb8:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cba:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cbc:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cc4:	020a      	lsls	r2, r1, #8
90005cc6:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cca:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ccc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cd0:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cd6:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cd8:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cdc:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005cde:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ce0:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005ce4:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ce6:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ce8:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cea:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005cee:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cf0:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005cf4:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005cf6:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005cfa:	f89d 301d 	ldrb.w	r3, [sp, #29]
90005cfe:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005d00:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005d02:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005d04:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005d08:	6625      	str	r5, [r4, #96]	; 0x60
90005d0a:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005d0c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005d10:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005d12:	021b      	lsls	r3, r3, #8
90005d14:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005d18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005d1c:	430b      	orrs	r3, r1
90005d1e:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005d20:	f89d 3019 	ldrb.w	r3, [sp, #25]
90005d24:	4313      	orrs	r3, r2
90005d26:	6163      	str	r3, [r4, #20]
}
90005d28:	b008      	add	sp, #32
90005d2a:	bd70      	pop	{r4, r5, r6, pc}
90005d2c:	f04f 31ff 	mov.w	r1, #4294967295
90005d30:	e768      	b.n	90005c04 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90005d32:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005d36:	e7f7      	b.n	90005d28 <FT5336_GetMultiTouchState+0x148>

90005d38 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005d38:	3018      	adds	r0, #24
90005d3a:	f000 b84d 	b.w	90005dd8 <ft5336_gest_id>
90005d3e:	bf00      	nop

90005d40 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90005d40:	2101      	movs	r1, #1
90005d42:	3018      	adds	r0, #24
90005d44:	f000 b8b4 	b.w	90005eb0 <ft5336_g_mode>

90005d48 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005d48:	2100      	movs	r1, #0
90005d4a:	3018      	adds	r0, #24
90005d4c:	f000 b8b0 	b.w	90005eb0 <ft5336_g_mode>

90005d50 <FT5336_Init>:
{
90005d50:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90005d52:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90005d56:	b98d      	cbnz	r5, 90005d7c <FT5336_Init+0x2c>
    pObj->IO.Init();
90005d58:	4606      	mov	r6, r0
90005d5a:	4604      	mov	r4, r0
90005d5c:	f856 3b18 	ldr.w	r3, [r6], #24
90005d60:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005d62:	4629      	mov	r1, r5
90005d64:	4630      	mov	r0, r6
90005d66:	f000 f8a3 	bl	90005eb0 <ft5336_g_mode>
  if(ret != FT5336_OK)
90005d6a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90005d6c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90005d70:	bf18      	it	ne
90005d72:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90005d74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
90005d78:	4240      	negs	r0, r0
}
90005d7a:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90005d7c:	2000      	movs	r0, #0
}
90005d7e:	bd70      	pop	{r4, r5, r6, pc}

90005d80 <FT5336_ClearIT>:
90005d80:	2000      	movs	r0, #0
90005d82:	4770      	bx	lr

90005d84 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90005d84:	b1c0      	cbz	r0, 90005db8 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
90005d86:	890a      	ldrh	r2, [r1, #8]
{
90005d88:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
90005d8a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90005d8e:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90005d90:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d94:	694a      	ldr	r2, [r1, #20]
90005d96:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
90005d9a:	4909      	ldr	r1, [pc, #36]	; (90005dc0 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90005d9c:	60c5      	str	r5, [r0, #12]
90005d9e:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005da2:	4a08      	ldr	r2, [pc, #32]	; (90005dc4 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90005da4:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005da8:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
90005daa:	b10b      	cbz	r3, 90005db0 <FT5336_RegisterBusIO+0x2c>
}
90005dac:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90005dae:	4718      	bx	r3
}
90005db0:	f04f 30ff 	mov.w	r0, #4294967295
90005db4:	bc30      	pop	{r4, r5}
90005db6:	4770      	bx	lr
90005db8:	f04f 30ff 	mov.w	r0, #4294967295
90005dbc:	4770      	bx	lr
90005dbe:	bf00      	nop
90005dc0:	90005b01 	.word	0x90005b01
90005dc4:	90005b11 	.word	0x90005b11

90005dc8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90005dc8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dca:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005dce:	46a4      	mov	ip, r4
}
90005dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dd4:	4760      	bx	ip
90005dd6:	bf00      	nop

90005dd8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005dd8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dda:	2301      	movs	r3, #1
{
90005ddc:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dde:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005de2:	4619      	mov	r1, r3
90005de4:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90005de6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005dea:	4760      	bx	ip

90005dec <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90005dec:	b538      	push	{r3, r4, r5, lr}
90005dee:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005df0:	2301      	movs	r3, #1
90005df2:	2102      	movs	r1, #2
90005df4:	4622      	mov	r2, r4
90005df6:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90005dfa:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90005dfc:	b918      	cbnz	r0, 90005e06 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90005dfe:	7823      	ldrb	r3, [r4, #0]
90005e00:	f003 030f 	and.w	r3, r3, #15
90005e04:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90005e06:	bd38      	pop	{r3, r4, r5, pc}

90005e08 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005e08:	b510      	push	{r4, lr}
90005e0a:	460c      	mov	r4, r1
90005e0c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e0e:	2301      	movs	r3, #1
90005e10:	2191      	movs	r1, #145	; 0x91
{
90005e12:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e16:	f10d 0207 	add.w	r2, sp, #7
90005e1a:	6804      	ldr	r4, [r0, #0]
90005e1c:	6880      	ldr	r0, [r0, #8]
90005e1e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005e20:	b002      	add	sp, #8
90005e22:	bd10      	pop	{r4, pc}

90005e24 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005e24:	b510      	push	{r4, lr}
90005e26:	460c      	mov	r4, r1
90005e28:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e2a:	2301      	movs	r3, #1
90005e2c:	2192      	movs	r1, #146	; 0x92
{
90005e2e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e32:	f10d 0207 	add.w	r2, sp, #7
90005e36:	6804      	ldr	r4, [r0, #0]
90005e38:	6880      	ldr	r0, [r0, #8]
90005e3a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90005e3c:	b002      	add	sp, #8
90005e3e:	bd10      	pop	{r4, pc}

90005e40 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005e40:	b510      	push	{r4, lr}
90005e42:	460c      	mov	r4, r1
90005e44:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e46:	2301      	movs	r3, #1
90005e48:	2193      	movs	r1, #147	; 0x93
{
90005e4a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e4e:	f10d 0207 	add.w	r2, sp, #7
90005e52:	6804      	ldr	r4, [r0, #0]
90005e54:	6880      	ldr	r0, [r0, #8]
90005e56:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90005e58:	b002      	add	sp, #8
90005e5a:	bd10      	pop	{r4, pc}

90005e5c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005e5c:	b510      	push	{r4, lr}
90005e5e:	460c      	mov	r4, r1
90005e60:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e62:	2301      	movs	r3, #1
90005e64:	2194      	movs	r1, #148	; 0x94
{
90005e66:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e6a:	f10d 0207 	add.w	r2, sp, #7
90005e6e:	6804      	ldr	r4, [r0, #0]
90005e70:	6880      	ldr	r0, [r0, #8]
90005e72:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90005e74:	b002      	add	sp, #8
90005e76:	bd10      	pop	{r4, pc}

90005e78 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005e78:	b510      	push	{r4, lr}
90005e7a:	460c      	mov	r4, r1
90005e7c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e7e:	2301      	movs	r3, #1
90005e80:	2195      	movs	r1, #149	; 0x95
{
90005e82:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e86:	f10d 0207 	add.w	r2, sp, #7
90005e8a:	6804      	ldr	r4, [r0, #0]
90005e8c:	6880      	ldr	r0, [r0, #8]
90005e8e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90005e90:	b002      	add	sp, #8
90005e92:	bd10      	pop	{r4, pc}

90005e94 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90005e94:	b510      	push	{r4, lr}
90005e96:	460c      	mov	r4, r1
90005e98:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005e9a:	2301      	movs	r3, #1
90005e9c:	2196      	movs	r1, #150	; 0x96
{
90005e9e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005ea2:	f10d 0207 	add.w	r2, sp, #7
90005ea6:	6804      	ldr	r4, [r0, #0]
90005ea8:	6880      	ldr	r0, [r0, #8]
90005eaa:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90005eac:	b002      	add	sp, #8
90005eae:	bd10      	pop	{r4, pc}

90005eb0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90005eb0:	b510      	push	{r4, lr}
90005eb2:	460c      	mov	r4, r1
90005eb4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005eb6:	2301      	movs	r3, #1
90005eb8:	21a4      	movs	r1, #164	; 0xa4
{
90005eba:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005ebe:	f10d 0207 	add.w	r2, sp, #7
90005ec2:	6804      	ldr	r4, [r0, #0]
90005ec4:	6880      	ldr	r0, [r0, #8]
90005ec6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90005ec8:	b002      	add	sp, #8
90005eca:	bd10      	pop	{r4, pc}

90005ecc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005ecc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ece:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90005ed2:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ed4:	2301      	movs	r3, #1
90005ed6:	46a4      	mov	ip, r4
90005ed8:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005eda:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005ede:	4760      	bx	ip

90005ee0 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005ee2:	680b      	ldr	r3, [r1, #0]
{
90005ee4:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005ee6:	4c2a      	ldr	r4, [pc, #168]	; (90005f90 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005eec:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005eee:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005ef0:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005ef2:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90005ef4:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005ef6:	2301      	movs	r3, #1
90005ef8:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005efa:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005efc:	f006 ffca 	bl	9000ce94 <HAL_SDRAM_SendCommand>
90005f00:	2800      	cmp	r0, #0
90005f02:	d142      	bne.n	90005f8a <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90005f04:	f000 ff46 	bl	90006d94 <HAL_GetTick>
90005f08:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005f0a:	f000 ff43 	bl	90006d94 <HAL_GetTick>
90005f0e:	4286      	cmp	r6, r0
90005f10:	d0fb      	beq.n	90005f0a <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005f12:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005f14:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90005f16:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f18:	491d      	ldr	r1, [pc, #116]	; (90005f90 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005f1a:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005f1c:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005f1e:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f20:	4638      	mov	r0, r7
90005f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90005f26:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005f28:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f2a:	f006 ffb3 	bl	9000ce94 <HAL_SDRAM_SendCommand>
90005f2e:	bb60      	cbnz	r0, 90005f8a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f30:	4917      	ldr	r1, [pc, #92]	; (90005f90 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90005f32:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90005f36:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f38:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005f3a:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90005f3e:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90005f44:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f46:	f006 ffa5 	bl	9000ce94 <HAL_SDRAM_SendCommand>
90005f4a:	b9f0      	cbnz	r0, 90005f8a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f4c:	4910      	ldr	r1, [pc, #64]	; (90005f90 <MT48LC4M32B2_Init+0xb0>)
90005f4e:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f50:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90005f54:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90005f56:	696a      	ldr	r2, [r5, #20]
90005f58:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005f5a:	69aa      	ldr	r2, [r5, #24]
90005f5c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005f5e:	69ea      	ldr	r2, [r5, #28]
90005f60:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90005f62:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90005f64:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f66:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005f68:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005f70:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005f72:	f006 ff8f 	bl	9000ce94 <HAL_SDRAM_SendCommand>
90005f76:	b940      	cbnz	r0, 90005f8a <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90005f78:	68a9      	ldr	r1, [r5, #8]
90005f7a:	4638      	mov	r0, r7
90005f7c:	f006 ffaa 	bl	9000ced4 <HAL_SDRAM_ProgramRefreshRate>
90005f80:	3800      	subs	r0, #0
90005f82:	bf18      	it	ne
90005f84:	2001      	movne	r0, #1
90005f86:	4240      	negs	r0, r0
}
90005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90005f8a:	f04f 30ff 	mov.w	r0, #4294967295
}
90005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90005f90:	2400b218 	.word	0x2400b218

90005f94 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90005f94:	4a10      	ldr	r2, [pc, #64]	; (90005fd8 <BSP_I2C4_DeInit+0x44>)
{
90005f96:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90005f98:	6813      	ldr	r3, [r2, #0]
90005f9a:	3b01      	subs	r3, #1
90005f9c:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90005f9e:	b10b      	cbz	r3, 90005fa4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90005fa0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90005fa2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90005fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90005fa8:	480c      	ldr	r0, [pc, #48]	; (90005fdc <BSP_I2C4_DeInit+0x48>)
90005faa:	f002 f943 	bl	90008234 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90005fae:	480b      	ldr	r0, [pc, #44]	; (90005fdc <BSP_I2C4_DeInit+0x48>)
90005fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90005fb4:	f002 f93e 	bl	90008234 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90005fb8:	4a09      	ldr	r2, [pc, #36]	; (90005fe0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005fba:	480a      	ldr	r0, [pc, #40]	; (90005fe4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90005fbc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90005fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005fc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005fc8:	f002 fbdc 	bl	90008784 <HAL_I2C_DeInit>
90005fcc:	2800      	cmp	r0, #0
90005fce:	d0e7      	beq.n	90005fa0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90005fd0:	f06f 0007 	mvn.w	r0, #7
}
90005fd4:	bd08      	pop	{r3, pc}
90005fd6:	bf00      	nop
90005fd8:	2400b228 	.word	0x2400b228
90005fdc:	58020c00 	.word	0x58020c00
90005fe0:	58024400 	.word	0x58024400
90005fe4:	2400bc30 	.word	0x2400bc30

90005fe8 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005fe8:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005fea:	2201      	movs	r2, #1
{
90005fec:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005fee:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90005ff2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90005ff6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005ffa:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005ffe:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90006000:	f002 fb68 	bl	900086d4 <HAL_I2C_Init>
90006004:	b108      	cbz	r0, 9000600a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90006006:	2001      	movs	r0, #1
}
90006008:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
9000600a:	4601      	mov	r1, r0
9000600c:	4620      	mov	r0, r4
9000600e:	f002 fe77 	bl	90008d00 <HAL_I2CEx_ConfigAnalogFilter>
90006012:	2800      	cmp	r0, #0
90006014:	d1f7      	bne.n	90006006 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90006016:	4601      	mov	r1, r0
90006018:	4620      	mov	r0, r4
9000601a:	f002 fe9b 	bl	90008d54 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
9000601e:	3800      	subs	r0, #0
90006020:	bf18      	it	ne
90006022:	2001      	movne	r0, #1
}
90006024:	bd10      	pop	{r4, pc}
90006026:	bf00      	nop

90006028 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90006028:	4b99      	ldr	r3, [pc, #612]	; (90006290 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
9000602a:	489a      	ldr	r0, [pc, #616]	; (90006294 <BSP_I2C4_Init+0x26c>)
9000602c:	4a9a      	ldr	r2, [pc, #616]	; (90006298 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
9000602e:	6819      	ldr	r1, [r3, #0]
{
90006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006034:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90006036:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90006038:	9103      	str	r1, [sp, #12]
9000603a:	b119      	cbz	r1, 90006044 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
9000603c:	2000      	movs	r0, #0
}
9000603e:	b01f      	add	sp, #124	; 0x7c
90006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90006044:	2201      	movs	r2, #1
90006046:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90006048:	f002 fe54 	bl	90008cf4 <HAL_I2C_GetState>
9000604c:	2800      	cmp	r0, #0
9000604e:	d1f5      	bne.n	9000603c <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006050:	4c92      	ldr	r4, [pc, #584]	; (9000629c <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006052:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90006056:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006058:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000605a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000605e:	2600      	movs	r6, #0
90006060:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006062:	f043 0308 	orr.w	r3, r3, #8
90006066:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000606a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000606e:	f003 0308 	and.w	r3, r3, #8
90006072:	9315      	str	r3, [sp, #84]	; 0x54
90006074:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006076:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000607a:	f043 0308 	orr.w	r3, r3, #8
9000607e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90006082:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90006086:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006088:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000608c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006090:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006092:	a918      	add	r1, sp, #96	; 0x60
90006094:	4882      	ldr	r0, [pc, #520]	; (900062a0 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006096:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006098:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
9000609c:	f001 ff98 	bl	90007fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900060a0:	2312      	movs	r3, #18
900060a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900060a6:	a918      	add	r1, sp, #96	; 0x60
900060a8:	487d      	ldr	r0, [pc, #500]	; (900062a0 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
900060aa:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
900060ac:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
900060b0:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
900060b4:	f001 ff8c 	bl	90007fd0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
900060b8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900060c0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
900060c4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
900060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900060cc:	9317      	str	r3, [sp, #92]	; 0x5c
900060ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
900060d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900060d8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
900060dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900060e4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900060e8:	f005 fb68 	bl	9000b7bc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900060ec:	2800      	cmp	r0, #0
900060ee:	f000 81f6 	beq.w	900064de <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060f2:	4b6c      	ldr	r3, [pc, #432]	; (900062a4 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
900060f4:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900060f8:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900060fa:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900060fe:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 900062ac <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90006102:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90006104:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90006108:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
9000610a:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000610c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90006110:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
90006114:	4b64      	ldr	r3, [pc, #400]	; (900062a8 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90006116:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
9000611a:	0079      	lsls	r1, r7, #1
9000611c:	681b      	ldr	r3, [r3, #0]
9000611e:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
90006122:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
90006126:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90006128:	4699      	mov	r9, r3
9000612a:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000612c:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90006130:	46b8      	mov	r8, r7
90006132:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90006136:	bf94      	ite	ls
90006138:	2101      	movls	r1, #1
9000613a:	2100      	movhi	r1, #0
9000613c:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90006140:	f001 0101 	and.w	r1, r1, #1
90006144:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90006148:	bf38      	it	cc
9000614a:	2100      	movcc	r1, #0
9000614c:	429c      	cmp	r4, r3
9000614e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90006152:	9105      	str	r1, [sp, #20]
90006154:	bf8c      	ite	hi
90006156:	2100      	movhi	r1, #0
90006158:	2101      	movls	r1, #1
9000615a:	459c      	cmp	ip, r3
9000615c:	bf38      	it	cc
9000615e:	2100      	movcc	r1, #0
90006160:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90006164:	9106      	str	r1, [sp, #24]
90006166:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000616a:	9104      	str	r1, [sp, #16]
9000616c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90006170:	9111      	str	r1, [sp, #68]	; 0x44
90006172:	bf94      	ite	ls
90006174:	2101      	movls	r1, #1
90006176:	2100      	movhi	r1, #0
90006178:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
9000617c:	f001 0e01 	and.w	lr, r1, #1
90006180:	bf38      	it	cc
90006182:	f04f 0e00 	movcc.w	lr, #0
90006186:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006188:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000618c:	f8cd e01c 	str.w	lr, [sp, #28]
90006190:	bf8c      	ite	hi
90006192:	f04f 0e00 	movhi.w	lr, #0
90006196:	f04f 0e01 	movls.w	lr, #1
9000619a:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000619c:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000619e:	bf38      	it	cc
900061a0:	f04f 0e00 	movcc.w	lr, #0
900061a4:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
900061a8:	bf98      	it	ls
900061aa:	2101      	movls	r1, #1
900061ac:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
900061b0:	f8cd e020 	str.w	lr, [sp, #32]
900061b4:	f001 0101 	and.w	r1, r1, #1
900061b8:	bf38      	it	cc
900061ba:	2100      	movcc	r1, #0
900061bc:	4284      	cmp	r4, r0
900061be:	9109      	str	r1, [sp, #36]	; 0x24
900061c0:	4601      	mov	r1, r0
900061c2:	bf8c      	ite	hi
900061c4:	2000      	movhi	r0, #0
900061c6:	2001      	movls	r0, #1
900061c8:	458c      	cmp	ip, r1
900061ca:	bf38      	it	cc
900061cc:	2000      	movcc	r0, #0
900061ce:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
900061d2:	900b      	str	r0, [sp, #44]	; 0x2c
900061d4:	bf94      	ite	ls
900061d6:	2001      	movls	r0, #1
900061d8:	2000      	movhi	r0, #0
900061da:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
900061de:	f000 0001 	and.w	r0, r0, #1
900061e2:	bf38      	it	cc
900061e4:	2000      	movcc	r0, #0
900061e6:	900c      	str	r0, [sp, #48]	; 0x30
900061e8:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
900061ec:	4284      	cmp	r4, r0
900061ee:	bf8c      	ite	hi
900061f0:	f04f 0e00 	movhi.w	lr, #0
900061f4:	f04f 0e01 	movls.w	lr, #1
900061f8:	4584      	cmp	ip, r0
900061fa:	bf38      	it	cc
900061fc:	f04f 0e00 	movcc.w	lr, #0
90006200:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90006204:	4670      	mov	r0, lr
90006206:	bf94      	ite	ls
90006208:	2001      	movls	r0, #1
9000620a:	2000      	movhi	r0, #0
9000620c:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90006210:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90006214:	f04f 0e00 	mov.w	lr, #0
90006218:	f000 0001 	and.w	r0, r0, #1
9000621c:	bf38      	it	cc
9000621e:	2000      	movcc	r0, #0
90006220:	900e      	str	r0, [sp, #56]	; 0x38
90006222:	9804      	ldr	r0, [sp, #16]
90006224:	4284      	cmp	r4, r0
90006226:	4602      	mov	r2, r0
90006228:	bf8c      	ite	hi
9000622a:	2200      	movhi	r2, #0
9000622c:	2201      	movls	r2, #1
9000622e:	4584      	cmp	ip, r0
90006230:	bf38      	it	cc
90006232:	2200      	movcc	r2, #0
90006234:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90006238:	920f      	str	r2, [sp, #60]	; 0x3c
9000623a:	bf94      	ite	ls
9000623c:	2201      	movls	r2, #1
9000623e:	2200      	movhi	r2, #0
90006240:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90006244:	f002 0201 	and.w	r2, r2, #1
90006248:	bf38      	it	cc
9000624a:	2200      	movcc	r2, #0
9000624c:	9210      	str	r2, [sp, #64]	; 0x40
9000624e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90006250:	4294      	cmp	r4, r2
90006252:	4613      	mov	r3, r2
90006254:	bf8c      	ite	hi
90006256:	2300      	movhi	r3, #0
90006258:	2301      	movls	r3, #1
9000625a:	4594      	cmp	ip, r2
9000625c:	bf38      	it	cc
9000625e:	2300      	movcc	r3, #0
90006260:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90006264:	9311      	str	r3, [sp, #68]	; 0x44
90006266:	bf94      	ite	ls
90006268:	2301      	movls	r3, #1
9000626a:	2300      	movhi	r3, #0
9000626c:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90006270:	f003 0301 	and.w	r3, r3, #1
90006274:	bf38      	it	cc
90006276:	2300      	movcc	r3, #0
90006278:	9312      	str	r3, [sp, #72]	; 0x48
9000627a:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
9000627e:	429c      	cmp	r4, r3
90006280:	bf8c      	ite	hi
90006282:	2200      	movhi	r2, #0
90006284:	2201      	movls	r2, #1
90006286:	459c      	cmp	ip, r3
90006288:	bf38      	it	cc
9000628a:	2200      	movcc	r2, #0
9000628c:	9204      	str	r2, [sp, #16]
9000628e:	e014      	b.n	900062ba <BSP_I2C4_Init+0x292>
90006290:	2400b228 	.word	0x2400b228
90006294:	2400bc30 	.word	0x2400bc30
90006298:	58001c00 	.word	0x58001c00
9000629c:	58024400 	.word	0x58024400
900062a0:	58020c00 	.word	0x58020c00
900062a4:	3b9aca00 	.word	0x3b9aca00
900062a8:	2400bc2c 	.word	0x2400bc2c
900062ac:	2400b22c 	.word	0x2400b22c
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900062b0:	f1be 0f10 	cmp.w	lr, #16
900062b4:	44b8      	add	r8, r7
900062b6:	f000 826c 	beq.w	90006792 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
900062ba:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
900062be:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
900062c0:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
900062c4:	d3f4      	bcc.n	900062b0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900062c6:	ebbb 0205 	subs.w	r2, fp, r5
900062ca:	bf18      	it	ne
900062cc:	2201      	movne	r2, #1
900062ce:	2c00      	cmp	r4, #0
900062d0:	bf18      	it	ne
900062d2:	2200      	movne	r2, #0
900062d4:	2a00      	cmp	r2, #0
900062d6:	f040 824a 	bne.w	9000676e <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900062da:	45bc      	cmp	ip, r7
900062dc:	bf34      	ite	cc
900062de:	2200      	movcc	r2, #0
900062e0:	2201      	movcs	r2, #1
900062e2:	42bc      	cmp	r4, r7
900062e4:	bf88      	it	hi
900062e6:	2200      	movhi	r2, #0
            if(presc != prev_presc)
900062e8:	45ab      	cmp	fp, r5
900062ea:	bf0c      	ite	eq
900062ec:	2200      	moveq	r2, #0
900062ee:	f002 0201 	andne.w	r2, r2, #1
900062f2:	2a00      	cmp	r2, #0
900062f4:	f000 80fd 	beq.w	900064f2 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062f8:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062fc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006300:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006302:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006306:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000630a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000630e:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006310:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006312:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006314:	f200 81a5 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006318:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000631a:	9906      	ldr	r1, [sp, #24]
9000631c:	45ab      	cmp	fp, r5
9000631e:	bf0c      	ite	eq
90006320:	2100      	moveq	r1, #0
90006322:	f001 0101 	andne.w	r1, r1, #1
90006326:	2900      	cmp	r1, #0
90006328:	f000 80ff 	beq.w	9000652a <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000632c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006330:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006334:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006336:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000633a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000633e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006342:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006344:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006346:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006348:	f200 818b 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
9000634c:	460a      	mov	r2, r1
9000634e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006350:	9908      	ldr	r1, [sp, #32]
90006352:	45ab      	cmp	fp, r5
90006354:	bf0c      	ite	eq
90006356:	2100      	moveq	r1, #0
90006358:	f001 0101 	andne.w	r1, r1, #1
9000635c:	2900      	cmp	r1, #0
9000635e:	f000 80ff 	beq.w	90006560 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006362:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006366:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000636a:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000636c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006370:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006374:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006378:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000637a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000637c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000637e:	f200 8170 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006382:	460a      	mov	r2, r1
90006384:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006386:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006388:	45ab      	cmp	fp, r5
9000638a:	bf0c      	ite	eq
9000638c:	2100      	moveq	r1, #0
9000638e:	f001 0101 	andne.w	r1, r1, #1
90006392:	2900      	cmp	r1, #0
90006394:	f000 80fe 	beq.w	90006594 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006398:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000639c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063a0:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063a2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063a6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063aa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063ae:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063b0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063b2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063b4:	f200 8155 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
900063b8:	460a      	mov	r2, r1
900063ba:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063bc:	990d      	ldr	r1, [sp, #52]	; 0x34
900063be:	45ab      	cmp	fp, r5
900063c0:	bf0c      	ite	eq
900063c2:	2100      	moveq	r1, #0
900063c4:	f001 0101 	andne.w	r1, r1, #1
900063c8:	2900      	cmp	r1, #0
900063ca:	f000 80fd 	beq.w	900065c8 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063ce:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900063d2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063d6:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063d8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063dc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063e0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063e4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063e6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063e8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063ea:	f200 813a 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
900063ee:	460a      	mov	r2, r1
900063f0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900063f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
900063f4:	45ab      	cmp	fp, r5
900063f6:	bf0c      	ite	eq
900063f8:	2100      	moveq	r1, #0
900063fa:	f001 0101 	andne.w	r1, r1, #1
900063fe:	2900      	cmp	r1, #0
90006400:	f000 80fc 	beq.w	900065fc <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006404:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006408:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000640c:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000640e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006412:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006416:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000641a:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000641c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000641e:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006420:	f200 811f 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006424:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006426:	9e11      	ldr	r6, [sp, #68]	; 0x44
90006428:	455d      	cmp	r5, fp
9000642a:	bf0c      	ite	eq
9000642c:	2600      	moveq	r6, #0
9000642e:	f006 0601 	andne.w	r6, r6, #1
90006432:	2e00      	cmp	r6, #0
90006434:	f000 80fb 	beq.w	9000662e <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006438:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000643c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006440:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006442:	4650      	mov	r0, sl
90006444:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006448:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000644c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006450:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006452:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006454:	f200 8105 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006458:	4631      	mov	r1, r6
9000645a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000645c:	9e04      	ldr	r6, [sp, #16]
9000645e:	455d      	cmp	r5, fp
90006460:	bf0c      	ite	eq
90006462:	2600      	moveq	r6, #0
90006464:	f006 0601 	andne.w	r6, r6, #1
90006468:	2e00      	cmp	r6, #0
9000646a:	f000 817c 	beq.w	90006766 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000646e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006472:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006476:	4650      	mov	r0, sl
90006478:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000647c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006480:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006484:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006486:	f04f 030f 	mov.w	r3, #15
9000648a:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000648c:	f200 80e9 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006490:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90006492:	e70d      	b.n	900062b0 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006494:	9a07      	ldr	r2, [sp, #28]
90006496:	9b08      	ldr	r3, [sp, #32]
90006498:	3214      	adds	r2, #20
9000649a:	3301      	adds	r3, #1
9000649c:	9207      	str	r2, [sp, #28]
9000649e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900064a0:	9308      	str	r3, [sp, #32]
900064a2:	4293      	cmp	r3, r2
900064a4:	f040 80ff 	bne.w	900066a6 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
900064a8:	297f      	cmp	r1, #127	; 0x7f
900064aa:	d818      	bhi.n	900064de <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064ac:	eb01 0381 	add.w	r3, r1, r1, lsl #2
900064b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900064b2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
900064b6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064ba:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900064bc:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064be:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064c0:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900064c4:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064c8:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064cc:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900064ce:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064d0:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900064d2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900064d6:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900064d8:	430b      	orrs	r3, r1
900064da:	4313      	orrs	r3, r2
900064dc:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900064de:	9903      	ldr	r1, [sp, #12]
900064e0:	48b5      	ldr	r0, [pc, #724]	; (900067b8 <BSP_I2C4_Init+0x790>)
900064e2:	f7ff fd81 	bl	90005fe8 <MX_I2C4_Init>
900064e6:	2800      	cmp	r0, #0
900064e8:	f43f ada8 	beq.w	9000603c <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
900064ec:	f06f 0007 	mvn.w	r0, #7
  return ret;
900064f0:	e5a5      	b.n	9000603e <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
900064f2:	4632      	mov	r2, r6
900064f4:	9905      	ldr	r1, [sp, #20]
900064f6:	45ab      	cmp	fp, r5
900064f8:	bf0c      	ite	eq
900064fa:	2100      	moveq	r1, #0
900064fc:	f001 0101 	andne.w	r1, r1, #1
90006500:	2900      	cmp	r1, #0
90006502:	f43f af0a 	beq.w	9000631a <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006506:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000650a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000650e:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006510:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006514:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006518:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000651c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000651e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006520:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006522:	f200 809e 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
90006526:	460a      	mov	r2, r1
90006528:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000652a:	9907      	ldr	r1, [sp, #28]
9000652c:	45ab      	cmp	fp, r5
9000652e:	bf0c      	ite	eq
90006530:	2100      	moveq	r1, #0
90006532:	f001 0101 	andne.w	r1, r1, #1
90006536:	2900      	cmp	r1, #0
90006538:	f43f af0a 	beq.w	90006350 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000653c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006540:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006544:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006546:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000654a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000654e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006552:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006554:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006556:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006558:	f200 8083 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
9000655c:	460a      	mov	r2, r1
9000655e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006560:	9909      	ldr	r1, [sp, #36]	; 0x24
90006562:	45ab      	cmp	fp, r5
90006564:	bf0c      	ite	eq
90006566:	2100      	moveq	r1, #0
90006568:	f001 0101 	andne.w	r1, r1, #1
9000656c:	2900      	cmp	r1, #0
9000656e:	f43f af0a 	beq.w	90006386 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006572:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006576:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000657a:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000657c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006580:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006584:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006588:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000658a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000658c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000658e:	d868      	bhi.n	90006662 <BSP_I2C4_Init+0x63a>
90006590:	460a      	mov	r2, r1
90006592:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006594:	990c      	ldr	r1, [sp, #48]	; 0x30
90006596:	45ab      	cmp	fp, r5
90006598:	bf0c      	ite	eq
9000659a:	2100      	moveq	r1, #0
9000659c:	f001 0101 	andne.w	r1, r1, #1
900065a0:	2900      	cmp	r1, #0
900065a2:	f43f af0b 	beq.w	900063bc <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065a6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065aa:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065ae:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065b0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065b4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065b8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065bc:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065be:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065c0:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065c2:	d84e      	bhi.n	90006662 <BSP_I2C4_Init+0x63a>
900065c4:	460a      	mov	r2, r1
900065c6:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065c8:	990e      	ldr	r1, [sp, #56]	; 0x38
900065ca:	45ab      	cmp	fp, r5
900065cc:	bf0c      	ite	eq
900065ce:	2100      	moveq	r1, #0
900065d0:	f001 0101 	andne.w	r1, r1, #1
900065d4:	2900      	cmp	r1, #0
900065d6:	f43f af0c 	beq.w	900063f2 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065da:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065de:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065e2:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065e4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065e8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065ec:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065f0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065f2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065f4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065f6:	d834      	bhi.n	90006662 <BSP_I2C4_Init+0x63a>
900065f8:	460a      	mov	r2, r1
900065fa:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900065fc:	9910      	ldr	r1, [sp, #64]	; 0x40
900065fe:	45ab      	cmp	fp, r5
90006600:	bf0c      	ite	eq
90006602:	2100      	moveq	r1, #0
90006604:	f001 0101 	andne.w	r1, r1, #1
90006608:	2900      	cmp	r1, #0
9000660a:	f000 80ae 	beq.w	9000676a <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000660e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006612:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006616:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006618:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000661c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006620:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006624:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006626:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006628:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000662a:	d81a      	bhi.n	90006662 <BSP_I2C4_Init+0x63a>
9000662c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000662e:	9e12      	ldr	r6, [sp, #72]	; 0x48
90006630:	455d      	cmp	r5, fp
90006632:	bf0c      	ite	eq
90006634:	2600      	moveq	r6, #0
90006636:	f006 0601 	andne.w	r6, r6, #1
9000663a:	2e00      	cmp	r6, #0
9000663c:	f43f af0e 	beq.w	9000645c <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006640:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006644:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006648:	4650      	mov	r0, sl
9000664a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000664e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006652:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006656:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006658:	f04f 030e 	mov.w	r3, #14
9000665c:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000665e:	f67f af17 	bls.w	90006490 <BSP_I2C4_Init+0x468>
90006662:	4b56      	ldr	r3, [pc, #344]	; (900067bc <BSP_I2C4_Init+0x794>)
90006664:	900b      	str	r0, [sp, #44]	; 0x2c
90006666:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
9000666a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000666e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90006670:	f240 4201 	movw	r2, #1025	; 0x401
90006674:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006678:	f640 1ac4 	movw	sl, #2500	; 0x9c4
9000667c:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000667e:	f240 4b12 	movw	fp, #1042	; 0x412
90006682:	920d      	str	r2, [sp, #52]	; 0x34
90006684:	9a02      	ldr	r2, [sp, #8]
90006686:	4296      	cmp	r6, r2
90006688:	bf38      	it	cc
9000668a:	4616      	movcc	r6, r2
9000668c:	4a4c      	ldr	r2, [pc, #304]	; (900067c0 <BSP_I2C4_Init+0x798>)
9000668e:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006690:	2200      	movs	r2, #0
90006692:	9208      	str	r2, [sp, #32]
90006694:	f04f 32ff 	mov.w	r2, #4294967295
90006698:	4611      	mov	r1, r2
9000669a:	f103 0232 	add.w	r2, r3, #50	; 0x32
9000669e:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
900066a2:	920c      	str	r2, [sp, #48]	; 0x30
900066a4:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900066a6:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900066a8:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900066ac:	6818      	ldr	r0, [r3, #0]
900066ae:	9b02      	ldr	r3, [sp, #8]
900066b0:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900066b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900066b6:	1a1b      	subs	r3, r3, r0
900066b8:	ea4f 0943 	mov.w	r9, r3, lsl #1
900066bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900066be:	eb03 0e00 	add.w	lr, r3, r0
900066c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900066c4:	4403      	add	r3, r0
900066c6:	9309      	str	r3, [sp, #36]	; 0x24
900066c8:	e006      	b.n	900066d8 <BSP_I2C4_Init+0x6b0>
900066ca:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
900066ce:	4486      	add	lr, r0
900066d0:	eba9 0900 	sub.w	r9, r9, r0
900066d4:	f43f aede 	beq.w	90006494 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900066d8:	f240 5214 	movw	r2, #1300	; 0x514
900066dc:	f8cd 8004 	str.w	r8, [sp, #4]
900066e0:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900066e4:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900066e8:	4596      	cmp	lr, r2
900066ea:	d9ee      	bls.n	900066ca <BSP_I2C4_Init+0x6a2>
900066ec:	9a02      	ldr	r2, [sp, #8]
900066ee:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
900066f2:	d2ea      	bcs.n	900066ca <BSP_I2C4_Init+0x6a2>
900066f4:	f640 0c34 	movw	ip, #2100	; 0x834
900066f8:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900066fa:	f8cd 9018 	str.w	r9, [sp, #24]
900066fe:	2200      	movs	r2, #0
90006700:	ebac 0c03 	sub.w	ip, ip, r3
90006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
90006706:	4689      	mov	r9, r1
90006708:	4473      	add	r3, lr
9000670a:	e9cd e804 	strd	lr, r8, [sp, #16]
9000670e:	f8dd 8020 	ldr.w	r8, [sp, #32]
90006712:	f8dd e01c 	ldr.w	lr, [sp, #28]
90006716:	e005      	b.n	90006724 <BSP_I2C4_Init+0x6fc>
90006718:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
9000671c:	4403      	add	r3, r0
9000671e:	eba4 0400 	sub.w	r4, r4, r0
90006722:	d01a      	beq.n	9000675a <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006724:	eb0c 0103 	add.w	r1, ip, r3
90006728:	4617      	mov	r7, r2
9000672a:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000672e:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006730:	42b1      	cmp	r1, r6
90006732:	d9f1      	bls.n	90006718 <BSP_I2C4_Init+0x6f0>
90006734:	455d      	cmp	r5, fp
90006736:	d8ef      	bhi.n	90006718 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90006738:	ea33 0123 	bics.w	r1, r3, r3, asr #32
9000673c:	bf28      	it	cs
9000673e:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90006740:	458a      	cmp	sl, r1
90006742:	d9e9      	bls.n	90006718 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90006744:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006746:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
9000674a:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
9000674c:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000674e:	4403      	add	r3, r0
90006750:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90006754:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006758:	d1e4      	bne.n	90006724 <BSP_I2C4_Init+0x6fc>
9000675a:	4649      	mov	r1, r9
9000675c:	f8dd 9018 	ldr.w	r9, [sp, #24]
90006760:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90006764:	e7b1      	b.n	900066ca <BSP_I2C4_Init+0x6a2>
90006766:	460e      	mov	r6, r1
90006768:	e5a2      	b.n	900062b0 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000676a:	4611      	mov	r1, r2
9000676c:	e65b      	b.n	90006426 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000676e:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006772:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006776:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006778:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000677c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006780:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006784:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006786:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006788:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000678a:	f63f af6a 	bhi.w	90006662 <BSP_I2C4_Init+0x63a>
9000678e:	46ab      	mov	fp, r5
90006790:	e6b0      	b.n	900064f4 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006792:	3501      	adds	r5, #1
90006794:	9b02      	ldr	r3, [sp, #8]
90006796:	2d10      	cmp	r5, #16
90006798:	441f      	add	r7, r3
9000679a:	f47f acc7 	bne.w	9000612c <BSP_I2C4_Init+0x104>
9000679e:	b126      	cbz	r6, 900067aa <BSP_I2C4_Init+0x782>
900067a0:	4b06      	ldr	r3, [pc, #24]	; (900067bc <BSP_I2C4_Init+0x794>)
900067a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900067a6:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900067aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900067ac:	2b00      	cmp	r3, #0
900067ae:	f43f ae96 	beq.w	900064de <BSP_I2C4_Init+0x4b6>
900067b2:	4b03      	ldr	r3, [pc, #12]	; (900067c0 <BSP_I2C4_Init+0x798>)
900067b4:	930b      	str	r3, [sp, #44]	; 0x2c
900067b6:	e75a      	b.n	9000666e <BSP_I2C4_Init+0x646>
900067b8:	2400bc30 	.word	0x2400bc30
900067bc:	2400bc2c 	.word	0x2400bc2c
900067c0:	2400b22c 	.word	0x2400b22c

900067c4 <BSP_I2C4_WriteReg>:
{
900067c4:	b530      	push	{r4, r5, lr}
900067c6:	4614      	mov	r4, r2
900067c8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900067ca:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900067ce:	460a      	mov	r2, r1
900067d0:	9301      	str	r3, [sp, #4]
900067d2:	4601      	mov	r1, r0
900067d4:	2301      	movs	r3, #1
900067d6:	4809      	ldr	r0, [pc, #36]	; (900067fc <BSP_I2C4_WriteReg+0x38>)
900067d8:	9502      	str	r5, [sp, #8]
900067da:	9400      	str	r4, [sp, #0]
900067dc:	f001 ffec 	bl	900087b8 <HAL_I2C_Mem_Write>
900067e0:	b908      	cbnz	r0, 900067e6 <BSP_I2C4_WriteReg+0x22>
}
900067e2:	b005      	add	sp, #20
900067e4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900067e6:	4805      	ldr	r0, [pc, #20]	; (900067fc <BSP_I2C4_WriteReg+0x38>)
900067e8:	f002 fa88 	bl	90008cfc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
900067ec:	2804      	cmp	r0, #4
900067ee:	bf0c      	ite	eq
900067f0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900067f4:	f06f 0003 	mvnne.w	r0, #3
900067f8:	e7f3      	b.n	900067e2 <BSP_I2C4_WriteReg+0x1e>
900067fa:	bf00      	nop
900067fc:	2400bc30 	.word	0x2400bc30

90006800 <BSP_I2C4_ReadReg>:
{
90006800:	b530      	push	{r4, r5, lr}
90006802:	4614      	mov	r4, r2
90006804:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90006806:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
9000680a:	460a      	mov	r2, r1
9000680c:	9301      	str	r3, [sp, #4]
9000680e:	4601      	mov	r1, r0
90006810:	2301      	movs	r3, #1
90006812:	4809      	ldr	r0, [pc, #36]	; (90006838 <BSP_I2C4_ReadReg+0x38>)
90006814:	9502      	str	r5, [sp, #8]
90006816:	9400      	str	r4, [sp, #0]
90006818:	f002 f902 	bl	90008a20 <HAL_I2C_Mem_Read>
9000681c:	b908      	cbnz	r0, 90006822 <BSP_I2C4_ReadReg+0x22>
}
9000681e:	b005      	add	sp, #20
90006820:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006822:	4805      	ldr	r0, [pc, #20]	; (90006838 <BSP_I2C4_ReadReg+0x38>)
90006824:	f002 fa6a 	bl	90008cfc <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006828:	2804      	cmp	r0, #4
9000682a:	bf0c      	ite	eq
9000682c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006830:	f06f 0003 	mvnne.w	r0, #3
90006834:	e7f3      	b.n	9000681e <BSP_I2C4_ReadReg+0x1e>
90006836:	bf00      	nop
90006838:	2400bc30 	.word	0x2400bc30

9000683c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
9000683c:	f000 baaa 	b.w	90006d94 <HAL_GetTick>

90006840 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90006840:	b970      	cbnz	r0, 90006860 <BSP_SDRAM_DeInit+0x20>
{
90006842:	b510      	push	{r4, lr}
90006844:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90006846:	4808      	ldr	r0, [pc, #32]	; (90006868 <BSP_SDRAM_DeInit+0x28>)
90006848:	f006 fb16 	bl	9000ce78 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
9000684c:	207a      	movs	r0, #122	; 0x7a
9000684e:	f001 f99f 	bl	90007b90 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006852:	4b06      	ldr	r3, [pc, #24]	; (9000686c <BSP_SDRAM_DeInit+0x2c>)
90006854:	4806      	ldr	r0, [pc, #24]	; (90006870 <BSP_SDRAM_DeInit+0x30>)
90006856:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90006858:	f004 f822 	bl	9000a8a0 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
9000685c:	4620      	mov	r0, r4
}
9000685e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006860:	f06f 0001 	mvn.w	r0, #1
}
90006864:	4770      	bx	lr
90006866:	bf00      	nop
90006868:	2400bc84 	.word	0x2400bc84
9000686c:	52000040 	.word	0x52000040
90006870:	2400bcb8 	.word	0x2400bcb8

90006874 <MX_SDRAM_BANK2_Init>:
{
90006874:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90006876:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90006878:	2200      	movs	r2, #0
{
9000687a:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
9000687c:	4c13      	ldr	r4, [pc, #76]	; (900068cc <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000687e:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006880:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90006882:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90006884:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006886:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90006888:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
9000688a:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
9000688c:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90006890:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90006892:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006894:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90006896:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006898:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000689a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000689e:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900068a0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900068a4:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900068a6:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900068a8:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
900068ac:	2204      	movs	r2, #4
900068ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
900068b2:	2202      	movs	r2, #2
900068b4:	2302      	movs	r3, #2
900068b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
900068ba:	4b05      	ldr	r3, [pc, #20]	; (900068d0 <MX_SDRAM_BANK2_Init+0x5c>)
900068bc:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900068be:	f006 fab1 	bl	9000ce24 <HAL_SDRAM_Init>
}
900068c2:	3800      	subs	r0, #0
900068c4:	bf18      	it	ne
900068c6:	2001      	movne	r0, #1
900068c8:	b009      	add	sp, #36	; 0x24
900068ca:	bd30      	pop	{r4, r5, pc}
900068cc:	2400bc84 	.word	0x2400bc84
900068d0:	52004140 	.word	0x52004140

900068d4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
900068d4:	2800      	cmp	r0, #0
900068d6:	f040 80d2 	bne.w	90006a7e <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
900068da:	4b6c      	ldr	r3, [pc, #432]	; (90006a8c <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900068dc:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
900068de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
900068e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
900068e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
900068ec:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
900068ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900068f2:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900068f4:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900068f8:	4c65      	ldr	r4, [pc, #404]	; (90006a90 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
900068fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900068fe:	4e65      	ldr	r6, [pc, #404]	; (90006a94 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006900:	9201      	str	r2, [sp, #4]
90006902:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90006904:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006908:	f042 0201 	orr.w	r2, r2, #1
9000690c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90006910:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006914:	f002 0201 	and.w	r2, r2, #1
90006918:	9202      	str	r2, [sp, #8]
9000691a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000691c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006920:	f042 0208 	orr.w	r2, r2, #8
90006924:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006928:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000692c:	f002 0208 	and.w	r2, r2, #8
90006930:	9203      	str	r2, [sp, #12]
90006932:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90006934:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006938:	f042 0210 	orr.w	r2, r2, #16
9000693c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006940:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006944:	f002 0210 	and.w	r2, r2, #16
90006948:	9204      	str	r2, [sp, #16]
9000694a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000694c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006950:	f042 0220 	orr.w	r2, r2, #32
90006954:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000695c:	f002 0220 	and.w	r2, r2, #32
90006960:	9205      	str	r2, [sp, #20]
90006962:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90006964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000696c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006974:	f002 0240 	and.w	r2, r2, #64	; 0x40
90006978:	9206      	str	r2, [sp, #24]
9000697a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000697c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90006984:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000698c:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000698e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006994:	e9cd 0108 	strd	r0, r1, [sp, #32]
90006998:	2001      	movs	r0, #1
9000699a:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000699c:	9307      	str	r3, [sp, #28]
9000699e:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900069a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900069a4:	a908      	add	r1, sp, #32
900069a6:	483c      	ldr	r0, [pc, #240]	; (90006a98 <BSP_SDRAM_Init+0x1c4>)
900069a8:	f001 fb12 	bl	90007fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900069ac:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900069b0:	a908      	add	r1, sp, #32
900069b2:	483a      	ldr	r0, [pc, #232]	; (90006a9c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900069b4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900069b6:	f001 fb0b 	bl	90007fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900069ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900069be:	a908      	add	r1, sp, #32
900069c0:	4837      	ldr	r0, [pc, #220]	; (90006aa0 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900069c2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900069c4:	f001 fb04 	bl	90007fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900069c8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900069cc:	a908      	add	r1, sp, #32
900069ce:	4835      	ldr	r0, [pc, #212]	; (90006aa4 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900069d0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900069d2:	f001 fafd 	bl	90007fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900069d6:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900069d8:	a908      	add	r1, sp, #32
900069da:	4833      	ldr	r0, [pc, #204]	; (90006aa8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900069dc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900069de:	f001 faf7 	bl	90007fd0 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900069e2:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900069e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900069e8:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
900069ec:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900069ee:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
900069f0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900069f2:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900069f8:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900069fa:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900069fc:	4a2b      	ldr	r2, [pc, #172]	; (90006aac <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900069fe:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006a00:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006a02:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006a04:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90006a08:	f640 0308 	movw	r3, #2056	; 0x808
90006a0c:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90006a0e:	2320      	movs	r3, #32
90006a10:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90006a16:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006a1a:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90006a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006a20:	f003 ff3e 	bl	9000a8a0 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90006a24:	4620      	mov	r0, r4
90006a26:	f003 fec1 	bl	9000a7ac <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90006a2a:	462a      	mov	r2, r5
90006a2c:	210f      	movs	r1, #15
90006a2e:	207a      	movs	r0, #122	; 0x7a
90006a30:	f001 f862 	bl	90007af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90006a34:	207a      	movs	r0, #122	; 0x7a
90006a36:	f001 f89d 	bl	90007b74 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90006a3a:	2210      	movs	r2, #16
90006a3c:	2104      	movs	r1, #4
90006a3e:	4630      	mov	r0, r6
90006a40:	f7ff ff18 	bl	90006874 <MX_SDRAM_BANK2_Init>
90006a44:	b9f0      	cbnz	r0, 90006a84 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006a46:	491a      	ldr	r1, [pc, #104]	; (90006ab0 <BSP_SDRAM_Init+0x1dc>)
90006a48:	2208      	movs	r2, #8
90006a4a:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006a4c:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006a4e:	e9c1 2300 	strd	r2, r3, [r1]
90006a52:	f240 6203 	movw	r2, #1539	; 0x603
90006a56:	2300      	movs	r3, #0
90006a58:	e9c1 2302 	strd	r2, r3, [r1, #8]
90006a5c:	2200      	movs	r2, #0
90006a5e:	2330      	movs	r3, #48	; 0x30
90006a60:	e9c1 2304 	strd	r2, r3, [r1, #16]
90006a64:	2200      	movs	r2, #0
90006a66:	f44f 7300 	mov.w	r3, #512	; 0x200
90006a6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006a6e:	f7ff fa37 	bl	90005ee0 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90006a72:	2800      	cmp	r0, #0
90006a74:	bf18      	it	ne
90006a76:	f06f 0004 	mvnne.w	r0, #4
}
90006a7a:	b00e      	add	sp, #56	; 0x38
90006a7c:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006a7e:	f06f 0001 	mvn.w	r0, #1
}
90006a82:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90006a84:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90006a88:	e7f7      	b.n	90006a7a <BSP_SDRAM_Init+0x1a6>
90006a8a:	bf00      	nop
90006a8c:	58024400 	.word	0x58024400
90006a90:	2400bd24 	.word	0x2400bd24
90006a94:	2400bc84 	.word	0x2400bc84
90006a98:	58020c00 	.word	0x58020c00
90006a9c:	58021000 	.word	0x58021000
90006aa0:	58021400 	.word	0x58021400
90006aa4:	58021800 	.word	0x58021800
90006aa8:	58021c00 	.word	0x58021c00
90006aac:	52000040 	.word	0x52000040
90006ab0:	2400bd90 	.word	0x2400bd90

90006ab4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006ab8:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006aba:	2800      	cmp	r0, #0
90006abc:	d16b      	bne.n	90006b96 <BSP_TS_Init+0xe2>
90006abe:	680b      	ldr	r3, [r1, #0]
90006ac0:	460c      	mov	r4, r1
90006ac2:	1e5a      	subs	r2, r3, #1
90006ac4:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006ac8:	d265      	bcs.n	90006b96 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006aca:	684a      	ldr	r2, [r1, #4]
90006acc:	1e51      	subs	r1, r2, #1
90006ace:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90006ad2:	d260      	bcs.n	90006b96 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90006ad4:	4293      	cmp	r3, r2
90006ad6:	bf28      	it	cs
90006ad8:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006ada:	68e2      	ldr	r2, [r4, #12]
90006adc:	429a      	cmp	r2, r3
90006ade:	d85a      	bhi.n	90006b96 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ae0:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90006ae2:	4b31      	ldr	r3, [pc, #196]	; (90006ba8 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ae4:	4d31      	ldr	r5, [pc, #196]	; (90006bac <BSP_TS_Init+0xf8>)
90006ae6:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ae8:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006aec:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006aee:	4a30      	ldr	r2, [pc, #192]	; (90006bb0 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006af0:	4b30      	ldr	r3, [pc, #192]	; (90006bb4 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006af2:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006af4:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006af6:	4a30      	ldr	r2, [pc, #192]	; (90006bb8 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006af8:	4b30      	ldr	r3, [pc, #192]	; (90006bbc <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006afa:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006afc:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006afe:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006b00:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006b02:	f7ff f93f 	bl	90005d84 <FT5336_RegisterBusIO>
90006b06:	2800      	cmp	r0, #0
90006b08:	d14b      	bne.n	90006ba2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006b0a:	a901      	add	r1, sp, #4
90006b0c:	4628      	mov	r0, r5
90006b0e:	f7ff f82f 	bl	90005b70 <FT5336_ReadID>
90006b12:	2800      	cmp	r0, #0
90006b14:	d145      	bne.n	90006ba2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90006b16:	9b01      	ldr	r3, [sp, #4]
90006b18:	2b51      	cmp	r3, #81	; 0x51
90006b1a:	d142      	bne.n	90006ba2 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b1c:	4b28      	ldr	r3, [pc, #160]	; (90006bc0 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006b1e:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006b20:	4f28      	ldr	r7, [pc, #160]	; (90006bc4 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b22:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006bcc <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90006b26:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006b28:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006b2c:	681b      	ldr	r3, [r3, #0]
90006b2e:	4798      	blx	r3
90006b30:	4606      	mov	r6, r0
90006b32:	2800      	cmp	r0, #0
90006b34:	d135      	bne.n	90006ba2 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b36:	4d24      	ldr	r5, [pc, #144]	; (90006bc8 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b38:	a902      	add	r1, sp, #8
90006b3a:	6838      	ldr	r0, [r7, #0]
90006b3c:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b40:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b44:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006b46:	e9c5 7200 	strd	r7, r2, [r5]
90006b4a:	68a2      	ldr	r2, [r4, #8]
90006b4c:	60aa      	str	r2, [r5, #8]
90006b4e:	68e2      	ldr	r2, [r4, #12]
90006b50:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006b52:	4798      	blx	r3
90006b54:	2800      	cmp	r0, #0
90006b56:	db18      	blt.n	90006b8a <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90006b58:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90006b5c:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b60:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b62:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b66:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b68:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b6a:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b6c:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b6e:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b72:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b76:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b78:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b7a:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b7c:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006b7e:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006b80:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90006b82:	4630      	mov	r0, r6
90006b84:	b008      	add	sp, #32
90006b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006b8a:	f06f 0604 	mvn.w	r6, #4
}
90006b8e:	4630      	mov	r0, r6
90006b90:	b008      	add	sp, #32
90006b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006b96:	f06f 0601 	mvn.w	r6, #1
}
90006b9a:	4630      	mov	r0, r6
90006b9c:	b008      	add	sp, #32
90006b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006ba2:	f04f 36ff 	mov.w	r6, #4294967295
90006ba6:	e7ec      	b.n	90006b82 <BSP_TS_Init+0xce>
90006ba8:	90006029 	.word	0x90006029
90006bac:	2400bdb0 	.word	0x2400bdb0
90006bb0:	90005f95 	.word	0x90005f95
90006bb4:	90006801 	.word	0x90006801
90006bb8:	900067c5 	.word	0x900067c5
90006bbc:	9000683d 	.word	0x9000683d
90006bc0:	24000024 	.word	0x24000024
90006bc4:	2400bdd8 	.word	0x2400bdd8
90006bc8:	2400bddc 	.word	0x2400bddc
90006bcc:	2400be1c 	.word	0x2400be1c

90006bd0 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006bd0:	2800      	cmp	r0, #0
90006bd2:	d157      	bne.n	90006c84 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006bd4:	4b2d      	ldr	r3, [pc, #180]	; (90006c8c <BSP_TS_GetState+0xbc>)
90006bd6:	4a2e      	ldr	r2, [pc, #184]	; (90006c90 <BSP_TS_GetState+0xc0>)
90006bd8:	681b      	ldr	r3, [r3, #0]
90006bda:	6810      	ldr	r0, [r2, #0]
90006bdc:	691b      	ldr	r3, [r3, #16]
{
90006bde:	b5f0      	push	{r4, r5, r6, r7, lr}
90006be0:	b085      	sub	sp, #20
90006be2:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006be4:	a901      	add	r1, sp, #4
90006be6:	4798      	blx	r3
90006be8:	2800      	cmp	r0, #0
90006bea:	db41      	blt.n	90006c70 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90006bec:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006bee:	4b29      	ldr	r3, [pc, #164]	; (90006c94 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90006bf0:	b93d      	cbnz	r5, 90006c02 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90006bf2:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90006bf4:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006bf8:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006bfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006bfe:	b005      	add	sp, #20
90006c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006c02:	6898      	ldr	r0, [r3, #8]
90006c04:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90006c06:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006c0a:	d435      	bmi.n	90006c78 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006c0c:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
90006c0e:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006c10:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006c12:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006c16:	bf1c      	itt	ne
90006c18:	f106 32ff 	addne.w	r2, r6, #4294967295
90006c1c:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006c20:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006c24:	6958      	ldr	r0, [r3, #20]
90006c26:	bf18      	it	ne
90006c28:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006c2a:	681f      	ldr	r7, [r3, #0]
90006c2c:	fb07 f202 	mul.w	r2, r7, r2
90006c30:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c34:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
90006c36:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c38:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006c3c:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006c3e:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006c40:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006c42:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c44:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006c48:	bf8c      	ite	hi
90006c4a:	1b90      	subhi	r0, r2, r6
90006c4c:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006c4e:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006c50:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006c52:	bf8c      	ite	hi
90006c54:	1b4f      	subhi	r7, r1, r5
90006c56:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c58:	42b8      	cmp	r0, r7
90006c5a:	bf38      	it	cc
90006c5c:	4638      	movcc	r0, r7
90006c5e:	68df      	ldr	r7, [r3, #12]
90006c60:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90006c62:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006c66:	d20a      	bcs.n	90006c7e <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90006c68:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90006c6a:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90006c6c:	b005      	add	sp, #20
90006c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90006c70:	f06f 0004 	mvn.w	r0, #4
}
90006c74:	b005      	add	sp, #20
90006c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90006c78:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
90006c7a:	463a      	mov	r2, r7
90006c7c:	e7c8      	b.n	90006c10 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006c7e:	e9c4 6501 	strd	r6, r5, [r4, #4]
90006c82:	e7bc      	b.n	90006bfe <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90006c84:	f06f 0001 	mvn.w	r0, #1
}
90006c88:	4770      	bx	lr
90006c8a:	bf00      	nop
90006c8c:	2400be1c 	.word	0x2400be1c
90006c90:	2400bdd8 	.word	0x2400bdd8
90006c94:	2400bddc 	.word	0x2400bddc

90006c98 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90006c98:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006c9a:	4c19      	ldr	r4, [pc, #100]	; (90006d00 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90006c9c:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90006c9e:	4b19      	ldr	r3, [pc, #100]	; (90006d04 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006ca0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90006ca4:	4818      	ldr	r0, [pc, #96]	; (90006d08 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006ca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90006caa:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90006cae:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006cb0:	4c16      	ldr	r4, [pc, #88]	; (90006d0c <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90006cb2:	f041 0101 	orr.w	r1, r1, #1
90006cb6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90006cb8:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90006cba:	6819      	ldr	r1, [r3, #0]
90006cbc:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006cbe:	4914      	ldr	r1, [pc, #80]	; (90006d10 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90006cc0:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90006cc2:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90006cc4:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
90006cc6:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
90006cc8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
90006cca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90006ccc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90006cce:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90006cd0:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90006cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90006cd4:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90006cd6:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90006cd8:	6818      	ldr	r0, [r3, #0]
90006cda:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006cde:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006ce0:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006ce2:	6823      	ldr	r3, [r4, #0]
90006ce4:	4019      	ands	r1, r3
90006ce6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90006cea:	d203      	bcs.n	90006cf4 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006cec:	4b09      	ldr	r3, [pc, #36]	; (90006d14 <SystemInit+0x7c>)
90006cee:	2201      	movs	r2, #1
90006cf0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006cf4:	4a08      	ldr	r2, [pc, #32]	; (90006d18 <SystemInit+0x80>)
90006cf6:	4b02      	ldr	r3, [pc, #8]	; (90006d00 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90006cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006cfc:	609a      	str	r2, [r3, #8]
}
90006cfe:	4770      	bx	lr
90006d00:	e000ed00 	.word	0xe000ed00
90006d04:	58024400 	.word	0x58024400
90006d08:	eaf6ed7f 	.word	0xeaf6ed7f
90006d0c:	5c001000 	.word	0x5c001000
90006d10:	ffff0000 	.word	0xffff0000
90006d14:	51008000 	.word	0x51008000
90006d18:	90000000 	.word	0x90000000

90006d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006d1c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006d1e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d20:	4c12      	ldr	r4, [pc, #72]	; (90006d6c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006d22:	f000 fed7 	bl	90007ad4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d26:	f004 faf9 	bl	9000b31c <HAL_RCC_GetSysClockFreq>
90006d2a:	4b11      	ldr	r3, [pc, #68]	; (90006d70 <HAL_Init+0x54>)
90006d2c:	4911      	ldr	r1, [pc, #68]	; (90006d74 <HAL_Init+0x58>)
90006d2e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d30:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d32:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d36:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d3a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d3c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d3e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90006d42:	490d      	ldr	r1, [pc, #52]	; (90006d78 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d44:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006d48:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d4a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90006d4e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d50:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006d52:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006d54:	f7fd ff16 	bl	90004b84 <HAL_InitTick>
90006d58:	b110      	cbz	r0, 90006d60 <HAL_Init+0x44>
  {
    return HAL_ERROR;
90006d5a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90006d5c:	4620      	mov	r0, r4
90006d5e:	bd10      	pop	{r4, pc}
90006d60:	4604      	mov	r4, r0
  HAL_MspInit();
90006d62:	f7fd fc6f 	bl	90004644 <HAL_MspInit>
}
90006d66:	4620      	mov	r0, r4
90006d68:	bd10      	pop	{r4, pc}
90006d6a:	bf00      	nop
90006d6c:	24000058 	.word	0x24000058
90006d70:	58024400 	.word	0x58024400
90006d74:	90026580 	.word	0x90026580
90006d78:	24000054 	.word	0x24000054

90006d7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90006d7c:	4a03      	ldr	r2, [pc, #12]	; (90006d8c <HAL_IncTick+0x10>)
90006d7e:	4b04      	ldr	r3, [pc, #16]	; (90006d90 <HAL_IncTick+0x14>)
90006d80:	6811      	ldr	r1, [r2, #0]
90006d82:	781b      	ldrb	r3, [r3, #0]
90006d84:	440b      	add	r3, r1
90006d86:	6013      	str	r3, [r2, #0]
}
90006d88:	4770      	bx	lr
90006d8a:	bf00      	nop
90006d8c:	2400be20 	.word	0x2400be20
90006d90:	2400005c 	.word	0x2400005c

90006d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90006d94:	4b01      	ldr	r3, [pc, #4]	; (90006d9c <HAL_GetTick+0x8>)
90006d96:	6818      	ldr	r0, [r3, #0]
}
90006d98:	4770      	bx	lr
90006d9a:	bf00      	nop
90006d9c:	2400be20 	.word	0x2400be20

90006da0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90006da0:	4b01      	ldr	r3, [pc, #4]	; (90006da8 <HAL_GetREVID+0x8>)
90006da2:	6818      	ldr	r0, [r3, #0]
}
90006da4:	0c00      	lsrs	r0, r0, #16
90006da6:	4770      	bx	lr
90006da8:	5c001000 	.word	0x5c001000

90006dac <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006dac:	4b3e      	ldr	r3, [pc, #248]	; (90006ea8 <HAL_ADC_PollForConversion+0xfc>)
90006dae:	6802      	ldr	r2, [r0, #0]
90006db0:	429a      	cmp	r2, r3
{
90006db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006db6:	4605      	mov	r5, r0
90006db8:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006dba:	d059      	beq.n	90006e70 <HAL_ADC_PollForConversion+0xc4>
90006dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
90006dc0:	429a      	cmp	r2, r3
90006dc2:	d055      	beq.n	90006e70 <HAL_ADC_PollForConversion+0xc4>
90006dc4:	4939      	ldr	r1, [pc, #228]	; (90006eac <HAL_ADC_PollForConversion+0x100>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
90006dc6:	692c      	ldr	r4, [r5, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
90006dc8:	688f      	ldr	r7, [r1, #8]
90006dca:	2c08      	cmp	r4, #8
90006dcc:	f007 071f 	and.w	r7, r7, #31
90006dd0:	d009      	beq.n	90006de6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90006dd2:	f240 2321 	movw	r3, #545	; 0x221
90006dd6:	40fb      	lsrs	r3, r7
90006dd8:	07d8      	lsls	r0, r3, #31
90006dda:	d458      	bmi.n	90006e8e <HAL_ADC_PollForConversion+0xe2>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
90006ddc:	688b      	ldr	r3, [r1, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
90006dde:	f413 4f40 	tst.w	r3, #49152	; 0xc000
90006de2:	d157      	bne.n	90006e94 <HAL_ADC_PollForConversion+0xe8>
        tmp_Flag_End = (ADC_FLAG_EOC);
90006de4:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
90006de6:	f7ff ffd5 	bl	90006d94 <HAL_GetTick>
90006dea:	682a      	ldr	r2, [r5, #0]
90006dec:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006dee:	1c73      	adds	r3, r6, #1
90006df0:	d127      	bne.n	90006e42 <HAL_ADC_PollForConversion+0x96>
90006df2:	6813      	ldr	r3, [r2, #0]
90006df4:	4223      	tst	r3, r4
90006df6:	d0fc      	beq.n	90006df2 <HAL_ADC_PollForConversion+0x46>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
90006df8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90006dfe:	656b      	str	r3, [r5, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
90006e00:	68d3      	ldr	r3, [r2, #12]
90006e02:	f413 6f40 	tst.w	r3, #3072	; 0xc00
90006e06:	d10f      	bne.n	90006e28 <HAL_ADC_PollForConversion+0x7c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
90006e08:	7d6b      	ldrb	r3, [r5, #21]
90006e0a:	b96b      	cbnz	r3, 90006e28 <HAL_ADC_PollForConversion+0x7c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
90006e0c:	6813      	ldr	r3, [r2, #0]
90006e0e:	0718      	lsls	r0, r3, #28
90006e10:	d50a      	bpl.n	90006e28 <HAL_ADC_PollForConversion+0x7c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
90006e12:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006e18:	656b      	str	r3, [r5, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
90006e1a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006e1c:	04d9      	lsls	r1, r3, #19
90006e1e:	d403      	bmi.n	90006e28 <HAL_ADC_PollForConversion+0x7c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
90006e20:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006e22:	f043 0301 	orr.w	r3, r3, #1
90006e26:	656b      	str	r3, [r5, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90006e28:	4b21      	ldr	r3, [pc, #132]	; (90006eb0 <HAL_ADC_PollForConversion+0x104>)
90006e2a:	429a      	cmp	r2, r3
90006e2c:	d022      	beq.n	90006e74 <HAL_ADC_PollForConversion+0xc8>
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e2e:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
90006e30:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e32:	d028      	beq.n	90006e86 <HAL_ADC_PollForConversion+0xda>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
90006e34:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
90006e38:	d133      	bne.n	90006ea2 <HAL_ADC_PollForConversion+0xf6>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
90006e3a:	230c      	movs	r3, #12
90006e3c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
90006e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006e42:	6813      	ldr	r3, [r2, #0]
90006e44:	4223      	tst	r3, r4
90006e46:	d1d7      	bne.n	90006df8 <HAL_ADC_PollForConversion+0x4c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
90006e48:	f7ff ffa4 	bl	90006d94 <HAL_GetTick>
90006e4c:	eba0 0008 	sub.w	r0, r0, r8
90006e50:	682a      	ldr	r2, [r5, #0]
90006e52:	42b0      	cmp	r0, r6
90006e54:	d801      	bhi.n	90006e5a <HAL_ADC_PollForConversion+0xae>
90006e56:	2e00      	cmp	r6, #0
90006e58:	d1c9      	bne.n	90006dee <HAL_ADC_PollForConversion+0x42>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006e5a:	6813      	ldr	r3, [r2, #0]
90006e5c:	4023      	ands	r3, r4
90006e5e:	d1c6      	bne.n	90006dee <HAL_ADC_PollForConversion+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006e60:	6d6a      	ldr	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006e62:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
90006e64:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006e68:	f042 0204 	orr.w	r2, r2, #4
90006e6c:	656a      	str	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006e6e:	e7e6      	b.n	90006e3e <HAL_ADC_PollForConversion+0x92>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006e70:	4910      	ldr	r1, [pc, #64]	; (90006eb4 <HAL_ADC_PollForConversion+0x108>)
90006e72:	e7a8      	b.n	90006dc6 <HAL_ADC_PollForConversion+0x1a>
90006e74:	f240 2321 	movw	r3, #545	; 0x221
90006e78:	40fb      	lsrs	r3, r7
90006e7a:	07db      	lsls	r3, r3, #31
90006e7c:	d4d7      	bmi.n	90006e2e <HAL_ADC_PollForConversion+0x82>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
90006e7e:	4b0a      	ldr	r3, [pc, #40]	; (90006ea8 <HAL_ADC_PollForConversion+0xfc>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e80:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
90006e82:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006e84:	d1d6      	bne.n	90006e34 <HAL_ADC_PollForConversion+0x88>
  return HAL_OK;
90006e86:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
90006e88:	6014      	str	r4, [r2, #0]
}
90006e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
90006e8e:	68d3      	ldr	r3, [r2, #12]
90006e90:	07da      	lsls	r2, r3, #31
90006e92:	d5a7      	bpl.n	90006de4 <HAL_ADC_PollForConversion+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006e94:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
90006e96:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006e98:	f043 0320 	orr.w	r3, r3, #32
90006e9c:	656b      	str	r3, [r5, #84]	; 0x54
}
90006e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
90006ea2:	2000      	movs	r0, #0
}
90006ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90006ea8:	40022000 	.word	0x40022000
90006eac:	58026300 	.word	0x58026300
90006eb0:	40022100 	.word	0x40022100
90006eb4:	40022300 	.word	0x40022300

90006eb8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
90006eb8:	6803      	ldr	r3, [r0, #0]
90006eba:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
90006ebc:	4770      	bx	lr
90006ebe:	bf00      	nop

90006ec0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
90006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
90006ec2:	2200      	movs	r2, #0
{
90006ec4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
90006ec6:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
90006ec8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
90006ecc:	2a01      	cmp	r2, #1
90006ece:	f000 8136 	beq.w	9000713e <HAL_ADC_ConfigChannel+0x27e>
90006ed2:	4603      	mov	r3, r0
90006ed4:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
90006ed6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
90006ed8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006edc:	6894      	ldr	r4, [r2, #8]
90006ede:	0766      	lsls	r6, r4, #29
90006ee0:	f100 809a 	bmi.w	90007018 <HAL_ADC_ConfigChannel+0x158>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006ee4:	680c      	ldr	r4, [r1, #0]
90006ee6:	f3c4 0513 	ubfx	r5, r4, #0, #20
90006eea:	2d00      	cmp	r5, #0
90006eec:	f040 809d 	bne.w	9000702a <HAL_ADC_ConfigChannel+0x16a>
90006ef0:	f3c4 6484 	ubfx	r4, r4, #26, #5
90006ef4:	40a0      	lsls	r0, r4
90006ef6:	69d6      	ldr	r6, [r2, #28]
  MODIFY_REG(*preg,
90006ef8:	f04f 0e1f 	mov.w	lr, #31
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
90006efc:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006efe:	4330      	orrs	r0, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006f00:	ea4f 1c95 	mov.w	ip, r5, lsr #6
90006f04:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
90006f06:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006f0a:	f00c 050c 	and.w	r5, ip, #12
90006f0e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
  MODIFY_REG(*preg,
90006f12:	4084      	lsls	r4, r0
90006f14:	fa0e fe00 	lsl.w	lr, lr, r0
90006f18:	f85c 0005 	ldr.w	r0, [ip, r5]
90006f1c:	ea20 000e 	bic.w	r0, r0, lr
90006f20:	4320      	orrs	r0, r4
90006f22:	f84c 0005 	str.w	r0, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006f26:	6890      	ldr	r0, [r2, #8]
90006f28:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006f2c:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006f2e:	d159      	bne.n	90006fe4 <HAL_ADC_ConfigChannel+0x124>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006f30:	0705      	lsls	r5, r0, #28
90006f32:	d457      	bmi.n	90006fe4 <HAL_ADC_ConfigChannel+0x124>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
90006f34:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006f36:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
90006f3a:	f04f 0c07 	mov.w	ip, #7
90006f3e:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006f40:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
90006f42:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006f46:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
90006f4a:	fa0c fc04 	lsl.w	ip, ip, r4
90006f4e:	fa07 f404 	lsl.w	r4, r7, r4
90006f52:	5970      	ldr	r0, [r6, r5]
90006f54:	ea20 000c 	bic.w	r0, r0, ip
90006f58:	4320      	orrs	r0, r4
90006f5a:	5170      	str	r0, [r6, r5]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90006f5c:	48bd      	ldr	r0, [pc, #756]	; (90007254 <HAL_ADC_ConfigChannel+0x394>)
90006f5e:	6800      	ldr	r0, [r0, #0]
90006f60:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
90006f64:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
90006f68:	68d0      	ldr	r0, [r2, #12]
90006f6a:	f000 80e2 	beq.w	90007132 <HAL_ADC_ConfigChannel+0x272>
90006f6e:	f010 0f10 	tst.w	r0, #16
90006f72:	694d      	ldr	r5, [r1, #20]
90006f74:	68d0      	ldr	r0, [r2, #12]
90006f76:	f040 8102 	bne.w	9000717e <HAL_ADC_ConfigChannel+0x2be>
90006f7a:	f3c0 0082 	ubfx	r0, r0, #2, #3
90006f7e:	0040      	lsls	r0, r0, #1
90006f80:	4085      	lsls	r5, r0
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
90006f82:	690e      	ldr	r6, [r1, #16]
90006f84:	2e04      	cmp	r6, #4
90006f86:	f000 80dd 	beq.w	90007144 <HAL_ADC_ConfigChannel+0x284>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
90006f8a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
90006f8e:	6808      	ldr	r0, [r1, #0]
90006f90:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
90006f94:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006f98:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
90006f9c:	ea40 000c 	orr.w	r0, r0, ip
90006fa0:	4328      	orrs	r0, r5
90006fa2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
90006fa6:	7e4d      	ldrb	r5, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
90006fa8:	690e      	ldr	r6, [r1, #16]
90006faa:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
90006fae:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
90006fb2:	fab5 f585 	clz	r5, r5
90006fb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90006fba:	096d      	lsrs	r5, r5, #5
90006fbc:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
90006fc0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
90006fc4:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
90006fc6:	690d      	ldr	r5, [r1, #16]
90006fc8:	f1a0 0001 	sub.w	r0, r0, #1
90006fcc:	6914      	ldr	r4, [r2, #16]
90006fce:	f005 051f 	and.w	r5, r5, #31
90006fd2:	fab0 f080 	clz	r0, r0
90006fd6:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
90006fda:	0940      	lsrs	r0, r0, #5
90006fdc:	02c0      	lsls	r0, r0, #11
90006fde:	40a8      	lsls	r0, r5
90006fe0:	4320      	orrs	r0, r4
90006fe2:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90006fe4:	6890      	ldr	r0, [r2, #8]
90006fe6:	07c4      	lsls	r4, r0, #31
90006fe8:	d414      	bmi.n	90007014 <HAL_ADC_ConfigChannel+0x154>
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
90006fea:	68ce      	ldr	r6, [r1, #12]
90006fec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
90006fee:	f006 0718 	and.w	r7, r6, #24
90006ff2:	4899      	ldr	r0, [pc, #612]	; (90007258 <HAL_ADC_ConfigChannel+0x398>)
90006ff4:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
90006ff8:	40f8      	lsrs	r0, r7
90006ffa:	f3c4 0713 	ubfx	r7, r4, #0, #20
90006ffe:	4020      	ands	r0, r4
90007000:	ea25 0507 	bic.w	r5, r5, r7
90007004:	4328      	orrs	r0, r5
90007006:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
9000700a:	4894      	ldr	r0, [pc, #592]	; (9000725c <HAL_ADC_ConfigChannel+0x39c>)
9000700c:	4286      	cmp	r6, r0
9000700e:	d043      	beq.n	90007098 <HAL_ADC_ConfigChannel+0x1d8>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
90007010:	2c00      	cmp	r4, #0
90007012:	db13      	blt.n	9000703c <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007014:	2000      	movs	r0, #0
90007016:	e003      	b.n	90007020 <HAL_ADC_ConfigChannel+0x160>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000701a:	f042 0220 	orr.w	r2, r2, #32
9000701e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
90007020:	2200      	movs	r2, #0
90007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
90007026:	b003      	add	sp, #12
90007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000702a:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
9000702e:	b115      	cbz	r5, 90007036 <HAL_ADC_ConfigChannel+0x176>
  {
    return 32U;
  }
  return __builtin_clz(value);
90007030:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90007034:	40a8      	lsls	r0, r5
90007036:	f3c4 6484 	ubfx	r4, r4, #26, #5
9000703a:	e75c      	b.n	90006ef6 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
9000703c:	4988      	ldr	r1, [pc, #544]	; (90007260 <HAL_ADC_ConfigChannel+0x3a0>)
9000703e:	428a      	cmp	r2, r1
90007040:	f000 80c1 	beq.w	900071c6 <HAL_ADC_ConfigChannel+0x306>
90007044:	f501 7180 	add.w	r1, r1, #256	; 0x100
90007048:	428a      	cmp	r2, r1
9000704a:	f000 80bc 	beq.w	900071c6 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
9000704e:	4d85      	ldr	r5, [pc, #532]	; (90007264 <HAL_ADC_ConfigChannel+0x3a4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007050:	4885      	ldr	r0, [pc, #532]	; (90007268 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007052:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007054:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007056:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000705a:	43c0      	mvns	r0, r0
9000705c:	f000 0001 	and.w	r0, r0, #1
90007060:	2800      	cmp	r0, #0
90007062:	f000 80bf 	beq.w	900071e4 <HAL_ADC_ConfigChannel+0x324>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
90007066:	4881      	ldr	r0, [pc, #516]	; (9000726c <HAL_ADC_ConfigChannel+0x3ac>)
90007068:	4284      	cmp	r4, r0
9000706a:	f000 8107 	beq.w	9000727c <HAL_ADC_ConfigChannel+0x3bc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
9000706e:	4880      	ldr	r0, [pc, #512]	; (90007270 <HAL_ADC_ConfigChannel+0x3b0>)
90007070:	4284      	cmp	r4, r0
90007072:	f000 8126 	beq.w	900072c2 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
90007076:	487f      	ldr	r0, [pc, #508]	; (90007274 <HAL_ADC_ConfigChannel+0x3b4>)
90007078:	4284      	cmp	r4, r0
9000707a:	d1cb      	bne.n	90007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_VREFINT_INSTANCE(hadc))
9000707c:	0249      	lsls	r1, r1, #9
9000707e:	d4c9      	bmi.n	90007014 <HAL_ADC_ConfigChannel+0x154>
90007080:	4979      	ldr	r1, [pc, #484]	; (90007268 <HAL_ADC_ConfigChannel+0x3a8>)
90007082:	428a      	cmp	r2, r1
90007084:	d1c6      	bne.n	90007014 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90007086:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007088:	2000      	movs	r0, #0
9000708a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
9000708e:	4332      	orrs	r2, r6
90007090:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90007094:	60aa      	str	r2, [r5, #8]
}
90007096:	e7c3      	b.n	90007020 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007098:	2f00      	cmp	r7, #0
9000709a:	d075      	beq.n	90007188 <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000709c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
900070a0:	2800      	cmp	r0, #0
900070a2:	f000 80b3 	beq.w	9000720c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
900070a6:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
900070aa:	3001      	adds	r0, #1
900070ac:	f000 001f 	and.w	r0, r0, #31
900070b0:	2809      	cmp	r0, #9
900070b2:	f240 80ab 	bls.w	9000720c <HAL_ADC_ConfigChannel+0x34c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070b6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
900070ba:	2d00      	cmp	r5, #0
900070bc:	f000 8115 	beq.w	900072ea <HAL_ADC_ConfigChannel+0x42a>
  return __builtin_clz(value);
900070c0:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
900070c4:	3501      	adds	r5, #1
900070c6:	06ad      	lsls	r5, r5, #26
900070c8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070cc:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
900070d0:	2800      	cmp	r0, #0
900070d2:	f000 8108 	beq.w	900072e6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
900070d6:	fab0 f080 	clz	r0, r0
900070da:	2601      	movs	r6, #1
900070dc:	3001      	adds	r0, #1
900070de:	f000 001f 	and.w	r0, r0, #31
900070e2:	fa06 f000 	lsl.w	r0, r6, r0
900070e6:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070e8:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
900070ec:	2c00      	cmp	r4, #0
900070ee:	f000 80f8 	beq.w	900072e2 <HAL_ADC_ConfigChannel+0x422>
  return __builtin_clz(value);
900070f2:	fab4 f484 	clz	r4, r4
900070f6:	2003      	movs	r0, #3
900070f8:	f06f 061d 	mvn.w	r6, #29
900070fc:	3401      	adds	r4, #1
900070fe:	f004 041f 	and.w	r4, r4, #31
90007102:	fb10 6004 	smlabb	r0, r0, r4, r6
90007106:	0500      	lsls	r0, r0, #20
90007108:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
9000710c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
9000710e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
90007112:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90007114:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
90007116:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
9000711a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
9000711e:	4087      	lsls	r7, r0
90007120:	5974      	ldr	r4, [r6, r5]
90007122:	ea24 0407 	bic.w	r4, r4, r7
90007126:	688f      	ldr	r7, [r1, #8]
90007128:	4087      	lsls	r7, r0
9000712a:	433c      	orrs	r4, r7
9000712c:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
9000712e:	680c      	ldr	r4, [r1, #0]
}
90007130:	e76e      	b.n	90007010 <HAL_ADC_ConfigChannel+0x150>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90007132:	f3c0 0082 	ubfx	r0, r0, #2, #3
90007136:	694d      	ldr	r5, [r1, #20]
90007138:	0040      	lsls	r0, r0, #1
9000713a:	4085      	lsls	r5, r0
9000713c:	e721      	b.n	90006f82 <HAL_ADC_ConfigChannel+0xc2>
  __HAL_LOCK(hadc);
9000713e:	2002      	movs	r0, #2
}
90007140:	b003      	add	sp, #12
90007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90007144:	6e10      	ldr	r0, [r2, #96]	; 0x60
90007146:	680c      	ldr	r4, [r1, #0]
90007148:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
9000714c:	06a5      	lsls	r5, r4, #26
9000714e:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
90007152:	d02e      	beq.n	900071b2 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90007154:	6e50      	ldr	r0, [r2, #100]	; 0x64
90007156:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
9000715a:	4285      	cmp	r5, r0
9000715c:	d024      	beq.n	900071a8 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
9000715e:	6e90      	ldr	r0, [r2, #104]	; 0x68
90007160:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90007164:	4285      	cmp	r5, r0
90007166:	d029      	beq.n	900071bc <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90007168:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
9000716a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
9000716e:	4285      	cmp	r5, r0
90007170:	f47f af38 	bne.w	90006fe4 <HAL_ADC_ConfigChannel+0x124>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
90007174:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
90007176:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000717a:	66d0      	str	r0, [r2, #108]	; 0x6c
9000717c:	e732      	b.n	90006fe4 <HAL_ADC_ConfigChannel+0x124>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
9000717e:	0840      	lsrs	r0, r0, #1
90007180:	f000 0008 	and.w	r0, r0, #8
90007184:	4085      	lsls	r5, r0
90007186:	e6fc      	b.n	90006f82 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007188:	0ea0      	lsrs	r0, r4, #26
9000718a:	3001      	adds	r0, #1
9000718c:	f000 041f 	and.w	r4, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90007190:	2c09      	cmp	r4, #9
90007192:	d82d      	bhi.n	900071f0 <HAL_ADC_ConfigChannel+0x330>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007194:	0685      	lsls	r5, r0, #26
90007196:	2001      	movs	r0, #1
90007198:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
9000719c:	40a0      	lsls	r0, r4
9000719e:	4305      	orrs	r5, r0
900071a0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
900071a4:	0500      	lsls	r0, r0, #20
900071a6:	e7b1      	b.n	9000710c <HAL_ADC_ConfigChannel+0x24c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
900071a8:	6e50      	ldr	r0, [r2, #100]	; 0x64
900071aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
900071ae:	6650      	str	r0, [r2, #100]	; 0x64
900071b0:	e7d5      	b.n	9000715e <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
900071b2:	6e10      	ldr	r0, [r2, #96]	; 0x60
900071b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
900071b8:	6610      	str	r0, [r2, #96]	; 0x60
900071ba:	e7cb      	b.n	90007154 <HAL_ADC_ConfigChannel+0x294>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
900071bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
900071be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
900071c2:	6690      	str	r0, [r2, #104]	; 0x68
900071c4:	e7d0      	b.n	90007168 <HAL_ADC_ConfigChannel+0x2a8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900071c6:	4826      	ldr	r0, [pc, #152]	; (90007260 <HAL_ADC_ConfigChannel+0x3a0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
900071c8:	4d2b      	ldr	r5, [pc, #172]	; (90007278 <HAL_ADC_ConfigChannel+0x3b8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900071ca:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
900071ce:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900071d0:	f850 6cf8 	ldr.w	r6, [r0, #-248]
900071d4:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
900071d6:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
900071d8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
900071dc:	43c0      	mvns	r0, r0
900071de:	f000 0001 	and.w	r0, r0, #1
900071e2:	e73d      	b.n	90007060 <HAL_ADC_ConfigChannel+0x1a0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900071e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
900071e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900071e8:	f042 0220 	orr.w	r2, r2, #32
900071ec:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
900071ee:	e717      	b.n	90007020 <HAL_ADC_ConfigChannel+0x160>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
900071f0:	0685      	lsls	r5, r0, #26
900071f2:	2601      	movs	r6, #1
900071f4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
900071f8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
900071fc:	fa06 f404 	lsl.w	r4, r6, r4
90007200:	381e      	subs	r0, #30
90007202:	4325      	orrs	r5, r4
90007204:	0500      	lsls	r0, r0, #20
90007206:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
9000720a:	e77f      	b.n	9000710c <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000720c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
90007210:	2d00      	cmp	r5, #0
90007212:	d072      	beq.n	900072fa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
90007214:	fab5 f585 	clz	r5, r5
90007218:	3501      	adds	r5, #1
9000721a:	06ad      	lsls	r5, r5, #26
9000721c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90007220:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
90007224:	2800      	cmp	r0, #0
90007226:	d066      	beq.n	900072f6 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
90007228:	fab0 f080 	clz	r0, r0
9000722c:	2601      	movs	r6, #1
9000722e:	3001      	adds	r0, #1
90007230:	f000 001f 	and.w	r0, r0, #31
90007234:	fa06 f000 	lsl.w	r0, r6, r0
90007238:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
9000723a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
9000723e:	2c00      	cmp	r4, #0
90007240:	d056      	beq.n	900072f0 <HAL_ADC_ConfigChannel+0x430>
  return __builtin_clz(value);
90007242:	fab4 f084 	clz	r0, r4
90007246:	3001      	adds	r0, #1
90007248:	f000 001f 	and.w	r0, r0, #31
9000724c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90007250:	0500      	lsls	r0, r0, #20
90007252:	e75b      	b.n	9000710c <HAL_ADC_ConfigChannel+0x24c>
90007254:	5c001000 	.word	0x5c001000
90007258:	000fffff 	.word	0x000fffff
9000725c:	47ff0000 	.word	0x47ff0000
90007260:	40022000 	.word	0x40022000
90007264:	58026300 	.word	0x58026300
90007268:	58026000 	.word	0x58026000
9000726c:	cb840000 	.word	0xcb840000
90007270:	c7520000 	.word	0xc7520000
90007274:	cfb80000 	.word	0xcfb80000
90007278:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
9000727c:	0208      	lsls	r0, r1, #8
9000727e:	f53f aec9 	bmi.w	90007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
90007282:	491f      	ldr	r1, [pc, #124]	; (90007300 <HAL_ADC_ConfigChannel+0x440>)
90007284:	428a      	cmp	r2, r1
90007286:	f47f aec5 	bne.w	90007014 <HAL_ADC_ConfigChannel+0x154>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
9000728a:	4a1e      	ldr	r2, [pc, #120]	; (90007304 <HAL_ADC_ConfigChannel+0x444>)
9000728c:	481e      	ldr	r0, [pc, #120]	; (90007308 <HAL_ADC_ConfigChannel+0x448>)
9000728e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90007290:	68a9      	ldr	r1, [r5, #8]
90007292:	0992      	lsrs	r2, r2, #6
90007294:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
90007298:	fba0 0202 	umull	r0, r2, r0, r2
9000729c:	4331      	orrs	r1, r6
9000729e:	0992      	lsrs	r2, r2, #6
900072a0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
900072a4:	3201      	adds	r2, #1
900072a6:	60a9      	str	r1, [r5, #8]
900072a8:	0052      	lsls	r2, r2, #1
900072aa:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
900072ac:	9a01      	ldr	r2, [sp, #4]
900072ae:	2a00      	cmp	r2, #0
900072b0:	f43f aeb0 	beq.w	90007014 <HAL_ADC_ConfigChannel+0x154>
                wait_loop_index--;
900072b4:	9a01      	ldr	r2, [sp, #4]
900072b6:	3a01      	subs	r2, #1
900072b8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
900072ba:	9a01      	ldr	r2, [sp, #4]
900072bc:	2a00      	cmp	r2, #0
900072be:	d1f9      	bne.n	900072b4 <HAL_ADC_ConfigChannel+0x3f4>
900072c0:	e6a8      	b.n	90007014 <HAL_ADC_ConfigChannel+0x154>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
900072c2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
900072c6:	f47f aea5 	bne.w	90007014 <HAL_ADC_ConfigChannel+0x154>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
900072ca:	490d      	ldr	r1, [pc, #52]	; (90007300 <HAL_ADC_ConfigChannel+0x440>)
900072cc:	428a      	cmp	r2, r1
900072ce:	f47f aea1 	bne.w	90007014 <HAL_ADC_ConfigChannel+0x154>
900072d2:	68aa      	ldr	r2, [r5, #8]
900072d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
900072d8:	4332      	orrs	r2, r6
900072da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
900072de:	60aa      	str	r2, [r5, #8]
}
900072e0:	e69e      	b.n	90007020 <HAL_ADC_ConfigChannel+0x160>
900072e2:	480a      	ldr	r0, [pc, #40]	; (9000730c <HAL_ADC_ConfigChannel+0x44c>)
900072e4:	e712      	b.n	9000710c <HAL_ADC_ConfigChannel+0x24c>
900072e6:	2002      	movs	r0, #2
900072e8:	e6fd      	b.n	900070e6 <HAL_ADC_ConfigChannel+0x226>
900072ea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
900072ee:	e6ed      	b.n	900070cc <HAL_ADC_ConfigChannel+0x20c>
900072f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
900072f4:	e70a      	b.n	9000710c <HAL_ADC_ConfigChannel+0x24c>
900072f6:	2002      	movs	r0, #2
900072f8:	e79e      	b.n	90007238 <HAL_ADC_ConfigChannel+0x378>
900072fa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
900072fe:	e78f      	b.n	90007220 <HAL_ADC_ConfigChannel+0x360>
90007300:	58026000 	.word	0x58026000
90007304:	24000054 	.word	0x24000054
90007308:	053e2d63 	.word	0x053e2d63
9000730c:	fe500000 	.word	0xfe500000

90007310 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
90007310:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007312:	689a      	ldr	r2, [r3, #8]
90007314:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007318:	689a      	ldr	r2, [r3, #8]
{
9000731a:	b570      	push	{r4, r5, r6, lr}
9000731c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000731e:	d103      	bne.n	90007328 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007320:	0712      	lsls	r2, r2, #28
90007322:	d401      	bmi.n	90007328 <ADC_ConversionStop+0x18>
    }

  }

  /* Return HAL status */
  return HAL_OK;
90007324:	2000      	movs	r0, #0
}
90007326:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
90007328:	68da      	ldr	r2, [r3, #12]
9000732a:	0196      	lsls	r6, r2, #6
9000732c:	d504      	bpl.n	90007338 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
9000732e:	8aa0      	ldrh	r0, [r4, #20]
90007330:	f240 1201 	movw	r2, #257	; 0x101
90007334:	4290      	cmp	r0, r2
90007336:	d01a      	beq.n	9000736e <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
90007338:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000733a:	689a      	ldr	r2, [r3, #8]
9000733c:	d040      	beq.n	900073c0 <ADC_ConversionStop+0xb0>
9000733e:	0750      	lsls	r0, r2, #29
90007340:	d508      	bpl.n	90007354 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
90007342:	689a      	ldr	r2, [r3, #8]
90007344:	0792      	lsls	r2, r2, #30
90007346:	d405      	bmi.n	90007354 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
90007348:	6898      	ldr	r0, [r3, #8]
9000734a:	4a2d      	ldr	r2, [pc, #180]	; (90007400 <ADC_ConversionStop+0xf0>)
9000734c:	4002      	ands	r2, r0
9000734e:	f042 0210 	orr.w	r2, r2, #16
90007352:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
90007354:	2901      	cmp	r1, #1
90007356:	d019      	beq.n	9000738c <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007358:	689a      	ldr	r2, [r3, #8]
9000735a:	0716      	lsls	r6, r2, #28
9000735c:	d502      	bpl.n	90007364 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
9000735e:	689a      	ldr	r2, [r3, #8]
90007360:	0790      	lsls	r0, r2, #30
90007362:	d534      	bpl.n	900073ce <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
90007364:	2903      	cmp	r1, #3
90007366:	bf14      	ite	ne
90007368:	2504      	movne	r5, #4
9000736a:	250c      	moveq	r5, #12
9000736c:	e00f      	b.n	9000738e <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
9000736e:	681a      	ldr	r2, [r3, #0]
90007370:	0650      	lsls	r0, r2, #25
90007372:	d406      	bmi.n	90007382 <ADC_ConversionStop+0x72>
90007374:	4a23      	ldr	r2, [pc, #140]	; (90007404 <ADC_ConversionStop+0xf4>)
90007376:	e001      	b.n	9000737c <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
90007378:	3a01      	subs	r2, #1
9000737a:	d018      	beq.n	900073ae <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
9000737c:	6819      	ldr	r1, [r3, #0]
9000737e:	0649      	lsls	r1, r1, #25
90007380:	d5fa      	bpl.n	90007378 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
90007382:	2240      	movs	r2, #64	; 0x40
90007384:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007386:	689a      	ldr	r2, [r3, #8]
90007388:	0756      	lsls	r6, r2, #29
9000738a:	d427      	bmi.n	900073dc <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
9000738c:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
9000738e:	f7ff fd01 	bl	90006d94 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007392:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007394:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007396:	689b      	ldr	r3, [r3, #8]
90007398:	421d      	tst	r5, r3
9000739a:	d0c3      	beq.n	90007324 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
9000739c:	f7ff fcfa 	bl	90006d94 <HAL_GetTick>
900073a0:	1b83      	subs	r3, r0, r6
900073a2:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
900073a4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
900073a6:	d9f6      	bls.n	90007396 <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
900073a8:	689a      	ldr	r2, [r3, #8]
900073aa:	422a      	tst	r2, r5
900073ac:	d0f3      	beq.n	90007396 <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900073ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
900073b0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900073b2:	f043 0310 	orr.w	r3, r3, #16
900073b6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
900073b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
900073ba:	4303      	orrs	r3, r0
900073bc:	65a3      	str	r3, [r4, #88]	; 0x58
}
900073be:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900073c0:	0715      	lsls	r5, r2, #28
900073c2:	d502      	bpl.n	900073ca <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900073c4:	689a      	ldr	r2, [r3, #8]
900073c6:	0792      	lsls	r2, r2, #30
900073c8:	d513      	bpl.n	900073f2 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
900073ca:	2508      	movs	r5, #8
900073cc:	e7df      	b.n	9000738e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
900073ce:	6898      	ldr	r0, [r3, #8]
900073d0:	4a0b      	ldr	r2, [pc, #44]	; (90007400 <ADC_ConversionStop+0xf0>)
900073d2:	4002      	ands	r2, r0
900073d4:	f042 0220 	orr.w	r2, r2, #32
900073d8:	609a      	str	r2, [r3, #8]
}
900073da:	e7c3      	b.n	90007364 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900073dc:	689a      	ldr	r2, [r3, #8]
900073de:	0791      	lsls	r1, r2, #30
900073e0:	d4d4      	bmi.n	9000738c <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
900073e2:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
900073e4:	2504      	movs	r5, #4
900073e6:	4a06      	ldr	r2, [pc, #24]	; (90007400 <ADC_ConversionStop+0xf0>)
900073e8:	400a      	ands	r2, r1
900073ea:	f042 0210 	orr.w	r2, r2, #16
900073ee:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
900073f0:	e7cd      	b.n	9000738e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
900073f2:	6899      	ldr	r1, [r3, #8]
900073f4:	4a02      	ldr	r2, [pc, #8]	; (90007400 <ADC_ConversionStop+0xf0>)
900073f6:	400a      	ands	r2, r1
900073f8:	f042 0220 	orr.w	r2, r2, #32
900073fc:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
900073fe:	e7e4      	b.n	900073ca <ADC_ConversionStop+0xba>
90007400:	7fffffc0 	.word	0x7fffffc0
90007404:	000cdc00 	.word	0x000cdc00

90007408 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
90007408:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000740a:	689a      	ldr	r2, [r3, #8]
9000740c:	07d1      	lsls	r1, r2, #31
9000740e:	d501      	bpl.n	90007414 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
90007410:	2000      	movs	r0, #0
}
90007412:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
90007414:	6899      	ldr	r1, [r3, #8]
90007416:	4a21      	ldr	r2, [pc, #132]	; (9000749c <ADC_Enable+0x94>)
90007418:	4211      	tst	r1, r2
{
9000741a:	b570      	push	{r4, r5, r6, lr}
9000741c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
9000741e:	d12c      	bne.n	9000747a <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
90007420:	6899      	ldr	r1, [r3, #8]
90007422:	4a1f      	ldr	r2, [pc, #124]	; (900074a0 <ADC_Enable+0x98>)
90007424:	400a      	ands	r2, r1
90007426:	f042 0201 	orr.w	r2, r2, #1
9000742a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
9000742c:	f7ff fcb2 	bl	90006d94 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007430:	6823      	ldr	r3, [r4, #0]
90007432:	4a1c      	ldr	r2, [pc, #112]	; (900074a4 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
90007434:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007436:	4293      	cmp	r3, r2
90007438:	d028      	beq.n	9000748c <ADC_Enable+0x84>
9000743a:	f502 7280 	add.w	r2, r2, #256	; 0x100
9000743e:	4293      	cmp	r3, r2
90007440:	d024      	beq.n	9000748c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
90007442:	4a19      	ldr	r2, [pc, #100]	; (900074a8 <ADC_Enable+0xa0>)
90007444:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007446:	681a      	ldr	r2, [r3, #0]
90007448:	07d6      	lsls	r6, r2, #31
9000744a:	d414      	bmi.n	90007476 <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
9000744c:	4e14      	ldr	r6, [pc, #80]	; (900074a0 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000744e:	689a      	ldr	r2, [r3, #8]
90007450:	07d0      	lsls	r0, r2, #31
90007452:	d404      	bmi.n	9000745e <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
90007454:	689a      	ldr	r2, [r3, #8]
90007456:	4032      	ands	r2, r6
90007458:	f042 0201 	orr.w	r2, r2, #1
9000745c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
9000745e:	f7ff fc99 	bl	90006d94 <HAL_GetTick>
90007462:	1b43      	subs	r3, r0, r5
90007464:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007466:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
90007468:	d902      	bls.n	90007470 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
9000746a:	681a      	ldr	r2, [r3, #0]
9000746c:	07d1      	lsls	r1, r2, #31
9000746e:	d504      	bpl.n	9000747a <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007470:	681a      	ldr	r2, [r3, #0]
90007472:	07d2      	lsls	r2, r2, #31
90007474:	d5eb      	bpl.n	9000744e <ADC_Enable+0x46>
  return HAL_OK;
90007476:	2000      	movs	r0, #0
}
90007478:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000747a:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
9000747c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000747e:	f043 0310 	orr.w	r3, r3, #16
90007482:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007484:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007486:	4303      	orrs	r3, r0
90007488:	65a3      	str	r3, [r4, #88]	; 0x58
}
9000748a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
9000748c:	4a07      	ldr	r2, [pc, #28]	; (900074ac <ADC_Enable+0xa4>)
9000748e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007490:	06d2      	lsls	r2, r2, #27
90007492:	d0d8      	beq.n	90007446 <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007494:	4a06      	ldr	r2, [pc, #24]	; (900074b0 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007496:	4293      	cmp	r3, r2
90007498:	d1d5      	bne.n	90007446 <ADC_Enable+0x3e>
9000749a:	e7ec      	b.n	90007476 <ADC_Enable+0x6e>
9000749c:	8000003f 	.word	0x8000003f
900074a0:	7fffffc0 	.word	0x7fffffc0
900074a4:	40022000 	.word	0x40022000
900074a8:	58026300 	.word	0x58026300
900074ac:	40022300 	.word	0x40022300
900074b0:	40022100 	.word	0x40022100

900074b4 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900074b4:	4a38      	ldr	r2, [pc, #224]	; (90007598 <HAL_ADC_Start+0xe4>)
900074b6:	6803      	ldr	r3, [r0, #0]
900074b8:	4293      	cmp	r3, r2
{
900074ba:	b570      	push	{r4, r5, r6, lr}
900074bc:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900074be:	d049      	beq.n	90007554 <HAL_ADC_Start+0xa0>
900074c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
900074c4:	4293      	cmp	r3, r2
900074c6:	d045      	beq.n	90007554 <HAL_ADC_Start+0xa0>
900074c8:	4a34      	ldr	r2, [pc, #208]	; (9000759c <HAL_ADC_Start+0xe8>)
900074ca:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900074cc:	689d      	ldr	r5, [r3, #8]
900074ce:	f015 0504 	ands.w	r5, r5, #4
900074d2:	d145      	bne.n	90007560 <HAL_ADC_Start+0xac>
    __HAL_LOCK(hadc);
900074d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
900074d8:	2b01      	cmp	r3, #1
900074da:	d041      	beq.n	90007560 <HAL_ADC_Start+0xac>
900074dc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
900074de:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
900074e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
900074e4:	f7ff ff90 	bl	90007408 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
900074e8:	2800      	cmp	r0, #0
900074ea:	d13b      	bne.n	90007564 <HAL_ADC_Start+0xb0>
      ADC_STATE_CLR_SET(hadc->State,
900074ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
900074ee:	f006 061f 	and.w	r6, r6, #31
900074f2:	4a2b      	ldr	r2, [pc, #172]	; (900075a0 <HAL_ADC_Start+0xec>)
900074f4:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074f6:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
900074f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900074fc:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900074fe:	4a29      	ldr	r2, [pc, #164]	; (900075a4 <HAL_ADC_Start+0xf0>)
90007500:	4293      	cmp	r3, r2
90007502:	d032      	beq.n	9000756a <HAL_ADC_Start+0xb6>
90007504:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
90007506:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007508:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9000750c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
9000750e:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90007514:	d03d      	beq.n	90007592 <HAL_ADC_Start+0xde>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
90007516:	6da2      	ldr	r2, [r4, #88]	; 0x58
90007518:	f022 0206 	bic.w	r2, r2, #6
9000751c:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
9000751e:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007520:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
90007522:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
90007524:	f04f 0200 	mov.w	r2, #0
90007528:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
9000752c:	d021      	beq.n	90007572 <HAL_ADC_Start+0xbe>
9000752e:	f240 2221 	movw	r2, #545	; 0x221
90007532:	40f2      	lsrs	r2, r6
90007534:	07d5      	lsls	r5, r2, #31
90007536:	d41c      	bmi.n	90007572 <HAL_ADC_Start+0xbe>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
90007538:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000753a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
9000753e:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
90007540:	68cb      	ldr	r3, [r1, #12]
90007542:	019b      	lsls	r3, r3, #6
90007544:	d505      	bpl.n	90007552 <HAL_ADC_Start+0x9e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
90007546:	6d63      	ldr	r3, [r4, #84]	; 0x54
90007548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000754c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90007550:	6563      	str	r3, [r4, #84]	; 0x54
}
90007552:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007554:	4a14      	ldr	r2, [pc, #80]	; (900075a8 <HAL_ADC_Start+0xf4>)
90007556:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007558:	689d      	ldr	r5, [r3, #8]
9000755a:	f015 0504 	ands.w	r5, r5, #4
9000755e:	d0b9      	beq.n	900074d4 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
90007560:	2002      	movs	r0, #2
}
90007562:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
90007564:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
90007568:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
9000756a:	490b      	ldr	r1, [pc, #44]	; (90007598 <HAL_ADC_Start+0xe4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
9000756c:	2e00      	cmp	r6, #0
9000756e:	d0ca      	beq.n	90007506 <HAL_ADC_Start+0x52>
90007570:	e7cd      	b.n	9000750e <HAL_ADC_Start+0x5a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
90007572:	68da      	ldr	r2, [r3, #12]
90007574:	0192      	lsls	r2, r2, #6
90007576:	d505      	bpl.n	90007584 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
90007578:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000757a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000757e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90007582:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
90007584:	6899      	ldr	r1, [r3, #8]
90007586:	4a09      	ldr	r2, [pc, #36]	; (900075ac <HAL_ADC_Start+0xf8>)
90007588:	400a      	ands	r2, r1
9000758a:	f042 0204 	orr.w	r2, r2, #4
9000758e:	609a      	str	r2, [r3, #8]
}
90007590:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
90007592:	65a2      	str	r2, [r4, #88]	; 0x58
90007594:	e7c3      	b.n	9000751e <HAL_ADC_Start+0x6a>
90007596:	bf00      	nop
90007598:	40022000 	.word	0x40022000
9000759c:	58026300 	.word	0x58026300
900075a0:	fffff0fe 	.word	0xfffff0fe
900075a4:	40022100 	.word	0x40022100
900075a8:	40022300 	.word	0x40022300
900075ac:	7fffffc0 	.word	0x7fffffc0

900075b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
900075b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
900075b2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900075b4:	689a      	ldr	r2, [r3, #8]
900075b6:	0795      	lsls	r5, r2, #30
900075b8:	d502      	bpl.n	900075c0 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900075ba:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
900075bc:	2000      	movs	r0, #0
}
900075be:	bd38      	pop	{r3, r4, r5, pc}
900075c0:	689a      	ldr	r2, [r3, #8]
900075c2:	07d4      	lsls	r4, r2, #31
900075c4:	d529      	bpl.n	9000761a <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
900075c6:	689a      	ldr	r2, [r3, #8]
900075c8:	4604      	mov	r4, r0
900075ca:	f002 020d 	and.w	r2, r2, #13
900075ce:	2a01      	cmp	r2, #1
900075d0:	d008      	beq.n	900075e4 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900075d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
900075d4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900075d6:	f043 0310 	orr.w	r3, r3, #16
900075da:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
900075dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
900075de:	4303      	orrs	r3, r0
900075e0:	65a3      	str	r3, [r4, #88]	; 0x58
}
900075e2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
900075e4:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
900075e6:	2103      	movs	r1, #3
900075e8:	4a0d      	ldr	r2, [pc, #52]	; (90007620 <ADC_Disable+0x70>)
900075ea:	4002      	ands	r2, r0
900075ec:	f042 0202 	orr.w	r2, r2, #2
900075f0:	609a      	str	r2, [r3, #8]
900075f2:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
900075f4:	f7ff fbce 	bl	90006d94 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075f8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
900075fa:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900075fc:	689b      	ldr	r3, [r3, #8]
900075fe:	07d9      	lsls	r1, r3, #31
90007600:	d50b      	bpl.n	9000761a <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
90007602:	f7ff fbc7 	bl	90006d94 <HAL_GetTick>
90007606:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
90007608:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
9000760a:	2802      	cmp	r0, #2
9000760c:	d902      	bls.n	90007614 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
9000760e:	689a      	ldr	r2, [r3, #8]
90007610:	07d2      	lsls	r2, r2, #31
90007612:	d4de      	bmi.n	900075d2 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
90007614:	689b      	ldr	r3, [r3, #8]
90007616:	07db      	lsls	r3, r3, #31
90007618:	d4f3      	bmi.n	90007602 <ADC_Disable+0x52>
  return HAL_OK;
9000761a:	2000      	movs	r0, #0
}
9000761c:	bd38      	pop	{r3, r4, r5, pc}
9000761e:	bf00      	nop
90007620:	7fffffc0 	.word	0x7fffffc0

90007624 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
90007624:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
90007628:	2b01      	cmp	r3, #1
9000762a:	d01b      	beq.n	90007664 <HAL_ADC_Stop+0x40>
9000762c:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
9000762e:	2103      	movs	r1, #3
{
90007630:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
90007632:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
90007636:	4604      	mov	r4, r0
90007638:	f7ff fe6a 	bl	90007310 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
9000763c:	b118      	cbz	r0, 90007646 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
9000763e:	2300      	movs	r3, #0
90007640:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
90007644:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
90007646:	4620      	mov	r0, r4
90007648:	f7ff ffb2 	bl	900075b0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
9000764c:	2800      	cmp	r0, #0
9000764e:	d1f6      	bne.n	9000763e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
90007650:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007652:	4b05      	ldr	r3, [pc, #20]	; (90007668 <HAL_ADC_Stop+0x44>)
90007654:	4013      	ands	r3, r2
90007656:	f043 0301 	orr.w	r3, r3, #1
9000765a:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
9000765c:	2300      	movs	r3, #0
9000765e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
90007662:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
90007664:	2002      	movs	r0, #2
}
90007666:	4770      	bx	lr
90007668:	ffffeefe 	.word	0xffffeefe

9000766c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
9000766c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
9000766e:	4a57      	ldr	r2, [pc, #348]	; (900077cc <ADC_ConfigureBoostMode+0x160>)
{
90007670:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90007672:	6803      	ldr	r3, [r0, #0]
90007674:	4293      	cmp	r3, r2
90007676:	d026      	beq.n	900076c6 <ADC_ConfigureBoostMode+0x5a>
90007678:	f502 7280 	add.w	r2, r2, #256	; 0x100
9000767c:	4293      	cmp	r3, r2
9000767e:	d022      	beq.n	900076c6 <ADC_ConfigureBoostMode+0x5a>
90007680:	4b53      	ldr	r3, [pc, #332]	; (900077d0 <ADC_ConfigureBoostMode+0x164>)
90007682:	689b      	ldr	r3, [r3, #8]
90007684:	f413 3f40 	tst.w	r3, #196608	; 0x30000
90007688:	d022      	beq.n	900076d0 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
9000768a:	f004 f80f 	bl	9000b6ac <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
9000768e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
90007690:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
90007692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90007696:	f000 8088 	beq.w	900077aa <ADC_ConfigureBoostMode+0x13e>
9000769a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000769e:	d06c      	beq.n	9000777a <ADC_ConfigureBoostMode+0x10e>
900076a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900076a4:	f000 8081 	beq.w	900077aa <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
900076a8:	f7ff fb7a 	bl	90006da0 <HAL_GetREVID>
900076ac:	f241 0303 	movw	r3, #4099	; 0x1003
900076b0:	4298      	cmp	r0, r3
900076b2:	d84b      	bhi.n	9000774c <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
900076b4:	4b47      	ldr	r3, [pc, #284]	; (900077d4 <ADC_ConfigureBoostMode+0x168>)
900076b6:	429d      	cmp	r5, r3
900076b8:	d92a      	bls.n	90007710 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
900076ba:	6822      	ldr	r2, [r4, #0]
900076bc:	6893      	ldr	r3, [r2, #8]
900076be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900076c2:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
900076c4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
900076c6:	4b44      	ldr	r3, [pc, #272]	; (900077d8 <ADC_ConfigureBoostMode+0x16c>)
900076c8:	689b      	ldr	r3, [r3, #8]
900076ca:	f413 3f40 	tst.w	r3, #196608	; 0x30000
900076ce:	d1dc      	bne.n	9000768a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
900076d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
900076d4:	2100      	movs	r1, #0
900076d6:	f005 f9dd 	bl	9000ca94 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
900076da:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
900076dc:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
900076de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
900076e2:	d06c      	beq.n	900077be <ADC_ConfigureBoostMode+0x152>
900076e4:	d808      	bhi.n	900076f8 <ADC_ConfigureBoostMode+0x8c>
900076e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
900076ea:	d050      	beq.n	9000778e <ADC_ConfigureBoostMode+0x122>
900076ec:	d916      	bls.n	9000771c <ADC_ConfigureBoostMode+0xb0>
900076ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900076f2:	d1d9      	bne.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
900076f4:	0945      	lsrs	r5, r0, #5
        break;
900076f6:	e7d7      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
900076f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
900076fc:	d045      	beq.n	9000778a <ADC_ConfigureBoostMode+0x11e>
900076fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
90007702:	d1d1      	bne.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007704:	f7ff fb4c 	bl	90006da0 <HAL_GetREVID>
90007708:	f241 0303 	movw	r3, #4099	; 0x1003
9000770c:	4298      	cmp	r0, r3
9000770e:	d840      	bhi.n	90007792 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
90007710:	6822      	ldr	r2, [r4, #0]
90007712:	6893      	ldr	r3, [r2, #8]
90007714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90007718:	6093      	str	r3, [r2, #8]
}
9000771a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
9000771c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007720:	d006      	beq.n	90007730 <ADC_ConfigureBoostMode+0xc4>
90007722:	d90a      	bls.n	9000773a <ADC_ConfigureBoostMode+0xce>
90007724:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
90007728:	d002      	beq.n	90007730 <ADC_ConfigureBoostMode+0xc4>
9000772a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
9000772e:	d1bb      	bne.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
90007730:	0c9b      	lsrs	r3, r3, #18
90007732:	005b      	lsls	r3, r3, #1
90007734:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
90007738:	e7b6      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
9000773a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
9000773e:	d0f7      	beq.n	90007730 <ADC_ConfigureBoostMode+0xc4>
90007740:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
90007744:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
90007748:	d0f2      	beq.n	90007730 <ADC_ConfigureBoostMode+0xc4>
9000774a:	e7ad      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
9000774c:	4b23      	ldr	r3, [pc, #140]	; (900077dc <ADC_ConfigureBoostMode+0x170>)
9000774e:	429d      	cmp	r5, r3
90007750:	d805      	bhi.n	9000775e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
90007752:	6822      	ldr	r2, [r4, #0]
90007754:	6893      	ldr	r3, [r2, #8]
90007756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000775a:	6093      	str	r3, [r2, #8]
}
9000775c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
9000775e:	4b20      	ldr	r3, [pc, #128]	; (900077e0 <ADC_ConfigureBoostMode+0x174>)
90007760:	429d      	cmp	r5, r3
90007762:	d91a      	bls.n	9000779a <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
90007764:	4b1f      	ldr	r3, [pc, #124]	; (900077e4 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
90007766:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
90007768:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
9000776a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
9000776c:	d829      	bhi.n	900077c2 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
9000776e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90007776:	6093      	str	r3, [r2, #8]
}
90007778:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
9000777a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
9000777c:	f7ff fb10 	bl	90006da0 <HAL_GetREVID>
90007780:	f241 0303 	movw	r3, #4099	; 0x1003
90007784:	4298      	cmp	r0, r3
90007786:	d8e1      	bhi.n	9000774c <ADC_ConfigureBoostMode+0xe0>
90007788:	e794      	b.n	900076b4 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
9000778a:	09c5      	lsrs	r5, r0, #7
        break;
9000778c:	e78c      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
9000778e:	0905      	lsrs	r5, r0, #4
        break;
90007790:	e78a      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
90007792:	4b12      	ldr	r3, [pc, #72]	; (900077dc <ADC_ConfigureBoostMode+0x170>)
90007794:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
90007798:	d2db      	bcs.n	90007752 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
9000779a:	6822      	ldr	r2, [r4, #0]
9000779c:	6893      	ldr	r3, [r2, #8]
9000779e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900077a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900077a6:	6093      	str	r3, [r2, #8]
}
900077a8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
900077aa:	0c1b      	lsrs	r3, r3, #16
900077ac:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
900077b0:	f7ff faf6 	bl	90006da0 <HAL_GetREVID>
900077b4:	f241 0303 	movw	r3, #4099	; 0x1003
900077b8:	4298      	cmp	r0, r3
900077ba:	d8c7      	bhi.n	9000774c <ADC_ConfigureBoostMode+0xe0>
900077bc:	e77a      	b.n	900076b4 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
900077be:	0985      	lsrs	r5, r0, #6
        break;
900077c0:	e772      	b.n	900076a8 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
900077c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
900077c6:	6093      	str	r3, [r2, #8]
}
900077c8:	bd38      	pop	{r3, r4, r5, pc}
900077ca:	bf00      	nop
900077cc:	40022000 	.word	0x40022000
900077d0:	58026300 	.word	0x58026300
900077d4:	01312d00 	.word	0x01312d00
900077d8:	40022300 	.word	0x40022300
900077dc:	00bebc21 	.word	0x00bebc21
900077e0:	017d7841 	.word	0x017d7841
900077e4:	02faf081 	.word	0x02faf081

900077e8 <HAL_ADC_Init>:
{
900077e8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
900077ea:	2300      	movs	r3, #0
{
900077ec:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
900077ee:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
900077f0:	2800      	cmp	r0, #0
900077f2:	f000 80d1 	beq.w	90007998 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
900077f6:	6d45      	ldr	r5, [r0, #84]	; 0x54
900077f8:	4604      	mov	r4, r0
900077fa:	2d00      	cmp	r5, #0
900077fc:	f000 80bb 	beq.w	90007976 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
90007800:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
90007802:	6893      	ldr	r3, [r2, #8]
90007804:	009d      	lsls	r5, r3, #2
90007806:	d503      	bpl.n	90007810 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
90007808:	6891      	ldr	r1, [r2, #8]
9000780a:	4b72      	ldr	r3, [pc, #456]	; (900079d4 <HAL_ADC_Init+0x1ec>)
9000780c:	400b      	ands	r3, r1
9000780e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
90007810:	6893      	ldr	r3, [r2, #8]
90007812:	00d8      	lsls	r0, r3, #3
90007814:	d416      	bmi.n	90007844 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
90007816:	4b70      	ldr	r3, [pc, #448]	; (900079d8 <HAL_ADC_Init+0x1f0>)
90007818:	4970      	ldr	r1, [pc, #448]	; (900079dc <HAL_ADC_Init+0x1f4>)
9000781a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
9000781c:	6890      	ldr	r0, [r2, #8]
9000781e:	099b      	lsrs	r3, r3, #6
90007820:	fba1 1303 	umull	r1, r3, r1, r3
90007824:	496e      	ldr	r1, [pc, #440]	; (900079e0 <HAL_ADC_Init+0x1f8>)
90007826:	099b      	lsrs	r3, r3, #6
90007828:	4001      	ands	r1, r0
9000782a:	3301      	adds	r3, #1
9000782c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
90007830:	6091      	str	r1, [r2, #8]
90007832:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
90007834:	9b01      	ldr	r3, [sp, #4]
90007836:	b12b      	cbz	r3, 90007844 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
90007838:	9b01      	ldr	r3, [sp, #4]
9000783a:	3b01      	subs	r3, #1
9000783c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
9000783e:	9b01      	ldr	r3, [sp, #4]
90007840:	2b00      	cmp	r3, #0
90007842:	d1f9      	bne.n	90007838 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
90007844:	6893      	ldr	r3, [r2, #8]
90007846:	00d9      	lsls	r1, r3, #3
90007848:	d424      	bmi.n	90007894 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000784a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
9000784c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000784e:	f043 0310 	orr.w	r3, r3, #16
90007852:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007854:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007856:	432b      	orrs	r3, r5
90007858:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000785a:	6893      	ldr	r3, [r2, #8]
9000785c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
90007860:	6d63      	ldr	r3, [r4, #84]	; 0x54
90007862:	d11d      	bne.n	900078a0 <HAL_ADC_Init+0xb8>
90007864:	06db      	lsls	r3, r3, #27
90007866:	d41b      	bmi.n	900078a0 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
90007868:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000786a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
9000786e:	f043 0302 	orr.w	r3, r3, #2
90007872:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007874:	6893      	ldr	r3, [r2, #8]
90007876:	07de      	lsls	r6, r3, #31
90007878:	d428      	bmi.n	900078cc <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000787a:	4b5a      	ldr	r3, [pc, #360]	; (900079e4 <HAL_ADC_Init+0x1fc>)
9000787c:	429a      	cmp	r2, r3
9000787e:	d017      	beq.n	900078b0 <HAL_ADC_Init+0xc8>
90007880:	f503 7380 	add.w	r3, r3, #256	; 0x100
90007884:	429a      	cmp	r2, r3
90007886:	d013      	beq.n	900078b0 <HAL_ADC_Init+0xc8>
90007888:	4b57      	ldr	r3, [pc, #348]	; (900079e8 <HAL_ADC_Init+0x200>)
9000788a:	689b      	ldr	r3, [r3, #8]
9000788c:	07d9      	lsls	r1, r3, #31
9000788e:	d41d      	bmi.n	900078cc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
90007890:	4a56      	ldr	r2, [pc, #344]	; (900079ec <HAL_ADC_Init+0x204>)
90007892:	e015      	b.n	900078c0 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007894:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007896:	2500      	movs	r5, #0
90007898:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
9000789c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000789e:	d0e1      	beq.n	90007864 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900078a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
900078a2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900078a4:	f043 0310 	orr.w	r3, r3, #16
}
900078a8:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900078aa:	6563      	str	r3, [r4, #84]	; 0x54
}
900078ac:	b002      	add	sp, #8
900078ae:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900078b0:	4a4c      	ldr	r2, [pc, #304]	; (900079e4 <HAL_ADC_Init+0x1fc>)
900078b2:	4b4f      	ldr	r3, [pc, #316]	; (900079f0 <HAL_ADC_Init+0x208>)
900078b4:	6892      	ldr	r2, [r2, #8]
900078b6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
900078b8:	4313      	orrs	r3, r2
900078ba:	07d8      	lsls	r0, r3, #31
900078bc:	d406      	bmi.n	900078cc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
900078be:	4a4d      	ldr	r2, [pc, #308]	; (900079f4 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
900078c0:	6893      	ldr	r3, [r2, #8]
900078c2:	6861      	ldr	r1, [r4, #4]
900078c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
900078c8:	430b      	orrs	r3, r1
900078ca:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
900078cc:	f7ff fa68 	bl	90006da0 <HAL_GetREVID>
900078d0:	f241 0303 	movw	r3, #4099	; 0x1003
900078d4:	68a1      	ldr	r1, [r4, #8]
900078d6:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
900078d8:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
900078da:	d852      	bhi.n	90007982 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
900078dc:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
900078e0:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
900078e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
900078e4:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
900078e8:	4302      	orrs	r2, r0
900078ea:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
900078ec:	2b01      	cmp	r3, #1
900078ee:	d103      	bne.n	900078f8 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
900078f0:	6a23      	ldr	r3, [r4, #32]
900078f2:	3b01      	subs	r3, #1
900078f4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
900078f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900078fa:	b123      	cbz	r3, 90007906 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
900078fc:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
90007900:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90007902:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
90007904:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
90007906:	6823      	ldr	r3, [r4, #0]
90007908:	493b      	ldr	r1, [pc, #236]	; (900079f8 <HAL_ADC_Init+0x210>)
9000790a:	68d8      	ldr	r0, [r3, #12]
9000790c:	4001      	ands	r1, r0
9000790e:	4311      	orrs	r1, r2
90007910:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007912:	689a      	ldr	r2, [r3, #8]
90007914:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007918:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000791a:	d11c      	bne.n	90007956 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
9000791c:	0712      	lsls	r2, r2, #28
9000791e:	d41a      	bmi.n	90007956 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
90007920:	68d8      	ldr	r0, [r3, #12]
90007922:	4a36      	ldr	r2, [pc, #216]	; (900079fc <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
90007924:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
90007926:	4002      	ands	r2, r0
90007928:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
9000792c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000792e:	430a      	orrs	r2, r1
90007930:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
90007932:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90007936:	2a01      	cmp	r2, #1
90007938:	d03a      	beq.n	900079b0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
9000793a:	691a      	ldr	r2, [r3, #16]
9000793c:	f022 0201 	bic.w	r2, r2, #1
90007940:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
90007942:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
90007944:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
90007946:	6b61      	ldr	r1, [r4, #52]	; 0x34
90007948:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
9000794c:	430a      	orrs	r2, r1
9000794e:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
90007950:	f7ff fe8c 	bl	9000766c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
90007954:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
90007956:	68e2      	ldr	r2, [r4, #12]
90007958:	2a01      	cmp	r2, #1
9000795a:	d021      	beq.n	900079a0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
9000795c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000795e:	f022 020f 	bic.w	r2, r2, #15
90007962:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
90007964:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
90007966:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
90007968:	f023 0303 	bic.w	r3, r3, #3
9000796c:	f043 0301 	orr.w	r3, r3, #1
90007970:	6563      	str	r3, [r4, #84]	; 0x54
}
90007972:	b002      	add	sp, #8
90007974:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
90007976:	f7fc fe7f 	bl	90004678 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
9000797a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
9000797c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
90007980:	e73e      	b.n	90007800 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
90007982:	2910      	cmp	r1, #16
90007984:	d1aa      	bne.n	900078dc <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90007986:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90007988:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000798a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
9000798e:	6b21      	ldr	r1, [r4, #48]	; 0x30
90007990:	430a      	orrs	r2, r1
90007992:	f042 021c 	orr.w	r2, r2, #28
90007996:	e7a9      	b.n	900078ec <HAL_ADC_Init+0x104>
    return HAL_ERROR;
90007998:	2501      	movs	r5, #1
}
9000799a:	4628      	mov	r0, r5
9000799c:	b002      	add	sp, #8
9000799e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
900079a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
900079a2:	69a2      	ldr	r2, [r4, #24]
900079a4:	f021 010f 	bic.w	r1, r1, #15
900079a8:	3a01      	subs	r2, #1
900079aa:	430a      	orrs	r2, r1
900079ac:	631a      	str	r2, [r3, #48]	; 0x30
900079ae:	e7d9      	b.n	90007964 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
900079b0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
900079b4:	6c66      	ldr	r6, [r4, #68]	; 0x44
900079b6:	3901      	subs	r1, #1
900079b8:	6918      	ldr	r0, [r3, #16]
900079ba:	4332      	orrs	r2, r6
900079bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900079c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
900079c2:	430a      	orrs	r2, r1
900079c4:	490e      	ldr	r1, [pc, #56]	; (90007a00 <HAL_ADC_Init+0x218>)
900079c6:	4001      	ands	r1, r0
900079c8:	430a      	orrs	r2, r1
900079ca:	f042 0201 	orr.w	r2, r2, #1
900079ce:	611a      	str	r2, [r3, #16]
900079d0:	e7b7      	b.n	90007942 <HAL_ADC_Init+0x15a>
900079d2:	bf00      	nop
900079d4:	5fffffc0 	.word	0x5fffffc0
900079d8:	24000054 	.word	0x24000054
900079dc:	053e2d63 	.word	0x053e2d63
900079e0:	6fffffc0 	.word	0x6fffffc0
900079e4:	40022000 	.word	0x40022000
900079e8:	58026000 	.word	0x58026000
900079ec:	58026300 	.word	0x58026300
900079f0:	40022100 	.word	0x40022100
900079f4:	40022300 	.word	0x40022300
900079f8:	fff0c003 	.word	0xfff0c003
900079fc:	ffffbffc 	.word	0xffffbffc
90007a00:	fc00f81e 	.word	0xfc00f81e

90007a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
90007a04:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
90007a06:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
90007a0a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
90007a0c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
90007a0e:	2a01      	cmp	r2, #1
90007a10:	d04d      	beq.n	90007aae <HAL_ADCEx_MultiModeConfigChannel+0xaa>
90007a12:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
90007a14:	4c2b      	ldr	r4, [pc, #172]	; (90007ac4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
90007a16:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
90007a18:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
90007a1a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
90007a1c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
90007a1e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
90007a20:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
90007a24:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
90007a26:	d008      	beq.n	90007a3a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007a28:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
90007a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007a2e:	f041 0120 	orr.w	r1, r1, #32
90007a32:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
90007a34:	b01a      	add	sp, #104	; 0x68
90007a36:	bcf0      	pop	{r4, r5, r6, r7}
90007a38:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007a3a:	4c23      	ldr	r4, [pc, #140]	; (90007ac8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
90007a3c:	68a2      	ldr	r2, [r4, #8]
90007a3e:	0752      	lsls	r2, r2, #29
90007a40:	d50b      	bpl.n	90007a5a <HAL_ADCEx_MultiModeConfigChannel+0x56>
90007a42:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
90007a46:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007a48:	f042 0220 	orr.w	r2, r2, #32
90007a4c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
90007a4e:	2200      	movs	r2, #0
90007a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
90007a54:	b01a      	add	sp, #104	; 0x68
90007a56:	bcf0      	pop	{r4, r5, r6, r7}
90007a58:	4770      	bx	lr
90007a5a:	68a8      	ldr	r0, [r5, #8]
90007a5c:	f010 0004 	ands.w	r0, r0, #4
90007a60:	d1f0      	bne.n	90007a44 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
90007a62:	b1c6      	cbz	r6, 90007a96 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
90007a64:	f8df c068 	ldr.w	ip, [pc, #104]	; 90007ad0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
90007a68:	684f      	ldr	r7, [r1, #4]
90007a6a:	f8dc 2008 	ldr.w	r2, [ip, #8]
90007a6e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007a72:	433a      	orrs	r2, r7
90007a74:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007a78:	68ad      	ldr	r5, [r5, #8]
90007a7a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007a7c:	432a      	orrs	r2, r5
90007a7e:	07d4      	lsls	r4, r2, #31
90007a80:	d413      	bmi.n	90007aaa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
90007a82:	688a      	ldr	r2, [r1, #8]
90007a84:	f8dc 4008 	ldr.w	r4, [ip, #8]
90007a88:	4910      	ldr	r1, [pc, #64]	; (90007acc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007a8a:	4332      	orrs	r2, r6
90007a8c:	4021      	ands	r1, r4
90007a8e:	430a      	orrs	r2, r1
90007a90:	f8cc 2008 	str.w	r2, [ip, #8]
90007a94:	e7db      	b.n	90007a4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
90007a96:	490e      	ldr	r1, [pc, #56]	; (90007ad0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
90007a98:	688a      	ldr	r2, [r1, #8]
90007a9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007a9e:	608a      	str	r2, [r1, #8]
90007aa0:	68a8      	ldr	r0, [r5, #8]
90007aa2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007aa4:	4302      	orrs	r2, r0
90007aa6:	07d0      	lsls	r0, r2, #31
90007aa8:	d505      	bpl.n	90007ab6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007aaa:	2000      	movs	r0, #0
90007aac:	e7cf      	b.n	90007a4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
90007aae:	2002      	movs	r0, #2
}
90007ab0:	b01a      	add	sp, #104	; 0x68
90007ab2:	bcf0      	pop	{r4, r5, r6, r7}
90007ab4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
90007ab6:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90007ab8:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
90007aba:	4a04      	ldr	r2, [pc, #16]	; (90007acc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007abc:	4022      	ands	r2, r4
90007abe:	608a      	str	r2, [r1, #8]
90007ac0:	e7c5      	b.n	90007a4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
90007ac2:	bf00      	nop
90007ac4:	40022000 	.word	0x40022000
90007ac8:	40022100 	.word	0x40022100
90007acc:	fffff0e0 	.word	0xfffff0e0
90007ad0:	40022300 	.word	0x40022300

90007ad4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007ad4:	4906      	ldr	r1, [pc, #24]	; (90007af0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007ad6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007ada:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90007adc:	4b05      	ldr	r3, [pc, #20]	; (90007af4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007ade:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007ae0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007ae4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90007ae8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90007aea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90007aec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90007aee:	4770      	bx	lr
90007af0:	e000ed00 	.word	0xe000ed00
90007af4:	05fa0000 	.word	0x05fa0000

90007af8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90007af8:	4b1b      	ldr	r3, [pc, #108]	; (90007b68 <HAL_NVIC_SetPriority+0x70>)
90007afa:	68db      	ldr	r3, [r3, #12]
90007afc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90007b00:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90007b02:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007b06:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90007b0a:	f1be 0f04 	cmp.w	lr, #4
90007b0e:	bf28      	it	cs
90007b10:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007b14:	f1bc 0f06 	cmp.w	ip, #6
90007b18:	d91a      	bls.n	90007b50 <HAL_NVIC_SetPriority+0x58>
90007b1a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90007b1c:	f04f 3cff 	mov.w	ip, #4294967295
90007b20:	fa0c fc03 	lsl.w	ip, ip, r3
90007b24:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90007b28:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90007b2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90007b2e:	fa0c fc0e 	lsl.w	ip, ip, lr
90007b32:	ea21 010c 	bic.w	r1, r1, ip
90007b36:	fa01 f103 	lsl.w	r1, r1, r3
90007b3a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90007b3e:	db0a      	blt.n	90007b56 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90007b40:	0109      	lsls	r1, r1, #4
90007b42:	4b0a      	ldr	r3, [pc, #40]	; (90007b6c <HAL_NVIC_SetPriority+0x74>)
90007b44:	b2c9      	uxtb	r1, r1
90007b46:	4403      	add	r3, r0
90007b48:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90007b4c:	f85d fb04 	ldr.w	pc, [sp], #4
90007b50:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90007b52:	4613      	mov	r3, r2
90007b54:	e7e8      	b.n	90007b28 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90007b56:	f000 000f 	and.w	r0, r0, #15
90007b5a:	0109      	lsls	r1, r1, #4
90007b5c:	4b04      	ldr	r3, [pc, #16]	; (90007b70 <HAL_NVIC_SetPriority+0x78>)
90007b5e:	b2c9      	uxtb	r1, r1
90007b60:	4403      	add	r3, r0
90007b62:	7619      	strb	r1, [r3, #24]
90007b64:	f85d fb04 	ldr.w	pc, [sp], #4
90007b68:	e000ed00 	.word	0xe000ed00
90007b6c:	e000e100 	.word	0xe000e100
90007b70:	e000ecfc 	.word	0xe000ecfc

90007b74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007b74:	2800      	cmp	r0, #0
90007b76:	db07      	blt.n	90007b88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007b78:	2301      	movs	r3, #1
90007b7a:	f000 011f 	and.w	r1, r0, #31
90007b7e:	4a03      	ldr	r2, [pc, #12]	; (90007b8c <HAL_NVIC_EnableIRQ+0x18>)
90007b80:	0940      	lsrs	r0, r0, #5
90007b82:	408b      	lsls	r3, r1
90007b84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90007b88:	4770      	bx	lr
90007b8a:	bf00      	nop
90007b8c:	e000e100 	.word	0xe000e100

90007b90 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007b90:	2800      	cmp	r0, #0
90007b92:	db0c      	blt.n	90007bae <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007b94:	0943      	lsrs	r3, r0, #5
90007b96:	2201      	movs	r2, #1
90007b98:	f000 001f 	and.w	r0, r0, #31
90007b9c:	4904      	ldr	r1, [pc, #16]	; (90007bb0 <HAL_NVIC_DisableIRQ+0x20>)
90007b9e:	3320      	adds	r3, #32
90007ba0:	4082      	lsls	r2, r0
90007ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90007ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007baa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90007bae:	4770      	bx	lr
90007bb0:	e000e100 	.word	0xe000e100

90007bb4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
90007bb4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007bb8:	4b04      	ldr	r3, [pc, #16]	; (90007bcc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90007bba:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007bbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90007bc2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90007bc4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90007bc8:	4770      	bx	lr
90007bca:	bf00      	nop
90007bcc:	e000ed00 	.word	0xe000ed00

90007bd0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90007bd0:	4b06      	ldr	r3, [pc, #24]	; (90007bec <HAL_MPU_Enable+0x1c>)
90007bd2:	f040 0001 	orr.w	r0, r0, #1
90007bd6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90007bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007bdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90007be0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90007be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007be6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90007bea:	4770      	bx	lr
90007bec:	e000ed00 	.word	0xe000ed00

90007bf0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90007bf0:	4a17      	ldr	r2, [pc, #92]	; (90007c50 <HAL_MPU_ConfigRegion+0x60>)
90007bf2:	7843      	ldrb	r3, [r0, #1]
90007bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90007bf8:	7801      	ldrb	r1, [r0, #0]
90007bfa:	b321      	cbz	r1, 90007c46 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90007bfc:	6843      	ldr	r3, [r0, #4]
{
90007bfe:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90007c00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007c04:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007c06:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007c0a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90007c0c:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007c10:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90007c14:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007c18:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90007c1a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007c1c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90007c20:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007c24:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90007c28:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007c2c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90007c30:	7a01      	ldrb	r1, [r0, #8]
90007c32:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90007c36:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90007c3a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007c3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90007c42:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90007c46:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90007c4a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90007c4e:	4770      	bx	lr
90007c50:	e000ed00 	.word	0xe000ed00

90007c54 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90007c54:	2800      	cmp	r0, #0
90007c56:	d036      	beq.n	90007cc6 <HAL_CRC_Init+0x72>
{
90007c58:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90007c5a:	7f43      	ldrb	r3, [r0, #29]
90007c5c:	4604      	mov	r4, r0
90007c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007c62:	b363      	cbz	r3, 90007cbe <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90007c64:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007c66:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90007c68:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007c6a:	b9f3      	cbnz	r3, 90007caa <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90007c6c:	6823      	ldr	r3, [r4, #0]
90007c6e:	4a17      	ldr	r2, [pc, #92]	; (90007ccc <HAL_CRC_Init+0x78>)
90007c70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90007c72:	689a      	ldr	r2, [r3, #8]
90007c74:	f022 0218 	bic.w	r2, r2, #24
90007c78:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90007c7a:	7962      	ldrb	r2, [r4, #5]
90007c7c:	b18a      	cbz	r2, 90007ca2 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90007c7e:	6922      	ldr	r2, [r4, #16]
90007c80:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c82:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c84:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90007c8c:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90007c8e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007c90:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c92:	689a      	ldr	r2, [r3, #8]
90007c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90007c98:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90007c9a:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007c9c:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90007c9e:	7761      	strb	r1, [r4, #29]
}
90007ca0:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007ca2:	f04f 32ff 	mov.w	r2, #4294967295
90007ca6:	611a      	str	r2, [r3, #16]
90007ca8:	e7eb      	b.n	90007c82 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90007caa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90007cae:	4620      	mov	r0, r4
90007cb0:	f000 f80e 	bl	90007cd0 <HAL_CRCEx_Polynomial_Set>
90007cb4:	b908      	cbnz	r0, 90007cba <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007cb6:	6823      	ldr	r3, [r4, #0]
90007cb8:	e7df      	b.n	90007c7a <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90007cba:	2001      	movs	r0, #1
}
90007cbc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90007cbe:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90007cc0:	f7fc fd38 	bl	90004734 <HAL_CRC_MspInit>
90007cc4:	e7ce      	b.n	90007c64 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90007cc6:	2001      	movs	r0, #1
}
90007cc8:	4770      	bx	lr
90007cca:	bf00      	nop
90007ccc:	04c11db7 	.word	0x04c11db7

90007cd0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90007cd0:	07cb      	lsls	r3, r1, #31
90007cd2:	d51a      	bpl.n	90007d0a <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007cd4:	231e      	movs	r3, #30
{
90007cd6:	b410      	push	{r4}
90007cd8:	e001      	b.n	90007cde <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007cda:	3b01      	subs	r3, #1
90007cdc:	d317      	bcc.n	90007d0e <HAL_CRCEx_Polynomial_Set+0x3e>
90007cde:	fa21 fc03 	lsr.w	ip, r1, r3
90007ce2:	f01c 0f01 	tst.w	ip, #1
90007ce6:	d0f8      	beq.n	90007cda <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90007ce8:	2a18      	cmp	r2, #24
90007cea:	d811      	bhi.n	90007d10 <HAL_CRCEx_Polynomial_Set+0x40>
90007cec:	e8df f002 	tbb	[pc, r2]
90007cf0:	10101016 	.word	0x10101016
90007cf4:	10101010 	.word	0x10101010
90007cf8:	10101024 	.word	0x10101024
90007cfc:	10101010 	.word	0x10101010
90007d00:	10101021 	.word	0x10101021
90007d04:	10101010 	.word	0x10101010
90007d08:	14          	.byte	0x14
90007d09:	00          	.byte	0x00
    status =  HAL_ERROR;
90007d0a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90007d0c:	4770      	bx	lr
    switch (PolyLength)
90007d0e:	b12a      	cbz	r2, 90007d1c <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90007d10:	2001      	movs	r0, #1
}
90007d12:	f85d 4b04 	ldr.w	r4, [sp], #4
90007d16:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90007d18:	2b06      	cmp	r3, #6
90007d1a:	d8f9      	bhi.n	90007d10 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90007d1c:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007d1e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90007d20:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007d22:	68a3      	ldr	r3, [r4, #8]
90007d24:	f023 0318 	bic.w	r3, r3, #24
90007d28:	4313      	orrs	r3, r2
90007d2a:	60a3      	str	r3, [r4, #8]
}
90007d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
90007d30:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90007d32:	2b07      	cmp	r3, #7
90007d34:	d9f2      	bls.n	90007d1c <HAL_CRCEx_Polynomial_Set+0x4c>
90007d36:	e7eb      	b.n	90007d10 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90007d38:	2b0f      	cmp	r3, #15
90007d3a:	d9ef      	bls.n	90007d1c <HAL_CRCEx_Polynomial_Set+0x4c>
90007d3c:	e7e8      	b.n	90007d10 <HAL_CRCEx_Polynomial_Set+0x40>
90007d3e:	bf00      	nop

90007d40 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90007d40:	2800      	cmp	r0, #0
90007d42:	d035      	beq.n	90007db0 <HAL_DMA2D_Init+0x70>
{
90007d44:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90007d46:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90007d4a:	4604      	mov	r4, r0
90007d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007d50:	b34b      	cbz	r3, 90007da6 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d52:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007d54:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d56:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007d58:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d5c:	69e1      	ldr	r1, [r4, #28]
90007d5e:	681d      	ldr	r5, [r3, #0]
90007d60:	4814      	ldr	r0, [pc, #80]	; (90007db4 <HAL_DMA2D_Init+0x74>)
90007d62:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d64:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d66:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d68:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d6a:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d6c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007d6e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d70:	4302      	orrs	r2, r0
90007d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007d74:	4810      	ldr	r0, [pc, #64]	; (90007db8 <HAL_DMA2D_Init+0x78>)
90007d76:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d78:	4910      	ldr	r1, [pc, #64]	; (90007dbc <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007d7a:	4302      	orrs	r2, r0
90007d7c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90007d80:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d82:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d86:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d88:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007d8a:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007d8e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007d92:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007d94:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90007d98:	430a      	orrs	r2, r1
90007d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007d9c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007d9e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007da0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90007da4:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007da6:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90007daa:	f7fc fcdb 	bl	90004764 <HAL_DMA2D_MspInit>
90007dae:	e7d0      	b.n	90007d52 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90007db0:	2001      	movs	r0, #1
}
90007db2:	4770      	bx	lr
90007db4:	fff8ffbf 	.word	0xfff8ffbf
90007db8:	fffffef8 	.word	0xfffffef8
90007dbc:	ffff0000 	.word	0xffff0000

90007dc0 <HAL_DMA2D_LineEventCallback>:
90007dc0:	4770      	bx	lr
90007dc2:	bf00      	nop

90007dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90007dc4:	4770      	bx	lr
90007dc6:	bf00      	nop

90007dc8 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007dc8:	6803      	ldr	r3, [r0, #0]
{
90007dca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007dcc:	685d      	ldr	r5, [r3, #4]
{
90007dce:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90007dd0:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90007dd2:	07ea      	lsls	r2, r5, #31
90007dd4:	d501      	bpl.n	90007dda <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90007dd6:	05f1      	lsls	r1, r6, #23
90007dd8:	d456      	bmi.n	90007e88 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90007dda:	06aa      	lsls	r2, r5, #26
90007ddc:	d501      	bpl.n	90007de2 <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90007dde:	04b3      	lsls	r3, r6, #18
90007de0:	d43b      	bmi.n	90007e5a <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90007de2:	0728      	lsls	r0, r5, #28
90007de4:	d501      	bpl.n	90007dea <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90007de6:	0531      	lsls	r1, r6, #20
90007de8:	d421      	bmi.n	90007e2e <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90007dea:	076a      	lsls	r2, r5, #29
90007dec:	d501      	bpl.n	90007df2 <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90007dee:	0573      	lsls	r3, r6, #21
90007df0:	d472      	bmi.n	90007ed8 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90007df2:	07a8      	lsls	r0, r5, #30
90007df4:	d501      	bpl.n	90007dfa <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90007df6:	05b1      	lsls	r1, r6, #22
90007df8:	d404      	bmi.n	90007e04 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90007dfa:	06ea      	lsls	r2, r5, #27
90007dfc:	d501      	bpl.n	90007e02 <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90007dfe:	04f3      	lsls	r3, r6, #19
90007e00:	d457      	bmi.n	90007eb2 <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90007e02:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90007e04:	6823      	ldr	r3, [r4, #0]
90007e06:	681a      	ldr	r2, [r3, #0]
90007e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90007e0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90007e0e:	2202      	movs	r2, #2
90007e10:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007e12:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007e16:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007e18:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007e1a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007e1e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90007e22:	6a23      	ldr	r3, [r4, #32]
90007e24:	2b00      	cmp	r3, #0
90007e26:	d0e8      	beq.n	90007dfa <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90007e28:	4620      	mov	r0, r4
90007e2a:	4798      	blx	r3
90007e2c:	e7e5      	b.n	90007dfa <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90007e2e:	6823      	ldr	r3, [r4, #0]
90007e30:	681a      	ldr	r2, [r3, #0]
90007e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90007e36:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90007e38:	2208      	movs	r2, #8
90007e3a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e3c:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90007e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007e40:	4313      	orrs	r3, r2
90007e42:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e44:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007e48:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007e4c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007e50:	2b00      	cmp	r3, #0
90007e52:	d0ca      	beq.n	90007dea <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007e54:	4620      	mov	r0, r4
90007e56:	4798      	blx	r3
90007e58:	e7c7      	b.n	90007dea <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90007e5a:	6823      	ldr	r3, [r4, #0]
90007e5c:	681a      	ldr	r2, [r3, #0]
90007e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90007e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007e64:	2220      	movs	r2, #32
90007e66:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e68:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90007e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007e6c:	f043 0302 	orr.w	r3, r3, #2
90007e70:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e72:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007e76:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007e7a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007e7e:	2b00      	cmp	r3, #0
90007e80:	d0af      	beq.n	90007de2 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90007e82:	4620      	mov	r0, r4
90007e84:	4798      	blx	r3
90007e86:	e7ac      	b.n	90007de2 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007e88:	681a      	ldr	r2, [r3, #0]
90007e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90007e8e:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90007e90:	6e42      	ldr	r2, [r0, #100]	; 0x64
90007e92:	f042 0201 	orr.w	r2, r2, #1
90007e96:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007e98:	2201      	movs	r2, #1
90007e9a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007e9c:	2304      	movs	r3, #4
90007e9e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007ea2:	2300      	movs	r3, #0
90007ea4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007ea8:	6a43      	ldr	r3, [r0, #36]	; 0x24
90007eaa:	2b00      	cmp	r3, #0
90007eac:	d095      	beq.n	90007dda <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90007eae:	4798      	blx	r3
90007eb0:	e793      	b.n	90007dda <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007eb2:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007eb4:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007eb6:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90007eb8:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007eba:	681a      	ldr	r2, [r3, #0]
90007ebc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90007ec0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007ec2:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007ec4:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007ec8:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007ecc:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007ece:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007ed2:	f7ff ff77 	bl	90007dc4 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90007ed6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007ed8:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007eda:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007edc:	681a      	ldr	r2, [r3, #0]
90007ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90007ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90007ee4:	2204      	movs	r2, #4
90007ee6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007ee8:	f7ff ff6a 	bl	90007dc0 <HAL_DMA2D_LineEventCallback>
90007eec:	e781      	b.n	90007df2 <HAL_DMA2D_IRQHandler+0x2a>
90007eee:	bf00      	nop

90007ef0 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90007ef0:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90007ef4:	2a01      	cmp	r2, #1
90007ef6:	d065      	beq.n	90007fc4 <HAL_DMA2D_ConfigLayer+0xd4>
90007ef8:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007efa:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007efe:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007f00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90007f04:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90007f06:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007f08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90007f0c:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007f10:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007f12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90007f14:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007f16:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f18:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007f1c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90007f20:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f22:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007f26:	ea42 0204 	orr.w	r2, r2, r4
90007f2a:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f2e:	d922      	bls.n	90007f76 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90007f30:	6b45      	ldr	r5, [r0, #52]	; 0x34
90007f32:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007f36:	b981      	cbnz	r1, 90007f5a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f38:	6818      	ldr	r0, [r3, #0]
90007f3a:	4923      	ldr	r1, [pc, #140]	; (90007fc8 <HAL_DMA2D_ConfigLayer+0xd8>)
90007f3c:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f3e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f40:	4029      	ands	r1, r5
90007f42:	4311      	orrs	r1, r2
90007f44:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f46:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90007f48:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007f4a:	2101      	movs	r1, #1

  return HAL_OK;
90007f4c:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007f4e:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90007f52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90007f56:	bc70      	pop	{r4, r5, r6}
90007f58:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007f5a:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f5c:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007f5e:	d129      	bne.n	90007fb4 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f60:	69e5      	ldr	r5, [r4, #28]
90007f62:	491a      	ldr	r1, [pc, #104]	; (90007fcc <HAL_DMA2D_ConfigLayer+0xdc>)
90007f64:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90007f66:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f68:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f6a:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90007f6e:	4311      	orrs	r1, r2
90007f70:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007f72:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007f74:	e7e8      	b.n	90007f48 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90007f76:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007f78:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90007f7c:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007f7e:	b961      	cbnz	r1, 90007f9a <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f80:	6819      	ldr	r1, [r3, #0]
90007f82:	4a11      	ldr	r2, [pc, #68]	; (90007fc8 <HAL_DMA2D_ConfigLayer+0xd8>)
90007f84:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f86:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f88:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f8a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007f90:	4322      	orrs	r2, r4
90007f92:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007f94:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007f96:	6288      	str	r0, [r1, #40]	; 0x28
90007f98:	e7d6      	b.n	90007f48 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007f9a:	6819      	ldr	r1, [r3, #0]
90007f9c:	4a0a      	ldr	r2, [pc, #40]	; (90007fc8 <HAL_DMA2D_ConfigLayer+0xd8>)
90007f9e:	69cd      	ldr	r5, [r1, #28]
90007fa0:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007fa2:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007fa4:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007fa6:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007fa8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007fac:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007fae:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007fb0:	620c      	str	r4, [r1, #32]
90007fb2:	e7c9      	b.n	90007f48 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007fb4:	69e5      	ldr	r5, [r4, #28]
90007fb6:	4904      	ldr	r1, [pc, #16]	; (90007fc8 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007fb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007fba:	4029      	ands	r1, r5
90007fbc:	4311      	orrs	r1, r2
90007fbe:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007fc0:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007fc2:	e7c1      	b.n	90007f48 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90007fc4:	2002      	movs	r0, #2
}
90007fc6:	4770      	bx	lr
90007fc8:	00ccfff0 	.word	0x00ccfff0
90007fcc:	00c0fff0 	.word	0x00c0fff0

90007fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007fd4:	680c      	ldr	r4, [r1, #0]
{
90007fd6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007fd8:	2c00      	cmp	r4, #0
90007fda:	f000 80a7 	beq.w	9000812c <HAL_GPIO_Init+0x15c>
90007fde:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007fe2:	4f8a      	ldr	r7, [pc, #552]	; (9000820c <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90007fe4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90007fe6:	2201      	movs	r2, #1
90007fe8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90007fea:	ea12 0e04 	ands.w	lr, r2, r4
90007fee:	f000 8096 	beq.w	9000811e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90007ff2:	684d      	ldr	r5, [r1, #4]
90007ff4:	f005 0903 	and.w	r9, r5, #3
90007ff8:	f109 36ff 	add.w	r6, r9, #4294967295
90007ffc:	2e01      	cmp	r6, #1
90007ffe:	f240 8098 	bls.w	90008132 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90008002:	f1b9 0f03 	cmp.w	r9, #3
90008006:	f040 80d2 	bne.w	900081ae <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000800a:	fa09 f20c 	lsl.w	r2, r9, ip
9000800e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90008012:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90008014:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90008018:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
9000801c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90008020:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90008022:	d07c      	beq.n	9000811e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90008024:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90008028:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000802c:	f003 0903 	and.w	r9, r3, #3
90008030:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90008032:	f042 0202 	orr.w	r2, r2, #2
90008036:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000803a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000803e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90008042:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90008046:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000804a:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000804e:	f002 0202 	and.w	r2, r2, #2
90008052:	9201      	str	r2, [sp, #4]
90008054:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90008056:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000805a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000805e:	4e6c      	ldr	r6, [pc, #432]	; (90008210 <HAL_GPIO_Init+0x240>)
90008060:	42b0      	cmp	r0, r6
90008062:	d028      	beq.n	900080b6 <HAL_GPIO_Init+0xe6>
90008064:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90008068:	42b0      	cmp	r0, r6
9000806a:	f000 80ac 	beq.w	900081c6 <HAL_GPIO_Init+0x1f6>
9000806e:	4e69      	ldr	r6, [pc, #420]	; (90008214 <HAL_GPIO_Init+0x244>)
90008070:	42b0      	cmp	r0, r6
90008072:	f000 80ad 	beq.w	900081d0 <HAL_GPIO_Init+0x200>
90008076:	4e68      	ldr	r6, [pc, #416]	; (90008218 <HAL_GPIO_Init+0x248>)
90008078:	42b0      	cmp	r0, r6
9000807a:	f000 809f 	beq.w	900081bc <HAL_GPIO_Init+0x1ec>
9000807e:	4e67      	ldr	r6, [pc, #412]	; (9000821c <HAL_GPIO_Init+0x24c>)
90008080:	42b0      	cmp	r0, r6
90008082:	f000 80af 	beq.w	900081e4 <HAL_GPIO_Init+0x214>
90008086:	4e66      	ldr	r6, [pc, #408]	; (90008220 <HAL_GPIO_Init+0x250>)
90008088:	42b0      	cmp	r0, r6
9000808a:	f000 80b0 	beq.w	900081ee <HAL_GPIO_Init+0x21e>
9000808e:	4e65      	ldr	r6, [pc, #404]	; (90008224 <HAL_GPIO_Init+0x254>)
90008090:	42b0      	cmp	r0, r6
90008092:	f000 80a2 	beq.w	900081da <HAL_GPIO_Init+0x20a>
90008096:	4e64      	ldr	r6, [pc, #400]	; (90008228 <HAL_GPIO_Init+0x258>)
90008098:	42b0      	cmp	r0, r6
9000809a:	f000 80ad 	beq.w	900081f8 <HAL_GPIO_Init+0x228>
9000809e:	4e63      	ldr	r6, [pc, #396]	; (9000822c <HAL_GPIO_Init+0x25c>)
900080a0:	42b0      	cmp	r0, r6
900080a2:	f000 80ae 	beq.w	90008202 <HAL_GPIO_Init+0x232>
900080a6:	4e62      	ldr	r6, [pc, #392]	; (90008230 <HAL_GPIO_Init+0x260>)
900080a8:	42b0      	cmp	r0, r6
900080aa:	bf0c      	ite	eq
900080ac:	2609      	moveq	r6, #9
900080ae:	260a      	movne	r6, #10
900080b0:	fa06 f609 	lsl.w	r6, r6, r9
900080b4:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
900080b6:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900080ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900080be:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
900080c2:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
900080c6:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
900080c8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900080cc:	bf0c      	ite	eq
900080ce:	4032      	andeq	r2, r6
          temp |= iocurrent;
900080d0:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
900080d4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
900080d8:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
900080dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
900080e0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900080e4:	bf0c      	ite	eq
900080e6:	4032      	andeq	r2, r6
          temp |= iocurrent;
900080e8:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
900080ec:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
900080f0:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
900080f4:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
900080f8:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900080fc:	bf0c      	ite	eq
900080fe:	4032      	andeq	r2, r6
          temp |= iocurrent;
90008100:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90008104:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90008106:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
9000810a:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
9000810e:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
90008112:	bf54      	ite	pl
90008114:	4032      	andpl	r2, r6
          temp |= iocurrent;
90008116:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
9000811a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
9000811e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90008120:	f10c 0c02 	add.w	ip, ip, #2
90008124:	fa34 f203 	lsrs.w	r2, r4, r3
90008128:	f47f af5d 	bne.w	90007fe6 <HAL_GPIO_Init+0x16>
  }
}
9000812c:	b003      	add	sp, #12
9000812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90008132:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90008136:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90008138:	fa08 f80c 	lsl.w	r8, r8, ip
9000813c:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90008140:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90008142:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90008146:	fa06 f60c 	lsl.w	r6, r6, ip
9000814a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
9000814e:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90008150:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90008154:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90008158:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
9000815a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000815e:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90008160:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90008162:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90008164:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90008168:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000816a:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000816e:	fa06 f60c 	lsl.w	r6, r6, ip
90008172:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90008176:	fa09 f20c 	lsl.w	r2, r9, ip
9000817a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000817c:	f47f af49 	bne.w	90008012 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
90008180:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008184:	f003 0b07 	and.w	fp, r3, #7
90008188:	260f      	movs	r6, #15
9000818a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000818e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
90008192:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008196:	fa06 f60b 	lsl.w	r6, r6, fp
9000819a:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000819e:	690e      	ldr	r6, [r1, #16]
900081a0:	fa06 f60b 	lsl.w	r6, r6, fp
900081a4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
900081a8:	f8c9 6020 	str.w	r6, [r9, #32]
900081ac:	e731      	b.n	90008012 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900081ae:	f04f 0803 	mov.w	r8, #3
900081b2:	fa08 f80c 	lsl.w	r8, r8, ip
900081b6:	ea6f 0808 	mvn.w	r8, r8
900081ba:	e7d2      	b.n	90008162 <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900081bc:	2603      	movs	r6, #3
900081be:	fa06 f609 	lsl.w	r6, r6, r9
900081c2:	4332      	orrs	r2, r6
900081c4:	e777      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081c6:	2601      	movs	r6, #1
900081c8:	fa06 f609 	lsl.w	r6, r6, r9
900081cc:	4332      	orrs	r2, r6
900081ce:	e772      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081d0:	2602      	movs	r6, #2
900081d2:	fa06 f609 	lsl.w	r6, r6, r9
900081d6:	4332      	orrs	r2, r6
900081d8:	e76d      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081da:	2606      	movs	r6, #6
900081dc:	fa06 f609 	lsl.w	r6, r6, r9
900081e0:	4332      	orrs	r2, r6
900081e2:	e768      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081e4:	2604      	movs	r6, #4
900081e6:	fa06 f609 	lsl.w	r6, r6, r9
900081ea:	4332      	orrs	r2, r6
900081ec:	e763      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081ee:	2605      	movs	r6, #5
900081f0:	fa06 f609 	lsl.w	r6, r6, r9
900081f4:	4332      	orrs	r2, r6
900081f6:	e75e      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
900081f8:	2607      	movs	r6, #7
900081fa:	fa06 f609 	lsl.w	r6, r6, r9
900081fe:	4332      	orrs	r2, r6
90008200:	e759      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
90008202:	2608      	movs	r6, #8
90008204:	fa06 f609 	lsl.w	r6, r6, r9
90008208:	4332      	orrs	r2, r6
9000820a:	e754      	b.n	900080b6 <HAL_GPIO_Init+0xe6>
9000820c:	58024400 	.word	0x58024400
90008210:	58020000 	.word	0x58020000
90008214:	58020800 	.word	0x58020800
90008218:	58020c00 	.word	0x58020c00
9000821c:	58021000 	.word	0x58021000
90008220:	58021400 	.word	0x58021400
90008224:	58021800 	.word	0x58021800
90008228:	58021c00 	.word	0x58021c00
9000822c:	58022000 	.word	0x58022000
90008230:	58022400 	.word	0x58022400

90008234 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90008234:	2900      	cmp	r1, #0
90008236:	f000 80a4 	beq.w	90008382 <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
9000823a:	2300      	movs	r3, #0
{
9000823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008240:	f8df 9168 	ldr.w	r9, [pc, #360]	; 900083ac <HAL_GPIO_DeInit+0x178>
90008244:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90008246:	f8df 8168 	ldr.w	r8, [pc, #360]	; 900083b0 <HAL_GPIO_DeInit+0x17c>
9000824a:	f8df a168 	ldr.w	sl, [pc, #360]	; 900083b4 <HAL_GPIO_DeInit+0x180>
9000824e:	f8df b168 	ldr.w	fp, [pc, #360]	; 900083b8 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
90008252:	f04f 0e01 	mov.w	lr, #1
90008256:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000825a:	ea12 0c01 	ands.w	ip, r2, r1
9000825e:	d06b      	beq.n	90008338 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
90008260:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90008264:	f003 0403 	and.w	r4, r3, #3
90008268:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000826a:	4540      	cmp	r0, r8
9000826c:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000826e:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
90008272:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90008274:	fa06 f604 	lsl.w	r6, r6, r4
90008278:	ea07 0706 	and.w	r7, r7, r6
9000827c:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000827e:	d01f      	beq.n	900082c0 <HAL_GPIO_DeInit+0x8c>
90008280:	4550      	cmp	r0, sl
90008282:	d01a      	beq.n	900082ba <HAL_GPIO_DeInit+0x86>
90008284:	4558      	cmp	r0, fp
90008286:	d05e      	beq.n	90008346 <HAL_GPIO_DeInit+0x112>
90008288:	4f43      	ldr	r7, [pc, #268]	; (90008398 <HAL_GPIO_DeInit+0x164>)
9000828a:	42b8      	cmp	r0, r7
9000828c:	d065      	beq.n	9000835a <HAL_GPIO_DeInit+0x126>
9000828e:	4f43      	ldr	r7, [pc, #268]	; (9000839c <HAL_GPIO_DeInit+0x168>)
90008290:	42b8      	cmp	r0, r7
90008292:	d067      	beq.n	90008364 <HAL_GPIO_DeInit+0x130>
90008294:	4f42      	ldr	r7, [pc, #264]	; (900083a0 <HAL_GPIO_DeInit+0x16c>)
90008296:	42b8      	cmp	r0, r7
90008298:	d05a      	beq.n	90008350 <HAL_GPIO_DeInit+0x11c>
9000829a:	4f42      	ldr	r7, [pc, #264]	; (900083a4 <HAL_GPIO_DeInit+0x170>)
9000829c:	42b8      	cmp	r0, r7
9000829e:	d06b      	beq.n	90008378 <HAL_GPIO_DeInit+0x144>
900082a0:	4f41      	ldr	r7, [pc, #260]	; (900083a8 <HAL_GPIO_DeInit+0x174>)
900082a2:	42b8      	cmp	r0, r7
900082a4:	d06e      	beq.n	90008384 <HAL_GPIO_DeInit+0x150>
900082a6:	f8df e114 	ldr.w	lr, [pc, #276]	; 900083bc <HAL_GPIO_DeInit+0x188>
900082aa:	4570      	cmp	r0, lr
900082ac:	d05f      	beq.n	9000836e <HAL_GPIO_DeInit+0x13a>
900082ae:	f8df e110 	ldr.w	lr, [pc, #272]	; 900083c0 <HAL_GPIO_DeInit+0x18c>
900082b2:	4570      	cmp	r0, lr
900082b4:	d06b      	beq.n	9000838e <HAL_GPIO_DeInit+0x15a>
900082b6:	f04f 0e0a 	mov.w	lr, #10
900082ba:	fa0e f404 	lsl.w	r4, lr, r4
900082be:	e000      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
900082c0:	2400      	movs	r4, #0
900082c2:	9f01      	ldr	r7, [sp, #4]
900082c4:	42a7      	cmp	r7, r4
900082c6:	d119      	bne.n	900082fc <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
900082c8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
900082cc:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
900082d0:	ea27 070c 	bic.w	r7, r7, ip
900082d4:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
900082d8:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
900082dc:	ea27 070c 	bic.w	r7, r7, ip
900082e0:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
900082e4:	6867      	ldr	r7, [r4, #4]
900082e6:	ea27 070c 	bic.w	r7, r7, ip
900082ea:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
900082ec:	6827      	ldr	r7, [r4, #0]
900082ee:	ea27 070c 	bic.w	r7, r7, ip
900082f2:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900082f4:	68ac      	ldr	r4, [r5, #8]
900082f6:	ea24 0406 	bic.w	r4, r4, r6
900082fa:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900082fc:	005d      	lsls	r5, r3, #1
900082fe:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90008300:	f003 0607 	and.w	r6, r3, #7
90008304:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90008306:	40ac      	lsls	r4, r5
90008308:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000830a:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000830c:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000830e:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90008310:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90008312:	08dd      	lsrs	r5, r3, #3
90008314:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90008318:	6a2e      	ldr	r6, [r5, #32]
9000831a:	ea26 0607 	bic.w	r6, r6, r7
9000831e:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90008320:	68c5      	ldr	r5, [r0, #12]
90008322:	ea25 0504 	bic.w	r5, r5, r4
90008326:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90008328:	6845      	ldr	r5, [r0, #4]
9000832a:	ea25 0202 	bic.w	r2, r5, r2
9000832e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90008330:	6882      	ldr	r2, [r0, #8]
90008332:	ea22 0204 	bic.w	r2, r2, r4
90008336:	6082      	str	r2, [r0, #8]
    }

    position++;
90008338:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
9000833a:	fa31 f203 	lsrs.w	r2, r1, r3
9000833e:	d188      	bne.n	90008252 <HAL_GPIO_DeInit+0x1e>
  }
}
90008340:	b003      	add	sp, #12
90008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90008346:	f04f 0e02 	mov.w	lr, #2
9000834a:	fa0e f404 	lsl.w	r4, lr, r4
9000834e:	e7b8      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
90008350:	f04f 0e05 	mov.w	lr, #5
90008354:	fa0e f404 	lsl.w	r4, lr, r4
90008358:	e7b3      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
9000835a:	f04f 0e03 	mov.w	lr, #3
9000835e:	fa0e f404 	lsl.w	r4, lr, r4
90008362:	e7ae      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
90008364:	f04f 0e04 	mov.w	lr, #4
90008368:	fa0e f404 	lsl.w	r4, lr, r4
9000836c:	e7a9      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
9000836e:	f04f 0e08 	mov.w	lr, #8
90008372:	fa0e f404 	lsl.w	r4, lr, r4
90008376:	e7a4      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
90008378:	f04f 0e06 	mov.w	lr, #6
9000837c:	fa0e f404 	lsl.w	r4, lr, r4
90008380:	e79f      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
90008382:	4770      	bx	lr
90008384:	f04f 0e07 	mov.w	lr, #7
90008388:	fa0e f404 	lsl.w	r4, lr, r4
9000838c:	e799      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
9000838e:	f04f 0e09 	mov.w	lr, #9
90008392:	fa0e f404 	lsl.w	r4, lr, r4
90008396:	e794      	b.n	900082c2 <HAL_GPIO_DeInit+0x8e>
90008398:	58020c00 	.word	0x58020c00
9000839c:	58021000 	.word	0x58021000
900083a0:	58021400 	.word	0x58021400
900083a4:	58021800 	.word	0x58021800
900083a8:	58021c00 	.word	0x58021c00
900083ac:	58000400 	.word	0x58000400
900083b0:	58020000 	.word	0x58020000
900083b4:	58020400 	.word	0x58020400
900083b8:	58020800 	.word	0x58020800
900083bc:	58022000 	.word	0x58022000
900083c0:	58022400 	.word	0x58022400

900083c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
900083c4:	6903      	ldr	r3, [r0, #16]
900083c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
900083c8:	bf14      	ite	ne
900083ca:	2001      	movne	r0, #1
900083cc:	2000      	moveq	r0, #0
900083ce:	4770      	bx	lr

900083d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900083d0:	b902      	cbnz	r2, 900083d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
900083d2:	0409      	lsls	r1, r1, #16
900083d4:	6181      	str	r1, [r0, #24]
  }
}
900083d6:	4770      	bx	lr

900083d8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
900083d8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
900083da:	ea01 0203 	and.w	r2, r1, r3
900083de:	ea21 0103 	bic.w	r1, r1, r3
900083e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900083e6:	6181      	str	r1, [r0, #24]
}
900083e8:	4770      	bx	lr
900083ea:	bf00      	nop

900083ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
900083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900083f0:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900083f2:	f04f 0820 	mov.w	r8, #32
{
900083f6:	4605      	mov	r5, r0
900083f8:	460e      	mov	r6, r1
900083fa:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900083fc:	6998      	ldr	r0, [r3, #24]
900083fe:	f010 0902 	ands.w	r9, r0, #2
90008402:	f040 809e 	bne.w	90008542 <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
90008406:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90008408:	f014 0410 	ands.w	r4, r4, #16
9000840c:	d068      	beq.n	900084e0 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000840e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90008410:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90008412:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90008414:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008416:	1c71      	adds	r1, r6, #1
90008418:	699a      	ldr	r2, [r3, #24]
9000841a:	d163      	bne.n	900084e4 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
9000841c:	0690      	lsls	r0, r2, #26
9000841e:	f100 8093 	bmi.w	90008548 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90008422:	f1ba 0f00 	cmp.w	sl, #0
90008426:	d104      	bne.n	90008432 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90008428:	699c      	ldr	r4, [r3, #24]
9000842a:	06a1      	lsls	r1, r4, #26
9000842c:	d5fc      	bpl.n	90008428 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000842e:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90008432:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90008436:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90008438:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000843a:	05d0      	lsls	r0, r2, #23
9000843c:	d530      	bpl.n	900084a0 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000843e:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008442:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90008444:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90008448:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000844a:	d504      	bpl.n	90008456 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000844c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90008450:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90008454:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008456:	0591      	lsls	r1, r2, #22
90008458:	d504      	bpl.n	90008464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000845a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000845e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008462:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90008464:	699a      	ldr	r2, [r3, #24]
90008466:	0790      	lsls	r0, r2, #30
90008468:	d501      	bpl.n	9000846e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
9000846a:	2200      	movs	r2, #0
9000846c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000846e:	699a      	ldr	r2, [r3, #24]
90008470:	07d1      	lsls	r1, r2, #31
90008472:	d403      	bmi.n	9000847c <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90008474:	699a      	ldr	r2, [r3, #24]
90008476:	f042 0201 	orr.w	r2, r2, #1
9000847a:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000847c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000847e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90008480:	4834      	ldr	r0, [pc, #208]	; (90008554 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
90008482:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90008484:	4002      	ands	r2, r0
      return HAL_ERROR;
90008486:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90008488:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000848a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000848c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90008490:	4323      	orrs	r3, r4
90008492:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90008494:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90008498:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
9000849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900084a0:	0550      	lsls	r0, r2, #21
900084a2:	d4d3      	bmi.n	9000844c <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900084a4:	0592      	lsls	r2, r2, #22
900084a6:	d4d8      	bmi.n	9000845a <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
900084a8:	2900      	cmp	r1, #0
900084aa:	d1db      	bne.n	90008464 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
900084ac:	1c72      	adds	r2, r6, #1
900084ae:	d0a5      	beq.n	900083fc <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900084b0:	f7fe fc70 	bl	90006d94 <HAL_GetTick>
900084b4:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900084b6:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900084b8:	42b0      	cmp	r0, r6
900084ba:	d801      	bhi.n	900084c0 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
900084bc:	2e00      	cmp	r6, #0
900084be:	d19d      	bne.n	900083fc <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
900084c0:	699a      	ldr	r2, [r3, #24]
900084c2:	f012 0202 	ands.w	r2, r2, #2
900084c6:	d199      	bne.n	900083fc <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900084c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900084ca:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
900084cc:	2001      	movs	r0, #1
900084ce:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900084d2:	430b      	orrs	r3, r1
900084d4:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900084d6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900084da:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
900084de:	e7dd      	b.n	9000849c <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
900084e0:	4621      	mov	r1, r4
900084e2:	e7a9      	b.n	90008438 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900084e4:	0692      	lsls	r2, r2, #26
900084e6:	d42f      	bmi.n	90008548 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
900084e8:	f1ba 0f00 	cmp.w	sl, #0
900084ec:	d1a1      	bne.n	90008432 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900084ee:	f7fe fc51 	bl	90006d94 <HAL_GetTick>
900084f2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084f4:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900084f6:	4286      	cmp	r6, r0
900084f8:	d301      	bcc.n	900084fe <I2C_WaitOnTXISFlagUntilTimeout+0x112>
900084fa:	2e00      	cmp	r6, #0
900084fc:	d18b      	bne.n	90008416 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084fe:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90008500:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008504:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90008506:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008508:	0409      	lsls	r1, r1, #16
9000850a:	d50b      	bpl.n	90008524 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
9000850c:	0441      	lsls	r1, r0, #17
9000850e:	d409      	bmi.n	90008524 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90008510:	2a20      	cmp	r2, #32
90008512:	d007      	beq.n	90008524 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90008514:	685a      	ldr	r2, [r3, #4]
90008516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000851a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000851c:	f7fe fc3a 	bl	90006d94 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008520:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90008522:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008524:	699a      	ldr	r2, [r3, #24]
90008526:	0690      	lsls	r0, r2, #26
90008528:	f53f af75 	bmi.w	90008416 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000852c:	f7fe fc32 	bl	90006d94 <HAL_GetTick>
90008530:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008532:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90008534:	2819      	cmp	r0, #25
90008536:	d9f5      	bls.n	90008524 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90008538:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
9000853c:	f04f 0a01 	mov.w	sl, #1
90008540:	e769      	b.n	90008416 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
90008542:	2000      	movs	r0, #0
}
90008544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90008548:	f1ba 0f00 	cmp.w	sl, #0
9000854c:	f43f af6f 	beq.w	9000842e <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90008550:	e76f      	b.n	90008432 <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90008552:	bf00      	nop
90008554:	fe00e800 	.word	0xfe00e800

90008558 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000855c:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000855e:	6802      	ldr	r2, [r0, #0]
{
90008560:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008562:	6991      	ldr	r1, [r2, #24]
90008564:	068c      	lsls	r4, r1, #26
90008566:	d469      	bmi.n	9000863c <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90008568:	4606      	mov	r6, r0
9000856a:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000856c:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90008570:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90008572:	f014 0410 	ands.w	r4, r4, #16
90008576:	d064      	beq.n	90008642 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90008578:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000857a:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
9000857c:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000857e:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90008582:	46aa      	mov	sl, r5
90008584:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008586:	699a      	ldr	r2, [r3, #24]
90008588:	d15d      	bne.n	90008646 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
9000858a:	0690      	lsls	r0, r2, #26
9000858c:	f100 8083 	bmi.w	90008696 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90008590:	f1ba 0f00 	cmp.w	sl, #0
90008594:	d104      	bne.n	900085a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90008596:	699c      	ldr	r4, [r3, #24]
90008598:	06a1      	lsls	r1, r4, #26
9000859a:	d5fc      	bpl.n	90008596 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000859c:	2220      	movs	r2, #32
9000859e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
900085a0:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
900085a4:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
900085a6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900085a8:	05d0      	lsls	r0, r2, #23
900085aa:	d530      	bpl.n	9000860e <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900085ac:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900085b0:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
900085b2:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900085b6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900085b8:	d504      	bpl.n	900085c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900085ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
900085be:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900085c2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900085c4:	0591      	lsls	r1, r2, #22
900085c6:	d504      	bpl.n	900085d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900085c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
900085cc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900085d0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900085d2:	699a      	ldr	r2, [r3, #24]
900085d4:	0795      	lsls	r5, r2, #30
900085d6:	d501      	bpl.n	900085dc <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
900085d8:	2200      	movs	r2, #0
900085da:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900085dc:	699a      	ldr	r2, [r3, #24]
900085de:	07d0      	lsls	r0, r2, #31
900085e0:	d403      	bmi.n	900085ea <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900085e2:	699a      	ldr	r2, [r3, #24]
900085e4:	f042 0201 	orr.w	r2, r2, #1
900085e8:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
900085ea:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
900085ec:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
900085ee:	4837      	ldr	r0, [pc, #220]	; (900086cc <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
900085f0:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
900085f2:	4002      	ands	r2, r0
      return HAL_ERROR;
900085f4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
900085f6:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
900085f8:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
900085fa:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900085fe:	4323      	orrs	r3, r4
90008600:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90008602:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90008606:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000860e:	0550      	lsls	r0, r2, #21
90008610:	d4d3      	bmi.n	900085ba <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008612:	0592      	lsls	r2, r2, #22
90008614:	d4d8      	bmi.n	900085c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90008616:	2900      	cmp	r1, #0
90008618:	d1db      	bne.n	900085d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000861a:	f7fe fbbb 	bl	90006d94 <HAL_GetTick>
9000861e:	eba0 0008 	sub.w	r0, r0, r8
90008622:	42b8      	cmp	r0, r7
90008624:	d801      	bhi.n	9000862a <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
90008626:	2f00      	cmp	r7, #0
90008628:	d132      	bne.n	90008690 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000862a:	6832      	ldr	r2, [r6, #0]
9000862c:	6991      	ldr	r1, [r2, #24]
9000862e:	4613      	mov	r3, r2
90008630:	f011 0120 	ands.w	r1, r1, #32
90008634:	d034      	beq.n	900086a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008636:	6991      	ldr	r1, [r2, #24]
90008638:	0689      	lsls	r1, r1, #26
9000863a:	d599      	bpl.n	90008570 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
9000863c:	2000      	movs	r0, #0
}
9000863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90008642:	4621      	mov	r1, r4
90008644:	e7af      	b.n	900085a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008646:	0692      	lsls	r2, r2, #26
90008648:	d425      	bmi.n	90008696 <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000864a:	f1ba 0f00 	cmp.w	sl, #0
9000864e:	d1a7      	bne.n	900085a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90008650:	f7fe fba0 	bl	90006d94 <HAL_GetTick>
90008654:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90008656:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90008658:	4287      	cmp	r7, r0
9000865a:	d301      	bcc.n	90008660 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
9000865c:	2f00      	cmp	r7, #0
9000865e:	d191      	bne.n	90008584 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90008660:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90008662:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008666:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90008668:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000866a:	0409      	lsls	r1, r1, #16
9000866c:	d503      	bpl.n	90008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
9000866e:	0441      	lsls	r1, r0, #17
90008670:	d401      	bmi.n	90008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90008672:	2a20      	cmp	r2, #32
90008674:	d121      	bne.n	900086ba <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008676:	699a      	ldr	r2, [r3, #24]
90008678:	0690      	lsls	r0, r2, #26
9000867a:	d483      	bmi.n	90008584 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000867c:	f7fe fb8a 	bl	90006d94 <HAL_GetTick>
90008680:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008682:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90008684:	2819      	cmp	r0, #25
90008686:	d9f6      	bls.n	90008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90008688:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000868a:	f04f 0a01 	mov.w	sl, #1
9000868e:	e779      	b.n	90008584 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90008690:	6833      	ldr	r3, [r6, #0]
90008692:	461a      	mov	r2, r3
90008694:	e7cf      	b.n	90008636 <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
90008696:	f1ba 0f00 	cmp.w	sl, #0
9000869a:	f43f af7f 	beq.w	9000859c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000869e:	e77f      	b.n	900085a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900086a0:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900086a2:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
900086a4:	2001      	movs	r0, #1
900086a6:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900086aa:	4313      	orrs	r3, r2
900086ac:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900086ae:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900086b2:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
900086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900086ba:	685a      	ldr	r2, [r3, #4]
900086bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900086c0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
900086c2:	f7fe fb67 	bl	90006d94 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900086c6:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
900086c8:	4604      	mov	r4, r0
900086ca:	e7d4      	b.n	90008676 <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
900086cc:	fe00e800 	.word	0xfe00e800

900086d0 <HAL_I2C_MspInit>:
}
900086d0:	4770      	bx	lr
900086d2:	bf00      	nop

900086d4 <HAL_I2C_Init>:
  if (hi2c == NULL)
900086d4:	2800      	cmp	r0, #0
900086d6:	d04e      	beq.n	90008776 <HAL_I2C_Init+0xa2>
{
900086d8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
900086da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900086de:	4604      	mov	r4, r0
900086e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900086e4:	2b00      	cmp	r3, #0
900086e6:	d041      	beq.n	9000876c <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
900086e8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
900086ea:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900086ec:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
900086ee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
900086f2:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900086f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900086f8:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
900086fa:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900086fe:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90008700:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90008702:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90008704:	689a      	ldr	r2, [r3, #8]
90008706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000870a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000870c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000870e:	d029      	beq.n	90008764 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90008710:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90008714:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90008716:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90008718:	d102      	bne.n	90008720 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000871e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90008720:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90008722:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90008726:	4915      	ldr	r1, [pc, #84]	; (9000877c <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90008728:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000872a:	4301      	orrs	r1, r0
9000872c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000872e:	68d9      	ldr	r1, [r3, #12]
90008730:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
90008734:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90008736:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000873a:	4302      	orrs	r2, r0
9000873c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90008740:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90008744:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008746:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90008748:	4301      	orrs	r1, r0
  return HAL_OK;
9000874a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000874c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000874e:	6819      	ldr	r1, [r3, #0]
90008750:	f041 0101 	orr.w	r1, r1, #1
90008754:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008756:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90008758:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000875c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000875e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90008762:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90008764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90008768:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000876a:	e7d9      	b.n	90008720 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000876c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90008770:	f7ff ffae 	bl	900086d0 <HAL_I2C_MspInit>
90008774:	e7b8      	b.n	900086e8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
90008776:	2001      	movs	r0, #1
}
90008778:	4770      	bx	lr
9000877a:	bf00      	nop
9000877c:	02008000 	.word	0x02008000

90008780 <HAL_I2C_MspDeInit>:
90008780:	4770      	bx	lr
90008782:	bf00      	nop

90008784 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
90008784:	b1b0      	cbz	r0, 900087b4 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
90008786:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90008788:	2324      	movs	r3, #36	; 0x24
{
9000878a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000878c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
90008790:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
90008792:	6813      	ldr	r3, [r2, #0]
90008794:	f023 0301 	bic.w	r3, r3, #1
90008798:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000879a:	f7ff fff1 	bl	90008780 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000879e:	2300      	movs	r3, #0
900087a0:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
900087a2:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
900087a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
900087a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
900087ac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900087ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
900087b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
900087b4:	2001      	movs	r0, #1
}
900087b6:	4770      	bx	lr

900087b8 <HAL_I2C_Mem_Write>:
{
900087b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900087bc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900087be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
900087c2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
900087c6:	2b20      	cmp	r3, #32
{
900087c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
900087ca:	d132      	bne.n	90008832 <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
900087cc:	9b08      	ldr	r3, [sp, #32]
900087ce:	4604      	mov	r4, r0
900087d0:	b34b      	cbz	r3, 90008826 <HAL_I2C_Mem_Write+0x6e>
900087d2:	f1ba 0f00 	cmp.w	sl, #0
900087d6:	d026      	beq.n	90008826 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
900087d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900087dc:	2b01      	cmp	r3, #1
900087de:	d028      	beq.n	90008832 <HAL_I2C_Mem_Write+0x7a>
900087e0:	2301      	movs	r3, #1
900087e2:	460e      	mov	r6, r1
900087e4:	4691      	mov	r9, r2
900087e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
900087ea:	f7fe fad3 	bl	90006d94 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900087ee:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
900087f0:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900087f2:	699a      	ldr	r2, [r3, #24]
900087f4:	0411      	lsls	r1, r2, #16
900087f6:	d51f      	bpl.n	90008838 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900087f8:	f7fe facc 	bl	90006d94 <HAL_GetTick>
900087fc:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900087fe:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008800:	2819      	cmp	r0, #25
90008802:	d9f6      	bls.n	900087f2 <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008804:	699a      	ldr	r2, [r3, #24]
90008806:	0412      	lsls	r2, r2, #16
90008808:	d5f3      	bpl.n	900087f2 <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000880a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000880c:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000880e:	2200      	movs	r2, #0
      return HAL_ERROR;
90008810:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008812:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90008814:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008818:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000881a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000881e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008826:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000882a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000882c:	6463      	str	r3, [r4, #68]	; 0x44
}
9000882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
90008832:	2002      	movs	r0, #2
}
90008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90008838:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000883a:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000883c:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008840:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90008842:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008846:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90008848:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000884a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000884c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90008850:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008852:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90008854:	496d      	ldr	r1, [pc, #436]	; (90008a0c <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90008856:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000885a:	685a      	ldr	r2, [r3, #4]
9000885c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000885e:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90008862:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90008866:	496a      	ldr	r1, [pc, #424]	; (90008a10 <HAL_I2C_Mem_Write+0x258>)
90008868:	4332      	orrs	r2, r6
9000886a:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000886c:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000886e:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008870:	4639      	mov	r1, r7
90008872:	f7ff fdbb 	bl	900083ec <I2C_WaitOnTXISFlagUntilTimeout>
90008876:	2800      	cmp	r0, #0
90008878:	d175      	bne.n	90008966 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000887a:	f1b8 0f01 	cmp.w	r8, #1
9000887e:	d00a      	beq.n	90008896 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008880:	ea4f 2219 	mov.w	r2, r9, lsr #8
90008884:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008886:	4639      	mov	r1, r7
90008888:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000888a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000888c:	462a      	mov	r2, r5
9000888e:	f7ff fdad 	bl	900083ec <I2C_WaitOnTXISFlagUntilTimeout>
90008892:	2800      	cmp	r0, #0
90008894:	d167      	bne.n	90008966 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008896:	fa5f f389 	uxtb.w	r3, r9
9000889a:	6822      	ldr	r2, [r4, #0]
9000889c:	6293      	str	r3, [r2, #40]	; 0x28
9000889e:	1c78      	adds	r0, r7, #1
900088a0:	d14a      	bne.n	90008938 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900088a2:	6993      	ldr	r3, [r2, #24]
900088a4:	0619      	lsls	r1, r3, #24
900088a6:	d5fc      	bpl.n	900088a2 <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900088a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900088aa:	b29b      	uxth	r3, r3
900088ac:	2bff      	cmp	r3, #255	; 0xff
900088ae:	f240 808a 	bls.w	900089c6 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
900088b2:	6853      	ldr	r3, [r2, #4]
900088b4:	4957      	ldr	r1, [pc, #348]	; (90008a14 <HAL_I2C_Mem_Write+0x25c>)
900088b6:	400b      	ands	r3, r1
900088b8:	4957      	ldr	r1, [pc, #348]	; (90008a18 <HAL_I2C_Mem_Write+0x260>)
900088ba:	4333      	orrs	r3, r6
900088bc:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
900088be:	23ff      	movs	r3, #255	; 0xff
900088c0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900088c2:	6051      	str	r1, [r2, #4]
900088c4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 90008a14 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900088c8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
900088cc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 90008a18 <HAL_I2C_Mem_Write+0x260>
900088d0:	e004      	b.n	900088dc <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
900088d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900088d4:	b29b      	uxth	r3, r3
900088d6:	2b00      	cmp	r3, #0
900088d8:	f000 8083 	beq.w	900089e2 <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900088dc:	462a      	mov	r2, r5
900088de:	4639      	mov	r1, r7
900088e0:	4620      	mov	r0, r4
900088e2:	f7ff fd83 	bl	900083ec <I2C_WaitOnTXISFlagUntilTimeout>
900088e6:	2800      	cmp	r0, #0
900088e8:	d16b      	bne.n	900089c2 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900088ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
900088ec:	6821      	ldr	r1, [r4, #0]
900088ee:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
900088f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900088f4:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
900088f6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
900088f8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
900088fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
900088fc:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
900088fe:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90008900:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90008902:	b292      	uxth	r2, r2
90008904:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008906:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
90008908:	b292      	uxth	r2, r2
9000890a:	2a00      	cmp	r2, #0
9000890c:	d0e1      	beq.n	900088d2 <HAL_I2C_Mem_Write+0x11a>
9000890e:	2b00      	cmp	r3, #0
90008910:	d1df      	bne.n	900088d2 <HAL_I2C_Mem_Write+0x11a>
90008912:	1c78      	adds	r0, r7, #1
90008914:	d12c      	bne.n	90008970 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008916:	698b      	ldr	r3, [r1, #24]
90008918:	061a      	lsls	r2, r3, #24
9000891a:	d5fc      	bpl.n	90008916 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000891c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000891e:	b29b      	uxth	r3, r3
90008920:	2bff      	cmp	r3, #255	; 0xff
90008922:	d940      	bls.n	900089a6 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
90008924:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008926:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000892a:	ea03 0308 	and.w	r3, r3, r8
9000892e:	4333      	orrs	r3, r6
90008930:	ea43 0309 	orr.w	r3, r3, r9
90008934:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90008936:	e7cc      	b.n	900088d2 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008938:	6993      	ldr	r3, [r2, #24]
9000893a:	061b      	lsls	r3, r3, #24
9000893c:	d4b4      	bmi.n	900088a8 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000893e:	f7fe fa29 	bl	90006d94 <HAL_GetTick>
90008942:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008944:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008946:	4287      	cmp	r7, r0
90008948:	d301      	bcc.n	9000894e <HAL_I2C_Mem_Write+0x196>
9000894a:	2f00      	cmp	r7, #0
9000894c:	d1a7      	bne.n	9000889e <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000894e:	6993      	ldr	r3, [r2, #24]
90008950:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008954:	d1a3      	bne.n	9000889e <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008956:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008958:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000895a:	430a      	orrs	r2, r1
9000895c:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000895e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008962:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90008966:	2300      	movs	r3, #0
      return HAL_ERROR;
90008968:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000896a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000896e:	e75e      	b.n	9000882e <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008970:	698b      	ldr	r3, [r1, #24]
90008972:	061b      	lsls	r3, r3, #24
90008974:	d4d2      	bmi.n	9000891c <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008976:	f7fe fa0d 	bl	90006d94 <HAL_GetTick>
9000897a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000897c:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000897e:	4287      	cmp	r7, r0
90008980:	d301      	bcc.n	90008986 <HAL_I2C_Mem_Write+0x1ce>
90008982:	2f00      	cmp	r7, #0
90008984:	d1c5      	bne.n	90008912 <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008986:	698b      	ldr	r3, [r1, #24]
90008988:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000898c:	d1c1      	bne.n	90008912 <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000898e:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008990:	2120      	movs	r1, #32
          return HAL_ERROR;
90008992:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008994:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008998:	430a      	orrs	r2, r1
9000899a:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000899c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900089a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
900089a4:	e743      	b.n	9000882e <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
900089a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900089a8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900089aa:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
900089ac:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900089ae:	684b      	ldr	r3, [r1, #4]
900089b0:	ea03 0308 	and.w	r3, r3, r8
900089b4:	4333      	orrs	r3, r6
900089b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900089ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
900089be:	604b      	str	r3, [r1, #4]
}
900089c0:	e787      	b.n	900088d2 <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
900089c2:	2001      	movs	r0, #1
900089c4:	e733      	b.n	9000882e <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
900089c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900089c8:	4812      	ldr	r0, [pc, #72]	; (90008a14 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
900089ca:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900089cc:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
900089ce:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900089d0:	6853      	ldr	r3, [r2, #4]
900089d2:	4003      	ands	r3, r0
900089d4:	4333      	orrs	r3, r6
900089d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900089da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
900089de:	6053      	str	r3, [r2, #4]
}
900089e0:	e770      	b.n	900088c4 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900089e2:	462a      	mov	r2, r5
900089e4:	4639      	mov	r1, r7
900089e6:	4620      	mov	r0, r4
900089e8:	f7ff fdb6 	bl	90008558 <I2C_WaitOnSTOPFlagUntilTimeout>
900089ec:	2800      	cmp	r0, #0
900089ee:	d1e8      	bne.n	900089c2 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900089f0:	6823      	ldr	r3, [r4, #0]
900089f2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
900089f4:	4d09      	ldr	r5, [pc, #36]	; (90008a1c <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900089f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900089f8:	685a      	ldr	r2, [r3, #4]
900089fa:	402a      	ands	r2, r5
900089fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900089fe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008a02:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008a06:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90008a0a:	e710      	b.n	9000882e <HAL_I2C_Mem_Write+0x76>
90008a0c:	fc009800 	.word	0xfc009800
90008a10:	01002000 	.word	0x01002000
90008a14:	fc009c00 	.word	0xfc009c00
90008a18:	01ff0000 	.word	0x01ff0000
90008a1c:	fe00e800 	.word	0xfe00e800

90008a20 <HAL_I2C_Mem_Read>:
{
90008a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008a24:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90008a26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90008a2a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
90008a2e:	2b20      	cmp	r3, #32
{
90008a30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
90008a32:	d137      	bne.n	90008aa4 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
90008a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90008a36:	4683      	mov	fp, r0
90008a38:	b36b      	cbz	r3, 90008a96 <HAL_I2C_Mem_Read+0x76>
90008a3a:	f1b9 0f00 	cmp.w	r9, #0
90008a3e:	d02a      	beq.n	90008a96 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
90008a40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90008a44:	2b01      	cmp	r3, #1
90008a46:	d02d      	beq.n	90008aa4 <HAL_I2C_Mem_Read+0x84>
90008a48:	2301      	movs	r3, #1
90008a4a:	460f      	mov	r7, r1
90008a4c:	4690      	mov	r8, r2
90008a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90008a52:	f7fe f99f 	bl	90006d94 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a56:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90008a5a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a5c:	699a      	ldr	r2, [r3, #24]
90008a5e:	0410      	lsls	r0, r2, #16
90008a60:	d523      	bpl.n	90008aaa <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a62:	f7fe f997 	bl	90006d94 <HAL_GetTick>
90008a66:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a68:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a6c:	2819      	cmp	r0, #25
90008a6e:	d9f5      	bls.n	90008a5c <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a70:	699a      	ldr	r2, [r3, #24]
90008a72:	0411      	lsls	r1, r2, #16
90008a74:	d5f2      	bpl.n	90008a5c <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a76:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a7a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008a7c:	2200      	movs	r2, #0
      return HAL_ERROR;
90008a7e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a80:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90008a82:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a86:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a8a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008a8e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
90008a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008a96:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90008a9a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008a9c:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
90008aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
90008aa4:	2002      	movs	r0, #2
}
90008aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
90008aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008aac:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90008aae:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008ab2:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008ab4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008ab8:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90008aba:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008abe:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008ac0:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
90008ac4:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008ac8:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90008acc:	4983      	ldr	r1, [pc, #524]	; (90008cdc <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
90008ace:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008ad2:	685a      	ldr	r2, [r3, #4]
90008ad4:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008ad6:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90008ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008adc:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90008ade:	433a      	orrs	r2, r7
90008ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90008ae4:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008ae6:	4632      	mov	r2, r6
90008ae8:	f7ff fc80 	bl	900083ec <I2C_WaitOnTXISFlagUntilTimeout>
90008aec:	2800      	cmp	r0, #0
90008aee:	f040 8091 	bne.w	90008c14 <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90008af2:	2c01      	cmp	r4, #1
90008af4:	d00c      	beq.n	90008b10 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008af6:	ea4f 2218 	mov.w	r2, r8, lsr #8
90008afa:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008afe:	4629      	mov	r1, r5
90008b00:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008b02:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008b04:	4632      	mov	r2, r6
90008b06:	f7ff fc71 	bl	900083ec <I2C_WaitOnTXISFlagUntilTimeout>
90008b0a:	2800      	cmp	r0, #0
90008b0c:	f040 8082 	bne.w	90008c14 <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90008b10:	fa5f f388 	uxtb.w	r3, r8
90008b14:	f8db 4000 	ldr.w	r4, [fp]
90008b18:	62a3      	str	r3, [r4, #40]	; 0x28
90008b1a:	1c6a      	adds	r2, r5, #1
90008b1c:	d160      	bne.n	90008be0 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b1e:	69a3      	ldr	r3, [r4, #24]
90008b20:	065b      	lsls	r3, r3, #25
90008b22:	d5fc      	bpl.n	90008b1e <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008b24:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008b28:	b29b      	uxth	r3, r3
90008b2a:	2bff      	cmp	r3, #255	; 0xff
90008b2c:	f240 80ae 	bls.w	90008c8c <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
90008b30:	6863      	ldr	r3, [r4, #4]
90008b32:	4a6a      	ldr	r2, [pc, #424]	; (90008cdc <HAL_I2C_Mem_Read+0x2bc>)
90008b34:	4013      	ands	r3, r2
90008b36:	4a6a      	ldr	r2, [pc, #424]	; (90008ce0 <HAL_I2C_Mem_Read+0x2c0>)
90008b38:	433b      	orrs	r3, r7
90008b3a:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90008b3c:	23ff      	movs	r3, #255	; 0xff
90008b3e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008b42:	6062      	str	r2, [r4, #4]
90008b44:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 90008cec <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008b48:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90008b4c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 90008cf0 <HAL_I2C_Mem_Read+0x2d0>
90008b50:	1c69      	adds	r1, r5, #1
90008b52:	d127      	bne.n	90008ba4 <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b54:	69a3      	ldr	r3, [r4, #24]
90008b56:	075a      	lsls	r2, r3, #29
90008b58:	d5fc      	bpl.n	90008b54 <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90008b5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008b5c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
90008b60:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
90008b62:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
90008b66:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
90008b6a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90008b6c:	3301      	adds	r3, #1
      hi2c->XferCount--;
90008b6e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90008b70:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
90008b74:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
90008b78:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90008b7c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b7e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90008b82:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b84:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90008b86:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008b8a:	b10a      	cbz	r2, 90008b90 <HAL_I2C_Mem_Read+0x170>
90008b8c:	2b00      	cmp	r3, #0
90008b8e:	d046      	beq.n	90008c1e <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
90008b90:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008b94:	b29b      	uxth	r3, r3
90008b96:	2b00      	cmp	r3, #0
90008b98:	f000 8088 	beq.w	90008cac <HAL_I2C_Mem_Read+0x28c>
90008b9c:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008b9e:	f8db 4000 	ldr.w	r4, [fp]
90008ba2:	d0d7      	beq.n	90008b54 <HAL_I2C_Mem_Read+0x134>
90008ba4:	69a3      	ldr	r3, [r4, #24]
90008ba6:	075b      	lsls	r3, r3, #29
90008ba8:	d4d7      	bmi.n	90008b5a <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008baa:	f7fe f8f3 	bl	90006d94 <HAL_GetTick>
90008bae:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008bb0:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008bb4:	4285      	cmp	r5, r0
90008bb6:	d301      	bcc.n	90008bbc <HAL_I2C_Mem_Read+0x19c>
90008bb8:	2d00      	cmp	r5, #0
90008bba:	d1c9      	bne.n	90008b50 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008bbc:	69a3      	ldr	r3, [r4, #24]
90008bbe:	f013 0304 	ands.w	r3, r3, #4
90008bc2:	d1c5      	bne.n	90008b50 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008bc4:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008bc8:	2120      	movs	r1, #32
          return HAL_ERROR;
90008bca:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008bcc:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008bd0:	430a      	orrs	r2, r1
90008bd2:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008bd6:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008bda:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
90008bde:	e75f      	b.n	90008aa0 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008be0:	69a3      	ldr	r3, [r4, #24]
90008be2:	0658      	lsls	r0, r3, #25
90008be4:	d49e      	bmi.n	90008b24 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008be6:	f7fe f8d5 	bl	90006d94 <HAL_GetTick>
90008bea:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008bec:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008bf0:	4285      	cmp	r5, r0
90008bf2:	d301      	bcc.n	90008bf8 <HAL_I2C_Mem_Read+0x1d8>
90008bf4:	2d00      	cmp	r5, #0
90008bf6:	d190      	bne.n	90008b1a <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008bf8:	69a3      	ldr	r3, [r4, #24]
90008bfa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90008bfe:	d18c      	bne.n	90008b1a <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008c00:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008c04:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008c06:	430a      	orrs	r2, r1
90008c08:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008c0c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008c10:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90008c14:	2300      	movs	r3, #0
      return HAL_ERROR;
90008c16:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90008c18:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
90008c1c:	e740      	b.n	90008aa0 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008c1e:	f8db 2000 	ldr.w	r2, [fp]
90008c22:	1c68      	adds	r0, r5, #1
90008c24:	d111      	bne.n	90008c4a <HAL_I2C_Mem_Read+0x22a>
90008c26:	6993      	ldr	r3, [r2, #24]
90008c28:	0619      	lsls	r1, r3, #24
90008c2a:	d5fc      	bpl.n	90008c26 <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008c2c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008c30:	b29b      	uxth	r3, r3
90008c32:	2bff      	cmp	r3, #255	; 0xff
90008c34:	d91a      	bls.n	90008c6c <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
90008c36:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008c38:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008c3c:	ea03 0308 	and.w	r3, r3, r8
90008c40:	433b      	orrs	r3, r7
90008c42:	ea43 0309 	orr.w	r3, r3, r9
90008c46:	6053      	str	r3, [r2, #4]
}
90008c48:	e7a2      	b.n	90008b90 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008c4a:	6993      	ldr	r3, [r2, #24]
90008c4c:	061b      	lsls	r3, r3, #24
90008c4e:	d4ed      	bmi.n	90008c2c <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008c50:	f7fe f8a0 	bl	90006d94 <HAL_GetTick>
90008c54:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008c56:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008c5a:	4285      	cmp	r5, r0
90008c5c:	d301      	bcc.n	90008c62 <HAL_I2C_Mem_Read+0x242>
90008c5e:	2d00      	cmp	r5, #0
90008c60:	d1df      	bne.n	90008c22 <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008c62:	6993      	ldr	r3, [r2, #24]
90008c64:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008c68:	d1db      	bne.n	90008c22 <HAL_I2C_Mem_Read+0x202>
90008c6a:	e7ab      	b.n	90008bc4 <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
90008c6c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008c70:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008c72:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90008c74:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008c78:	6853      	ldr	r3, [r2, #4]
90008c7a:	ea03 0308 	and.w	r3, r3, r8
90008c7e:	433b      	orrs	r3, r7
90008c80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008c88:	6053      	str	r3, [r2, #4]
}
90008c8a:	e781      	b.n	90008b90 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
90008c8c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008c90:	4912      	ldr	r1, [pc, #72]	; (90008cdc <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
90008c92:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008c94:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
90008c96:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008c9a:	6863      	ldr	r3, [r4, #4]
90008c9c:	400b      	ands	r3, r1
90008c9e:	433b      	orrs	r3, r7
90008ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008ca4:	4a0f      	ldr	r2, [pc, #60]	; (90008ce4 <HAL_I2C_Mem_Read+0x2c4>)
90008ca6:	431a      	orrs	r2, r3
90008ca8:	6062      	str	r2, [r4, #4]
}
90008caa:	e74b      	b.n	90008b44 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008cac:	4632      	mov	r2, r6
90008cae:	4629      	mov	r1, r5
90008cb0:	4658      	mov	r0, fp
90008cb2:	f7ff fc51 	bl	90008558 <I2C_WaitOnSTOPFlagUntilTimeout>
90008cb6:	b970      	cbnz	r0, 90008cd6 <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008cb8:	f8db 3000 	ldr.w	r3, [fp]
90008cbc:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90008cbe:	4c0a      	ldr	r4, [pc, #40]	; (90008ce8 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008cc0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90008cc2:	685a      	ldr	r2, [r3, #4]
90008cc4:	4022      	ands	r2, r4
90008cc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008cc8:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008ccc:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008cd0:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
90008cd4:	e6e4      	b.n	90008aa0 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90008cd6:	2001      	movs	r0, #1
90008cd8:	e6e2      	b.n	90008aa0 <HAL_I2C_Mem_Read+0x80>
90008cda:	bf00      	nop
90008cdc:	fc009800 	.word	0xfc009800
90008ce0:	01ff2400 	.word	0x01ff2400
90008ce4:	02002400 	.word	0x02002400
90008ce8:	fe00e800 	.word	0xfe00e800
90008cec:	fc009c00 	.word	0xfc009c00
90008cf0:	01ff0000 	.word	0x01ff0000

90008cf4 <HAL_I2C_GetState>:
  return hi2c->State;
90008cf4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90008cf8:	4770      	bx	lr
90008cfa:	bf00      	nop

90008cfc <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90008cfc:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90008cfe:	4770      	bx	lr

90008d00 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008d00:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008d04:	2a20      	cmp	r2, #32
90008d06:	d123      	bne.n	90008d50 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90008d08:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008d0c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008d10:	4603      	mov	r3, r0
90008d12:	2a01      	cmp	r2, #1
90008d14:	d01c      	beq.n	90008d50 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008d16:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d18:	2024      	movs	r0, #36	; 0x24
{
90008d1a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d1c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008d20:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90008d24:	6810      	ldr	r0, [r2, #0]
90008d26:	f020 0001 	bic.w	r0, r0, #1
90008d2a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008d2c:	6810      	ldr	r0, [r2, #0]
90008d2e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
90008d32:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90008d34:	6810      	ldr	r0, [r2, #0]
90008d36:	4301      	orrs	r1, r0

    return HAL_OK;
90008d38:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008d3a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008d3c:	6811      	ldr	r1, [r2, #0]
90008d3e:	f041 0101 	orr.w	r1, r1, #1
90008d42:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008d44:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008d48:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008d50:	2002      	movs	r0, #2
}
90008d52:	4770      	bx	lr

90008d54 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008d54:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008d58:	2a20      	cmp	r2, #32
90008d5a:	d122      	bne.n	90008da2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90008d5c:	4603      	mov	r3, r0
{
90008d5e:	b500      	push	{lr}
90008d60:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008d64:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008d68:	2a01      	cmp	r2, #1
90008d6a:	d01c      	beq.n	90008da6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008d6c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d6e:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008d70:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90008d74:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90008d78:	6810      	ldr	r0, [r2, #0]
90008d7a:	f020 0001 	bic.w	r0, r0, #1
90008d7e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90008d80:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
90008d82:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90008d86:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90008d8a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90008d8c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008d8e:	6811      	ldr	r1, [r2, #0]
90008d90:	f041 0101 	orr.w	r1, r1, #1
90008d94:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008d96:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008d9a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008da2:	2002      	movs	r0, #2
}
90008da4:	4770      	bx	lr
    return HAL_BUSY;
90008da6:	2002      	movs	r0, #2
}
90008da8:	f85d fb04 	ldr.w	pc, [sp], #4

90008dac <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008db0:	460d      	mov	r5, r1
90008db2:	4614      	mov	r4, r2
90008db4:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
90008db6:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90008db8:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90008dba:	2701      	movs	r7, #1
  p = 0;
90008dbc:	f04f 0800 	mov.w	r8, #0
90008dc0:	e006      	b.n	90008dd0 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
90008dc2:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
90008dc6:	eb06 0308 	add.w	r3, r6, r8
90008dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008dce:	d837      	bhi.n	90008e40 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008dd0:	eb05 0008 	add.w	r0, r5, r8
90008dd4:	4632      	mov	r2, r6
90008dd6:	4639      	mov	r1, r7
    while (i != 0UL)
90008dd8:	b116      	cbz	r6, 90008de0 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
90008dda:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
90008ddc:	f01a faf2 	bl	900233c4 <memset>
  for (l = 0; l < 16UL; l++)
90008de0:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
90008de2:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
90008de6:	d1ec      	bne.n	90008dc2 <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
90008de8:	2300      	movs	r3, #0
90008dea:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
90008dee:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
90008df2:	7828      	ldrb	r0, [r5, #0]
90008df4:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
90008df6:	b300      	cbz	r0, 90008e3a <JPEG_Bits_To_SizeCodes+0x8e>
90008df8:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008dfc:	2701      	movs	r7, #1
  p = 0;
90008dfe:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
90008e00:	4288      	cmp	r0, r1
90008e02:	d10f      	bne.n	90008e24 <JPEG_Bits_To_SizeCodes+0x78>
90008e04:	eb02 0008 	add.w	r0, r2, r8
90008e08:	1c56      	adds	r6, r2, #1
90008e0a:	eb05 0c02 	add.w	ip, r5, r2
90008e0e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90008e12:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
90008e14:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90008e18:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008e1a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
90008e1e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90008e20:	458e      	cmp	lr, r1
90008e22:	d0f7      	beq.n	90008e14 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
90008e24:	291f      	cmp	r1, #31
90008e26:	d80b      	bhi.n	90008e40 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008e28:	fa07 f001 	lsl.w	r0, r7, r1
90008e2c:	4298      	cmp	r0, r3
90008e2e:	d907      	bls.n	90008e40 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
90008e30:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
90008e32:	005b      	lsls	r3, r3, #1
    si++;
90008e34:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
90008e36:	2800      	cmp	r0, #0
90008e38:	d1e2      	bne.n	90008e00 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90008e3a:	2000      	movs	r0, #0
}
90008e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
90008e40:	2001      	movs	r0, #1
}
90008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90008e46:	bf00      	nop

90008e48 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90008e48:	b5f0      	push	{r4, r5, r6, r7, lr}
90008e4a:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
90008e4e:	460d      	mov	r5, r1
90008e50:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008e52:	ab01      	add	r3, sp, #4
90008e54:	aa43      	add	r2, sp, #268	; 0x10c
90008e56:	a902      	add	r1, sp, #8
90008e58:	f7ff ffa8 	bl	90008dac <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008e5c:	b9d0      	cbnz	r0, 90008e94 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
90008e5e:	9f01      	ldr	r7, [sp, #4]
90008e60:	b1c7      	cbz	r7, 90008e94 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
90008e62:	370f      	adds	r7, #15
90008e64:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90008e68:	a902      	add	r1, sp, #8
90008e6a:	f104 0c0f 	add.w	ip, r4, #15
90008e6e:	4427      	add	r7, r4
90008e70:	e009      	b.n	90008e86 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e72:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
90008e76:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e78:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e7c:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e80:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008e82:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
90008e84:	d006      	beq.n	90008e94 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
90008e86:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008e8a:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008e8c:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008e90:	d9ef      	bls.n	90008e72 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008e92:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008e94:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008e9a:	bf00      	nop

90008e9c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008ea0:	6804      	ldr	r4, [r0, #0]
{
90008ea2:	b093      	sub	sp, #76	; 0x4c
90008ea4:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008ea6:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
90008eaa:	429a      	cmp	r2, r3
90008eac:	f000 809d 	beq.w	90008fea <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90008eb0:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
90008eb4:	429a      	cmp	r2, r3
90008eb6:	d003      	beq.n	90008ec0 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008eb8:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008eba:	b013      	add	sp, #76	; 0x4c
90008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008ec0:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
90008ec4:	a903      	add	r1, sp, #12
90008ec6:	f7ff ffbf 	bl	90008e48 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008eca:	2800      	cmp	r0, #0
90008ecc:	d1f5      	bne.n	90008eba <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
90008ece:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ed2:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ed6:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
90008eda:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008edc:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
90008ee0:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ee2:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
90008ee6:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008eea:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
90008eee:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ef2:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
90008ef6:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008ef8:	f89d 9015 	ldrb.w	r9, [sp, #21]
90008efc:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f00:	f89d c014 	ldrb.w	ip, [sp, #20]
90008f04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f08:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f0c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f10:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f14:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f16:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90008f1e:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
90008f22:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f26:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f2a:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f2e:	f89d 7011 	ldrb.w	r7, [sp, #17]
90008f32:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f36:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
90008f38:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f3c:	f89d 2010 	ldrb.w	r2, [sp, #16]
90008f40:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f44:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
90008f46:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f4a:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f4c:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
90008f50:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f54:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f58:	f89d 600f 	ldrb.w	r6, [sp, #15]
90008f5c:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f60:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f64:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f66:	9b01      	ldr	r3, [sp, #4]
90008f68:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f6c:	f89d 500d 	ldrb.w	r5, [sp, #13]
90008f70:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f74:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
90008f78:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f7c:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
90008f7e:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f82:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f86:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90008f8a:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f8e:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f92:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008f96:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
90008f9a:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
90008f9e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
90008fa2:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fa6:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
90008faa:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fac:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90008fb0:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
90008fb2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90008fb6:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fba:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
90008fbe:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fc0:	f89d 2020 	ldrb.w	r2, [sp, #32]
90008fc4:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
90008fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90008fca:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fce:	f89d 301c 	ldrb.w	r3, [sp, #28]
90008fd2:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008fd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
90008fd8:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
90008fdc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
90008fe0:	f844 3c18 	str.w	r3, [r4, #-24]
}
90008fe4:	b013      	add	sp, #76	; 0x4c
90008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008fea:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
90008fee:	e769      	b.n	90008ec4 <JPEG_Set_HuffDC_Mem+0x28>

90008ff0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
90008ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008ff4:	6804      	ldr	r4, [r0, #0]
{
90008ff6:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
90008ffa:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008ffc:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90009000:	429a      	cmp	r2, r3
90009002:	d042      	beq.n	9000908a <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
90009004:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
90009008:	429a      	cmp	r2, r3
9000900a:	d004      	beq.n	90009016 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000900c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000900e:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90009012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90009016:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000901a:	4628      	mov	r0, r5
9000901c:	466b      	mov	r3, sp
9000901e:	f20d 4234 	addw	r2, sp, #1076	; 0x434
90009022:	a901      	add	r1, sp, #4
90009024:	f7ff fec2 	bl	90008dac <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90009028:	2800      	cmp	r0, #0
9000902a:	d1f0      	bne.n	9000900e <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000902c:	9b00      	ldr	r3, [sp, #0]
9000902e:	b37b      	cbz	r3, 90009090 <JPEG_Set_HuffAC_Mem+0xa0>
90009030:	330f      	adds	r3, #15
90009032:	f20d 4734 	addw	r7, sp, #1076	; 0x434
90009036:	f10d 0c04 	add.w	ip, sp, #4
9000903a:	f105 020f 	add.w	r2, r5, #15
9000903e:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90009042:	ae42      	add	r6, sp, #264	; 0x108
90009044:	e011      	b.n	9000906a <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
90009046:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000904a:	2ba1      	cmp	r3, #161	; 0xa1
9000904c:	d8de      	bhi.n	9000900c <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000904e:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90009052:	eb06 0883 	add.w	r8, r6, r3, lsl #2
90009056:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000905a:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000905c:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90009060:	4631      	mov	r1, r6
90009062:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90009066:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
90009068:	d013      	beq.n	90009092 <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000906a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000906e:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
90009070:	2900      	cmp	r1, #0
90009072:	d0ec      	beq.n	9000904e <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
90009074:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
90009076:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000907a:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000907c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
90009080:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90009084:	d1df      	bne.n	90009046 <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
90009086:	23a1      	movs	r3, #161	; 0xa1
90009088:	e7e1      	b.n	9000904e <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000908a:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000908e:	e7c4      	b.n	9000901a <JPEG_Set_HuffAC_Mem+0x2a>
90009090:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
90009092:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
90009096:	4a1a      	ldr	r2, [pc, #104]	; (90009100 <JPEG_Set_HuffAC_Mem+0x110>)
90009098:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000909c:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
900090a0:	6023      	str	r3, [r4, #0]
900090a2:	6063      	str	r3, [r4, #4]
900090a4:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
900090a8:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
900090aa:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
900090ae:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
900090b0:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
900090b4:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
900090b8:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
900090ba:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
900090be:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
900090c0:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
900090c4:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090c6:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090ca:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090ce:	0212      	lsls	r2, r2, #8
900090d0:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090d4:	021b      	lsls	r3, r3, #8
900090d6:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090da:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
900090de:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090e4:	433a      	orrs	r2, r7
    while (i > 1UL)
900090e6:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900090e8:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
900090ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900090f0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
900090f4:	d1e7      	bne.n	900090c6 <JPEG_Set_HuffAC_Mem+0xd6>
}
900090f6:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900090fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900090fe:	bf00      	nop
90009100:	0fd10fd0 	.word	0x0fd10fd0

90009104 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
90009104:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009106:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000910a:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000910c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000910e:	f003 0303 	and.w	r3, r3, #3
90009112:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90009114:	6803      	ldr	r3, [r0, #0]
90009116:	685a      	ldr	r2, [r3, #4]
90009118:	bf0c      	ite	eq
9000911a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000911e:	f022 0208 	bicne.w	r2, r2, #8
90009122:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009124:	681a      	ldr	r2, [r3, #0]
90009126:	f022 0201 	bic.w	r2, r2, #1
9000912a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000912c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000912e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009132:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90009134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000913a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000913c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000913e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90009142:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009146:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000914a:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000914c:	681a      	ldr	r2, [r3, #0]
9000914e:	f042 0201 	orr.w	r2, r2, #1
90009152:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009154:	6d42      	ldr	r2, [r0, #84]	; 0x54
90009156:	f002 020c 	and.w	r2, r2, #12
9000915a:	2a08      	cmp	r2, #8
9000915c:	d00a      	beq.n	90009174 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000915e:	6d42      	ldr	r2, [r0, #84]	; 0x54
90009160:	f002 020c 	and.w	r2, r2, #12
90009164:	2a0c      	cmp	r2, #12
90009166:	d000      	beq.n	9000916a <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90009168:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000916a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000916c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009170:	631a      	str	r2, [r3, #48]	; 0x30
}
90009172:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
90009174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009176:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000917a:	631a      	str	r2, [r3, #48]	; 0x30
9000917c:	4770      	bx	lr
9000917e:	bf00      	nop

90009180 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009180:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009182:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
90009184:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009186:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
90009188:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000918a:	42aa      	cmp	r2, r5
9000918c:	d32d      	bcc.n	900091ea <JPEG_DMA_StartProcess+0x6a>
9000918e:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009190:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009194:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90009196:	42b3      	cmp	r3, r6
90009198:	d327      	bcc.n	900091ea <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000919a:	4f1b      	ldr	r7, [pc, #108]	; (90009208 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000919c:	f8df c074 	ldr.w	ip, [pc, #116]	; 90009214 <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
900091a0:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
900091a2:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
900091a6:	4919      	ldr	r1, [pc, #100]	; (9000920c <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
900091a8:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
900091aa:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
900091ac:	4918      	ldr	r1, [pc, #96]	; (90009210 <JPEG_DMA_StartProcess+0x90>)
900091ae:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
900091b0:	b1a5      	cbz	r5, 900091dc <JPEG_DMA_StartProcess+0x5c>
900091b2:	b19e      	cbz	r6, 900091dc <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900091b4:	fbb2 f1f5 	udiv	r1, r2, r5
900091b8:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900091bc:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900091be:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900091c0:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900091c2:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900091c4:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
900091c6:	fbb3 f2f6 	udiv	r2, r3, r6
900091ca:	fb06 3212 	mls	r2, r6, r2, r3
900091ce:	1a9b      	subs	r3, r3, r2
900091d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900091d2:	9500      	str	r5, [sp, #0]
900091d4:	69e2      	ldr	r2, [r4, #28]
900091d6:	f001 fbb5 	bl	9000a944 <HAL_MDMA_Start_IT>
900091da:	b148      	cbz	r0, 900091f0 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900091dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
900091de:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900091e0:	f043 0304 	orr.w	r3, r3, #4
900091e4:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
900091e6:	b003      	add	sp, #12
900091e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
900091ea:	2001      	movs	r0, #1
}
900091ec:	b003      	add	sp, #12
900091ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900091f0:	6822      	ldr	r2, [r4, #0]
900091f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900091f4:	69a1      	ldr	r1, [r4, #24]
900091f6:	3240      	adds	r2, #64	; 0x40
900091f8:	9500      	str	r5, [sp, #0]
900091fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
900091fc:	f001 fba2 	bl	9000a944 <HAL_MDMA_Start_IT>
90009200:	2800      	cmp	r0, #0
90009202:	d0f3      	beq.n	900091ec <JPEG_DMA_StartProcess+0x6c>
90009204:	e7ea      	b.n	900091dc <JPEG_DMA_StartProcess+0x5c>
90009206:	bf00      	nop
90009208:	90009739 	.word	0x90009739
9000920c:	900099b1 	.word	0x900099b1
90009210:	90009a31 	.word	0x90009a31
90009214:	90009765 	.word	0x90009765

90009218 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90009218:	6803      	ldr	r3, [r0, #0]
9000921a:	685a      	ldr	r2, [r3, #4]
9000921c:	f002 0203 	and.w	r2, r2, #3
90009220:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
90009222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90009226:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90009228:	f000 8094 	beq.w	90009354 <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000922c:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000922e:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90009230:	f014 0403 	ands.w	r4, r4, #3
90009234:	d172      	bne.n	9000931c <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90009236:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90009238:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000923a:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000923c:	68da      	ldr	r2, [r3, #12]
9000923e:	0c12      	lsrs	r2, r2, #16
90009240:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
90009242:	4a5f      	ldr	r2, [pc, #380]	; (900093c0 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
90009244:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
90009248:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
9000924c:	2600      	movs	r6, #0
9000924e:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009252:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
90009256:	f241 3488 	movw	r4, #5000	; 0x1388
9000925a:	e033      	b.n	900092c4 <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000925c:	f892 8001 	ldrb.w	r8, [r2, #1]
90009260:	fb0e f707 	mul.w	r7, lr, r7
90009264:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90009266:	f811 8008 	ldrb.w	r8, [r1, r8]
9000926a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000926e:	2f64      	cmp	r7, #100	; 0x64
90009270:	d961      	bls.n	90009336 <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
90009272:	fbb4 f7f7 	udiv	r7, r4, r7
90009276:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009278:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000927c:	2f01      	cmp	r7, #1
9000927e:	d03d      	beq.n	900092fc <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009280:	f892 8002 	ldrb.w	r8, [r2, #2]
90009284:	fb0e f707 	mul.w	r7, lr, r7
90009288:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000928a:	f811 8008 	ldrb.w	r8, [r1, r8]
9000928e:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90009292:	2f64      	cmp	r7, #100	; 0x64
90009294:	d94a      	bls.n	9000932c <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
90009296:	fbb4 f7f7 	udiv	r7, r4, r7
9000929a:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000929c:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000929e:	2b01      	cmp	r3, #1
900092a0:	d030      	beq.n	90009304 <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900092a2:	78d7      	ldrb	r7, [r2, #3]
900092a4:	fb0e f303 	mul.w	r3, lr, r3
900092a8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900092aa:	5dcf      	ldrb	r7, [r1, r7]
900092ac:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
900092b0:	2b64      	cmp	r3, #100	; 0x64
900092b2:	d94a      	bls.n	9000934a <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
900092b4:	fbb4 f3f3 	udiv	r3, r4, r3
900092b8:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900092ba:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
900092bc:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900092c0:	4295      	cmp	r5, r2
900092c2:	d025      	beq.n	90009310 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
900092c4:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092c8:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
900092ca:	2f01      	cmp	r7, #1
900092cc:	d02c      	beq.n	90009328 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900092ce:	f892 8000 	ldrb.w	r8, [r2]
900092d2:	fb0e f707 	mul.w	r7, lr, r7
900092d6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900092d8:	f811 8008 	ldrb.w	r8, [r1, r8]
900092dc:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900092e0:	2f64      	cmp	r7, #100	; 0x64
900092e2:	d92d      	bls.n	90009340 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
900092e4:	fbb4 f7f7 	udiv	r7, r4, r7
900092e8:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092ea:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
900092ee:	2f01      	cmp	r7, #1
900092f0:	d1b4      	bne.n	9000925c <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092f2:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900092f6:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900092f8:	2f01      	cmp	r7, #1
900092fa:	d1c1      	bne.n	90009280 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900092fc:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
900092fe:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
90009300:	2b01      	cmp	r3, #1
90009302:	d1ce      	bne.n	900092a2 <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90009304:	3204      	adds	r2, #4
        quality += 100UL;
90009306:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
90009308:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000930c:	4295      	cmp	r5, r2
9000930e:	d1d9      	bne.n	900092c4 <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
90009310:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
90009312:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
90009314:	f8c9 6010 	str.w	r6, [r9, #16]
}
90009318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000931c:	f002 0203 	and.w	r2, r2, #3
90009320:	2a03      	cmp	r2, #3
90009322:	d14a      	bne.n	900093ba <HAL_JPEG_GetInfo.part.0+0x1a2>
90009324:	2430      	movs	r4, #48	; 0x30
90009326:	e016      	b.n	90009356 <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
90009328:	3664      	adds	r6, #100	; 0x64
9000932a:	e7de      	b.n	900092ea <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
9000932c:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90009330:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90009334:	e7b2      	b.n	9000929c <HAL_JPEG_GetInfo.part.0+0x84>
90009336:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000933a:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000933e:	e79b      	b.n	90009278 <HAL_JPEG_GetInfo.part.0+0x60>
90009340:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90009344:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90009348:	e7cf      	b.n	900092ea <HAL_JPEG_GetInfo.part.0+0xd2>
9000934a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000934e:	eb06 0653 	add.w	r6, r6, r3, lsr #1
90009352:	e7b2      	b.n	900092ba <HAL_JPEG_GetInfo.part.0+0xa2>
90009354:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90009356:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90009358:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000935c:	0c12      	lsrs	r2, r2, #16
9000935e:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009362:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90009364:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90009366:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009368:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000936a:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000936c:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009370:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90009374:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90009378:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000937c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90009380:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009384:	d108      	bne.n	90009398 <HAL_JPEG_GetInfo.part.0+0x180>
90009386:	2d01      	cmp	r5, #1
90009388:	d106      	bne.n	90009398 <HAL_JPEG_GetInfo.part.0+0x180>
9000938a:	f016 0f0f 	tst.w	r6, #15
9000938e:	bf0c      	ite	eq
90009390:	2401      	moveq	r4, #1
90009392:	2400      	movne	r4, #0
90009394:	0064      	lsls	r4, r4, #1
90009396:	e754      	b.n	90009242 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009398:	ea42 020c 	orr.w	r2, r2, ip
9000939c:	f012 040f 	ands.w	r4, r2, #15
900093a0:	f43f af4f 	beq.w	90009242 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900093a4:	ea4c 0206 	orr.w	r2, ip, r6
900093a8:	f3c2 0203 	ubfx	r2, r2, #0, #4
900093ac:	2d03      	cmp	r5, #3
900093ae:	bf08      	it	eq
900093b0:	2a00      	cmpeq	r2, #0
900093b2:	bf0c      	ite	eq
900093b4:	2401      	moveq	r4, #1
900093b6:	2400      	movne	r4, #0
900093b8:	e743      	b.n	90009242 <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
900093ba:	2001      	movs	r0, #1
}
900093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900093c0:	900267b0 	.word	0x900267b0

900093c4 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
900093c4:	2800      	cmp	r0, #0
900093c6:	f000 810b 	beq.w	900095e0 <HAL_JPEG_Init+0x21c>
{
900093ca:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
900093cc:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
900093d0:	4604      	mov	r4, r0
900093d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900093d6:	2b00      	cmp	r3, #0
900093d8:	f000 80fd 	beq.w	900095d6 <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
900093dc:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900093de:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
900093e0:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
900093e2:	4880      	ldr	r0, [pc, #512]	; (900095e4 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
900093e4:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
900093e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
900093ea:	f041 0101 	orr.w	r1, r1, #1
900093ee:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900093f0:	6811      	ldr	r1, [r2, #0]
900093f2:	f021 0101 	bic.w	r1, r1, #1
900093f6:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900093f8:	6b11      	ldr	r1, [r2, #48]	; 0x30
900093fa:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
900093fe:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90009400:	6b11      	ldr	r1, [r2, #48]	; 0x30
90009402:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
90009406:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90009408:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000940a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000940e:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009410:	6b91      	ldr	r1, [r2, #56]	; 0x38
90009412:	f041 0160 	orr.w	r1, r1, #96	; 0x60
90009416:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90009418:	4973      	ldr	r1, [pc, #460]	; (900095e8 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000941a:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000941c:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000941e:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90009420:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90009424:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
90009428:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000942c:	4b6f      	ldr	r3, [pc, #444]	; (900095ec <HAL_JPEG_Init+0x228>)
9000942e:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
90009432:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009436:	486e      	ldr	r0, [pc, #440]	; (900095f0 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90009438:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000943c:	4b6d      	ldr	r3, [pc, #436]	; (900095f4 <HAL_JPEG_Init+0x230>)
9000943e:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
90009442:	496d      	ldr	r1, [pc, #436]	; (900095f8 <HAL_JPEG_Init+0x234>)
90009444:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90009448:	4b6c      	ldr	r3, [pc, #432]	; (900095fc <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000944a:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000944e:	486c      	ldr	r0, [pc, #432]	; (90009600 <HAL_JPEG_Init+0x23c>)
90009450:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
90009454:	496b      	ldr	r1, [pc, #428]	; (90009604 <HAL_JPEG_Init+0x240>)
90009456:	4b6c      	ldr	r3, [pc, #432]	; (90009608 <HAL_JPEG_Init+0x244>)
90009458:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000945c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
90009460:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90009464:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
90009468:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000946c:	4967      	ldr	r1, [pc, #412]	; (9000960c <HAL_JPEG_Init+0x248>)
9000946e:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
90009470:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90009474:	430b      	orrs	r3, r1
  *address = value;
90009476:	4966      	ldr	r1, [pc, #408]	; (90009610 <HAL_JPEG_Init+0x24c>)
90009478:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000947c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90009480:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
90009484:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009486:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000948a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000948c:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90009490:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
90009494:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009496:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000949a:	ea43 030c 	orr.w	r3, r3, ip
9000949e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900094a2:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
900094a6:	d1eb      	bne.n	90009480 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
900094a8:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094ac:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
900094b0:	4856      	ldr	r0, [pc, #344]	; (9000960c <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094b2:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
900094b4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
900094b6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
900094ba:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
900094be:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900094c2:	4003      	ands	r3, r0
  *address = value;
900094c4:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900094c8:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
900094cc:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
900094d0:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900094d4:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
900094d8:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
900094dc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
900094de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900094e2:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
900094e6:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
900094ea:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
900094ec:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900094ee:	4b49      	ldr	r3, [pc, #292]	; (90009614 <HAL_JPEG_Init+0x250>)
  *address = value;
900094f0:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
900094f4:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900094f8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
900094fc:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
90009500:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
90009504:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90009508:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000950a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000950e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
90009512:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
90009516:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009518:	483f      	ldr	r0, [pc, #252]	; (90009618 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000951a:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000951c:	4b3f      	ldr	r3, [pc, #252]	; (9000961c <HAL_JPEG_Init+0x258>)
  *address = value;
9000951e:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009522:	493f      	ldr	r1, [pc, #252]	; (90009620 <HAL_JPEG_Init+0x25c>)
90009524:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90009528:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000952c:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
90009530:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
90009534:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90009538:	493a      	ldr	r1, [pc, #232]	; (90009624 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000953a:	b29b      	uxth	r3, r3
9000953c:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90009540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90009544:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90009548:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000954c:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000954e:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90009552:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90009554:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90009558:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000955c:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000955e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
90009562:	ea43 030e 	orr.w	r3, r3, lr
90009566:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000956a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000956e:	d1eb      	bne.n	90009548 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
90009570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009574:	4926      	ldr	r1, [pc, #152]	; (90009610 <HAL_JPEG_Init+0x24c>)
90009576:	4620      	mov	r0, r4
90009578:	f7ff fd3a 	bl	90008ff0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000957c:	b118      	cbz	r0, 90009586 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000957e:	2301      	movs	r3, #1
    return HAL_ERROR;
90009580:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90009582:	6523      	str	r3, [r4, #80]	; 0x50
}
90009584:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
90009586:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90009588:	4620      	mov	r0, r4
9000958a:	4926      	ldr	r1, [pc, #152]	; (90009624 <HAL_JPEG_Init+0x260>)
9000958c:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
90009590:	f7ff fd2e 	bl	90008ff0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90009594:	2800      	cmp	r0, #0
90009596:	d1f2      	bne.n	9000957e <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
90009598:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000959a:	4620      	mov	r0, r4
9000959c:	4922      	ldr	r1, [pc, #136]	; (90009628 <HAL_JPEG_Init+0x264>)
9000959e:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
900095a2:	f7ff fc7b 	bl	90008e9c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
900095a6:	2800      	cmp	r0, #0
900095a8:	d1e9      	bne.n	9000957e <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
900095aa:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
900095ac:	4620      	mov	r0, r4
900095ae:	491f      	ldr	r1, [pc, #124]	; (9000962c <HAL_JPEG_Init+0x268>)
900095b0:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
900095b4:	f7ff fc72 	bl	90008e9c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
900095b8:	2800      	cmp	r0, #0
900095ba:	d1e0      	bne.n	9000957e <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900095bc:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
900095be:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
900095c0:	6853      	ldr	r3, [r2, #4]
900095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900095c6:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
900095c8:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
900095ca:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
900095cc:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
900095d0:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
900095d2:	6560      	str	r0, [r4, #84]	; 0x54
}
900095d4:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
900095d6:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
900095da:	f7fb f8e7 	bl	900047ac <HAL_JPEG_MspInit>
900095de:	e6fd      	b.n	900093dc <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
900095e0:	2001      	movs	r0, #1
}
900095e2:	4770      	bx	lr
900095e4:	90026770 	.word	0x90026770
900095e8:	900266f8 	.word	0x900266f8
900095ec:	01050100 	.word	0x01050100
900095f0:	0b0a0908 	.word	0x0b0a0908
900095f4:	07060504 	.word	0x07060504
900095f8:	03020100 	.word	0x03020100
900095fc:	7d010000 	.word	0x7d010000
90009600:	04040505 	.word	0x04040505
90009604:	03040203 	.word	0x03040203
90009608:	03010200 	.word	0x03010200
9000960c:	ffff0000 	.word	0xffff0000
90009610:	90026644 	.word	0x90026644
90009614:	09080706 	.word	0x09080706
90009618:	01000404 	.word	0x01000404
9000961c:	04040201 	.word	0x04040201
90009620:	05070403 	.word	0x05070403
90009624:	90026590 	.word	0x90026590
90009628:	90026754 	.word	0x90026754
9000962c:	90026738 	.word	0x90026738

90009630 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90009630:	2b00      	cmp	r3, #0
90009632:	bf18      	it	ne
90009634:	2900      	cmpne	r1, #0
90009636:	d03b      	beq.n	900096b0 <HAL_JPEG_Decode_DMA+0x80>
{
90009638:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000963a:	fab0 f580 	clz	r5, r0
9000963e:	4604      	mov	r4, r0
90009640:	096d      	lsrs	r5, r5, #5
90009642:	b330      	cbz	r0, 90009692 <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
90009644:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
90009648:	f1bc 0f01 	cmp.w	ip, #1
9000964c:	d02e      	beq.n	900096ac <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000964e:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
90009652:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90009656:	45f4      	cmp	ip, lr
90009658:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000965c:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90009660:	d119      	bne.n	90009696 <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
90009662:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90009664:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90009668:	9b04      	ldr	r3, [sp, #16]
9000966a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000966c:	2304      	movs	r3, #4
9000966e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
90009672:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009674:	f023 030f 	bic.w	r3, r3, #15
90009678:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000967a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000967c:	f043 030e 	orr.w	r3, r3, #14
90009680:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
90009682:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90009684:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
90009686:	f7ff fd3d 	bl	90009104 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000968a:	f7ff fd79 	bl	90009180 <JPEG_DMA_StartProcess>
9000968e:	b930      	cbnz	r0, 9000969e <HAL_JPEG_Decode_DMA+0x6e>
}
90009690:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009692:	2001      	movs	r0, #1
}
90009694:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
90009696:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
90009698:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000969c:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000969e:	2306      	movs	r3, #6
      return HAL_ERROR;
900096a0:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
900096a2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
900096a6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
900096aa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
900096ac:	2002      	movs	r0, #2
}
900096ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900096b0:	2001      	movs	r0, #1
}
900096b2:	4770      	bx	lr

900096b4 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900096b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096b6:	f003 030c 	and.w	r3, r3, #12
900096ba:	2b0c      	cmp	r3, #12
900096bc:	d01a      	beq.n	900096f4 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900096be:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096c0:	f003 030c 	and.w	r3, r3, #12
900096c4:	2b08      	cmp	r3, #8
900096c6:	d001      	beq.n	900096cc <HAL_JPEG_Pause+0x18>
}
900096c8:	2000      	movs	r0, #0
900096ca:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900096cc:	07ca      	lsls	r2, r1, #31
900096ce:	d41f      	bmi.n	90009710 <HAL_JPEG_Pause+0x5c>
900096d0:	f04f 3cff 	mov.w	ip, #4294967295
900096d4:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900096d8:	078b      	lsls	r3, r1, #30
900096da:	d504      	bpl.n	900096e6 <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
900096dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096de:	4694      	mov	ip, r2
900096e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900096e4:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900096e6:	6802      	ldr	r2, [r0, #0]
}
900096e8:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
900096ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
900096ec:	ea03 030c 	and.w	r3, r3, ip
900096f0:	6313      	str	r3, [r2, #48]	; 0x30
}
900096f2:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900096f4:	07cb      	lsls	r3, r1, #31
900096f6:	d503      	bpl.n	90009700 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
900096f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900096fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900096fe:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009700:	0789      	lsls	r1, r1, #30
90009702:	d5e1      	bpl.n	900096c8 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90009704:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000970a:	6543      	str	r3, [r0, #84]	; 0x54
}
9000970c:	2000      	movs	r0, #0
9000970e:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009710:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009712:	f06f 0c06 	mvn.w	ip, #6
90009716:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000971a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000971e:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90009720:	e7da      	b.n	900096d8 <HAL_JPEG_Pause+0x24>
90009722:	bf00      	nop

90009724 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90009724:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
90009726:	6282      	str	r2, [r0, #40]	; 0x28
}
90009728:	4770      	bx	lr
9000972a:	bf00      	nop

9000972c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000972c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000972e:	62c2      	str	r2, [r0, #44]	; 0x2c
}
90009730:	4770      	bx	lr
90009732:	bf00      	nop

90009734 <HAL_JPEG_EncodeCpltCallback>:
90009734:	4770      	bx	lr
90009736:	bf00      	nop

90009738 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009738:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000973a:	2101      	movs	r1, #1
{
9000973c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000973e:	6803      	ldr	r3, [r0, #0]
90009740:	681a      	ldr	r2, [r3, #0]
90009742:	f022 0201 	bic.w	r2, r2, #1
90009746:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000974a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000974e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
90009750:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009754:	6d03      	ldr	r3, [r0, #80]	; 0x50
90009756:	f043 0304 	orr.w	r3, r3, #4
9000975a:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000975c:	f7f8 f86e 	bl	9000183c <HAL_JPEG_ErrorCallback>
}
90009760:	bd08      	pop	{r3, pc}
90009762:	bf00      	nop

90009764 <JPEG_MDMAInCpltCallback>:
{
90009764:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009766:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90009768:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000976c:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000976e:	6822      	ldr	r2, [r4, #0]
90009770:	6b13      	ldr	r3, [r2, #48]	; 0x30
90009772:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
90009776:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90009778:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000977a:	400b      	ands	r3, r1
9000977c:	2b0c      	cmp	r3, #12
9000977e:	d001      	beq.n	90009784 <JPEG_MDMAInCpltCallback+0x20>
}
90009780:	b003      	add	sp, #12
90009782:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009784:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009786:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000978a:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000978c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000978e:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009792:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009794:	1a9b      	subs	r3, r3, r2
90009796:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009798:	6a21      	ldr	r1, [r4, #32]
9000979a:	f7f7 ffe7 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000979e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900097a0:	42ab      	cmp	r3, r5
900097a2:	d311      	bcc.n	900097c8 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
900097a4:	b305      	cbz	r5, 900097e8 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900097a6:	fbb3 f2f5 	udiv	r2, r3, r5
900097aa:	fb05 3212 	mls	r2, r5, r2, r3
900097ae:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900097b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
900097b2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900097b4:	04d1      	lsls	r1, r2, #19
900097b6:	d400      	bmi.n	900097ba <JPEG_MDMAInCpltCallback+0x56>
900097b8:	b963      	cbnz	r3, 900097d4 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900097ba:	6822      	ldr	r2, [r4, #0]
900097bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
900097be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
900097c2:	6313      	str	r3, [r2, #48]	; 0x30
}
900097c4:	b003      	add	sp, #12
900097c6:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
900097c8:	b1cb      	cbz	r3, 900097fe <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
900097ca:	0798      	lsls	r0, r3, #30
900097cc:	d119      	bne.n	90009802 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900097ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
900097d0:	04d2      	lsls	r2, r2, #19
900097d2:	d4f2      	bmi.n	900097ba <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900097d4:	6822      	ldr	r2, [r4, #0]
900097d6:	2501      	movs	r5, #1
900097d8:	69a1      	ldr	r1, [r4, #24]
900097da:	6b20      	ldr	r0, [r4, #48]	; 0x30
900097dc:	3240      	adds	r2, #64	; 0x40
900097de:	9500      	str	r5, [sp, #0]
900097e0:	f001 f8b0 	bl	9000a944 <HAL_MDMA_Start_IT>
900097e4:	2800      	cmp	r0, #0
900097e6:	d0e8      	beq.n	900097ba <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900097e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
900097ea:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
900097ec:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900097ee:	f043 0304 	orr.w	r3, r3, #4
900097f2:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
900097f4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
900097f8:	f7f8 f820 	bl	9000183c <HAL_JPEG_ErrorCallback>
        return;
900097fc:	e7c0      	b.n	90009780 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
900097fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009800:	e7db      	b.n	900097ba <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90009802:	f023 0303 	bic.w	r3, r3, #3
90009806:	3304      	adds	r3, #4
90009808:	e7d2      	b.n	900097b0 <JPEG_MDMAInCpltCallback+0x4c>
9000980a:	bf00      	nop

9000980c <JPEG_DMA_PollResidualData>:
{
9000980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000980e:	6802      	ldr	r2, [r0, #0]
90009810:	2610      	movs	r6, #16
{
90009812:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009814:	6d65      	ldr	r5, [r4, #84]	; 0x54
90009816:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000981a:	d11d      	bne.n	90009858 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000981c:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000981e:	06df      	lsls	r7, r3, #27
90009820:	d51a      	bpl.n	90009858 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90009822:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90009824:	69e7      	ldr	r7, [r4, #28]
90009826:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90009828:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000982a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000982c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000982e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90009830:	6a67      	ldr	r7, [r4, #36]	; 0x24
90009832:	69e2      	ldr	r2, [r4, #28]
90009834:	443a      	add	r2, r7
90009836:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90009838:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000983a:	69e2      	ldr	r2, [r4, #28]
9000983c:	4402      	add	r2, r0
9000983e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90009840:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009842:	69e2      	ldr	r2, [r4, #28]
90009844:	440a      	add	r2, r1
90009846:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90009848:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000984a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000984c:	3304      	adds	r3, #4
9000984e:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009850:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009852:	4293      	cmp	r3, r2
90009854:	d021      	beq.n	9000989a <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90009856:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90009858:	3e01      	subs	r6, #1
9000985a:	d1db      	bne.n	90009814 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000985c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000985e:	6b53      	ldr	r3, [r2, #52]	; 0x34
90009860:	06d8      	lsls	r0, r3, #27
90009862:	d501      	bpl.n	90009868 <JPEG_DMA_PollResidualData+0x5c>
90009864:	048b      	lsls	r3, r1, #18
90009866:	d417      	bmi.n	90009898 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009868:	6813      	ldr	r3, [r2, #0]
9000986a:	f023 0301 	bic.w	r3, r3, #1
9000986e:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90009870:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009872:	b9eb      	cbnz	r3, 900098b0 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90009874:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90009876:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009878:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000987a:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000987c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009880:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009884:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009888:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000988a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000988c:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000988e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009892:	d00a      	beq.n	900098aa <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009894:	f7ff ff4e 	bl	90009734 <HAL_JPEG_EncodeCpltCallback>
}
90009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000989a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000989c:	4620      	mov	r0, r4
9000989e:	69e1      	ldr	r1, [r4, #28]
900098a0:	f7f7 ff84 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
900098a4:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
900098a6:	6265      	str	r5, [r4, #36]	; 0x24
900098a8:	e7d6      	b.n	90009858 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900098aa:	f7f7 ffc9 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
900098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900098b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900098b2:	4620      	mov	r0, r4
900098b4:	69e1      	ldr	r1, [r4, #28]
900098b6:	f7f7 ff79 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900098ba:	2300      	movs	r3, #0
900098bc:	6263      	str	r3, [r4, #36]	; 0x24
900098be:	e7d9      	b.n	90009874 <JPEG_DMA_PollResidualData+0x68>

900098c0 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
900098c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
900098c2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
900098c6:	d028      	beq.n	9000991a <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900098c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
900098ca:	f003 030c 	and.w	r3, r3, #12
900098ce:	2b0c      	cmp	r3, #12
{
900098d0:	b570      	push	{r4, r5, r6, lr}
900098d2:	4604      	mov	r4, r0
900098d4:	b082      	sub	sp, #8
900098d6:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900098d8:	d007      	beq.n	900098ea <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900098da:	6d43      	ldr	r3, [r0, #84]	; 0x54
900098dc:	f003 030c 	and.w	r3, r3, #12
900098e0:	2b08      	cmp	r3, #8
900098e2:	d037      	beq.n	90009954 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
900098e4:	2000      	movs	r0, #0
}
900098e6:	b002      	add	sp, #8
900098e8:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900098ea:	07c8      	lsls	r0, r1, #31
900098ec:	d417      	bmi.n	9000991e <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900098ee:	07a9      	lsls	r1, r5, #30
900098f0:	d5f8      	bpl.n	900098e4 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
900098f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900098f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
900098f8:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
900098fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
900098fc:	041a      	lsls	r2, r3, #16
900098fe:	d453      	bmi.n	900099a8 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009900:	6b60      	ldr	r0, [r4, #52]	; 0x34
90009902:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
90009904:	2a00      	cmp	r2, #0
90009906:	d13e      	bne.n	90009986 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009908:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000990a:	2206      	movs	r2, #6
          return HAL_ERROR;
9000990c:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000990e:	f043 0304 	orr.w	r3, r3, #4
90009912:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009914:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90009918:	e7e5      	b.n	900098e6 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000991a:	2001      	movs	r0, #1
}
9000991c:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000991e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009920:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009926:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009928:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000992a:	2a00      	cmp	r2, #0
9000992c:	d0ec      	beq.n	90009908 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000992e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009930:	fbb3 f1f2 	udiv	r1, r3, r2
90009934:	fb02 3211 	mls	r2, r2, r1, r3
90009938:	1a9b      	subs	r3, r3, r2
9000993a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000993c:	2b00      	cmp	r3, #0
9000993e:	d0d6      	beq.n	900098ee <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90009940:	6822      	ldr	r2, [r4, #0]
90009942:	2601      	movs	r6, #1
90009944:	3240      	adds	r2, #64	; 0x40
90009946:	9600      	str	r6, [sp, #0]
90009948:	69a1      	ldr	r1, [r4, #24]
9000994a:	f000 fffb 	bl	9000a944 <HAL_MDMA_Start_IT>
9000994e:	2800      	cmp	r0, #0
90009950:	d0cd      	beq.n	900098ee <HAL_JPEG_Resume+0x2e>
90009952:	e7d9      	b.n	90009908 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90009954:	f011 0101 	ands.w	r1, r1, #1
90009958:	d013      	beq.n	90009982 <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000995a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000995c:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000995e:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90009964:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009966:	07ab      	lsls	r3, r5, #30
90009968:	d504      	bpl.n	90009974 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000996a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000996c:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000996e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90009972:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90009974:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90009976:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90009978:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000997a:	430b      	orrs	r3, r1
9000997c:	6313      	str	r3, [r2, #48]	; 0x30
}
9000997e:	b002      	add	sp, #8
90009980:	bd70      	pop	{r4, r5, r6, pc}
90009982:	2228      	movs	r2, #40	; 0x28
90009984:	e7ef      	b.n	90009966 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009988:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000998a:	fbb3 f1f2 	udiv	r1, r3, r2
9000998e:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009992:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009994:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009996:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009998:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000999a:	9500      	str	r5, [sp, #0]
9000999c:	69e2      	ldr	r2, [r4, #28]
9000999e:	f000 ffd1 	bl	9000a944 <HAL_MDMA_Start_IT>
900099a2:	2800      	cmp	r0, #0
900099a4:	d09e      	beq.n	900098e4 <HAL_JPEG_Resume+0x24>
900099a6:	e7af      	b.n	90009908 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
900099a8:	4620      	mov	r0, r4
900099aa:	f7ff ff2f 	bl	9000980c <JPEG_DMA_PollResidualData>
900099ae:	e799      	b.n	900098e4 <HAL_JPEG_Resume+0x24>

900099b0 <JPEG_MDMAOutCpltCallback>:
{
900099b0:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900099b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
900099b4:	f248 010c 	movw	r1, #32780	; 0x800c
{
900099b8:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900099ba:	6823      	ldr	r3, [r4, #0]
900099bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900099be:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900099c2:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
900099c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
900099c6:	400a      	ands	r2, r1
900099c8:	2a0c      	cmp	r2, #12
900099ca:	d001      	beq.n	900099d0 <JPEG_MDMAOutCpltCallback+0x20>
}
900099cc:	b003      	add	sp, #12
900099ce:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
900099d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900099d2:	0692      	lsls	r2, r2, #26
900099d4:	d505      	bpl.n	900099e2 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900099d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900099d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900099dc:	631a      	str	r2, [r3, #48]	; 0x30
}
900099de:	b003      	add	sp, #12
900099e0:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900099e2:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900099e4:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900099e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900099e8:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900099ea:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900099ec:	f3c2 0210 	ubfx	r2, r2, #0, #17
900099f0:	1a9b      	subs	r3, r3, r2
900099f2:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900099f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900099f6:	f7f7 fed9 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900099fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
900099fc:	049b      	lsls	r3, r3, #18
900099fe:	d501      	bpl.n	90009a04 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90009a00:	6823      	ldr	r3, [r4, #0]
90009a02:	e7e8      	b.n	900099d6 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009a04:	6821      	ldr	r1, [r4, #0]
90009a06:	2501      	movs	r5, #1
90009a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009a0a:	69e2      	ldr	r2, [r4, #28]
90009a0c:	3144      	adds	r1, #68	; 0x44
90009a0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
90009a10:	9500      	str	r5, [sp, #0]
90009a12:	f000 ff97 	bl	9000a944 <HAL_MDMA_Start_IT>
90009a16:	2800      	cmp	r0, #0
90009a18:	d0f2      	beq.n	90009a00 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009a1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009a1c:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90009a1e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009a20:	f043 0304 	orr.w	r3, r3, #4
90009a24:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009a26:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
90009a2a:	f7f7 ff07 	bl	9000183c <HAL_JPEG_ErrorCallback>
          return;
90009a2e:	e7cd      	b.n	900099cc <JPEG_MDMAOutCpltCallback+0x1c>

90009a30 <JPEG_MDMAOutAbortCallback>:
{
90009a30:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90009a32:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90009a34:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009a36:	041a      	lsls	r2, r3, #16
90009a38:	d400      	bmi.n	90009a3c <JPEG_MDMAOutAbortCallback+0xc>
}
90009a3a:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
90009a3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009a40:	681b      	ldr	r3, [r3, #0]
90009a42:	695b      	ldr	r3, [r3, #20]
90009a44:	f3c3 0310 	ubfx	r3, r3, #0, #17
90009a48:	1ad3      	subs	r3, r2, r3
90009a4a:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009a4e:	429a      	cmp	r2, r3
90009a50:	d025      	beq.n	90009a9e <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90009a52:	6822      	ldr	r2, [r4, #0]
90009a54:	6b55      	ldr	r5, [r2, #52]	; 0x34
90009a56:	f015 0510 	ands.w	r5, r5, #16
90009a5a:	d118      	bne.n	90009a8e <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90009a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009a5e:	bb4b      	cbnz	r3, 90009ab4 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a60:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90009a62:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a64:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a66:	f023 0301 	bic.w	r3, r3, #1
90009a6a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90009a6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a70:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009a74:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a78:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009a7c:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a7e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a80:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a82:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a86:	d012      	beq.n	90009aae <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009a88:	f7ff fe54 	bl	90009734 <HAL_JPEG_EncodeCpltCallback>
}
90009a8c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009a8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009a90:	049b      	lsls	r3, r3, #18
90009a92:	d4d2      	bmi.n	90009a3a <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
90009a94:	4620      	mov	r0, r4
}
90009a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009a9a:	f7ff beb7 	b.w	9000980c <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009a9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009aa0:	4620      	mov	r0, r4
90009aa2:	69e1      	ldr	r1, [r4, #28]
90009aa4:	f7f7 fe82 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009aa8:	2300      	movs	r3, #0
90009aaa:	6263      	str	r3, [r4, #36]	; 0x24
90009aac:	e7d1      	b.n	90009a52 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009aae:	f7f7 fec7 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
90009ab2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ab6:	4620      	mov	r0, r4
90009ab8:	69e1      	ldr	r1, [r4, #28]
90009aba:	f7f7 fe77 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009abe:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009ac0:	6265      	str	r5, [r4, #36]	; 0x24
90009ac2:	e7cd      	b.n	90009a60 <JPEG_MDMAOutAbortCallback+0x30>

90009ac4 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009ac4:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009ac6:	f003 0303 	and.w	r3, r3, #3
90009aca:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009acc:	6803      	ldr	r3, [r0, #0]
{
90009ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009ad2:	4604      	mov	r4, r0
90009ad4:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009ad6:	d01f      	beq.n	90009b18 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
90009ad8:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009ada:	04d7      	lsls	r7, r2, #19
90009adc:	d407      	bmi.n	90009aee <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
90009ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009ae0:	0796      	lsls	r6, r2, #30
90009ae2:	f100 811d 	bmi.w	90009d20 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90009ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009ae8:	0750      	lsls	r0, r2, #29
90009aea:	f100 81b1 	bmi.w	90009e50 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009aee:	6d65      	ldr	r5, [r4, #84]	; 0x54
90009af0:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90009af4:	d107      	bne.n	90009b06 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90009af6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90009af8:	f016 0608 	ands.w	r6, r6, #8
90009afc:	d14c      	bne.n	90009b98 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90009afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009b00:	06d2      	lsls	r2, r2, #27
90009b02:	f100 81e3 	bmi.w	90009ecc <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009b08:	f002 0238 	and.w	r2, r2, #56	; 0x38
90009b0c:	2a20      	cmp	r2, #32
90009b0e:	d01a      	beq.n	90009b46 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
90009b10:	2000      	movs	r0, #0
}
90009b12:	b002      	add	sp, #8
90009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009b1a:	0652      	lsls	r2, r2, #25
90009b1c:	d5dc      	bpl.n	90009ad8 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009b1e:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009b20:	9101      	str	r1, [sp, #4]
90009b22:	f7ff fb79 	bl	90009218 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90009b26:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009b28:	9901      	ldr	r1, [sp, #4]
90009b2a:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009b2c:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009b2e:	f7f7 fdcb 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009b32:	6823      	ldr	r3, [r4, #0]
90009b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90009b3a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009b42:	639a      	str	r2, [r3, #56]	; 0x38
90009b44:	e7c8      	b.n	90009ad8 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009b46:	681a      	ldr	r2, [r3, #0]
90009b48:	f022 0201 	bic.w	r2, r2, #1
90009b4c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009b4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009b50:	f002 020c 	and.w	r2, r2, #12
90009b54:	2a08      	cmp	r2, #8
90009b56:	f000 81e6 	beq.w	90009f26 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009b5c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009b60:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
90009b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009b64:	2b00      	cmp	r3, #0
90009b66:	f040 81e3 	bne.w	90009f30 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
90009b6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90009b6c:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009b70:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b72:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009b76:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b78:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90009b7c:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b80:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009b82:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009b84:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009b88:	f000 81c9 	beq.w	90009f1e <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009b8c:	f7ff fdd2 	bl	90009734 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009b90:	4628      	mov	r0, r5
}
90009b92:	b002      	add	sp, #8
90009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009b98:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009b9c:	3220      	adds	r2, #32
90009b9e:	4296      	cmp	r6, r2
90009ba0:	f0c0 81e4 	bcc.w	90009f6c <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
90009ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009ba6:	69e1      	ldr	r1, [r4, #28]
90009ba8:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009baa:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009bac:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bae:	69e2      	ldr	r2, [r4, #28]
90009bb0:	440a      	add	r2, r1
90009bb2:	0a19      	lsrs	r1, r3, #8
90009bb4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bb8:	69e2      	ldr	r2, [r4, #28]
90009bba:	440a      	add	r2, r1
90009bbc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bbe:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bc0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bc4:	69e2      	ldr	r2, [r4, #28]
90009bc6:	440a      	add	r2, r1
90009bc8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009bcc:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009bce:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009bd0:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009bd2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009bd4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009bd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009bd8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009bda:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bdc:	69e2      	ldr	r2, [r4, #28]
90009bde:	440a      	add	r2, r1
90009be0:	0a19      	lsrs	r1, r3, #8
90009be2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009be4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009be6:	69e2      	ldr	r2, [r4, #28]
90009be8:	440a      	add	r2, r1
90009bea:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bec:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009bee:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009bf2:	69e2      	ldr	r2, [r4, #28]
90009bf4:	440a      	add	r2, r1
90009bf6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009bfa:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009bfc:	3304      	adds	r3, #4
90009bfe:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c00:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c02:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c04:	69e1      	ldr	r1, [r4, #28]
90009c06:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c08:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c0a:	69e2      	ldr	r2, [r4, #28]
90009c0c:	440a      	add	r2, r1
90009c0e:	0a19      	lsrs	r1, r3, #8
90009c10:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c12:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c14:	69e2      	ldr	r2, [r4, #28]
90009c16:	440a      	add	r2, r1
90009c18:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c1a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c1c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c20:	69e2      	ldr	r2, [r4, #28]
90009c22:	440a      	add	r2, r1
90009c24:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c28:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c2a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c2c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009c2e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c30:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c32:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c34:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c36:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c38:	69e2      	ldr	r2, [r4, #28]
90009c3a:	440a      	add	r2, r1
90009c3c:	0a19      	lsrs	r1, r3, #8
90009c3e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c42:	69e2      	ldr	r2, [r4, #28]
90009c44:	440a      	add	r2, r1
90009c46:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c48:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c4a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c4e:	69e2      	ldr	r2, [r4, #28]
90009c50:	440a      	add	r2, r1
90009c52:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c56:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c58:	3304      	adds	r3, #4
90009c5a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c5c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c60:	69e1      	ldr	r1, [r4, #28]
90009c62:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c66:	69e2      	ldr	r2, [r4, #28]
90009c68:	440a      	add	r2, r1
90009c6a:	0a19      	lsrs	r1, r3, #8
90009c6c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c70:	69e2      	ldr	r2, [r4, #28]
90009c72:	440a      	add	r2, r1
90009c74:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c76:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c78:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009c7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c7c:	69e2      	ldr	r2, [r4, #28]
90009c7e:	440a      	add	r2, r1
90009c80:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009c84:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009c86:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c88:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009c8a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009c8c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009c8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009c90:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009c92:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c94:	69e2      	ldr	r2, [r4, #28]
90009c96:	440a      	add	r2, r1
90009c98:	0a19      	lsrs	r1, r3, #8
90009c9a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009c9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009c9e:	69e2      	ldr	r2, [r4, #28]
90009ca0:	440a      	add	r2, r1
90009ca2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ca4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009ca6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ca8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009caa:	69e2      	ldr	r2, [r4, #28]
90009cac:	440a      	add	r2, r1
90009cae:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009cb2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009cb4:	3304      	adds	r3, #4
90009cb6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009cb8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009cba:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009cbc:	69e1      	ldr	r1, [r4, #28]
90009cbe:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009cc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009cc2:	69e2      	ldr	r2, [r4, #28]
90009cc4:	440a      	add	r2, r1
90009cc6:	0a19      	lsrs	r1, r3, #8
90009cc8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009cca:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ccc:	69e2      	ldr	r2, [r4, #28]
90009cce:	440a      	add	r2, r1
90009cd0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009cd2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009cd4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009cd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009cd8:	69e2      	ldr	r2, [r4, #28]
90009cda:	440a      	add	r2, r1
90009cdc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009ce0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009ce2:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009ce4:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009ce6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009ce8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009cec:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009cf0:	69e2      	ldr	r2, [r4, #28]
90009cf2:	440a      	add	r2, r1
90009cf4:	0a19      	lsrs	r1, r3, #8
90009cf6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009cf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009cfa:	69e2      	ldr	r2, [r4, #28]
90009cfc:	440a      	add	r2, r1
90009cfe:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009d00:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009d02:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009d04:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009d06:	69e2      	ldr	r2, [r4, #28]
90009d08:	440a      	add	r2, r1
90009d0a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009d0e:	3304      	adds	r3, #4
90009d10:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009d14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009d16:	429a      	cmp	r2, r3
90009d18:	f000 82ae 	beq.w	9000a278 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009d1c:	6823      	ldr	r3, [r4, #0]
90009d1e:	e6f2      	b.n	90009b06 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009d20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009d22:	2a00      	cmp	r2, #0
90009d24:	f000 810c 	beq.w	90009f40 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009d28:	6a21      	ldr	r1, [r4, #32]
90009d2a:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009d2c:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009d2e:	f240 81a4 	bls.w	9000a07a <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009d32:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009d34:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009d36:	04cd      	lsls	r5, r1, #19
90009d38:	f53f aed9 	bmi.w	90009aee <JPEG_Process+0x2a>
90009d3c:	2a00      	cmp	r2, #0
90009d3e:	f43f aed6 	beq.w	90009aee <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009d42:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90009d44:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009d48:	f240 8203 	bls.w	9000a152 <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d4c:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90009d4e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d50:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d52:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d54:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d56:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d58:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d5a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d5c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d60:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d62:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d66:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d68:	6a21      	ldr	r1, [r4, #32]
90009d6a:	3104      	adds	r1, #4
90009d6c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d6e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d70:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d72:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d74:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d76:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d78:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d7a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d7c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009d80:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d82:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d86:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009d88:	6a21      	ldr	r1, [r4, #32]
90009d8a:	3104      	adds	r1, #4
90009d8c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009d8e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d90:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009d92:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d94:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d96:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009d98:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009d9a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009d9c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009da0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009da2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009da6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009da8:	6a21      	ldr	r1, [r4, #32]
90009daa:	3104      	adds	r1, #4
90009dac:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009dae:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009db0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009db2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009db4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009db6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009db8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009dba:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dbc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009dc0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dc2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009dc6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009dc8:	6a21      	ldr	r1, [r4, #32]
90009dca:	3104      	adds	r1, #4
90009dcc:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009dce:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dd0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009dd2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dd4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dd6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009dd8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009dda:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009ddc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009de0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009de2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009de6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009de8:	6a21      	ldr	r1, [r4, #32]
90009dea:	3104      	adds	r1, #4
90009dec:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009dee:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009df0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009df2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009df4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009df6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009df8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009dfa:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009dfc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009e00:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e02:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e06:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009e08:	6a21      	ldr	r1, [r4, #32]
90009e0a:	3104      	adds	r1, #4
90009e0c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009e0e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009e10:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e12:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e14:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009e16:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e18:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009e1a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009e1c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009e20:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e22:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e26:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009e28:	6a21      	ldr	r1, [r4, #32]
90009e2a:	3104      	adds	r1, #4
90009e2c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009e2e:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009e30:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e32:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e34:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009e36:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e38:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009e3a:	7849      	ldrb	r1, [r1, #1]
90009e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90009e40:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009e42:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e46:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009e48:	6a22      	ldr	r2, [r4, #32]
90009e4a:	3204      	adds	r2, #4
90009e4c:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
90009e4e:	e64e      	b.n	90009aee <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009e50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009e52:	2a00      	cmp	r2, #0
90009e54:	d074      	beq.n	90009f40 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009e56:	6a21      	ldr	r1, [r4, #32]
90009e58:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009e5a:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009e5c:	f200 8164 	bhi.w	9000a128 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009e60:	428a      	cmp	r2, r1
90009e62:	f040 810c 	bne.w	9000a07e <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009e66:	6a21      	ldr	r1, [r4, #32]
90009e68:	4620      	mov	r0, r4
90009e6a:	f7f7 fc7f 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009e6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009e70:	2a04      	cmp	r2, #4
90009e72:	d902      	bls.n	90009e7a <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009e74:	f022 0203 	bic.w	r2, r2, #3
90009e78:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009e7a:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009e7c:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009e7e:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009e80:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009e82:	04c9      	lsls	r1, r1, #19
90009e84:	f53f ae33 	bmi.w	90009aee <JPEG_Process+0x2a>
90009e88:	2a00      	cmp	r2, #0
90009e8a:	f43f ae30 	beq.w	90009aee <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009e8e:	0891      	lsrs	r1, r2, #2
90009e90:	f040 8203 	bne.w	9000a29a <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e94:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009e96:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009e98:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009e9a:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009e9c:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009ea0:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
90009ea2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009ea4:	d010      	beq.n	90009ec8 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009ea6:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009ea8:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009eaa:	5c69      	ldrb	r1, [r5, r1]
90009eac:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90009eb0:	6a21      	ldr	r1, [r4, #32]
90009eb2:	f101 0101 	add.w	r1, r1, #1
90009eb6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009eb8:	d106      	bne.n	90009ec8 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009eba:	6a22      	ldr	r2, [r4, #32]
90009ebc:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90009ebe:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009ec0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
90009ec4:	3201      	adds	r2, #1
90009ec6:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009ec8:	6418      	str	r0, [r3, #64]	; 0x40
90009eca:	e610      	b.n	90009aee <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009ecc:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ece:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009ed0:	3204      	adds	r2, #4
90009ed2:	4295      	cmp	r5, r2
90009ed4:	f0c0 80d5 	bcc.w	9000a082 <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
90009ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009eda:	69e1      	ldr	r1, [r4, #28]
90009edc:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ede:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009ee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ee2:	69e2      	ldr	r2, [r4, #28]
90009ee4:	440a      	add	r2, r1
90009ee6:	0a19      	lsrs	r1, r3, #8
90009ee8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009eea:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009eec:	69e2      	ldr	r2, [r4, #28]
90009eee:	440a      	add	r2, r1
90009ef0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ef2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009ef4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ef6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ef8:	69e2      	ldr	r2, [r4, #28]
90009efa:	440a      	add	r2, r1
90009efc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009f00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
90009f02:	3304      	adds	r3, #4
90009f04:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f08:	429a      	cmp	r2, r3
90009f0a:	f47f af07 	bne.w	90009d1c <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009f0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f10:	4620      	mov	r0, r4
90009f12:	69e1      	ldr	r1, [r4, #28]
90009f14:	f7f7 fc4a 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009f18:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009f1a:	6266      	str	r6, [r4, #36]	; 0x24
90009f1c:	e5f3      	b.n	90009b06 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009f1e:	f7f7 fc8f 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009f22:	4628      	mov	r0, r5
90009f24:	e5f5      	b.n	90009b12 <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009f28:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009f2c:	631a      	str	r2, [r3, #48]	; 0x30
90009f2e:	e614      	b.n	90009b5a <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f32:	4620      	mov	r0, r4
90009f34:	69e1      	ldr	r1, [r4, #28]
90009f36:	f7f7 fc39 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009f3a:	2300      	movs	r3, #0
90009f3c:	6263      	str	r3, [r4, #36]	; 0x24
90009f3e:	e614      	b.n	90009b6a <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009f42:	f002 020c 	and.w	r2, r2, #12
90009f46:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009f48:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009f4a:	f000 80fd 	beq.w	9000a148 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009f4e:	f002 020c 	and.w	r2, r2, #12
90009f52:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009f54:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009f56:	f47f adca 	bne.w	90009aee <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009f5e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90009f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009f62:	f022 0206 	bic.w	r2, r2, #6
90009f66:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009f68:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009f6a:	e5c0      	b.n	90009aee <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009f6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f6e:	4296      	cmp	r6, r2
90009f70:	f67f adc9 	bls.w	90009b06 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009f76:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90009f78:	0880      	lsrs	r0, r0, #2
90009f7a:	d020      	beq.n	90009fbe <JPEG_Process+0x4fa>
90009f7c:	4629      	mov	r1, r5
90009f7e:	e000      	b.n	90009f82 <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
90009f80:	6823      	ldr	r3, [r4, #0]
90009f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009f84:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f86:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f88:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009f8a:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f8c:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009f8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009f90:	69e2      	ldr	r2, [r4, #28]
90009f92:	4432      	add	r2, r6
90009f94:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009f98:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009f9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009f9c:	69e2      	ldr	r2, [r4, #28]
90009f9e:	4432      	add	r2, r6
90009fa0:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009fa4:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009fa8:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009faa:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009fac:	69e2      	ldr	r2, [r4, #28]
90009fae:	4432      	add	r2, r6
90009fb0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009fb4:	f103 0304 	add.w	r3, r3, #4
90009fb8:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009fba:	d1e1      	bne.n	90009f80 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009fc0:	42b3      	cmp	r3, r6
90009fc2:	f000 8161 	beq.w	9000a288 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009fc6:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009fca:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009fcc:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009fd0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90009fd2:	d00e      	beq.n	90009ff2 <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009fd4:	f005 0303 	and.w	r3, r5, #3
90009fd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fda:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90009fdc:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009fde:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009fe0:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009fe2:	fa27 f303 	lsr.w	r3, r7, r3
90009fe6:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009fea:	f103 0301 	add.w	r3, r3, #1
90009fee:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90009ff0:	d1f0      	bne.n	90009fd4 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
90009ff2:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009ff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ff8:	69e1      	ldr	r1, [r4, #28]
90009ffa:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009ffc:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a000:	f7f7 fbd4 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a004:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000a006:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000a00a:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a00c:	f63f ae86 	bhi.w	90009d1c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a010:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000a014:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a016:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000a018:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a01c:	fa27 f003 	lsr.w	r0, r7, r3
9000a020:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000a022:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a024:	f102 0201 	add.w	r2, r2, #1
9000a028:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a02a:	f43f ae77 	beq.w	90009d1c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a02e:	f103 0208 	add.w	r2, r3, #8
9000a032:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000a034:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000a036:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a03a:	fa27 f202 	lsr.w	r2, r7, r2
9000a03e:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000a040:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a042:	f102 0201 	add.w	r2, r2, #1
9000a046:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a048:	f108 0202 	add.w	r2, r8, #2
9000a04c:	f43f ae66 	beq.w	90009d1c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a050:	3310      	adds	r3, #16
9000a052:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000a054:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000a056:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a058:	fa27 f303 	lsr.w	r3, r7, r3
9000a05c:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000a05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a060:	f103 0301 	add.w	r3, r3, #1
9000a064:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a066:	f47f ae59 	bne.w	90009d1c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000a06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a06c:	0e3f      	lsrs	r7, r7, #24
9000a06e:	69e2      	ldr	r2, [r4, #28]
9000a070:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000a072:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a074:	3301      	adds	r3, #1
9000a076:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a078:	e650      	b.n	90009d1c <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000a07a:	428a      	cmp	r2, r1
9000a07c:	d056      	beq.n	9000a12c <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000a07e:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000a080:	e535      	b.n	90009aee <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000a082:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a084:	4295      	cmp	r5, r2
9000a086:	f67f ad3e 	bls.w	90009b06 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000a08a:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a08c:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000a08e:	0880      	lsrs	r0, r0, #2
9000a090:	d020      	beq.n	9000a0d4 <JPEG_Process+0x610>
9000a092:	4631      	mov	r1, r6
9000a094:	e000      	b.n	9000a098 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000a096:	6823      	ldr	r3, [r4, #0]
9000a098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000a09a:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000a09c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a09e:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000a0a0:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000a0a2:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000a0a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a0a6:	69e2      	ldr	r2, [r4, #28]
9000a0a8:	442a      	add	r2, r5
9000a0aa:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000a0ae:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000a0b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a0b2:	69e2      	ldr	r2, [r4, #28]
9000a0b4:	442a      	add	r2, r5
9000a0b6:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000a0ba:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000a0be:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000a0c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000a0c2:	69e2      	ldr	r2, [r4, #28]
9000a0c4:	442a      	add	r2, r5
9000a0c6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000a0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a0ca:	f103 0304 	add.w	r3, r3, #4
9000a0ce:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000a0d0:	d1e1      	bne.n	9000a096 <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000a0d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000a0d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a0d6:	429d      	cmp	r5, r3
9000a0d8:	f000 80d6 	beq.w	9000a288 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000a0dc:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000a0e0:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000a0e2:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000a0e6:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000a0e8:	d00e      	beq.n	9000a108 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a0ea:	f006 0303 	and.w	r3, r6, #3
9000a0ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a0f0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000a0f2:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a0f4:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000a0f6:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000a0f8:	fa27 f303 	lsr.w	r3, r7, r3
9000a0fc:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000a0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a100:	f103 0301 	add.w	r3, r3, #1
9000a104:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000a106:	d1f0      	bne.n	9000a0ea <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000a108:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a10c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a10e:	69e1      	ldr	r1, [r4, #28]
9000a110:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000a112:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a116:	f7f7 fb49 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a11a:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000a11c:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000a120:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000a122:	f67f af75 	bls.w	9000a010 <JPEG_Process+0x54c>
9000a126:	e5f9      	b.n	90009d1c <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000a128:	1a52      	subs	r2, r2, r1
9000a12a:	e6a9      	b.n	90009e80 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000a12c:	6a21      	ldr	r1, [r4, #32]
9000a12e:	4620      	mov	r0, r4
9000a130:	f7f7 fb1c 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000a134:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a136:	2a04      	cmp	r2, #4
9000a138:	d902      	bls.n	9000a140 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000a13a:	f022 0203 	bic.w	r2, r2, #3
9000a13e:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000a140:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a142:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000a144:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000a146:	e5f5      	b.n	90009d34 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000a148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000a14c:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000a14e:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000a150:	e4cd      	b.n	90009aee <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000a152:	2a03      	cmp	r2, #3
9000a154:	f240 80a4 	bls.w	9000a2a0 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000a158:	2900      	cmp	r1, #0
9000a15a:	f43f acc8 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a15e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a160:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a162:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a164:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a168:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a16a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a16c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a16e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a172:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a174:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a178:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a17c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a180:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a182:	6a20      	ldr	r0, [r4, #32]
9000a184:	f100 0004 	add.w	r0, r0, #4
9000a188:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a18a:	f43f acb0 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a18e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a190:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a192:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a196:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a198:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a19a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a19c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a1a0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1a2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a1a6:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1aa:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1ae:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a1b0:	6a20      	ldr	r0, [r4, #32]
9000a1b2:	f100 0004 	add.w	r0, r0, #4
9000a1b6:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1b8:	f43f ac99 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a1bc:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1be:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1c0:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1c4:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1c6:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1c8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1ca:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a1ce:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1d0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a1d4:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1d8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1dc:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a1de:	6a20      	ldr	r0, [r4, #32]
9000a1e0:	f100 0004 	add.w	r0, r0, #4
9000a1e4:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1e6:	f43f ac82 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a1ea:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a1ec:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1ee:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a1f2:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1f4:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1f6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a1f8:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a1fc:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a1fe:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a202:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a206:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a20a:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a20c:	6a20      	ldr	r0, [r4, #32]
9000a20e:	f100 0004 	add.w	r0, r0, #4
9000a212:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a214:	f43f ac6b 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a218:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a21a:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a21c:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a220:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a222:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a224:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a226:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a22a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a22c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a230:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a234:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a238:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a23a:	6a20      	ldr	r0, [r4, #32]
9000a23c:	f100 0004 	add.w	r0, r0, #4
9000a240:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a242:	f43f ac54 	beq.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a246:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a248:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a24a:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a24e:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a250:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a252:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a254:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a258:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a25a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a25e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a262:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a266:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a268:	6a20      	ldr	r0, [r4, #32]
9000a26a:	f100 0004 	add.w	r0, r0, #4
9000a26e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a270:	f47f ac3d 	bne.w	90009aee <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a274:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a276:	e5db      	b.n	90009e30 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a278:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a27a:	4620      	mov	r0, r4
9000a27c:	69e1      	ldr	r1, [r4, #28]
9000a27e:	f7f7 fa95 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a282:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a284:	6265      	str	r5, [r4, #36]	; 0x24
9000a286:	e43e      	b.n	90009b06 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a288:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a28a:	4620      	mov	r0, r4
9000a28c:	69e1      	ldr	r1, [r4, #28]
9000a28e:	f7f7 fa8d 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a292:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a294:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a296:	6262      	str	r2, [r4, #36]	; 0x24
9000a298:	e435      	b.n	90009b06 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000a29a:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a29c:	69a0      	ldr	r0, [r4, #24]
9000a29e:	e5c7      	b.n	90009e30 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2a0:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a2a2:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000a2a4:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2a6:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000a2a8:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2ac:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000a2ae:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a2b0:	d010      	beq.n	9000a2d4 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2b2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a2b4:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2b6:	5c28      	ldrb	r0, [r5, r0]
9000a2b8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000a2bc:	6a20      	ldr	r0, [r4, #32]
9000a2be:	f100 0001 	add.w	r0, r0, #1
9000a2c2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a2c4:	d106      	bne.n	9000a2d4 <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2c6:	6a22      	ldr	r2, [r4, #32]
9000a2c8:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000a2ca:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a2cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000a2d0:	3201      	adds	r2, #1
9000a2d2:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000a2d4:	6419      	str	r1, [r3, #64]	; 0x40
9000a2d6:	e40a      	b.n	90009aee <JPEG_Process+0x2a>

9000a2d8 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000a2d8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000a2dc:	3b03      	subs	r3, #3
9000a2de:	2b01      	cmp	r3, #1
9000a2e0:	d900      	bls.n	9000a2e4 <HAL_JPEG_IRQHandler+0xc>
9000a2e2:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a2e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a2e6:	f003 030c 	and.w	r3, r3, #12
9000a2ea:	2b08      	cmp	r3, #8
{
9000a2ec:	b530      	push	{r4, r5, lr}
9000a2ee:	4604      	mov	r4, r0
9000a2f0:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a2f2:	d006      	beq.n	9000a302 <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000a2f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a2f6:	f003 030c 	and.w	r3, r3, #12
9000a2fa:	2b0c      	cmp	r3, #12
9000a2fc:	d006      	beq.n	9000a30c <HAL_JPEG_IRQHandler+0x34>
}
9000a2fe:	b003      	add	sp, #12
9000a300:	bd30      	pop	{r4, r5, pc}
9000a302:	b003      	add	sp, #12
9000a304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000a308:	f7ff bbdc 	b.w	90009ac4 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a30c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a30e:	f003 0303 	and.w	r3, r3, #3
9000a312:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a314:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a316:	d045      	beq.n	9000a3a4 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000a318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a31a:	0692      	lsls	r2, r2, #26
9000a31c:	d5ef      	bpl.n	9000a2fe <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a31e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a320:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a326:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a328:	681a      	ldr	r2, [r3, #0]
9000a32a:	f022 0201 	bic.w	r2, r2, #1
9000a32e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000a330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a332:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000a336:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000a338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a33a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000a33e:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a340:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a344:	2b02      	cmp	r3, #2
9000a346:	d052      	beq.n	9000a3ee <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000a348:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000a34a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a34e:	2b02      	cmp	r3, #2
9000a350:	d03f      	beq.n	9000a3d2 <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000a352:	6803      	ldr	r3, [r0, #0]
9000a354:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a356:	695b      	ldr	r3, [r3, #20]
9000a358:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000a35c:	1ad3      	subs	r3, r2, r3
9000a35e:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000a360:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a362:	429a      	cmp	r2, r3
9000a364:	d046      	beq.n	9000a3f4 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000a366:	6822      	ldr	r2, [r4, #0]
9000a368:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000a36a:	f015 0510 	ands.w	r5, r5, #16
9000a36e:	d135      	bne.n	9000a3dc <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000a370:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a372:	2b00      	cmp	r3, #0
9000a374:	d149      	bne.n	9000a40a <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a376:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000a378:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a37a:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a37c:	f023 0301 	bic.w	r3, r3, #1
9000a380:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000a382:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a384:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a386:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000a38a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a38e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a392:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a394:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a396:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a398:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a39c:	d032      	beq.n	9000a404 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000a39e:	f7ff f9c9 	bl	90009734 <HAL_JPEG_EncodeCpltCallback>
9000a3a2:	e7ac      	b.n	9000a2fe <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a3a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a3a6:	0651      	lsls	r1, r2, #25
9000a3a8:	d5b6      	bpl.n	9000a318 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000a3aa:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000a3ac:	9101      	str	r1, [sp, #4]
9000a3ae:	f7fe ff33 	bl	90009218 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000a3b2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a3b4:	9901      	ldr	r1, [sp, #4]
9000a3b6:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000a3b8:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a3ba:	f7f7 f985 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000a3be:	6823      	ldr	r3, [r4, #0]
9000a3c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a3c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000a3c6:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a3ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000a3ce:	639a      	str	r2, [r3, #56]	; 0x38
9000a3d0:	e7a2      	b.n	9000a318 <HAL_JPEG_IRQHandler+0x40>
}
9000a3d2:	b003      	add	sp, #12
9000a3d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000a3d8:	f000 bb30 	b.w	9000aa3c <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000a3dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000a3de:	049b      	lsls	r3, r3, #18
9000a3e0:	d48d      	bmi.n	9000a2fe <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000a3e2:	4620      	mov	r0, r4
}
9000a3e4:	b003      	add	sp, #12
9000a3e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000a3ea:	f7ff ba0f 	b.w	9000980c <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000a3ee:	f000 fb25 	bl	9000aa3c <HAL_MDMA_Abort_IT>
9000a3f2:	e7a9      	b.n	9000a348 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a3f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a3f6:	4620      	mov	r0, r4
9000a3f8:	69e1      	ldr	r1, [r4, #28]
9000a3fa:	f7f7 f9d7 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000a3fe:	2300      	movs	r3, #0
9000a400:	6263      	str	r3, [r4, #36]	; 0x24
9000a402:	e7b0      	b.n	9000a366 <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a404:	f7f7 fa1c 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
9000a408:	e779      	b.n	9000a2fe <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a40a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a40c:	4620      	mov	r0, r4
9000a40e:	69e1      	ldr	r1, [r4, #28]
9000a410:	f7f7 f9cc 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a414:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a416:	6265      	str	r5, [r4, #36]	; 0x24
9000a418:	e7ad      	b.n	9000a376 <HAL_JPEG_IRQHandler+0x9e>
9000a41a:	bf00      	nop

9000a41c <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000a41c:	2800      	cmp	r0, #0
9000a41e:	d067      	beq.n	9000a4f0 <HAL_LTDC_Init+0xd4>
{
9000a420:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000a422:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000a426:	4604      	mov	r4, r0
9000a428:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a42c:	2b00      	cmp	r3, #0
9000a42e:	d05a      	beq.n	9000a4e6 <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a430:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a432:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a434:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a438:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a43c:	4302      	orrs	r2, r0
9000a43e:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a440:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a442:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a444:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a446:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a44a:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a44c:	4929      	ldr	r1, [pc, #164]	; (9000a4f4 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a44e:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a450:	6998      	ldr	r0, [r3, #24]
9000a452:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000a454:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a456:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a458:	689a      	ldr	r2, [r3, #8]
9000a45a:	400a      	ands	r2, r1
9000a45c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000a45e:	689a      	ldr	r2, [r3, #8]
9000a460:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a464:	69a0      	ldr	r0, [r4, #24]
9000a466:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000a468:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000a46a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000a46c:	68da      	ldr	r2, [r3, #12]
9000a46e:	400a      	ands	r2, r1
9000a470:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a472:	68da      	ldr	r2, [r3, #12]
9000a474:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a478:	6a20      	ldr	r0, [r4, #32]
9000a47a:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000a47c:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a47e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000a480:	691a      	ldr	r2, [r3, #16]
9000a482:	400a      	ands	r2, r1
9000a484:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a486:	691a      	ldr	r2, [r3, #16]
9000a488:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a48c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000a48e:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000a490:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a492:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000a494:	695a      	ldr	r2, [r3, #20]
9000a496:	400a      	ands	r2, r1
9000a498:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000a49a:	695a      	ldr	r2, [r3, #20]
9000a49c:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000a49e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000a4a2:	430a      	orrs	r2, r1
9000a4a4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000a4a8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a4ac:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000a4b0:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a4b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a4b6:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000a4b8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000a4bc:	432a      	orrs	r2, r5
9000a4be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a4c2:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a4c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a4c8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000a4ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a4cc:	f042 0206 	orr.w	r2, r2, #6
9000a4d0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000a4d2:	699a      	ldr	r2, [r3, #24]
9000a4d4:	f042 0201 	orr.w	r2, r2, #1
9000a4d8:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000a4da:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a4dc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000a4e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000a4e4:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000a4e6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000a4ea:	f7fa f9eb 	bl	900048c4 <HAL_LTDC_MspInit>
9000a4ee:	e79f      	b.n	9000a430 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000a4f0:	2001      	movs	r0, #1
}
9000a4f2:	4770      	bx	lr
9000a4f4:	f000f800 	.word	0xf000f800

9000a4f8 <HAL_LTDC_ErrorCallback>:
9000a4f8:	4770      	bx	lr
9000a4fa:	bf00      	nop

9000a4fc <HAL_LTDC_ReloadEventCallback>:
9000a4fc:	4770      	bx	lr
9000a4fe:	bf00      	nop

9000a500 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a500:	6803      	ldr	r3, [r0, #0]
{
9000a502:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a504:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000a506:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000a508:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000a50a:	076a      	lsls	r2, r5, #29
9000a50c:	d501      	bpl.n	9000a512 <HAL_LTDC_IRQHandler+0x12>
9000a50e:	0771      	lsls	r1, r6, #29
9000a510:	d41d      	bmi.n	9000a54e <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000a512:	07aa      	lsls	r2, r5, #30
9000a514:	d501      	bpl.n	9000a51a <HAL_LTDC_IRQHandler+0x1a>
9000a516:	07b3      	lsls	r3, r6, #30
9000a518:	d42d      	bmi.n	9000a576 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000a51a:	07e8      	lsls	r0, r5, #31
9000a51c:	d501      	bpl.n	9000a522 <HAL_LTDC_IRQHandler+0x22>
9000a51e:	07f1      	lsls	r1, r6, #31
9000a520:	d440      	bmi.n	9000a5a4 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000a522:	072a      	lsls	r2, r5, #28
9000a524:	d501      	bpl.n	9000a52a <HAL_LTDC_IRQHandler+0x2a>
9000a526:	0733      	lsls	r3, r6, #28
9000a528:	d400      	bmi.n	9000a52c <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000a52a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a52c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a52e:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000a530:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000a532:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a536:	f022 0208 	bic.w	r2, r2, #8
9000a53a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a53c:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a53e:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000a540:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a544:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a548:	f7ff ffd8 	bl	9000a4fc <HAL_LTDC_ReloadEventCallback>
}
9000a54c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000a54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a550:	f022 0204 	bic.w	r2, r2, #4
9000a554:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000a556:	2204      	movs	r2, #4
9000a558:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000a55a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000a55e:	f043 0301 	orr.w	r3, r3, #1
9000a562:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a566:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a568:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a56c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a570:	f7ff ffc2 	bl	9000a4f8 <HAL_LTDC_ErrorCallback>
9000a574:	e7cd      	b.n	9000a512 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a576:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000a578:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a57c:	f022 0202 	bic.w	r2, r2, #2
9000a580:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000a582:	2202      	movs	r2, #2
9000a584:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a586:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000a588:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000a58c:	f043 0302 	orr.w	r3, r3, #2
9000a590:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a594:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a596:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a59a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a59e:	f7ff ffab 	bl	9000a4f8 <HAL_LTDC_ErrorCallback>
9000a5a2:	e7ba      	b.n	9000a51a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a5a4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000a5a6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a5aa:	f022 0201 	bic.w	r2, r2, #1
9000a5ae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000a5b0:	2201      	movs	r2, #1
9000a5b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000a5b4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000a5b6:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a5ba:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000a5be:	f7f8 f917 	bl	900027f0 <HAL_LTDC_LineEventCallback>
9000a5c2:	e7ae      	b.n	9000a522 <HAL_LTDC_IRQHandler+0x22>

9000a5c4 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000a5c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000a5c8:	2b01      	cmp	r3, #1
9000a5ca:	f000 80c0 	beq.w	9000a74e <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a5ce:	2302      	movs	r3, #2
{
9000a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5d4:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5d8:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a5dc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000a5e0:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5e2:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5e6:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5e8:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5ec:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5ee:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000a5f2:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a5f4:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000a5f8:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a5fa:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a5fe:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a602:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000a764 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a606:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000a60a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000a60e:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a612:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a618:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a61a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a61e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a624:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a626:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a628:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a62c:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a62e:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a630:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a634:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000a638:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a63a:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a63c:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000a640:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a644:	440b      	add	r3, r1
9000a646:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a64a:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a64e:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a652:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a656:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a65a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a65e:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a660:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a664:	68ab      	ldr	r3, [r5, #8]
9000a666:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000a66a:	3301      	adds	r3, #1
9000a66c:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000a670:	4403      	add	r3, r0
9000a672:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a676:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a678:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000a67c:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000a680:	f023 0307 	bic.w	r3, r3, #7
9000a684:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a688:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a68c:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000a690:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000a692:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000a696:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a69a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000a69e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000a6a2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000a6a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000a6aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000a6ae:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000a6b2:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000a6b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000a6ba:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000a6be:	696b      	ldr	r3, [r5, #20]
9000a6c0:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a6c4:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a6c8:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a6ca:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a6ce:	6a28      	ldr	r0, [r5, #32]
9000a6d0:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a6d2:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a6d6:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000a6da:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000a6de:	2300      	movs	r3, #0
9000a6e0:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000a6e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000a6e6:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000a6ea:	bb59      	cbnz	r1, 9000a744 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000a6ec:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a6ee:	1abf      	subs	r7, r7, r2
9000a6f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000a6f2:	fb03 f707 	mul.w	r7, r3, r7
9000a6f6:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a6fa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a6fc:	3707      	adds	r7, #7
9000a6fe:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000a702:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000a706:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000a70a:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a70e:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000a712:	4b12      	ldr	r3, [pc, #72]	; (9000a75c <HAL_LTDC_ConfigLayer+0x198>)
9000a714:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000a718:	400b      	ands	r3, r1
9000a71a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a71e:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a722:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000a724:	f859 3006 	ldr.w	r3, [r9, r6]
9000a728:	4313      	orrs	r3, r2
9000a72a:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000a72e:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a730:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000a734:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000a736:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000a73a:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000a73e:	b003      	add	sp, #12
9000a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000a744:	3901      	subs	r1, #1
9000a746:	2906      	cmp	r1, #6
9000a748:	d903      	bls.n	9000a752 <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000a74a:	2301      	movs	r3, #1
9000a74c:	e7cf      	b.n	9000a6ee <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000a74e:	2002      	movs	r0, #2
}
9000a750:	4770      	bx	lr
9000a752:	4b03      	ldr	r3, [pc, #12]	; (9000a760 <HAL_LTDC_ConfigLayer+0x19c>)
9000a754:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000a758:	e7c9      	b.n	9000a6ee <HAL_LTDC_ConfigLayer+0x12a>
9000a75a:	bf00      	nop
9000a75c:	fffff800 	.word	0xfffff800
9000a760:	900267f0 	.word	0x900267f0
9000a764:	fffff8f8 	.word	0xfffff8f8

9000a768 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000a768:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000a76c:	2a01      	cmp	r2, #1
9000a76e:	d019      	beq.n	9000a7a4 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a770:	6802      	ldr	r2, [r0, #0]
9000a772:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a774:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000a776:	f04f 0c00 	mov.w	ip, #0
{
9000a77a:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a77c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a780:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000a782:	4c09      	ldr	r4, [pc, #36]	; (9000a7a8 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a784:	f020 0001 	bic.w	r0, r0, #1
9000a788:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a78a:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000a78c:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000a78e:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000a790:	4301      	orrs	r1, r0
9000a792:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a794:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000a798:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000a79a:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000a79e:	f85d 4b04 	ldr.w	r4, [sp], #4
9000a7a2:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000a7a4:	2002      	movs	r0, #2
}
9000a7a6:	4770      	bx	lr
9000a7a8:	50001000 	.word	0x50001000

9000a7ac <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000a7ac:	b538      	push	{r3, r4, r5, lr}
9000a7ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000a7b0:	f7fc faf0 	bl	90006d94 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000a7b4:	2c00      	cmp	r4, #0
9000a7b6:	d05a      	beq.n	9000a86e <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000a7b8:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a7ba:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000a7bc:	2100      	movs	r1, #0
9000a7be:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a7c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000a7c4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000a7c8:	68da      	ldr	r2, [r3, #12]
9000a7ca:	f022 0201 	bic.w	r2, r2, #1
9000a7ce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a7d0:	e005      	b.n	9000a7de <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000a7d2:	f7fc fadf 	bl	90006d94 <HAL_GetTick>
9000a7d6:	1b43      	subs	r3, r0, r5
9000a7d8:	2b05      	cmp	r3, #5
9000a7da:	d841      	bhi.n	9000a860 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a7dc:	6823      	ldr	r3, [r4, #0]
9000a7de:	68da      	ldr	r2, [r3, #12]
9000a7e0:	07d2      	lsls	r2, r2, #31
9000a7e2:	d4f6      	bmi.n	9000a7d2 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a7e4:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000a7e8:	69e0      	ldr	r0, [r4, #28]
9000a7ea:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a7ec:	68e1      	ldr	r1, [r4, #12]
9000a7ee:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a7f0:	4302      	orrs	r2, r0
9000a7f2:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a7f4:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a7f6:	4302      	orrs	r2, r0
9000a7f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a7fa:	4302      	orrs	r2, r0
9000a7fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000a7fe:	4302      	orrs	r2, r0
9000a800:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000a802:	4302      	orrs	r2, r0
9000a804:	68a0      	ldr	r0, [r4, #8]
9000a806:	4302      	orrs	r2, r0
9000a808:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000a80a:	3801      	subs	r0, #1
9000a80c:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a810:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a812:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a814:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000a818:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a81a:	d103      	bne.n	9000a824 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000a81c:	691a      	ldr	r2, [r3, #16]
9000a81e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000a822:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000a824:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a826:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000a828:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000a82a:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a82c:	db30      	blt.n	9000a890 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000a82e:	b292      	uxth	r2, r2
9000a830:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000a832:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000a834:	2a00      	cmp	r2, #0
9000a836:	db1c      	blt.n	9000a872 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a838:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a83a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a83e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a842:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a844:	d021      	beq.n	9000a88a <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000a846:	b2c0      	uxtb	r0, r0
9000a848:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000a84a:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000a84c:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000a84e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000a850:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a852:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000a854:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000a856:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000a85a:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000a85e:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a860:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a862:	2303      	movs	r3, #3
      return HAL_ERROR;
9000a864:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a866:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a868:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000a86c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000a86e:	2001      	movs	r0, #1
}
9000a870:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a872:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000a874:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a876:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a87a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000a87e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a880:	6a19      	ldr	r1, [r3, #32]
9000a882:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a886:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a888:	d1dd      	bne.n	9000a846 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000a88a:	2200      	movs	r2, #0
9000a88c:	629a      	str	r2, [r3, #40]	; 0x28
9000a88e:	e7dc      	b.n	9000a84a <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a890:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000a892:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a894:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a898:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a89a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a89c:	621a      	str	r2, [r3, #32]
9000a89e:	e7c8      	b.n	9000a832 <HAL_MDMA_Init+0x86>

9000a8a0 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000a8a0:	b1f8      	cbz	r0, 9000a8e2 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000a8a2:	6802      	ldr	r2, [r0, #0]
9000a8a4:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000a8a6:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000a8a8:	68d0      	ldr	r0, [r2, #12]
{
9000a8aa:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000a8ac:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a8b0:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000a8b2:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000a8b4:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000a8b6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000a8b8:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000a8ba:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000a8bc:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000a8be:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000a8c0:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000a8c2:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000a8c4:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000a8c6:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000a8c8:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a8ca:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a8cc:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000a8ce:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000a8d2:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000a8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000a8da:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000a8dc:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000a8e0:	4770      	bx	lr
    return HAL_ERROR;
9000a8e2:	2001      	movs	r0, #1
}
9000a8e4:	4770      	bx	lr
9000a8e6:	bf00      	nop

9000a8e8 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000a8e8:	b310      	cbz	r0, 9000a930 <HAL_MDMA_ConfigPostRequestMask+0x48>
9000a8ea:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000a8ec:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a8f0:	2801      	cmp	r0, #1
9000a8f2:	d01f      	beq.n	9000a934 <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000a8f4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000a8f6:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a8fa:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000a8fe:	45f4      	cmp	ip, lr
9000a900:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000a904:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a908:	d004      	beq.n	9000a914 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000a90a:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000a90c:	2200      	movs	r2, #0
9000a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000a912:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000a914:	681d      	ldr	r5, [r3, #0]
9000a916:	692c      	ldr	r4, [r5, #16]
9000a918:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000a91c:	d1f6      	bne.n	9000a90c <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000a91e:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000a920:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a922:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000a924:	b941      	cbnz	r1, 9000a938 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a92a:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a92c:	612a      	str	r2, [r5, #16]
9000a92e:	e7ed      	b.n	9000a90c <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000a930:	2001      	movs	r0, #1
9000a932:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000a934:	2002      	movs	r0, #2
}
9000a936:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a938:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a93c:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a93e:	612a      	str	r2, [r5, #16]
9000a940:	e7e4      	b.n	9000a90c <HAL_MDMA_ConfigPostRequestMask+0x24>
9000a942:	bf00      	nop

9000a944 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000a944:	2800      	cmp	r0, #0
9000a946:	d06f      	beq.n	9000aa28 <HAL_MDMA_Start_IT+0xe4>
9000a948:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000a94a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a94e:	2801      	cmp	r0, #1
9000a950:	d072      	beq.n	9000aa38 <HAL_MDMA_Start_IT+0xf4>
9000a952:	2001      	movs	r0, #1
9000a954:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a958:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000a95c:	2801      	cmp	r0, #1
9000a95e:	d004      	beq.n	9000a96a <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000a960:	2300      	movs	r3, #0
    return HAL_BUSY;
9000a962:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000a964:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000a968:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a96a:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a96c:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a970:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000a974:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a976:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a978:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a97c:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000a980:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a984:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a988:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a98c:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000a990:	68e5      	ldr	r5, [r4, #12]
9000a992:	f025 0501 	bic.w	r5, r5, #1
9000a996:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a998:	6965      	ldr	r5, [r4, #20]
9000a99a:	ea00 0005 	and.w	r0, r0, r5
9000a99e:	ea40 0003 	orr.w	r0, r0, r3
9000a9a2:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a9a4:	6963      	ldr	r3, [r4, #20]
9000a9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000a9aa:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000a9ae:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000a9b0:	f04f 031f 	mov.w	r3, #31
9000a9b4:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000a9b6:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000a9b8:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000a9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a9bc:	bf0c      	ite	eq
9000a9be:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a9c2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a9c6:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000a9ca:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a9ce:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a9d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a9d2:	bf0c      	ite	eq
9000a9d4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000a9d8:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000a9dc:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000a9de:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000a9e2:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000a9e4:	68e3      	ldr	r3, [r4, #12]
9000a9e6:	f043 0306 	orr.w	r3, r3, #6
9000a9ea:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000a9ec:	b11a      	cbz	r2, 9000a9f6 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000a9ee:	68e3      	ldr	r3, [r4, #12]
9000a9f0:	f043 0310 	orr.w	r3, r3, #16
9000a9f4:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a9f6:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000a9fa:	b11b      	cbz	r3, 9000aa04 <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000a9fc:	68e3      	ldr	r3, [r4, #12]
9000a9fe:	f043 0308 	orr.w	r3, r3, #8
9000aa02:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000aa04:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000aa08:	b11b      	cbz	r3, 9000aa12 <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000aa0a:	68e3      	ldr	r3, [r4, #12]
9000aa0c:	f043 0320 	orr.w	r3, r3, #32
9000aa10:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000aa12:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000aa14:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000aa18:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000aa1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000aa20:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000aa22:	d003      	beq.n	9000aa2c <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000aa24:	2000      	movs	r0, #0
}
9000aa26:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000aa28:	2001      	movs	r0, #1
9000aa2a:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000aa2c:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000aa2e:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000aa30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000aa34:	60e3      	str	r3, [r4, #12]
}
9000aa36:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000aa38:	2002      	movs	r0, #2
}
9000aa3a:	4770      	bx	lr

9000aa3c <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000aa3c:	4603      	mov	r3, r0
9000aa3e:	b188      	cbz	r0, 9000aa64 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000aa40:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000aa44:	2a02      	cmp	r2, #2
9000aa46:	d003      	beq.n	9000aa50 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000aa48:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000aa4a:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000aa4c:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000aa4e:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000aa50:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa52:	2104      	movs	r1, #4
  return HAL_OK;
9000aa54:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa56:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000aa5a:	68d3      	ldr	r3, [r2, #12]
9000aa5c:	f023 0301 	bic.w	r3, r3, #1
9000aa60:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000aa62:	4770      	bx	lr
    return HAL_ERROR;
9000aa64:	2001      	movs	r0, #1
}
9000aa66:	4770      	bx	lr

9000aa68 <HAL_MDMA_IRQHandler>:
{
9000aa68:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000aa6a:	2300      	movs	r3, #0
{
9000aa6c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa6e:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000aa72:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000aa74:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa76:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa78:	4b57      	ldr	r3, [pc, #348]	; (9000abd8 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa7a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa7c:	4a57      	ldr	r2, [pc, #348]	; (9000abdc <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa7e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000aa80:	6823      	ldr	r3, [r4, #0]
9000aa82:	441a      	add	r2, r3
9000aa84:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000aa88:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000aa8c:	4202      	tst	r2, r0
9000aa8e:	f000 80a0 	beq.w	9000abd2 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000aa92:	681a      	ldr	r2, [r3, #0]
9000aa94:	07d1      	lsls	r1, r2, #31
9000aa96:	d529      	bpl.n	9000aaec <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000aa98:	68da      	ldr	r2, [r3, #12]
9000aa9a:	0792      	lsls	r2, r2, #30
9000aa9c:	d526      	bpl.n	9000aaec <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000aa9e:	68da      	ldr	r2, [r3, #12]
9000aaa0:	f022 0202 	bic.w	r2, r2, #2
9000aaa4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000aaa6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000aaa8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000aaaa:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000aaac:	bf54      	ite	pl
9000aaae:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000aab2:	f041 0102 	orrmi.w	r1, r1, #2
9000aab6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000aab8:	0591      	lsls	r1, r2, #22
9000aaba:	d503      	bpl.n	9000aac4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000aabc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aabe:	f041 0104 	orr.w	r1, r1, #4
9000aac2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000aac4:	05d0      	lsls	r0, r2, #23
9000aac6:	d503      	bpl.n	9000aad0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000aac8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aaca:	f041 0108 	orr.w	r1, r1, #8
9000aace:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000aad0:	0551      	lsls	r1, r2, #21
9000aad2:	d503      	bpl.n	9000aadc <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000aad4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000aad6:	f041 0110 	orr.w	r1, r1, #16
9000aada:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000aadc:	0510      	lsls	r0, r2, #20
9000aade:	d503      	bpl.n	9000aae8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000aae0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000aae2:	f042 0220 	orr.w	r2, r2, #32
9000aae6:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000aae8:	2201      	movs	r2, #1
9000aaea:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000aaec:	681a      	ldr	r2, [r3, #0]
9000aaee:	06d1      	lsls	r1, r2, #27
9000aaf0:	d509      	bpl.n	9000ab06 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000aaf2:	68da      	ldr	r2, [r3, #12]
9000aaf4:	0692      	lsls	r2, r2, #26
9000aaf6:	d506      	bpl.n	9000ab06 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000aaf8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000aafa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000aafc:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000aafe:	b112      	cbz	r2, 9000ab06 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000ab00:	4620      	mov	r0, r4
9000ab02:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000ab04:	6823      	ldr	r3, [r4, #0]
9000ab06:	681a      	ldr	r2, [r3, #0]
9000ab08:	0710      	lsls	r0, r2, #28
9000ab0a:	d509      	bpl.n	9000ab20 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000ab0c:	68da      	ldr	r2, [r3, #12]
9000ab0e:	06d1      	lsls	r1, r2, #27
9000ab10:	d506      	bpl.n	9000ab20 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ab12:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000ab14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ab16:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000ab18:	b112      	cbz	r2, 9000ab20 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000ab1a:	4620      	mov	r0, r4
9000ab1c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000ab1e:	6823      	ldr	r3, [r4, #0]
9000ab20:	681a      	ldr	r2, [r3, #0]
9000ab22:	0752      	lsls	r2, r2, #29
9000ab24:	d509      	bpl.n	9000ab3a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000ab26:	68da      	ldr	r2, [r3, #12]
9000ab28:	0710      	lsls	r0, r2, #28
9000ab2a:	d506      	bpl.n	9000ab3a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000ab2c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ab2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000ab30:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ab32:	b112      	cbz	r2, 9000ab3a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000ab34:	4620      	mov	r0, r4
9000ab36:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000ab38:	6823      	ldr	r3, [r4, #0]
9000ab3a:	681a      	ldr	r2, [r3, #0]
9000ab3c:	0791      	lsls	r1, r2, #30
9000ab3e:	d516      	bpl.n	9000ab6e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000ab40:	68da      	ldr	r2, [r3, #12]
9000ab42:	0752      	lsls	r2, r2, #29
9000ab44:	d513      	bpl.n	9000ab6e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000ab46:	68da      	ldr	r2, [r3, #12]
9000ab48:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000ab4c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000ab4e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000ab52:	2a04      	cmp	r2, #4
9000ab54:	d034      	beq.n	9000abc0 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ab56:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000ab58:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ab5a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000ab5c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000ab5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000ab60:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000ab64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000ab68:	b10b      	cbz	r3, 9000ab6e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000ab6a:	4620      	mov	r0, r4
9000ab6c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000ab6e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000ab70:	2b00      	cmp	r3, #0
9000ab72:	d02e      	beq.n	9000abd2 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000ab74:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000ab76:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab78:	4b19      	ldr	r3, [pc, #100]	; (9000abe0 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000ab7a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab7e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000ab82:	68cb      	ldr	r3, [r1, #12]
9000ab84:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000ab88:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000ab8a:	60cb      	str	r3, [r1, #12]
9000ab8c:	e002      	b.n	9000ab94 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000ab8e:	68cb      	ldr	r3, [r1, #12]
9000ab90:	07d8      	lsls	r0, r3, #31
9000ab92:	d504      	bpl.n	9000ab9e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000ab94:	9b01      	ldr	r3, [sp, #4]
9000ab96:	3301      	adds	r3, #1
9000ab98:	4293      	cmp	r3, r2
9000ab9a:	9301      	str	r3, [sp, #4]
9000ab9c:	d9f7      	bls.n	9000ab8e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000ab9e:	2300      	movs	r3, #0
9000aba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000aba4:	68cb      	ldr	r3, [r1, #12]
9000aba6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000aba8:	bf4c      	ite	mi
9000abaa:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000abac:	2301      	movpl	r3, #1
9000abae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000abb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000abb4:	b16b      	cbz	r3, 9000abd2 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000abb6:	4620      	mov	r0, r4
}
9000abb8:	b003      	add	sp, #12
9000abba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000abbe:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000abc0:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000abc2:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000abc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000abc6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000abca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000abce:	2b00      	cmp	r3, #0
9000abd0:	d1f1      	bne.n	9000abb6 <HAL_MDMA_IRQHandler+0x14e>
}
9000abd2:	b003      	add	sp, #12
9000abd4:	bd30      	pop	{r4, r5, pc}
9000abd6:	bf00      	nop
9000abd8:	24000054 	.word	0x24000054
9000abdc:	adffffc0 	.word	0xadffffc0
9000abe0:	1b4e81b5 	.word	0x1b4e81b5

9000abe4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000abe4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000abe6:	4c10      	ldr	r4, [pc, #64]	; (9000ac28 <HAL_PWREx_ConfigSupply+0x44>)
9000abe8:	68e3      	ldr	r3, [r4, #12]
9000abea:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000abee:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000abf0:	d105      	bne.n	9000abfe <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000abf2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000abf6:	1a18      	subs	r0, r3, r0
9000abf8:	bf18      	it	ne
9000abfa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000abfc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000abfe:	f023 0307 	bic.w	r3, r3, #7
9000ac02:	4303      	orrs	r3, r0
9000ac04:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000ac06:	f7fc f8c5 	bl	90006d94 <HAL_GetTick>
9000ac0a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000ac0c:	e005      	b.n	9000ac1a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000ac0e:	f7fc f8c1 	bl	90006d94 <HAL_GetTick>
9000ac12:	1b40      	subs	r0, r0, r5
9000ac14:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000ac18:	d804      	bhi.n	9000ac24 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000ac1a:	6863      	ldr	r3, [r4, #4]
9000ac1c:	049b      	lsls	r3, r3, #18
9000ac1e:	d5f6      	bpl.n	9000ac0e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000ac20:	2000      	movs	r0, #0
}
9000ac22:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000ac24:	2001      	movs	r0, #1
}
9000ac26:	bd38      	pop	{r3, r4, r5, pc}
9000ac28:	58024800 	.word	0x58024800

9000ac2c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ac2c:	4b3b      	ldr	r3, [pc, #236]	; (9000ad1c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000ac2e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ac30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000ac32:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000ac34:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000ac36:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000ac3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000ac3c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000ac40:	d038      	beq.n	9000acb4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000ac42:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000ac46:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ac4a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000ac4e:	fb05 f101 	mul.w	r1, r5, r1
9000ac52:	2a01      	cmp	r2, #1
9000ac54:	ee07 1a90 	vmov	s15, r1
9000ac58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000ac5c:	d002      	beq.n	9000ac64 <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000ac5e:	2a02      	cmp	r2, #2
9000ac60:	d04e      	beq.n	9000ad00 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000ac62:	b34a      	cbz	r2, 9000acb8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ac64:	ee07 0a90 	vmov	s15, r0
9000ac68:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000ad20 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000ac6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ac72:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000ac76:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000ad24 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ac7e:	ee07 3a90 	vmov	s15, r3
9000ac82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000ac86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ac8a:	eee7 7a25 	vfma.f32	s15, s14, s11
9000ac8e:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ac92:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000ac96:	4b21      	ldr	r3, [pc, #132]	; (9000ad1c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ac9a:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000ac9e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000aca0:	ee07 3a90 	vmov	s15, r3
9000aca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000aca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000acac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000acb0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000acb4:	bc30      	pop	{r4, r5}
9000acb6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000acb8:	681a      	ldr	r2, [r3, #0]
9000acba:	0692      	lsls	r2, r2, #26
9000acbc:	d527      	bpl.n	9000ad0e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000acbe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acc0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000acc4:	4a18      	ldr	r2, [pc, #96]	; (9000ad28 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acc6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000acca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000accc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000acd4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000ad24 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000acd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000acdc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000acde:	ee06 3a90 	vmov	s13, r3
9000ace2:	ee06 2a10 	vmov	s12, r2
9000ace6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000acea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000acee:	eee7 6a05 	vfma.f32	s13, s14, s10
9000acf2:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000acf6:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000acfa:	ee66 6a87 	vmul.f32	s13, s13, s14
9000acfe:	e7ca      	b.n	9000ac96 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ad00:	ee07 0a90 	vmov	s15, r0
9000ad04:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000ad2c <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000ad08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ad0c:	e7b0      	b.n	9000ac70 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ad0e:	ee07 0a90 	vmov	s15, r0
9000ad12:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000ad30 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000ad16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ad1a:	e7a9      	b.n	9000ac70 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000ad1c:	58024400 	.word	0x58024400
9000ad20:	4a742400 	.word	0x4a742400
9000ad24:	39000000 	.word	0x39000000
9000ad28:	03d09000 	.word	0x03d09000
9000ad2c:	4bbebc20 	.word	0x4bbebc20
9000ad30:	4c742400 	.word	0x4c742400

9000ad34 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000ad34:	2800      	cmp	r0, #0
9000ad36:	f000 81e8 	beq.w	9000b10a <HAL_RCC_OscConfig+0x3d6>
{
9000ad3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000ad3c:	6803      	ldr	r3, [r0, #0]
9000ad3e:	4604      	mov	r4, r0
9000ad40:	07d9      	lsls	r1, r3, #31
9000ad42:	d52e      	bpl.n	9000ada2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ad44:	49a4      	ldr	r1, [pc, #656]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000ad46:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ad48:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ad4a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000ad4e:	2a10      	cmp	r2, #16
9000ad50:	f000 8107 	beq.w	9000af62 <HAL_RCC_OscConfig+0x22e>
9000ad54:	2a18      	cmp	r2, #24
9000ad56:	f000 80ff 	beq.w	9000af58 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000ad5a:	6863      	ldr	r3, [r4, #4]
9000ad5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ad60:	f000 812a 	beq.w	9000afb8 <HAL_RCC_OscConfig+0x284>
9000ad64:	2b00      	cmp	r3, #0
9000ad66:	f000 8168 	beq.w	9000b03a <HAL_RCC_OscConfig+0x306>
9000ad6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000ad6e:	4b9a      	ldr	r3, [pc, #616]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000ad70:	681a      	ldr	r2, [r3, #0]
9000ad72:	f000 8289 	beq.w	9000b288 <HAL_RCC_OscConfig+0x554>
9000ad76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000ad7a:	601a      	str	r2, [r3, #0]
9000ad7c:	681a      	ldr	r2, [r3, #0]
9000ad7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000ad82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000ad84:	f7fc f806 	bl	90006d94 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad88:	4e93      	ldr	r6, [pc, #588]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000ad8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad8c:	e005      	b.n	9000ad9a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000ad8e:	f7fc f801 	bl	90006d94 <HAL_GetTick>
9000ad92:	1b40      	subs	r0, r0, r5
9000ad94:	2864      	cmp	r0, #100	; 0x64
9000ad96:	f200 814e 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad9a:	6833      	ldr	r3, [r6, #0]
9000ad9c:	039b      	lsls	r3, r3, #14
9000ad9e:	d5f6      	bpl.n	9000ad8e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000ada0:	6823      	ldr	r3, [r4, #0]
9000ada2:	079d      	lsls	r5, r3, #30
9000ada4:	f100 808a 	bmi.w	9000aebc <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ada8:	06d9      	lsls	r1, r3, #27
9000adaa:	d533      	bpl.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000adac:	4a8a      	ldr	r2, [pc, #552]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000adae:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000adb0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000adb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000adb6:	2b08      	cmp	r3, #8
9000adb8:	f000 80e3 	beq.w	9000af82 <HAL_RCC_OscConfig+0x24e>
9000adbc:	2b18      	cmp	r3, #24
9000adbe:	f000 80db 	beq.w	9000af78 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000adc2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000adc4:	4d84      	ldr	r5, [pc, #528]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000adc6:	2b00      	cmp	r3, #0
9000adc8:	f000 816f 	beq.w	9000b0aa <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000adcc:	682b      	ldr	r3, [r5, #0]
9000adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000add2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000add4:	f7fb ffde 	bl	90006d94 <HAL_GetTick>
9000add8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000adda:	e005      	b.n	9000ade8 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000addc:	f7fb ffda 	bl	90006d94 <HAL_GetTick>
9000ade0:	1b80      	subs	r0, r0, r6
9000ade2:	2802      	cmp	r0, #2
9000ade4:	f200 8127 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000ade8:	682b      	ldr	r3, [r5, #0]
9000adea:	05db      	lsls	r3, r3, #23
9000adec:	d5f6      	bpl.n	9000addc <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000adee:	f7fb ffd7 	bl	90006da0 <HAL_GetREVID>
9000adf2:	f241 0303 	movw	r3, #4099	; 0x1003
9000adf6:	4298      	cmp	r0, r3
9000adf8:	f200 826d 	bhi.w	9000b2d6 <HAL_RCC_OscConfig+0x5a2>
9000adfc:	6a22      	ldr	r2, [r4, #32]
9000adfe:	686b      	ldr	r3, [r5, #4]
9000ae00:	2a20      	cmp	r2, #32
9000ae02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000ae06:	bf0c      	ite	eq
9000ae08:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000ae0c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000ae10:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000ae12:	6823      	ldr	r3, [r4, #0]
9000ae14:	071d      	lsls	r5, r3, #28
9000ae16:	d516      	bpl.n	9000ae46 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000ae18:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000ae1a:	4d6f      	ldr	r5, [pc, #444]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000ae1c:	2b00      	cmp	r3, #0
9000ae1e:	f000 8122 	beq.w	9000b066 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000ae22:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ae24:	f043 0301 	orr.w	r3, r3, #1
9000ae28:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000ae2a:	f7fb ffb3 	bl	90006d94 <HAL_GetTick>
9000ae2e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ae30:	e005      	b.n	9000ae3e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000ae32:	f7fb ffaf 	bl	90006d94 <HAL_GetTick>
9000ae36:	1b80      	subs	r0, r0, r6
9000ae38:	2802      	cmp	r0, #2
9000ae3a:	f200 80fc 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ae3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ae40:	0798      	lsls	r0, r3, #30
9000ae42:	d5f6      	bpl.n	9000ae32 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000ae44:	6823      	ldr	r3, [r4, #0]
9000ae46:	069a      	lsls	r2, r3, #26
9000ae48:	d516      	bpl.n	9000ae78 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ae4a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000ae4c:	4d62      	ldr	r5, [pc, #392]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ae4e:	2b00      	cmp	r3, #0
9000ae50:	f000 811a 	beq.w	9000b088 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000ae54:	682b      	ldr	r3, [r5, #0]
9000ae56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ae5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000ae5c:	f7fb ff9a 	bl	90006d94 <HAL_GetTick>
9000ae60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ae62:	e005      	b.n	9000ae70 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000ae64:	f7fb ff96 	bl	90006d94 <HAL_GetTick>
9000ae68:	1b80      	subs	r0, r0, r6
9000ae6a:	2802      	cmp	r0, #2
9000ae6c:	f200 80e3 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ae70:	682b      	ldr	r3, [r5, #0]
9000ae72:	049f      	lsls	r7, r3, #18
9000ae74:	d5f6      	bpl.n	9000ae64 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000ae76:	6823      	ldr	r3, [r4, #0]
9000ae78:	0759      	lsls	r1, r3, #29
9000ae7a:	f100 80a3 	bmi.w	9000afc4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000ae7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000ae80:	b1d0      	cbz	r0, 9000aeb8 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000ae82:	4d55      	ldr	r5, [pc, #340]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000ae84:	692b      	ldr	r3, [r5, #16]
9000ae86:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ae8a:	2b18      	cmp	r3, #24
9000ae8c:	f000 81ae 	beq.w	9000b1ec <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000ae90:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ae92:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000ae94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000ae98:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ae9a:	f000 8142 	beq.w	9000b122 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000ae9e:	f7fb ff79 	bl	90006d94 <HAL_GetTick>
9000aea2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000aea4:	e005      	b.n	9000aeb2 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000aea6:	f7fb ff75 	bl	90006d94 <HAL_GetTick>
9000aeaa:	1b00      	subs	r0, r0, r4
9000aeac:	2802      	cmp	r0, #2
9000aeae:	f200 80c2 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000aeb2:	682b      	ldr	r3, [r5, #0]
9000aeb4:	019b      	lsls	r3, r3, #6
9000aeb6:	d4f6      	bmi.n	9000aea6 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000aeb8:	2000      	movs	r0, #0
}
9000aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000aebc:	4a46      	ldr	r2, [pc, #280]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000aebe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000aec0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000aec2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000aec6:	d12d      	bne.n	9000af24 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000aec8:	4b43      	ldr	r3, [pc, #268]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000aeca:	68e2      	ldr	r2, [r4, #12]
9000aecc:	681b      	ldr	r3, [r3, #0]
9000aece:	0759      	lsls	r1, r3, #29
9000aed0:	d501      	bpl.n	9000aed6 <HAL_RCC_OscConfig+0x1a2>
9000aed2:	2a00      	cmp	r2, #0
9000aed4:	d04e      	beq.n	9000af74 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000aed6:	4d40      	ldr	r5, [pc, #256]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000aed8:	682b      	ldr	r3, [r5, #0]
9000aeda:	f023 0319 	bic.w	r3, r3, #25
9000aede:	4313      	orrs	r3, r2
9000aee0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000aee2:	f7fb ff57 	bl	90006d94 <HAL_GetTick>
9000aee6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000aee8:	e005      	b.n	9000aef6 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000aeea:	f7fb ff53 	bl	90006d94 <HAL_GetTick>
9000aeee:	1b80      	subs	r0, r0, r6
9000aef0:	2802      	cmp	r0, #2
9000aef2:	f200 80a0 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000aef6:	682b      	ldr	r3, [r5, #0]
9000aef8:	075b      	lsls	r3, r3, #29
9000aefa:	d5f6      	bpl.n	9000aeea <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000aefc:	f7fb ff50 	bl	90006da0 <HAL_GetREVID>
9000af00:	f241 0303 	movw	r3, #4099	; 0x1003
9000af04:	4298      	cmp	r0, r3
9000af06:	f200 80f7 	bhi.w	9000b0f8 <HAL_RCC_OscConfig+0x3c4>
9000af0a:	6922      	ldr	r2, [r4, #16]
9000af0c:	686b      	ldr	r3, [r5, #4]
9000af0e:	2a40      	cmp	r2, #64	; 0x40
9000af10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000af14:	bf0c      	ite	eq
9000af16:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000af1a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000af1e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000af20:	6823      	ldr	r3, [r4, #0]
9000af22:	e741      	b.n	9000ada8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000af24:	2b18      	cmp	r3, #24
9000af26:	f000 80e3 	beq.w	9000b0f0 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000af2a:	4d2b      	ldr	r5, [pc, #172]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000af2c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000af2e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000af30:	2a00      	cmp	r2, #0
9000af32:	f000 80cc 	beq.w	9000b0ce <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000af36:	f023 0319 	bic.w	r3, r3, #25
9000af3a:	4313      	orrs	r3, r2
9000af3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000af3e:	f7fb ff29 	bl	90006d94 <HAL_GetTick>
9000af42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000af44:	e004      	b.n	9000af50 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000af46:	f7fb ff25 	bl	90006d94 <HAL_GetTick>
9000af4a:	1b80      	subs	r0, r0, r6
9000af4c:	2802      	cmp	r0, #2
9000af4e:	d872      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000af50:	682b      	ldr	r3, [r5, #0]
9000af52:	075f      	lsls	r7, r3, #29
9000af54:	d5f7      	bpl.n	9000af46 <HAL_RCC_OscConfig+0x212>
9000af56:	e7d1      	b.n	9000aefc <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000af58:	f001 0103 	and.w	r1, r1, #3
9000af5c:	2902      	cmp	r1, #2
9000af5e:	f47f aefc 	bne.w	9000ad5a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000af62:	4a1d      	ldr	r2, [pc, #116]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000af64:	6812      	ldr	r2, [r2, #0]
9000af66:	0392      	lsls	r2, r2, #14
9000af68:	f57f af1b 	bpl.w	9000ada2 <HAL_RCC_OscConfig+0x6e>
9000af6c:	6862      	ldr	r2, [r4, #4]
9000af6e:	2a00      	cmp	r2, #0
9000af70:	f47f af17 	bne.w	9000ada2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000af74:	2001      	movs	r0, #1
}
9000af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000af78:	f002 0203 	and.w	r2, r2, #3
9000af7c:	2a01      	cmp	r2, #1
9000af7e:	f47f af20 	bne.w	9000adc2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000af82:	4b15      	ldr	r3, [pc, #84]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000af84:	681b      	ldr	r3, [r3, #0]
9000af86:	05da      	lsls	r2, r3, #23
9000af88:	d502      	bpl.n	9000af90 <HAL_RCC_OscConfig+0x25c>
9000af8a:	69e3      	ldr	r3, [r4, #28]
9000af8c:	2b80      	cmp	r3, #128	; 0x80
9000af8e:	d1f1      	bne.n	9000af74 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000af90:	f7fb ff06 	bl	90006da0 <HAL_GetREVID>
9000af94:	f241 0303 	movw	r3, #4099	; 0x1003
9000af98:	4298      	cmp	r0, r3
9000af9a:	f200 80b8 	bhi.w	9000b10e <HAL_RCC_OscConfig+0x3da>
9000af9e:	6a22      	ldr	r2, [r4, #32]
9000afa0:	2a20      	cmp	r2, #32
9000afa2:	f000 81a7 	beq.w	9000b2f4 <HAL_RCC_OscConfig+0x5c0>
9000afa6:	490c      	ldr	r1, [pc, #48]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000afa8:	684b      	ldr	r3, [r1, #4]
9000afaa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000afae:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000afb2:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000afb4:	6823      	ldr	r3, [r4, #0]
9000afb6:	e72d      	b.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000afb8:	4a07      	ldr	r2, [pc, #28]	; (9000afd8 <HAL_RCC_OscConfig+0x2a4>)
9000afba:	6813      	ldr	r3, [r2, #0]
9000afbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000afc0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000afc2:	e6df      	b.n	9000ad84 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000afc4:	4d05      	ldr	r5, [pc, #20]	; (9000afdc <HAL_RCC_OscConfig+0x2a8>)
9000afc6:	682b      	ldr	r3, [r5, #0]
9000afc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000afcc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000afce:	f7fb fee1 	bl	90006d94 <HAL_GetTick>
9000afd2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000afd4:	e009      	b.n	9000afea <HAL_RCC_OscConfig+0x2b6>
9000afd6:	bf00      	nop
9000afd8:	58024400 	.word	0x58024400
9000afdc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000afe0:	f7fb fed8 	bl	90006d94 <HAL_GetTick>
9000afe4:	1b80      	subs	r0, r0, r6
9000afe6:	2864      	cmp	r0, #100	; 0x64
9000afe8:	d825      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000afea:	682b      	ldr	r3, [r5, #0]
9000afec:	05da      	lsls	r2, r3, #23
9000afee:	d5f7      	bpl.n	9000afe0 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000aff0:	68a3      	ldr	r3, [r4, #8]
9000aff2:	2b01      	cmp	r3, #1
9000aff4:	f000 8178 	beq.w	9000b2e8 <HAL_RCC_OscConfig+0x5b4>
9000aff8:	2b00      	cmp	r3, #0
9000affa:	f000 8153 	beq.w	9000b2a4 <HAL_RCC_OscConfig+0x570>
9000affe:	2b05      	cmp	r3, #5
9000b000:	4ba5      	ldr	r3, [pc, #660]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
9000b002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000b004:	f000 817f 	beq.w	9000b306 <HAL_RCC_OscConfig+0x5d2>
9000b008:	f022 0201 	bic.w	r2, r2, #1
9000b00c:	671a      	str	r2, [r3, #112]	; 0x70
9000b00e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000b010:	f022 0204 	bic.w	r2, r2, #4
9000b014:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000b016:	f7fb febd 	bl	90006d94 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b01a:	4e9f      	ldr	r6, [pc, #636]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b01c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000b020:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b022:	e004      	b.n	9000b02e <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b024:	f7fb feb6 	bl	90006d94 <HAL_GetTick>
9000b028:	1b40      	subs	r0, r0, r5
9000b02a:	42b8      	cmp	r0, r7
9000b02c:	d803      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000b02e:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000b030:	079b      	lsls	r3, r3, #30
9000b032:	d5f7      	bpl.n	9000b024 <HAL_RCC_OscConfig+0x2f0>
9000b034:	e723      	b.n	9000ae7e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000b036:	2003      	movs	r0, #3
}
9000b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000b03a:	4d97      	ldr	r5, [pc, #604]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
9000b03c:	682b      	ldr	r3, [r5, #0]
9000b03e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000b042:	602b      	str	r3, [r5, #0]
9000b044:	682b      	ldr	r3, [r5, #0]
9000b046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000b04a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b04c:	f7fb fea2 	bl	90006d94 <HAL_GetTick>
9000b050:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000b052:	e004      	b.n	9000b05e <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000b054:	f7fb fe9e 	bl	90006d94 <HAL_GetTick>
9000b058:	1b80      	subs	r0, r0, r6
9000b05a:	2864      	cmp	r0, #100	; 0x64
9000b05c:	d8eb      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000b05e:	682b      	ldr	r3, [r5, #0]
9000b060:	039f      	lsls	r7, r3, #14
9000b062:	d4f7      	bmi.n	9000b054 <HAL_RCC_OscConfig+0x320>
9000b064:	e69c      	b.n	9000ada0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000b066:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000b068:	f023 0301 	bic.w	r3, r3, #1
9000b06c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000b06e:	f7fb fe91 	bl	90006d94 <HAL_GetTick>
9000b072:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000b074:	e004      	b.n	9000b080 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000b076:	f7fb fe8d 	bl	90006d94 <HAL_GetTick>
9000b07a:	1b80      	subs	r0, r0, r6
9000b07c:	2802      	cmp	r0, #2
9000b07e:	d8da      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000b080:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000b082:	0799      	lsls	r1, r3, #30
9000b084:	d4f7      	bmi.n	9000b076 <HAL_RCC_OscConfig+0x342>
9000b086:	e6dd      	b.n	9000ae44 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000b088:	682b      	ldr	r3, [r5, #0]
9000b08a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b08e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000b090:	f7fb fe80 	bl	90006d94 <HAL_GetTick>
9000b094:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000b096:	e004      	b.n	9000b0a2 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000b098:	f7fb fe7c 	bl	90006d94 <HAL_GetTick>
9000b09c:	1b80      	subs	r0, r0, r6
9000b09e:	2802      	cmp	r0, #2
9000b0a0:	d8c9      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000b0a2:	682b      	ldr	r3, [r5, #0]
9000b0a4:	0498      	lsls	r0, r3, #18
9000b0a6:	d4f7      	bmi.n	9000b098 <HAL_RCC_OscConfig+0x364>
9000b0a8:	e6e5      	b.n	9000ae76 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000b0aa:	682b      	ldr	r3, [r5, #0]
9000b0ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000b0b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b0b2:	f7fb fe6f 	bl	90006d94 <HAL_GetTick>
9000b0b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000b0b8:	e004      	b.n	9000b0c4 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000b0ba:	f7fb fe6b 	bl	90006d94 <HAL_GetTick>
9000b0be:	1b80      	subs	r0, r0, r6
9000b0c0:	2802      	cmp	r0, #2
9000b0c2:	d8b8      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000b0c4:	682b      	ldr	r3, [r5, #0]
9000b0c6:	05df      	lsls	r7, r3, #23
9000b0c8:	d4f7      	bmi.n	9000b0ba <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b0ca:	6823      	ldr	r3, [r4, #0]
9000b0cc:	e6a2      	b.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000b0ce:	f023 0301 	bic.w	r3, r3, #1
9000b0d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b0d4:	f7fb fe5e 	bl	90006d94 <HAL_GetTick>
9000b0d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000b0da:	e004      	b.n	9000b0e6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000b0dc:	f7fb fe5a 	bl	90006d94 <HAL_GetTick>
9000b0e0:	1b80      	subs	r0, r0, r6
9000b0e2:	2802      	cmp	r0, #2
9000b0e4:	d8a7      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000b0e6:	682b      	ldr	r3, [r5, #0]
9000b0e8:	0758      	lsls	r0, r3, #29
9000b0ea:	d4f7      	bmi.n	9000b0dc <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000b0ec:	6823      	ldr	r3, [r4, #0]
9000b0ee:	e65b      	b.n	9000ada8 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000b0f0:	0790      	lsls	r0, r2, #30
9000b0f2:	f47f af1a 	bne.w	9000af2a <HAL_RCC_OscConfig+0x1f6>
9000b0f6:	e6e7      	b.n	9000aec8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000b0f8:	686b      	ldr	r3, [r5, #4]
9000b0fa:	6922      	ldr	r2, [r4, #16]
9000b0fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000b100:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000b104:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000b106:	6823      	ldr	r3, [r4, #0]
9000b108:	e64e      	b.n	9000ada8 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000b10a:	2001      	movs	r0, #1
}
9000b10c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b10e:	4a62      	ldr	r2, [pc, #392]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
9000b110:	6a21      	ldr	r1, [r4, #32]
9000b112:	68d3      	ldr	r3, [r2, #12]
9000b114:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000b118:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000b11c:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b11e:	6823      	ldr	r3, [r4, #0]
9000b120:	e678      	b.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000b122:	f7fb fe37 	bl	90006d94 <HAL_GetTick>
9000b126:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b128:	e004      	b.n	9000b134 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b12a:	f7fb fe33 	bl	90006d94 <HAL_GetTick>
9000b12e:	1b80      	subs	r0, r0, r6
9000b130:	2802      	cmp	r0, #2
9000b132:	d880      	bhi.n	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b134:	682b      	ldr	r3, [r5, #0]
9000b136:	0199      	lsls	r1, r3, #6
9000b138:	d4f7      	bmi.n	9000b12a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b13a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000b13c:	4b57      	ldr	r3, [pc, #348]	; (9000b29c <HAL_RCC_OscConfig+0x568>)
9000b13e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b140:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b142:	4957      	ldr	r1, [pc, #348]	; (9000b2a0 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b144:	4e54      	ldr	r6, [pc, #336]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b146:	4313      	orrs	r3, r2
9000b148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b14a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000b14e:	62ab      	str	r3, [r5, #40]	; 0x28
9000b150:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000b154:	3b01      	subs	r3, #1
9000b156:	3a01      	subs	r2, #1
9000b158:	025b      	lsls	r3, r3, #9
9000b15a:	0412      	lsls	r2, r2, #16
9000b15c:	b29b      	uxth	r3, r3
9000b15e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b162:	4313      	orrs	r3, r2
9000b164:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000b166:	3a01      	subs	r2, #1
9000b168:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b16c:	4313      	orrs	r3, r2
9000b16e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000b170:	3a01      	subs	r2, #1
9000b172:	0612      	lsls	r2, r2, #24
9000b174:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b178:	4313      	orrs	r3, r2
9000b17a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000b17c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b17e:	f023 0301 	bic.w	r3, r3, #1
9000b182:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b184:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000b186:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000b188:	4011      	ands	r1, r2
9000b18a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000b18e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000b190:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b192:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000b194:	f023 030c 	bic.w	r3, r3, #12
9000b198:	4313      	orrs	r3, r2
9000b19a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000b19c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b19e:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000b1a0:	f023 0302 	bic.w	r3, r3, #2
9000b1a4:	4313      	orrs	r3, r2
9000b1a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000b1a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b1aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000b1ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b1b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000b1b6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000b1b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b1ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000b1be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000b1c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b1c2:	f043 0301 	orr.w	r3, r3, #1
9000b1c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000b1c8:	682b      	ldr	r3, [r5, #0]
9000b1ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000b1ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b1d0:	f7fb fde0 	bl	90006d94 <HAL_GetTick>
9000b1d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b1d6:	e005      	b.n	9000b1e4 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b1d8:	f7fb fddc 	bl	90006d94 <HAL_GetTick>
9000b1dc:	1b00      	subs	r0, r0, r4
9000b1de:	2802      	cmp	r0, #2
9000b1e0:	f63f af29 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b1e4:	6833      	ldr	r3, [r6, #0]
9000b1e6:	019a      	lsls	r2, r3, #6
9000b1e8:	d5f6      	bpl.n	9000b1d8 <HAL_RCC_OscConfig+0x4a4>
9000b1ea:	e665      	b.n	9000aeb8 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b1ec:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000b1ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000b1f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b1f2:	f43f ae62 	beq.w	9000aeba <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b1f6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b1fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000b1fc:	428b      	cmp	r3, r1
9000b1fe:	f47f aeb9 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b202:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b208:	429a      	cmp	r2, r3
9000b20a:	f47f aeb3 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b20e:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000b210:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000b214:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b216:	429a      	cmp	r2, r3
9000b218:	f47f aeac 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b21e:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000b222:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b224:	429a      	cmp	r2, r3
9000b226:	f47f aea5 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b22a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000b22c:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000b230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b232:	429a      	cmp	r2, r3
9000b234:	f47f ae9e 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000b238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000b23a:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000b23e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b240:	429e      	cmp	r6, r3
9000b242:	f47f ae97 	bne.w	9000af74 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b246:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b248:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b24a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b24e:	429a      	cmp	r2, r3
9000b250:	f43f ae32 	beq.w	9000aeb8 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000b254:	4a10      	ldr	r2, [pc, #64]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
9000b256:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b258:	f023 0301 	bic.w	r3, r3, #1
9000b25c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000b25e:	f7fb fd99 	bl	90006d94 <HAL_GetTick>
9000b262:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000b264:	f7fb fd96 	bl	90006d94 <HAL_GetTick>
9000b268:	42a8      	cmp	r0, r5
9000b26a:	d0fb      	beq.n	9000b264 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b26c:	4a0a      	ldr	r2, [pc, #40]	; (9000b298 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000b26e:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000b272:	4b0b      	ldr	r3, [pc, #44]	; (9000b2a0 <HAL_RCC_OscConfig+0x56c>)
9000b274:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000b276:	4023      	ands	r3, r4
9000b278:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000b27c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000b27e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b280:	f043 0301 	orr.w	r3, r3, #1
9000b284:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000b288:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000b28c:	601a      	str	r2, [r3, #0]
9000b28e:	681a      	ldr	r2, [r3, #0]
9000b290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000b294:	601a      	str	r2, [r3, #0]
9000b296:	e575      	b.n	9000ad84 <HAL_RCC_OscConfig+0x50>
9000b298:	58024400 	.word	0x58024400
9000b29c:	fffffc0c 	.word	0xfffffc0c
9000b2a0:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b2a4:	4d1c      	ldr	r5, [pc, #112]	; (9000b318 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b2a6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b2aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b2ac:	f023 0301 	bic.w	r3, r3, #1
9000b2b0:	672b      	str	r3, [r5, #112]	; 0x70
9000b2b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b2b4:	f023 0304 	bic.w	r3, r3, #4
9000b2b8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000b2ba:	f7fb fd6b 	bl	90006d94 <HAL_GetTick>
9000b2be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b2c0:	e005      	b.n	9000b2ce <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b2c2:	f7fb fd67 	bl	90006d94 <HAL_GetTick>
9000b2c6:	1b80      	subs	r0, r0, r6
9000b2c8:	42b8      	cmp	r0, r7
9000b2ca:	f63f aeb4 	bhi.w	9000b036 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b2ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b2d0:	0798      	lsls	r0, r3, #30
9000b2d2:	d4f6      	bmi.n	9000b2c2 <HAL_RCC_OscConfig+0x58e>
9000b2d4:	e5d3      	b.n	9000ae7e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b2d6:	68eb      	ldr	r3, [r5, #12]
9000b2d8:	6a22      	ldr	r2, [r4, #32]
9000b2da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000b2de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000b2e2:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b2e4:	6823      	ldr	r3, [r4, #0]
9000b2e6:	e595      	b.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b2e8:	4a0b      	ldr	r2, [pc, #44]	; (9000b318 <HAL_RCC_OscConfig+0x5e4>)
9000b2ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000b2ec:	f043 0301 	orr.w	r3, r3, #1
9000b2f0:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000b2f2:	e690      	b.n	9000b016 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b2f4:	4a08      	ldr	r2, [pc, #32]	; (9000b318 <HAL_RCC_OscConfig+0x5e4>)
9000b2f6:	6853      	ldr	r3, [r2, #4]
9000b2f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000b2fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000b300:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b302:	6823      	ldr	r3, [r4, #0]
9000b304:	e586      	b.n	9000ae14 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b306:	f042 0204 	orr.w	r2, r2, #4
9000b30a:	671a      	str	r2, [r3, #112]	; 0x70
9000b30c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000b30e:	f042 0201 	orr.w	r2, r2, #1
9000b312:	671a      	str	r2, [r3, #112]	; 0x70
9000b314:	e67f      	b.n	9000b016 <HAL_RCC_OscConfig+0x2e2>
9000b316:	bf00      	nop
9000b318:	58024400 	.word	0x58024400

9000b31c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b31c:	4a47      	ldr	r2, [pc, #284]	; (9000b43c <HAL_RCC_GetSysClockFreq+0x120>)
9000b31e:	6913      	ldr	r3, [r2, #16]
9000b320:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b324:	2b10      	cmp	r3, #16
9000b326:	d004      	beq.n	9000b332 <HAL_RCC_GetSysClockFreq+0x16>
9000b328:	2b18      	cmp	r3, #24
9000b32a:	d00d      	beq.n	9000b348 <HAL_RCC_GetSysClockFreq+0x2c>
9000b32c:	b11b      	cbz	r3, 9000b336 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000b32e:	4844      	ldr	r0, [pc, #272]	; (9000b440 <HAL_RCC_GetSysClockFreq+0x124>)
9000b330:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b332:	4844      	ldr	r0, [pc, #272]	; (9000b444 <HAL_RCC_GetSysClockFreq+0x128>)
9000b334:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b336:	6813      	ldr	r3, [r2, #0]
9000b338:	0699      	lsls	r1, r3, #26
9000b33a:	d54a      	bpl.n	9000b3d2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b33c:	6813      	ldr	r3, [r2, #0]
9000b33e:	4842      	ldr	r0, [pc, #264]	; (9000b448 <HAL_RCC_GetSysClockFreq+0x12c>)
9000b340:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b344:	40d8      	lsrs	r0, r3
9000b346:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b348:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000b34a:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b34c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b34e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000b350:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b354:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b356:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000b35a:	d038      	beq.n	9000b3ce <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b35c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b360:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b364:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b368:	fb05 f101 	mul.w	r1, r5, r1
9000b36c:	2b01      	cmp	r3, #1
9000b36e:	ee07 1a90 	vmov	s15, r1
9000b372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000b376:	d002      	beq.n	9000b37e <HAL_RCC_GetSysClockFreq+0x62>
9000b378:	2b02      	cmp	r3, #2
9000b37a:	d02c      	beq.n	9000b3d6 <HAL_RCC_GetSysClockFreq+0xba>
9000b37c:	b393      	cbz	r3, 9000b3e4 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b37e:	ee07 0a90 	vmov	s15, r0
9000b382:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000b44c <HAL_RCC_GetSysClockFreq+0x130>
9000b386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b38a:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b38c:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000b390:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000b450 <HAL_RCC_GetSysClockFreq+0x134>
9000b394:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000b398:	ee07 3a90 	vmov	s15, r3
9000b39c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000b3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b3a4:	eee7 7a25 	vfma.f32	s15, s14, s11
9000b3a8:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b3ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000b3b0:	4b22      	ldr	r3, [pc, #136]	; (9000b43c <HAL_RCC_GetSysClockFreq+0x120>)
9000b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000b3b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000b3b8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000b3ba:	ee07 3a90 	vmov	s15, r3
9000b3be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000b3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000b3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000b3ca:	ee17 0a90 	vmov	r0, s15
}
9000b3ce:	bc30      	pop	{r4, r5}
9000b3d0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b3d2:	481d      	ldr	r0, [pc, #116]	; (9000b448 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000b3d4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3d6:	ee07 0a90 	vmov	s15, r0
9000b3da:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000b454 <HAL_RCC_GetSysClockFreq+0x138>
9000b3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b3e2:	e7d2      	b.n	9000b38a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b3e4:	6813      	ldr	r3, [r2, #0]
9000b3e6:	069b      	lsls	r3, r3, #26
9000b3e8:	d520      	bpl.n	9000b42c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3ea:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3ec:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3f0:	4915      	ldr	r1, [pc, #84]	; (9000b448 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000b3f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b3f8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b3fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b400:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000b450 <HAL_RCC_GetSysClockFreq+0x134>
9000b404:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b408:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b40a:	ee06 3a90 	vmov	s13, r3
9000b40e:	ee06 1a10 	vmov	s12, r1
9000b412:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000b416:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000b41a:	eee7 6a05 	vfma.f32	s13, s14, s10
9000b41e:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000b422:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000b426:	ee66 6a87 	vmul.f32	s13, s13, s14
9000b42a:	e7c1      	b.n	9000b3b0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b42c:	ee07 0a90 	vmov	s15, r0
9000b430:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000b458 <HAL_RCC_GetSysClockFreq+0x13c>
9000b434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b438:	e7a7      	b.n	9000b38a <HAL_RCC_GetSysClockFreq+0x6e>
9000b43a:	bf00      	nop
9000b43c:	58024400 	.word	0x58024400
9000b440:	003d0900 	.word	0x003d0900
9000b444:	017d7840 	.word	0x017d7840
9000b448:	03d09000 	.word	0x03d09000
9000b44c:	4a742400 	.word	0x4a742400
9000b450:	39000000 	.word	0x39000000
9000b454:	4bbebc20 	.word	0x4bbebc20
9000b458:	4c742400 	.word	0x4c742400

9000b45c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000b45c:	2800      	cmp	r0, #0
9000b45e:	f000 810c 	beq.w	9000b67a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b462:	4a8c      	ldr	r2, [pc, #560]	; (9000b694 <HAL_RCC_ClockConfig+0x238>)
9000b464:	6813      	ldr	r3, [r2, #0]
9000b466:	f003 030f 	and.w	r3, r3, #15
9000b46a:	428b      	cmp	r3, r1
{
9000b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b470:	4604      	mov	r4, r0
9000b472:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b474:	d20c      	bcs.n	9000b490 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b476:	6813      	ldr	r3, [r2, #0]
9000b478:	f023 030f 	bic.w	r3, r3, #15
9000b47c:	430b      	orrs	r3, r1
9000b47e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b480:	6813      	ldr	r3, [r2, #0]
9000b482:	f003 030f 	and.w	r3, r3, #15
9000b486:	428b      	cmp	r3, r1
9000b488:	d002      	beq.n	9000b490 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000b48a:	2001      	movs	r0, #1
}
9000b48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b490:	6823      	ldr	r3, [r4, #0]
9000b492:	075f      	lsls	r7, r3, #29
9000b494:	d50b      	bpl.n	9000b4ae <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b496:	4980      	ldr	r1, [pc, #512]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b498:	6920      	ldr	r0, [r4, #16]
9000b49a:	698a      	ldr	r2, [r1, #24]
9000b49c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4a0:	4290      	cmp	r0, r2
9000b4a2:	d904      	bls.n	9000b4ae <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b4a4:	698a      	ldr	r2, [r1, #24]
9000b4a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4aa:	4302      	orrs	r2, r0
9000b4ac:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b4ae:	071e      	lsls	r6, r3, #28
9000b4b0:	d50b      	bpl.n	9000b4ca <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b4b2:	4979      	ldr	r1, [pc, #484]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b4b4:	6960      	ldr	r0, [r4, #20]
9000b4b6:	69ca      	ldr	r2, [r1, #28]
9000b4b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4bc:	4290      	cmp	r0, r2
9000b4be:	d904      	bls.n	9000b4ca <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b4c0:	69ca      	ldr	r2, [r1, #28]
9000b4c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4c6:	4302      	orrs	r2, r0
9000b4c8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b4ca:	06d8      	lsls	r0, r3, #27
9000b4cc:	d50b      	bpl.n	9000b4e6 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b4ce:	4972      	ldr	r1, [pc, #456]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b4d0:	69a0      	ldr	r0, [r4, #24]
9000b4d2:	69ca      	ldr	r2, [r1, #28]
9000b4d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b4d8:	4290      	cmp	r0, r2
9000b4da:	d904      	bls.n	9000b4e6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b4dc:	69ca      	ldr	r2, [r1, #28]
9000b4de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b4e2:	4302      	orrs	r2, r0
9000b4e4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b4e6:	0699      	lsls	r1, r3, #26
9000b4e8:	d50b      	bpl.n	9000b502 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b4ea:	496b      	ldr	r1, [pc, #428]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b4ec:	69e0      	ldr	r0, [r4, #28]
9000b4ee:	6a0a      	ldr	r2, [r1, #32]
9000b4f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4f4:	4290      	cmp	r0, r2
9000b4f6:	d904      	bls.n	9000b502 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b4f8:	6a0a      	ldr	r2, [r1, #32]
9000b4fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4fe:	4302      	orrs	r2, r0
9000b500:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b502:	079a      	lsls	r2, r3, #30
9000b504:	f140 80ab 	bpl.w	9000b65e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b508:	4863      	ldr	r0, [pc, #396]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b50a:	68e1      	ldr	r1, [r4, #12]
9000b50c:	6982      	ldr	r2, [r0, #24]
9000b50e:	f002 020f 	and.w	r2, r2, #15
9000b512:	4291      	cmp	r1, r2
9000b514:	d904      	bls.n	9000b520 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b516:	6982      	ldr	r2, [r0, #24]
9000b518:	f022 020f 	bic.w	r2, r2, #15
9000b51c:	430a      	orrs	r2, r1
9000b51e:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b520:	07d8      	lsls	r0, r3, #31
9000b522:	d530      	bpl.n	9000b586 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000b524:	4a5c      	ldr	r2, [pc, #368]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b526:	68a1      	ldr	r1, [r4, #8]
9000b528:	6993      	ldr	r3, [r2, #24]
9000b52a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000b52e:	430b      	orrs	r3, r1
9000b530:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b532:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b534:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b536:	2902      	cmp	r1, #2
9000b538:	f000 80a1 	beq.w	9000b67e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000b53c:	2903      	cmp	r1, #3
9000b53e:	f000 8098 	beq.w	9000b672 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000b542:	2901      	cmp	r1, #1
9000b544:	f000 80a1 	beq.w	9000b68a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000b548:	0758      	lsls	r0, r3, #29
9000b54a:	d59e      	bpl.n	9000b48a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b54c:	4e52      	ldr	r6, [pc, #328]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b54e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b552:	6933      	ldr	r3, [r6, #16]
9000b554:	f023 0307 	bic.w	r3, r3, #7
9000b558:	430b      	orrs	r3, r1
9000b55a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000b55c:	f7fb fc1a 	bl	90006d94 <HAL_GetTick>
9000b560:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b562:	e005      	b.n	9000b570 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b564:	f7fb fc16 	bl	90006d94 <HAL_GetTick>
9000b568:	1bc0      	subs	r0, r0, r7
9000b56a:	4540      	cmp	r0, r8
9000b56c:	f200 808b 	bhi.w	9000b686 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b570:	6933      	ldr	r3, [r6, #16]
9000b572:	6862      	ldr	r2, [r4, #4]
9000b574:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b578:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000b57c:	d1f2      	bne.n	9000b564 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b57e:	6823      	ldr	r3, [r4, #0]
9000b580:	0799      	lsls	r1, r3, #30
9000b582:	d506      	bpl.n	9000b592 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b584:	68e1      	ldr	r1, [r4, #12]
9000b586:	4844      	ldr	r0, [pc, #272]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b588:	6982      	ldr	r2, [r0, #24]
9000b58a:	f002 020f 	and.w	r2, r2, #15
9000b58e:	428a      	cmp	r2, r1
9000b590:	d869      	bhi.n	9000b666 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000b592:	4940      	ldr	r1, [pc, #256]	; (9000b694 <HAL_RCC_ClockConfig+0x238>)
9000b594:	680a      	ldr	r2, [r1, #0]
9000b596:	f002 020f 	and.w	r2, r2, #15
9000b59a:	42aa      	cmp	r2, r5
9000b59c:	d90a      	bls.n	9000b5b4 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b59e:	680a      	ldr	r2, [r1, #0]
9000b5a0:	f022 020f 	bic.w	r2, r2, #15
9000b5a4:	432a      	orrs	r2, r5
9000b5a6:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b5a8:	680a      	ldr	r2, [r1, #0]
9000b5aa:	f002 020f 	and.w	r2, r2, #15
9000b5ae:	42aa      	cmp	r2, r5
9000b5b0:	f47f af6b 	bne.w	9000b48a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b5b4:	075a      	lsls	r2, r3, #29
9000b5b6:	d50b      	bpl.n	9000b5d0 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b5b8:	4937      	ldr	r1, [pc, #220]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b5ba:	6920      	ldr	r0, [r4, #16]
9000b5bc:	698a      	ldr	r2, [r1, #24]
9000b5be:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b5c2:	4290      	cmp	r0, r2
9000b5c4:	d204      	bcs.n	9000b5d0 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b5c6:	698a      	ldr	r2, [r1, #24]
9000b5c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b5cc:	4302      	orrs	r2, r0
9000b5ce:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b5d0:	071f      	lsls	r7, r3, #28
9000b5d2:	d50b      	bpl.n	9000b5ec <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b5d4:	4930      	ldr	r1, [pc, #192]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b5d6:	6960      	ldr	r0, [r4, #20]
9000b5d8:	69ca      	ldr	r2, [r1, #28]
9000b5da:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b5de:	4290      	cmp	r0, r2
9000b5e0:	d204      	bcs.n	9000b5ec <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b5e2:	69ca      	ldr	r2, [r1, #28]
9000b5e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b5e8:	4302      	orrs	r2, r0
9000b5ea:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b5ec:	06de      	lsls	r6, r3, #27
9000b5ee:	d50b      	bpl.n	9000b608 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b5f0:	4929      	ldr	r1, [pc, #164]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b5f2:	69a0      	ldr	r0, [r4, #24]
9000b5f4:	69ca      	ldr	r2, [r1, #28]
9000b5f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b5fa:	4290      	cmp	r0, r2
9000b5fc:	d204      	bcs.n	9000b608 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b5fe:	69ca      	ldr	r2, [r1, #28]
9000b600:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b604:	4302      	orrs	r2, r0
9000b606:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b608:	069d      	lsls	r5, r3, #26
9000b60a:	d50b      	bpl.n	9000b624 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b60c:	4a22      	ldr	r2, [pc, #136]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b60e:	69e1      	ldr	r1, [r4, #28]
9000b610:	6a13      	ldr	r3, [r2, #32]
9000b612:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000b616:	4299      	cmp	r1, r3
9000b618:	d204      	bcs.n	9000b624 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b61a:	6a13      	ldr	r3, [r2, #32]
9000b61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000b620:	430b      	orrs	r3, r1
9000b622:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b624:	f7ff fe7a 	bl	9000b31c <HAL_RCC_GetSysClockFreq>
9000b628:	4a1b      	ldr	r2, [pc, #108]	; (9000b698 <HAL_RCC_ClockConfig+0x23c>)
9000b62a:	4603      	mov	r3, r0
9000b62c:	481b      	ldr	r0, [pc, #108]	; (9000b69c <HAL_RCC_ClockConfig+0x240>)
9000b62e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b630:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b632:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000b636:	4d1a      	ldr	r5, [pc, #104]	; (9000b6a0 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b638:	f002 020f 	and.w	r2, r2, #15
9000b63c:	4c19      	ldr	r4, [pc, #100]	; (9000b6a4 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b63e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b640:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b642:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000b646:	4818      	ldr	r0, [pc, #96]	; (9000b6a8 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b648:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b64c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000b64e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000b650:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b652:	40d3      	lsrs	r3, r2
9000b654:	6023      	str	r3, [r4, #0]
}
9000b656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000b65a:	f7f9 ba93 	b.w	90004b84 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b65e:	07da      	lsls	r2, r3, #31
9000b660:	f53f af60 	bmi.w	9000b524 <HAL_RCC_ClockConfig+0xc8>
9000b664:	e795      	b.n	9000b592 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b666:	6982      	ldr	r2, [r0, #24]
9000b668:	f022 020f 	bic.w	r2, r2, #15
9000b66c:	430a      	orrs	r2, r1
9000b66e:	6182      	str	r2, [r0, #24]
9000b670:	e78f      	b.n	9000b592 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b672:	019f      	lsls	r7, r3, #6
9000b674:	f53f af6a 	bmi.w	9000b54c <HAL_RCC_ClockConfig+0xf0>
9000b678:	e707      	b.n	9000b48a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000b67a:	2001      	movs	r0, #1
}
9000b67c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b67e:	039b      	lsls	r3, r3, #14
9000b680:	f53f af64 	bmi.w	9000b54c <HAL_RCC_ClockConfig+0xf0>
9000b684:	e701      	b.n	9000b48a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000b686:	2003      	movs	r0, #3
9000b688:	e700      	b.n	9000b48c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000b68a:	05de      	lsls	r6, r3, #23
9000b68c:	f53f af5e 	bmi.w	9000b54c <HAL_RCC_ClockConfig+0xf0>
9000b690:	e6fb      	b.n	9000b48a <HAL_RCC_ClockConfig+0x2e>
9000b692:	bf00      	nop
9000b694:	52002000 	.word	0x52002000
9000b698:	58024400 	.word	0x58024400
9000b69c:	90026580 	.word	0x90026580
9000b6a0:	24000054 	.word	0x24000054
9000b6a4:	24000058 	.word	0x24000058
9000b6a8:	24000060 	.word	0x24000060

9000b6ac <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6ac:	4a18      	ldr	r2, [pc, #96]	; (9000b710 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000b6ae:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6b0:	6913      	ldr	r3, [r2, #16]
9000b6b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b6b6:	2b10      	cmp	r3, #16
9000b6b8:	d01a      	beq.n	9000b6f0 <HAL_RCC_GetHCLKFreq+0x44>
9000b6ba:	2b18      	cmp	r3, #24
9000b6bc:	d023      	beq.n	9000b706 <HAL_RCC_GetHCLKFreq+0x5a>
9000b6be:	b1cb      	cbz	r3, 9000b6f4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
9000b6c0:	4814      	ldr	r0, [pc, #80]	; (9000b714 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6c2:	4b13      	ldr	r3, [pc, #76]	; (9000b710 <HAL_RCC_GetHCLKFreq+0x64>)
9000b6c4:	4914      	ldr	r1, [pc, #80]	; (9000b718 <HAL_RCC_GetHCLKFreq+0x6c>)
9000b6c6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6c8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6ca:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6ce:	4c13      	ldr	r4, [pc, #76]	; (9000b71c <HAL_RCC_GetHCLKFreq+0x70>)
9000b6d0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000b6d4:	4d12      	ldr	r5, [pc, #72]	; (9000b720 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6d6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6d8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6da:	f002 021f 	and.w	r2, r2, #31
9000b6de:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6e2:	f003 001f 	and.w	r0, r3, #31
9000b6e6:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
9000b6ea:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6ec:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
9000b6ee:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6f0:	480c      	ldr	r0, [pc, #48]	; (9000b724 <HAL_RCC_GetHCLKFreq+0x78>)
9000b6f2:	e7e6      	b.n	9000b6c2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b6f4:	6813      	ldr	r3, [r2, #0]
9000b6f6:	069b      	lsls	r3, r3, #26
9000b6f8:	d508      	bpl.n	9000b70c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b6fa:	6813      	ldr	r3, [r2, #0]
9000b6fc:	480a      	ldr	r0, [pc, #40]	; (9000b728 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b6fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b702:	40d8      	lsrs	r0, r3
9000b704:	e7dd      	b.n	9000b6c2 <HAL_RCC_GetHCLKFreq+0x16>
9000b706:	f7ff fa91 	bl	9000ac2c <HAL_RCC_GetSysClockFreq.part.0>
9000b70a:	e7da      	b.n	9000b6c2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b70c:	4806      	ldr	r0, [pc, #24]	; (9000b728 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b70e:	e7d8      	b.n	9000b6c2 <HAL_RCC_GetHCLKFreq+0x16>
9000b710:	58024400 	.word	0x58024400
9000b714:	003d0900 	.word	0x003d0900
9000b718:	90026580 	.word	0x90026580
9000b71c:	24000058 	.word	0x24000058
9000b720:	24000054 	.word	0x24000054
9000b724:	017d7840 	.word	0x017d7840
9000b728:	03d09000 	.word	0x03d09000

9000b72c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b72c:	4a1c      	ldr	r2, [pc, #112]	; (9000b7a0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000b72e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b730:	6913      	ldr	r3, [r2, #16]
9000b732:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b736:	2b10      	cmp	r3, #16
9000b738:	d021      	beq.n	9000b77e <HAL_RCC_GetPCLK1Freq+0x52>
9000b73a:	2b18      	cmp	r3, #24
9000b73c:	d02a      	beq.n	9000b794 <HAL_RCC_GetPCLK1Freq+0x68>
9000b73e:	b303      	cbz	r3, 9000b782 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b740:	4818      	ldr	r0, [pc, #96]	; (9000b7a4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b742:	4a17      	ldr	r2, [pc, #92]	; (9000b7a0 <HAL_RCC_GetPCLK1Freq+0x74>)
9000b744:	4918      	ldr	r1, [pc, #96]	; (9000b7a8 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000b746:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b748:	4c18      	ldr	r4, [pc, #96]	; (9000b7ac <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b74a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000b74e:	4d18      	ldr	r5, [pc, #96]	; (9000b7b0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b750:	5ccb      	ldrb	r3, [r1, r3]
9000b752:	f003 031f 	and.w	r3, r3, #31
9000b756:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b758:	6993      	ldr	r3, [r2, #24]
9000b75a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000b75e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b760:	5ccb      	ldrb	r3, [r1, r3]
9000b762:	f003 031f 	and.w	r3, r3, #31
9000b766:	fa20 f303 	lsr.w	r3, r0, r3
9000b76a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000b76c:	69d2      	ldr	r2, [r2, #28]
9000b76e:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000b772:	5c88      	ldrb	r0, [r1, r2]
9000b774:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000b778:	fa23 f000 	lsr.w	r0, r3, r0
9000b77c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b77e:	480d      	ldr	r0, [pc, #52]	; (9000b7b4 <HAL_RCC_GetPCLK1Freq+0x88>)
9000b780:	e7df      	b.n	9000b742 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b782:	6813      	ldr	r3, [r2, #0]
9000b784:	069b      	lsls	r3, r3, #26
9000b786:	d508      	bpl.n	9000b79a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b788:	6813      	ldr	r3, [r2, #0]
9000b78a:	480b      	ldr	r0, [pc, #44]	; (9000b7b8 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b78c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b790:	40d8      	lsrs	r0, r3
9000b792:	e7d6      	b.n	9000b742 <HAL_RCC_GetPCLK1Freq+0x16>
9000b794:	f7ff fa4a 	bl	9000ac2c <HAL_RCC_GetSysClockFreq.part.0>
9000b798:	e7d3      	b.n	9000b742 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b79a:	4807      	ldr	r0, [pc, #28]	; (9000b7b8 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b79c:	e7d1      	b.n	9000b742 <HAL_RCC_GetPCLK1Freq+0x16>
9000b79e:	bf00      	nop
9000b7a0:	58024400 	.word	0x58024400
9000b7a4:	003d0900 	.word	0x003d0900
9000b7a8:	90026580 	.word	0x90026580
9000b7ac:	24000058 	.word	0x24000058
9000b7b0:	24000054 	.word	0x24000054
9000b7b4:	017d7840 	.word	0x017d7840
9000b7b8:	03d09000 	.word	0x03d09000

9000b7bc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b7bc:	4a1c      	ldr	r2, [pc, #112]	; (9000b830 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000b7be:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b7c0:	6913      	ldr	r3, [r2, #16]
9000b7c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b7c6:	2b10      	cmp	r3, #16
9000b7c8:	d021      	beq.n	9000b80e <HAL_RCC_GetPCLK2Freq+0x52>
9000b7ca:	2b18      	cmp	r3, #24
9000b7cc:	d02a      	beq.n	9000b824 <HAL_RCC_GetPCLK2Freq+0x68>
9000b7ce:	b303      	cbz	r3, 9000b812 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b7d0:	4818      	ldr	r0, [pc, #96]	; (9000b834 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b7d2:	4a17      	ldr	r2, [pc, #92]	; (9000b830 <HAL_RCC_GetPCLK2Freq+0x74>)
9000b7d4:	4918      	ldr	r1, [pc, #96]	; (9000b838 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000b7d6:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b7d8:	4c18      	ldr	r4, [pc, #96]	; (9000b83c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b7da:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000b7de:	4d18      	ldr	r5, [pc, #96]	; (9000b840 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b7e0:	5ccb      	ldrb	r3, [r1, r3]
9000b7e2:	f003 031f 	and.w	r3, r3, #31
9000b7e6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b7e8:	6993      	ldr	r3, [r2, #24]
9000b7ea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000b7ee:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b7f0:	5ccb      	ldrb	r3, [r1, r3]
9000b7f2:	f003 031f 	and.w	r3, r3, #31
9000b7f6:	fa20 f303 	lsr.w	r3, r0, r3
9000b7fa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000b7fc:	69d2      	ldr	r2, [r2, #28]
9000b7fe:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000b802:	5c88      	ldrb	r0, [r1, r2]
9000b804:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000b808:	fa23 f000 	lsr.w	r0, r3, r0
9000b80c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b80e:	480d      	ldr	r0, [pc, #52]	; (9000b844 <HAL_RCC_GetPCLK2Freq+0x88>)
9000b810:	e7df      	b.n	9000b7d2 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b812:	6813      	ldr	r3, [r2, #0]
9000b814:	069b      	lsls	r3, r3, #26
9000b816:	d508      	bpl.n	9000b82a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b818:	6813      	ldr	r3, [r2, #0]
9000b81a:	480b      	ldr	r0, [pc, #44]	; (9000b848 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b81c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b820:	40d8      	lsrs	r0, r3
9000b822:	e7d6      	b.n	9000b7d2 <HAL_RCC_GetPCLK2Freq+0x16>
9000b824:	f7ff fa02 	bl	9000ac2c <HAL_RCC_GetSysClockFreq.part.0>
9000b828:	e7d3      	b.n	9000b7d2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b82a:	4807      	ldr	r0, [pc, #28]	; (9000b848 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b82c:	e7d1      	b.n	9000b7d2 <HAL_RCC_GetPCLK2Freq+0x16>
9000b82e:	bf00      	nop
9000b830:	58024400 	.word	0x58024400
9000b834:	003d0900 	.word	0x003d0900
9000b838:	90026580 	.word	0x90026580
9000b83c:	24000058 	.word	0x24000058
9000b840:	24000054 	.word	0x24000054
9000b844:	017d7840 	.word	0x017d7840
9000b848:	03d09000 	.word	0x03d09000

9000b84c <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b84c:	4b13      	ldr	r3, [pc, #76]	; (9000b89c <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000b84e:	223f      	movs	r2, #63	; 0x3f
9000b850:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b852:	691a      	ldr	r2, [r3, #16]
9000b854:	f002 0207 	and.w	r2, r2, #7
9000b858:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000b85a:	699a      	ldr	r2, [r3, #24]
9000b85c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000b860:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000b862:	699a      	ldr	r2, [r3, #24]
9000b864:	f002 020f 	and.w	r2, r2, #15
9000b868:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000b86a:	699a      	ldr	r2, [r3, #24]
9000b86c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b870:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000b872:	69da      	ldr	r2, [r3, #28]
9000b874:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b878:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000b87a:	69da      	ldr	r2, [r3, #28]
9000b87c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b880:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b882:	6a1b      	ldr	r3, [r3, #32]
{
9000b884:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b886:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b88a:	4c05      	ldr	r4, [pc, #20]	; (9000b8a0 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b88c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b88e:	6823      	ldr	r3, [r4, #0]
}
9000b890:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b894:	f003 030f 	and.w	r3, r3, #15
9000b898:	600b      	str	r3, [r1, #0]
}
9000b89a:	4770      	bx	lr
9000b89c:	58024400 	.word	0x58024400
9000b8a0:	52002000 	.word	0x52002000

9000b8a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b8a6:	4c3a      	ldr	r4, [pc, #232]	; (9000b990 <RCCEx_PLL2_Config+0xec>)
9000b8a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b8aa:	f003 0303 	and.w	r3, r3, #3
9000b8ae:	2b03      	cmp	r3, #3
9000b8b0:	d067      	beq.n	9000b982 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000b8b2:	6823      	ldr	r3, [r4, #0]
9000b8b4:	4606      	mov	r6, r0
9000b8b6:	460f      	mov	r7, r1
9000b8b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000b8bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b8be:	f7fb fa69 	bl	90006d94 <HAL_GetTick>
9000b8c2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b8c4:	e004      	b.n	9000b8d0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b8c6:	f7fb fa65 	bl	90006d94 <HAL_GetTick>
9000b8ca:	1b43      	subs	r3, r0, r5
9000b8cc:	2b02      	cmp	r3, #2
9000b8ce:	d856      	bhi.n	9000b97e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b8d0:	6823      	ldr	r3, [r4, #0]
9000b8d2:	011a      	lsls	r2, r3, #4
9000b8d4:	d4f7      	bmi.n	9000b8c6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000b8d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b8d8:	6832      	ldr	r2, [r6, #0]
9000b8da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000b8de:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000b8e2:	62a3      	str	r3, [r4, #40]	; 0x28
9000b8e4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b8e8:	3b01      	subs	r3, #1
9000b8ea:	3a01      	subs	r2, #1
9000b8ec:	025b      	lsls	r3, r3, #9
9000b8ee:	0412      	lsls	r2, r2, #16
9000b8f0:	b29b      	uxth	r3, r3
9000b8f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b8f6:	4313      	orrs	r3, r2
9000b8f8:	6872      	ldr	r2, [r6, #4]
9000b8fa:	3a01      	subs	r2, #1
9000b8fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b900:	4313      	orrs	r3, r2
9000b902:	6932      	ldr	r2, [r6, #16]
9000b904:	3a01      	subs	r2, #1
9000b906:	0612      	lsls	r2, r2, #24
9000b908:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b90c:	4313      	orrs	r3, r2
9000b90e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000b910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b912:	6972      	ldr	r2, [r6, #20]
9000b914:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000b918:	4313      	orrs	r3, r2
9000b91a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b91c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b91e:	69b3      	ldr	r3, [r6, #24]
9000b920:	f022 0220 	bic.w	r2, r2, #32
9000b924:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b926:	4b1b      	ldr	r3, [pc, #108]	; (9000b994 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b928:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000b92a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b92c:	f022 0210 	bic.w	r2, r2, #16
9000b930:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b932:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000b934:	69f2      	ldr	r2, [r6, #28]
9000b936:	400b      	ands	r3, r1
9000b938:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b93c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000b93e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b940:	f043 0310 	orr.w	r3, r3, #16
9000b944:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b948:	b1ef      	cbz	r7, 9000b986 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b94a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000b94c:	bf0c      	ite	eq
9000b94e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000b952:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000b956:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000b958:	4c0d      	ldr	r4, [pc, #52]	; (9000b990 <RCCEx_PLL2_Config+0xec>)
9000b95a:	6823      	ldr	r3, [r4, #0]
9000b95c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000b960:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b962:	f7fb fa17 	bl	90006d94 <HAL_GetTick>
9000b966:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b968:	e004      	b.n	9000b974 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b96a:	f7fb fa13 	bl	90006d94 <HAL_GetTick>
9000b96e:	1b40      	subs	r0, r0, r5
9000b970:	2802      	cmp	r0, #2
9000b972:	d804      	bhi.n	9000b97e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b974:	6823      	ldr	r3, [r4, #0]
9000b976:	011b      	lsls	r3, r3, #4
9000b978:	d5f7      	bpl.n	9000b96a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000b97a:	2000      	movs	r0, #0
}
9000b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000b97e:	2003      	movs	r0, #3
}
9000b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b982:	2001      	movs	r0, #1
}
9000b984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000b98a:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b98c:	e7e4      	b.n	9000b958 <RCCEx_PLL2_Config+0xb4>
9000b98e:	bf00      	nop
9000b990:	58024400 	.word	0x58024400
9000b994:	ffff0007 	.word	0xffff0007

9000b998 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b99a:	4c3a      	ldr	r4, [pc, #232]	; (9000ba84 <RCCEx_PLL3_Config+0xec>)
9000b99c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b99e:	f003 0303 	and.w	r3, r3, #3
9000b9a2:	2b03      	cmp	r3, #3
9000b9a4:	d067      	beq.n	9000ba76 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000b9a6:	6823      	ldr	r3, [r4, #0]
9000b9a8:	4606      	mov	r6, r0
9000b9aa:	460f      	mov	r7, r1
9000b9ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000b9b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b9b2:	f7fb f9ef 	bl	90006d94 <HAL_GetTick>
9000b9b6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b9b8:	e004      	b.n	9000b9c4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b9ba:	f7fb f9eb 	bl	90006d94 <HAL_GetTick>
9000b9be:	1b43      	subs	r3, r0, r5
9000b9c0:	2b02      	cmp	r3, #2
9000b9c2:	d856      	bhi.n	9000ba72 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b9c4:	6823      	ldr	r3, [r4, #0]
9000b9c6:	009a      	lsls	r2, r3, #2
9000b9c8:	d4f7      	bmi.n	9000b9ba <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000b9ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b9cc:	6832      	ldr	r2, [r6, #0]
9000b9ce:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000b9d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000b9d6:	62a3      	str	r3, [r4, #40]	; 0x28
9000b9d8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b9dc:	3b01      	subs	r3, #1
9000b9de:	3a01      	subs	r2, #1
9000b9e0:	025b      	lsls	r3, r3, #9
9000b9e2:	0412      	lsls	r2, r2, #16
9000b9e4:	b29b      	uxth	r3, r3
9000b9e6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b9ea:	4313      	orrs	r3, r2
9000b9ec:	6872      	ldr	r2, [r6, #4]
9000b9ee:	3a01      	subs	r2, #1
9000b9f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b9f4:	4313      	orrs	r3, r2
9000b9f6:	6932      	ldr	r2, [r6, #16]
9000b9f8:	3a01      	subs	r2, #1
9000b9fa:	0612      	lsls	r2, r2, #24
9000b9fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000ba00:	4313      	orrs	r3, r2
9000ba02:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000ba04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ba06:	6972      	ldr	r2, [r6, #20]
9000ba08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000ba0c:	4313      	orrs	r3, r2
9000ba0e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ba10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ba12:	69b3      	ldr	r3, [r6, #24]
9000ba14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000ba18:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ba1a:	4b1b      	ldr	r3, [pc, #108]	; (9000ba88 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ba1c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000ba1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ba20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000ba24:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ba26:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000ba28:	69f2      	ldr	r2, [r6, #28]
9000ba2a:	400b      	ands	r3, r1
9000ba2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000ba30:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000ba32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ba34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000ba38:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ba3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000ba3c:	b1ef      	cbz	r7, 9000ba7a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000ba3e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000ba40:	bf0c      	ite	eq
9000ba42:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000ba46:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000ba4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000ba4c:	4c0d      	ldr	r4, [pc, #52]	; (9000ba84 <RCCEx_PLL3_Config+0xec>)
9000ba4e:	6823      	ldr	r3, [r4, #0]
9000ba50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000ba54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ba56:	f7fb f99d 	bl	90006d94 <HAL_GetTick>
9000ba5a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000ba5c:	e004      	b.n	9000ba68 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000ba5e:	f7fb f999 	bl	90006d94 <HAL_GetTick>
9000ba62:	1b40      	subs	r0, r0, r5
9000ba64:	2802      	cmp	r0, #2
9000ba66:	d804      	bhi.n	9000ba72 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000ba68:	6823      	ldr	r3, [r4, #0]
9000ba6a:	009b      	lsls	r3, r3, #2
9000ba6c:	d5f7      	bpl.n	9000ba5e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000ba6e:	2000      	movs	r0, #0
}
9000ba70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000ba72:	2003      	movs	r0, #3
}
9000ba74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000ba76:	2001      	movs	r0, #1
}
9000ba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ba7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000ba7e:	62e3      	str	r3, [r4, #44]	; 0x2c
9000ba80:	e7e4      	b.n	9000ba4c <RCCEx_PLL3_Config+0xb4>
9000ba82:	bf00      	nop
9000ba84:	58024400 	.word	0x58024400
9000ba88:	ffff0007 	.word	0xffff0007

9000ba8c <HAL_RCCEx_PeriphCLKConfig>:
{
9000ba8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000ba90:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000ba94:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000ba96:	011d      	lsls	r5, r3, #4
9000ba98:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000ba9c:	d523      	bpl.n	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000ba9e:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000baa0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000baa4:	f000 8553 	beq.w	9000c54e <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000baa8:	d812      	bhi.n	9000bad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000baaa:	2900      	cmp	r1, #0
9000baac:	f000 85a9 	beq.w	9000c602 <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000bab0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000bab4:	f040 85a2 	bne.w	9000c5fc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000bab8:	2102      	movs	r1, #2
9000baba:	3008      	adds	r0, #8
9000babc:	f7ff fef2 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bac0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000bac2:	2e00      	cmp	r6, #0
9000bac4:	f040 8522 	bne.w	9000c50c <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000bac8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000baca:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bace:	e003      	b.n	9000bad8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000bad0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000bad4:	f040 8592 	bne.w	9000c5fc <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000bad8:	4dae      	ldr	r5, [pc, #696]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bada:	2600      	movs	r6, #0
9000badc:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000bade:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000bae2:	4301      	orrs	r1, r0
9000bae4:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000bae6:	05d8      	lsls	r0, r3, #23
9000bae8:	d50a      	bpl.n	9000bb00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000baea:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000baec:	2904      	cmp	r1, #4
9000baee:	d806      	bhi.n	9000bafe <HAL_RCCEx_PeriphCLKConfig+0x72>
9000baf0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000baf4:	053d0536 	.word	0x053d0536
9000baf8:	0323051a 	.word	0x0323051a
9000bafc:	0323      	.short	0x0323
9000bafe:	2601      	movs	r6, #1
9000bb00:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bb02:	0599      	lsls	r1, r3, #22
9000bb04:	d51d      	bpl.n	9000bb42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000bb06:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000bb08:	2980      	cmp	r1, #128	; 0x80
9000bb0a:	f000 8516 	beq.w	9000c53a <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000bb0e:	f200 80f9 	bhi.w	9000bd04 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000bb12:	2900      	cmp	r1, #0
9000bb14:	f000 8433 	beq.w	9000c37e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000bb18:	2940      	cmp	r1, #64	; 0x40
9000bb1a:	f040 80fa 	bne.w	9000bd12 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bb1e:	2100      	movs	r1, #0
9000bb20:	f104 0008 	add.w	r0, r4, #8
9000bb24:	f7ff febe 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bb28:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000bb2a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb2e:	2d00      	cmp	r5, #0
9000bb30:	f040 83fe 	bne.w	9000c330 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000bb34:	4f97      	ldr	r7, [pc, #604]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb36:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000bb38:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bb3a:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000bb3e:	4301      	orrs	r1, r0
9000bb40:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000bb42:	055f      	lsls	r7, r3, #21
9000bb44:	d521      	bpl.n	9000bb8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000bb46:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000bb4a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000bb4e:	f000 8521 	beq.w	9000c594 <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000bb52:	f200 80e1 	bhi.w	9000bd18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000bb56:	2900      	cmp	r1, #0
9000bb58:	f000 8418 	beq.w	9000c38c <HAL_RCCEx_PeriphCLKConfig+0x900>
9000bb5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000bb60:	f040 80e2 	bne.w	9000bd28 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bb64:	2100      	movs	r1, #0
9000bb66:	f104 0008 	add.w	r0, r4, #8
9000bb6a:	f7ff fe9b 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bb6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bb70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb74:	2d00      	cmp	r5, #0
9000bb76:	f040 83e2 	bne.w	9000c33e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000bb7a:	4f86      	ldr	r7, [pc, #536]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb7c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000bb80:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bb82:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000bb86:	4301      	orrs	r1, r0
9000bb88:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bb8a:	0518      	lsls	r0, r3, #20
9000bb8c:	d521      	bpl.n	9000bbd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000bb8e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000bb92:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000bb96:	f000 84bd 	beq.w	9000c514 <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000bb9a:	f200 80c8 	bhi.w	9000bd2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000bb9e:	2900      	cmp	r1, #0
9000bba0:	f000 83e7 	beq.w	9000c372 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000bba4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000bba8:	f040 80c9 	bne.w	9000bd3e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bbac:	2100      	movs	r1, #0
9000bbae:	f104 0008 	add.w	r0, r4, #8
9000bbb2:	f7ff fe77 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bbb6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bbb8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bbbc:	2d00      	cmp	r5, #0
9000bbbe:	f040 83b5 	bne.w	9000c32c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000bbc2:	4f74      	ldr	r7, [pc, #464]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bbc4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000bbc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bbca:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000bbce:	4301      	orrs	r1, r0
9000bbd0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bbd2:	0199      	lsls	r1, r3, #6
9000bbd4:	d518      	bpl.n	9000bc08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000bbd6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000bbd8:	2920      	cmp	r1, #32
9000bbda:	f000 841f 	beq.w	9000c41c <HAL_RCCEx_PeriphCLKConfig+0x990>
9000bbde:	f200 80b1 	bhi.w	9000bd44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000bbe2:	b139      	cbz	r1, 9000bbf4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bbe4:	2910      	cmp	r1, #16
9000bbe6:	f040 80b0 	bne.w	9000bd4a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bbea:	486a      	ldr	r0, [pc, #424]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bbec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bbee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bbf2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000bbf4:	2d00      	cmp	r5, #0
9000bbf6:	f040 83d8 	bne.w	9000c3aa <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000bbfa:	4f66      	ldr	r7, [pc, #408]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bbfc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000bbfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000bc00:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000bc04:	4301      	orrs	r1, r0
9000bc06:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000bc08:	04df      	lsls	r7, r3, #19
9000bc0a:	d51f      	bpl.n	9000bc4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000bc0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000bc0e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000bc12:	f000 84b5 	beq.w	9000c580 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000bc16:	f200 809b 	bhi.w	9000bd50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000bc1a:	2900      	cmp	r1, #0
9000bc1c:	f000 83a3 	beq.w	9000c366 <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000bc20:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000bc24:	f040 809c 	bne.w	9000bd60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bc28:	2100      	movs	r1, #0
9000bc2a:	f104 0008 	add.w	r0, r4, #8
9000bc2e:	f7ff fe39 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bc32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bc34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc38:	2d00      	cmp	r5, #0
9000bc3a:	f040 837b 	bne.w	9000c334 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000bc3e:	4f55      	ldr	r7, [pc, #340]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bc40:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000bc42:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bc44:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000bc48:	4301      	orrs	r1, r0
9000bc4a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bc4c:	0498      	lsls	r0, r3, #18
9000bc4e:	d51d      	bpl.n	9000bc8c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bc50:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000bc52:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000bc56:	f000 8410 	beq.w	9000c47a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000bc5a:	f200 8084 	bhi.w	9000bd66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000bc5e:	b159      	cbz	r1, 9000bc78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bc60:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bc64:	f040 8087 	bne.w	9000bd76 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bc68:	2101      	movs	r1, #1
9000bc6a:	f104 0008 	add.w	r0, r4, #8
9000bc6e:	f7ff fe19 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bc72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bc74:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc78:	2d00      	cmp	r5, #0
9000bc7a:	f040 839a 	bne.w	9000c3b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000bc7e:	4f45      	ldr	r7, [pc, #276]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bc80:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000bc82:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bc84:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000bc88:	4301      	orrs	r1, r0
9000bc8a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bc8c:	0459      	lsls	r1, r3, #17
9000bc8e:	d51d      	bpl.n	9000bccc <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bc90:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000bc94:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bc98:	f000 83fb 	beq.w	9000c492 <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000bc9c:	d86e      	bhi.n	9000bd7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000bc9e:	b151      	cbz	r1, 9000bcb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bca0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bca4:	d172      	bne.n	9000bd8c <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bca6:	2101      	movs	r1, #1
9000bca8:	f104 0008 	add.w	r0, r4, #8
9000bcac:	f7ff fdfa 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bcb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bcb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bcb6:	2d00      	cmp	r5, #0
9000bcb8:	f040 837f 	bne.w	9000c3ba <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000bcbc:	4f35      	ldr	r7, [pc, #212]	; (9000bd94 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bcbe:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000bcc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bcc4:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000bcc8:	4301      	orrs	r1, r0
9000bcca:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bccc:	041f      	lsls	r7, r3, #16
9000bcce:	d50d      	bpl.n	9000bcec <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000bcd0:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000bcd2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bcd6:	f000 83c8 	beq.w	9000c46a <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000bcda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bcde:	f000 823b 	beq.w	9000c158 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000bce2:	2900      	cmp	r1, #0
9000bce4:	f000 8240 	beq.w	9000c168 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000bce8:	2601      	movs	r6, #1
9000bcea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000bcec:	01d8      	lsls	r0, r3, #7
9000bcee:	d562      	bpl.n	9000bdb6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000bcf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000bcf2:	2903      	cmp	r1, #3
9000bcf4:	f200 84bf 	bhi.w	9000c676 <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000bcf8:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bcfc:	004e0053 	.word	0x004e0053
9000bd00:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000bd04:	29c0      	cmp	r1, #192	; 0xc0
9000bd06:	f43f af12 	beq.w	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bd0a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000bd0e:	f43f af0e 	beq.w	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bd12:	2601      	movs	r6, #1
9000bd14:	4635      	mov	r5, r6
9000bd16:	e714      	b.n	9000bb42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000bd18:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000bd1c:	f43f af2a 	beq.w	9000bb74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bd20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000bd24:	f43f af26 	beq.w	9000bb74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bd28:	2601      	movs	r6, #1
9000bd2a:	4635      	mov	r5, r6
9000bd2c:	e72d      	b.n	9000bb8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000bd2e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000bd32:	f43f af43 	beq.w	9000bbbc <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bd36:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000bd3a:	f43f af3f 	beq.w	9000bbbc <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bd3e:	2601      	movs	r6, #1
9000bd40:	4635      	mov	r5, r6
9000bd42:	e746      	b.n	9000bbd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000bd44:	2930      	cmp	r1, #48	; 0x30
9000bd46:	f43f af55 	beq.w	9000bbf4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bd4a:	2601      	movs	r6, #1
9000bd4c:	4635      	mov	r5, r6
9000bd4e:	e75b      	b.n	9000bc08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000bd50:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000bd54:	f43f af70 	beq.w	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bd58:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000bd5c:	f43f af6c 	beq.w	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bd60:	2601      	movs	r6, #1
9000bd62:	4635      	mov	r5, r6
9000bd64:	e772      	b.n	9000bc4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bd66:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000bd6a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000bd6e:	d083      	beq.n	9000bc78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bd70:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000bd74:	d080      	beq.n	9000bc78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bd76:	2601      	movs	r6, #1
9000bd78:	4635      	mov	r5, r6
9000bd7a:	e787      	b.n	9000bc8c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bd7c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000bd80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000bd84:	d097      	beq.n	9000bcb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bd86:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000bd8a:	d094      	beq.n	9000bcb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bd8c:	2601      	movs	r6, #1
9000bd8e:	4635      	mov	r5, r6
9000bd90:	e79c      	b.n	9000bccc <HAL_RCCEx_PeriphCLKConfig+0x240>
9000bd92:	bf00      	nop
9000bd94:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bd98:	4839      	ldr	r0, [pc, #228]	; (9000be80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000bd9a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bd9c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bda0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000bda2:	2d00      	cmp	r5, #0
9000bda4:	f040 8303 	bne.w	9000c3ae <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000bda8:	4f35      	ldr	r7, [pc, #212]	; (9000be80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000bdaa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000bdac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000bdae:	f021 0103 	bic.w	r1, r1, #3
9000bdb2:	4301      	orrs	r1, r0
9000bdb4:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bdb6:	0259      	lsls	r1, r3, #9
9000bdb8:	f100 826a 	bmi.w	9000c290 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bdbc:	07d8      	lsls	r0, r3, #31
9000bdbe:	d52f      	bpl.n	9000be20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000bdc0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000bdc2:	2928      	cmp	r1, #40	; 0x28
9000bdc4:	d82a      	bhi.n	9000be1c <HAL_RCCEx_PeriphCLKConfig+0x390>
9000bdc6:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bdca:	020a      	.short	0x020a
9000bdcc:	00290029 	.word	0x00290029
9000bdd0:	00290029 	.word	0x00290029
9000bdd4:	00290029 	.word	0x00290029
9000bdd8:	02020029 	.word	0x02020029
9000bddc:	00290029 	.word	0x00290029
9000bde0:	00290029 	.word	0x00290029
9000bde4:	00290029 	.word	0x00290029
9000bde8:	04070029 	.word	0x04070029
9000bdec:	00290029 	.word	0x00290029
9000bdf0:	00290029 	.word	0x00290029
9000bdf4:	00290029 	.word	0x00290029
9000bdf8:	020a0029 	.word	0x020a0029
9000bdfc:	00290029 	.word	0x00290029
9000be00:	00290029 	.word	0x00290029
9000be04:	00290029 	.word	0x00290029
9000be08:	020a0029 	.word	0x020a0029
9000be0c:	00290029 	.word	0x00290029
9000be10:	00290029 	.word	0x00290029
9000be14:	00290029 	.word	0x00290029
9000be18:	020a0029 	.word	0x020a0029
9000be1c:	2601      	movs	r6, #1
9000be1e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000be20:	0799      	lsls	r1, r3, #30
9000be22:	d51d      	bpl.n	9000be60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000be24:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000be26:	2905      	cmp	r1, #5
9000be28:	f200 8421 	bhi.w	9000c66e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000be2c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000be30:	0006000e 	.word	0x0006000e
9000be34:	000e03c8 	.word	0x000e03c8
9000be38:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000be3c:	2101      	movs	r1, #1
9000be3e:	f104 0008 	add.w	r0, r4, #8
9000be42:	f7ff fd2f 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000be46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000be48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000be4c:	2d00      	cmp	r5, #0
9000be4e:	f040 82b8 	bne.w	9000c3c2 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000be52:	4f0b      	ldr	r7, [pc, #44]	; (9000be80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000be54:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000be56:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000be58:	f021 0107 	bic.w	r1, r1, #7
9000be5c:	4301      	orrs	r1, r0
9000be5e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000be60:	075f      	lsls	r7, r3, #29
9000be62:	d522      	bpl.n	9000beaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000be64:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000be68:	2905      	cmp	r1, #5
9000be6a:	f200 8408 	bhi.w	9000c67e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000be6e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000be72:	0011      	.short	0x0011
9000be74:	039b0009 	.word	0x039b0009
9000be78:	00110011 	.word	0x00110011
9000be7c:	0011      	.short	0x0011
9000be7e:	bf00      	nop
9000be80:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000be84:	2101      	movs	r1, #1
9000be86:	f104 0008 	add.w	r0, r4, #8
9000be8a:	f7ff fd0b 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000be8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000be90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000be94:	2d00      	cmp	r5, #0
9000be96:	f040 8286 	bne.w	9000c3a6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000be9a:	4fae      	ldr	r7, [pc, #696]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be9c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000bea0:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bea2:	f021 0107 	bic.w	r1, r1, #7
9000bea6:	4301      	orrs	r1, r0
9000bea8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000beaa:	0698      	lsls	r0, r3, #26
9000beac:	d51f      	bpl.n	9000beee <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000beae:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000beb2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000beb6:	f000 82f7 	beq.w	9000c4a8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000beba:	f200 810b 	bhi.w	9000c0d4 <HAL_RCCEx_PeriphCLKConfig+0x648>
9000bebe:	b159      	cbz	r1, 9000bed8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000bec0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bec4:	f040 8110 	bne.w	9000c0e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bec8:	2100      	movs	r1, #0
9000beca:	f104 0008 	add.w	r0, r4, #8
9000bece:	f7ff fce9 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bed2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000bed4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bed8:	2d00      	cmp	r5, #0
9000beda:	f040 8260 	bne.w	9000c39e <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000bede:	4f9d      	ldr	r7, [pc, #628]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bee0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000bee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000bee6:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000beea:	4301      	orrs	r1, r0
9000beec:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000beee:	0659      	lsls	r1, r3, #25
9000bef0:	d51f      	bpl.n	9000bf32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000bef2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000bef6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000befa:	f000 829b 	beq.w	9000c434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000befe:	f200 80f6 	bhi.w	9000c0ee <HAL_RCCEx_PeriphCLKConfig+0x662>
9000bf02:	b159      	cbz	r1, 9000bf1c <HAL_RCCEx_PeriphCLKConfig+0x490>
9000bf04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000bf08:	f040 80fb 	bne.w	9000c102 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bf0c:	2100      	movs	r1, #0
9000bf0e:	f104 0008 	add.w	r0, r4, #8
9000bf12:	f7ff fcc7 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bf16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bf18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bf1c:	2d00      	cmp	r5, #0
9000bf1e:	f040 824e 	bne.w	9000c3be <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000bf22:	4f8c      	ldr	r7, [pc, #560]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf24:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000bf28:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bf2a:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000bf2e:	4301      	orrs	r1, r0
9000bf30:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bf32:	061f      	lsls	r7, r3, #24
9000bf34:	d51f      	bpl.n	9000bf76 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000bf36:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000bf3a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000bf3e:	f000 8289 	beq.w	9000c454 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000bf42:	f200 80e1 	bhi.w	9000c108 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000bf46:	b159      	cbz	r1, 9000bf60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000bf48:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000bf4c:	f040 80e6 	bne.w	9000c11c <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bf50:	2100      	movs	r1, #0
9000bf52:	f104 0008 	add.w	r0, r4, #8
9000bf56:	f7ff fca5 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000bf5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000bf5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bf60:	2d00      	cmp	r5, #0
9000bf62:	f040 8228 	bne.w	9000c3b6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000bf66:	4f7b      	ldr	r7, [pc, #492]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf68:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000bf6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bf6e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000bf72:	4301      	orrs	r1, r0
9000bf74:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000bf76:	0718      	lsls	r0, r3, #28
9000bf78:	d50b      	bpl.n	9000bf92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000bf7a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000bf7e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000bf82:	f000 82a9 	beq.w	9000c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000bf86:	4f73      	ldr	r7, [pc, #460]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf88:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000bf8a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000bf8e:	4301      	orrs	r1, r0
9000bf90:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000bf92:	06d9      	lsls	r1, r3, #27
9000bf94:	d50b      	bpl.n	9000bfae <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000bf96:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000bf9a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000bf9e:	f000 82a8 	beq.w	9000c4f2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000bfa2:	4f6c      	ldr	r7, [pc, #432]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bfa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bfa6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000bfaa:	4301      	orrs	r1, r0
9000bfac:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000bfae:	031f      	lsls	r7, r3, #12
9000bfb0:	d50e      	bpl.n	9000bfd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000bfb2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000bfb6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bfba:	f000 80f4 	beq.w	9000c1a6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000bfbe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000bfc2:	f000 80f8 	beq.w	9000c1b6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000bfc6:	2900      	cmp	r1, #0
9000bfc8:	f000 821c 	beq.w	9000c404 <HAL_RCCEx_PeriphCLKConfig+0x978>
9000bfcc:	2601      	movs	r6, #1
9000bfce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000bfd0:	0358      	lsls	r0, r3, #13
9000bfd2:	d50f      	bpl.n	9000bff4 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000bfd4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000bfd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000bfdc:	f000 80cf 	beq.w	9000c17e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000bfe0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000bfe4:	f000 80d3 	beq.w	9000c18e <HAL_RCCEx_PeriphCLKConfig+0x702>
9000bfe8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000bfec:	f000 8202 	beq.w	9000c3f4 <HAL_RCCEx_PeriphCLKConfig+0x968>
9000bff0:	2601      	movs	r6, #1
9000bff2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000bff4:	03d9      	lsls	r1, r3, #15
9000bff6:	d509      	bpl.n	9000c00c <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000bff8:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000bffa:	2900      	cmp	r1, #0
9000bffc:	f000 81f1 	beq.w	9000c3e2 <HAL_RCCEx_PeriphCLKConfig+0x956>
9000c000:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000c004:	f000 819d 	beq.w	9000c342 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000c008:	2601      	movs	r6, #1
9000c00a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000c00c:	009f      	lsls	r7, r3, #2
9000c00e:	f100 80f1 	bmi.w	9000c1f4 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000c012:	0398      	lsls	r0, r3, #14
9000c014:	d50c      	bpl.n	9000c030 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000c016:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000c01a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000c01e:	f000 81d8 	beq.w	9000c3d2 <HAL_RCCEx_PeriphCLKConfig+0x946>
9000c022:	d97e      	bls.n	9000c122 <HAL_RCCEx_PeriphCLKConfig+0x696>
9000c024:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000c028:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000c02c:	d07b      	beq.n	9000c126 <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000c02e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000c030:	02d9      	lsls	r1, r3, #11
9000c032:	d506      	bpl.n	9000c042 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000c034:	4847      	ldr	r0, [pc, #284]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c036:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000c038:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000c03a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000c03e:	4329      	orrs	r1, r5
9000c040:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000c042:	00df      	lsls	r7, r3, #3
9000c044:	d507      	bpl.n	9000c056 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000c046:	4843      	ldr	r0, [pc, #268]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c048:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000c04c:	6901      	ldr	r1, [r0, #16]
9000c04e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000c052:	4329      	orrs	r1, r5
9000c054:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000c056:	029d      	lsls	r5, r3, #10
9000c058:	d506      	bpl.n	9000c068 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000c05a:	483e      	ldr	r0, [pc, #248]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c05c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000c05e:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000c060:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000c064:	4329      	orrs	r1, r5
9000c066:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000c068:	0058      	lsls	r0, r3, #1
9000c06a:	d509      	bpl.n	9000c080 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000c06c:	4939      	ldr	r1, [pc, #228]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c06e:	6908      	ldr	r0, [r1, #16]
9000c070:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000c074:	6108      	str	r0, [r1, #16]
9000c076:	6908      	ldr	r0, [r1, #16]
9000c078:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000c07c:	4328      	orrs	r0, r5
9000c07e:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000c080:	2b00      	cmp	r3, #0
9000c082:	da06      	bge.n	9000c092 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000c084:	4833      	ldr	r0, [pc, #204]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c086:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000c088:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000c08a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000c08e:	4329      	orrs	r1, r5
9000c090:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000c092:	0219      	lsls	r1, r3, #8
9000c094:	d507      	bpl.n	9000c0a6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000c096:	492f      	ldr	r1, [pc, #188]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c098:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000c09c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000c09e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000c0a2:	4303      	orrs	r3, r0
9000c0a4:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000c0a6:	07d3      	lsls	r3, r2, #31
9000c0a8:	f100 80b0 	bmi.w	9000c20c <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c0ac:	0797      	lsls	r7, r2, #30
9000c0ae:	f100 80ba 	bmi.w	9000c226 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c0b2:	0755      	lsls	r5, r2, #29
9000c0b4:	f100 80c4 	bmi.w	9000c240 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c0b8:	0710      	lsls	r0, r2, #28
9000c0ba:	f100 80ce 	bmi.w	9000c25a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c0be:	06d1      	lsls	r1, r2, #27
9000c0c0:	f100 80d8 	bmi.w	9000c274 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c0c4:	0692      	lsls	r2, r2, #26
9000c0c6:	f100 8125 	bmi.w	9000c314 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000c0ca:	1e30      	subs	r0, r6, #0
9000c0cc:	bf18      	it	ne
9000c0ce:	2001      	movne	r0, #1
}
9000c0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000c0d4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000c0d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000c0dc:	f43f aefc 	beq.w	9000bed8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000c0e0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000c0e4:	f43f aef8 	beq.w	9000bed8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000c0e8:	2601      	movs	r6, #1
9000c0ea:	4635      	mov	r5, r6
9000c0ec:	e6ff      	b.n	9000beee <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000c0ee:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000c0f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000c0f6:	f43f af11 	beq.w	9000bf1c <HAL_RCCEx_PeriphCLKConfig+0x490>
9000c0fa:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000c0fe:	f43f af0d 	beq.w	9000bf1c <HAL_RCCEx_PeriphCLKConfig+0x490>
9000c102:	2601      	movs	r6, #1
9000c104:	4635      	mov	r5, r6
9000c106:	e714      	b.n	9000bf32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000c108:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000c10c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000c110:	f43f af26 	beq.w	9000bf60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000c114:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000c118:	f43f af22 	beq.w	9000bf60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000c11c:	2601      	movs	r6, #1
9000c11e:	4635      	mov	r5, r6
9000c120:	e729      	b.n	9000bf76 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000c122:	2900      	cmp	r1, #0
9000c124:	d183      	bne.n	9000c02e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000c126:	2d00      	cmp	r5, #0
9000c128:	f040 8151 	bne.w	9000c3ce <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000c12c:	4d09      	ldr	r5, [pc, #36]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c12e:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000c130:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000c134:	4301      	orrs	r1, r0
9000c136:	6569      	str	r1, [r5, #84]	; 0x54
9000c138:	e77a      	b.n	9000c030 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000c13a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000c13c:	2d00      	cmp	r5, #0
9000c13e:	f040 80fb 	bne.w	9000c338 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000c142:	4f04      	ldr	r7, [pc, #16]	; (9000c154 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c146:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c148:	f021 0107 	bic.w	r1, r1, #7
9000c14c:	4301      	orrs	r1, r0
9000c14e:	6539      	str	r1, [r7, #80]	; 0x50
9000c150:	e4d7      	b.n	9000bb02 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000c152:	bf00      	nop
9000c154:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c158:	2101      	movs	r1, #1
9000c15a:	f104 0008 	add.w	r0, r4, #8
9000c15e:	f7ff fba1 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c162:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000c164:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c168:	2d00      	cmp	r5, #0
9000c16a:	f040 811a 	bne.w	9000c3a2 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000c16e:	4fb7      	ldr	r7, [pc, #732]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c170:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000c172:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c174:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000c178:	4301      	orrs	r1, r0
9000c17a:	6539      	str	r1, [r7, #80]	; 0x50
9000c17c:	e5b6      	b.n	9000bcec <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c17e:	2101      	movs	r1, #1
9000c180:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c184:	f7ff fc08 	bl	9000b998 <RCCEx_PLL3_Config>
9000c188:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000c18a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c18e:	2d00      	cmp	r5, #0
9000c190:	f040 811b 	bne.w	9000c3ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000c194:	4fad      	ldr	r7, [pc, #692]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c196:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000c19a:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c19c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000c1a0:	4301      	orrs	r1, r0
9000c1a2:	6579      	str	r1, [r7, #84]	; 0x54
9000c1a4:	e726      	b.n	9000bff4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c1a6:	2102      	movs	r1, #2
9000c1a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c1ac:	f7ff fbf4 	bl	9000b998 <RCCEx_PLL3_Config>
9000c1b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c1b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c1b6:	2d00      	cmp	r5, #0
9000c1b8:	f040 8105 	bne.w	9000c3c6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000c1bc:	4fa3      	ldr	r7, [pc, #652]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c1be:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000c1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000c1c4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000c1c8:	4301      	orrs	r1, r0
9000c1ca:	65b9      	str	r1, [r7, #88]	; 0x58
9000c1cc:	e700      	b.n	9000bfd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c1ce:	2101      	movs	r1, #1
9000c1d0:	f104 0008 	add.w	r0, r4, #8
9000c1d4:	f7ff fb66 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c1d8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c1da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c1de:	2d00      	cmp	r5, #0
9000c1e0:	f040 80db 	bne.w	9000c39a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000c1e4:	4f99      	ldr	r7, [pc, #612]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c1e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000c1e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c1ea:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000c1ee:	4301      	orrs	r1, r0
9000c1f0:	6579      	str	r1, [r7, #84]	; 0x54
9000c1f2:	e615      	b.n	9000be20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c1f4:	2102      	movs	r1, #2
9000c1f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c1fa:	f7ff fbcd 	bl	9000b998 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000c1fe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c202:	2800      	cmp	r0, #0
9000c204:	f43f af05 	beq.w	9000c012 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000c208:	2601      	movs	r6, #1
9000c20a:	e702      	b.n	9000c012 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c20c:	2100      	movs	r1, #0
9000c20e:	f104 0008 	add.w	r0, r4, #8
9000c212:	f7ff fb47 	bl	9000b8a4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c216:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c218:	2800      	cmp	r0, #0
9000c21a:	f43f af47 	beq.w	9000c0ac <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c21e:	0797      	lsls	r7, r2, #30
9000c220:	4606      	mov	r6, r0
9000c222:	f57f af46 	bpl.w	9000c0b2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c226:	2101      	movs	r1, #1
9000c228:	f104 0008 	add.w	r0, r4, #8
9000c22c:	f7ff fb3a 	bl	9000b8a4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c230:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c232:	2800      	cmp	r0, #0
9000c234:	f43f af3d 	beq.w	9000c0b2 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c238:	0755      	lsls	r5, r2, #29
9000c23a:	4606      	mov	r6, r0
9000c23c:	f57f af3c 	bpl.w	9000c0b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c240:	2102      	movs	r1, #2
9000c242:	f104 0008 	add.w	r0, r4, #8
9000c246:	f7ff fb2d 	bl	9000b8a4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c24a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c24c:	2800      	cmp	r0, #0
9000c24e:	f43f af33 	beq.w	9000c0b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c252:	4606      	mov	r6, r0
9000c254:	0710      	lsls	r0, r2, #28
9000c256:	f57f af32 	bpl.w	9000c0be <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c25a:	2100      	movs	r1, #0
9000c25c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c260:	f7ff fb9a 	bl	9000b998 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c264:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c266:	2800      	cmp	r0, #0
9000c268:	f43f af29 	beq.w	9000c0be <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c26c:	06d1      	lsls	r1, r2, #27
9000c26e:	4606      	mov	r6, r0
9000c270:	f57f af28 	bpl.w	9000c0c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c274:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000c278:	2101      	movs	r1, #1
9000c27a:	4628      	mov	r0, r5
9000c27c:	f7ff fb8c 	bl	9000b998 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c280:	2800      	cmp	r0, #0
9000c282:	f000 80c9 	beq.w	9000c418 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c286:	6863      	ldr	r3, [r4, #4]
9000c288:	069b      	lsls	r3, r3, #26
9000c28a:	d54c      	bpl.n	9000c326 <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000c28c:	4606      	mov	r6, r0
9000c28e:	e043      	b.n	9000c318 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000c290:	4f6f      	ldr	r7, [pc, #444]	; (9000c450 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000c292:	683b      	ldr	r3, [r7, #0]
9000c294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000c298:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000c29a:	f7fa fd7b 	bl	90006d94 <HAL_GetTick>
9000c29e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c2a0:	e006      	b.n	9000c2b0 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000c2a2:	f7fa fd77 	bl	90006d94 <HAL_GetTick>
9000c2a6:	eba0 0008 	sub.w	r0, r0, r8
9000c2aa:	2864      	cmp	r0, #100	; 0x64
9000c2ac:	f200 81a0 	bhi.w	9000c5f0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c2b0:	683b      	ldr	r3, [r7, #0]
9000c2b2:	05da      	lsls	r2, r3, #23
9000c2b4:	d5f5      	bpl.n	9000c2a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000c2b6:	2d00      	cmp	r5, #0
9000c2b8:	f040 81d4 	bne.w	9000c664 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000c2bc:	4a63      	ldr	r2, [pc, #396]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c2be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c2c2:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000c2c4:	4059      	eors	r1, r3
9000c2c6:	f411 7f40 	tst.w	r1, #768	; 0x300
9000c2ca:	d00b      	beq.n	9000c2e4 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c2cc:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000c2ce:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c2d0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000c2d4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000c2d8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000c2da:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000c2dc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000c2e0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000c2e2:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000c2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000c2e8:	f000 819e 	beq.w	9000c628 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c2ec:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000c2f0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000c2f4:	f000 81ac 	beq.w	9000c650 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000c2f8:	4954      	ldr	r1, [pc, #336]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c2fa:	690a      	ldr	r2, [r1, #16]
9000c2fc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000c300:	610a      	str	r2, [r1, #16]
9000c302:	4852      	ldr	r0, [pc, #328]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c304:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000c308:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000c30a:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c30c:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c310:	6701      	str	r1, [r0, #112]	; 0x70
9000c312:	e553      	b.n	9000bdbc <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c314:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c318:	2102      	movs	r1, #2
9000c31a:	4628      	mov	r0, r5
9000c31c:	f7ff fb3c 	bl	9000b998 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c320:	2800      	cmp	r0, #0
9000c322:	f43f aed2 	beq.w	9000c0ca <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000c326:	2001      	movs	r0, #1
}
9000c328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c32c:	462e      	mov	r6, r5
9000c32e:	e450      	b.n	9000bbd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
9000c330:	462e      	mov	r6, r5
9000c332:	e406      	b.n	9000bb42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000c334:	462e      	mov	r6, r5
9000c336:	e489      	b.n	9000bc4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000c338:	462e      	mov	r6, r5
9000c33a:	f7ff bbe2 	b.w	9000bb02 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000c33e:	462e      	mov	r6, r5
9000c340:	e423      	b.n	9000bb8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c342:	2102      	movs	r1, #2
9000c344:	f104 0008 	add.w	r0, r4, #8
9000c348:	f7ff faac 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c34c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000c34e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c352:	2d00      	cmp	r5, #0
9000c354:	d14c      	bne.n	9000c3f0 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000c356:	4f3d      	ldr	r7, [pc, #244]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c358:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000c35a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000c35c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000c360:	4301      	orrs	r1, r0
9000c362:	64f9      	str	r1, [r7, #76]	; 0x4c
9000c364:	e652      	b.n	9000c00c <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c366:	4839      	ldr	r0, [pc, #228]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c368:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c36a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c36e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c370:	e462      	b.n	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c372:	4836      	ldr	r0, [pc, #216]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c374:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c376:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c37a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c37c:	e41e      	b.n	9000bbbc <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c37e:	4833      	ldr	r0, [pc, #204]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c380:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c382:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c386:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c388:	f7ff bbd1 	b.w	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c38c:	482f      	ldr	r0, [pc, #188]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c38e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c390:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c394:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c396:	f7ff bbed 	b.w	9000bb74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000c39a:	462e      	mov	r6, r5
9000c39c:	e540      	b.n	9000be20 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000c39e:	462e      	mov	r6, r5
9000c3a0:	e5a5      	b.n	9000beee <HAL_RCCEx_PeriphCLKConfig+0x462>
9000c3a2:	462e      	mov	r6, r5
9000c3a4:	e4a2      	b.n	9000bcec <HAL_RCCEx_PeriphCLKConfig+0x260>
9000c3a6:	462e      	mov	r6, r5
9000c3a8:	e57f      	b.n	9000beaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000c3aa:	462e      	mov	r6, r5
9000c3ac:	e42c      	b.n	9000bc08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000c3ae:	462e      	mov	r6, r5
9000c3b0:	e501      	b.n	9000bdb6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000c3b2:	462e      	mov	r6, r5
9000c3b4:	e46a      	b.n	9000bc8c <HAL_RCCEx_PeriphCLKConfig+0x200>
9000c3b6:	462e      	mov	r6, r5
9000c3b8:	e5dd      	b.n	9000bf76 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000c3ba:	462e      	mov	r6, r5
9000c3bc:	e486      	b.n	9000bccc <HAL_RCCEx_PeriphCLKConfig+0x240>
9000c3be:	462e      	mov	r6, r5
9000c3c0:	e5b7      	b.n	9000bf32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000c3c2:	462e      	mov	r6, r5
9000c3c4:	e54c      	b.n	9000be60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000c3c6:	462e      	mov	r6, r5
9000c3c8:	e602      	b.n	9000bfd0 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000c3ca:	462e      	mov	r6, r5
9000c3cc:	e612      	b.n	9000bff4 <HAL_RCCEx_PeriphCLKConfig+0x568>
9000c3ce:	462e      	mov	r6, r5
9000c3d0:	e62e      	b.n	9000c030 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c3d2:	4f1e      	ldr	r7, [pc, #120]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000c3d6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c3da:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000c3dc:	2d00      	cmp	r5, #0
9000c3de:	d1f6      	bne.n	9000c3ce <HAL_RCCEx_PeriphCLKConfig+0x942>
9000c3e0:	e6a4      	b.n	9000c12c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c3e2:	481a      	ldr	r0, [pc, #104]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c3e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c3e6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c3ea:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c3ec:	2d00      	cmp	r5, #0
9000c3ee:	d0b2      	beq.n	9000c356 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000c3f0:	462e      	mov	r6, r5
9000c3f2:	e60b      	b.n	9000c00c <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c3f4:	4815      	ldr	r0, [pc, #84]	; (9000c44c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000c3f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c3f8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c3fc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c3fe:	2d00      	cmp	r5, #0
9000c400:	d1e3      	bne.n	9000c3ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000c402:	e6c7      	b.n	9000c194 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c404:	f104 0008 	add.w	r0, r4, #8
9000c408:	f7ff fa4c 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c40c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c40e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c412:	2d00      	cmp	r5, #0
9000c414:	d1d7      	bne.n	9000c3c6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000c416:	e6d1      	b.n	9000c1bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c418:	6862      	ldr	r2, [r4, #4]
9000c41a:	e653      	b.n	9000c0c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c41c:	2102      	movs	r1, #2
9000c41e:	f104 0008 	add.w	r0, r4, #8
9000c422:	f7ff fa3f 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c426:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000c428:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c42c:	2d00      	cmp	r5, #0
9000c42e:	d1bc      	bne.n	9000c3aa <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000c430:	f7ff bbe3 	b.w	9000bbfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c434:	2102      	movs	r1, #2
9000c436:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c43a:	f7ff faad 	bl	9000b998 <RCCEx_PLL3_Config>
9000c43e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000c440:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c444:	2d00      	cmp	r5, #0
9000c446:	d1ba      	bne.n	9000c3be <HAL_RCCEx_PeriphCLKConfig+0x932>
9000c448:	e56b      	b.n	9000bf22 <HAL_RCCEx_PeriphCLKConfig+0x496>
9000c44a:	bf00      	nop
9000c44c:	58024400 	.word	0x58024400
9000c450:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c454:	2102      	movs	r1, #2
9000c456:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c45a:	f7ff fa9d 	bl	9000b998 <RCCEx_PLL3_Config>
9000c45e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000c460:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c464:	2d00      	cmp	r5, #0
9000c466:	d1a6      	bne.n	9000c3b6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000c468:	e57d      	b.n	9000bf66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c46a:	4886      	ldr	r0, [pc, #536]	; (9000c684 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c46c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c46e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c472:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c474:	2d00      	cmp	r5, #0
9000c476:	d194      	bne.n	9000c3a2 <HAL_RCCEx_PeriphCLKConfig+0x916>
9000c478:	e679      	b.n	9000c16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c47a:	2101      	movs	r1, #1
9000c47c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c480:	f7ff fa8a 	bl	9000b998 <RCCEx_PLL3_Config>
9000c484:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000c486:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c48a:	2d00      	cmp	r5, #0
9000c48c:	d191      	bne.n	9000c3b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
9000c48e:	f7ff bbf6 	b.w	9000bc7e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c492:	2101      	movs	r1, #1
9000c494:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c498:	f7ff fa7e 	bl	9000b998 <RCCEx_PLL3_Config>
9000c49c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000c49e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c4a2:	2d00      	cmp	r5, #0
9000c4a4:	d189      	bne.n	9000c3ba <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000c4a6:	e409      	b.n	9000bcbc <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c4a8:	2102      	movs	r1, #2
9000c4aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4ae:	f7ff fa73 	bl	9000b998 <RCCEx_PLL3_Config>
9000c4b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000c4b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c4b8:	2d00      	cmp	r5, #0
9000c4ba:	f47f af70 	bne.w	9000c39e <HAL_RCCEx_PeriphCLKConfig+0x912>
9000c4be:	e50e      	b.n	9000bede <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c4c0:	2102      	movs	r1, #2
9000c4c2:	f104 0008 	add.w	r0, r4, #8
9000c4c6:	f7ff f9ed 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c4ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000c4cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c4d0:	2d00      	cmp	r5, #0
9000c4d2:	f47f af6c 	bne.w	9000c3ae <HAL_RCCEx_PeriphCLKConfig+0x922>
9000c4d6:	e467      	b.n	9000bda8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c4d8:	2102      	movs	r1, #2
9000c4da:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4de:	f7ff fa5b 	bl	9000b998 <RCCEx_PLL3_Config>
9000c4e2:	2800      	cmp	r0, #0
9000c4e4:	f040 8094 	bne.w	9000c610 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c4e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c4ec:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4f0:	e549      	b.n	9000bf86 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c4f2:	2102      	movs	r1, #2
9000c4f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c4f8:	f7ff fa4e 	bl	9000b998 <RCCEx_PLL3_Config>
9000c4fc:	2800      	cmp	r0, #0
9000c4fe:	f040 808d 	bne.w	9000c61c <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c502:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c506:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c50a:	e54a      	b.n	9000bfa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000c50c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c510:	f7ff bae9 	b.w	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c514:	2100      	movs	r1, #0
9000c516:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c51a:	f7ff fa3d 	bl	9000b998 <RCCEx_PLL3_Config>
9000c51e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000c520:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c524:	f7ff bb4a 	b.w	9000bbbc <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c528:	2100      	movs	r1, #0
9000c52a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c52e:	f7ff fa33 	bl	9000b998 <RCCEx_PLL3_Config>
9000c532:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c534:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c538:	e600      	b.n	9000c13c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c53a:	2100      	movs	r1, #0
9000c53c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c540:	f7ff fa2a 	bl	9000b998 <RCCEx_PLL3_Config>
9000c544:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000c546:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c54a:	f7ff baf0 	b.w	9000bb2e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c54e:	2102      	movs	r1, #2
9000c550:	3028      	adds	r0, #40	; 0x28
9000c552:	f7ff fa21 	bl	9000b998 <RCCEx_PLL3_Config>
9000c556:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000c558:	2e00      	cmp	r6, #0
9000c55a:	f43f aab5 	beq.w	9000bac8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000c55e:	e7d5      	b.n	9000c50c <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c560:	4848      	ldr	r0, [pc, #288]	; (9000c684 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000c562:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c564:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c566:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c56a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c56c:	e5e6      	b.n	9000c13c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c56e:	2100      	movs	r1, #0
9000c570:	f104 0008 	add.w	r0, r4, #8
9000c574:	f7ff f996 	bl	9000b8a4 <RCCEx_PLL2_Config>
9000c578:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c57a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c57e:	e5dd      	b.n	9000c13c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c580:	2100      	movs	r1, #0
9000c582:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c586:	f7ff fa07 	bl	9000b998 <RCCEx_PLL3_Config>
9000c58a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000c58c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c590:	f7ff bb52 	b.w	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c594:	2100      	movs	r1, #0
9000c596:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c59a:	f7ff f9fd 	bl	9000b998 <RCCEx_PLL3_Config>
9000c59e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000c5a0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c5a4:	f7ff bae6 	b.w	9000bb74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c5a8:	2101      	movs	r1, #1
9000c5aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c5ae:	f7ff f9f3 	bl	9000b998 <RCCEx_PLL3_Config>
9000c5b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000c5b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c5b8:	2d00      	cmp	r5, #0
9000c5ba:	f47f aef4 	bne.w	9000c3a6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000c5be:	e46c      	b.n	9000be9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c5c0:	2101      	movs	r1, #1
9000c5c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c5c6:	f7ff f9e7 	bl	9000b998 <RCCEx_PLL3_Config>
9000c5ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000c5cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c5d0:	2d00      	cmp	r5, #0
9000c5d2:	f47f aef6 	bne.w	9000c3c2 <HAL_RCCEx_PeriphCLKConfig+0x936>
9000c5d6:	e43c      	b.n	9000be52 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c5d8:	2101      	movs	r1, #1
9000c5da:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c5de:	f7ff f9db 	bl	9000b998 <RCCEx_PLL3_Config>
9000c5e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c5e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c5e8:	2d00      	cmp	r5, #0
9000c5ea:	f47f aed6 	bne.w	9000c39a <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000c5ee:	e5f9      	b.n	9000c1e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000c5f0:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c5f2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c5f6:	4635      	mov	r5, r6
9000c5f8:	f7ff bbe0 	b.w	9000bdbc <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000c5fc:	2601      	movs	r6, #1
9000c5fe:	f7ff ba72 	b.w	9000bae6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c602:	4d20      	ldr	r5, [pc, #128]	; (9000c684 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c604:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000c606:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c60a:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000c60c:	f7ff ba64 	b.w	9000bad8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c610:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000c614:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c616:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c61a:	e4b4      	b.n	9000bf86 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c61c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000c620:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c622:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c626:	e4bc      	b.n	9000bfa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000c628:	f7fa fbb4 	bl	90006d94 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c62c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000c684 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000c630:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c632:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c636:	e004      	b.n	9000c642 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c638:	f7fa fbac 	bl	90006d94 <HAL_GetTick>
9000c63c:	1bc0      	subs	r0, r0, r7
9000c63e:	4548      	cmp	r0, r9
9000c640:	d8d6      	bhi.n	9000c5f0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c642:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000c646:	079b      	lsls	r3, r3, #30
9000c648:	d5f6      	bpl.n	9000c638 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c64a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c64e:	e64d      	b.n	9000c2ec <HAL_RCCEx_PeriphCLKConfig+0x860>
9000c650:	480c      	ldr	r0, [pc, #48]	; (9000c684 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000c652:	4a0d      	ldr	r2, [pc, #52]	; (9000c688 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000c654:	6901      	ldr	r1, [r0, #16]
9000c656:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000c65a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000c65e:	430a      	orrs	r2, r1
9000c660:	6102      	str	r2, [r0, #16]
9000c662:	e64e      	b.n	9000c302 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c664:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c668:	462e      	mov	r6, r5
9000c66a:	f7ff bba7 	b.w	9000bdbc <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000c66e:	2601      	movs	r6, #1
9000c670:	4635      	mov	r5, r6
9000c672:	f7ff bbf5 	b.w	9000be60 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000c676:	2601      	movs	r6, #1
9000c678:	4635      	mov	r5, r6
9000c67a:	f7ff bb9c 	b.w	9000bdb6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000c67e:	2601      	movs	r6, #1
9000c680:	4635      	mov	r5, r6
9000c682:	e412      	b.n	9000beaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000c684:	58024400 	.word	0x58024400
9000c688:	00ffffcf 	.word	0x00ffffcf

9000c68c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c68c:	4a4f      	ldr	r2, [pc, #316]	; (9000c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
9000c68e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c690:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c692:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c694:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
9000c696:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c69a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c69e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
9000c6a0:	d05d      	beq.n	9000c75e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c6a2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c6a6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c6aa:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c6ae:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c6b2:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c6b4:	ee07 4a90 	vmov	s15, r4
9000c6b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c6bc:	d003      	beq.n	9000c6c6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
9000c6be:	2902      	cmp	r1, #2
9000c6c0:	d076      	beq.n	9000c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
9000c6c2:	2900      	cmp	r1, #0
9000c6c4:	d050      	beq.n	9000c768 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c6c6:	ee07 3a90 	vmov	s15, r3
9000c6ca:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
9000c6ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6d2:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c6d4:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c6d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000c6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c6e0:	ee07 3a90 	vmov	s15, r3
9000c6e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6ec:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c6f0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c6f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c6f8:	4a34      	ldr	r2, [pc, #208]	; (9000c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
9000c6fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c6fe:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c700:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c704:	ee07 3a90 	vmov	s15, r3
9000c708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c70c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c70e:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c716:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c71a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000c71e:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c720:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c724:	ee07 3a90 	vmov	s15, r3
9000c728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c72c:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c734:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c738:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000c73c:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c73e:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c742:	ee07 3a10 	vmov	s14, r3
9000c746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c74a:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c756:	ee17 3a90 	vmov	r3, s15
9000c75a:	6083      	str	r3, [r0, #8]
}
9000c75c:	4770      	bx	lr
9000c75e:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000c760:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000c764:	6083      	str	r3, [r0, #8]
}
9000c766:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c768:	6811      	ldr	r1, [r2, #0]
9000c76a:	0689      	lsls	r1, r1, #26
9000c76c:	d527      	bpl.n	9000c7be <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c76e:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c770:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c774:	4918      	ldr	r1, [pc, #96]	; (9000c7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c776:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c77a:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c77c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c784:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
9000c788:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c78c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c78e:	ee06 3a90 	vmov	s13, r3
9000c792:	ee06 1a10 	vmov	s12, r1
9000c796:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c79a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c79e:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c7a2:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c7a6:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c7aa:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c7ae:	e7a3      	b.n	9000c6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c7b0:	ee07 3a90 	vmov	s15, r3
9000c7b4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
9000c7b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c7bc:	e789      	b.n	9000c6d2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c7be:	ee07 3a90 	vmov	s15, r3
9000c7c2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
9000c7c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c7ca:	e782      	b.n	9000c6d2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
9000c7cc:	58024400 	.word	0x58024400
9000c7d0:	4a742400 	.word	0x4a742400
9000c7d4:	39000000 	.word	0x39000000
9000c7d8:	03d09000 	.word	0x03d09000
9000c7dc:	4bbebc20 	.word	0x4bbebc20
9000c7e0:	4c742400 	.word	0x4c742400

9000c7e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c7e4:	4a4f      	ldr	r2, [pc, #316]	; (9000c924 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
9000c7e6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c7e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c7ea:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c7ec:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
9000c7ee:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c7f2:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7f6:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
9000c7f8:	d05d      	beq.n	9000c8b6 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c7fa:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c7fe:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c802:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c806:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c80a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c80c:	ee07 4a90 	vmov	s15, r4
9000c810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c814:	d003      	beq.n	9000c81e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
9000c816:	2902      	cmp	r1, #2
9000c818:	d076      	beq.n	9000c908 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
9000c81a:	2900      	cmp	r1, #0
9000c81c:	d050      	beq.n	9000c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c81e:	ee07 3a90 	vmov	s15, r3
9000c822:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000c928 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
9000c826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c82a:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c82c:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c830:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000c92c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000c834:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c838:	ee07 3a90 	vmov	s15, r3
9000c83c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c844:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c848:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c84c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c850:	4a34      	ldr	r2, [pc, #208]	; (9000c924 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
9000c852:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c856:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c858:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c85c:	ee07 3a90 	vmov	s15, r3
9000c860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c864:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c866:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c86e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c872:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000c876:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c878:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c87c:	ee07 3a90 	vmov	s15, r3
9000c880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c884:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c88c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c890:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000c894:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c896:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c89a:	ee07 3a10 	vmov	s14, r3
9000c89e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c8a2:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c8ae:	ee17 3a90 	vmov	r3, s15
9000c8b2:	6083      	str	r3, [r0, #8]
}
9000c8b4:	4770      	bx	lr
9000c8b6:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000c8b8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000c8bc:	6083      	str	r3, [r0, #8]
}
9000c8be:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c8c0:	6811      	ldr	r1, [r2, #0]
9000c8c2:	0689      	lsls	r1, r1, #26
9000c8c4:	d527      	bpl.n	9000c916 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c8c6:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8c8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c8cc:	4918      	ldr	r1, [pc, #96]	; (9000c930 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c8d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c8d4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c8dc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000c92c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
9000c8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c8e4:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c8e6:	ee06 3a90 	vmov	s13, r3
9000c8ea:	ee06 1a10 	vmov	s12, r1
9000c8ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c8f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c8f6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c8fa:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c8fe:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c902:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c906:	e7a3      	b.n	9000c850 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c908:	ee07 3a90 	vmov	s15, r3
9000c90c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000c934 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
9000c910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c914:	e789      	b.n	9000c82a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c916:	ee07 3a90 	vmov	s15, r3
9000c91a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000c938 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
9000c91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c922:	e782      	b.n	9000c82a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
9000c924:	58024400 	.word	0x58024400
9000c928:	4a742400 	.word	0x4a742400
9000c92c:	39000000 	.word	0x39000000
9000c930:	03d09000 	.word	0x03d09000
9000c934:	4bbebc20 	.word	0x4bbebc20
9000c938:	4c742400 	.word	0x4c742400

9000c93c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c93c:	4a4f      	ldr	r2, [pc, #316]	; (9000ca7c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
9000c93e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c940:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c942:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c944:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
9000c946:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c94a:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c94e:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
9000c950:	d05d      	beq.n	9000ca0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c952:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c956:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c95a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c95e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c962:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c964:	ee07 4a90 	vmov	s15, r4
9000c968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c96c:	d07f      	beq.n	9000ca6e <HAL_RCCEx_GetPLL1ClockFreq+0x132>
9000c96e:	2902      	cmp	r1, #2
9000c970:	d076      	beq.n	9000ca60 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
9000c972:	2900      	cmp	r1, #0
9000c974:	d050      	beq.n	9000ca18 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c976:	ee07 3a90 	vmov	s15, r3
9000c97a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 9000ca80 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
9000c97e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c982:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c984:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c988:	eddf 5a3e 	vldr	s11, [pc, #248]	; 9000ca84 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
9000c98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c990:	ee07 3a90 	vmov	s15, r3
9000c994:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c99c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c9a0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c9a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c9a8:	4a34      	ldr	r2, [pc, #208]	; (9000ca7c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
9000c9aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c9ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c9b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c9b4:	ee07 3a90 	vmov	s15, r3
9000c9b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
9000c9bc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c9be:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c9c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c9ca:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
9000c9ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c9d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c9d4:	ee07 3a90 	vmov	s15, r3
9000c9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c9dc:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c9e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c9e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c9e8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
9000c9ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c9ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c9f2:	ee07 3a10 	vmov	s14, r3
9000c9f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c9fa:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c9fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ca02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ca06:	ee17 3a90 	vmov	r3, s15
9000ca0a:	6083      	str	r3, [r0, #8]
}
9000ca0c:	4770      	bx	lr
9000ca0e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
9000ca10:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
9000ca14:	6083      	str	r3, [r0, #8]
}
9000ca16:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ca18:	6811      	ldr	r1, [r2, #0]
9000ca1a:	0689      	lsls	r1, r1, #26
9000ca1c:	d5ab      	bpl.n	9000c976 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ca1e:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca20:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ca24:	4918      	ldr	r1, [pc, #96]	; (9000ca88 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca26:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ca2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ca2c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ca34:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000ca84 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
9000ca38:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ca3c:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca3e:	ee06 3a90 	vmov	s13, r3
9000ca42:	ee06 1a10 	vmov	s12, r1
9000ca46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ca4a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000ca4e:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ca52:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000ca56:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ca5a:	ee66 6a87 	vmul.f32	s13, s13, s14
9000ca5e:	e7a3      	b.n	9000c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca60:	ee07 3a90 	vmov	s15, r3
9000ca64:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000ca8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
9000ca68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ca6c:	e789      	b.n	9000c982 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ca6e:	ee07 3a90 	vmov	s15, r3
9000ca72:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000ca90 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
9000ca76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ca7a:	e782      	b.n	9000c982 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
9000ca7c:	58024400 	.word	0x58024400
9000ca80:	4c742400 	.word	0x4c742400
9000ca84:	39000000 	.word	0x39000000
9000ca88:	03d09000 	.word	0x03d09000
9000ca8c:	4bbebc20 	.word	0x4bbebc20
9000ca90:	4a742400 	.word	0x4a742400

9000ca94 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000ca94:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
9000ca98:	430b      	orrs	r3, r1
{
9000ca9a:	b500      	push	{lr}
9000ca9c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000ca9e:	f000 8083 	beq.w	9000cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
9000caa2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
9000caa6:	430b      	orrs	r3, r1
9000caa8:	d038      	beq.n	9000cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
9000caaa:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
9000caae:	430b      	orrs	r3, r1
9000cab0:	f000 80e6 	beq.w	9000cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
9000cab4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
9000cab8:	430b      	orrs	r3, r1
9000caba:	f000 8089 	beq.w	9000cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
9000cabe:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
9000cac2:	430b      	orrs	r3, r1
9000cac4:	d060      	beq.n	9000cb88 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
9000cac6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
9000caca:	430b      	orrs	r3, r1
9000cacc:	f000 8112 	beq.w	9000ccf4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
9000cad0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
9000cad4:	430b      	orrs	r3, r1
9000cad6:	f000 80a3 	beq.w	9000cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
9000cada:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
9000cade:	430b      	orrs	r3, r1
9000cae0:	f000 80fa 	beq.w	9000ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
9000cae4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
9000cae8:	430b      	orrs	r3, r1
9000caea:	f000 8143 	beq.w	9000cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
9000caee:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
9000caf2:	4308      	orrs	r0, r1
9000caf4:	d137      	bne.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
9000caf6:	4a9a      	ldr	r2, [pc, #616]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000caf8:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cafa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
9000cafe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cb02:	f000 8084 	beq.w	9000cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cb06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cb0a:	f000 8157 	beq.w	9000cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000cb0e:	bb53      	cbnz	r3, 9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000cb10:	6810      	ldr	r0, [r2, #0]
9000cb12:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000cb16:	d044      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
9000cb18:	4892      	ldr	r0, [pc, #584]	; (9000cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
9000cb1a:	e042      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
9000cb1c:	4a90      	ldr	r2, [pc, #576]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb1e:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cb20:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
9000cb24:	2b80      	cmp	r3, #128	; 0x80
9000cb26:	f000 80a6 	beq.w	9000cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cb2a:	d920      	bls.n	9000cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
9000cb2c:	2bc0      	cmp	r3, #192	; 0xc0
9000cb2e:	d037      	beq.n	9000cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cb30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000cb34:	d117      	bne.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cb38:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cb3e:	0749      	lsls	r1, r1, #29
9000cb40:	d502      	bpl.n	9000cb48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
9000cb42:	2b00      	cmp	r3, #0
9000cb44:	f000 80c2 	beq.w	9000cccc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
9000cb48:	4a85      	ldr	r2, [pc, #532]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb4a:	6812      	ldr	r2, [r2, #0]
9000cb4c:	05d0      	lsls	r0, r2, #23
9000cb4e:	d503      	bpl.n	9000cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
9000cb50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cb54:	f000 8102 	beq.w	9000cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
9000cb58:	4a81      	ldr	r2, [pc, #516]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb5a:	6812      	ldr	r2, [r2, #0]
9000cb5c:	0391      	lsls	r1, r2, #14
9000cb5e:	d502      	bpl.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cb64:	d0d8      	beq.n	9000cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
9000cb66:	2000      	movs	r0, #0
}
9000cb68:	b005      	add	sp, #20
9000cb6a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
9000cb6e:	2b00      	cmp	r3, #0
9000cb70:	d04d      	beq.n	9000cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cb72:	2b40      	cmp	r3, #64	; 0x40
9000cb74:	d1f7      	bne.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cb76:	6810      	ldr	r0, [r2, #0]
9000cb78:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cb7c:	d011      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cb7e:	a801      	add	r0, sp, #4
9000cb80:	f7ff fd84 	bl	9000c68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
9000cb84:	9801      	ldr	r0, [sp, #4]
9000cb86:	e00c      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
9000cb88:	4a75      	ldr	r2, [pc, #468]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb8a:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cb8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
9000cb90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000cb94:	d06f      	beq.n	9000cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cb96:	d938      	bls.n	9000cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
9000cb98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000cb9c:	f040 8088 	bne.w	9000ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
9000cba0:	4871      	ldr	r0, [pc, #452]	; (9000cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
9000cba2:	b005      	add	sp, #20
9000cba4:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
9000cba8:	4b6d      	ldr	r3, [pc, #436]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000cbac:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
9000cbb0:	2b04      	cmp	r3, #4
9000cbb2:	d8d8      	bhi.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cbb4:	a201      	add	r2, pc, #4	; (adr r2, 9000cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
9000cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cbba:	bf00      	nop
9000cbbc:	9000cc5f 	.word	0x9000cc5f
9000cbc0:	9000cc3b 	.word	0x9000cc3b
9000cbc4:	9000cc4b 	.word	0x9000cc4b
9000cbc8:	9000cba1 	.word	0x9000cba1
9000cbcc:	9000cc47 	.word	0x9000cc47
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
9000cbd0:	4a63      	ldr	r2, [pc, #396]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbd2:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cbd4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
9000cbd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000cbdc:	d04b      	beq.n	9000cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cbde:	d944      	bls.n	9000cc6a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
9000cbe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000cbe4:	d0dc      	beq.n	9000cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cbe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000cbea:	d1bc      	bne.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cbec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cbee:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cbf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cbf4:	0752      	lsls	r2, r2, #29
9000cbf6:	d5a7      	bpl.n	9000cb48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
9000cbf8:	2b00      	cmp	r3, #0
9000cbfa:	d1a5      	bne.n	9000cb48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cbfc:	4b58      	ldr	r3, [pc, #352]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbfe:	485b      	ldr	r0, [pc, #364]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000cc00:	681b      	ldr	r3, [r3, #0]
9000cc02:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cc06:	40d8      	lsrs	r0, r3
9000cc08:	e7cb      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000cc0a:	2b00      	cmp	r3, #0
9000cc0c:	d154      	bne.n	9000ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cc0e:	6810      	ldr	r0, [r2, #0]
9000cc10:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cc14:	d0c5      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
9000cc16:	a801      	add	r0, sp, #4
9000cc18:	f7ff fe90 	bl	9000c93c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
9000cc1c:	9802      	ldr	r0, [sp, #8]
9000cc1e:	e7c0      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
9000cc20:	4a4f      	ldr	r2, [pc, #316]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc22:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cc24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
9000cc28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cc2c:	f000 80d0 	beq.w	9000cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
9000cc30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000cc34:	d0da      	beq.n	9000cbec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000cc36:	2b00      	cmp	r3, #0
9000cc38:	d195      	bne.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cc3a:	4b49      	ldr	r3, [pc, #292]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc3c:	6818      	ldr	r0, [r3, #0]
9000cc3e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cc42:	d0ae      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cc44:	e79b      	b.n	9000cb7e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cc46:	4a46      	ldr	r2, [pc, #280]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc48:	e775      	b.n	9000cb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cc4a:	4b45      	ldr	r3, [pc, #276]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc4c:	6818      	ldr	r0, [r3, #0]
9000cc4e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cc52:	d0a6      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cc54:	a801      	add	r0, sp, #4
9000cc56:	f7ff fdc5 	bl	9000c7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
9000cc5a:	9801      	ldr	r0, [sp, #4]
9000cc5c:	e7a1      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cc5e:	4b40      	ldr	r3, [pc, #256]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc60:	6818      	ldr	r0, [r3, #0]
9000cc62:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cc66:	d09c      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cc68:	e7d5      	b.n	9000cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
9000cc6a:	2b00      	cmp	r3, #0
9000cc6c:	d0cf      	beq.n	9000cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cc6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
9000cc72:	d080      	beq.n	9000cb76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000cc74:	e777      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cc76:	6810      	ldr	r0, [r2, #0]
9000cc78:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cc7c:	d091      	beq.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cc7e:	e7e9      	b.n	9000cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
9000cc80:	4a37      	ldr	r2, [pc, #220]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc82:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cc84:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
9000cc88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000cc8c:	d0f3      	beq.n	9000cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cc8e:	d806      	bhi.n	9000cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
9000cc90:	2b00      	cmp	r3, #0
9000cc92:	d0bc      	beq.n	9000cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cc94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000cc98:	f43f af6d 	beq.w	9000cb76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000cc9c:	e763      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000cc9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
9000cca2:	f43f af7d 	beq.w	9000cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
9000cca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000ccaa:	f43f af44 	beq.w	9000cb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
9000ccae:	e75a      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
9000ccb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000ccb4:	d09a      	beq.n	9000cbec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000ccb6:	e756      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
9000ccb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000ccbc:	f43f af5b 	beq.w	9000cb76 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
9000ccc0:	e751      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000ccc2:	6810      	ldr	r0, [r2, #0]
9000ccc4:	f010 0004 	ands.w	r0, r0, #4
9000ccc8:	f43f af6b 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cccc:	6813      	ldr	r3, [r2, #0]
9000ccce:	4827      	ldr	r0, [pc, #156]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000ccd0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000ccd4:	40d8      	lsrs	r0, r3
9000ccd6:	e764      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
9000ccd8:	4b21      	ldr	r3, [pc, #132]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000ccda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
9000ccdc:	03d2      	lsls	r2, r2, #15
9000ccde:	d5bf      	bpl.n	9000cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cce0:	6818      	ldr	r0, [r3, #0]
9000cce2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cce6:	f43f af5c 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000ccea:	a801      	add	r0, sp, #4
9000ccec:	f7ff fcce 	bl	9000c68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
9000ccf0:	9803      	ldr	r0, [sp, #12]
9000ccf2:	e756      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
9000ccf4:	4a1a      	ldr	r2, [pc, #104]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000ccf6:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000ccf8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
9000ccfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000cd00:	d0df      	beq.n	9000ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
9000cd02:	d810      	bhi.n	9000cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
9000cd04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cd08:	d058      	beq.n	9000cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000cd0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000cd0e:	d118      	bne.n	9000cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cd10:	4b13      	ldr	r3, [pc, #76]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cd12:	6818      	ldr	r0, [r3, #0]
9000cd14:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cd18:	f43f af43 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cd1c:	a801      	add	r0, sp, #4
9000cd1e:	f7ff fd61 	bl	9000c7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
9000cd22:	9802      	ldr	r0, [sp, #8]
9000cd24:	e73d      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000cd26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
9000cd2a:	d012      	beq.n	9000cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
9000cd2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000cd30:	f47f af19 	bne.w	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000cd34:	4b0a      	ldr	r3, [pc, #40]	; (9000cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cd36:	6818      	ldr	r0, [r3, #0]
9000cd38:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000cd3c:	f43f af31 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cd40:	e6ea      	b.n	9000cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
9000cd42:	2b00      	cmp	r3, #0
9000cd44:	f47f af0f 	bne.w	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
9000cd48:	b005      	add	sp, #20
9000cd4a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
9000cd4e:	f7fe bced 	b.w	9000b72c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cd52:	6810      	ldr	r0, [r2, #0]
9000cd54:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000cd58:	f43f af23 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
9000cd5c:	4804      	ldr	r0, [pc, #16]	; (9000cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
9000cd5e:	e720      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cd60:	58024400 	.word	0x58024400
9000cd64:	017d7840 	.word	0x017d7840
9000cd68:	00bb8000 	.word	0x00bb8000
9000cd6c:	03d09000 	.word	0x03d09000
9000cd70:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
9000cd74:	4b28      	ldr	r3, [pc, #160]	; (9000ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000cd78:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
9000cd7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000cd80:	d037      	beq.n	9000cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
9000cd82:	d814      	bhi.n	9000cdae <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
9000cd84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000cd88:	d03f      	beq.n	9000ce0a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
9000cd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cd8e:	d0bf      	beq.n	9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
9000cd90:	2b00      	cmp	r3, #0
9000cd92:	f47f aee8 	bne.w	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000cd96:	f7fe fc89 	bl	9000b6ac <HAL_RCC_GetHCLKFreq>
9000cd9a:	4b1f      	ldr	r3, [pc, #124]	; (9000ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd9c:	4a1f      	ldr	r2, [pc, #124]	; (9000ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
9000cd9e:	6a1b      	ldr	r3, [r3, #32]
9000cda0:	f3c3 1302 	ubfx	r3, r3, #4, #3
9000cda4:	5cd3      	ldrb	r3, [r2, r3]
9000cda6:	f003 031f 	and.w	r3, r3, #31
9000cdaa:	40d8      	lsrs	r0, r3
        break;
9000cdac:	e6f9      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
9000cdae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000cdb2:	d017      	beq.n	9000cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
9000cdb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000cdb8:	d0bc      	beq.n	9000cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
9000cdba:	e6d4      	b.n	9000cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cdbc:	6810      	ldr	r0, [r2, #0]
9000cdbe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cdc2:	f43f aeee 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cdc6:	a801      	add	r0, sp, #4
9000cdc8:	f7ff fc60 	bl	9000c68c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
9000cdcc:	9802      	ldr	r0, [sp, #8]
9000cdce:	e6e8      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cdd0:	6810      	ldr	r0, [r2, #0]
9000cdd2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cdd6:	f43f aee4 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cdda:	a801      	add	r0, sp, #4
9000cddc:	f7ff fd02 	bl	9000c7e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
9000cde0:	9803      	ldr	r0, [sp, #12]
9000cde2:	e6de      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cde4:	4b0c      	ldr	r3, [pc, #48]	; (9000ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cde6:	6818      	ldr	r0, [r3, #0]
9000cde8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000cdec:	f43f aed9 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cdf0:	e7b4      	b.n	9000cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000cdf2:	4b09      	ldr	r3, [pc, #36]	; (9000ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cdf4:	6818      	ldr	r0, [r3, #0]
9000cdf6:	f010 0004 	ands.w	r0, r0, #4
9000cdfa:	f43f aed2 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cdfe:	681b      	ldr	r3, [r3, #0]
9000ce00:	4807      	ldr	r0, [pc, #28]	; (9000ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
9000ce02:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000ce06:	40d8      	lsrs	r0, r3
9000ce08:	e6cb      	b.n	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000ce0a:	4b03      	ldr	r3, [pc, #12]	; (9000ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000ce0c:	6818      	ldr	r0, [r3, #0]
9000ce0e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000ce12:	f43f aec6 	beq.w	9000cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000ce16:	e7d6      	b.n	9000cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
9000ce18:	58024400 	.word	0x58024400
9000ce1c:	90026580 	.word	0x90026580
9000ce20:	03d09000 	.word	0x03d09000

9000ce24 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000ce24:	b318      	cbz	r0, 9000ce6e <HAL_SDRAM_Init+0x4a>
{
9000ce26:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000ce28:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000ce2c:	4604      	mov	r4, r0
9000ce2e:	460d      	mov	r5, r1
9000ce30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ce34:	b1b3      	cbz	r3, 9000ce64 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000ce36:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce38:	2302      	movs	r3, #2
9000ce3a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000ce3e:	f851 0b04 	ldr.w	r0, [r1], #4
9000ce42:	f000 fa39 	bl	9000d2b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000ce46:	6862      	ldr	r2, [r4, #4]
9000ce48:	4629      	mov	r1, r5
9000ce4a:	6820      	ldr	r0, [r4, #0]
9000ce4c:	f000 fa72 	bl	9000d334 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000ce50:	4a08      	ldr	r2, [pc, #32]	; (9000ce74 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ce52:	2101      	movs	r1, #1

  return HAL_OK;
9000ce54:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000ce56:	6813      	ldr	r3, [r2, #0]
9000ce58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000ce5c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ce5e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000ce62:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000ce64:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000ce68:	f7f7 fdda 	bl	90004a20 <HAL_SDRAM_MspInit>
9000ce6c:	e7e3      	b.n	9000ce36 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000ce6e:	2001      	movs	r0, #1
}
9000ce70:	4770      	bx	lr
9000ce72:	bf00      	nop
9000ce74:	52004000 	.word	0x52004000

9000ce78 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000ce78:	b510      	push	{r4, lr}
9000ce7a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000ce7c:	f7f7 fe4c 	bl	90004b18 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000ce80:	e9d4 0100 	ldrd	r0, r1, [r4]
9000ce84:	f000 faa4 	bl	9000d3d0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000ce88:	2000      	movs	r0, #0
9000ce8a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000ce8e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000ce92:	bd10      	pop	{r4, pc}

9000ce94 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000ce94:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000ce96:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000ce9a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000ce9c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000ce9e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000cea0:	d004      	beq.n	9000ceac <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000cea2:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000cea6:	2e01      	cmp	r6, #1
9000cea8:	d001      	beq.n	9000ceae <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000ceaa:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ceac:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ceae:	2302      	movs	r3, #2
9000ceb0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ceb2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ceb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ceb8:	f000 fa9e 	bl	9000d3f8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000cebc:	682b      	ldr	r3, [r5, #0]
9000cebe:	2b02      	cmp	r3, #2
9000cec0:	d003      	beq.n	9000ceca <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000cec2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000cec4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000cec8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ceca:	2305      	movs	r3, #5
  return HAL_OK;
9000cecc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000cece:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000ced2:	bd70      	pop	{r4, r5, r6, pc}

9000ced4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000ced4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000ced6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000ceda:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000cedc:	2b02      	cmp	r3, #2
9000cede:	b2d8      	uxtb	r0, r3
9000cee0:	d005      	beq.n	9000ceee <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000cee2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000cee6:	2b01      	cmp	r3, #1
9000cee8:	b2dd      	uxtb	r5, r3
9000ceea:	d001      	beq.n	9000cef0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000ceec:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ceee:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cef0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000cef2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cef4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000cef8:	f000 fa96 	bl	9000d428 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000cefc:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000cefe:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000cf02:	bd38      	pop	{r3, r4, r5, pc}

9000cf04 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000cf04:	4770      	bx	lr
9000cf06:	bf00      	nop

9000cf08 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000cf08:	2800      	cmp	r0, #0
9000cf0a:	f000 80a5 	beq.w	9000d058 <HAL_TIM_Base_Init+0x150>
{
9000cf0e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000cf10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000cf14:	4604      	mov	r4, r0
9000cf16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000cf1a:	2b00      	cmp	r3, #0
9000cf1c:	d076      	beq.n	9000d00c <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000cf1e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000cf20:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf22:	494e      	ldr	r1, [pc, #312]	; (9000d05c <HAL_TIM_Base_Init+0x154>)
9000cf24:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000cf28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf2c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000cf30:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf32:	fab1 f181 	clz	r1, r1
9000cf36:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000cf3a:	d027      	beq.n	9000cf8c <HAL_TIM_Base_Init+0x84>
9000cf3c:	bb31      	cbnz	r1, 9000cf8c <HAL_TIM_Base_Init+0x84>
9000cf3e:	4848      	ldr	r0, [pc, #288]	; (9000d060 <HAL_TIM_Base_Init+0x158>)
9000cf40:	4d48      	ldr	r5, [pc, #288]	; (9000d064 <HAL_TIM_Base_Init+0x15c>)
9000cf42:	4282      	cmp	r2, r0
9000cf44:	d067      	beq.n	9000d016 <HAL_TIM_Base_Init+0x10e>
9000cf46:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000cf4a:	4282      	cmp	r2, r0
9000cf4c:	d063      	beq.n	9000d016 <HAL_TIM_Base_Init+0x10e>
9000cf4e:	1b55      	subs	r5, r2, r5
9000cf50:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000cf54:	fab5 f585 	clz	r5, r5
9000cf58:	4282      	cmp	r2, r0
9000cf5a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000cf5e:	d063      	beq.n	9000d028 <HAL_TIM_Base_Init+0x120>
9000cf60:	2d00      	cmp	r5, #0
9000cf62:	d161      	bne.n	9000d028 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cf64:	4840      	ldr	r0, [pc, #256]	; (9000d068 <HAL_TIM_Base_Init+0x160>)
9000cf66:	4941      	ldr	r1, [pc, #260]	; (9000d06c <HAL_TIM_Base_Init+0x164>)
9000cf68:	428a      	cmp	r2, r1
9000cf6a:	bf18      	it	ne
9000cf6c:	4282      	cmpne	r2, r0
9000cf6e:	d065      	beq.n	9000d03c <HAL_TIM_Base_Init+0x134>
9000cf70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000cf74:	428a      	cmp	r2, r1
9000cf76:	d061      	beq.n	9000d03c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf78:	69a0      	ldr	r0, [r4, #24]
9000cf7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf7e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf80:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000cf82:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000cf84:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf86:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cf88:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cf8a:	e023      	b.n	9000cfd4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf8c:	4d35      	ldr	r5, [pc, #212]	; (9000d064 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cf8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cf92:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf94:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000cf96:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf98:	fab5 f585 	clz	r5, r5
9000cf9c:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cf9e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000cfa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cfa4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cfa6:	69a0      	ldr	r0, [r4, #24]
9000cfa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cfac:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000cfae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cfb0:	68e3      	ldr	r3, [r4, #12]
9000cfb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cfb4:	6863      	ldr	r3, [r4, #4]
9000cfb6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cfb8:	b951      	cbnz	r1, 9000cfd0 <HAL_TIM_Base_Init+0xc8>
9000cfba:	b94d      	cbnz	r5, 9000cfd0 <HAL_TIM_Base_Init+0xc8>
9000cfbc:	492a      	ldr	r1, [pc, #168]	; (9000d068 <HAL_TIM_Base_Init+0x160>)
9000cfbe:	4b2b      	ldr	r3, [pc, #172]	; (9000d06c <HAL_TIM_Base_Init+0x164>)
9000cfc0:	429a      	cmp	r2, r3
9000cfc2:	bf18      	it	ne
9000cfc4:	428a      	cmpne	r2, r1
9000cfc6:	d003      	beq.n	9000cfd0 <HAL_TIM_Base_Init+0xc8>
9000cfc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000cfcc:	429a      	cmp	r2, r3
9000cfce:	d101      	bne.n	9000cfd4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000cfd0:	6963      	ldr	r3, [r4, #20]
9000cfd2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000cfd4:	2301      	movs	r3, #1
  return HAL_OK;
9000cfd6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000cfd8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000cfda:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cfde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000cfe2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000cfe6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000cfea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000cfee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000cff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000cffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000cffe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000d002:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000d006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000d00a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000d00c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000d010:	f7ff ff78 	bl	9000cf04 <HAL_TIM_Base_MspInit>
9000d014:	e783      	b.n	9000cf1e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000d016:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000d018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000d01c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000d01e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000d022:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000d024:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000d026:	e7ba      	b.n	9000cf9e <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000d028:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000d02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000d02e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000d030:	480f      	ldr	r0, [pc, #60]	; (9000d070 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000d032:	4282      	cmp	r2, r0
9000d034:	d0b3      	beq.n	9000cf9e <HAL_TIM_Base_Init+0x96>
9000d036:	2d00      	cmp	r5, #0
9000d038:	d1b1      	bne.n	9000cf9e <HAL_TIM_Base_Init+0x96>
9000d03a:	e793      	b.n	9000cf64 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000d03c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000d03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000d042:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000d044:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000d046:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000d048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000d04c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000d04e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000d050:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000d052:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000d054:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000d056:	e7b1      	b.n	9000cfbc <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000d058:	2001      	movs	r0, #1
}
9000d05a:	4770      	bx	lr
9000d05c:	40010000 	.word	0x40010000
9000d060:	40000400 	.word	0x40000400
9000d064:	40010400 	.word	0x40010400
9000d068:	40014000 	.word	0x40014000
9000d06c:	40014400 	.word	0x40014400
9000d070:	40000c00 	.word	0x40000c00

9000d074 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000d074:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000d078:	2b01      	cmp	r3, #1
9000d07a:	d141      	bne.n	9000d100 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d07c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000d07e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d080:	4b24      	ldr	r3, [pc, #144]	; (9000d114 <HAL_TIM_Base_Start_IT+0xa0>)
9000d082:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000d086:	bf18      	it	ne
9000d088:	429a      	cmpne	r2, r3
{
9000d08a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d08c:	bf0c      	ite	eq
9000d08e:	2301      	moveq	r3, #1
9000d090:	2300      	movne	r3, #0
9000d092:	4d21      	ldr	r5, [pc, #132]	; (9000d118 <HAL_TIM_Base_Start_IT+0xa4>)
9000d094:	4c21      	ldr	r4, [pc, #132]	; (9000d11c <HAL_TIM_Base_Start_IT+0xa8>)
9000d096:	42aa      	cmp	r2, r5
9000d098:	bf08      	it	eq
9000d09a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000d09e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d0a2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d0a4:	42a2      	cmp	r2, r4
9000d0a6:	bf08      	it	eq
9000d0a8:	f043 0301 	orreq.w	r3, r3, #1
9000d0ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d0b0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d0b4:	481a      	ldr	r0, [pc, #104]	; (9000d120 <HAL_TIM_Base_Start_IT+0xac>)
9000d0b6:	42a2      	cmp	r2, r4
9000d0b8:	bf08      	it	eq
9000d0ba:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d0be:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d0c0:	4282      	cmp	r2, r0
9000d0c2:	bf08      	it	eq
9000d0c4:	f043 0301 	orreq.w	r3, r3, #1
9000d0c8:	4916      	ldr	r1, [pc, #88]	; (9000d124 <HAL_TIM_Base_Start_IT+0xb0>)
9000d0ca:	428a      	cmp	r2, r1
9000d0cc:	bf08      	it	eq
9000d0ce:	f043 0301 	orreq.w	r3, r3, #1
9000d0d2:	b933      	cbnz	r3, 9000d0e2 <HAL_TIM_Base_Start_IT+0x6e>
9000d0d4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000d0d8:	1a10      	subs	r0, r2, r0
9000d0da:	fab0 f080 	clz	r0, r0
9000d0de:	0940      	lsrs	r0, r0, #5
9000d0e0:	b198      	cbz	r0, 9000d10a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000d0e2:	6891      	ldr	r1, [r2, #8]
9000d0e4:	4b10      	ldr	r3, [pc, #64]	; (9000d128 <HAL_TIM_Base_Start_IT+0xb4>)
9000d0e6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000d0e8:	2b06      	cmp	r3, #6
9000d0ea:	d00b      	beq.n	9000d104 <HAL_TIM_Base_Start_IT+0x90>
9000d0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d0f0:	d008      	beq.n	9000d104 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000d0f2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000d0f4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000d0f6:	f043 0301 	orr.w	r3, r3, #1
9000d0fa:	6013      	str	r3, [r2, #0]
}
9000d0fc:	bc30      	pop	{r4, r5}
9000d0fe:	4770      	bx	lr
    return HAL_ERROR;
9000d100:	2001      	movs	r0, #1
}
9000d102:	4770      	bx	lr
  return HAL_OK;
9000d104:	2000      	movs	r0, #0
}
9000d106:	bc30      	pop	{r4, r5}
9000d108:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000d10a:	6813      	ldr	r3, [r2, #0]
9000d10c:	f043 0301 	orr.w	r3, r3, #1
9000d110:	6013      	str	r3, [r2, #0]
9000d112:	e7f3      	b.n	9000d0fc <HAL_TIM_Base_Start_IT+0x88>
9000d114:	40010000 	.word	0x40010000
9000d118:	40000400 	.word	0x40000400
9000d11c:	40000800 	.word	0x40000800
9000d120:	40010400 	.word	0x40010400
9000d124:	40001800 	.word	0x40001800
9000d128:	00010007 	.word	0x00010007

9000d12c <HAL_TIM_OC_DelayElapsedCallback>:
9000d12c:	4770      	bx	lr
9000d12e:	bf00      	nop

9000d130 <HAL_TIM_IC_CaptureCallback>:
9000d130:	4770      	bx	lr
9000d132:	bf00      	nop

9000d134 <HAL_TIM_PWM_PulseFinishedCallback>:
9000d134:	4770      	bx	lr
9000d136:	bf00      	nop

9000d138 <HAL_TIM_TriggerCallback>:
9000d138:	4770      	bx	lr
9000d13a:	bf00      	nop

9000d13c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d13c:	6803      	ldr	r3, [r0, #0]
9000d13e:	691a      	ldr	r2, [r3, #16]
9000d140:	0791      	lsls	r1, r2, #30
{
9000d142:	b510      	push	{r4, lr}
9000d144:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d146:	d502      	bpl.n	9000d14e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000d148:	68da      	ldr	r2, [r3, #12]
9000d14a:	0792      	lsls	r2, r2, #30
9000d14c:	d468      	bmi.n	9000d220 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d14e:	691a      	ldr	r2, [r3, #16]
9000d150:	0752      	lsls	r2, r2, #29
9000d152:	d502      	bpl.n	9000d15a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000d154:	68da      	ldr	r2, [r3, #12]
9000d156:	0750      	lsls	r0, r2, #29
9000d158:	d44f      	bmi.n	9000d1fa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d15a:	691a      	ldr	r2, [r3, #16]
9000d15c:	0711      	lsls	r1, r2, #28
9000d15e:	d502      	bpl.n	9000d166 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000d160:	68da      	ldr	r2, [r3, #12]
9000d162:	0712      	lsls	r2, r2, #28
9000d164:	d437      	bmi.n	9000d1d6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d166:	691a      	ldr	r2, [r3, #16]
9000d168:	06d0      	lsls	r0, r2, #27
9000d16a:	d502      	bpl.n	9000d172 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000d16c:	68da      	ldr	r2, [r3, #12]
9000d16e:	06d1      	lsls	r1, r2, #27
9000d170:	d41e      	bmi.n	9000d1b0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d172:	691a      	ldr	r2, [r3, #16]
9000d174:	07d2      	lsls	r2, r2, #31
9000d176:	d502      	bpl.n	9000d17e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000d178:	68da      	ldr	r2, [r3, #12]
9000d17a:	07d0      	lsls	r0, r2, #31
9000d17c:	d469      	bmi.n	9000d252 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d17e:	691a      	ldr	r2, [r3, #16]
9000d180:	0611      	lsls	r1, r2, #24
9000d182:	d502      	bpl.n	9000d18a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d184:	68da      	ldr	r2, [r3, #12]
9000d186:	0612      	lsls	r2, r2, #24
9000d188:	d46b      	bmi.n	9000d262 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d18a:	691a      	ldr	r2, [r3, #16]
9000d18c:	05d0      	lsls	r0, r2, #23
9000d18e:	d502      	bpl.n	9000d196 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d190:	68da      	ldr	r2, [r3, #12]
9000d192:	0611      	lsls	r1, r2, #24
9000d194:	d46d      	bmi.n	9000d272 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d196:	691a      	ldr	r2, [r3, #16]
9000d198:	0652      	lsls	r2, r2, #25
9000d19a:	d502      	bpl.n	9000d1a2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000d19c:	68da      	ldr	r2, [r3, #12]
9000d19e:	0650      	lsls	r0, r2, #25
9000d1a0:	d46f      	bmi.n	9000d282 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d1a2:	691a      	ldr	r2, [r3, #16]
9000d1a4:	0691      	lsls	r1, r2, #26
9000d1a6:	d502      	bpl.n	9000d1ae <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000d1a8:	68da      	ldr	r2, [r3, #12]
9000d1aa:	0692      	lsls	r2, r2, #26
9000d1ac:	d449      	bmi.n	9000d242 <HAL_TIM_IRQHandler+0x106>
}
9000d1ae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d1b0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d1b4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000d1b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d1b8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d1ba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000d1bc:	69db      	ldr	r3, [r3, #28]
9000d1be:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d1c2:	d16f      	bne.n	9000d2a4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d1c4:	f7ff ffb2 	bl	9000d12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d1c8:	4620      	mov	r0, r4
9000d1ca:	f7ff ffb3 	bl	9000d134 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1ce:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d1d0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1d2:	7722      	strb	r2, [r4, #28]
9000d1d4:	e7cd      	b.n	9000d172 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d1d6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d1da:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000d1dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d1de:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d1e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000d1e2:	69db      	ldr	r3, [r3, #28]
9000d1e4:	079b      	lsls	r3, r3, #30
9000d1e6:	d15a      	bne.n	9000d29e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d1e8:	f7ff ffa0 	bl	9000d12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d1ec:	4620      	mov	r0, r4
9000d1ee:	f7ff ffa1 	bl	9000d134 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1f2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d1f4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d1f6:	7722      	strb	r2, [r4, #28]
9000d1f8:	e7b5      	b.n	9000d166 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d1fa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d1fe:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000d200:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d202:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d204:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000d206:	699b      	ldr	r3, [r3, #24]
9000d208:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d20c:	d144      	bne.n	9000d298 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d20e:	f7ff ff8d 	bl	9000d12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d212:	4620      	mov	r0, r4
9000d214:	f7ff ff8e 	bl	9000d134 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d218:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d21a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d21c:	7722      	strb	r2, [r4, #28]
9000d21e:	e79c      	b.n	9000d15a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d220:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d224:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d226:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d228:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000d22a:	699b      	ldr	r3, [r3, #24]
9000d22c:	0799      	lsls	r1, r3, #30
9000d22e:	d130      	bne.n	9000d292 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000d230:	f7ff ff7c 	bl	9000d12c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d234:	4620      	mov	r0, r4
9000d236:	f7ff ff7d 	bl	9000d134 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d23a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d23c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d23e:	7722      	strb	r2, [r4, #28]
9000d240:	e785      	b.n	9000d14e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d242:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000d246:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d248:	611a      	str	r2, [r3, #16]
}
9000d24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000d24e:	f000 b82d 	b.w	9000d2ac <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d252:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000d256:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d258:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000d25a:	f7f7 f9e7 	bl	9000462c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d25e:	6823      	ldr	r3, [r4, #0]
9000d260:	e78d      	b.n	9000d17e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d262:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000d266:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d268:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000d26a:	f000 f821 	bl	9000d2b0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d26e:	6823      	ldr	r3, [r4, #0]
9000d270:	e78b      	b.n	9000d18a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d272:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000d276:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d278:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000d27a:	f000 f81b 	bl	9000d2b4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d27e:	6823      	ldr	r3, [r4, #0]
9000d280:	e789      	b.n	9000d196 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d282:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000d286:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d288:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000d28a:	f7ff ff55 	bl	9000d138 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d28e:	6823      	ldr	r3, [r4, #0]
9000d290:	e787      	b.n	9000d1a2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000d292:	f7ff ff4d 	bl	9000d130 <HAL_TIM_IC_CaptureCallback>
9000d296:	e7d0      	b.n	9000d23a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000d298:	f7ff ff4a 	bl	9000d130 <HAL_TIM_IC_CaptureCallback>
9000d29c:	e7bc      	b.n	9000d218 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000d29e:	f7ff ff47 	bl	9000d130 <HAL_TIM_IC_CaptureCallback>
9000d2a2:	e7a6      	b.n	9000d1f2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000d2a4:	f7ff ff44 	bl	9000d130 <HAL_TIM_IC_CaptureCallback>
9000d2a8:	e791      	b.n	9000d1ce <HAL_TIM_IRQHandler+0x92>
9000d2aa:	bf00      	nop

9000d2ac <HAL_TIMEx_CommutCallback>:
9000d2ac:	4770      	bx	lr
9000d2ae:	bf00      	nop

9000d2b0 <HAL_TIMEx_BreakCallback>:
9000d2b0:	4770      	bx	lr
9000d2b2:	bf00      	nop

9000d2b4 <HAL_TIMEx_Break2Callback>:
9000d2b4:	4770      	bx	lr
9000d2b6:	bf00      	nop

9000d2b8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d2b8:	680b      	ldr	r3, [r1, #0]
{
9000d2ba:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d2bc:	b9d3      	cbnz	r3, 9000d2f4 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d2be:	6804      	ldr	r4, [r0, #0]
9000d2c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000d2c4:	684a      	ldr	r2, [r1, #4]
9000d2c6:	4023      	ands	r3, r4
9000d2c8:	4313      	orrs	r3, r2
9000d2ca:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d2ce:	4323      	orrs	r3, r4
9000d2d0:	4313      	orrs	r3, r2
9000d2d2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000d2d6:	4323      	orrs	r3, r4
9000d2d8:	4313      	orrs	r3, r2
9000d2da:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000d2de:	4323      	orrs	r3, r4
9000d2e0:	4313      	orrs	r3, r2
9000d2e2:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000d2e6:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000d2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d2ec:	4313      	orrs	r3, r2
9000d2ee:	6003      	str	r3, [r0, #0]
}
9000d2f0:	2000      	movs	r0, #0
9000d2f2:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d2f4:	6802      	ldr	r2, [r0, #0]
9000d2f6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000d2fa:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000d2fe:	4322      	orrs	r2, r4
9000d300:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000d302:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d304:	4b0a      	ldr	r3, [pc, #40]	; (9000d330 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d306:	4322      	orrs	r2, r4
9000d308:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d30a:	6842      	ldr	r2, [r0, #4]
9000d30c:	4013      	ands	r3, r2
9000d30e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000d312:	4323      	orrs	r3, r4
9000d314:	4313      	orrs	r3, r2
9000d316:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000d31a:	4323      	orrs	r3, r4
9000d31c:	4313      	orrs	r3, r2
9000d31e:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000d322:	4323      	orrs	r3, r4
}
9000d324:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d328:	4313      	orrs	r3, r2
9000d32a:	6043      	str	r3, [r0, #4]
}
9000d32c:	2000      	movs	r0, #0
9000d32e:	4770      	bx	lr
9000d330:	ffff8000 	.word	0xffff8000

9000d334 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000d334:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000d336:	bb0a      	cbnz	r2, 9000d37c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d338:	6883      	ldr	r3, [r0, #8]
9000d33a:	e9d1 2400 	ldrd	r2, r4, [r1]
9000d33e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d342:	3c01      	subs	r4, #1
9000d344:	3a01      	subs	r2, #1
9000d346:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d34a:	4313      	orrs	r3, r2
9000d34c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d350:	3c01      	subs	r4, #1
9000d352:	3a01      	subs	r2, #1
9000d354:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000d358:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000d35c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d360:	698a      	ldr	r2, [r1, #24]
9000d362:	3d01      	subs	r5, #1
9000d364:	1e61      	subs	r1, r4, #1
9000d366:	3a01      	subs	r2, #1
9000d368:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000d36c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000d370:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000d374:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d376:	6083      	str	r3, [r0, #8]
}
9000d378:	2000      	movs	r0, #0
9000d37a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d37c:	6885      	ldr	r5, [r0, #8]
9000d37e:	68ca      	ldr	r2, [r1, #12]
9000d380:	4b12      	ldr	r3, [pc, #72]	; (9000d3cc <FMC_SDRAM_Timing_Init+0x98>)
9000d382:	1e54      	subs	r4, r2, #1
9000d384:	694a      	ldr	r2, [r1, #20]
9000d386:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d388:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d38a:	3a01      	subs	r2, #1
9000d38c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d390:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d394:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d398:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d39c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d39e:	68c3      	ldr	r3, [r0, #12]
9000d3a0:	3c01      	subs	r4, #1
9000d3a2:	3a01      	subs	r2, #1
9000d3a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d3a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d3ac:	690c      	ldr	r4, [r1, #16]
9000d3ae:	4313      	orrs	r3, r2
9000d3b0:	698a      	ldr	r2, [r1, #24]
9000d3b2:	1e61      	subs	r1, r4, #1
9000d3b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000d3b8:	3a01      	subs	r2, #1
9000d3ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000d3be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000d3c2:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d3c4:	60c3      	str	r3, [r0, #12]
}
9000d3c6:	2000      	movs	r0, #0
9000d3c8:	4770      	bx	lr
9000d3ca:	bf00      	nop
9000d3cc:	ff0f0fff 	.word	0xff0f0fff

9000d3d0 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000d3d0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000d3d2:	2200      	movs	r2, #0
{
9000d3d4:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000d3d6:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d3da:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000d3de:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000d3e2:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000d3e6:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d3e8:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000d3ec:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000d3ee:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000d3f0:	619a      	str	r2, [r3, #24]
}
9000d3f2:	bc30      	pop	{r4, r5}
9000d3f4:	4770      	bx	lr
9000d3f6:	bf00      	nop

9000d3f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000d3f8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d3fa:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000d3fe:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d400:	6900      	ldr	r0, [r0, #16]
9000d402:	4323      	orrs	r3, r4
9000d404:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000d408:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000d40c:	4c05      	ldr	r4, [pc, #20]	; (9000d424 <FMC_SDRAM_SendCommand+0x2c>)
9000d40e:	3901      	subs	r1, #1
9000d410:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000d412:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d414:	4323      	orrs	r3, r4
}
9000d416:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d41a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000d41e:	6113      	str	r3, [r2, #16]
}
9000d420:	4770      	bx	lr
9000d422:	bf00      	nop
9000d424:	ffc00000 	.word	0xffc00000

9000d428 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000d428:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d42a:	4b05      	ldr	r3, [pc, #20]	; (9000d440 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000d42c:	2000      	movs	r0, #0
{
9000d42e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d430:	6954      	ldr	r4, [r2, #20]
9000d432:	4023      	ands	r3, r4
}
9000d434:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d438:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000d43c:	6151      	str	r1, [r2, #20]
}
9000d43e:	4770      	bx	lr
9000d440:	ffffc001 	.word	0xffffc001

9000d444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000d444:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000d446:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d44a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000d44c:	f002 fcdc 	bl	9000fe08 <xTaskGetSchedulerState>
9000d450:	2801      	cmp	r0, #1
9000d452:	d100      	bne.n	9000d456 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000d454:	bd08      	pop	{r3, pc}
9000d456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000d45a:	f000 bcdb 	b.w	9000de14 <xPortSysTickHandler>
9000d45e:	bf00      	nop

9000d460 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000d460:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000d464:	b92b      	cbnz	r3, 9000d472 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000d466:	4b06      	ldr	r3, [pc, #24]	; (9000d480 <osKernelInitialize+0x20>)
9000d468:	6818      	ldr	r0, [r3, #0]
9000d46a:	b928      	cbnz	r0, 9000d478 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000d46c:	2201      	movs	r2, #1
9000d46e:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000d470:	4770      	bx	lr
    stat = osErrorISR;
9000d472:	f06f 0005 	mvn.w	r0, #5
9000d476:	4770      	bx	lr
    } else {
      stat = osError;
9000d478:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000d47c:	4770      	bx	lr
9000d47e:	bf00      	nop
9000d480:	2400c084 	.word	0x2400c084

9000d484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000d484:	b510      	push	{r4, lr}
9000d486:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d48a:	b974      	cbnz	r4, 9000d4aa <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000d48c:	4b08      	ldr	r3, [pc, #32]	; (9000d4b0 <osKernelStart+0x2c>)
9000d48e:	681a      	ldr	r2, [r3, #0]
9000d490:	2a01      	cmp	r2, #1
9000d492:	d107      	bne.n	9000d4a4 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000d494:	4907      	ldr	r1, [pc, #28]	; (9000d4b4 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000d496:	2202      	movs	r2, #2
9000d498:	77cc      	strb	r4, [r1, #31]
9000d49a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000d49c:	f002 fa42 	bl	9000f924 <vTaskStartScheduler>
      stat = osOK;
9000d4a0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000d4a2:	bd10      	pop	{r4, pc}
      stat = osError;
9000d4a4:	f04f 30ff 	mov.w	r0, #4294967295
}
9000d4a8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d4aa:	f06f 0005 	mvn.w	r0, #5
}
9000d4ae:	bd10      	pop	{r4, pc}
9000d4b0:	2400c084 	.word	0x2400c084
9000d4b4:	e000ed00 	.word	0xe000ed00

9000d4b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000d4ba:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d4bc:	b087      	sub	sp, #28
9000d4be:	4614      	mov	r4, r2
  hTask = NULL;
9000d4c0:	9505      	str	r5, [sp, #20]
9000d4c2:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000d4c6:	bb5a      	cbnz	r2, 9000d520 <osThreadNew+0x68>
9000d4c8:	4606      	mov	r6, r0
9000d4ca:	b348      	cbz	r0, 9000d520 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000d4cc:	b1e4      	cbz	r4, 9000d508 <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000d4ce:	69a7      	ldr	r7, [r4, #24]
9000d4d0:	bb4f      	cbnz	r7, 9000d526 <osThreadNew+0x6e>
9000d4d2:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d4d4:	6863      	ldr	r3, [r4, #4]
9000d4d6:	07db      	lsls	r3, r3, #31
9000d4d8:	d422      	bmi.n	9000d520 <osThreadNew+0x68>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000d4da:	6963      	ldr	r3, [r4, #20]
9000d4dc:	b33b      	cbz	r3, 9000d52e <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000d4de:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d4e2:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000d4e4:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d4e6:	b338      	cbz	r0, 9000d538 <osThreadNew+0x80>
9000d4e8:	68e2      	ldr	r2, [r4, #12]
9000d4ea:	2a5f      	cmp	r2, #95	; 0x5f
9000d4ec:	d918      	bls.n	9000d520 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000d4ee:	6924      	ldr	r4, [r4, #16]
9000d4f0:	b1b3      	cbz	r3, 9000d520 <osThreadNew+0x68>
9000d4f2:	b1ac      	cbz	r4, 9000d520 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000d4f4:	460b      	mov	r3, r1
9000d4f6:	4662      	mov	r2, ip
9000d4f8:	4629      	mov	r1, r5
9000d4fa:	9700      	str	r7, [sp, #0]
9000d4fc:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000d500:	4630      	mov	r0, r6
9000d502:	f002 f873 	bl	9000f5ec <xTaskCreateStatic>
9000d506:	e00c      	b.n	9000d522 <osThreadNew+0x6a>
9000d508:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000d50a:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d50c:	460b      	mov	r3, r1
9000d50e:	4621      	mov	r1, r4
9000d510:	ac05      	add	r4, sp, #20
9000d512:	4630      	mov	r0, r6
9000d514:	9700      	str	r7, [sp, #0]
9000d516:	9401      	str	r4, [sp, #4]
9000d518:	f002 f912 	bl	9000f740 <xTaskCreate>
9000d51c:	2801      	cmp	r0, #1
9000d51e:	d009      	beq.n	9000d534 <osThreadNew+0x7c>
        return (NULL);
9000d520:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000d522:	b007      	add	sp, #28
9000d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d526:	1e7a      	subs	r2, r7, #1
9000d528:	2a37      	cmp	r2, #55	; 0x37
9000d52a:	d9d3      	bls.n	9000d4d4 <osThreadNew+0x1c>
9000d52c:	e7f8      	b.n	9000d520 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000d52e:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000d532:	e7d6      	b.n	9000d4e2 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000d534:	9805      	ldr	r0, [sp, #20]
9000d536:	e7f4      	b.n	9000d522 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000d538:	68e3      	ldr	r3, [r4, #12]
9000d53a:	2b00      	cmp	r3, #0
9000d53c:	d1f1      	bne.n	9000d522 <osThreadNew+0x6a>
9000d53e:	6923      	ldr	r3, [r4, #16]
9000d540:	2b00      	cmp	r3, #0
9000d542:	d1ee      	bne.n	9000d522 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d544:	fa1f f28c 	uxth.w	r2, ip
9000d548:	462c      	mov	r4, r5
9000d54a:	e7df      	b.n	9000d50c <osThreadNew+0x54>

9000d54c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000d54c:	b510      	push	{r4, lr}
9000d54e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d552:	b92c      	cbnz	r4, 9000d560 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000d554:	b900      	cbnz	r0, 9000d558 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000d556:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000d558:	f002 f98e 	bl	9000f878 <vTaskDelay>
    stat = osOK;
9000d55c:	4620      	mov	r0, r4
}
9000d55e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d560:	f06f 0005 	mvn.w	r0, #5
}
9000d564:	bd10      	pop	{r4, pc}
9000d566:	bf00      	nop

9000d568 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000d568:	b570      	push	{r4, r5, r6, lr}
9000d56a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000d56e:	b9db      	cbnz	r3, 9000d5a8 <osMutexNew+0x40>
    if (attr != NULL) {
9000d570:	4604      	mov	r4, r0
9000d572:	b1e0      	cbz	r0, 9000d5ae <osMutexNew+0x46>
      type = attr->attr_bits;
9000d574:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000d576:	0733      	lsls	r3, r6, #28
9000d578:	d416      	bmi.n	9000d5a8 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d57a:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000d57c:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d580:	68c3      	ldr	r3, [r0, #12]
9000d582:	b181      	cbz	r1, 9000d5a6 <osMutexNew+0x3e>
9000d584:	2b4f      	cmp	r3, #79	; 0x4f
9000d586:	d90f      	bls.n	9000d5a8 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000d588:	b31e      	cbz	r6, 9000d5d2 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000d58a:	2004      	movs	r0, #4
9000d58c:	f001 f854 	bl	9000e638 <xQueueCreateMutexStatic>
9000d590:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000d592:	b14d      	cbz	r5, 9000d5a8 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000d594:	6821      	ldr	r1, [r4, #0]
9000d596:	4628      	mov	r0, r5
9000d598:	f001 fd84 	bl	9000f0a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000d59c:	b12e      	cbz	r6, 9000d5aa <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000d59e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000d5a2:	4628      	mov	r0, r5
9000d5a4:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d5a6:	b163      	cbz	r3, 9000d5c2 <osMutexNew+0x5a>
  hMutex = NULL;
9000d5a8:	2500      	movs	r5, #0
}
9000d5aa:	4628      	mov	r0, r5
9000d5ac:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000d5ae:	2001      	movs	r0, #1
9000d5b0:	f001 f8b2 	bl	9000e718 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d5b4:	4605      	mov	r5, r0
9000d5b6:	2800      	cmp	r0, #0
9000d5b8:	d0f6      	beq.n	9000d5a8 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000d5ba:	4621      	mov	r1, r4
9000d5bc:	f001 fd72 	bl	9000f0a4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000d5c0:	e7f3      	b.n	9000d5aa <osMutexNew+0x42>
            if (rmtx != 0U) {
9000d5c2:	b15e      	cbz	r6, 9000d5dc <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000d5c4:	2004      	movs	r0, #4
9000d5c6:	f001 f8a7 	bl	9000e718 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d5ca:	4605      	mov	r5, r0
9000d5cc:	2800      	cmp	r0, #0
9000d5ce:	d1e1      	bne.n	9000d594 <osMutexNew+0x2c>
9000d5d0:	e7ea      	b.n	9000d5a8 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000d5d2:	2001      	movs	r0, #1
9000d5d4:	f001 f830 	bl	9000e638 <xQueueCreateMutexStatic>
9000d5d8:	4605      	mov	r5, r0
9000d5da:	e7da      	b.n	9000d592 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000d5dc:	2001      	movs	r0, #1
9000d5de:	f001 f89b 	bl	9000e718 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d5e2:	4605      	mov	r5, r0
9000d5e4:	e7d5      	b.n	9000d592 <osMutexNew+0x2a>
9000d5e6:	bf00      	nop

9000d5e8 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000d5e8:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000d5ec:	f000 0301 	and.w	r3, r0, #1
9000d5f0:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000d5f4:	b9a8      	cbnz	r0, 9000d622 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d5f6:	b1ba      	cbz	r2, 9000d628 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d5f8:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000d5fa:	b510      	push	{r4, lr}
9000d5fc:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000d5fe:	b953      	cbnz	r3, 9000d616 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000d600:	f001 fb02 	bl	9000ec08 <xQueueSemaphoreTake>
9000d604:	2801      	cmp	r0, #1
9000d606:	d00a      	beq.n	9000d61e <osMutexAcquire+0x36>
          stat = osErrorResource;
9000d608:	2c00      	cmp	r4, #0
9000d60a:	bf14      	ite	ne
9000d60c:	f06f 0001 	mvnne.w	r0, #1
9000d610:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000d614:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d616:	f001 fc7f 	bl	9000ef18 <xQueueTakeMutexRecursive>
9000d61a:	2801      	cmp	r0, #1
9000d61c:	d1f4      	bne.n	9000d608 <osMutexAcquire+0x20>
  stat = osOK;
9000d61e:	2000      	movs	r0, #0
}
9000d620:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d622:	f06f 0005 	mvn.w	r0, #5
9000d626:	4770      	bx	lr
    stat = osErrorParameter;
9000d628:	f06f 0003 	mvn.w	r0, #3
}
9000d62c:	4770      	bx	lr
9000d62e:	bf00      	nop

9000d630 <osMutexRelease>:
9000d630:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000d634:	b9ba      	cbnz	r2, 9000d666 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000d636:	b510      	push	{r4, lr}
9000d638:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d63c:	b1b4      	cbz	r4, 9000d66c <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000d63e:	f000 0301 	and.w	r3, r0, #1
9000d642:	b943      	cbnz	r3, 9000d656 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000d644:	461a      	mov	r2, r3
9000d646:	4619      	mov	r1, r3
9000d648:	4620      	mov	r0, r4
9000d64a:	f000 fe73 	bl	9000e334 <xQueueGenericSend>
9000d64e:	2801      	cmp	r0, #1
9000d650:	d106      	bne.n	9000d660 <osMutexRelease+0x30>
  stat = osOK;
9000d652:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d654:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000d656:	4620      	mov	r0, r4
9000d658:	f001 f83e 	bl	9000e6d8 <xQueueGiveMutexRecursive>
9000d65c:	2801      	cmp	r0, #1
9000d65e:	d0f8      	beq.n	9000d652 <osMutexRelease+0x22>
        stat = osErrorResource;
9000d660:	f06f 0002 	mvn.w	r0, #2
}
9000d664:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d666:	f06f 0005 	mvn.w	r0, #5
}
9000d66a:	4770      	bx	lr
    stat = osErrorParameter;
9000d66c:	f06f 0003 	mvn.w	r0, #3
}
9000d670:	bd10      	pop	{r4, pc}
9000d672:	bf00      	nop

9000d674 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000d674:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d676:	b083      	sub	sp, #12
9000d678:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000d67c:	b98e      	cbnz	r6, 9000d6a2 <osSemaphoreNew+0x2e>
9000d67e:	4605      	mov	r5, r0
9000d680:	b178      	cbz	r0, 9000d6a2 <osSemaphoreNew+0x2e>
9000d682:	4288      	cmp	r0, r1
9000d684:	460f      	mov	r7, r1
9000d686:	d30c      	bcc.n	9000d6a2 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000d688:	4614      	mov	r4, r2
9000d68a:	b182      	cbz	r2, 9000d6ae <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d68c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000d690:	b15a      	cbz	r2, 9000d6aa <osSemaphoreNew+0x36>
9000d692:	2b4f      	cmp	r3, #79	; 0x4f
9000d694:	d905      	bls.n	9000d6a2 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000d696:	2801      	cmp	r0, #1
9000d698:	d032      	beq.n	9000d700 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000d69a:	f000 fda3 	bl	9000e1e4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000d69e:	4605      	mov	r5, r0
9000d6a0:	b978      	cbnz	r0, 9000d6c2 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000d6a2:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000d6a4:	4628      	mov	r0, r5
9000d6a6:	b003      	add	sp, #12
9000d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d6aa:	2b00      	cmp	r3, #0
9000d6ac:	d1f9      	bne.n	9000d6a2 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000d6ae:	2d01      	cmp	r5, #1
9000d6b0:	d00f      	beq.n	9000d6d2 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000d6b2:	4628      	mov	r0, r5
9000d6b4:	4639      	mov	r1, r7
9000d6b6:	f000 fdf7 	bl	9000e2a8 <xQueueCreateCountingSemaphore>
9000d6ba:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000d6bc:	2d00      	cmp	r5, #0
9000d6be:	d0f0      	beq.n	9000d6a2 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000d6c0:	b104      	cbz	r4, 9000d6c4 <osSemaphoreNew+0x50>
          name = attr->name;
9000d6c2:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000d6c4:	4628      	mov	r0, r5
9000d6c6:	4621      	mov	r1, r4
9000d6c8:	f001 fcec 	bl	9000f0a4 <vQueueAddToRegistry>
}
9000d6cc:	4628      	mov	r0, r5
9000d6ce:	b003      	add	sp, #12
9000d6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000d6d2:	4628      	mov	r0, r5
9000d6d4:	2203      	movs	r2, #3
9000d6d6:	2100      	movs	r1, #0
9000d6d8:	f000 fd42 	bl	9000e160 <xQueueGenericCreate>
9000d6dc:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000d6de:	2d00      	cmp	r5, #0
9000d6e0:	d0df      	beq.n	9000d6a2 <osSemaphoreNew+0x2e>
9000d6e2:	2f00      	cmp	r7, #0
9000d6e4:	d0ea      	beq.n	9000d6bc <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d6e6:	2300      	movs	r3, #0
9000d6e8:	4628      	mov	r0, r5
9000d6ea:	461a      	mov	r2, r3
9000d6ec:	4619      	mov	r1, r3
9000d6ee:	f000 fe21 	bl	9000e334 <xQueueGenericSend>
9000d6f2:	2801      	cmp	r0, #1
9000d6f4:	d0e4      	beq.n	9000d6c0 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000d6f6:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000d6f8:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000d6fa:	f001 fc8d 	bl	9000f018 <vQueueDelete>
      if (hSemaphore != NULL) {
9000d6fe:	e7d1      	b.n	9000d6a4 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000d700:	4613      	mov	r3, r2
9000d702:	2203      	movs	r2, #3
9000d704:	4631      	mov	r1, r6
9000d706:	9200      	str	r2, [sp, #0]
9000d708:	4632      	mov	r2, r6
9000d70a:	f000 fcbd 	bl	9000e088 <xQueueGenericCreateStatic>
9000d70e:	4605      	mov	r5, r0
9000d710:	e7e5      	b.n	9000d6de <osSemaphoreNew+0x6a>
9000d712:	bf00      	nop

9000d714 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d714:	b370      	cbz	r0, 9000d774 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000d716:	b510      	push	{r4, lr}
9000d718:	460c      	mov	r4, r1
9000d71a:	b082      	sub	sp, #8
9000d71c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d720:	b1c3      	cbz	r3, 9000d754 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000d722:	bb21      	cbnz	r1, 9000d76e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d724:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d726:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d728:	f001 fc16 	bl	9000ef58 <xQueueReceiveFromISR>
9000d72c:	2801      	cmp	r0, #1
9000d72e:	d11a      	bne.n	9000d766 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d730:	9b01      	ldr	r3, [sp, #4]
9000d732:	b913      	cbnz	r3, 9000d73a <osSemaphoreAcquire+0x26>
  stat = osOK;
9000d734:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d736:	b002      	add	sp, #8
9000d738:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000d73a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d742:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d746:	f3bf 8f4f 	dsb	sy
9000d74a:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d74e:	4620      	mov	r0, r4
}
9000d750:	b002      	add	sp, #8
9000d752:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000d754:	f001 fa58 	bl	9000ec08 <xQueueSemaphoreTake>
9000d758:	2801      	cmp	r0, #1
9000d75a:	d0eb      	beq.n	9000d734 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000d75c:	b11c      	cbz	r4, 9000d766 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000d75e:	f06f 0001 	mvn.w	r0, #1
}
9000d762:	b002      	add	sp, #8
9000d764:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000d766:	f06f 0002 	mvn.w	r0, #2
}
9000d76a:	b002      	add	sp, #8
9000d76c:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000d76e:	f06f 0003 	mvn.w	r0, #3
9000d772:	e7e0      	b.n	9000d736 <osSemaphoreAcquire+0x22>
9000d774:	f06f 0003 	mvn.w	r0, #3
}
9000d778:	4770      	bx	lr
9000d77a:	bf00      	nop

9000d77c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d77c:	b330      	cbz	r0, 9000d7cc <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000d77e:	b510      	push	{r4, lr}
9000d780:	b082      	sub	sp, #8
9000d782:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d786:	b1ab      	cbz	r3, 9000d7b4 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000d788:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d78a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000d78c:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d78e:	f001 f865 	bl	9000e85c <xQueueGiveFromISR>
9000d792:	2801      	cmp	r0, #1
9000d794:	d117      	bne.n	9000d7c6 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000d796:	9b01      	ldr	r3, [sp, #4]
9000d798:	b193      	cbz	r3, 9000d7c0 <osSemaphoreRelease+0x44>
9000d79a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d7a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d7a6:	f3bf 8f4f 	dsb	sy
9000d7aa:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d7ae:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000d7b0:	b002      	add	sp, #8
9000d7b2:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d7b4:	461a      	mov	r2, r3
9000d7b6:	4619      	mov	r1, r3
9000d7b8:	f000 fdbc 	bl	9000e334 <xQueueGenericSend>
9000d7bc:	2801      	cmp	r0, #1
9000d7be:	d102      	bne.n	9000d7c6 <osSemaphoreRelease+0x4a>
  stat = osOK;
9000d7c0:	2000      	movs	r0, #0
}
9000d7c2:	b002      	add	sp, #8
9000d7c4:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000d7c6:	f06f 0002 	mvn.w	r0, #2
9000d7ca:	e7fa      	b.n	9000d7c2 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000d7cc:	f06f 0003 	mvn.w	r0, #3
}
9000d7d0:	4770      	bx	lr
9000d7d2:	bf00      	nop

9000d7d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d7d6:	b083      	sub	sp, #12
9000d7d8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000d7dc:	b987      	cbnz	r7, 9000d800 <osMessageQueueNew+0x2c>
9000d7de:	4605      	mov	r5, r0
9000d7e0:	b170      	cbz	r0, 9000d800 <osMessageQueueNew+0x2c>
9000d7e2:	b169      	cbz	r1, 9000d800 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000d7e4:	4614      	mov	r4, r2
9000d7e6:	b17a      	cbz	r2, 9000d808 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d7e8:	6893      	ldr	r3, [r2, #8]
9000d7ea:	b1cb      	cbz	r3, 9000d820 <osMessageQueueNew+0x4c>
9000d7ec:	68d2      	ldr	r2, [r2, #12]
9000d7ee:	2a4f      	cmp	r2, #79	; 0x4f
9000d7f0:	d906      	bls.n	9000d800 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d7f2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d7f4:	b122      	cbz	r2, 9000d800 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d7f6:	fb01 f505 	mul.w	r5, r1, r5
9000d7fa:	6966      	ldr	r6, [r4, #20]
9000d7fc:	42ae      	cmp	r6, r5
9000d7fe:	d21f      	bcs.n	9000d840 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000d800:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000d802:	4628      	mov	r0, r5
9000d804:	b003      	add	sp, #12
9000d806:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000d808:	f000 fcaa 	bl	9000e160 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d80c:	4605      	mov	r5, r0
9000d80e:	2800      	cmp	r0, #0
9000d810:	d0f6      	beq.n	9000d800 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000d812:	4628      	mov	r0, r5
9000d814:	4621      	mov	r1, r4
9000d816:	f001 fc45 	bl	9000f0a4 <vQueueAddToRegistry>
}
9000d81a:	4628      	mov	r0, r5
9000d81c:	b003      	add	sp, #12
9000d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000d820:	68d3      	ldr	r3, [r2, #12]
9000d822:	2b00      	cmp	r3, #0
9000d824:	d1ec      	bne.n	9000d800 <osMessageQueueNew+0x2c>
9000d826:	6913      	ldr	r3, [r2, #16]
9000d828:	2b00      	cmp	r3, #0
9000d82a:	d1e9      	bne.n	9000d800 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000d82c:	6952      	ldr	r2, [r2, #20]
9000d82e:	2a00      	cmp	r2, #0
9000d830:	d1e6      	bne.n	9000d800 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000d832:	f000 fc95 	bl	9000e160 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d836:	4605      	mov	r5, r0
9000d838:	2800      	cmp	r0, #0
9000d83a:	d0e1      	beq.n	9000d800 <osMessageQueueNew+0x2c>
        name = attr->name;
9000d83c:	6824      	ldr	r4, [r4, #0]
9000d83e:	e7e8      	b.n	9000d812 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000d840:	9700      	str	r7, [sp, #0]
9000d842:	f000 fc21 	bl	9000e088 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000d846:	4605      	mov	r5, r0
9000d848:	2800      	cmp	r0, #0
9000d84a:	d1f7      	bne.n	9000d83c <osMessageQueueNew+0x68>
9000d84c:	e7d8      	b.n	9000d800 <osMessageQueueNew+0x2c>
9000d84e:	bf00      	nop

9000d850 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000d850:	b530      	push	{r4, r5, lr}
9000d852:	461c      	mov	r4, r3
9000d854:	b083      	sub	sp, #12
9000d856:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d85a:	b30b      	cbz	r3, 9000d8a0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d85c:	3c00      	subs	r4, #0
9000d85e:	bf18      	it	ne
9000d860:	2401      	movne	r4, #1
9000d862:	2900      	cmp	r1, #0
9000d864:	bf08      	it	eq
9000d866:	f044 0401 	orreq.w	r4, r4, #1
9000d86a:	bb7c      	cbnz	r4, 9000d8cc <osMessageQueuePut+0x7c>
9000d86c:	fab0 f480 	clz	r4, r0
9000d870:	0964      	lsrs	r4, r4, #5
9000d872:	b358      	cbz	r0, 9000d8cc <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d874:	4623      	mov	r3, r4
9000d876:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d878:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d87a:	f000 ff85 	bl	9000e788 <xQueueGenericSendFromISR>
9000d87e:	2801      	cmp	r0, #1
9000d880:	d120      	bne.n	9000d8c4 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d882:	9b01      	ldr	r3, [sp, #4]
9000d884:	b1db      	cbz	r3, 9000d8be <osMessageQueuePut+0x6e>
9000d886:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d88e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d892:	f3bf 8f4f 	dsb	sy
9000d896:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d89a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d89c:	b003      	add	sp, #12
9000d89e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d8a0:	b1a0      	cbz	r0, 9000d8cc <osMessageQueuePut+0x7c>
9000d8a2:	fab1 f381 	clz	r3, r1
9000d8a6:	095b      	lsrs	r3, r3, #5
9000d8a8:	b181      	cbz	r1, 9000d8cc <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d8aa:	4622      	mov	r2, r4
9000d8ac:	f000 fd42 	bl	9000e334 <xQueueGenericSend>
9000d8b0:	2801      	cmp	r0, #1
9000d8b2:	d004      	beq.n	9000d8be <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000d8b4:	b134      	cbz	r4, 9000d8c4 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000d8b6:	f06f 0001 	mvn.w	r0, #1
}
9000d8ba:	b003      	add	sp, #12
9000d8bc:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d8be:	2000      	movs	r0, #0
}
9000d8c0:	b003      	add	sp, #12
9000d8c2:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d8c4:	f06f 0002 	mvn.w	r0, #2
}
9000d8c8:	b003      	add	sp, #12
9000d8ca:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d8cc:	f06f 0003 	mvn.w	r0, #3
9000d8d0:	e7e4      	b.n	9000d89c <osMessageQueuePut+0x4c>
9000d8d2:	bf00      	nop

9000d8d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000d8d4:	b530      	push	{r4, r5, lr}
9000d8d6:	461c      	mov	r4, r3
9000d8d8:	b083      	sub	sp, #12
9000d8da:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d8de:	b303      	cbz	r3, 9000d922 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d8e0:	3c00      	subs	r4, #0
9000d8e2:	bf18      	it	ne
9000d8e4:	2401      	movne	r4, #1
9000d8e6:	2900      	cmp	r1, #0
9000d8e8:	bf08      	it	eq
9000d8ea:	f044 0401 	orreq.w	r4, r4, #1
9000d8ee:	bb5c      	cbnz	r4, 9000d948 <osMessageQueueGet+0x74>
9000d8f0:	fab0 f480 	clz	r4, r0
9000d8f4:	0964      	lsrs	r4, r4, #5
9000d8f6:	b338      	cbz	r0, 9000d948 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d8f8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d8fa:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d8fc:	f001 fb2c 	bl	9000ef58 <xQueueReceiveFromISR>
9000d900:	2801      	cmp	r0, #1
9000d902:	d11d      	bne.n	9000d940 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d904:	9b01      	ldr	r3, [sp, #4]
9000d906:	b1c3      	cbz	r3, 9000d93a <osMessageQueueGet+0x66>
9000d908:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d910:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d914:	f3bf 8f4f 	dsb	sy
9000d918:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d91c:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d91e:	b003      	add	sp, #12
9000d920:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d922:	b188      	cbz	r0, 9000d948 <osMessageQueueGet+0x74>
9000d924:	b181      	cbz	r1, 9000d948 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d926:	4622      	mov	r2, r4
9000d928:	f000 fff0 	bl	9000e90c <xQueueReceive>
9000d92c:	2801      	cmp	r0, #1
9000d92e:	d004      	beq.n	9000d93a <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000d930:	b134      	cbz	r4, 9000d940 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000d932:	f06f 0001 	mvn.w	r0, #1
}
9000d936:	b003      	add	sp, #12
9000d938:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d93a:	2000      	movs	r0, #0
}
9000d93c:	b003      	add	sp, #12
9000d93e:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d940:	f06f 0002 	mvn.w	r0, #2
}
9000d944:	b003      	add	sp, #12
9000d946:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d948:	f06f 0003 	mvn.w	r0, #3
9000d94c:	e7e7      	b.n	9000d91e <osMessageQueueGet+0x4a>
9000d94e:	bf00      	nop

9000d950 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d950:	4b04      	ldr	r3, [pc, #16]	; (9000d964 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000d952:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d954:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d956:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000d958:	4c03      	ldr	r4, [pc, #12]	; (9000d968 <vApplicationGetIdleTaskMemory+0x18>)
9000d95a:	600c      	str	r4, [r1, #0]
}
9000d95c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d960:	6013      	str	r3, [r2, #0]
}
9000d962:	4770      	bx	lr
9000d964:	2400c024 	.word	0x2400c024
9000d968:	2400be24 	.word	0x2400be24

9000d96c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d96c:	4b05      	ldr	r3, [pc, #20]	; (9000d984 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000d96e:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d970:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d972:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000d976:	4c04      	ldr	r4, [pc, #16]	; (9000d988 <vApplicationGetTimerTaskMemory+0x1c>)
9000d978:	600c      	str	r4, [r1, #0]
}
9000d97a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d97e:	6013      	str	r3, [r2, #0]
}
9000d980:	4770      	bx	lr
9000d982:	bf00      	nop
9000d984:	2400c488 	.word	0x2400c488
9000d988:	2400c088 	.word	0x2400c088

9000d98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d990:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000d992:	f002 f863 	bl	9000fa5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000d996:	4a54      	ldr	r2, [pc, #336]	; (9000dae8 <pvPortMalloc+0x15c>)
9000d998:	6816      	ldr	r6, [r2, #0]
9000d99a:	2e00      	cmp	r6, #0
9000d99c:	d06f      	beq.n	9000da7e <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000d99e:	4b53      	ldr	r3, [pc, #332]	; (9000daec <pvPortMalloc+0x160>)
9000d9a0:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000d9a2:	423d      	tst	r5, r7
9000d9a4:	d12e      	bne.n	9000da04 <pvPortMalloc+0x78>
9000d9a6:	b36d      	cbz	r5, 9000da04 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000d9a8:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000d9ac:	076d      	lsls	r5, r5, #29
9000d9ae:	d002      	beq.n	9000d9b6 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000d9b0:	f024 0407 	bic.w	r4, r4, #7
9000d9b4:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000d9b6:	b32c      	cbz	r4, 9000da04 <pvPortMalloc+0x78>
9000d9b8:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000db04 <pvPortMalloc+0x178>
9000d9bc:	f8dc 5000 	ldr.w	r5, [ip]
9000d9c0:	42a5      	cmp	r5, r4
9000d9c2:	d31f      	bcc.n	9000da04 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000d9c4:	484a      	ldr	r0, [pc, #296]	; (9000daf0 <pvPortMalloc+0x164>)
9000d9c6:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000d9c8:	e003      	b.n	9000d9d2 <pvPortMalloc+0x46>
9000d9ca:	681a      	ldr	r2, [r3, #0]
9000d9cc:	b122      	cbz	r2, 9000d9d8 <pvPortMalloc+0x4c>
9000d9ce:	4618      	mov	r0, r3
9000d9d0:	4613      	mov	r3, r2
9000d9d2:	6859      	ldr	r1, [r3, #4]
9000d9d4:	42a1      	cmp	r1, r4
9000d9d6:	d3f8      	bcc.n	9000d9ca <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000d9d8:	42b3      	cmp	r3, r6
9000d9da:	d013      	beq.n	9000da04 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000d9dc:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d9de:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d9e0:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d9e4:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d9e6:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d9ea:	d929      	bls.n	9000da40 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000d9ec:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000d9ee:	0748      	lsls	r0, r1, #29
9000d9f0:	d00f      	beq.n	9000da12 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000d9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d9f6:	f383 8811 	msr	BASEPRI, r3
9000d9fa:	f3bf 8f6f 	isb	sy
9000d9fe:	f3bf 8f4f 	dsb	sy
9000da02:	e7fe      	b.n	9000da02 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000da04:	f04f 0800 	mov.w	r8, #0
9000da08:	f002 f830 	bl	9000fa6c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000da0c:	4640      	mov	r0, r8
9000da0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000da12:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000da14:	4a36      	ldr	r2, [pc, #216]	; (9000daf0 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000da16:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000da18:	4614      	mov	r4, r2
9000da1a:	6812      	ldr	r2, [r2, #0]
9000da1c:	4291      	cmp	r1, r2
9000da1e:	d8fb      	bhi.n	9000da18 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000da20:	6860      	ldr	r0, [r4, #4]
9000da22:	eb04 0e00 	add.w	lr, r4, r0
9000da26:	4571      	cmp	r1, lr
9000da28:	d04a      	beq.n	9000dac0 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000da2a:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000da2e:	eb01 000e 	add.w	r0, r1, lr
9000da32:	4282      	cmp	r2, r0
9000da34:	d050      	beq.n	9000dad8 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000da36:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da38:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000da3a:	bf18      	it	ne
9000da3c:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000da3e:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000da40:	4a2c      	ldr	r2, [pc, #176]	; (9000daf4 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000da42:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000da44:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000da46:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000da48:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000da4c:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000da4e:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000da52:	bf38      	it	cc
9000da54:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000da56:	4a28      	ldr	r2, [pc, #160]	; (9000daf8 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000da58:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000da5c:	6813      	ldr	r3, [r2, #0]
9000da5e:	3301      	adds	r3, #1
9000da60:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000da62:	f002 f803 	bl	9000fa6c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000da66:	f018 0f07 	tst.w	r8, #7
9000da6a:	d0cf      	beq.n	9000da0c <pvPortMalloc+0x80>
9000da6c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da70:	f383 8811 	msr	BASEPRI, r3
9000da74:	f3bf 8f6f 	isb	sy
9000da78:	f3bf 8f4f 	dsb	sy
9000da7c:	e7fe      	b.n	9000da7c <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000da7e:	4b1f      	ldr	r3, [pc, #124]	; (9000dafc <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000da80:	075e      	lsls	r6, r3, #29
9000da82:	d117      	bne.n	9000dab4 <pvPortMalloc+0x128>
9000da84:	4e1e      	ldr	r6, [pc, #120]	; (9000db00 <pvPortMalloc+0x174>)
9000da86:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000da88:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000da8a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000da8e:	4818      	ldr	r0, [pc, #96]	; (9000daf0 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000da90:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000da94:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000da96:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000da98:	4a16      	ldr	r2, [pc, #88]	; (9000daf4 <pvPortMalloc+0x168>)
9000da9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000da9c:	4a19      	ldr	r2, [pc, #100]	; (9000db04 <pvPortMalloc+0x178>)
9000da9e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000daa0:	4a12      	ldr	r2, [pc, #72]	; (9000daec <pvPortMalloc+0x160>)
9000daa2:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000daa4:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000daa6:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000daaa:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000daae:	e9c1 6300 	strd	r6, r3, [r1]
}
9000dab2:	e776      	b.n	9000d9a2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000dab4:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000dab6:	4e12      	ldr	r6, [pc, #72]	; (9000db00 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000dab8:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000dabc:	460b      	mov	r3, r1
9000dabe:	e7e3      	b.n	9000da88 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000dac0:	6849      	ldr	r1, [r1, #4]
9000dac2:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000dac6:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000daca:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000dace:	428a      	cmp	r2, r1
9000dad0:	d001      	beq.n	9000dad6 <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dad2:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000dad4:	e7b3      	b.n	9000da3e <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000dad6:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000dad8:	42b2      	cmp	r2, r6
9000dada:	d0ac      	beq.n	9000da36 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000dadc:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dade:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000dae0:	4470      	add	r0, lr
9000dae2:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dae4:	e7a7      	b.n	9000da36 <pvPortMalloc+0xaa>
9000dae6:	bf00      	nop
9000dae8:	2400c4e8 	.word	0x2400c4e8
9000daec:	24024b8c 	.word	0x24024b8c
9000daf0:	24024ba0 	.word	0x24024ba0
9000daf4:	24024b94 	.word	0x24024b94
9000daf8:	24024b98 	.word	0x24024b98
9000dafc:	2400c4ec 	.word	0x2400c4ec
9000db00:	24024b8c 	.word	0x24024b8c
9000db04:	24024b90 	.word	0x24024b90

9000db08 <vPortFree>:
	if( pv != NULL )
9000db08:	b1d0      	cbz	r0, 9000db40 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000db0a:	4a2c      	ldr	r2, [pc, #176]	; (9000dbbc <vPortFree+0xb4>)
9000db0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000db10:	6812      	ldr	r2, [r2, #0]
9000db12:	4213      	tst	r3, r2
9000db14:	d00b      	beq.n	9000db2e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000db16:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000db1a:	b191      	cbz	r1, 9000db42 <vPortFree+0x3a>
9000db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db20:	f383 8811 	msr	BASEPRI, r3
9000db24:	f3bf 8f6f 	isb	sy
9000db28:	f3bf 8f4f 	dsb	sy
9000db2c:	e7fe      	b.n	9000db2c <vPortFree+0x24>
9000db2e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db32:	f383 8811 	msr	BASEPRI, r3
9000db36:	f3bf 8f6f 	isb	sy
9000db3a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000db3e:	e7fe      	b.n	9000db3e <vPortFree+0x36>
9000db40:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000db42:	ea23 0302 	bic.w	r3, r3, r2
{
9000db46:	b530      	push	{r4, r5, lr}
9000db48:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000db4a:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000db4e:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db52:	4d1b      	ldr	r5, [pc, #108]	; (9000dbc0 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000db54:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000db56:	f001 ff81 	bl	9000fa5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db5a:	9801      	ldr	r0, [sp, #4]
9000db5c:	682a      	ldr	r2, [r5, #0]
9000db5e:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000db62:	4b18      	ldr	r3, [pc, #96]	; (9000dbc4 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000db64:	440a      	add	r2, r1
9000db66:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000db68:	461a      	mov	r2, r3
9000db6a:	681b      	ldr	r3, [r3, #0]
9000db6c:	429c      	cmp	r4, r3
9000db6e:	d8fb      	bhi.n	9000db68 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000db70:	6850      	ldr	r0, [r2, #4]
9000db72:	eb02 0c00 	add.w	ip, r2, r0
9000db76:	4564      	cmp	r4, ip
9000db78:	d00f      	beq.n	9000db9a <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db7a:	1860      	adds	r0, r4, r1
9000db7c:	4283      	cmp	r3, r0
9000db7e:	d014      	beq.n	9000dbaa <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000db80:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000db82:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000db84:	bf18      	it	ne
9000db86:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000db88:	4a0f      	ldr	r2, [pc, #60]	; (9000dbc8 <vPortFree+0xc0>)
9000db8a:	6813      	ldr	r3, [r2, #0]
9000db8c:	3301      	adds	r3, #1
9000db8e:	6013      	str	r3, [r2, #0]
}
9000db90:	b003      	add	sp, #12
9000db92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000db96:	f001 bf69 	b.w	9000fa6c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000db9a:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000db9c:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000db9e:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000dba0:	4283      	cmp	r3, r0
9000dba2:	d001      	beq.n	9000dba8 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dba4:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000dba6:	e7ef      	b.n	9000db88 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000dba8:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000dbaa:	4808      	ldr	r0, [pc, #32]	; (9000dbcc <vPortFree+0xc4>)
9000dbac:	6800      	ldr	r0, [r0, #0]
9000dbae:	4283      	cmp	r3, r0
9000dbb0:	d0e6      	beq.n	9000db80 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dbb2:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000dbb6:	4401      	add	r1, r0
9000dbb8:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dbba:	e7e1      	b.n	9000db80 <vPortFree+0x78>
9000dbbc:	24024b8c 	.word	0x24024b8c
9000dbc0:	24024b90 	.word	0x24024b90
9000dbc4:	24024ba0 	.word	0x24024ba0
9000dbc8:	24024b9c 	.word	0x24024b9c
9000dbcc:	2400c4e8 	.word	0x2400c4e8

9000dbd0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000dbd0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000dbd4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000dbd8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000dbda:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000dbdc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000dbde:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000dbe0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000dbe4:	4770      	bx	lr
9000dbe6:	bf00      	nop

9000dbe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000dbe8:	2300      	movs	r3, #0
9000dbea:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000dbec:	4770      	bx	lr
9000dbee:	bf00      	nop

9000dbf0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000dbf0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000dbf2:	6802      	ldr	r2, [r0, #0]
{
9000dbf4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000dbf6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000dbf8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000dbfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000dbfc:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000dbfe:	689c      	ldr	r4, [r3, #8]
9000dc00:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000dc02:	6099      	str	r1, [r3, #8]
}
9000dc04:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000dc08:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000dc0a:	6002      	str	r2, [r0, #0]
}
9000dc0c:	4770      	bx	lr
9000dc0e:	bf00      	nop

9000dc10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000dc10:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000dc12:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000dc14:	1c6b      	adds	r3, r5, #1
9000dc16:	d010      	beq.n	9000dc3a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000dc18:	f100 0308 	add.w	r3, r0, #8
9000dc1c:	461c      	mov	r4, r3
9000dc1e:	685b      	ldr	r3, [r3, #4]
9000dc20:	681a      	ldr	r2, [r3, #0]
9000dc22:	42aa      	cmp	r2, r5
9000dc24:	d9fa      	bls.n	9000dc1c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000dc26:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000dc28:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000dc2a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000dc2c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000dc2e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000dc30:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000dc32:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000dc34:	6002      	str	r2, [r0, #0]
}
9000dc36:	bc30      	pop	{r4, r5}
9000dc38:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000dc3a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000dc3c:	6863      	ldr	r3, [r4, #4]
9000dc3e:	e7f2      	b.n	9000dc26 <vListInsert+0x16>

9000dc40 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000dc40:	6903      	ldr	r3, [r0, #16]
{
9000dc42:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000dc44:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000dc46:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000dc4a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000dc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000dc50:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000dc52:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000dc54:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000dc58:	bf08      	it	eq
9000dc5a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000dc5c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000dc5e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000dc60:	3a01      	subs	r2, #1
9000dc62:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000dc64:	6818      	ldr	r0, [r3, #0]
}
9000dc66:	4770      	bx	lr

9000dc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000dc68:	4808      	ldr	r0, [pc, #32]	; (9000dc8c <prvPortStartFirstTask+0x24>)
9000dc6a:	6800      	ldr	r0, [r0, #0]
9000dc6c:	6800      	ldr	r0, [r0, #0]
9000dc6e:	f380 8808 	msr	MSP, r0
9000dc72:	f04f 0000 	mov.w	r0, #0
9000dc76:	f380 8814 	msr	CONTROL, r0
9000dc7a:	b662      	cpsie	i
9000dc7c:	b661      	cpsie	f
9000dc7e:	f3bf 8f4f 	dsb	sy
9000dc82:	f3bf 8f6f 	isb	sy
9000dc86:	df00      	svc	0
9000dc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000dc8a:	0000      	.short	0x0000
9000dc8c:	e000ed08 	.word	0xe000ed08

9000dc90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000dc90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000dca0 <vPortEnableVFP+0x10>
9000dc94:	6801      	ldr	r1, [r0, #0]
9000dc96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000dc9a:	6001      	str	r1, [r0, #0]
9000dc9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000dc9e:	0000      	.short	0x0000
9000dca0:	e000ed88 	.word	0xe000ed88

9000dca4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000dca4:	4b0e      	ldr	r3, [pc, #56]	; (9000dce0 <prvTaskExitError+0x3c>)
{
9000dca6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000dca8:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000dcaa:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000dcac:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000dcae:	3301      	adds	r3, #1
9000dcb0:	d008      	beq.n	9000dcc4 <prvTaskExitError+0x20>
9000dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcb6:	f383 8811 	msr	BASEPRI, r3
9000dcba:	f3bf 8f6f 	isb	sy
9000dcbe:	f3bf 8f4f 	dsb	sy
9000dcc2:	e7fe      	b.n	9000dcc2 <prvTaskExitError+0x1e>
9000dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcc8:	f383 8811 	msr	BASEPRI, r3
9000dccc:	f3bf 8f6f 	isb	sy
9000dcd0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000dcd4:	9b01      	ldr	r3, [sp, #4]
9000dcd6:	2b00      	cmp	r3, #0
9000dcd8:	d0fc      	beq.n	9000dcd4 <prvTaskExitError+0x30>
}
9000dcda:	b002      	add	sp, #8
9000dcdc:	4770      	bx	lr
9000dcde:	bf00      	nop
9000dce0:	24000064 	.word	0x24000064

9000dce4 <pxPortInitialiseStack>:
{
9000dce4:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dce6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dcea:	4809      	ldr	r0, [pc, #36]	; (9000dd10 <pxPortInitialiseStack+0x2c>)
{
9000dcec:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000dcee:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dcf2:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000dcf6:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000dcfa:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dcfe:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dd02:	f06f 0102 	mvn.w	r1, #2
}
9000dd06:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dd0a:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000dd0e:	4770      	bx	lr
9000dd10:	9000dca5 	.word	0x9000dca5
	...

9000dd20 <SVC_Handler>:
	__asm volatile (
9000dd20:	4b07      	ldr	r3, [pc, #28]	; (9000dd40 <pxCurrentTCBConst2>)
9000dd22:	6819      	ldr	r1, [r3, #0]
9000dd24:	6808      	ldr	r0, [r1, #0]
9000dd26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dd2a:	f380 8809 	msr	PSP, r0
9000dd2e:	f3bf 8f6f 	isb	sy
9000dd32:	f04f 0000 	mov.w	r0, #0
9000dd36:	f380 8811 	msr	BASEPRI, r0
9000dd3a:	4770      	bx	lr
9000dd3c:	f3af 8000 	nop.w

9000dd40 <pxCurrentTCBConst2>:
9000dd40:	24024bf0 	.word	0x24024bf0

9000dd44 <vPortEnterCritical>:
9000dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd48:	f383 8811 	msr	BASEPRI, r3
9000dd4c:	f3bf 8f6f 	isb	sy
9000dd50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000dd54:	4a0b      	ldr	r2, [pc, #44]	; (9000dd84 <vPortEnterCritical+0x40>)
9000dd56:	6813      	ldr	r3, [r2, #0]
9000dd58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000dd5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000dd5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000dd5e:	d000      	beq.n	9000dd62 <vPortEnterCritical+0x1e>
}
9000dd60:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000dd62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dd66:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000dd6a:	b2db      	uxtb	r3, r3
9000dd6c:	2b00      	cmp	r3, #0
9000dd6e:	d0f7      	beq.n	9000dd60 <vPortEnterCritical+0x1c>
9000dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd74:	f383 8811 	msr	BASEPRI, r3
9000dd78:	f3bf 8f6f 	isb	sy
9000dd7c:	f3bf 8f4f 	dsb	sy
9000dd80:	e7fe      	b.n	9000dd80 <vPortEnterCritical+0x3c>
9000dd82:	bf00      	nop
9000dd84:	24000064 	.word	0x24000064

9000dd88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000dd88:	4a08      	ldr	r2, [pc, #32]	; (9000ddac <vPortExitCritical+0x24>)
9000dd8a:	6813      	ldr	r3, [r2, #0]
9000dd8c:	b943      	cbnz	r3, 9000dda0 <vPortExitCritical+0x18>
9000dd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd92:	f383 8811 	msr	BASEPRI, r3
9000dd96:	f3bf 8f6f 	isb	sy
9000dd9a:	f3bf 8f4f 	dsb	sy
9000dd9e:	e7fe      	b.n	9000dd9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000dda0:	3b01      	subs	r3, #1
9000dda2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000dda4:	b90b      	cbnz	r3, 9000ddaa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000dda6:	f383 8811 	msr	BASEPRI, r3
}
9000ddaa:	4770      	bx	lr
9000ddac:	24000064 	.word	0x24000064

9000ddb0 <PendSV_Handler>:
	__asm volatile
9000ddb0:	f3ef 8009 	mrs	r0, PSP
9000ddb4:	f3bf 8f6f 	isb	sy
9000ddb8:	4b15      	ldr	r3, [pc, #84]	; (9000de10 <pxCurrentTCBConst>)
9000ddba:	681a      	ldr	r2, [r3, #0]
9000ddbc:	f01e 0f10 	tst.w	lr, #16
9000ddc0:	bf08      	it	eq
9000ddc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000ddc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ddca:	6010      	str	r0, [r2, #0]
9000ddcc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000ddd0:	f04f 0050 	mov.w	r0, #80	; 0x50
9000ddd4:	f380 8811 	msr	BASEPRI, r0
9000ddd8:	f3bf 8f4f 	dsb	sy
9000dddc:	f3bf 8f6f 	isb	sy
9000dde0:	f001 fe80 	bl	9000fae4 <vTaskSwitchContext>
9000dde4:	f04f 0000 	mov.w	r0, #0
9000dde8:	f380 8811 	msr	BASEPRI, r0
9000ddec:	bc09      	pop	{r0, r3}
9000ddee:	6819      	ldr	r1, [r3, #0]
9000ddf0:	6808      	ldr	r0, [r1, #0]
9000ddf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ddf6:	f01e 0f10 	tst.w	lr, #16
9000ddfa:	bf08      	it	eq
9000ddfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000de00:	f380 8809 	msr	PSP, r0
9000de04:	f3bf 8f6f 	isb	sy
9000de08:	4770      	bx	lr
9000de0a:	bf00      	nop
9000de0c:	f3af 8000 	nop.w

9000de10 <pxCurrentTCBConst>:
9000de10:	24024bf0 	.word	0x24024bf0

9000de14 <xPortSysTickHandler>:
{
9000de14:	b508      	push	{r3, lr}
	__asm volatile
9000de16:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de1a:	f383 8811 	msr	BASEPRI, r3
9000de1e:	f3bf 8f6f 	isb	sy
9000de22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000de26:	f001 fe37 	bl	9000fa98 <xTaskIncrementTick>
9000de2a:	b128      	cbz	r0, 9000de38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000de2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000de34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000de38:	2300      	movs	r3, #0
9000de3a:	f383 8811 	msr	BASEPRI, r3
}
9000de3e:	bd08      	pop	{r3, pc}

9000de40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000de40:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000de44:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000de46:	4806      	ldr	r0, [pc, #24]	; (9000de60 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000de48:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000de4a:	4906      	ldr	r1, [pc, #24]	; (9000de64 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000de4c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000de4e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000de50:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000de52:	fba1 1303 	umull	r1, r3, r1, r3
9000de56:	099b      	lsrs	r3, r3, #6
9000de58:	3b01      	subs	r3, #1
9000de5a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000de5c:	6110      	str	r0, [r2, #16]
}
9000de5e:	4770      	bx	lr
9000de60:	24000054 	.word	0x24000054
9000de64:	10624dd3 	.word	0x10624dd3

9000de68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000de68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000de6c:	4a48      	ldr	r2, [pc, #288]	; (9000df90 <xPortStartScheduler+0x128>)
9000de6e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000de72:	4291      	cmp	r1, r2
9000de74:	d041      	beq.n	9000defa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000de76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000de7a:	4b46      	ldr	r3, [pc, #280]	; (9000df94 <xPortStartScheduler+0x12c>)
9000de7c:	429a      	cmp	r2, r3
9000de7e:	d033      	beq.n	9000dee8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de80:	4b45      	ldr	r3, [pc, #276]	; (9000df98 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000de82:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000de84:	4945      	ldr	r1, [pc, #276]	; (9000df9c <xPortStartScheduler+0x134>)
{
9000de86:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de88:	781a      	ldrb	r2, [r3, #0]
{
9000de8a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de8c:	4c44      	ldr	r4, [pc, #272]	; (9000dfa0 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000de8e:	b2d2      	uxtb	r2, r2
9000de90:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de92:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000de94:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000de96:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000de98:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000de9a:	b2db      	uxtb	r3, r3
9000de9c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000dea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000dea4:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000dea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000deac:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000deae:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000deb0:	d511      	bpl.n	9000ded6 <xPortStartScheduler+0x6e>
9000deb2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000deb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000deb8:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000deba:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000debc:	005b      	lsls	r3, r3, #1
9000debe:	b2db      	uxtb	r3, r3
9000dec0:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000dec4:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000dec8:	0609      	lsls	r1, r1, #24
9000deca:	d4f3      	bmi.n	9000deb4 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000decc:	2803      	cmp	r0, #3
9000dece:	6020      	str	r0, [r4, #0]
9000ded0:	f88d 3007 	strb.w	r3, [sp, #7]
9000ded4:	d01a      	beq.n	9000df0c <xPortStartScheduler+0xa4>
	__asm volatile
9000ded6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000deda:	f383 8811 	msr	BASEPRI, r3
9000dede:	f3bf 8f6f 	isb	sy
9000dee2:	f3bf 8f4f 	dsb	sy
9000dee6:	e7fe      	b.n	9000dee6 <xPortStartScheduler+0x7e>
9000dee8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000deec:	f383 8811 	msr	BASEPRI, r3
9000def0:	f3bf 8f6f 	isb	sy
9000def4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000def8:	e7fe      	b.n	9000def8 <xPortStartScheduler+0x90>
9000defa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000defe:	f383 8811 	msr	BASEPRI, r3
9000df02:	f3bf 8f6f 	isb	sy
9000df06:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000df0a:	e7fe      	b.n	9000df0a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000df0c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000df0e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000df12:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000df16:	4a20      	ldr	r2, [pc, #128]	; (9000df98 <xPortStartScheduler+0x130>)
9000df18:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000df1a:	4e22      	ldr	r6, [pc, #136]	; (9000dfa4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000df1c:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000df1e:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000df20:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000df22:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000df26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000df2a:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000df2e:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000df32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000df36:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000df3a:	f7ff ff81 	bl	9000de40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000df3e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000df40:	f7ff fea6 	bl	9000dc90 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000df44:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000df48:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000df4c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000df50:	f7ff fe8a 	bl	9000dc68 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000df54:	f001 fdc6 	bl	9000fae4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000df58:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000df5a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000df5c:	3301      	adds	r3, #1
9000df5e:	d008      	beq.n	9000df72 <xPortStartScheduler+0x10a>
9000df60:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df64:	f383 8811 	msr	BASEPRI, r3
9000df68:	f3bf 8f6f 	isb	sy
9000df6c:	f3bf 8f4f 	dsb	sy
9000df70:	e7fe      	b.n	9000df70 <xPortStartScheduler+0x108>
9000df72:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df76:	f383 8811 	msr	BASEPRI, r3
9000df7a:	f3bf 8f6f 	isb	sy
9000df7e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000df82:	9b03      	ldr	r3, [sp, #12]
9000df84:	2b00      	cmp	r3, #0
9000df86:	d0fc      	beq.n	9000df82 <xPortStartScheduler+0x11a>
}
9000df88:	2000      	movs	r0, #0
9000df8a:	b004      	add	sp, #16
9000df8c:	bd70      	pop	{r4, r5, r6, pc}
9000df8e:	bf00      	nop
9000df90:	410fc271 	.word	0x410fc271
9000df94:	410fc270 	.word	0x410fc270
9000df98:	e000e400 	.word	0xe000e400
9000df9c:	24024ba8 	.word	0x24024ba8
9000dfa0:	24024bac 	.word	0x24024bac
9000dfa4:	24000064 	.word	0x24000064

9000dfa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000dfa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000dfac:	2b0f      	cmp	r3, #15
9000dfae:	d90e      	bls.n	9000dfce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000dfb0:	4911      	ldr	r1, [pc, #68]	; (9000dff8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000dfb2:	4a12      	ldr	r2, [pc, #72]	; (9000dffc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000dfb4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000dfb6:	7812      	ldrb	r2, [r2, #0]
9000dfb8:	429a      	cmp	r2, r3
9000dfba:	d908      	bls.n	9000dfce <vPortValidateInterruptPriority+0x26>
9000dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfc0:	f383 8811 	msr	BASEPRI, r3
9000dfc4:	f3bf 8f6f 	isb	sy
9000dfc8:	f3bf 8f4f 	dsb	sy
9000dfcc:	e7fe      	b.n	9000dfcc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000dfce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dfd2:	4a0b      	ldr	r2, [pc, #44]	; (9000e000 <vPortValidateInterruptPriority+0x58>)
9000dfd4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000dfd8:	6812      	ldr	r2, [r2, #0]
9000dfda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000dfde:	4293      	cmp	r3, r2
9000dfe0:	d908      	bls.n	9000dff4 <vPortValidateInterruptPriority+0x4c>
9000dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfe6:	f383 8811 	msr	BASEPRI, r3
9000dfea:	f3bf 8f6f 	isb	sy
9000dfee:	f3bf 8f4f 	dsb	sy
9000dff2:	e7fe      	b.n	9000dff2 <vPortValidateInterruptPriority+0x4a>
	}
9000dff4:	4770      	bx	lr
9000dff6:	bf00      	nop
9000dff8:	e000e3f0 	.word	0xe000e3f0
9000dffc:	24024ba8 	.word	0x24024ba8
9000e000:	24024bac 	.word	0x24024bac

9000e004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000e004:	b570      	push	{r4, r5, r6, lr}
9000e006:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000e008:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000e00a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e00c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000e00e:	b92a      	cbnz	r2, 9000e01c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e010:	6805      	ldr	r5, [r0, #0]
9000e012:	b365      	cbz	r5, 9000e06e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e014:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e016:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e018:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000e01a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000e01c:	b97d      	cbnz	r5, 9000e03e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e01e:	6840      	ldr	r0, [r0, #4]
9000e020:	f015 fab1 	bl	90023586 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e024:	6863      	ldr	r3, [r4, #4]
9000e026:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e028:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e02a:	68a2      	ldr	r2, [r4, #8]
9000e02c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e02e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e030:	d319      	bcc.n	9000e066 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000e032:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e034:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e036:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000e038:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e03a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e03c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000e03e:	68c0      	ldr	r0, [r0, #12]
9000e040:	f015 faa1 	bl	90023586 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e044:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e046:	68e3      	ldr	r3, [r4, #12]
9000e048:	4251      	negs	r1, r2
9000e04a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e04c:	6822      	ldr	r2, [r4, #0]
9000e04e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e050:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e052:	d202      	bcs.n	9000e05a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000e054:	68a3      	ldr	r3, [r4, #8]
9000e056:	440b      	add	r3, r1
9000e058:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000e05a:	2d02      	cmp	r5, #2
9000e05c:	d00d      	beq.n	9000e07a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e05e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e060:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e062:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e064:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e066:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000e068:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e06a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000e06c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e06e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e070:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e072:	f001 ff1f 	bl	9000feb4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000e076:	60a5      	str	r5, [r4, #8]
9000e078:	e7ce      	b.n	9000e018 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e07a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000e07c:	f04f 0000 	mov.w	r0, #0
9000e080:	bf38      	it	cc
9000e082:	2601      	movcc	r6, #1
9000e084:	e7c8      	b.n	9000e018 <prvCopyDataToQueue+0x14>
9000e086:	bf00      	nop

9000e088 <xQueueGenericCreateStatic>:
	{
9000e088:	b530      	push	{r4, r5, lr}
9000e08a:	b083      	sub	sp, #12
9000e08c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e090:	b940      	cbnz	r0, 9000e0a4 <xQueueGenericCreateStatic+0x1c>
9000e092:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e096:	f383 8811 	msr	BASEPRI, r3
9000e09a:	f3bf 8f6f 	isb	sy
9000e09e:	f3bf 8f4f 	dsb	sy
9000e0a2:	e7fe      	b.n	9000e0a2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000e0a4:	461d      	mov	r5, r3
9000e0a6:	b153      	cbz	r3, 9000e0be <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000e0a8:	b30a      	cbz	r2, 9000e0ee <xQueueGenericCreateStatic+0x66>
9000e0aa:	b989      	cbnz	r1, 9000e0d0 <xQueueGenericCreateStatic+0x48>
9000e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0b0:	f383 8811 	msr	BASEPRI, r3
9000e0b4:	f3bf 8f6f 	isb	sy
9000e0b8:	f3bf 8f4f 	dsb	sy
9000e0bc:	e7fe      	b.n	9000e0bc <xQueueGenericCreateStatic+0x34>
9000e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0c2:	f383 8811 	msr	BASEPRI, r3
9000e0c6:	f3bf 8f6f 	isb	sy
9000e0ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e0ce:	e7fe      	b.n	9000e0ce <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e0d0:	b16a      	cbz	r2, 9000e0ee <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e0d2:	2350      	movs	r3, #80	; 0x50
9000e0d4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e0d6:	9b01      	ldr	r3, [sp, #4]
9000e0d8:	2b50      	cmp	r3, #80	; 0x50
9000e0da:	d013      	beq.n	9000e104 <xQueueGenericCreateStatic+0x7c>
9000e0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0e0:	f383 8811 	msr	BASEPRI, r3
9000e0e4:	f3bf 8f6f 	isb	sy
9000e0e8:	f3bf 8f4f 	dsb	sy
9000e0ec:	e7fe      	b.n	9000e0ec <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e0ee:	2900      	cmp	r1, #0
9000e0f0:	d0ef      	beq.n	9000e0d2 <xQueueGenericCreateStatic+0x4a>
9000e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0f6:	f383 8811 	msr	BASEPRI, r3
9000e0fa:	f3bf 8f6f 	isb	sy
9000e0fe:	f3bf 8f4f 	dsb	sy
9000e102:	e7fe      	b.n	9000e102 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e104:	2900      	cmp	r1, #0
9000e106:	bf08      	it	eq
9000e108:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000e10a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000e10c:	6429      	str	r1, [r5, #64]	; 0x40
9000e10e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e110:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e112:	2201      	movs	r2, #1
9000e114:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000e118:	f7ff fe14 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e11c:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e11e:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e120:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e122:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e124:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000e128:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e12c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e12e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e130:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e132:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e134:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e136:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e13a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e13c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e140:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e144:	f7ff fd44 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e148:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e14c:	f7ff fd40 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e150:	f7ff fe1a 	bl	9000dd88 <vPortExitCritical>
	}
9000e154:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e156:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000e15a:	b003      	add	sp, #12
9000e15c:	bd30      	pop	{r4, r5, pc}
9000e15e:	bf00      	nop

9000e160 <xQueueGenericCreate>:
	{
9000e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e162:	b940      	cbnz	r0, 9000e176 <xQueueGenericCreate+0x16>
9000e164:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e168:	f383 8811 	msr	BASEPRI, r3
9000e16c:	f3bf 8f6f 	isb	sy
9000e170:	f3bf 8f4f 	dsb	sy
9000e174:	e7fe      	b.n	9000e174 <xQueueGenericCreate+0x14>
9000e176:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e178:	fb01 f000 	mul.w	r0, r1, r0
9000e17c:	460e      	mov	r6, r1
9000e17e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e180:	3050      	adds	r0, #80	; 0x50
9000e182:	f7ff fc03 	bl	9000d98c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e186:	4604      	mov	r4, r0
9000e188:	b340      	cbz	r0, 9000e1dc <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e18a:	2300      	movs	r3, #0
9000e18c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e190:	b336      	cbz	r6, 9000e1e0 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e192:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000e196:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000e198:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e19c:	f7ff fdd2 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1a0:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e1a2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e1a6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1a8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000e1ac:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1b0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1b2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1b4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1b6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e1b8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000e1ba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e1bc:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e1be:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000e1c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e1c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e1c8:	f7ff fd02 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e1cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e1d0:	f7ff fcfe 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e1d4:	f7ff fdd8 	bl	9000dd88 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e1d8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000e1dc:	4620      	mov	r0, r4
9000e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000e1e0:	4603      	mov	r3, r0
9000e1e2:	e7d8      	b.n	9000e196 <xQueueGenericCreate+0x36>

9000e1e4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000e1e4:	b940      	cbnz	r0, 9000e1f8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000e1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1ea:	f383 8811 	msr	BASEPRI, r3
9000e1ee:	f3bf 8f6f 	isb	sy
9000e1f2:	f3bf 8f4f 	dsb	sy
9000e1f6:	e7fe      	b.n	9000e1f6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e1f8:	4288      	cmp	r0, r1
9000e1fa:	d208      	bcs.n	9000e20e <xQueueCreateCountingSemaphoreStatic+0x2a>
9000e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e200:	f383 8811 	msr	BASEPRI, r3
9000e204:	f3bf 8f6f 	isb	sy
9000e208:	f3bf 8f4f 	dsb	sy
9000e20c:	e7fe      	b.n	9000e20c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000e20e:	b530      	push	{r4, r5, lr}
9000e210:	4615      	mov	r5, r2
9000e212:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000e214:	2a00      	cmp	r2, #0
9000e216:	d03d      	beq.n	9000e294 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e218:	2350      	movs	r3, #80	; 0x50
9000e21a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e21c:	9b03      	ldr	r3, [sp, #12]
9000e21e:	2b50      	cmp	r3, #80	; 0x50
9000e220:	d008      	beq.n	9000e234 <xQueueCreateCountingSemaphoreStatic+0x50>
9000e222:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e226:	f383 8811 	msr	BASEPRI, r3
9000e22a:	f3bf 8f6f 	isb	sy
9000e22e:	f3bf 8f4f 	dsb	sy
9000e232:	e7fe      	b.n	9000e232 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000e234:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e236:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e238:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e23a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e23c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e240:	6414      	str	r4, [r2, #64]	; 0x40
9000e242:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e244:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000e246:	f7ff fd7d 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e24a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e24c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e24e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e250:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000e254:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e258:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e25c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e25e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e260:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e262:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e264:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e268:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e26c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e270:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e274:	f7ff fcac 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e278:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e27c:	f7ff fca8 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e280:	f7ff fd82 	bl	9000dd88 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e284:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e286:	9901      	ldr	r1, [sp, #4]
	}
9000e288:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e28a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e28e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000e290:	b005      	add	sp, #20
9000e292:	bd30      	pop	{r4, r5, pc}
9000e294:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e298:	f383 8811 	msr	BASEPRI, r3
9000e29c:	f3bf 8f6f 	isb	sy
9000e2a0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e2a4:	e7fe      	b.n	9000e2a4 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000e2a6:	bf00      	nop

9000e2a8 <xQueueCreateCountingSemaphore>:
	{
9000e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000e2aa:	b940      	cbnz	r0, 9000e2be <xQueueCreateCountingSemaphore+0x16>
9000e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e2b0:	f383 8811 	msr	BASEPRI, r3
9000e2b4:	f3bf 8f6f 	isb	sy
9000e2b8:	f3bf 8f4f 	dsb	sy
9000e2bc:	e7fe      	b.n	9000e2bc <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e2be:	4288      	cmp	r0, r1
9000e2c0:	4604      	mov	r4, r0
9000e2c2:	460e      	mov	r6, r1
9000e2c4:	d208      	bcs.n	9000e2d8 <xQueueCreateCountingSemaphore+0x30>
9000e2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e2ca:	f383 8811 	msr	BASEPRI, r3
9000e2ce:	f3bf 8f6f 	isb	sy
9000e2d2:	f3bf 8f4f 	dsb	sy
9000e2d6:	e7fe      	b.n	9000e2d6 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e2d8:	2050      	movs	r0, #80	; 0x50
9000e2da:	f7ff fb57 	bl	9000d98c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e2de:	4605      	mov	r5, r0
9000e2e0:	b330      	cbz	r0, 9000e330 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e2e2:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e2e4:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e2e6:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e2e8:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e2ec:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000e2ee:	f7ff fd29 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2f2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e2f4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e2f6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e2fa:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e2fc:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000e300:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e304:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e306:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e308:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e30a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e30c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e30e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e310:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e314:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e318:	f7ff fc5a 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e31c:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e320:	f7ff fc56 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e324:	f7ff fd30 	bl	9000dd88 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e328:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e32a:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000e32c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000e330:	4628      	mov	r0, r5
9000e332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000e334 <xQueueGenericSend>:
{
9000e334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000e338:	b084      	sub	sp, #16
9000e33a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000e33c:	2800      	cmp	r0, #0
9000e33e:	f000 8103 	beq.w	9000e548 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e342:	4688      	mov	r8, r1
9000e344:	4604      	mov	r4, r0
9000e346:	461f      	mov	r7, r3
9000e348:	2900      	cmp	r1, #0
9000e34a:	f000 8097 	beq.w	9000e47c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e34e:	2f02      	cmp	r7, #2
9000e350:	d10b      	bne.n	9000e36a <xQueueGenericSend+0x36>
9000e352:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e354:	2b01      	cmp	r3, #1
9000e356:	d008      	beq.n	9000e36a <xQueueGenericSend+0x36>
9000e358:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e35c:	f383 8811 	msr	BASEPRI, r3
9000e360:	f3bf 8f6f 	isb	sy
9000e364:	f3bf 8f4f 	dsb	sy
9000e368:	e7fe      	b.n	9000e368 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e36a:	f001 fd4d 	bl	9000fe08 <xTaskGetSchedulerState>
9000e36e:	2800      	cmp	r0, #0
9000e370:	f000 80f3 	beq.w	9000e55a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e374:	f1a7 0902 	sub.w	r9, r7, #2
9000e378:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e37a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e37e:	fab9 f989 	clz	r9, r9
9000e382:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000e386:	f7ff fcdd 	bl	9000dd44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e38a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e38c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e38e:	429a      	cmp	r2, r3
9000e390:	f0c0 80f0 	bcc.w	9000e574 <xQueueGenericSend+0x240>
9000e394:	f1b9 0f00 	cmp.w	r9, #0
9000e398:	f040 80ec 	bne.w	9000e574 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e39c:	9b01      	ldr	r3, [sp, #4]
9000e39e:	2b00      	cmp	r3, #0
9000e3a0:	f000 8101 	beq.w	9000e5a6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000e3a4:	2d00      	cmp	r5, #0
9000e3a6:	f000 80cb 	beq.w	9000e540 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000e3aa:	f7ff fced 	bl	9000dd88 <vPortExitCritical>
		vTaskSuspendAll();
9000e3ae:	f001 fb55 	bl	9000fa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e3b2:	f7ff fcc7 	bl	9000dd44 <vPortEnterCritical>
9000e3b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e3ba:	2bff      	cmp	r3, #255	; 0xff
9000e3bc:	d102      	bne.n	9000e3c4 <xQueueGenericSend+0x90>
9000e3be:	2300      	movs	r3, #0
9000e3c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e3c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e3c8:	2bff      	cmp	r3, #255	; 0xff
9000e3ca:	d102      	bne.n	9000e3d2 <xQueueGenericSend+0x9e>
9000e3cc:	2300      	movs	r3, #0
9000e3ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e3d2:	f7ff fcd9 	bl	9000dd88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e3d6:	a901      	add	r1, sp, #4
9000e3d8:	a802      	add	r0, sp, #8
9000e3da:	f001 fcc1 	bl	9000fd60 <xTaskCheckForTimeOut>
9000e3de:	2800      	cmp	r0, #0
9000e3e0:	f040 80e5 	bne.w	9000e5ae <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000e3e4:	f7ff fcae 	bl	9000dd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000e3e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e3ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e3ec:	429a      	cmp	r2, r3
9000e3ee:	d052      	beq.n	9000e496 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000e3f0:	f7ff fcca 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e3f4:	f7ff fca6 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e3f8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000e3fc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3fe:	2d00      	cmp	r5, #0
9000e400:	dc04      	bgt.n	9000e40c <xQueueGenericSend+0xd8>
9000e402:	e011      	b.n	9000e428 <xQueueGenericSend+0xf4>
			--cTxLock;
9000e404:	1e6a      	subs	r2, r5, #1
9000e406:	b2d3      	uxtb	r3, r2
9000e408:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e40a:	b16b      	cbz	r3, 9000e428 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e40e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e410:	b153      	cbz	r3, 9000e428 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e412:	f001 fc4f 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e416:	2800      	cmp	r0, #0
9000e418:	d0f4      	beq.n	9000e404 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000e41a:	f001 fce9 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000e41e:	1e6a      	subs	r2, r5, #1
9000e420:	b2d3      	uxtb	r3, r2
9000e422:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e424:	2b00      	cmp	r3, #0
9000e426:	d1f1      	bne.n	9000e40c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000e428:	23ff      	movs	r3, #255	; 0xff
9000e42a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e42e:	f7ff fcab 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e432:	f7ff fc87 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e436:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000e43a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e43c:	2d00      	cmp	r5, #0
9000e43e:	dd14      	ble.n	9000e46a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e440:	f104 0a10 	add.w	sl, r4, #16
9000e444:	e003      	b.n	9000e44e <xQueueGenericSend+0x11a>
				--cRxLock;
9000e446:	1e6a      	subs	r2, r5, #1
9000e448:	b2d3      	uxtb	r3, r2
9000e44a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e44c:	b16b      	cbz	r3, 9000e46a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e44e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e450:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e452:	b153      	cbz	r3, 9000e46a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e454:	f001 fc2e 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e458:	2800      	cmp	r0, #0
9000e45a:	d0f4      	beq.n	9000e446 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000e45c:	f001 fcc8 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000e460:	1e6a      	subs	r2, r5, #1
9000e462:	b2d3      	uxtb	r3, r2
9000e464:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e466:	2b00      	cmp	r3, #0
9000e468:	d1f1      	bne.n	9000e44e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000e46a:	23ff      	movs	r3, #255	; 0xff
9000e46c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e470:	f7ff fc8a 	bl	9000dd88 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e474:	f001 fafa 	bl	9000fa6c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e478:	2501      	movs	r5, #1
9000e47a:	e784      	b.n	9000e386 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e47c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e47e:	2b00      	cmp	r3, #0
9000e480:	f43f af65 	beq.w	9000e34e <xQueueGenericSend+0x1a>
9000e484:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e488:	f383 8811 	msr	BASEPRI, r3
9000e48c:	f3bf 8f6f 	isb	sy
9000e490:	f3bf 8f4f 	dsb	sy
9000e494:	e7fe      	b.n	9000e494 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e496:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000e49a:	f7ff fc75 	bl	9000dd88 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e49e:	9901      	ldr	r1, [sp, #4]
9000e4a0:	4650      	mov	r0, sl
9000e4a2:	f001 fb79 	bl	9000fb98 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000e4a6:	f7ff fc4d 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e4aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e4ae:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e4b0:	2d00      	cmp	r5, #0
9000e4b2:	dc04      	bgt.n	9000e4be <xQueueGenericSend+0x18a>
9000e4b4:	e011      	b.n	9000e4da <xQueueGenericSend+0x1a6>
			--cTxLock;
9000e4b6:	1e6b      	subs	r3, r5, #1
9000e4b8:	b2da      	uxtb	r2, r3
9000e4ba:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e4bc:	b16a      	cbz	r2, 9000e4da <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e4c0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e4c2:	b153      	cbz	r3, 9000e4da <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e4c4:	f001 fbf6 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e4c8:	2800      	cmp	r0, #0
9000e4ca:	d0f4      	beq.n	9000e4b6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000e4cc:	f001 fc90 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000e4d0:	1e6b      	subs	r3, r5, #1
9000e4d2:	b2da      	uxtb	r2, r3
9000e4d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e4d6:	2a00      	cmp	r2, #0
9000e4d8:	d1f1      	bne.n	9000e4be <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000e4da:	23ff      	movs	r3, #255	; 0xff
9000e4dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e4e0:	f7ff fc52 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e4e4:	f7ff fc2e 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e4e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e4ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e4ee:	2d00      	cmp	r5, #0
9000e4f0:	dc04      	bgt.n	9000e4fc <xQueueGenericSend+0x1c8>
9000e4f2:	e011      	b.n	9000e518 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000e4f4:	1e6b      	subs	r3, r5, #1
9000e4f6:	b2da      	uxtb	r2, r3
9000e4f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e4fa:	b16a      	cbz	r2, 9000e518 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e4fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e4fe:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e500:	b153      	cbz	r3, 9000e518 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e502:	f001 fbd7 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e506:	2800      	cmp	r0, #0
9000e508:	d0f4      	beq.n	9000e4f4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000e50a:	f001 fc71 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000e50e:	1e6b      	subs	r3, r5, #1
9000e510:	b2da      	uxtb	r2, r3
9000e512:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e514:	2a00      	cmp	r2, #0
9000e516:	d1f1      	bne.n	9000e4fc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e518:	23ff      	movs	r3, #255	; 0xff
9000e51a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e51e:	f7ff fc33 	bl	9000dd88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000e522:	f001 faa3 	bl	9000fa6c <xTaskResumeAll>
9000e526:	2800      	cmp	r0, #0
9000e528:	d1a6      	bne.n	9000e478 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000e52a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e532:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e536:	f3bf 8f4f 	dsb	sy
9000e53a:	f3bf 8f6f 	isb	sy
9000e53e:	e79b      	b.n	9000e478 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e540:	a802      	add	r0, sp, #8
9000e542:	f001 fc01 	bl	9000fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e546:	e730      	b.n	9000e3aa <xQueueGenericSend+0x76>
9000e548:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e54c:	f383 8811 	msr	BASEPRI, r3
9000e550:	f3bf 8f6f 	isb	sy
9000e554:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e558:	e7fe      	b.n	9000e558 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e55a:	9b01      	ldr	r3, [sp, #4]
9000e55c:	2b00      	cmp	r3, #0
9000e55e:	f43f af09 	beq.w	9000e374 <xQueueGenericSend+0x40>
9000e562:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e566:	f383 8811 	msr	BASEPRI, r3
9000e56a:	f3bf 8f6f 	isb	sy
9000e56e:	f3bf 8f4f 	dsb	sy
9000e572:	e7fe      	b.n	9000e572 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e574:	463a      	mov	r2, r7
9000e576:	4641      	mov	r1, r8
9000e578:	4620      	mov	r0, r4
9000e57a:	f7ff fd43 	bl	9000e004 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e580:	2b00      	cmp	r3, #0
9000e582:	d152      	bne.n	9000e62a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000e584:	b148      	cbz	r0, 9000e59a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000e586:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e58e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e592:	f3bf 8f4f 	dsb	sy
9000e596:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000e59a:	f7ff fbf5 	bl	9000dd88 <vPortExitCritical>
				return pdPASS;
9000e59e:	2001      	movs	r0, #1
}
9000e5a0:	b004      	add	sp, #16
9000e5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000e5a6:	f7ff fbef 	bl	9000dd88 <vPortExitCritical>
					return errQUEUE_FULL;
9000e5aa:	4648      	mov	r0, r9
9000e5ac:	e7f8      	b.n	9000e5a0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000e5ae:	f7ff fbc9 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e5b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e5b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e5b8:	2d00      	cmp	r5, #0
9000e5ba:	dd10      	ble.n	9000e5de <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e5bc:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000e5c0:	e003      	b.n	9000e5ca <xQueueGenericSend+0x296>
			--cTxLock;
9000e5c2:	1e6b      	subs	r3, r5, #1
9000e5c4:	b2da      	uxtb	r2, r3
9000e5c6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e5c8:	b14a      	cbz	r2, 9000e5de <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e5cc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e5ce:	b133      	cbz	r3, 9000e5de <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e5d0:	f001 fb70 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e5d4:	2800      	cmp	r0, #0
9000e5d6:	d0f4      	beq.n	9000e5c2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000e5d8:	f001 fc0a 	bl	9000fdf0 <vTaskMissedYield>
9000e5dc:	e7f1      	b.n	9000e5c2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e5de:	23ff      	movs	r3, #255	; 0xff
9000e5e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e5e4:	f7ff fbd0 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e5e8:	f7ff fbac 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e5ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e5f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e5f2:	2d00      	cmp	r5, #0
9000e5f4:	dd10      	ble.n	9000e618 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e5f6:	f104 0610 	add.w	r6, r4, #16
9000e5fa:	e003      	b.n	9000e604 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000e5fc:	1e6b      	subs	r3, r5, #1
9000e5fe:	b2da      	uxtb	r2, r3
9000e600:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e602:	b14a      	cbz	r2, 9000e618 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e604:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e606:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e608:	b133      	cbz	r3, 9000e618 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e60a:	f001 fb53 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e60e:	2800      	cmp	r0, #0
9000e610:	d0f4      	beq.n	9000e5fc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000e612:	f001 fbed 	bl	9000fdf0 <vTaskMissedYield>
9000e616:	e7f1      	b.n	9000e5fc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e618:	23ff      	movs	r3, #255	; 0xff
9000e61a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e61e:	f7ff fbb3 	bl	9000dd88 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000e622:	f001 fa23 	bl	9000fa6c <xTaskResumeAll>
			return errQUEUE_FULL;
9000e626:	2000      	movs	r0, #0
9000e628:	e7ba      	b.n	9000e5a0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e62a:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e62e:	f001 fb41 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e632:	2800      	cmp	r0, #0
9000e634:	d0b1      	beq.n	9000e59a <xQueueGenericSend+0x266>
9000e636:	e7a6      	b.n	9000e586 <xQueueGenericSend+0x252>

9000e638 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000e638:	b179      	cbz	r1, 9000e65a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e63a:	2350      	movs	r3, #80	; 0x50
	{
9000e63c:	b570      	push	{r4, r5, r6, lr}
9000e63e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e640:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e642:	9b01      	ldr	r3, [sp, #4]
9000e644:	2b50      	cmp	r3, #80	; 0x50
9000e646:	d011      	beq.n	9000e66c <xQueueCreateMutexStatic+0x34>
9000e648:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e64c:	f383 8811 	msr	BASEPRI, r3
9000e650:	f3bf 8f6f 	isb	sy
9000e654:	f3bf 8f4f 	dsb	sy
9000e658:	e7fe      	b.n	9000e658 <xQueueCreateMutexStatic+0x20>
9000e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e65e:	f383 8811 	msr	BASEPRI, r3
9000e662:	f3bf 8f6f 	isb	sy
9000e666:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e66a:	e7fe      	b.n	9000e66a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000e66c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e66e:	2301      	movs	r3, #1
9000e670:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e672:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e674:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000e678:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e67a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000e67c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e680:	f7ff fb60 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e684:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000e686:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e688:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e68a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000e68c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e694:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000e698:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e69c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e69e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6a0:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e6a2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e6a6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e6aa:	f7ff fa91 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e6ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e6b2:	f7ff fa8d 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e6b6:	f7ff fb67 	bl	9000dd88 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e6ba:	4633      	mov	r3, r6
9000e6bc:	4632      	mov	r2, r6
9000e6be:	4631      	mov	r1, r6
9000e6c0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e6c2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e6c6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e6c8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e6ca:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e6cc:	f7ff fe32 	bl	9000e334 <xQueueGenericSend>
	}
9000e6d0:	4620      	mov	r0, r4
9000e6d2:	b002      	add	sp, #8
9000e6d4:	bd70      	pop	{r4, r5, r6, pc}
9000e6d6:	bf00      	nop

9000e6d8 <xQueueGiveMutexRecursive>:
	{
9000e6d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000e6da:	b138      	cbz	r0, 9000e6ec <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000e6dc:	6885      	ldr	r5, [r0, #8]
9000e6de:	4604      	mov	r4, r0
9000e6e0:	f001 fb8c 	bl	9000fdfc <xTaskGetCurrentTaskHandle>
9000e6e4:	4285      	cmp	r5, r0
9000e6e6:	d00a      	beq.n	9000e6fe <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000e6e8:	2000      	movs	r0, #0
	}
9000e6ea:	bd38      	pop	{r3, r4, r5, pc}
9000e6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6f0:	f383 8811 	msr	BASEPRI, r3
9000e6f4:	f3bf 8f6f 	isb	sy
9000e6f8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000e6fc:	e7fe      	b.n	9000e6fc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000e6fe:	68e3      	ldr	r3, [r4, #12]
9000e700:	3b01      	subs	r3, #1
9000e702:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000e704:	b10b      	cbz	r3, 9000e70a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000e706:	2001      	movs	r0, #1
	}
9000e708:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000e70a:	461a      	mov	r2, r3
9000e70c:	4619      	mov	r1, r3
9000e70e:	4620      	mov	r0, r4
9000e710:	f7ff fe10 	bl	9000e334 <xQueueGenericSend>
			xReturn = pdPASS;
9000e714:	2001      	movs	r0, #1
	}
9000e716:	bd38      	pop	{r3, r4, r5, pc}

9000e718 <xQueueCreateMutex>:
	{
9000e718:	b570      	push	{r4, r5, r6, lr}
9000e71a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e71c:	2050      	movs	r0, #80	; 0x50
9000e71e:	f7ff f935 	bl	9000d98c <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e722:	4604      	mov	r4, r0
9000e724:	b370      	cbz	r0, 9000e784 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e726:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000e728:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e72a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e72c:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e730:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e734:	f7ff fb06 	bl	9000dd44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e738:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e73a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e73c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e740:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e742:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000e746:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e74a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e74c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e74e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000e750:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e752:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e756:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e75a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e75e:	f7ff fa37 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e762:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e766:	f7ff fa33 	bl	9000dbd0 <vListInitialise>
	taskEXIT_CRITICAL();
9000e76a:	f7ff fb0d 	bl	9000dd88 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e76e:	4633      	mov	r3, r6
9000e770:	4632      	mov	r2, r6
9000e772:	4631      	mov	r1, r6
9000e774:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e776:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e77a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e77c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e77e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e780:	f7ff fdd8 	bl	9000e334 <xQueueGenericSend>
	}
9000e784:	4620      	mov	r0, r4
9000e786:	bd70      	pop	{r4, r5, r6, pc}

9000e788 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000e788:	2800      	cmp	r0, #0
9000e78a:	d04e      	beq.n	9000e82a <xQueueGenericSendFromISR+0xa2>
{
9000e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e790:	460e      	mov	r6, r1
9000e792:	4604      	mov	r4, r0
9000e794:	4617      	mov	r7, r2
9000e796:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e798:	b339      	cbz	r1, 9000e7ea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e79a:	2d02      	cmp	r5, #2
9000e79c:	d10b      	bne.n	9000e7b6 <xQueueGenericSendFromISR+0x2e>
9000e79e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e7a0:	2b01      	cmp	r3, #1
9000e7a2:	d008      	beq.n	9000e7b6 <xQueueGenericSendFromISR+0x2e>
9000e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7a8:	f383 8811 	msr	BASEPRI, r3
9000e7ac:	f3bf 8f6f 	isb	sy
9000e7b0:	f3bf 8f4f 	dsb	sy
9000e7b4:	e7fe      	b.n	9000e7b4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e7b6:	f7ff fbf7 	bl	9000dfa8 <vPortValidateInterruptPriority>
	__asm volatile
9000e7ba:	f3ef 8811 	mrs	r8, BASEPRI
9000e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7c2:	f383 8811 	msr	BASEPRI, r3
9000e7c6:	f3bf 8f6f 	isb	sy
9000e7ca:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e7ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e7d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e7d2:	429a      	cmp	r2, r3
9000e7d4:	d315      	bcc.n	9000e802 <xQueueGenericSendFromISR+0x7a>
9000e7d6:	f1a5 0002 	sub.w	r0, r5, #2
9000e7da:	fab0 f080 	clz	r0, r0
9000e7de:	0940      	lsrs	r0, r0, #5
9000e7e0:	b978      	cbnz	r0, 9000e802 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000e7e2:	f388 8811 	msr	BASEPRI, r8
}
9000e7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e7ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e7ec:	2b00      	cmp	r3, #0
9000e7ee:	d0d4      	beq.n	9000e79a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7f4:	f383 8811 	msr	BASEPRI, r3
9000e7f8:	f3bf 8f6f 	isb	sy
9000e7fc:	f3bf 8f4f 	dsb	sy
9000e800:	e7fe      	b.n	9000e800 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e802:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000e804:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e808:	4631      	mov	r1, r6
9000e80a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000e80c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e80e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e810:	f7ff fbf8 	bl	9000e004 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000e814:	1c6b      	adds	r3, r5, #1
9000e816:	d011      	beq.n	9000e83c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e818:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000e81a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e81c:	b25b      	sxtb	r3, r3
9000e81e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000e822:	f388 8811 	msr	BASEPRI, r8
}
9000e826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000e82a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e82e:	f383 8811 	msr	BASEPRI, r3
9000e832:	f3bf 8f6f 	isb	sy
9000e836:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e83a:	e7fe      	b.n	9000e83a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e83e:	b90b      	cbnz	r3, 9000e844 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000e840:	2001      	movs	r0, #1
9000e842:	e7ce      	b.n	9000e7e2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e844:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e848:	f001 fa34 	bl	9000fcb4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e84c:	2800      	cmp	r0, #0
9000e84e:	d0f7      	beq.n	9000e840 <xQueueGenericSendFromISR+0xb8>
9000e850:	2f00      	cmp	r7, #0
9000e852:	d0f5      	beq.n	9000e840 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e854:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e856:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e858:	603b      	str	r3, [r7, #0]
9000e85a:	e7c2      	b.n	9000e7e2 <xQueueGenericSendFromISR+0x5a>

9000e85c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000e85c:	b360      	cbz	r0, 9000e8b8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000e85e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000e860:	b570      	push	{r4, r5, r6, lr}
9000e862:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000e864:	b143      	cbz	r3, 9000e878 <xQueueGiveFromISR+0x1c>
9000e866:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e86a:	f383 8811 	msr	BASEPRI, r3
9000e86e:	f3bf 8f6f 	isb	sy
9000e872:	f3bf 8f4f 	dsb	sy
9000e876:	e7fe      	b.n	9000e876 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e878:	6803      	ldr	r3, [r0, #0]
9000e87a:	460d      	mov	r5, r1
9000e87c:	b32b      	cbz	r3, 9000e8ca <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e87e:	f7ff fb93 	bl	9000dfa8 <vPortValidateInterruptPriority>
	__asm volatile
9000e882:	f3ef 8611 	mrs	r6, BASEPRI
9000e886:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e88a:	f383 8811 	msr	BASEPRI, r3
9000e88e:	f3bf 8f6f 	isb	sy
9000e892:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000e898:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000e89a:	429a      	cmp	r2, r3
9000e89c:	d921      	bls.n	9000e8e2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000e89e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8a2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000e8a4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e8a6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000e8a8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000e8aa:	d01e      	beq.n	9000e8ea <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e8ac:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000e8ae:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e8b0:	b25b      	sxtb	r3, r3
9000e8b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e8b6:	e015      	b.n	9000e8e4 <xQueueGiveFromISR+0x88>
	__asm volatile
9000e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e8bc:	f383 8811 	msr	BASEPRI, r3
9000e8c0:	f3bf 8f6f 	isb	sy
9000e8c4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e8c8:	e7fe      	b.n	9000e8c8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e8ca:	6883      	ldr	r3, [r0, #8]
9000e8cc:	2b00      	cmp	r3, #0
9000e8ce:	d0d6      	beq.n	9000e87e <xQueueGiveFromISR+0x22>
9000e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e8d4:	f383 8811 	msr	BASEPRI, r3
9000e8d8:	f3bf 8f6f 	isb	sy
9000e8dc:	f3bf 8f4f 	dsb	sy
9000e8e0:	e7fe      	b.n	9000e8e0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000e8e2:	2000      	movs	r0, #0
	__asm volatile
9000e8e4:	f386 8811 	msr	BASEPRI, r6
}
9000e8e8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e8ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e8ec:	b90b      	cbnz	r3, 9000e8f2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000e8ee:	2001      	movs	r0, #1
9000e8f0:	e7f8      	b.n	9000e8e4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e8f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e8f6:	f001 f9dd 	bl	9000fcb4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e8fa:	2d00      	cmp	r5, #0
9000e8fc:	d0f7      	beq.n	9000e8ee <xQueueGiveFromISR+0x92>
9000e8fe:	2800      	cmp	r0, #0
9000e900:	d0f5      	beq.n	9000e8ee <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e902:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e904:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e906:	602b      	str	r3, [r5, #0]
9000e908:	e7ec      	b.n	9000e8e4 <xQueueGiveFromISR+0x88>
9000e90a:	bf00      	nop

9000e90c <xQueueReceive>:
{
9000e90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e910:	b085      	sub	sp, #20
9000e912:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000e914:	2800      	cmp	r0, #0
9000e916:	f000 815c 	beq.w	9000ebd2 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e91a:	460f      	mov	r7, r1
9000e91c:	4604      	mov	r4, r0
9000e91e:	2900      	cmp	r1, #0
9000e920:	d079      	beq.n	9000ea16 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e922:	f001 fa71 	bl	9000fe08 <xTaskGetSchedulerState>
9000e926:	2800      	cmp	r0, #0
9000e928:	f000 8081 	beq.w	9000ea2e <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000e92c:	f7ff fa0a 	bl	9000dd44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e930:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e932:	2d00      	cmp	r5, #0
9000e934:	f040 8138 	bne.w	9000eba8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e938:	9b01      	ldr	r3, [sp, #4]
9000e93a:	2b00      	cmp	r3, #0
9000e93c:	f000 80d5 	beq.w	9000eaea <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000e940:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e942:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e946:	a802      	add	r0, sp, #8
9000e948:	f001 f9fe 	bl	9000fd48 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000e94c:	f7ff fa1c 	bl	9000dd88 <vPortExitCritical>
		vTaskSuspendAll();
9000e950:	f001 f884 	bl	9000fa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e954:	f7ff f9f6 	bl	9000dd44 <vPortEnterCritical>
9000e958:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e95c:	2bff      	cmp	r3, #255	; 0xff
9000e95e:	d101      	bne.n	9000e964 <xQueueReceive+0x58>
9000e960:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000e964:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e968:	2bff      	cmp	r3, #255	; 0xff
9000e96a:	d101      	bne.n	9000e970 <xQueueReceive+0x64>
9000e96c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000e970:	f7ff fa0a 	bl	9000dd88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e974:	a901      	add	r1, sp, #4
9000e976:	a802      	add	r0, sp, #8
9000e978:	f001 f9f2 	bl	9000fd60 <xTaskCheckForTimeOut>
9000e97c:	2800      	cmp	r0, #0
9000e97e:	d163      	bne.n	9000ea48 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000e980:	f7ff f9e0 	bl	9000dd44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000e986:	2b00      	cmp	r3, #0
9000e988:	f000 80b5 	beq.w	9000eaf6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000e98c:	f7ff f9fc 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e990:	f7ff f9d8 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e994:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e998:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e99a:	2d00      	cmp	r5, #0
9000e99c:	dc04      	bgt.n	9000e9a8 <xQueueReceive+0x9c>
9000e99e:	e011      	b.n	9000e9c4 <xQueueReceive+0xb8>
			--cTxLock;
9000e9a0:	1e6b      	subs	r3, r5, #1
9000e9a2:	b2da      	uxtb	r2, r3
9000e9a4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e9a6:	b16a      	cbz	r2, 9000e9c4 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e9aa:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e9ac:	b153      	cbz	r3, 9000e9c4 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e9ae:	f001 f981 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e9b2:	2800      	cmp	r0, #0
9000e9b4:	d0f4      	beq.n	9000e9a0 <xQueueReceive+0x94>
						vTaskMissedYield();
9000e9b6:	f001 fa1b 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000e9ba:	1e6b      	subs	r3, r5, #1
9000e9bc:	b2da      	uxtb	r2, r3
9000e9be:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e9c0:	2a00      	cmp	r2, #0
9000e9c2:	d1f1      	bne.n	9000e9a8 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000e9c4:	23ff      	movs	r3, #255	; 0xff
9000e9c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e9ca:	f7ff f9dd 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e9ce:	f7ff f9b9 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e9d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e9d6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e9d8:	2d00      	cmp	r5, #0
9000e9da:	dd14      	ble.n	9000ea06 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e9dc:	f104 0910 	add.w	r9, r4, #16
9000e9e0:	e003      	b.n	9000e9ea <xQueueReceive+0xde>
				--cRxLock;
9000e9e2:	1e6b      	subs	r3, r5, #1
9000e9e4:	b2da      	uxtb	r2, r3
9000e9e6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e9e8:	b16a      	cbz	r2, 9000ea06 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e9ea:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e9ec:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e9ee:	b153      	cbz	r3, 9000ea06 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e9f0:	f001 f960 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000e9f4:	2800      	cmp	r0, #0
9000e9f6:	d0f4      	beq.n	9000e9e2 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000e9f8:	f001 f9fa 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000e9fc:	1e6b      	subs	r3, r5, #1
9000e9fe:	b2da      	uxtb	r2, r3
9000ea00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea02:	2a00      	cmp	r2, #0
9000ea04:	d1f1      	bne.n	9000e9ea <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000ea06:	23ff      	movs	r3, #255	; 0xff
9000ea08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ea0c:	f7ff f9bc 	bl	9000dd88 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000ea10:	f001 f82c 	bl	9000fa6c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000ea14:	e060      	b.n	9000ead8 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ea16:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ea18:	2b00      	cmp	r3, #0
9000ea1a:	d082      	beq.n	9000e922 <xQueueReceive+0x16>
	__asm volatile
9000ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea20:	f383 8811 	msr	BASEPRI, r3
9000ea24:	f3bf 8f6f 	isb	sy
9000ea28:	f3bf 8f4f 	dsb	sy
9000ea2c:	e7fe      	b.n	9000ea2c <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ea2e:	9b01      	ldr	r3, [sp, #4]
9000ea30:	2b00      	cmp	r3, #0
9000ea32:	f43f af7b 	beq.w	9000e92c <xQueueReceive+0x20>
9000ea36:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ea3a:	f383 8811 	msr	BASEPRI, r3
9000ea3e:	f3bf 8f6f 	isb	sy
9000ea42:	f3bf 8f4f 	dsb	sy
9000ea46:	e7fe      	b.n	9000ea46 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000ea48:	f7ff f97c 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ea4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ea50:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea52:	2d00      	cmp	r5, #0
9000ea54:	dc04      	bgt.n	9000ea60 <xQueueReceive+0x154>
9000ea56:	e011      	b.n	9000ea7c <xQueueReceive+0x170>
			--cTxLock;
9000ea58:	1e6b      	subs	r3, r5, #1
9000ea5a:	b2da      	uxtb	r2, r3
9000ea5c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea5e:	b16a      	cbz	r2, 9000ea7c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea60:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea62:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea64:	b153      	cbz	r3, 9000ea7c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea66:	f001 f925 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ea6a:	2800      	cmp	r0, #0
9000ea6c:	d0f4      	beq.n	9000ea58 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000ea6e:	f001 f9bf 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000ea72:	1e6b      	subs	r3, r5, #1
9000ea74:	b2da      	uxtb	r2, r3
9000ea76:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea78:	2a00      	cmp	r2, #0
9000ea7a:	d1f1      	bne.n	9000ea60 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000ea7c:	23ff      	movs	r3, #255	; 0xff
9000ea7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ea82:	f7ff f981 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ea86:	f7ff f95d 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ea8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ea8e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea90:	2d00      	cmp	r5, #0
9000ea92:	dd14      	ble.n	9000eabe <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea94:	f104 0910 	add.w	r9, r4, #16
9000ea98:	e003      	b.n	9000eaa2 <xQueueReceive+0x196>
				--cRxLock;
9000ea9a:	1e6b      	subs	r3, r5, #1
9000ea9c:	b2da      	uxtb	r2, r3
9000ea9e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eaa0:	b16a      	cbz	r2, 9000eabe <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eaa2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eaa4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eaa6:	b153      	cbz	r3, 9000eabe <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eaa8:	f001 f904 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000eaac:	2800      	cmp	r0, #0
9000eaae:	d0f4      	beq.n	9000ea9a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000eab0:	f001 f99e 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000eab4:	1e6b      	subs	r3, r5, #1
9000eab6:	b2da      	uxtb	r2, r3
9000eab8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eaba:	2a00      	cmp	r2, #0
9000eabc:	d1f1      	bne.n	9000eaa2 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000eabe:	23ff      	movs	r3, #255	; 0xff
9000eac0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000eac4:	f7ff f960 	bl	9000dd88 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000eac8:	f000 ffd0 	bl	9000fa6c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000eacc:	f7ff f93a 	bl	9000dd44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ead0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ead2:	b153      	cbz	r3, 9000eaea <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000ead4:	f7ff f958 	bl	9000dd88 <vPortExitCritical>
		taskENTER_CRITICAL();
9000ead8:	f7ff f934 	bl	9000dd44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000eadc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000eade:	2d00      	cmp	r5, #0
9000eae0:	d162      	bne.n	9000eba8 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000eae2:	9b01      	ldr	r3, [sp, #4]
9000eae4:	2b00      	cmp	r3, #0
9000eae6:	f47f af31 	bne.w	9000e94c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000eaea:	f7ff f94d 	bl	9000dd88 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000eaee:	2000      	movs	r0, #0
}
9000eaf0:	b005      	add	sp, #20
9000eaf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000eaf6:	f7ff f947 	bl	9000dd88 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000eafa:	9901      	ldr	r1, [sp, #4]
9000eafc:	4630      	mov	r0, r6
9000eafe:	f001 f84b 	bl	9000fb98 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000eb02:	f7ff f91f 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000eb06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000eb0a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eb0c:	2d00      	cmp	r5, #0
9000eb0e:	dc04      	bgt.n	9000eb1a <xQueueReceive+0x20e>
9000eb10:	e011      	b.n	9000eb36 <xQueueReceive+0x22a>
			--cTxLock;
9000eb12:	1e6b      	subs	r3, r5, #1
9000eb14:	b2da      	uxtb	r2, r3
9000eb16:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eb18:	b16a      	cbz	r2, 9000eb36 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000eb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000eb1c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000eb1e:	b153      	cbz	r3, 9000eb36 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000eb20:	f001 f8c8 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000eb24:	2800      	cmp	r0, #0
9000eb26:	d0f4      	beq.n	9000eb12 <xQueueReceive+0x206>
						vTaskMissedYield();
9000eb28:	f001 f962 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000eb2c:	1e6b      	subs	r3, r5, #1
9000eb2e:	b2da      	uxtb	r2, r3
9000eb30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eb32:	2a00      	cmp	r2, #0
9000eb34:	d1f1      	bne.n	9000eb1a <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000eb36:	23ff      	movs	r3, #255	; 0xff
9000eb38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000eb3c:	f7ff f924 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000eb40:	f7ff f900 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000eb44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000eb48:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eb4a:	2d00      	cmp	r5, #0
9000eb4c:	dd14      	ble.n	9000eb78 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb4e:	f104 0910 	add.w	r9, r4, #16
9000eb52:	e003      	b.n	9000eb5c <xQueueReceive+0x250>
				--cRxLock;
9000eb54:	1e6b      	subs	r3, r5, #1
9000eb56:	b2da      	uxtb	r2, r3
9000eb58:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eb5a:	b16a      	cbz	r2, 9000eb78 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eb5c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb5e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eb60:	b153      	cbz	r3, 9000eb78 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb62:	f001 f8a7 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000eb66:	2800      	cmp	r0, #0
9000eb68:	d0f4      	beq.n	9000eb54 <xQueueReceive+0x248>
					vTaskMissedYield();
9000eb6a:	f001 f941 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000eb6e:	1e6b      	subs	r3, r5, #1
9000eb70:	b2da      	uxtb	r2, r3
9000eb72:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eb74:	2a00      	cmp	r2, #0
9000eb76:	d1f1      	bne.n	9000eb5c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000eb78:	23ff      	movs	r3, #255	; 0xff
9000eb7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000eb7e:	f7ff f903 	bl	9000dd88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000eb82:	f000 ff73 	bl	9000fa6c <xTaskResumeAll>
9000eb86:	2800      	cmp	r0, #0
9000eb88:	d1a6      	bne.n	9000ead8 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000eb8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eb92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eb96:	f3bf 8f4f 	dsb	sy
9000eb9a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000eb9e:	f7ff f8d1 	bl	9000dd44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000eba2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000eba4:	2d00      	cmp	r5, #0
9000eba6:	d09c      	beq.n	9000eae2 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000eba8:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000ebaa:	b152      	cbz	r2, 9000ebc2 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ebac:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ebae:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ebb0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ebb2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ebb4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ebb6:	d301      	bcc.n	9000ebbc <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000ebb8:	6821      	ldr	r1, [r4, #0]
9000ebba:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000ebbc:	4638      	mov	r0, r7
9000ebbe:	f014 fce2 	bl	90023586 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000ebc2:	3d01      	subs	r5, #1
9000ebc4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ebc6:	6923      	ldr	r3, [r4, #16]
9000ebc8:	b963      	cbnz	r3, 9000ebe4 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000ebca:	f7ff f8dd 	bl	9000dd88 <vPortExitCritical>
				return pdPASS;
9000ebce:	2001      	movs	r0, #1
9000ebd0:	e78e      	b.n	9000eaf0 <xQueueReceive+0x1e4>
9000ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ebd6:	f383 8811 	msr	BASEPRI, r3
9000ebda:	f3bf 8f6f 	isb	sy
9000ebde:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000ebe2:	e7fe      	b.n	9000ebe2 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ebe4:	f104 0010 	add.w	r0, r4, #16
9000ebe8:	f001 f864 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ebec:	2800      	cmp	r0, #0
9000ebee:	d0ec      	beq.n	9000ebca <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000ebf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ebf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ebf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ebfc:	f3bf 8f4f 	dsb	sy
9000ec00:	f3bf 8f6f 	isb	sy
9000ec04:	e7e1      	b.n	9000ebca <xQueueReceive+0x2be>
9000ec06:	bf00      	nop

9000ec08 <xQueueSemaphoreTake>:
{
9000ec08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ec0c:	b084      	sub	sp, #16
9000ec0e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000ec10:	2800      	cmp	r0, #0
9000ec12:	d05c      	beq.n	9000ecce <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000ec14:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000ec16:	4604      	mov	r4, r0
9000ec18:	b147      	cbz	r7, 9000ec2c <xQueueSemaphoreTake+0x24>
9000ec1a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec1e:	f383 8811 	msr	BASEPRI, r3
9000ec22:	f3bf 8f6f 	isb	sy
9000ec26:	f3bf 8f4f 	dsb	sy
9000ec2a:	e7fe      	b.n	9000ec2a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ec2c:	f001 f8ec 	bl	9000fe08 <xTaskGetSchedulerState>
9000ec30:	4605      	mov	r5, r0
9000ec32:	2800      	cmp	r0, #0
9000ec34:	d054      	beq.n	9000ece0 <xQueueSemaphoreTake+0xd8>
9000ec36:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec38:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000ec3c:	f7ff f882 	bl	9000dd44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000ec40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000ec42:	2b00      	cmp	r3, #0
9000ec44:	f040 8149 	bne.w	9000eeda <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ec48:	9b01      	ldr	r3, [sp, #4]
9000ec4a:	2b00      	cmp	r3, #0
9000ec4c:	f000 813a 	beq.w	9000eec4 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000ec50:	2d00      	cmp	r5, #0
9000ec52:	f000 809d 	beq.w	9000ed90 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000ec56:	f7ff f897 	bl	9000dd88 <vPortExitCritical>
		vTaskSuspendAll();
9000ec5a:	f000 feff 	bl	9000fa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000ec5e:	f7ff f871 	bl	9000dd44 <vPortEnterCritical>
9000ec62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ec66:	2bff      	cmp	r3, #255	; 0xff
9000ec68:	d102      	bne.n	9000ec70 <xQueueSemaphoreTake+0x68>
9000ec6a:	2300      	movs	r3, #0
9000ec6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000ec70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ec74:	2bff      	cmp	r3, #255	; 0xff
9000ec76:	d102      	bne.n	9000ec7e <xQueueSemaphoreTake+0x76>
9000ec78:	2300      	movs	r3, #0
9000ec7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ec7e:	f7ff f883 	bl	9000dd88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000ec82:	a901      	add	r1, sp, #4
9000ec84:	a802      	add	r0, sp, #8
9000ec86:	f001 f86b 	bl	9000fd60 <xTaskCheckForTimeOut>
9000ec8a:	2800      	cmp	r0, #0
9000ec8c:	d135      	bne.n	9000ecfa <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000ec8e:	f7ff f859 	bl	9000dd44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ec92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ec94:	2b00      	cmp	r3, #0
9000ec96:	f000 80a4 	beq.w	9000ede2 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000ec9a:	f7ff f875 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ec9e:	f7ff f851 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000eca2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000eca6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000eca8:	2d00      	cmp	r5, #0
9000ecaa:	dc05      	bgt.n	9000ecb8 <xQueueSemaphoreTake+0xb0>
9000ecac:	e074      	b.n	9000ed98 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000ecae:	1e6b      	subs	r3, r5, #1
9000ecb0:	b2da      	uxtb	r2, r3
9000ecb2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ecb4:	2a00      	cmp	r2, #0
9000ecb6:	d06f      	beq.n	9000ed98 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecba:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ecbc:	2b00      	cmp	r3, #0
9000ecbe:	d06b      	beq.n	9000ed98 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ecc0:	f000 fff8 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ecc4:	2800      	cmp	r0, #0
9000ecc6:	d0f2      	beq.n	9000ecae <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000ecc8:	f001 f892 	bl	9000fdf0 <vTaskMissedYield>
9000eccc:	e7ef      	b.n	9000ecae <xQueueSemaphoreTake+0xa6>
9000ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ecd2:	f383 8811 	msr	BASEPRI, r3
9000ecd6:	f3bf 8f6f 	isb	sy
9000ecda:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000ecde:	e7fe      	b.n	9000ecde <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ece0:	9b01      	ldr	r3, [sp, #4]
9000ece2:	2b00      	cmp	r3, #0
9000ece4:	f000 80d4 	beq.w	9000ee90 <xQueueSemaphoreTake+0x288>
9000ece8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ecec:	f383 8811 	msr	BASEPRI, r3
9000ecf0:	f3bf 8f6f 	isb	sy
9000ecf4:	f3bf 8f4f 	dsb	sy
9000ecf8:	e7fe      	b.n	9000ecf8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000ecfa:	f7ff f823 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ecfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ed02:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed04:	2d00      	cmp	r5, #0
9000ed06:	dc04      	bgt.n	9000ed12 <xQueueSemaphoreTake+0x10a>
9000ed08:	e011      	b.n	9000ed2e <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000ed0a:	1e6b      	subs	r3, r5, #1
9000ed0c:	b2da      	uxtb	r2, r3
9000ed0e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed10:	b16a      	cbz	r2, 9000ed2e <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed12:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed14:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed16:	b153      	cbz	r3, 9000ed2e <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed18:	f000 ffcc 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ed1c:	2800      	cmp	r0, #0
9000ed1e:	d0f4      	beq.n	9000ed0a <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000ed20:	f001 f866 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000ed24:	1e6b      	subs	r3, r5, #1
9000ed26:	b2da      	uxtb	r2, r3
9000ed28:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed2a:	2a00      	cmp	r2, #0
9000ed2c:	d1f1      	bne.n	9000ed12 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000ed2e:	23ff      	movs	r3, #255	; 0xff
9000ed30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ed34:	f7ff f828 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ed38:	f7ff f804 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ed3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ed40:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed42:	2d00      	cmp	r5, #0
9000ed44:	dd14      	ble.n	9000ed70 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed46:	f104 0810 	add.w	r8, r4, #16
9000ed4a:	e003      	b.n	9000ed54 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000ed4c:	1e6b      	subs	r3, r5, #1
9000ed4e:	b2da      	uxtb	r2, r3
9000ed50:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed52:	b16a      	cbz	r2, 9000ed70 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed54:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed56:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed58:	b153      	cbz	r3, 9000ed70 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed5a:	f000 ffab 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ed5e:	2800      	cmp	r0, #0
9000ed60:	d0f4      	beq.n	9000ed4c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000ed62:	f001 f845 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000ed66:	1e6b      	subs	r3, r5, #1
9000ed68:	b2da      	uxtb	r2, r3
9000ed6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed6c:	2a00      	cmp	r2, #0
9000ed6e:	d1f1      	bne.n	9000ed54 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed70:	23ff      	movs	r3, #255	; 0xff
9000ed72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed76:	f7ff f807 	bl	9000dd88 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ed7a:	f000 fe77 	bl	9000fa6c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ed7e:	f7fe ffe1 	bl	9000dd44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ed82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ed84:	2b00      	cmp	r3, #0
9000ed86:	d07c      	beq.n	9000ee82 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000ed88:	f7fe fffe 	bl	9000dd88 <vPortExitCritical>
	return xReturn;
9000ed8c:	2501      	movs	r5, #1
9000ed8e:	e755      	b.n	9000ec3c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ed90:	a802      	add	r0, sp, #8
9000ed92:	f000 ffd9 	bl	9000fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ed96:	e75e      	b.n	9000ec56 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ed98:	23ff      	movs	r3, #255	; 0xff
9000ed9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ed9e:	f7fe fff3 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000eda2:	f7fe ffcf 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000eda6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000edaa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000edac:	2d00      	cmp	r5, #0
9000edae:	dd10      	ble.n	9000edd2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000edb0:	f104 0810 	add.w	r8, r4, #16
9000edb4:	e003      	b.n	9000edbe <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000edb6:	1e6b      	subs	r3, r5, #1
9000edb8:	b2da      	uxtb	r2, r3
9000edba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000edbc:	b14a      	cbz	r2, 9000edd2 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000edbe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000edc0:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000edc2:	b133      	cbz	r3, 9000edd2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000edc4:	f000 ff76 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000edc8:	2800      	cmp	r0, #0
9000edca:	d0f4      	beq.n	9000edb6 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000edcc:	f001 f810 	bl	9000fdf0 <vTaskMissedYield>
9000edd0:	e7f1      	b.n	9000edb6 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000edd2:	23ff      	movs	r3, #255	; 0xff
9000edd4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000edd8:	f7fe ffd6 	bl	9000dd88 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000eddc:	f000 fe46 	bl	9000fa6c <xTaskResumeAll>
9000ede0:	e7d4      	b.n	9000ed8c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ede2:	f7fe ffd1 	bl	9000dd88 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ede6:	6823      	ldr	r3, [r4, #0]
9000ede8:	2b00      	cmp	r3, #0
9000edea:	d062      	beq.n	9000eeb2 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000edec:	9901      	ldr	r1, [sp, #4]
9000edee:	4630      	mov	r0, r6
9000edf0:	f000 fed2 	bl	9000fb98 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000edf4:	f7fe ffa6 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000edf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000edfc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000edfe:	2d00      	cmp	r5, #0
9000ee00:	dc04      	bgt.n	9000ee0c <xQueueSemaphoreTake+0x204>
9000ee02:	e00d      	b.n	9000ee20 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000ee04:	1e6b      	subs	r3, r5, #1
9000ee06:	b2da      	uxtb	r2, r3
9000ee08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ee0a:	b14a      	cbz	r2, 9000ee20 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ee0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ee0e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ee10:	b133      	cbz	r3, 9000ee20 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ee12:	f000 ff4f 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ee16:	2800      	cmp	r0, #0
9000ee18:	d0f4      	beq.n	9000ee04 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000ee1a:	f000 ffe9 	bl	9000fdf0 <vTaskMissedYield>
9000ee1e:	e7f1      	b.n	9000ee04 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000ee20:	23ff      	movs	r3, #255	; 0xff
9000ee22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ee26:	f7fe ffaf 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ee2a:	f7fe ff8b 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ee2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ee32:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ee34:	2d00      	cmp	r5, #0
9000ee36:	dd10      	ble.n	9000ee5a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ee38:	f104 0810 	add.w	r8, r4, #16
9000ee3c:	e003      	b.n	9000ee46 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000ee3e:	1e6b      	subs	r3, r5, #1
9000ee40:	b2da      	uxtb	r2, r3
9000ee42:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ee44:	b14a      	cbz	r2, 9000ee5a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ee46:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ee48:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ee4a:	b133      	cbz	r3, 9000ee5a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ee4c:	f000 ff32 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000ee50:	2800      	cmp	r0, #0
9000ee52:	d0f4      	beq.n	9000ee3e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000ee54:	f000 ffcc 	bl	9000fdf0 <vTaskMissedYield>
9000ee58:	e7f1      	b.n	9000ee3e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000ee5a:	23ff      	movs	r3, #255	; 0xff
9000ee5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ee60:	f7fe ff92 	bl	9000dd88 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000ee64:	f000 fe02 	bl	9000fa6c <xTaskResumeAll>
9000ee68:	2800      	cmp	r0, #0
9000ee6a:	d18f      	bne.n	9000ed8c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000ee6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ee70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ee78:	f3bf 8f4f 	dsb	sy
9000ee7c:	f3bf 8f6f 	isb	sy
9000ee80:	e784      	b.n	9000ed8c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ee82:	f7fe ff81 	bl	9000dd88 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000ee86:	b92f      	cbnz	r7, 9000ee94 <xQueueSemaphoreTake+0x28c>
}
9000ee88:	4638      	mov	r0, r7
9000ee8a:	b004      	add	sp, #16
9000ee8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000ee90:	4607      	mov	r7, r0
9000ee92:	e6d1      	b.n	9000ec38 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000ee94:	f7fe ff56 	bl	9000dd44 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000ee98:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000ee9a:	b119      	cbz	r1, 9000eea4 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000ee9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ee9e:	6819      	ldr	r1, [r3, #0]
9000eea0:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000eea4:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000eea6:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000eea8:	f001 f84a 	bl	9000ff40 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000eeac:	f7fe ff6c 	bl	9000dd88 <vPortExitCritical>
9000eeb0:	e7ea      	b.n	9000ee88 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000eeb2:	f7fe ff47 	bl	9000dd44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000eeb6:	68a0      	ldr	r0, [r4, #8]
9000eeb8:	f000 ffb6 	bl	9000fe28 <xTaskPriorityInherit>
9000eebc:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000eebe:	f7fe ff63 	bl	9000dd88 <vPortExitCritical>
9000eec2:	e793      	b.n	9000edec <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000eec4:	2f00      	cmp	r7, #0
9000eec6:	d0f1      	beq.n	9000eeac <xQueueSemaphoreTake+0x2a4>
9000eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eecc:	f383 8811 	msr	BASEPRI, r3
9000eed0:	f3bf 8f6f 	isb	sy
9000eed4:	f3bf 8f4f 	dsb	sy
9000eed8:	e7fe      	b.n	9000eed8 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000eeda:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000eedc:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000eede:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000eee0:	b12a      	cbz	r2, 9000eeee <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eee2:	6923      	ldr	r3, [r4, #16]
9000eee4:	b93b      	cbnz	r3, 9000eef6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000eee6:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000eee8:	f7fe ff4e 	bl	9000dd88 <vPortExitCritical>
				return pdPASS;
9000eeec:	e7cc      	b.n	9000ee88 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000eeee:	f001 f87b 	bl	9000ffe8 <pvTaskIncrementMutexHeldCount>
9000eef2:	60a0      	str	r0, [r4, #8]
9000eef4:	e7f5      	b.n	9000eee2 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eef6:	f104 0010 	add.w	r0, r4, #16
9000eefa:	f000 fedb 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000eefe:	2800      	cmp	r0, #0
9000ef00:	d0f1      	beq.n	9000eee6 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000ef02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ef06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ef0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ef0e:	f3bf 8f4f 	dsb	sy
9000ef12:	f3bf 8f6f 	isb	sy
9000ef16:	e7e6      	b.n	9000eee6 <xQueueSemaphoreTake+0x2de>

9000ef18 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000ef18:	b1a8      	cbz	r0, 9000ef46 <xQueueTakeMutexRecursive+0x2e>
	{
9000ef1a:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000ef1c:	6886      	ldr	r6, [r0, #8]
9000ef1e:	4604      	mov	r4, r0
9000ef20:	460d      	mov	r5, r1
9000ef22:	f000 ff6b 	bl	9000fdfc <xTaskGetCurrentTaskHandle>
9000ef26:	4286      	cmp	r6, r0
9000ef28:	d008      	beq.n	9000ef3c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000ef2a:	4629      	mov	r1, r5
9000ef2c:	4620      	mov	r0, r4
9000ef2e:	f7ff fe6b 	bl	9000ec08 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000ef32:	b110      	cbz	r0, 9000ef3a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ef34:	68e3      	ldr	r3, [r4, #12]
9000ef36:	3301      	adds	r3, #1
9000ef38:	60e3      	str	r3, [r4, #12]
	}
9000ef3a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ef3c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000ef3e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ef40:	4403      	add	r3, r0
9000ef42:	60e3      	str	r3, [r4, #12]
	}
9000ef44:	bd70      	pop	{r4, r5, r6, pc}
9000ef46:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef4a:	f383 8811 	msr	BASEPRI, r3
9000ef4e:	f3bf 8f6f 	isb	sy
9000ef52:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000ef56:	e7fe      	b.n	9000ef56 <xQueueTakeMutexRecursive+0x3e>

9000ef58 <xQueueReceiveFromISR>:
{
9000ef58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000ef5c:	b310      	cbz	r0, 9000efa4 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ef5e:	460e      	mov	r6, r1
9000ef60:	4604      	mov	r4, r0
9000ef62:	4617      	mov	r7, r2
9000ef64:	b191      	cbz	r1, 9000ef8c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ef66:	f7ff f81f 	bl	9000dfa8 <vPortValidateInterruptPriority>
	__asm volatile
9000ef6a:	f3ef 8911 	mrs	r9, BASEPRI
9000ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef72:	f383 8811 	msr	BASEPRI, r3
9000ef76:	f3bf 8f6f 	isb	sy
9000ef7a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ef7e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000ef80:	b9cd      	cbnz	r5, 9000efb6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000ef82:	4628      	mov	r0, r5
	__asm volatile
9000ef84:	f389 8811 	msr	BASEPRI, r9
}
9000ef88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ef8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ef8e:	2b00      	cmp	r3, #0
9000ef90:	d0e9      	beq.n	9000ef66 <xQueueReceiveFromISR+0xe>
	__asm volatile
9000ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef96:	f383 8811 	msr	BASEPRI, r3
9000ef9a:	f3bf 8f6f 	isb	sy
9000ef9e:	f3bf 8f4f 	dsb	sy
9000efa2:	e7fe      	b.n	9000efa2 <xQueueReceiveFromISR+0x4a>
9000efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000efa8:	f383 8811 	msr	BASEPRI, r3
9000efac:	f3bf 8f6f 	isb	sy
9000efb0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000efb4:	e7fe      	b.n	9000efb4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000efb6:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000efba:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000efbc:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000efc0:	b142      	cbz	r2, 9000efd4 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000efc2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000efc4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000efc6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000efc8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000efca:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000efcc:	d215      	bcs.n	9000effa <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000efce:	4630      	mov	r0, r6
9000efd0:	f014 fad9 	bl	90023586 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000efd4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000efd6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000efda:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000efdc:	d009      	beq.n	9000eff2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000efde:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000efe2:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000efe4:	b25b      	sxtb	r3, r3
9000efe6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000efea:	f389 8811 	msr	BASEPRI, r9
}
9000efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eff2:	6923      	ldr	r3, [r4, #16]
9000eff4:	b923      	cbnz	r3, 9000f000 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000eff6:	2001      	movs	r0, #1
9000eff8:	e7c4      	b.n	9000ef84 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000effa:	6821      	ldr	r1, [r4, #0]
9000effc:	60e1      	str	r1, [r4, #12]
9000effe:	e7e6      	b.n	9000efce <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f000:	f104 0010 	add.w	r0, r4, #16
9000f004:	f000 fe56 	bl	9000fcb4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000f008:	2f00      	cmp	r7, #0
9000f00a:	d0f4      	beq.n	9000eff6 <xQueueReceiveFromISR+0x9e>
9000f00c:	2800      	cmp	r0, #0
9000f00e:	d0f2      	beq.n	9000eff6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000f010:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000f012:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000f014:	603b      	str	r3, [r7, #0]
9000f016:	e7b5      	b.n	9000ef84 <xQueueReceiveFromISR+0x2c>

9000f018 <vQueueDelete>:
	configASSERT( pxQueue );
9000f018:	b1e0      	cbz	r0, 9000f054 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000f01a:	4b21      	ldr	r3, [pc, #132]	; (9000f0a0 <vQueueDelete+0x88>)
9000f01c:	685a      	ldr	r2, [r3, #4]
9000f01e:	4290      	cmp	r0, r2
9000f020:	d02b      	beq.n	9000f07a <vQueueDelete+0x62>
9000f022:	68da      	ldr	r2, [r3, #12]
9000f024:	4290      	cmp	r0, r2
9000f026:	d02a      	beq.n	9000f07e <vQueueDelete+0x66>
9000f028:	695a      	ldr	r2, [r3, #20]
9000f02a:	4290      	cmp	r0, r2
9000f02c:	d029      	beq.n	9000f082 <vQueueDelete+0x6a>
9000f02e:	69da      	ldr	r2, [r3, #28]
9000f030:	4290      	cmp	r0, r2
9000f032:	d028      	beq.n	9000f086 <vQueueDelete+0x6e>
9000f034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f036:	4290      	cmp	r0, r2
9000f038:	d027      	beq.n	9000f08a <vQueueDelete+0x72>
9000f03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f03c:	4290      	cmp	r0, r2
9000f03e:	d014      	beq.n	9000f06a <vQueueDelete+0x52>
9000f040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000f042:	4290      	cmp	r0, r2
9000f044:	d023      	beq.n	9000f08e <vQueueDelete+0x76>
9000f046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000f048:	4290      	cmp	r0, r2
9000f04a:	d022      	beq.n	9000f092 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000f04c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000f050:	b14b      	cbz	r3, 9000f066 <vQueueDelete+0x4e>
}
9000f052:	4770      	bx	lr
	__asm volatile
9000f054:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f058:	f383 8811 	msr	BASEPRI, r3
9000f05c:	f3bf 8f6f 	isb	sy
9000f060:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000f064:	e7fe      	b.n	9000f064 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000f066:	f7fe bd4f 	b.w	9000db08 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f06a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000f06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000f070:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000f098 <vQueueDelete+0x80>
9000f074:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000f078:	e7e8      	b.n	9000f04c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f07a:	2200      	movs	r2, #0
9000f07c:	e7f6      	b.n	9000f06c <vQueueDelete+0x54>
9000f07e:	2201      	movs	r2, #1
9000f080:	e7f4      	b.n	9000f06c <vQueueDelete+0x54>
9000f082:	2202      	movs	r2, #2
9000f084:	e7f2      	b.n	9000f06c <vQueueDelete+0x54>
9000f086:	2203      	movs	r2, #3
9000f088:	e7f0      	b.n	9000f06c <vQueueDelete+0x54>
9000f08a:	2204      	movs	r2, #4
9000f08c:	e7ee      	b.n	9000f06c <vQueueDelete+0x54>
9000f08e:	2206      	movs	r2, #6
9000f090:	e7ec      	b.n	9000f06c <vQueueDelete+0x54>
9000f092:	2207      	movs	r2, #7
9000f094:	e7ea      	b.n	9000f06c <vQueueDelete+0x54>
9000f096:	bf00      	nop
	...
9000f0a0:	24024bb0 	.word	0x24024bb0

9000f0a4 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000f0a4:	4b12      	ldr	r3, [pc, #72]	; (9000f0f0 <vQueueAddToRegistry+0x4c>)
9000f0a6:	681a      	ldr	r2, [r3, #0]
9000f0a8:	b17a      	cbz	r2, 9000f0ca <vQueueAddToRegistry+0x26>
9000f0aa:	689a      	ldr	r2, [r3, #8]
9000f0ac:	b162      	cbz	r2, 9000f0c8 <vQueueAddToRegistry+0x24>
9000f0ae:	691a      	ldr	r2, [r3, #16]
9000f0b0:	b192      	cbz	r2, 9000f0d8 <vQueueAddToRegistry+0x34>
9000f0b2:	699a      	ldr	r2, [r3, #24]
9000f0b4:	b192      	cbz	r2, 9000f0dc <vQueueAddToRegistry+0x38>
9000f0b6:	6a1a      	ldr	r2, [r3, #32]
9000f0b8:	b192      	cbz	r2, 9000f0e0 <vQueueAddToRegistry+0x3c>
9000f0ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000f0bc:	b192      	cbz	r2, 9000f0e4 <vQueueAddToRegistry+0x40>
9000f0be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000f0c0:	b192      	cbz	r2, 9000f0e8 <vQueueAddToRegistry+0x44>
9000f0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000f0c4:	b192      	cbz	r2, 9000f0ec <vQueueAddToRegistry+0x48>
	}
9000f0c6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f0c8:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f0ca:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000f0ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f0d2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000f0d6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f0d8:	2202      	movs	r2, #2
9000f0da:	e7f6      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0dc:	2203      	movs	r2, #3
9000f0de:	e7f4      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0e0:	2204      	movs	r2, #4
9000f0e2:	e7f2      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0e4:	2205      	movs	r2, #5
9000f0e6:	e7f0      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0e8:	2206      	movs	r2, #6
9000f0ea:	e7ee      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0ec:	2207      	movs	r2, #7
9000f0ee:	e7ec      	b.n	9000f0ca <vQueueAddToRegistry+0x26>
9000f0f0:	24024bb0 	.word	0x24024bb0

9000f0f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000f0f4:	b570      	push	{r4, r5, r6, lr}
9000f0f6:	4605      	mov	r5, r0
9000f0f8:	460e      	mov	r6, r1
9000f0fa:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000f0fc:	f7fe fe22 	bl	9000dd44 <vPortEnterCritical>
9000f100:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f104:	2bff      	cmp	r3, #255	; 0xff
9000f106:	d102      	bne.n	9000f10e <vQueueWaitForMessageRestricted+0x1a>
9000f108:	2300      	movs	r3, #0
9000f10a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000f10e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f112:	2bff      	cmp	r3, #255	; 0xff
9000f114:	d102      	bne.n	9000f11c <vQueueWaitForMessageRestricted+0x28>
9000f116:	2300      	movs	r3, #0
9000f118:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000f11c:	f7fe fe34 	bl	9000dd88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000f120:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000f122:	2b00      	cmp	r3, #0
9000f124:	d043      	beq.n	9000f1ae <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000f126:	f7fe fe0d 	bl	9000dd44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f12a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f12e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f130:	2c00      	cmp	r4, #0
9000f132:	dd14      	ble.n	9000f15e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f134:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000f138:	e003      	b.n	9000f142 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000f13a:	1e63      	subs	r3, r4, #1
9000f13c:	b2da      	uxtb	r2, r3
9000f13e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f140:	b16a      	cbz	r2, 9000f15e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f144:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f146:	b153      	cbz	r3, 9000f15e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f148:	f000 fdb4 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000f14c:	2800      	cmp	r0, #0
9000f14e:	d0f4      	beq.n	9000f13a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000f150:	f000 fe4e 	bl	9000fdf0 <vTaskMissedYield>
			--cTxLock;
9000f154:	1e63      	subs	r3, r4, #1
9000f156:	b2da      	uxtb	r2, r3
9000f158:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f15a:	2a00      	cmp	r2, #0
9000f15c:	d1f1      	bne.n	9000f142 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f15e:	23ff      	movs	r3, #255	; 0xff
9000f160:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f164:	f7fe fe10 	bl	9000dd88 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f168:	f7fe fdec 	bl	9000dd44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f16c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f170:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f172:	2c00      	cmp	r4, #0
9000f174:	dd14      	ble.n	9000f1a0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f176:	f105 0610 	add.w	r6, r5, #16
9000f17a:	e003      	b.n	9000f184 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000f17c:	1e63      	subs	r3, r4, #1
9000f17e:	b2da      	uxtb	r2, r3
9000f180:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f182:	b16a      	cbz	r2, 9000f1a0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f184:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f186:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f188:	b153      	cbz	r3, 9000f1a0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f18a:	f000 fd93 	bl	9000fcb4 <xTaskRemoveFromEventList>
9000f18e:	2800      	cmp	r0, #0
9000f190:	d0f4      	beq.n	9000f17c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000f192:	f000 fe2d 	bl	9000fdf0 <vTaskMissedYield>
				--cRxLock;
9000f196:	1e63      	subs	r3, r4, #1
9000f198:	b2da      	uxtb	r2, r3
9000f19a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f19c:	2a00      	cmp	r2, #0
9000f19e:	d1f1      	bne.n	9000f184 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000f1a0:	23ff      	movs	r3, #255	; 0xff
9000f1a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000f1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000f1aa:	f7fe bded 	b.w	9000dd88 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000f1ae:	4622      	mov	r2, r4
9000f1b0:	4631      	mov	r1, r6
9000f1b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f1b6:	f000 fd33 	bl	9000fc20 <vTaskPlaceOnEventListRestricted>
9000f1ba:	e7b4      	b.n	9000f126 <vQueueWaitForMessageRestricted+0x32>

9000f1bc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000f1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000f1c0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000f1c2:	f7fe fdbf 	bl	9000dd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000f1c6:	4a34      	ldr	r2, [pc, #208]	; (9000f298 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000f1c8:	4e34      	ldr	r6, [pc, #208]	; (9000f29c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000f1ca:	6813      	ldr	r3, [r2, #0]
9000f1cc:	3301      	adds	r3, #1
9000f1ce:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000f1d0:	6833      	ldr	r3, [r6, #0]
9000f1d2:	2b00      	cmp	r3, #0
9000f1d4:	d032      	beq.n	9000f23c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000f1d6:	4c32      	ldr	r4, [pc, #200]	; (9000f2a0 <prvAddNewTaskToReadyList+0xe4>)
9000f1d8:	6823      	ldr	r3, [r4, #0]
9000f1da:	b33b      	cbz	r3, 9000f22c <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f1dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f1de:	4f31      	ldr	r7, [pc, #196]	; (9000f2a4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000f1e0:	4a31      	ldr	r2, [pc, #196]	; (9000f2a8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000f1e2:	4932      	ldr	r1, [pc, #200]	; (9000f2ac <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000f1e4:	6813      	ldr	r3, [r2, #0]
9000f1e6:	3301      	adds	r3, #1
9000f1e8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000f1ea:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000f1ec:	680b      	ldr	r3, [r1, #0]
9000f1ee:	4283      	cmp	r3, r0
9000f1f0:	d200      	bcs.n	9000f1f4 <prvAddNewTaskToReadyList+0x38>
9000f1f2:	6008      	str	r0, [r1, #0]
9000f1f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f1f8:	1d29      	adds	r1, r5, #4
9000f1fa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000f1fe:	f7fe fcf7 	bl	9000dbf0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000f202:	f7fe fdc1 	bl	9000dd88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000f206:	6823      	ldr	r3, [r4, #0]
9000f208:	b173      	cbz	r3, 9000f228 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000f20a:	6832      	ldr	r2, [r6, #0]
9000f20c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000f20e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000f210:	429a      	cmp	r2, r3
9000f212:	d209      	bcs.n	9000f228 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000f214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f21c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f220:	f3bf 8f4f 	dsb	sy
9000f224:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000f228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f22c:	6833      	ldr	r3, [r6, #0]
9000f22e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f232:	4f1c      	ldr	r7, [pc, #112]	; (9000f2a4 <prvAddNewTaskToReadyList+0xe8>)
9000f234:	4283      	cmp	r3, r0
9000f236:	d8d3      	bhi.n	9000f1e0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000f238:	6035      	str	r5, [r6, #0]
9000f23a:	e7d1      	b.n	9000f1e0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000f23c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000f23e:	6813      	ldr	r3, [r2, #0]
9000f240:	2b01      	cmp	r3, #1
9000f242:	d003      	beq.n	9000f24c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f244:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f246:	4f17      	ldr	r7, [pc, #92]	; (9000f2a4 <prvAddNewTaskToReadyList+0xe8>)
9000f248:	4c15      	ldr	r4, [pc, #84]	; (9000f2a0 <prvAddNewTaskToReadyList+0xe4>)
9000f24a:	e7c9      	b.n	9000f1e0 <prvAddNewTaskToReadyList+0x24>
9000f24c:	4f15      	ldr	r7, [pc, #84]	; (9000f2a4 <prvAddNewTaskToReadyList+0xe8>)
9000f24e:	463c      	mov	r4, r7
9000f250:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f254:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f256:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f258:	f7fe fcba 	bl	9000dbd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f25c:	45a0      	cmp	r8, r4
9000f25e:	d1f9      	bne.n	9000f254 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000f260:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000f2c4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000f264:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000f2c8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000f268:	4648      	mov	r0, r9
9000f26a:	4c0d      	ldr	r4, [pc, #52]	; (9000f2a0 <prvAddNewTaskToReadyList+0xe4>)
9000f26c:	f7fe fcb0 	bl	9000dbd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000f270:	4640      	mov	r0, r8
9000f272:	f7fe fcad 	bl	9000dbd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000f276:	480e      	ldr	r0, [pc, #56]	; (9000f2b0 <prvAddNewTaskToReadyList+0xf4>)
9000f278:	f7fe fcaa 	bl	9000dbd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000f27c:	480d      	ldr	r0, [pc, #52]	; (9000f2b4 <prvAddNewTaskToReadyList+0xf8>)
9000f27e:	f7fe fca7 	bl	9000dbd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000f282:	480d      	ldr	r0, [pc, #52]	; (9000f2b8 <prvAddNewTaskToReadyList+0xfc>)
9000f284:	f7fe fca4 	bl	9000dbd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000f288:	4b0c      	ldr	r3, [pc, #48]	; (9000f2bc <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000f28a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000f28c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000f290:	4b0b      	ldr	r3, [pc, #44]	; (9000f2c0 <prvAddNewTaskToReadyList+0x104>)
9000f292:	f8c3 8000 	str.w	r8, [r3]
}
9000f296:	e7a3      	b.n	9000f1e0 <prvAddNewTaskToReadyList+0x24>
9000f298:	2402505c 	.word	0x2402505c
9000f29c:	24024bf0 	.word	0x24024bf0
9000f2a0:	240250b8 	.word	0x240250b8
9000f2a4:	24024bfc 	.word	0x24024bfc
9000f2a8:	24025068 	.word	0x24025068
9000f2ac:	2402506c 	.word	0x2402506c
9000f2b0:	240250a4 	.word	0x240250a4
9000f2b4:	240250d0 	.word	0x240250d0
9000f2b8:	240250bc 	.word	0x240250bc
9000f2bc:	24024bf4 	.word	0x24024bf4
9000f2c0:	24024bf8 	.word	0x24024bf8
9000f2c4:	24025070 	.word	0x24025070
9000f2c8:	24025084 	.word	0x24025084

9000f2cc <prvIdleTask>:
{
9000f2cc:	b580      	push	{r7, lr}
9000f2ce:	4c22      	ldr	r4, [pc, #136]	; (9000f358 <prvIdleTask+0x8c>)
				taskYIELD();
9000f2d0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000f2d4:	4e21      	ldr	r6, [pc, #132]	; (9000f35c <prvIdleTask+0x90>)
9000f2d6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000f2da:	4d21      	ldr	r5, [pc, #132]	; (9000f360 <prvIdleTask+0x94>)
9000f2dc:	4f21      	ldr	r7, [pc, #132]	; (9000f364 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f2de:	6823      	ldr	r3, [r4, #0]
9000f2e0:	b353      	cbz	r3, 9000f338 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000f2e2:	f7fe fd2f 	bl	9000dd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f2e6:	68f3      	ldr	r3, [r6, #12]
9000f2e8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f2ec:	f10a 0004 	add.w	r0, sl, #4
9000f2f0:	f7fe fca6 	bl	9000dc40 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000f2f4:	682b      	ldr	r3, [r5, #0]
9000f2f6:	3b01      	subs	r3, #1
9000f2f8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000f2fa:	6823      	ldr	r3, [r4, #0]
9000f2fc:	3b01      	subs	r3, #1
9000f2fe:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000f300:	f7fe fd42 	bl	9000dd88 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000f304:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000f308:	b163      	cbz	r3, 9000f324 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000f30a:	2b01      	cmp	r3, #1
9000f30c:	d020      	beq.n	9000f350 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000f30e:	2b02      	cmp	r3, #2
9000f310:	d0e5      	beq.n	9000f2de <prvIdleTask+0x12>
9000f312:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f316:	f383 8811 	msr	BASEPRI, r3
9000f31a:	f3bf 8f6f 	isb	sy
9000f31e:	f3bf 8f4f 	dsb	sy
9000f322:	e7fe      	b.n	9000f322 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000f324:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000f328:	f7fe fbee 	bl	9000db08 <vPortFree>
				vPortFree( pxTCB );
9000f32c:	4650      	mov	r0, sl
9000f32e:	f7fe fbeb 	bl	9000db08 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f332:	6823      	ldr	r3, [r4, #0]
9000f334:	2b00      	cmp	r3, #0
9000f336:	d1d4      	bne.n	9000f2e2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000f338:	683b      	ldr	r3, [r7, #0]
9000f33a:	2b01      	cmp	r3, #1
9000f33c:	d905      	bls.n	9000f34a <prvIdleTask+0x7e>
				taskYIELD();
9000f33e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000f342:	f3bf 8f4f 	dsb	sy
9000f346:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000f34a:	f7f4 fe2d 	bl	90003fa8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000f34e:	e7c6      	b.n	9000f2de <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000f350:	4650      	mov	r0, sl
9000f352:	f7fe fbd9 	bl	9000db08 <vPortFree>
9000f356:	e7c2      	b.n	9000f2de <prvIdleTask+0x12>
9000f358:	24025060 	.word	0x24025060
9000f35c:	240250d0 	.word	0x240250d0
9000f360:	2402505c 	.word	0x2402505c
9000f364:	24024bfc 	.word	0x24024bfc

9000f368 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f368:	4b4a      	ldr	r3, [pc, #296]	; (9000f494 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000f36a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f36e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000f370:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f372:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000f374:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000f376:	2e00      	cmp	r6, #0
9000f378:	d040      	beq.n	9000f3fc <xTaskIncrementTick.part.0+0x94>
9000f37a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000f4a8 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000f37e:	f8db 3000 	ldr.w	r3, [fp]
9000f382:	429e      	cmp	r6, r3
9000f384:	d347      	bcc.n	9000f416 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f386:	4f44      	ldr	r7, [pc, #272]	; (9000f498 <xTaskIncrementTick.part.0+0x130>)
9000f388:	683b      	ldr	r3, [r7, #0]
9000f38a:	681d      	ldr	r5, [r3, #0]
9000f38c:	2d00      	cmp	r5, #0
9000f38e:	d077      	beq.n	9000f480 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000f390:	2500      	movs	r5, #0
9000f392:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000f4ac <xTaskIncrementTick.part.0+0x144>
9000f396:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000f4b0 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000f39a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000f4b4 <xTaskIncrementTick.part.0+0x14c>
9000f39e:	e022      	b.n	9000f3e6 <xTaskIncrementTick.part.0+0x7e>
9000f3a0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f3a2:	f7fe fc4d 	bl	9000dc40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f3a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f3a8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f3ac:	9901      	ldr	r1, [sp, #4]
9000f3ae:	b113      	cbz	r3, 9000f3b6 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f3b0:	f7fe fc46 	bl	9000dc40 <uxListRemove>
9000f3b4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000f3b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f3b8:	f8d8 2000 	ldr.w	r2, [r8]
9000f3bc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f3c0:	4293      	cmp	r3, r2
9000f3c2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f3c6:	d901      	bls.n	9000f3cc <xTaskIncrementTick.part.0+0x64>
9000f3c8:	f8c8 3000 	str.w	r3, [r8]
9000f3cc:	f7fe fc10 	bl	9000dbf0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f3d0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f3d4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f3d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000f3d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f3da:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000f3dc:	4291      	cmp	r1, r2
9000f3de:	bf28      	it	cs
9000f3e0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f3e2:	2b00      	cmp	r3, #0
9000f3e4:	d050      	beq.n	9000f488 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f3e6:	683b      	ldr	r3, [r7, #0]
9000f3e8:	68db      	ldr	r3, [r3, #12]
9000f3ea:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000f3ec:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f3ee:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000f3f0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f3f2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000f3f4:	d2d4      	bcs.n	9000f3a0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000f3f6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000f3fa:	e011      	b.n	9000f420 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000f3fc:	4b26      	ldr	r3, [pc, #152]	; (9000f498 <xTaskIncrementTick.part.0+0x130>)
9000f3fe:	681a      	ldr	r2, [r3, #0]
9000f400:	6812      	ldr	r2, [r2, #0]
9000f402:	b30a      	cbz	r2, 9000f448 <xTaskIncrementTick.part.0+0xe0>
9000f404:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f408:	f383 8811 	msr	BASEPRI, r3
9000f40c:	f3bf 8f6f 	isb	sy
9000f410:	f3bf 8f4f 	dsb	sy
9000f414:	e7fe      	b.n	9000f414 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000f416:	2500      	movs	r5, #0
9000f418:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000f4ac <xTaskIncrementTick.part.0+0x144>
9000f41c:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000f4b0 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f420:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000f424:	491d      	ldr	r1, [pc, #116]	; (9000f49c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000f42c:	009b      	lsls	r3, r3, #2
9000f42e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000f432:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000f434:	2a02      	cmp	r2, #2
9000f436:	bf28      	it	cs
9000f438:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000f43a:	2b00      	cmp	r3, #0
}
9000f43c:	bf0c      	ite	eq
9000f43e:	4628      	moveq	r0, r5
9000f440:	2001      	movne	r0, #1
9000f442:	b003      	add	sp, #12
9000f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000f448:	4a15      	ldr	r2, [pc, #84]	; (9000f4a0 <xTaskIncrementTick.part.0+0x138>)
9000f44a:	6818      	ldr	r0, [r3, #0]
9000f44c:	6811      	ldr	r1, [r2, #0]
9000f44e:	6019      	str	r1, [r3, #0]
9000f450:	4914      	ldr	r1, [pc, #80]	; (9000f4a4 <xTaskIncrementTick.part.0+0x13c>)
9000f452:	6010      	str	r0, [r2, #0]
9000f454:	680a      	ldr	r2, [r1, #0]
9000f456:	3201      	adds	r2, #1
9000f458:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f45a:	681a      	ldr	r2, [r3, #0]
9000f45c:	6812      	ldr	r2, [r2, #0]
9000f45e:	b932      	cbnz	r2, 9000f46e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000f460:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000f4a8 <xTaskIncrementTick.part.0+0x140>
9000f464:	f04f 33ff 	mov.w	r3, #4294967295
9000f468:	f8cb 3000 	str.w	r3, [fp]
9000f46c:	e787      	b.n	9000f37e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f46e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f470:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000f4a8 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f474:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f476:	68db      	ldr	r3, [r3, #12]
9000f478:	685b      	ldr	r3, [r3, #4]
9000f47a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000f47e:	e77e      	b.n	9000f37e <xTaskIncrementTick.part.0+0x16>
9000f480:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000f4ac <xTaskIncrementTick.part.0+0x144>
9000f484:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f4b0 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f488:	f04f 33ff 	mov.w	r3, #4294967295
9000f48c:	f8cb 3000 	str.w	r3, [fp]
					break;
9000f490:	e7c6      	b.n	9000f420 <xTaskIncrementTick.part.0+0xb8>
9000f492:	bf00      	nop
9000f494:	240250e4 	.word	0x240250e4
9000f498:	24024bf4 	.word	0x24024bf4
9000f49c:	240250e8 	.word	0x240250e8
9000f4a0:	24024bf8 	.word	0x24024bf8
9000f4a4:	2402509c 	.word	0x2402509c
9000f4a8:	24025098 	.word	0x24025098
9000f4ac:	24024bfc 	.word	0x24024bfc
9000f4b0:	24024bf0 	.word	0x24024bf0
9000f4b4:	2402506c 	.word	0x2402506c

9000f4b8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000f4bc:	4d41      	ldr	r5, [pc, #260]	; (9000f5c4 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000f4be:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000f4c0:	f7fe fc40 	bl	9000dd44 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000f4c4:	682b      	ldr	r3, [r5, #0]
9000f4c6:	3b01      	subs	r3, #1
9000f4c8:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f4ca:	682b      	ldr	r3, [r5, #0]
9000f4cc:	2b00      	cmp	r3, #0
9000f4ce:	d161      	bne.n	9000f594 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000f4d0:	4b3d      	ldr	r3, [pc, #244]	; (9000f5c8 <xTaskResumeAll.part.0+0x110>)
9000f4d2:	681b      	ldr	r3, [r3, #0]
9000f4d4:	2b00      	cmp	r3, #0
9000f4d6:	d05d      	beq.n	9000f594 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f4d8:	4e3c      	ldr	r6, [pc, #240]	; (9000f5cc <xTaskResumeAll.part.0+0x114>)
9000f4da:	6833      	ldr	r3, [r6, #0]
9000f4dc:	2b00      	cmp	r3, #0
9000f4de:	d06e      	beq.n	9000f5be <xTaskResumeAll.part.0+0x106>
9000f4e0:	4f3b      	ldr	r7, [pc, #236]	; (9000f5d0 <xTaskResumeAll.part.0+0x118>)
9000f4e2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000f5e0 <xTaskResumeAll.part.0+0x128>
9000f4e6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000f5e4 <xTaskResumeAll.part.0+0x12c>
9000f4ea:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000f5e8 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4ee:	68f3      	ldr	r3, [r6, #12]
9000f4f0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f4f2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f4f6:	f104 0018 	add.w	r0, r4, #24
9000f4fa:	f7fe fba1 	bl	9000dc40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f4fe:	4658      	mov	r0, fp
9000f500:	f7fe fb9e 	bl	9000dc40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000f504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f506:	683a      	ldr	r2, [r7, #0]
9000f508:	4659      	mov	r1, fp
9000f50a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f50e:	4293      	cmp	r3, r2
9000f510:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f514:	d900      	bls.n	9000f518 <xTaskResumeAll.part.0+0x60>
9000f516:	603b      	str	r3, [r7, #0]
9000f518:	f7fe fb6a 	bl	9000dbf0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f51c:	f8d8 3000 	ldr.w	r3, [r8]
9000f520:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000f522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f524:	429a      	cmp	r2, r3
9000f526:	d33d      	bcc.n	9000f5a4 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000f528:	2301      	movs	r3, #1
9000f52a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f52e:	6833      	ldr	r3, [r6, #0]
9000f530:	2b00      	cmp	r3, #0
9000f532:	d1dc      	bne.n	9000f4ee <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f534:	4b27      	ldr	r3, [pc, #156]	; (9000f5d4 <xTaskResumeAll.part.0+0x11c>)
9000f536:	681a      	ldr	r2, [r3, #0]
9000f538:	6812      	ldr	r2, [r2, #0]
9000f53a:	2a00      	cmp	r2, #0
9000f53c:	d03a      	beq.n	9000f5b4 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f53e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f540:	4b25      	ldr	r3, [pc, #148]	; (9000f5d8 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f542:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f544:	68d2      	ldr	r2, [r2, #12]
9000f546:	6852      	ldr	r2, [r2, #4]
9000f548:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000f54a:	4e24      	ldr	r6, [pc, #144]	; (9000f5dc <xTaskResumeAll.part.0+0x124>)
9000f54c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000f54e:	b194      	cbz	r4, 9000f576 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000f550:	2701      	movs	r7, #1
9000f552:	e006      	b.n	9000f562 <xTaskResumeAll.part.0+0xaa>
9000f554:	f7ff ff08 	bl	9000f368 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000f558:	b108      	cbz	r0, 9000f55e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000f55a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f55e:	3c01      	subs	r4, #1
9000f560:	d008      	beq.n	9000f574 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f562:	682b      	ldr	r3, [r5, #0]
9000f564:	2b00      	cmp	r3, #0
9000f566:	d0f5      	beq.n	9000f554 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000f568:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f56a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000f56c:	f103 0301 	add.w	r3, r3, #1
9000f570:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f572:	d1f6      	bne.n	9000f562 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000f574:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000f576:	f8da 3000 	ldr.w	r3, [sl]
9000f57a:	b15b      	cbz	r3, 9000f594 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000f57c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f584:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f588:	f3bf 8f4f 	dsb	sy
9000f58c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000f590:	2001      	movs	r0, #1
9000f592:	e000      	b.n	9000f596 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000f594:	2000      	movs	r0, #0
9000f596:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000f598:	f7fe fbf6 	bl	9000dd88 <vPortExitCritical>
}
9000f59c:	9801      	ldr	r0, [sp, #4]
9000f59e:	b003      	add	sp, #12
9000f5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f5a4:	6833      	ldr	r3, [r6, #0]
9000f5a6:	2b00      	cmp	r3, #0
9000f5a8:	d1a1      	bne.n	9000f4ee <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f5aa:	4b0a      	ldr	r3, [pc, #40]	; (9000f5d4 <xTaskResumeAll.part.0+0x11c>)
9000f5ac:	681a      	ldr	r2, [r3, #0]
9000f5ae:	6812      	ldr	r2, [r2, #0]
9000f5b0:	2a00      	cmp	r2, #0
9000f5b2:	d1c4      	bne.n	9000f53e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000f5b4:	4b08      	ldr	r3, [pc, #32]	; (9000f5d8 <xTaskResumeAll.part.0+0x120>)
9000f5b6:	f04f 32ff 	mov.w	r2, #4294967295
9000f5ba:	601a      	str	r2, [r3, #0]
9000f5bc:	e7c5      	b.n	9000f54a <xTaskResumeAll.part.0+0x92>
9000f5be:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f5e8 <xTaskResumeAll.part.0+0x130>
9000f5c2:	e7c2      	b.n	9000f54a <xTaskResumeAll.part.0+0x92>
9000f5c4:	24025064 	.word	0x24025064
9000f5c8:	2402505c 	.word	0x2402505c
9000f5cc:	240250a4 	.word	0x240250a4
9000f5d0:	2402506c 	.word	0x2402506c
9000f5d4:	24024bf4 	.word	0x24024bf4
9000f5d8:	24025098 	.word	0x24025098
9000f5dc:	240250a0 	.word	0x240250a0
9000f5e0:	24024bfc 	.word	0x24024bfc
9000f5e4:	24024bf0 	.word	0x24024bf0
9000f5e8:	240250e8 	.word	0x240250e8

9000f5ec <xTaskCreateStatic>:
	{
9000f5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f5f0:	b083      	sub	sp, #12
9000f5f2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000f5f4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
9000f5f8:	b1bb      	cbz	r3, 9000f62a <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000f5fa:	b16c      	cbz	r4, 9000f618 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f5fc:	2360      	movs	r3, #96	; 0x60
9000f5fe:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f600:	9b01      	ldr	r3, [sp, #4]
9000f602:	2b60      	cmp	r3, #96	; 0x60
9000f604:	d01a      	beq.n	9000f63c <xTaskCreateStatic+0x50>
9000f606:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f60a:	f383 8811 	msr	BASEPRI, r3
9000f60e:	f3bf 8f6f 	isb	sy
9000f612:	f3bf 8f4f 	dsb	sy
9000f616:	e7fe      	b.n	9000f616 <xTaskCreateStatic+0x2a>
9000f618:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f61c:	f383 8811 	msr	BASEPRI, r3
9000f620:	f3bf 8f6f 	isb	sy
9000f624:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f628:	e7fe      	b.n	9000f628 <xTaskCreateStatic+0x3c>
9000f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f62e:	f383 8811 	msr	BASEPRI, r3
9000f632:	f3bf 8f6f 	isb	sy
9000f636:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f63a:	e7fe      	b.n	9000f63a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f63e:	0096      	lsls	r6, r2, #2
9000f640:	4607      	mov	r7, r0
9000f642:	460d      	mov	r5, r1
9000f644:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f646:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f648:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f64a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f64c:	4632      	mov	r2, r6
9000f64e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f650:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f654:	f013 feb6 	bl	900233c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f658:	1f32      	subs	r2, r6, #4
9000f65a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000f65c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f65e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
9000f662:	2d00      	cmp	r5, #0
9000f664:	d069      	beq.n	9000f73a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f666:	782b      	ldrb	r3, [r5, #0]
9000f668:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000f66c:	2b00      	cmp	r3, #0
9000f66e:	d03b      	beq.n	9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f670:	786b      	ldrb	r3, [r5, #1]
9000f672:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000f676:	2b00      	cmp	r3, #0
9000f678:	d036      	beq.n	9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f67a:	78ab      	ldrb	r3, [r5, #2]
9000f67c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000f680:	b393      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f682:	78eb      	ldrb	r3, [r5, #3]
9000f684:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000f688:	b373      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f68a:	792b      	ldrb	r3, [r5, #4]
9000f68c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000f690:	b353      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f692:	796b      	ldrb	r3, [r5, #5]
9000f694:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000f698:	b333      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f69a:	79ab      	ldrb	r3, [r5, #6]
9000f69c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000f6a0:	b313      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6a2:	79eb      	ldrb	r3, [r5, #7]
9000f6a4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000f6a8:	b1f3      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6aa:	7a2b      	ldrb	r3, [r5, #8]
9000f6ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000f6b0:	b1d3      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6b2:	7a6b      	ldrb	r3, [r5, #9]
9000f6b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000f6b8:	b1b3      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6ba:	7aab      	ldrb	r3, [r5, #10]
9000f6bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000f6c0:	b193      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6c2:	7aeb      	ldrb	r3, [r5, #11]
9000f6c4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000f6c8:	b173      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6ca:	7b2b      	ldrb	r3, [r5, #12]
9000f6cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000f6d0:	b153      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6d2:	7b6b      	ldrb	r3, [r5, #13]
9000f6d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000f6d8:	b133      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6da:	7bab      	ldrb	r3, [r5, #14]
9000f6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000f6e0:	b113      	cbz	r3, 9000f6e8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f6e2:	7beb      	ldrb	r3, [r5, #15]
9000f6e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f6e8:	2300      	movs	r3, #0
9000f6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000f6ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000f6f0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f6f2:	1d20      	adds	r0, r4, #4
9000f6f4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000f6f6:	6526      	str	r6, [r4, #80]	; 0x50
9000f6f8:	bf28      	it	cs
9000f6fa:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000f6fc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000f6fe:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f700:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f704:	f7fe fa70 	bl	9000dbe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f708:	f104 0018 	add.w	r0, r4, #24
9000f70c:	f7fe fa6c 	bl	9000dbe8 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f710:	4642      	mov	r2, r8
9000f712:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000f714:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f716:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f718:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f71a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f71c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f71e:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f720:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f724:	f7fe fade 	bl	9000dce4 <pxPortInitialiseStack>
9000f728:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000f72a:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f72c:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f72e:	f7ff fd45 	bl	9000f1bc <prvAddNewTaskToReadyList>
	}
9000f732:	4620      	mov	r0, r4
9000f734:	b003      	add	sp, #12
9000f736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000f73a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000f73e:	e7d6      	b.n	9000f6ee <xTaskCreateStatic+0x102>

9000f740 <xTaskCreate>:
	{
9000f740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f744:	0096      	lsls	r6, r2, #2
	{
9000f746:	4680      	mov	r8, r0
9000f748:	460d      	mov	r5, r1
9000f74a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f74c:	4630      	mov	r0, r6
9000f74e:	f7fe f91d 	bl	9000d98c <pvPortMalloc>
			if( pxStack != NULL )
9000f752:	2800      	cmp	r0, #0
9000f754:	f000 8083 	beq.w	9000f85e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000f758:	4607      	mov	r7, r0
9000f75a:	2060      	movs	r0, #96	; 0x60
9000f75c:	f7fe f916 	bl	9000d98c <pvPortMalloc>
				if( pxNewTCB != NULL )
9000f760:	4604      	mov	r4, r0
9000f762:	2800      	cmp	r0, #0
9000f764:	d07f      	beq.n	9000f866 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f766:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
9000f768:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f76a:	4632      	mov	r2, r6
9000f76c:	4638      	mov	r0, r7
9000f76e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f770:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f774:	f013 fe26 	bl	900233c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f778:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9000f77c:	2d00      	cmp	r5, #0
9000f77e:	d078      	beq.n	9000f872 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f780:	782b      	ldrb	r3, [r5, #0]
9000f782:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000f786:	2b00      	cmp	r3, #0
9000f788:	d03b      	beq.n	9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f78a:	786b      	ldrb	r3, [r5, #1]
9000f78c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000f790:	2b00      	cmp	r3, #0
9000f792:	d036      	beq.n	9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f794:	78ab      	ldrb	r3, [r5, #2]
9000f796:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000f79a:	b393      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f79c:	78eb      	ldrb	r3, [r5, #3]
9000f79e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000f7a2:	b373      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7a4:	792b      	ldrb	r3, [r5, #4]
9000f7a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000f7aa:	b353      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7ac:	796b      	ldrb	r3, [r5, #5]
9000f7ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000f7b2:	b333      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7b4:	79ab      	ldrb	r3, [r5, #6]
9000f7b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000f7ba:	b313      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7bc:	79eb      	ldrb	r3, [r5, #7]
9000f7be:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000f7c2:	b1f3      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7c4:	7a2b      	ldrb	r3, [r5, #8]
9000f7c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000f7ca:	b1d3      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7cc:	7a6b      	ldrb	r3, [r5, #9]
9000f7ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000f7d2:	b1b3      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7d4:	7aab      	ldrb	r3, [r5, #10]
9000f7d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000f7da:	b193      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7dc:	7aeb      	ldrb	r3, [r5, #11]
9000f7de:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000f7e2:	b173      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7e4:	7b2b      	ldrb	r3, [r5, #12]
9000f7e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000f7ea:	b153      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7ec:	7b6b      	ldrb	r3, [r5, #13]
9000f7ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000f7f2:	b133      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7f4:	7bab      	ldrb	r3, [r5, #14]
9000f7f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000f7fa:	b113      	cbz	r3, 9000f802 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f7fc:	7beb      	ldrb	r3, [r5, #15]
9000f7fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f802:	2300      	movs	r3, #0
9000f804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000f808:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000f80a:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f80c:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f80e:	3e04      	subs	r6, #4
9000f810:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000f812:	6527      	str	r7, [r4, #80]	; 0x50
9000f814:	bf28      	it	cs
9000f816:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000f818:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000f81a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f81c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f820:	f7fe f9e2 	bl	9000dbe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f824:	f104 0018 	add.w	r0, r4, #24
9000f828:	f7fe f9de 	bl	9000dbe8 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f82c:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
9000f830:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f832:	464a      	mov	r2, r9
9000f834:	4641      	mov	r1, r8
9000f836:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f83a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f83c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f83e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f840:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f842:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f846:	f7fe fa4d 	bl	9000dce4 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9000f84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f84c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000f84e:	b103      	cbz	r3, 9000f852 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000f850:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f852:	4620      	mov	r0, r4
9000f854:	f7ff fcb2 	bl	9000f1bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000f858:	2001      	movs	r0, #1
	}
9000f85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f85e:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
9000f866:	4638      	mov	r0, r7
9000f868:	f7fe f94e 	bl	9000db08 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f86c:	f04f 30ff 	mov.w	r0, #4294967295
9000f870:	e7f3      	b.n	9000f85a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000f872:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000f876:	e7c7      	b.n	9000f808 <xTaskCreate+0xc8>

9000f878 <vTaskDelay>:
	{
9000f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000f87a:	b950      	cbnz	r0, 9000f892 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000f87c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f884:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f888:	f3bf 8f4f 	dsb	sy
9000f88c:	f3bf 8f6f 	isb	sy
	}
9000f890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000f892:	4d1e      	ldr	r5, [pc, #120]	; (9000f90c <vTaskDelay+0x94>)
9000f894:	682b      	ldr	r3, [r5, #0]
9000f896:	b143      	cbz	r3, 9000f8aa <vTaskDelay+0x32>
9000f898:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f89c:	f383 8811 	msr	BASEPRI, r3
9000f8a0:	f3bf 8f6f 	isb	sy
9000f8a4:	f3bf 8f4f 	dsb	sy
9000f8a8:	e7fe      	b.n	9000f8a8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000f8aa:	682b      	ldr	r3, [r5, #0]
9000f8ac:	4604      	mov	r4, r0
9000f8ae:	3301      	adds	r3, #1
9000f8b0:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000f8b2:	4b17      	ldr	r3, [pc, #92]	; (9000f910 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f8b4:	4e17      	ldr	r6, [pc, #92]	; (9000f914 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000f8b6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f8b8:	6830      	ldr	r0, [r6, #0]
9000f8ba:	3004      	adds	r0, #4
9000f8bc:	f7fe f9c0 	bl	9000dc40 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f8c0:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f8c2:	6833      	ldr	r3, [r6, #0]
9000f8c4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000f8c6:	d315      	bcc.n	9000f8f4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f8c8:	4b13      	ldr	r3, [pc, #76]	; (9000f918 <vTaskDelay+0xa0>)
9000f8ca:	6818      	ldr	r0, [r3, #0]
9000f8cc:	6831      	ldr	r1, [r6, #0]
9000f8ce:	3104      	adds	r1, #4
9000f8d0:	f7fe f99e 	bl	9000dc10 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000f8d4:	682b      	ldr	r3, [r5, #0]
9000f8d6:	b943      	cbnz	r3, 9000f8ea <vTaskDelay+0x72>
9000f8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8dc:	f383 8811 	msr	BASEPRI, r3
9000f8e0:	f3bf 8f6f 	isb	sy
9000f8e4:	f3bf 8f4f 	dsb	sy
9000f8e8:	e7fe      	b.n	9000f8e8 <vTaskDelay+0x70>
9000f8ea:	f7ff fde5 	bl	9000f4b8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000f8ee:	2800      	cmp	r0, #0
9000f8f0:	d0c4      	beq.n	9000f87c <vTaskDelay+0x4>
	}
9000f8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f8f4:	4b09      	ldr	r3, [pc, #36]	; (9000f91c <vTaskDelay+0xa4>)
9000f8f6:	6818      	ldr	r0, [r3, #0]
9000f8f8:	6831      	ldr	r1, [r6, #0]
9000f8fa:	3104      	adds	r1, #4
9000f8fc:	f7fe f988 	bl	9000dc10 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000f900:	4b07      	ldr	r3, [pc, #28]	; (9000f920 <vTaskDelay+0xa8>)
9000f902:	681a      	ldr	r2, [r3, #0]
9000f904:	4294      	cmp	r4, r2
9000f906:	d2e5      	bcs.n	9000f8d4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000f908:	601c      	str	r4, [r3, #0]
9000f90a:	e7e3      	b.n	9000f8d4 <vTaskDelay+0x5c>
9000f90c:	24025064 	.word	0x24025064
9000f910:	240250e4 	.word	0x240250e4
9000f914:	24024bf0 	.word	0x24024bf0
9000f918:	24024bf8 	.word	0x24024bf8
9000f91c:	24024bf4 	.word	0x24024bf4
9000f920:	24025098 	.word	0x24025098

9000f924 <vTaskStartScheduler>:
{
9000f924:	b570      	push	{r4, r5, r6, lr}
9000f926:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000f928:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f92a:	4668      	mov	r0, sp
9000f92c:	aa02      	add	r2, sp, #8
9000f92e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000f930:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f934:	f7fe f80c 	bl	9000d950 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000f938:	9d00      	ldr	r5, [sp, #0]
9000f93a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000f93e:	b1b8      	cbz	r0, 9000f970 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
9000f940:	b16d      	cbz	r5, 9000f95e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f942:	2260      	movs	r2, #96	; 0x60
9000f944:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f946:	9a03      	ldr	r2, [sp, #12]
9000f948:	2a60      	cmp	r2, #96	; 0x60
9000f94a:	d01a      	beq.n	9000f982 <vTaskStartScheduler+0x5e>
9000f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f950:	f383 8811 	msr	BASEPRI, r3
9000f954:	f3bf 8f6f 	isb	sy
9000f958:	f3bf 8f4f 	dsb	sy
9000f95c:	e7fe      	b.n	9000f95c <vTaskStartScheduler+0x38>
9000f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f962:	f383 8811 	msr	BASEPRI, r3
9000f966:	f3bf 8f6f 	isb	sy
9000f96a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f96e:	e7fe      	b.n	9000f96e <vTaskStartScheduler+0x4a>
9000f970:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f974:	f383 8811 	msr	BASEPRI, r3
9000f978:	f3bf 8f6f 	isb	sy
9000f97c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f980:	e7fe      	b.n	9000f980 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f982:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f984:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f986:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f988:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f98a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f98c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f990:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f992:	f013 fd17 	bl	900233c4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f996:	1f33      	subs	r3, r6, #4
9000f998:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f99a:	492a      	ldr	r1, [pc, #168]	; (9000fa44 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f99c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f99e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f9a0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000f9a4:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f9a6:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f9aa:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9000f9ae:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000f9b0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f9b4:	f7fe f918 	bl	9000dbe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f9b8:	f105 0018 	add.w	r0, r5, #24
9000f9bc:	f7fe f914 	bl	9000dbe8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f9c0:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f9c2:	4622      	mov	r2, r4
9000f9c4:	4920      	ldr	r1, [pc, #128]	; (9000fa48 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000f9c6:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f9c8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f9ca:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f9cc:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f9ce:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f9d0:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f9d2:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f9d6:	f7fe f985 	bl	9000dce4 <pxPortInitialiseStack>
9000f9da:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000f9dc:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f9de:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f9e0:	f7ff fbec 	bl	9000f1bc <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000f9e4:	f000 fca4 	bl	90010330 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000f9e8:	2801      	cmp	r0, #1
9000f9ea:	d00c      	beq.n	9000fa06 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000f9ec:	3001      	adds	r0, #1
9000f9ee:	d001      	beq.n	9000f9f4 <vTaskStartScheduler+0xd0>
}
9000f9f0:	b004      	add	sp, #16
9000f9f2:	bd70      	pop	{r4, r5, r6, pc}
9000f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9f8:	f383 8811 	msr	BASEPRI, r3
9000f9fc:	f3bf 8f6f 	isb	sy
9000fa00:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000fa04:	e7fe      	b.n	9000fa04 <vTaskStartScheduler+0xe0>
9000fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa0a:	f383 8811 	msr	BASEPRI, r3
9000fa0e:	f3bf 8f6f 	isb	sy
9000fa12:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000fa16:	4b0d      	ldr	r3, [pc, #52]	; (9000fa4c <vTaskStartScheduler+0x128>)
9000fa18:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000fa1c:	490c      	ldr	r1, [pc, #48]	; (9000fa50 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000fa1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000fa20:	4b0c      	ldr	r3, [pc, #48]	; (9000fa54 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000fa22:	4a0d      	ldr	r2, [pc, #52]	; (9000fa58 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000fa24:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000fa26:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000fa28:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000fa2a:	b143      	cbz	r3, 9000fa3e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000fa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fa2e:	b10b      	cbz	r3, 9000fa34 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fa30:	2000      	movs	r0, #0
9000fa32:	4798      	blx	r3
}
9000fa34:	b004      	add	sp, #16
9000fa36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000fa3a:	f7fe ba15 	b.w	9000de68 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000fa3e:	6813      	ldr	r3, [r2, #0]
9000fa40:	e7f4      	b.n	9000fa2c <vTaskStartScheduler+0x108>
9000fa42:	bf00      	nop
9000fa44:	454c4449 	.word	0x454c4449
9000fa48:	9000f2cd 	.word	0x9000f2cd
9000fa4c:	24025098 	.word	0x24025098
9000fa50:	240250b8 	.word	0x240250b8
9000fa54:	240250e4 	.word	0x240250e4
9000fa58:	24024bf0 	.word	0x24024bf0

9000fa5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000fa5c:	4a02      	ldr	r2, [pc, #8]	; (9000fa68 <vTaskSuspendAll+0xc>)
9000fa5e:	6813      	ldr	r3, [r2, #0]
9000fa60:	3301      	adds	r3, #1
9000fa62:	6013      	str	r3, [r2, #0]
}
9000fa64:	4770      	bx	lr
9000fa66:	bf00      	nop
9000fa68:	24025064 	.word	0x24025064

9000fa6c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000fa6c:	4b06      	ldr	r3, [pc, #24]	; (9000fa88 <xTaskResumeAll+0x1c>)
9000fa6e:	681b      	ldr	r3, [r3, #0]
9000fa70:	b943      	cbnz	r3, 9000fa84 <xTaskResumeAll+0x18>
9000fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa76:	f383 8811 	msr	BASEPRI, r3
9000fa7a:	f3bf 8f6f 	isb	sy
9000fa7e:	f3bf 8f4f 	dsb	sy
9000fa82:	e7fe      	b.n	9000fa82 <xTaskResumeAll+0x16>
9000fa84:	f7ff bd18 	b.w	9000f4b8 <xTaskResumeAll.part.0>
9000fa88:	24025064 	.word	0x24025064

9000fa8c <xTaskGetTickCount>:
		xTicks = xTickCount;
9000fa8c:	4b01      	ldr	r3, [pc, #4]	; (9000fa94 <xTaskGetTickCount+0x8>)
9000fa8e:	6818      	ldr	r0, [r3, #0]
}
9000fa90:	4770      	bx	lr
9000fa92:	bf00      	nop
9000fa94:	240250e4 	.word	0x240250e4

9000fa98 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fa98:	4b05      	ldr	r3, [pc, #20]	; (9000fab0 <xTaskIncrementTick+0x18>)
9000fa9a:	681b      	ldr	r3, [r3, #0]
9000fa9c:	b90b      	cbnz	r3, 9000faa2 <xTaskIncrementTick+0xa>
9000fa9e:	f7ff bc63 	b.w	9000f368 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000faa2:	4a04      	ldr	r2, [pc, #16]	; (9000fab4 <xTaskIncrementTick+0x1c>)
}
9000faa4:	2000      	movs	r0, #0
		++xPendedTicks;
9000faa6:	6813      	ldr	r3, [r2, #0]
9000faa8:	3301      	adds	r3, #1
9000faaa:	6013      	str	r3, [r2, #0]
}
9000faac:	4770      	bx	lr
9000faae:	bf00      	nop
9000fab0:	24025064 	.word	0x24025064
9000fab4:	240250a0 	.word	0x240250a0

9000fab8 <vTaskSetApplicationTaskTag>:
	{
9000fab8:	b538      	push	{r3, r4, r5, lr}
9000faba:	460d      	mov	r5, r1
		if( xTask == NULL )
9000fabc:	b138      	cbz	r0, 9000face <vTaskSetApplicationTaskTag+0x16>
9000fabe:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000fac0:	f7fe f940 	bl	9000dd44 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000fac4:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000fac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000faca:	f7fe b95d 	b.w	9000dd88 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000face:	4b04      	ldr	r3, [pc, #16]	; (9000fae0 <vTaskSetApplicationTaskTag+0x28>)
9000fad0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000fad2:	f7fe f937 	bl	9000dd44 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000fad6:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000fad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000fadc:	f7fe b954 	b.w	9000dd88 <vPortExitCritical>
9000fae0:	24024bf0 	.word	0x24024bf0

9000fae4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000fae4:	4b27      	ldr	r3, [pc, #156]	; (9000fb84 <vTaskSwitchContext+0xa0>)
9000fae6:	681b      	ldr	r3, [r3, #0]
9000fae8:	b11b      	cbz	r3, 9000faf2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000faea:	4b27      	ldr	r3, [pc, #156]	; (9000fb88 <vTaskSwitchContext+0xa4>)
9000faec:	2201      	movs	r2, #1
9000faee:	601a      	str	r2, [r3, #0]
9000faf0:	4770      	bx	lr
{
9000faf2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000faf4:	4a24      	ldr	r2, [pc, #144]	; (9000fb88 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
9000faf6:	4c25      	ldr	r4, [pc, #148]	; (9000fb8c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
9000faf8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000fafa:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000fafc:	2b00      	cmp	r3, #0
9000fafe:	d036      	beq.n	9000fb6e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
9000fb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fb02:	b10b      	cbz	r3, 9000fb08 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fb04:	2001      	movs	r0, #1
9000fb06:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb08:	4d21      	ldr	r5, [pc, #132]	; (9000fb90 <vTaskSwitchContext+0xac>)
9000fb0a:	4922      	ldr	r1, [pc, #136]	; (9000fb94 <vTaskSwitchContext+0xb0>)
9000fb0c:	682b      	ldr	r3, [r5, #0]
9000fb0e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000fb12:	0098      	lsls	r0, r3, #2
9000fb14:	0092      	lsls	r2, r2, #2
9000fb16:	588a      	ldr	r2, [r1, r2]
9000fb18:	b942      	cbnz	r2, 9000fb2c <vTaskSwitchContext+0x48>
9000fb1a:	b1fb      	cbz	r3, 9000fb5c <vTaskSwitchContext+0x78>
9000fb1c:	3b01      	subs	r3, #1
9000fb1e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000fb22:	0098      	lsls	r0, r3, #2
9000fb24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000fb28:	2a00      	cmp	r2, #0
9000fb2a:	d0f6      	beq.n	9000fb1a <vTaskSwitchContext+0x36>
9000fb2c:	4418      	add	r0, r3
9000fb2e:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
9000fb32:	f8dc 1004 	ldr.w	r1, [ip, #4]
9000fb36:	4662      	mov	r2, ip
9000fb38:	6849      	ldr	r1, [r1, #4]
9000fb3a:	3208      	adds	r2, #8
9000fb3c:	4291      	cmp	r1, r2
9000fb3e:	f8cc 1004 	str.w	r1, [ip, #4]
9000fb42:	d01b      	beq.n	9000fb7c <vTaskSwitchContext+0x98>
9000fb44:	68ca      	ldr	r2, [r1, #12]
9000fb46:	6022      	str	r2, [r4, #0]
9000fb48:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000fb4a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000fb4c:	b1a3      	cbz	r3, 9000fb78 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9000fb4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fb50:	b11b      	cbz	r3, 9000fb5a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fb52:	2000      	movs	r0, #0
}
9000fb54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fb58:	4718      	bx	r3
}
9000fb5a:	bd70      	pop	{r4, r5, r6, pc}
9000fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb60:	f383 8811 	msr	BASEPRI, r3
9000fb64:	f3bf 8f6f 	isb	sy
9000fb68:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb6c:	e7fe      	b.n	9000fb6c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9000fb6e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000fb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fb72:	2b00      	cmp	r3, #0
9000fb74:	d1c6      	bne.n	9000fb04 <vTaskSwitchContext+0x20>
9000fb76:	e7c7      	b.n	9000fb08 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000fb78:	6823      	ldr	r3, [r4, #0]
9000fb7a:	e7e8      	b.n	9000fb4e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb7c:	6849      	ldr	r1, [r1, #4]
9000fb7e:	f8cc 1004 	str.w	r1, [ip, #4]
9000fb82:	e7df      	b.n	9000fb44 <vTaskSwitchContext+0x60>
9000fb84:	24025064 	.word	0x24025064
9000fb88:	240250e8 	.word	0x240250e8
9000fb8c:	24024bf0 	.word	0x24024bf0
9000fb90:	2402506c 	.word	0x2402506c
9000fb94:	24024bfc 	.word	0x24024bfc

9000fb98 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000fb98:	b1f0      	cbz	r0, 9000fbd8 <vTaskPlaceOnEventList+0x40>
{
9000fb9a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fb9c:	4d1a      	ldr	r5, [pc, #104]	; (9000fc08 <vTaskPlaceOnEventList+0x70>)
9000fb9e:	460c      	mov	r4, r1
9000fba0:	6829      	ldr	r1, [r5, #0]
9000fba2:	3118      	adds	r1, #24
9000fba4:	f7fe f834 	bl	9000dc10 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000fba8:	4b18      	ldr	r3, [pc, #96]	; (9000fc0c <vTaskPlaceOnEventList+0x74>)
9000fbaa:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fbac:	6828      	ldr	r0, [r5, #0]
9000fbae:	3004      	adds	r0, #4
9000fbb0:	f7fe f846 	bl	9000dc40 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000fbb4:	1c63      	adds	r3, r4, #1
9000fbb6:	d020      	beq.n	9000fbfa <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fbb8:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fbba:	682b      	ldr	r3, [r5, #0]
9000fbbc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fbbe:	d214      	bcs.n	9000fbea <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbc0:	4b13      	ldr	r3, [pc, #76]	; (9000fc10 <vTaskPlaceOnEventList+0x78>)
9000fbc2:	6818      	ldr	r0, [r3, #0]
9000fbc4:	6829      	ldr	r1, [r5, #0]
9000fbc6:	3104      	adds	r1, #4
9000fbc8:	f7fe f822 	bl	9000dc10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fbcc:	4b11      	ldr	r3, [pc, #68]	; (9000fc14 <vTaskPlaceOnEventList+0x7c>)
9000fbce:	681a      	ldr	r2, [r3, #0]
9000fbd0:	4294      	cmp	r4, r2
9000fbd2:	d200      	bcs.n	9000fbd6 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000fbd4:	601c      	str	r4, [r3, #0]
}
9000fbd6:	bd70      	pop	{r4, r5, r6, pc}
9000fbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbdc:	f383 8811 	msr	BASEPRI, r3
9000fbe0:	f3bf 8f6f 	isb	sy
9000fbe4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000fbe8:	e7fe      	b.n	9000fbe8 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbea:	4b0b      	ldr	r3, [pc, #44]	; (9000fc18 <vTaskPlaceOnEventList+0x80>)
9000fbec:	6818      	ldr	r0, [r3, #0]
9000fbee:	6829      	ldr	r1, [r5, #0]
}
9000fbf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbf4:	3104      	adds	r1, #4
9000fbf6:	f7fe b80b 	b.w	9000dc10 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fbfa:	6829      	ldr	r1, [r5, #0]
9000fbfc:	4807      	ldr	r0, [pc, #28]	; (9000fc1c <vTaskPlaceOnEventList+0x84>)
9000fbfe:	3104      	adds	r1, #4
}
9000fc00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc04:	f7fd bff4 	b.w	9000dbf0 <vListInsertEnd>
9000fc08:	24024bf0 	.word	0x24024bf0
9000fc0c:	240250e4 	.word	0x240250e4
9000fc10:	24024bf4 	.word	0x24024bf4
9000fc14:	24025098 	.word	0x24025098
9000fc18:	24024bf8 	.word	0x24024bf8
9000fc1c:	240250bc 	.word	0x240250bc

9000fc20 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000fc20:	b358      	cbz	r0, 9000fc7a <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000fc22:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fc24:	4e1d      	ldr	r6, [pc, #116]	; (9000fc9c <vTaskPlaceOnEventListRestricted+0x7c>)
9000fc26:	460c      	mov	r4, r1
9000fc28:	4615      	mov	r5, r2
9000fc2a:	6831      	ldr	r1, [r6, #0]
9000fc2c:	3118      	adds	r1, #24
9000fc2e:	f7fd ffdf 	bl	9000dbf0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000fc32:	b165      	cbz	r5, 9000fc4e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000fc34:	4b1a      	ldr	r3, [pc, #104]	; (9000fca0 <vTaskPlaceOnEventListRestricted+0x80>)
9000fc36:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fc38:	6830      	ldr	r0, [r6, #0]
9000fc3a:	3004      	adds	r0, #4
9000fc3c:	f7fe f800 	bl	9000dc40 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc40:	6831      	ldr	r1, [r6, #0]
9000fc42:	4818      	ldr	r0, [pc, #96]	; (9000fca4 <vTaskPlaceOnEventListRestricted+0x84>)
9000fc44:	3104      	adds	r1, #4
	}
9000fc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc4a:	f7fd bfd1 	b.w	9000dbf0 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000fc4e:	4b14      	ldr	r3, [pc, #80]	; (9000fca0 <vTaskPlaceOnEventListRestricted+0x80>)
9000fc50:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fc52:	6830      	ldr	r0, [r6, #0]
9000fc54:	3004      	adds	r0, #4
9000fc56:	f7fd fff3 	bl	9000dc40 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fc5a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fc5c:	6833      	ldr	r3, [r6, #0]
9000fc5e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fc60:	d214      	bcs.n	9000fc8c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc62:	4b11      	ldr	r3, [pc, #68]	; (9000fca8 <vTaskPlaceOnEventListRestricted+0x88>)
9000fc64:	6818      	ldr	r0, [r3, #0]
9000fc66:	6831      	ldr	r1, [r6, #0]
9000fc68:	3104      	adds	r1, #4
9000fc6a:	f7fd ffd1 	bl	9000dc10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fc6e:	4b0f      	ldr	r3, [pc, #60]	; (9000fcac <vTaskPlaceOnEventListRestricted+0x8c>)
9000fc70:	681a      	ldr	r2, [r3, #0]
9000fc72:	4294      	cmp	r4, r2
9000fc74:	d200      	bcs.n	9000fc78 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000fc76:	601c      	str	r4, [r3, #0]
	}
9000fc78:	bd70      	pop	{r4, r5, r6, pc}
9000fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc7e:	f383 8811 	msr	BASEPRI, r3
9000fc82:	f3bf 8f6f 	isb	sy
9000fc86:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000fc8a:	e7fe      	b.n	9000fc8a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc8c:	4b08      	ldr	r3, [pc, #32]	; (9000fcb0 <vTaskPlaceOnEventListRestricted+0x90>)
9000fc8e:	6818      	ldr	r0, [r3, #0]
9000fc90:	6831      	ldr	r1, [r6, #0]
	}
9000fc92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fc96:	3104      	adds	r1, #4
9000fc98:	f7fd bfba 	b.w	9000dc10 <vListInsert>
9000fc9c:	24024bf0 	.word	0x24024bf0
9000fca0:	240250e4 	.word	0x240250e4
9000fca4:	240250bc 	.word	0x240250bc
9000fca8:	24024bf4 	.word	0x24024bf4
9000fcac:	24025098 	.word	0x24025098
9000fcb0:	24024bf8 	.word	0x24024bf8

9000fcb4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fcb4:	68c3      	ldr	r3, [r0, #12]
{
9000fcb6:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fcb8:	68dc      	ldr	r4, [r3, #12]
{
9000fcba:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000fcbc:	b35c      	cbz	r4, 9000fd16 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000fcbe:	f104 0518 	add.w	r5, r4, #24
9000fcc2:	4628      	mov	r0, r5
9000fcc4:	f7fd ffbc 	bl	9000dc40 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fcc8:	4b19      	ldr	r3, [pc, #100]	; (9000fd30 <xTaskRemoveFromEventList+0x7c>)
9000fcca:	681b      	ldr	r3, [r3, #0]
9000fccc:	b17b      	cbz	r3, 9000fcee <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000fcce:	4629      	mov	r1, r5
9000fcd0:	4818      	ldr	r0, [pc, #96]	; (9000fd34 <xTaskRemoveFromEventList+0x80>)
9000fcd2:	f7fd ff8d 	bl	9000dbf0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000fcd6:	4b18      	ldr	r3, [pc, #96]	; (9000fd38 <xTaskRemoveFromEventList+0x84>)
9000fcd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000fcda:	681b      	ldr	r3, [r3, #0]
9000fcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fcde:	429a      	cmp	r2, r3
9000fce0:	d922      	bls.n	9000fd28 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000fce2:	2301      	movs	r3, #1
9000fce4:	4a15      	ldr	r2, [pc, #84]	; (9000fd3c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000fce6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000fce8:	6013      	str	r3, [r2, #0]
}
9000fcea:	b003      	add	sp, #12
9000fcec:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000fcee:	1d21      	adds	r1, r4, #4
9000fcf0:	4608      	mov	r0, r1
9000fcf2:	9101      	str	r1, [sp, #4]
9000fcf4:	f7fd ffa4 	bl	9000dc40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000fcf8:	4a11      	ldr	r2, [pc, #68]	; (9000fd40 <xTaskRemoveFromEventList+0x8c>)
9000fcfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fcfc:	6810      	ldr	r0, [r2, #0]
9000fcfe:	9901      	ldr	r1, [sp, #4]
9000fd00:	4283      	cmp	r3, r0
9000fd02:	d900      	bls.n	9000fd06 <xTaskRemoveFromEventList+0x52>
9000fd04:	6013      	str	r3, [r2, #0]
9000fd06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fd0a:	480e      	ldr	r0, [pc, #56]	; (9000fd44 <xTaskRemoveFromEventList+0x90>)
9000fd0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000fd10:	f7fd ff6e 	bl	9000dbf0 <vListInsertEnd>
9000fd14:	e7df      	b.n	9000fcd6 <xTaskRemoveFromEventList+0x22>
9000fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd1a:	f383 8811 	msr	BASEPRI, r3
9000fd1e:	f3bf 8f6f 	isb	sy
9000fd22:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000fd26:	e7fe      	b.n	9000fd26 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000fd28:	2000      	movs	r0, #0
}
9000fd2a:	b003      	add	sp, #12
9000fd2c:	bd30      	pop	{r4, r5, pc}
9000fd2e:	bf00      	nop
9000fd30:	24025064 	.word	0x24025064
9000fd34:	240250a4 	.word	0x240250a4
9000fd38:	24024bf0 	.word	0x24024bf0
9000fd3c:	240250e8 	.word	0x240250e8
9000fd40:	2402506c 	.word	0x2402506c
9000fd44:	24024bfc 	.word	0x24024bfc

9000fd48 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fd48:	4a03      	ldr	r2, [pc, #12]	; (9000fd58 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fd4a:	4b04      	ldr	r3, [pc, #16]	; (9000fd5c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fd4c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fd4e:	681b      	ldr	r3, [r3, #0]
9000fd50:	e9c0 2300 	strd	r2, r3, [r0]
}
9000fd54:	4770      	bx	lr
9000fd56:	bf00      	nop
9000fd58:	2402509c 	.word	0x2402509c
9000fd5c:	240250e4 	.word	0x240250e4

9000fd60 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000fd60:	b328      	cbz	r0, 9000fdae <xTaskCheckForTimeOut+0x4e>
{
9000fd62:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fd64:	460d      	mov	r5, r1
9000fd66:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000fd68:	b1c1      	cbz	r1, 9000fd9c <xTaskCheckForTimeOut+0x3c>
9000fd6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000fd6c:	f7fd ffea 	bl	9000dd44 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000fd70:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000fd72:	4a1d      	ldr	r2, [pc, #116]	; (9000fde8 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000fd74:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000fd76:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000fd78:	d030      	beq.n	9000fddc <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fd7a:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000fdec <xTaskCheckForTimeOut+0x8c>
9000fd7e:	6826      	ldr	r6, [r4, #0]
9000fd80:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fd84:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fd86:	42be      	cmp	r6, r7
9000fd88:	d01a      	beq.n	9000fdc0 <xTaskCheckForTimeOut+0x60>
9000fd8a:	4288      	cmp	r0, r1
9000fd8c:	d818      	bhi.n	9000fdc0 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000fd8e:	2001      	movs	r0, #1
9000fd90:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000fd92:	f7fd fff9 	bl	9000dd88 <vPortExitCritical>
}
9000fd96:	9801      	ldr	r0, [sp, #4]
9000fd98:	b003      	add	sp, #12
9000fd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fda0:	f383 8811 	msr	BASEPRI, r3
9000fda4:	f3bf 8f6f 	isb	sy
9000fda8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000fdac:	e7fe      	b.n	9000fdac <xTaskCheckForTimeOut+0x4c>
9000fdae:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fdb2:	f383 8811 	msr	BASEPRI, r3
9000fdb6:	f3bf 8f6f 	isb	sy
9000fdba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000fdbe:	e7fe      	b.n	9000fdbe <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fdc0:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000fdc4:	4573      	cmp	r3, lr
9000fdc6:	d90b      	bls.n	9000fde0 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000fdc8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fdca:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fdce:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000fdd0:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000fdd2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000fdd4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fdd6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000fdda:	e7d9      	b.n	9000fd90 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000fddc:	2000      	movs	r0, #0
9000fdde:	e7d7      	b.n	9000fd90 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000fde0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000fde2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000fde4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000fde6:	e7d3      	b.n	9000fd90 <xTaskCheckForTimeOut+0x30>
9000fde8:	240250e4 	.word	0x240250e4
9000fdec:	2402509c 	.word	0x2402509c

9000fdf0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000fdf0:	4b01      	ldr	r3, [pc, #4]	; (9000fdf8 <vTaskMissedYield+0x8>)
9000fdf2:	2201      	movs	r2, #1
9000fdf4:	601a      	str	r2, [r3, #0]
}
9000fdf6:	4770      	bx	lr
9000fdf8:	240250e8 	.word	0x240250e8

9000fdfc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000fdfc:	4b01      	ldr	r3, [pc, #4]	; (9000fe04 <xTaskGetCurrentTaskHandle+0x8>)
9000fdfe:	6818      	ldr	r0, [r3, #0]
	}
9000fe00:	4770      	bx	lr
9000fe02:	bf00      	nop
9000fe04:	24024bf0 	.word	0x24024bf0

9000fe08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000fe08:	4b05      	ldr	r3, [pc, #20]	; (9000fe20 <xTaskGetSchedulerState+0x18>)
9000fe0a:	681b      	ldr	r3, [r3, #0]
9000fe0c:	b133      	cbz	r3, 9000fe1c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fe0e:	4b05      	ldr	r3, [pc, #20]	; (9000fe24 <xTaskGetSchedulerState+0x1c>)
9000fe10:	6818      	ldr	r0, [r3, #0]
9000fe12:	fab0 f080 	clz	r0, r0
9000fe16:	0940      	lsrs	r0, r0, #5
9000fe18:	0040      	lsls	r0, r0, #1
9000fe1a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000fe1c:	2001      	movs	r0, #1
	}
9000fe1e:	4770      	bx	lr
9000fe20:	240250b8 	.word	0x240250b8
9000fe24:	24025064 	.word	0x24025064

9000fe28 <xTaskPriorityInherit>:
	{
9000fe28:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000fe2a:	4604      	mov	r4, r0
	{
9000fe2c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000fe2e:	b1c8      	cbz	r0, 9000fe64 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000fe30:	4d1d      	ldr	r5, [pc, #116]	; (9000fea8 <xTaskPriorityInherit+0x80>)
9000fe32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000fe34:	682a      	ldr	r2, [r5, #0]
9000fe36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fe38:	4293      	cmp	r3, r2
9000fe3a:	d215      	bcs.n	9000fe68 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000fe3c:	6982      	ldr	r2, [r0, #24]
9000fe3e:	2a00      	cmp	r2, #0
9000fe40:	db04      	blt.n	9000fe4c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fe42:	682a      	ldr	r2, [r5, #0]
9000fe44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fe46:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000fe4a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000fe4c:	4e17      	ldr	r6, [pc, #92]	; (9000feac <xTaskPriorityInherit+0x84>)
9000fe4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fe52:	6962      	ldr	r2, [r4, #20]
9000fe54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000fe58:	429a      	cmp	r2, r3
9000fe5a:	d00e      	beq.n	9000fe7a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe5c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000fe5e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fe62:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000fe64:	b002      	add	sp, #8
9000fe66:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000fe68:	682b      	ldr	r3, [r5, #0]
9000fe6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000fe6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fe6e:	4298      	cmp	r0, r3
9000fe70:	bf2c      	ite	cs
9000fe72:	2000      	movcs	r0, #0
9000fe74:	2001      	movcc	r0, #1
	}
9000fe76:	b002      	add	sp, #8
9000fe78:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fe7a:	1d21      	adds	r1, r4, #4
9000fe7c:	4608      	mov	r0, r1
9000fe7e:	9101      	str	r1, [sp, #4]
9000fe80:	f7fd fede 	bl	9000dc40 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe84:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe86:	4b0a      	ldr	r3, [pc, #40]	; (9000feb0 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe88:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe8a:	681a      	ldr	r2, [r3, #0]
9000fe8c:	9901      	ldr	r1, [sp, #4]
9000fe8e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fe90:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fe92:	d900      	bls.n	9000fe96 <xTaskPriorityInherit+0x6e>
9000fe94:	6018      	str	r0, [r3, #0]
9000fe96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fe9a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000fe9e:	f7fd fea7 	bl	9000dbf0 <vListInsertEnd>
				xReturn = pdTRUE;
9000fea2:	2001      	movs	r0, #1
9000fea4:	e7de      	b.n	9000fe64 <xTaskPriorityInherit+0x3c>
9000fea6:	bf00      	nop
9000fea8:	24024bf0 	.word	0x24024bf0
9000feac:	24024bfc 	.word	0x24024bfc
9000feb0:	2402506c 	.word	0x2402506c

9000feb4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000feb4:	b318      	cbz	r0, 9000fefe <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000feb6:	4b1f      	ldr	r3, [pc, #124]	; (9000ff34 <xTaskPriorityDisinherit+0x80>)
	{
9000feb8:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000feba:	681c      	ldr	r4, [r3, #0]
	{
9000febc:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000febe:	4284      	cmp	r4, r0
9000fec0:	d008      	beq.n	9000fed4 <xTaskPriorityDisinherit+0x20>
9000fec2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fec6:	f383 8811 	msr	BASEPRI, r3
9000feca:	f3bf 8f6f 	isb	sy
9000fece:	f3bf 8f4f 	dsb	sy
9000fed2:	e7fe      	b.n	9000fed2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000fed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000fed6:	b14b      	cbz	r3, 9000feec <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fed8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000feda:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fedc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000fede:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000fee0:	4291      	cmp	r1, r2
9000fee2:	d000      	beq.n	9000fee6 <xTaskPriorityDisinherit+0x32>
9000fee4:	b16b      	cbz	r3, 9000ff02 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000fee6:	2000      	movs	r0, #0
	}
9000fee8:	b002      	add	sp, #8
9000feea:	bd10      	pop	{r4, pc}
9000feec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fef0:	f383 8811 	msr	BASEPRI, r3
9000fef4:	f3bf 8f6f 	isb	sy
9000fef8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000fefc:	e7fe      	b.n	9000fefc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000fefe:	2000      	movs	r0, #0
	}
9000ff00:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ff02:	1d21      	adds	r1, r4, #4
9000ff04:	4608      	mov	r0, r1
9000ff06:	9101      	str	r1, [sp, #4]
9000ff08:	f7fd fe9a 	bl	9000dc40 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000ff0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000ff0e:	4b0a      	ldr	r3, [pc, #40]	; (9000ff38 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ff10:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000ff14:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000ff16:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ff18:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000ff1a:	681a      	ldr	r2, [r3, #0]
9000ff1c:	4290      	cmp	r0, r2
9000ff1e:	d900      	bls.n	9000ff22 <xTaskPriorityDisinherit+0x6e>
9000ff20:	6018      	str	r0, [r3, #0]
9000ff22:	4b06      	ldr	r3, [pc, #24]	; (9000ff3c <xTaskPriorityDisinherit+0x88>)
9000ff24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ff28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000ff2c:	f7fd fe60 	bl	9000dbf0 <vListInsertEnd>
					xReturn = pdTRUE;
9000ff30:	2001      	movs	r0, #1
		return xReturn;
9000ff32:	e7d9      	b.n	9000fee8 <xTaskPriorityDisinherit+0x34>
9000ff34:	24024bf0 	.word	0x24024bf0
9000ff38:	2402506c 	.word	0x2402506c
9000ff3c:	24024bfc 	.word	0x24024bfc

9000ff40 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000ff40:	2800      	cmp	r0, #0
9000ff42:	d040      	beq.n	9000ffc6 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000ff44:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000ff46:	b530      	push	{r4, r5, lr}
9000ff48:	4604      	mov	r4, r0
9000ff4a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000ff4c:	b153      	cbz	r3, 9000ff64 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000ff4e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000ff50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ff52:	4281      	cmp	r1, r0
9000ff54:	bf38      	it	cc
9000ff56:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000ff58:	2b01      	cmp	r3, #1
9000ff5a:	d101      	bne.n	9000ff60 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000ff5c:	428a      	cmp	r2, r1
9000ff5e:	d10a      	bne.n	9000ff76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000ff60:	b003      	add	sp, #12
9000ff62:	bd30      	pop	{r4, r5, pc}
9000ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff68:	f383 8811 	msr	BASEPRI, r3
9000ff6c:	f3bf 8f6f 	isb	sy
9000ff70:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000ff74:	e7fe      	b.n	9000ff74 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000ff76:	4b19      	ldr	r3, [pc, #100]	; (9000ffdc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000ff78:	681b      	ldr	r3, [r3, #0]
9000ff7a:	42a3      	cmp	r3, r4
9000ff7c:	d024      	beq.n	9000ffc8 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ff7e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000ff80:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ff82:	2b00      	cmp	r3, #0
9000ff84:	db02      	blt.n	9000ff8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ff86:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000ff8a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000ff8c:	4d14      	ldr	r5, [pc, #80]	; (9000ffe0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000ff8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000ff92:	6961      	ldr	r1, [r4, #20]
9000ff94:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000ff98:	4299      	cmp	r1, r3
9000ff9a:	d1e1      	bne.n	9000ff60 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ff9c:	1d21      	adds	r1, r4, #4
9000ff9e:	4608      	mov	r0, r1
9000ffa0:	9101      	str	r1, [sp, #4]
9000ffa2:	f7fd fe4d 	bl	9000dc40 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000ffa6:	4b0f      	ldr	r3, [pc, #60]	; (9000ffe4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000ffa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000ffaa:	681a      	ldr	r2, [r3, #0]
9000ffac:	9901      	ldr	r1, [sp, #4]
9000ffae:	4290      	cmp	r0, r2
9000ffb0:	d900      	bls.n	9000ffb4 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000ffb2:	6018      	str	r0, [r3, #0]
9000ffb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000ffb8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000ffbc:	b003      	add	sp, #12
9000ffbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000ffc2:	f7fd be15 	b.w	9000dbf0 <vListInsertEnd>
9000ffc6:	4770      	bx	lr
9000ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ffcc:	f383 8811 	msr	BASEPRI, r3
9000ffd0:	f3bf 8f6f 	isb	sy
9000ffd4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000ffd8:	e7fe      	b.n	9000ffd8 <vTaskPriorityDisinheritAfterTimeout+0x98>
9000ffda:	bf00      	nop
9000ffdc:	24024bf0 	.word	0x24024bf0
9000ffe0:	24024bfc 	.word	0x24024bfc
9000ffe4:	2402506c 	.word	0x2402506c

9000ffe8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000ffe8:	4b04      	ldr	r3, [pc, #16]	; (9000fffc <pvTaskIncrementMutexHeldCount+0x14>)
9000ffea:	681a      	ldr	r2, [r3, #0]
9000ffec:	b11a      	cbz	r2, 9000fff6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000ffee:	6819      	ldr	r1, [r3, #0]
9000fff0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000fff2:	3201      	adds	r2, #1
9000fff4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000fff6:	6818      	ldr	r0, [r3, #0]
	}
9000fff8:	4770      	bx	lr
9000fffa:	bf00      	nop
9000fffc:	24024bf0 	.word	0x24024bf0

90010000 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
90010000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010004:	4e22      	ldr	r6, [pc, #136]	; (90010090 <prvSwitchTimerLists+0x90>)
90010006:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
90010008:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90010098 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9001000c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90010010:	e00d      	b.n	9001002e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010012:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010014:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90010016:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90010018:	1d25      	adds	r5, r4, #4
9001001a:	4628      	mov	r0, r5
9001001c:	f7fd fe10 	bl	9000dc40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010020:	6a23      	ldr	r3, [r4, #32]
90010022:	4620      	mov	r0, r4
90010024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90010026:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9001002a:	075b      	lsls	r3, r3, #29
9001002c:	d40a      	bmi.n	90010044 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9001002e:	6833      	ldr	r3, [r6, #0]
90010030:	681a      	ldr	r2, [r3, #0]
90010032:	2a00      	cmp	r2, #0
90010034:	d1ed      	bne.n	90010012 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90010036:	4a17      	ldr	r2, [pc, #92]	; (90010094 <prvSwitchTimerLists+0x94>)
90010038:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9001003a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9001003c:	6031      	str	r1, [r6, #0]
}
9001003e:	b005      	add	sp, #20
90010040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90010044:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010046:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90010048:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9001004a:	429f      	cmp	r7, r3
9001004c:	d205      	bcs.n	9001005a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001004e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90010050:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010052:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010054:	f7fd fddc 	bl	9000dc10 <vListInsert>
90010058:	e7e9      	b.n	9001002e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001005a:	f8d9 3000 	ldr.w	r3, [r9]
9001005e:	b16b      	cbz	r3, 9001007c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010060:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010062:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010066:	f7ff fecf 	bl	9000fe08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001006a:	2300      	movs	r3, #0
9001006c:	4669      	mov	r1, sp
9001006e:	f8d9 0000 	ldr.w	r0, [r9]
90010072:	461a      	mov	r2, r3
90010074:	f7fe f95e 	bl	9000e334 <xQueueGenericSend>
				configASSERT( xResult );
90010078:	2800      	cmp	r0, #0
9001007a:	d1d8      	bne.n	9001002e <prvSwitchTimerLists+0x2e>
9001007c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010080:	f383 8811 	msr	BASEPRI, r3
90010084:	f3bf 8f6f 	isb	sy
90010088:	f3bf 8f4f 	dsb	sy
9001008c:	e7fe      	b.n	9001008c <prvSwitchTimerLists+0x8c>
9001008e:	bf00      	nop
90010090:	240250ec 	.word	0x240250ec
90010094:	240250f0 	.word	0x240250f0
90010098:	24025210 	.word	0x24025210

9001009c <prvTimerTask>:
{
9001009c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900100a0:	4e9f      	ldr	r6, [pc, #636]	; (90010320 <prvTimerTask+0x284>)
900100a2:	b089      	sub	sp, #36	; 0x24
900100a4:	4d9f      	ldr	r5, [pc, #636]	; (90010324 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
900100a6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
900100aa:	4c9f      	ldr	r4, [pc, #636]	; (90010328 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
900100ac:	6833      	ldr	r3, [r6, #0]
900100ae:	681f      	ldr	r7, [r3, #0]
900100b0:	2f00      	cmp	r7, #0
900100b2:	f000 80b2 	beq.w	9001021a <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900100b6:	68db      	ldr	r3, [r3, #12]
900100b8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
900100ba:	f7ff fccf 	bl	9000fa5c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900100be:	f7ff fce5 	bl	9000fa8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900100c2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900100c4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900100c6:	4290      	cmp	r0, r2
900100c8:	f0c0 80af 	bcc.w	9001022a <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900100cc:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
900100ce:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900100d0:	f200 80d0 	bhi.w	90010274 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
900100d4:	f7ff fcca 	bl	9000fa6c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900100d8:	6832      	ldr	r2, [r6, #0]
900100da:	68d2      	ldr	r2, [r2, #12]
900100dc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900100e0:	f10b 0804 	add.w	r8, fp, #4
900100e4:	4640      	mov	r0, r8
900100e6:	f7fd fdab 	bl	9000dc40 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900100ea:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
900100ee:	0741      	lsls	r1, r0, #29
900100f0:	f100 80d0 	bmi.w	90010294 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900100f4:	f020 0001 	bic.w	r0, r0, #1
900100f8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900100fc:	f8db 3020 	ldr.w	r3, [fp, #32]
90010100:	4658      	mov	r0, fp
90010102:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90010104:	2200      	movs	r2, #0
90010106:	4669      	mov	r1, sp
90010108:	6820      	ldr	r0, [r4, #0]
9001010a:	f7fe fbff 	bl	9000e90c <xQueueReceive>
9001010e:	2800      	cmp	r0, #0
90010110:	d0cc      	beq.n	900100ac <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90010112:	9b00      	ldr	r3, [sp, #0]
90010114:	2b00      	cmp	r3, #0
90010116:	db77      	blt.n	90010208 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90010118:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9001011a:	697b      	ldr	r3, [r7, #20]
9001011c:	b113      	cbz	r3, 90010124 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9001011e:	1d38      	adds	r0, r7, #4
90010120:	f7fd fd8e 	bl	9000dc40 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
90010124:	f7ff fcb2 	bl	9000fa8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010128:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9001012a:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9001012c:	4298      	cmp	r0, r3
9001012e:	f0c0 8083 	bcc.w	90010238 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
90010132:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90010134:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90010138:	2b09      	cmp	r3, #9
9001013a:	d8e3      	bhi.n	90010104 <prvTimerTask+0x68>
9001013c:	e8df f003 	tbb	[pc, r3]
90010140:	54050505 	.word	0x54050505
90010144:	05055b3e 	.word	0x05055b3e
90010148:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001014a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001014e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010150:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010154:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010156:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001015a:	9b01      	ldr	r3, [sp, #4]
9001015c:	1899      	adds	r1, r3, r2
9001015e:	bf2c      	ite	cs
90010160:	2001      	movcs	r0, #1
90010162:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90010164:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010166:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90010168:	f200 8086 	bhi.w	90010278 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001016c:	eba8 0303 	sub.w	r3, r8, r3
90010170:	429a      	cmp	r2, r3
90010172:	f200 80c0 	bhi.w	900102f6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90010176:	6a3b      	ldr	r3, [r7, #32]
90010178:	4638      	mov	r0, r7
9001017a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001017c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010180:	075b      	lsls	r3, r3, #29
90010182:	d5bf      	bpl.n	90010104 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90010184:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90010186:	9901      	ldr	r1, [sp, #4]
90010188:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9001018a:	b172      	cbz	r2, 900101aa <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001018c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9001018e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
90010192:	2300      	movs	r3, #0
90010194:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010196:	f7ff fe37 	bl	9000fe08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001019a:	2300      	movs	r3, #0
9001019c:	a904      	add	r1, sp, #16
9001019e:	6820      	ldr	r0, [r4, #0]
900101a0:	461a      	mov	r2, r3
900101a2:	f7fe f8c7 	bl	9000e334 <xQueueGenericSend>
							configASSERT( xResult );
900101a6:	2800      	cmp	r0, #0
900101a8:	d1ac      	bne.n	90010104 <prvTimerTask+0x68>
900101aa:	f04f 0350 	mov.w	r3, #80	; 0x50
900101ae:	f383 8811 	msr	BASEPRI, r3
900101b2:	f3bf 8f6f 	isb	sy
900101b6:	f3bf 8f4f 	dsb	sy
900101ba:	e7fe      	b.n	900101ba <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900101bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900101c0:	f043 0301 	orr.w	r3, r3, #1
900101c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
900101c8:	9b01      	ldr	r3, [sp, #4]
900101ca:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900101cc:	2b00      	cmp	r3, #0
900101ce:	f000 809e 	beq.w	9001030e <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
900101d2:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900101d4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900101d6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
900101d8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900101da:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
900101dc:	d856      	bhi.n	9001028c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900101de:	4b53      	ldr	r3, [pc, #332]	; (9001032c <prvTimerTask+0x290>)
900101e0:	6818      	ldr	r0, [r3, #0]
900101e2:	f7fd fd15 	bl	9000dc10 <vListInsert>
	return xProcessTimerNow;
900101e6:	e78d      	b.n	90010104 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900101e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900101ec:	f023 0301 	bic.w	r3, r3, #1
900101f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900101f4:	e786      	b.n	90010104 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900101f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900101fa:	079a      	lsls	r2, r3, #30
900101fc:	d572      	bpl.n	900102e4 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900101fe:	f023 0301 	bic.w	r3, r3, #1
90010202:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
90010206:	e77d      	b.n	90010104 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90010208:	9b01      	ldr	r3, [sp, #4]
9001020a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9001020e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
90010210:	9b00      	ldr	r3, [sp, #0]
90010212:	2b00      	cmp	r3, #0
90010214:	f6ff af76 	blt.w	90010104 <prvTimerTask+0x68>
90010218:	e77e      	b.n	90010118 <prvTimerTask+0x7c>
	vTaskSuspendAll();
9001021a:	f7ff fc1f 	bl	9000fa5c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001021e:	f7ff fc35 	bl	9000fa8c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90010222:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90010224:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90010226:	4282      	cmp	r2, r0
90010228:	d909      	bls.n	9001023e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9001022a:	f7ff fee9 	bl	90010000 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9001022e:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
90010232:	f7ff fc1b 	bl	9000fa6c <xTaskResumeAll>
90010236:	e765      	b.n	90010104 <prvTimerTask+0x68>
		prvSwitchTimerLists();
90010238:	f7ff fee2 	bl	90010000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9001023c:	e779      	b.n	90010132 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9001023e:	4b3b      	ldr	r3, [pc, #236]	; (9001032c <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
90010240:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90010244:	681a      	ldr	r2, [r3, #0]
90010246:	6812      	ldr	r2, [r2, #0]
90010248:	fab2 f282 	clz	r2, r2
9001024c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9001024e:	eba7 010a 	sub.w	r1, r7, sl
90010252:	6820      	ldr	r0, [r4, #0]
90010254:	f7fe ff4e 	bl	9000f0f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90010258:	f7ff fc08 	bl	9000fa6c <xTaskResumeAll>
9001025c:	2800      	cmp	r0, #0
9001025e:	f47f af51 	bne.w	90010104 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90010262:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90010266:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001026a:	f3bf 8f4f 	dsb	sy
9001026e:	f3bf 8f6f 	isb	sy
90010272:	e747      	b.n	90010104 <prvTimerTask+0x68>
90010274:	2200      	movs	r2, #0
90010276:	e7ea      	b.n	9001024e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90010278:	4543      	cmp	r3, r8
9001027a:	d902      	bls.n	90010282 <prvTimerTask+0x1e6>
9001027c:	2800      	cmp	r0, #0
9001027e:	f43f af7a 	beq.w	90010176 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010282:	1d39      	adds	r1, r7, #4
90010284:	6830      	ldr	r0, [r6, #0]
90010286:	f7fd fcc3 	bl	9000dc10 <vListInsert>
	return xProcessTimerNow;
9001028a:	e73b      	b.n	90010104 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001028c:	6830      	ldr	r0, [r6, #0]
9001028e:	f7fd fcbf 	bl	9000dc10 <vListInsert>
90010292:	e737      	b.n	90010104 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010294:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010298:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9001029c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9001029e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900102a0:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
900102a4:	d322      	bcc.n	900102ec <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900102a6:	ebaa 0307 	sub.w	r3, sl, r7
900102aa:	429a      	cmp	r2, r3
900102ac:	d829      	bhi.n	90010302 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
900102ae:	6823      	ldr	r3, [r4, #0]
900102b0:	b17b      	cbz	r3, 900102d2 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
900102b2:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900102b4:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900102b6:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
900102ba:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900102bc:	f7ff fda4 	bl	9000fe08 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900102c0:	2300      	movs	r3, #0
900102c2:	a904      	add	r1, sp, #16
900102c4:	6820      	ldr	r0, [r4, #0]
900102c6:	461a      	mov	r2, r3
900102c8:	f7fe f834 	bl	9000e334 <xQueueGenericSend>
			configASSERT( xResult );
900102cc:	2800      	cmp	r0, #0
900102ce:	f47f af15 	bne.w	900100fc <prvTimerTask+0x60>
900102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
900102d6:	f383 8811 	msr	BASEPRI, r3
900102da:	f3bf 8f6f 	isb	sy
900102de:	f3bf 8f4f 	dsb	sy
900102e2:	e7fe      	b.n	900102e2 <prvTimerTask+0x246>
							vPortFree( pxTimer );
900102e4:	4638      	mov	r0, r7
900102e6:	f7fd fc0f 	bl	9000db08 <vPortFree>
900102ea:	e70b      	b.n	90010104 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900102ec:	4641      	mov	r1, r8
900102ee:	6830      	ldr	r0, [r6, #0]
900102f0:	f7fd fc8e 	bl	9000dc10 <vListInsert>
	return xProcessTimerNow;
900102f4:	e702      	b.n	900100fc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900102f6:	4b0d      	ldr	r3, [pc, #52]	; (9001032c <prvTimerTask+0x290>)
900102f8:	1d39      	adds	r1, r7, #4
900102fa:	6818      	ldr	r0, [r3, #0]
900102fc:	f7fd fc88 	bl	9000dc10 <vListInsert>
	return xProcessTimerNow;
90010300:	e700      	b.n	90010104 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010302:	4b0a      	ldr	r3, [pc, #40]	; (9001032c <prvTimerTask+0x290>)
90010304:	4641      	mov	r1, r8
90010306:	6818      	ldr	r0, [r3, #0]
90010308:	f7fd fc82 	bl	9000dc10 <vListInsert>
	return xProcessTimerNow;
9001030c:	e6f6      	b.n	900100fc <prvTimerTask+0x60>
9001030e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010312:	f383 8811 	msr	BASEPRI, r3
90010316:	f3bf 8f6f 	isb	sy
9001031a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9001031e:	e7fe      	b.n	9001031e <prvTimerTask+0x282>
90010320:	240250ec 	.word	0x240250ec
90010324:	240251bc 	.word	0x240251bc
90010328:	24025210 	.word	0x24025210
9001032c:	240250f0 	.word	0x240250f0

90010330 <xTimerCreateTimerTask>:
{
90010330:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
90010332:	4c23      	ldr	r4, [pc, #140]	; (900103c0 <xTimerCreateTimerTask+0x90>)
{
90010334:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90010336:	f7fd fd05 	bl	9000dd44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9001033a:	6825      	ldr	r5, [r4, #0]
9001033c:	b335      	cbz	r5, 9001038c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9001033e:	f7fd fd23 	bl	9000dd88 <vPortExitCritical>
	if( xTimerQueue != NULL )
90010342:	6823      	ldr	r3, [r4, #0]
90010344:	b1cb      	cbz	r3, 9001037a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90010346:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010348:	aa07      	add	r2, sp, #28
9001034a:	a906      	add	r1, sp, #24
9001034c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9001034e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90010350:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010354:	f7fd fb0a 	bl	9000d96c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90010358:	4623      	mov	r3, r4
9001035a:	9a07      	ldr	r2, [sp, #28]
9001035c:	9500      	str	r5, [sp, #0]
9001035e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90010362:	e9cd 1001 	strd	r1, r0, [sp, #4]
90010366:	4917      	ldr	r1, [pc, #92]	; (900103c4 <xTimerCreateTimerTask+0x94>)
90010368:	4817      	ldr	r0, [pc, #92]	; (900103c8 <xTimerCreateTimerTask+0x98>)
9001036a:	f7ff f93f 	bl	9000f5ec <xTaskCreateStatic>
9001036e:	4b17      	ldr	r3, [pc, #92]	; (900103cc <xTimerCreateTimerTask+0x9c>)
90010370:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90010372:	b110      	cbz	r0, 9001037a <xTimerCreateTimerTask+0x4a>
}
90010374:	2001      	movs	r0, #1
90010376:	b009      	add	sp, #36	; 0x24
90010378:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001037a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001037e:	f383 8811 	msr	BASEPRI, r3
90010382:	f3bf 8f6f 	isb	sy
90010386:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9001038a:	e7fe      	b.n	9001038a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9001038c:	4f10      	ldr	r7, [pc, #64]	; (900103d0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9001038e:	4e11      	ldr	r6, [pc, #68]	; (900103d4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90010390:	4638      	mov	r0, r7
90010392:	f7fd fc1d 	bl	9000dbd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90010396:	4630      	mov	r0, r6
90010398:	f7fd fc1a 	bl	9000dbd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9001039c:	4a0e      	ldr	r2, [pc, #56]	; (900103d8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001039e:	9500      	str	r5, [sp, #0]
900103a0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
900103a2:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900103a4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
900103a6:	4a0d      	ldr	r2, [pc, #52]	; (900103dc <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900103a8:	4b0d      	ldr	r3, [pc, #52]	; (900103e0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
900103aa:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900103ac:	4a0d      	ldr	r2, [pc, #52]	; (900103e4 <xTimerCreateTimerTask+0xb4>)
900103ae:	f7fd fe6b 	bl	9000e088 <xQueueGenericCreateStatic>
900103b2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
900103b4:	2800      	cmp	r0, #0
900103b6:	d0c2      	beq.n	9001033e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900103b8:	490b      	ldr	r1, [pc, #44]	; (900103e8 <xTimerCreateTimerTask+0xb8>)
900103ba:	f7fe fe73 	bl	9000f0a4 <vQueueAddToRegistry>
900103be:	e7be      	b.n	9001033e <xTimerCreateTimerTask+0xe>
900103c0:	24025210 	.word	0x24025210
900103c4:	90026814 	.word	0x90026814
900103c8:	9001009d 	.word	0x9001009d
900103cc:	24025214 	.word	0x24025214
900103d0:	24025194 	.word	0x24025194
900103d4:	240251a8 	.word	0x240251a8
900103d8:	240250ec 	.word	0x240250ec
900103dc:	240250f0 	.word	0x240250f0
900103e0:	240251c0 	.word	0x240251c0
900103e4:	240250f4 	.word	0x240250f4
900103e8:	9002680c 	.word	0x9002680c

900103ec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103f0:	4c82      	ldr	r4, [pc, #520]	; (900105fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
900103f2:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103f4:	fba4 4303 	umull	r4, r3, r4, r3
{  
900103f8:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900103fa:	0a19      	lsrs	r1, r3, #8
{  
900103fc:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900103fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
90010402:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90010404:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90010408:	4293      	cmp	r3, r2
9001040a:	930f      	str	r3, [sp, #60]	; 0x3c
9001040c:	f240 80f1 	bls.w	900105f2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90010410:	4b7b      	ldr	r3, [pc, #492]	; (90010600 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
90010412:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90010610 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90010418:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001041a:	691b      	ldr	r3, [r3, #16]
9001041c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90010614 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
90010420:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90010422:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010424:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90010426:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90010428:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001042a:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
9001042c:	f04f 0e02 	mov.w	lr, #2
90010430:	990b      	ldr	r1, [sp, #44]	; 0x2c
90010432:	f502 7080 	add.w	r0, r2, #256	; 0x100
90010436:	9204      	str	r2, [sp, #16]
90010438:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9001043a:	3101      	adds	r1, #1
9001043c:	9006      	str	r0, [sp, #24]
9001043e:	980e      	ldr	r0, [sp, #56]	; 0x38
90010440:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010442:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90010444:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90010448:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001044c:	fb01 f202 	mul.w	r2, r1, r2
90010450:	005b      	lsls	r3, r3, #1
90010452:	eb03 1302 	add.w	r3, r3, r2, lsl #4
90010456:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90010458:	e009      	b.n	9001046e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001045a:	9b05      	ldr	r3, [sp, #20]
9001045c:	9a01      	ldr	r2, [sp, #4]
9001045e:	4293      	cmp	r3, r2
90010460:	d80f      	bhi.n	90010482 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90010462:	f1be 0f10 	cmp.w	lr, #16
90010466:	f000 80bb 	beq.w	900105e0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9001046a:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
9001046e:	f1be 0f0a 	cmp.w	lr, #10
90010472:	d1f2      	bne.n	9001045a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90010474:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010476:	9a01      	ldr	r2, [sp, #4]
90010478:	3380      	adds	r3, #128	; 0x80
9001047a:	9304      	str	r3, [sp, #16]
9001047c:	9b05      	ldr	r3, [sp, #20]
9001047e:	4293      	cmp	r3, r2
90010480:	d9f3      	bls.n	9001046a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90010482:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010484:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
90010486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010488:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9001048a:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9001048c:	990a      	ldr	r1, [sp, #40]	; 0x28
9001048e:	9a04      	ldr	r2, [sp, #16]
90010490:	1859      	adds	r1, r3, r1
90010492:	f103 0c10 	add.w	ip, r3, #16
90010496:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9001049a:	3330      	adds	r3, #48	; 0x30
9001049c:	4696      	mov	lr, r2
9001049e:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
900104a0:	9307      	str	r3, [sp, #28]
900104a2:	9b03      	ldr	r3, [sp, #12]
900104a4:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
900104a8:	4674      	mov	r4, lr
    currentMCU++;
900104aa:	9e02      	ldr	r6, [sp, #8]
900104ac:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900104ae:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
900104b2:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900104b4:	4953      	ldr	r1, [pc, #332]	; (90010604 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
900104b6:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900104b8:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900104bc:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900104be:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
900104c2:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900104c4:	4950      	ldr	r1, [pc, #320]	; (90010608 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
900104c6:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900104ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900104ce:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900104d2:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900104d4:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900104d6:	4b4d      	ldr	r3, [pc, #308]	; (9001060c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
900104d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104dc:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900104e0:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104e4:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104e6:	eb03 0b02 	add.w	fp, r3, r2
900104ea:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104ee:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104f0:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104f4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900104f8:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900104fc:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010500:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90010504:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90010508:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
9001050c:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90010510:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010514:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010518:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001051c:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001051e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010522:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010526:	ea4f 0292 	mov.w	r2, r2, lsr #2
9001052a:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001052e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010532:	ea4f 1242 	mov.w	r2, r2, lsl #5
90010536:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9001053a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001053e:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90010542:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010546:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001054a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001054e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010550:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010554:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010558:	ea4f 0292 	mov.w	r2, r2, lsr #2
9001055c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010560:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010564:	ea4f 1242 	mov.w	r2, r2, lsl #5
90010568:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9001056c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90010570:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90010574:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010576:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010578:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001057a:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001057c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010580:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010584:	ea4f 0393 	mov.w	r3, r3, lsr #2
90010588:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001058c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010590:	ea4f 1343 	mov.w	r3, r3, lsl #5
90010594:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90010598:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9001059c:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
900105a0:	d185      	bne.n	900104ae <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900105a2:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
900105a4:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
900105a8:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
900105ac:	3310      	adds	r3, #16
900105ae:	9302      	str	r3, [sp, #8]
            pChrom++;
900105b0:	9b03      	ldr	r3, [sp, #12]
900105b2:	3304      	adds	r3, #4
900105b4:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
900105b6:	9b07      	ldr	r3, [sp, #28]
900105b8:	4563      	cmp	r3, ip
900105ba:	f47f af72 	bne.w	900104a2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
900105be:	9b06      	ldr	r3, [sp, #24]
900105c0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900105c4:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900105c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
900105c8:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
900105cc:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
900105ce:	9b04      	ldr	r3, [sp, #16]
900105d0:	f103 0310 	add.w	r3, r3, #16
900105d4:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900105d6:	9b01      	ldr	r3, [sp, #4]
900105d8:	4413      	add	r3, r2
900105da:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
900105dc:	f47f af45 	bne.w	9001046a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900105e0:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900105e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
900105e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
900105e8:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900105ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900105ec:	4293      	cmp	r3, r2
900105ee:	f47f af1c 	bne.w	9001042a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
900105f2:	ee17 0a90 	vmov	r0, s15
900105f6:	b011      	add	sp, #68	; 0x44
900105f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900105fc:	aaaaaaab 	.word	0xaaaaaaab
90010600:	24026218 	.word	0x24026218
90010604:	24025618 	.word	0x24025618
90010608:	24025218 	.word	0x24025218
9001060c:	24025e18 	.word	0x24025e18
90010610:	24025a18 	.word	0x24025a18
90010614:	9002681c 	.word	0x9002681c

90010618 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90010618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9001061c:	0a1c      	lsrs	r4, r3, #8
{  
9001061e:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90010620:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90010624:	ee07 4a90 	vmov	s15, r4
{  
90010628:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9001062a:	429a      	cmp	r2, r3
{  
9001062c:	9007      	str	r0, [sp, #28]
9001062e:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90010630:	930b      	str	r3, [sp, #44]	; 0x2c
90010632:	f080 814a 	bcs.w	900108ca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90010636:	4ba7      	ldr	r3, [pc, #668]	; (900108d4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90010638:	4da7      	ldr	r5, [pc, #668]	; (900108d8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
9001063a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9001063c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 900108dc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90010640:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010644:	691b      	ldr	r3, [r3, #16]
90010646:	f8df a298 	ldr.w	sl, [pc, #664]	; 900108e0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
9001064a:	f8df b298 	ldr.w	fp, [pc, #664]	; 900108e4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
9001064e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 900108e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010652:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010654:	9301      	str	r3, [sp, #4]
90010656:	e008      	b.n	9001066a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90010658:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9001065a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9001065c:	f503 7380 	add.w	r3, r3, #256	; 0x100
90010660:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90010662:	9b08      	ldr	r3, [sp, #32]
90010664:	4293      	cmp	r3, r2
90010666:	f000 8130 	beq.w	900108ca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001066a:	9a07      	ldr	r2, [sp, #28]
9001066c:	9908      	ldr	r1, [sp, #32]
9001066e:	f102 0080 	add.w	r0, r2, #128	; 0x80
90010672:	010b      	lsls	r3, r1, #4
90010674:	3101      	adds	r1, #1
    currentMCU++;
90010676:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001067a:	980a      	ldr	r0, [sp, #40]	; 0x28
9001067c:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001067e:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90010680:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90010684:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010688:	fb01 f202 	mul.w	r2, r1, r2
9001068c:	005b      	lsls	r3, r3, #1
9001068e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90010692:	9300      	str	r3, [sp, #0]
    currentMCU++;
90010694:	2308      	movs	r3, #8
90010696:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010698:	e9dd 2300 	ldrd	r2, r3, [sp]
9001069c:	4293      	cmp	r3, r2
9001069e:	d9db      	bls.n	90010658 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
900106a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900106a2:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
900106a4:	9a03      	ldr	r2, [sp, #12]
900106a6:	f102 0140 	add.w	r1, r2, #64	; 0x40
900106aa:	9a02      	ldr	r2, [sp, #8]
900106ac:	f103 0020 	add.w	r0, r3, #32
900106b0:	3204      	adds	r2, #4
900106b2:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106b4:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
900106b8:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106ba:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
900106be:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106c0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
900106c4:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
900106c6:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106ca:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106ce:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106d0:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
900106d4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900106d8:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106da:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106dc:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106e0:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106e4:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900106e8:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106ec:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106ee:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106f2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900106f6:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900106fa:	08e4      	lsrs	r4, r4, #3
900106fc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010700:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90010704:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010708:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
9001070c:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90010710:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010712:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010714:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010716:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001071a:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9001071e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010722:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010724:	08c0      	lsrs	r0, r0, #3
90010726:	08a4      	lsrs	r4, r4, #2
90010728:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001072c:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90010730:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010734:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010738:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001073c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90010740:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010744:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010748:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001074a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9001074e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010752:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010754:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010756:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001075a:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001075e:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010762:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010766:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010768:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001076c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90010770:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90010774:	08e4      	lsrs	r4, r4, #3
90010776:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001077a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9001077e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010782:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90010786:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001078a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001078c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001078e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010790:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010794:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90010798:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001079c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001079e:	08c0      	lsrs	r0, r0, #3
900107a0:	08a4      	lsrs	r4, r4, #2
900107a2:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900107a6:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900107aa:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900107ae:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900107b2:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
900107b6:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900107ba:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900107be:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107c2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107c6:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107c8:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900107cc:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107ce:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107d0:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107d4:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107d8:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900107dc:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107e0:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107e2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900107e6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900107ea:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900107ee:	08e4      	lsrs	r4, r4, #3
900107f0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900107f4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900107f8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900107fc:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90010800:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90010804:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010806:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010808:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001080a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001080e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90010812:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010816:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010818:	08c0      	lsrs	r0, r0, #3
9001081a:	08a4      	lsrs	r4, r4, #2
9001081c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90010820:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90010824:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010828:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001082c:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010830:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90010834:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010838:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001083c:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001083e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90010842:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010846:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010848:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001084a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001084e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010852:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010856:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001085a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001085c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010860:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90010864:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90010868:	08e4      	lsrs	r4, r4, #3
9001086a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001086e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90010872:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010876:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9001087a:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001087e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010880:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010882:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010884:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010888:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9001088c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010890:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010892:	08c0      	lsrs	r0, r0, #3
90010894:	08a4      	lsrs	r4, r4, #2
90010896:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001089a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001089e:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
900108a2:	9804      	ldr	r0, [sp, #16]
900108a4:	4283      	cmp	r3, r0
900108a6:	f47f af05 	bne.w	900106b4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
900108aa:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900108ac:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
900108ae:	3308      	adds	r3, #8
900108b0:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
900108b2:	9b03      	ldr	r3, [sp, #12]
900108b4:	3308      	adds	r3, #8
900108b6:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900108b8:	9b00      	ldr	r3, [sp, #0]
900108ba:	4413      	add	r3, r2
900108bc:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
900108be:	9b05      	ldr	r3, [sp, #20]
900108c0:	3b01      	subs	r3, #1
900108c2:	9305      	str	r3, [sp, #20]
900108c4:	f47f aee8 	bne.w	90010698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
900108c8:	e6c6      	b.n	90010658 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
900108ca:	ee17 0a90 	vmov	r0, s15
900108ce:	b00d      	add	sp, #52	; 0x34
900108d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900108d4:	24026218 	.word	0x24026218
900108d8:	24025218 	.word	0x24025218
900108dc:	24025e18 	.word	0x24025e18
900108e0:	24025a18 	.word	0x24025a18
900108e4:	24025618 	.word	0x24025618
900108e8:	9002681c 	.word	0x9002681c

900108ec <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900108ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108f0:	4cb6      	ldr	r4, [pc, #728]	; (90010bcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
900108f2:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108f4:	fba4 4303 	umull	r4, r3, r4, r3
{  
900108f8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900108fa:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900108fc:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90010900:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90010904:	429a      	cmp	r2, r3
90010906:	9306      	str	r3, [sp, #24]
{  
90010908:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9001090c:	f080 8158 	bcs.w	90010bc0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010910:	4baf      	ldr	r3, [pc, #700]	; (90010bd0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010912:	4cb0      	ldr	r4, [pc, #704]	; (90010bd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010916:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90010bdc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001091a:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001091c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001091e:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010920:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90010be0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010924:	48ac      	ldr	r0, [pc, #688]	; (90010bd8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90010926:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90010be4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001092a:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001092c:	9300      	str	r3, [sp, #0]
9001092e:	e007      	b.n	90010940 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90010930:	9b04      	ldr	r3, [sp, #16]
90010932:	33c0      	adds	r3, #192	; 0xc0
90010934:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90010936:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
9001093a:	4293      	cmp	r3, r2
9001093c:	f000 8140 	beq.w	90010bc0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010940:	9e05      	ldr	r6, [sp, #20]
90010942:	9f07      	ldr	r7, [sp, #28]
90010944:	00f2      	lsls	r2, r6, #3
90010946:	3601      	adds	r6, #1
90010948:	9904      	ldr	r1, [sp, #16]
9001094a:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001094c:	9e03      	ldr	r6, [sp, #12]
9001094e:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010952:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010956:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001095a:	fb06 f505 	mul.w	r5, r6, r5
9001095e:	0052      	lsls	r2, r2, #1
90010960:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
90010964:	2508      	movs	r5, #8
90010966:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010968:	9d00      	ldr	r5, [sp, #0]
9001096a:	4295      	cmp	r5, r2
9001096c:	d9e0      	bls.n	90010930 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001096e:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90010972:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010974:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90010978:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9001097a:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001097e:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010982:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90010986:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010988:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001098c:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010990:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010992:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010994:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010996:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001099a:	eb05 4929 	add.w	r9, r5, r9, asr #16
9001099e:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109a2:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109a4:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
900109a8:	08ed      	lsrs	r5, r5, #3
900109aa:	08bf      	lsrs	r7, r7, #2
900109ac:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
900109b0:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109b2:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900109b6:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900109b8:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900109bc:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
900109c0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109c4:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109c8:	4425      	add	r5, r4
900109ca:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109ce:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109d2:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109d6:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109d8:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109da:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109dc:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109e0:	eb05 4929 	add.w	r9, r5, r9, asr #16
900109e4:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109e8:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109ea:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
900109ee:	08ed      	lsrs	r5, r5, #3
900109f0:	08bf      	lsrs	r7, r7, #2
900109f2:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
900109f6:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109f8:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
900109fc:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
900109fe:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a00:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90010a04:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010a08:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a0a:	4427      	add	r7, r4
90010a0c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010a10:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a12:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a16:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a18:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a1c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a20:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a24:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a28:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a2a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a2e:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a30:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a34:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90010a38:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010a3c:	08fe      	lsrs	r6, r7, #3
90010a3e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010a42:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010a46:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a4a:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a4c:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a50:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90010a54:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a58:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a5c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010a60:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a62:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a66:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a6a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a6c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a6e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a70:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a74:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a78:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a7c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a80:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010a84:	08fe      	lsrs	r6, r7, #3
90010a86:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010a8a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010a8e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a92:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a94:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a98:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90010a9c:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010aa0:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010aa4:	4427      	add	r7, r4
90010aa6:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010aaa:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010aae:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ab2:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010ab4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010ab6:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ab8:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010abc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010ac0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ac4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010ac8:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010acc:	08fe      	lsrs	r6, r7, #3
90010ace:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010ad2:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010ad6:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010ada:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010adc:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90010ae0:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010ae4:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010ae8:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010aea:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010aee:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010af2:	44b9      	add	r9, r7
90010af4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010af8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010afc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b00:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b04:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b06:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b08:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010b0c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90010b10:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010b14:	08fe      	lsrs	r6, r7, #3
90010b16:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010b1a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010b1e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010b22:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010b24:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010b28:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90010b2c:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b30:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b34:	4427      	add	r7, r4
90010b36:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b3a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b3e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b42:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b44:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b46:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b48:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b4c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010b50:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b54:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b58:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010b5c:	08fe      	lsrs	r6, r7, #3
90010b5e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010b62:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010b66:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010b6a:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010b6c:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010b70:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90010b74:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b78:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010b7c:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b7e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b82:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b86:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b8a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010b8c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010b8e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b90:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010b94:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010b98:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010b9c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010ba0:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010ba4:	08fe      	lsrs	r6, r7, #3
90010ba6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010baa:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010bae:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010bb2:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90010bb4:	9d01      	ldr	r5, [sp, #4]
90010bb6:	3d01      	subs	r5, #1
90010bb8:	9501      	str	r5, [sp, #4]
90010bba:	f47f aed5 	bne.w	90010968 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90010bbe:	e6b7      	b.n	90010930 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90010bc0:	ee17 0a90 	vmov	r0, s15
90010bc4:	b009      	add	sp, #36	; 0x24
90010bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010bca:	bf00      	nop
90010bcc:	aaaaaaab 	.word	0xaaaaaaab
90010bd0:	24026218 	.word	0x24026218
90010bd4:	9002681c 	.word	0x9002681c
90010bd8:	24025a18 	.word	0x24025a18
90010bdc:	24025e18 	.word	0x24025e18
90010be0:	24025218 	.word	0x24025218
90010be4:	24025618 	.word	0x24025618

90010be8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90010be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90010bec:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010bf0:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90010bf2:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010bf4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010bf8:	f080 8088 	bcs.w	90010d0c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010bfc:	4b45      	ldr	r3, [pc, #276]	; (90010d14 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010bfe:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010c02:	691e      	ldr	r6, [r3, #16]
90010c04:	e003      	b.n	90010c0e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90010c06:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
90010c08:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90010c0c:	d07e      	beq.n	90010d0c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010c0e:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90010c10:	4604      	mov	r4, r0
90010c12:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010c16:	3201      	adds	r2, #1
90010c18:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010c1c:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010c20:	fb08 f505 	mul.w	r5, r8, r5
90010c24:	005b      	lsls	r3, r3, #1
90010c26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010c2a:	429e      	cmp	r6, r3
90010c2c:	d9eb      	bls.n	90010c06 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90010c2e:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90010c32:	18cd      	adds	r5, r1, r3
          pLum++;
90010c34:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
90010c36:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c3a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c3e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c42:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c46:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c4a:	ea47 070c 	orr.w	r7, r7, ip
90010c4e:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90010c50:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90010c52:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c56:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c5a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c5e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c62:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c66:	ea47 070c 	orr.w	r7, r7, ip
90010c6a:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90010c6c:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c70:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c74:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c78:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c7c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c80:	ea47 070c 	orr.w	r7, r7, ip
90010c84:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90010c86:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010c8a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010c8e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010c92:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010c96:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010c9a:	ea47 070c 	orr.w	r7, r7, ip
90010c9e:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90010ca0:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010ca4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010ca8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010cac:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010cb0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010cb4:	ea47 070c 	orr.w	r7, r7, ip
90010cb8:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90010cba:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010cbe:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010cc2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010cc6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010cca:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010cce:	ea47 070c 	orr.w	r7, r7, ip
90010cd2:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90010cd4:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010cd8:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010cdc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010ce0:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010ce4:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010ce8:	ea47 070c 	orr.w	r7, r7, ip
90010cec:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90010cee:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010cf2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010cf6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010cfa:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010cfe:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010d02:	ea47 070c 	orr.w	r7, r7, ip
90010d06:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90010d08:	d18f      	bne.n	90010c2a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90010d0a:	e77c      	b.n	90010c06 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90010d0c:	ee17 0a90 	vmov	r0, s15
90010d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010d14:	24026218 	.word	0x24026218

90010d18 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010d1c:	0a1c      	lsrs	r4, r3, #8
{  
90010d1e:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90010d20:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010d24:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010d28:	429a      	cmp	r2, r3
90010d2a:	9300      	str	r3, [sp, #0]
90010d2c:	f080 8129 	bcs.w	90010f82 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d30:	4b96      	ldr	r3, [pc, #600]	; (90010f8c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d32:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90010f90 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010d38:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010d3c:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d3e:	9401      	str	r4, [sp, #4]
90010d40:	e005      	b.n	90010d4e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
90010d42:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90010d44:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90010d48:	429a      	cmp	r2, r3
90010d4a:	f000 811a 	beq.w	90010f82 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d4e:	00d3      	lsls	r3, r2, #3
90010d50:	9c01      	ldr	r4, [sp, #4]
90010d52:	3201      	adds	r2, #1
    currentMCU++;
90010d54:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010d58:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010d5c:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
90010d60:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010d62:	fb08 f505 	mul.w	r5, r8, r5
90010d66:	0064      	lsls	r4, r4, #1
90010d68:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010d6c:	42a6      	cmp	r6, r4
90010d6e:	d9e8      	bls.n	90010d42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90010d70:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90010d74:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d76:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90010d7a:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90010d7e:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d82:	fb19 f90a 	smulbb	r9, r9, sl
90010d86:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d8a:	f813 5c08 	ldrb.w	r5, [r3, #-8]
90010d8e:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d92:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d96:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d9a:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d9e:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010da2:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010da6:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
90010daa:	fb19 f90a 	smulbb	r9, r9, sl
90010dae:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010db2:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010db6:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010db8:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010dba:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90010dbc:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010dc0:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90010dc4:	fb19 f90a 	smulbb	r9, r9, sl
90010dc8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dcc:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90010dd0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010dd4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dd8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ddc:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010de0:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010de4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010de8:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90010dec:	fb19 f90a 	smulbb	r9, r9, sl
90010df0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010df4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010df8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010dfa:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90010dfc:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e00:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90010e04:	fb19 f90a 	smulbb	r9, r9, sl
90010e08:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e0c:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90010e10:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e14:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e18:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e1c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e20:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010e24:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e28:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90010e2c:	fb19 f90a 	smulbb	r9, r9, sl
90010e30:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e34:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010e38:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010e3a:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
90010e3c:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e40:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
90010e44:	fb19 f90a 	smulbb	r9, r9, sl
90010e48:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e4c:	f813 5c05 	ldrb.w	r5, [r3, #-5]
90010e50:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e54:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e58:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e5c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e60:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010e64:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e68:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90010e6c:	fb19 f90a 	smulbb	r9, r9, sl
90010e70:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e74:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010e78:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010e7a:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90010e7c:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e80:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90010e84:	fb19 f90a 	smulbb	r9, r9, sl
90010e88:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e8c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90010e90:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e94:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e98:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e9c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010ea0:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010ea4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010ea8:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90010eac:	fb19 f90a 	smulbb	r9, r9, sl
90010eb0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010eb4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010eb8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010eba:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90010ebc:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010ec0:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90010ec4:	fb19 f90a 	smulbb	r9, r9, sl
90010ec8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010ecc:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90010ed0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ed4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010ed8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010edc:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010ee0:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010ee4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010ee8:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90010eec:	fb19 f90a 	smulbb	r9, r9, sl
90010ef0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ef4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010ef8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010efa:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90010efc:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010f00:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90010f04:	fb19 f90a 	smulbb	r9, r9, sl
90010f08:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010f0c:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90010f10:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010f14:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010f18:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f1c:	ea4f 2555 	mov.w	r5, r5, lsr #9
90010f20:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010f24:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010f28:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90010f2c:	fb19 f90a 	smulbb	r9, r9, sl
90010f30:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f34:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010f38:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010f3a:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
90010f3c:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010f40:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
90010f44:	fb19 f90a 	smulbb	r9, r9, sl
90010f48:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010f4c:	f813 5c01 	ldrb.w	r5, [r3, #-1]
90010f50:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f54:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010f58:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f5c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010f60:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010f64:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010f68:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90010f6c:	fb19 f90a 	smulbb	r9, r9, sl
90010f70:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010f74:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010f78:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010f7a:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90010f7c:	f47f aef6 	bne.w	90010d6c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90010f80:	e6df      	b.n	90010d42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90010f82:	ee17 0a90 	vmov	r0, s15
90010f86:	b003      	add	sp, #12
90010f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010f8c:	24026218 	.word	0x24026218
90010f90:	80808081 	.word	0x80808081

90010f94 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90010f94:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010f96:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010f98:	6805      	ldr	r5, [r0, #0]
90010f9a:	4c3e      	ldr	r4, [pc, #248]	; (90011094 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010f9c:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010f9e:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010fa0:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010fa2:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010fa6:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90010faa:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010fac:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010fb0:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010fb2:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010fb4:	d027      	beq.n	90011006 <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90010fb6:	b9ed      	cbnz	r5, 90010ff4 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90010fb8:	4837      	ldr	r0, [pc, #220]	; (90011098 <JPEG_GetDecodeColorConvertFunc+0x104>)
90010fba:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90010fbc:	f013 0107 	ands.w	r1, r3, #7
90010fc0:	d02b      	beq.n	9001101a <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010fc2:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90010fc6:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010fc8:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010fca:	4419      	add	r1, r3
90010fcc:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010fce:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010fd0:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010fd2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90010fd4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
90010fd8:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90010fda:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90010fde:	fb05 6611 	mls	r6, r5, r1, r6
90010fe2:	b106      	cbz	r6, 90010fe6 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90010fe4:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010fe6:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90010fea:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010fec:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90010fee:	6013      	str	r3, [r2, #0]
}
90010ff0:	bcf0      	pop	{r4, r5, r6, r7}
90010ff2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90010ff4:	2d30      	cmp	r5, #48	; 0x30
90010ff6:	d119      	bne.n	9001102c <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90010ff8:	4828      	ldr	r0, [pc, #160]	; (9001109c <JPEG_GetDecodeColorConvertFunc+0x108>)
90010ffa:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90010ffc:	f013 0107 	ands.w	r1, r3, #7
90011000:	d1df      	bne.n	90010fc2 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90011002:	6161      	str	r1, [r4, #20]
90011004:	e00a      	b.n	9001101c <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90011006:	2f01      	cmp	r7, #1
90011008:	d024      	beq.n	90011054 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9001100a:	2f02      	cmp	r7, #2
9001100c:	d011      	beq.n	90011032 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
9001100e:	4824      	ldr	r0, [pc, #144]	; (900110a0 <JPEG_GetDecodeColorConvertFunc+0x10c>)
90011010:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90011012:	f013 0107 	ands.w	r1, r3, #7
90011016:	d1d4      	bne.n	90010fc2 <JPEG_GetDecodeColorConvertFunc+0x2e>
90011018:	e7f3      	b.n	90011002 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9001101a:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001101c:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
9001101e:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011020:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90011022:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011024:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90011026:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001102a:	e7d6      	b.n	90010fda <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
9001102c:	2001      	movs	r0, #1
}
9001102e:	bcf0      	pop	{r4, r5, r6, r7}
90011030:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90011032:	481c      	ldr	r0, [pc, #112]	; (900110a4 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90011034:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90011036:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90011038:	f013 010f 	ands.w	r1, r3, #15
9001103c:	d022      	beq.n	90011084 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001103e:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
90011042:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90011044:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011046:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
90011048:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001104a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001104c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001104e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011050:	62a1      	str	r1, [r4, #40]	; 0x28
90011052:	e7c1      	b.n	90010fd8 <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90011054:	4814      	ldr	r0, [pc, #80]	; (900110a8 <JPEG_GetDecodeColorConvertFunc+0x114>)
90011056:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90011058:	f013 010f 	ands.w	r1, r3, #15
9001105c:	d107      	bne.n	9001106e <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001105e:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011060:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011062:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90011064:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011066:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90011068:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001106c:	e7b5      	b.n	90010fda <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001106e:	f1c1 0110 	rsb	r1, r1, #16
90011072:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90011074:	4419      	add	r1, r3
90011076:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011078:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001107a:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001107c:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9001107e:	e9c4 5507 	strd	r5, r5, [r4, #28]
90011082:	e7a9      	b.n	90010fd8 <JPEG_GetDecodeColorConvertFunc+0x44>
90011084:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90011086:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90011088:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001108a:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001108e:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90011090:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90011092:	e7a2      	b.n	90010fda <JPEG_GetDecodeColorConvertFunc+0x46>
90011094:	24026218 	.word	0x24026218
90011098:	90010be9 	.word	0x90010be9
9001109c:	90010d19 	.word	0x90010d19
900110a0:	900108ed 	.word	0x900108ed
900110a4:	90010619 	.word	0x90010619
900110a8:	900103ed 	.word	0x900103ed

900110ac <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
900110ac:	8880      	ldrh	r0, [r0, #4]
900110ae:	4770      	bx	lr

900110b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
900110b0:	b570      	push	{r4, r5, r6, lr}
900110b2:	6803      	ldr	r3, [r0, #0]
900110b4:	460c      	mov	r4, r1
900110b6:	2100      	movs	r1, #0
900110b8:	4605      	mov	r5, r0
900110ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900110bc:	4798      	blx	r3
900110be:	4606      	mov	r6, r0
900110c0:	682b      	ldr	r3, [r5, #0]
900110c2:	4628      	mov	r0, r5
900110c4:	1ba4      	subs	r4, r4, r6
900110c6:	6a1b      	ldr	r3, [r3, #32]
900110c8:	b2a4      	uxth	r4, r4
900110ca:	4798      	blx	r3
900110cc:	fbb4 f0f0 	udiv	r0, r4, r0
900110d0:	bd70      	pop	{r4, r5, r6, pc}

900110d2 <_ZN8touchgfx17AbstractPartition5clearEv>:
900110d2:	2300      	movs	r3, #0
900110d4:	8083      	strh	r3, [r0, #4]
900110d6:	4770      	bx	lr

900110d8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
900110d8:	b510      	push	{r4, lr}
900110da:	6803      	ldr	r3, [r0, #0]
900110dc:	4604      	mov	r4, r0
900110de:	8881      	ldrh	r1, [r0, #4]
900110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900110e2:	4798      	blx	r3
900110e4:	88a3      	ldrh	r3, [r4, #4]
900110e6:	3301      	adds	r3, #1
900110e8:	80a3      	strh	r3, [r4, #4]
900110ea:	bd10      	pop	{r4, pc}

900110ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
900110ec:	6803      	ldr	r3, [r0, #0]
900110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900110f0:	4718      	bx	r3

900110f2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
900110f2:	4770      	bx	lr

900110f4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
900110f4:	4a02      	ldr	r2, [pc, #8]	; (90011100 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
900110f6:	6002      	str	r2, [r0, #0]
900110f8:	2200      	movs	r2, #0
900110fa:	8082      	strh	r2, [r0, #4]
900110fc:	4770      	bx	lr
900110fe:	bf00      	nop
90011100:	90026b24 	.word	0x90026b24

90011104 <_ZN8touchgfx9Container13getFirstChildEv>:
90011104:	6a80      	ldr	r0, [r0, #40]	; 0x28
90011106:	4770      	bx	lr

90011108 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90011108:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001110a:	2000      	movs	r0, #0
9001110c:	b12b      	cbz	r3, 9001111a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
9001110e:	b920      	cbnz	r0, 9001111a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90011110:	1a5a      	subs	r2, r3, r1
90011112:	699b      	ldr	r3, [r3, #24]
90011114:	4250      	negs	r0, r2
90011116:	4150      	adcs	r0, r2
90011118:	e7f8      	b.n	9001110c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
9001111a:	4770      	bx	lr

9001111c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
9001111c:	2300      	movs	r3, #0
9001111e:	6148      	str	r0, [r1, #20]
90011120:	618b      	str	r3, [r1, #24]
90011122:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011124:	b913      	cbnz	r3, 9001112c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90011126:	6281      	str	r1, [r0, #40]	; 0x28
90011128:	4770      	bx	lr
9001112a:	4613      	mov	r3, r2
9001112c:	699a      	ldr	r2, [r3, #24]
9001112e:	2a00      	cmp	r2, #0
90011130:	d1fb      	bne.n	9001112a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90011132:	6199      	str	r1, [r3, #24]
90011134:	4770      	bx	lr

90011136 <_ZN8touchgfx9Container9removeAllEv>:
90011136:	2200      	movs	r2, #0
90011138:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001113a:	b123      	cbz	r3, 90011146 <_ZN8touchgfx9Container9removeAllEv+0x10>
9001113c:	6999      	ldr	r1, [r3, #24]
9001113e:	6281      	str	r1, [r0, #40]	; 0x28
90011140:	e9c3 2205 	strd	r2, r2, [r3, #20]
90011144:	e7f8      	b.n	90011138 <_ZN8touchgfx9Container9removeAllEv+0x2>
90011146:	4770      	bx	lr

90011148 <_ZN8touchgfx9Container6unlinkEv>:
90011148:	2300      	movs	r3, #0
9001114a:	6283      	str	r3, [r0, #40]	; 0x28
9001114c:	4770      	bx	lr

9001114e <_ZNK8touchgfx9Container12getSolidRectEv>:
9001114e:	2200      	movs	r2, #0
90011150:	8002      	strh	r2, [r0, #0]
90011152:	8042      	strh	r2, [r0, #2]
90011154:	8082      	strh	r2, [r0, #4]
90011156:	80c2      	strh	r2, [r0, #6]
90011158:	4770      	bx	lr

9001115a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9001115a:	b570      	push	{r4, r5, r6, lr}
9001115c:	460d      	mov	r5, r1
9001115e:	4616      	mov	r6, r2
90011160:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011162:	b13c      	cbz	r4, 90011174 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90011164:	6823      	ldr	r3, [r4, #0]
90011166:	4620      	mov	r0, r4
90011168:	4632      	mov	r2, r6
9001116a:	4629      	mov	r1, r5
9001116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001116e:	4798      	blx	r3
90011170:	69a4      	ldr	r4, [r4, #24]
90011172:	e7f6      	b.n	90011162 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90011174:	bd70      	pop	{r4, r5, r6, pc}

90011176 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90011176:	b538      	push	{r3, r4, r5, lr}
90011178:	460d      	mov	r5, r1
9001117a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001117c:	b134      	cbz	r4, 9001118c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001117e:	682b      	ldr	r3, [r5, #0]
90011180:	4621      	mov	r1, r4
90011182:	4628      	mov	r0, r5
90011184:	689b      	ldr	r3, [r3, #8]
90011186:	4798      	blx	r3
90011188:	69a4      	ldr	r4, [r4, #24]
9001118a:	e7f7      	b.n	9001117c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9001118c:	bd38      	pop	{r3, r4, r5, pc}

9001118e <_ZN8touchgfx9ContainerD1Ev>:
9001118e:	4770      	bx	lr

90011190 <_ZN8touchgfx9ContainerD0Ev>:
90011190:	b510      	push	{r4, lr}
90011192:	4604      	mov	r4, r0
90011194:	212c      	movs	r1, #44	; 0x2c
90011196:	f011 fe4c 	bl	90022e32 <_ZdlPvj>
9001119a:	4620      	mov	r0, r4
9001119c:	bd10      	pop	{r4, pc}

9001119e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9001119e:	6a83      	ldr	r3, [r0, #40]	; 0x28
900111a0:	b19b      	cbz	r3, 900111ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900111a2:	428b      	cmp	r3, r1
900111a4:	d109      	bne.n	900111ba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
900111a6:	699a      	ldr	r2, [r3, #24]
900111a8:	2100      	movs	r1, #0
900111aa:	6159      	str	r1, [r3, #20]
900111ac:	6282      	str	r2, [r0, #40]	; 0x28
900111ae:	b902      	cbnz	r2, 900111b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
900111b0:	4770      	bx	lr
900111b2:	6199      	str	r1, [r3, #24]
900111b4:	4770      	bx	lr
900111b6:	4613      	mov	r3, r2
900111b8:	b13a      	cbz	r2, 900111ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900111ba:	699a      	ldr	r2, [r3, #24]
900111bc:	428a      	cmp	r2, r1
900111be:	d1fa      	bne.n	900111b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
900111c0:	698a      	ldr	r2, [r1, #24]
900111c2:	619a      	str	r2, [r3, #24]
900111c4:	2300      	movs	r3, #0
900111c6:	e9c1 3305 	strd	r3, r3, [r1, #20]
900111ca:	4770      	bx	lr

900111cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
900111cc:	b410      	push	{r4}
900111ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
900111d0:	4604      	mov	r4, r0
900111d2:	b92b      	cbnz	r3, 900111e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
900111d4:	6803      	ldr	r3, [r0, #0]
900111d6:	4611      	mov	r1, r2
900111d8:	f85d 4b04 	ldr.w	r4, [sp], #4
900111dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900111de:	4718      	bx	r3
900111e0:	b941      	cbnz	r1, 900111f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
900111e2:	6193      	str	r3, [r2, #24]
900111e4:	6282      	str	r2, [r0, #40]	; 0x28
900111e6:	6154      	str	r4, [r2, #20]
900111e8:	f85d 4b04 	ldr.w	r4, [sp], #4
900111ec:	4770      	bx	lr
900111ee:	4603      	mov	r3, r0
900111f0:	2800      	cmp	r0, #0
900111f2:	d0f9      	beq.n	900111e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
900111f4:	4299      	cmp	r1, r3
900111f6:	6998      	ldr	r0, [r3, #24]
900111f8:	d1f9      	bne.n	900111ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
900111fa:	6190      	str	r0, [r2, #24]
900111fc:	618a      	str	r2, [r1, #24]
900111fe:	e7f2      	b.n	900111e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90011200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90011200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011204:	461f      	mov	r7, r3
90011206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
9001120a:	460d      	mov	r5, r1
9001120c:	4616      	mov	r6, r2
9001120e:	b103      	cbz	r3, 90011212 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90011210:	6038      	str	r0, [r7, #0]
90011212:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011214:	b314      	cbz	r4, 9001125c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90011216:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9001121a:	b1eb      	cbz	r3, 90011258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001121c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90011220:	428d      	cmp	r5, r1
90011222:	db19      	blt.n	90011258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011224:	b289      	uxth	r1, r1
90011226:	8923      	ldrh	r3, [r4, #8]
90011228:	440b      	add	r3, r1
9001122a:	b21b      	sxth	r3, r3
9001122c:	429d      	cmp	r5, r3
9001122e:	da13      	bge.n	90011258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011230:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90011234:	4296      	cmp	r6, r2
90011236:	db0f      	blt.n	90011258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011238:	b292      	uxth	r2, r2
9001123a:	8963      	ldrh	r3, [r4, #10]
9001123c:	4413      	add	r3, r2
9001123e:	b21b      	sxth	r3, r3
90011240:	429e      	cmp	r6, r3
90011242:	da09      	bge.n	90011258 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90011244:	6823      	ldr	r3, [r4, #0]
90011246:	1ab2      	subs	r2, r6, r2
90011248:	1a69      	subs	r1, r5, r1
9001124a:	4620      	mov	r0, r4
9001124c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90011250:	b212      	sxth	r2, r2
90011252:	463b      	mov	r3, r7
90011254:	b209      	sxth	r1, r1
90011256:	47c0      	blx	r8
90011258:	69a4      	ldr	r4, [r4, #24]
9001125a:	e7db      	b.n	90011214 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9001125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011260 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011264:	4c6d      	ldr	r4, [pc, #436]	; (9001141c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90011266:	b0a1      	sub	sp, #132	; 0x84
90011268:	4606      	mov	r6, r0
9001126a:	6824      	ldr	r4, [r4, #0]
9001126c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001126e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90011272:	2400      	movs	r4, #0
90011274:	9303      	str	r3, [sp, #12]
90011276:	802c      	strh	r4, [r5, #0]
90011278:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9001127a:	802c      	strh	r4, [r5, #0]
9001127c:	601c      	str	r4, [r3, #0]
9001127e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90011282:	f7ff ffbd 	bl	90011200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90011286:	f1b9 0f03 	cmp.w	r9, #3
9001128a:	f340 80c1 	ble.w	90011410 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001128e:	4631      	mov	r1, r6
90011290:	a80c      	add	r0, sp, #48	; 0x30
90011292:	f004 f8b3 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011296:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001129a:	9306      	str	r3, [sp, #24]
9001129c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900112a0:	9307      	str	r3, [sp, #28]
900112a2:	9b03      	ldr	r3, [sp, #12]
900112a4:	f8d3 a000 	ldr.w	sl, [r3]
900112a8:	f1ba 0f00 	cmp.w	sl, #0
900112ac:	f000 80b3 	beq.w	90011416 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
900112b0:	4651      	mov	r1, sl
900112b2:	a810      	add	r0, sp, #64	; 0x40
900112b4:	f004 f8a2 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900112b8:	2002      	movs	r0, #2
900112ba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
900112be:	9b01      	ldr	r3, [sp, #4]
900112c0:	9a06      	ldr	r2, [sp, #24]
900112c2:	fb91 f1f0 	sdiv	r1, r1, r0
900112c6:	189d      	adds	r5, r3, r2
900112c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
900112cc:	9a07      	ldr	r2, [sp, #28]
900112ce:	4419      	add	r1, r3
900112d0:	9b02      	ldr	r3, [sp, #8]
900112d2:	4413      	add	r3, r2
900112d4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
900112d8:	1a6d      	subs	r5, r5, r1
900112da:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
900112de:	fb92 f2f0 	sdiv	r2, r2, r0
900112e2:	440a      	add	r2, r1
900112e4:	1a9b      	subs	r3, r3, r2
900112e6:	435b      	muls	r3, r3
900112e8:	fb05 3505 	mla	r5, r5, r5, r3
900112ec:	4f4c      	ldr	r7, [pc, #304]	; (90011420 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
900112ee:	ac10      	add	r4, sp, #64	; 0x40
900112f0:	f1b9 0f0c 	cmp.w	r9, #12
900112f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900112f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900112fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900112fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011300:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90011304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90011308:	f04f 0303 	mov.w	r3, #3
9001130c:	bfd8      	it	le
9001130e:	f109 32ff 	addle.w	r2, r9, #4294967295
90011312:	f04f 0400 	mov.w	r4, #0
90011316:	f8cd 9000 	str.w	r9, [sp]
9001131a:	bfcc      	ite	gt
9001131c:	4698      	movgt	r8, r3
9001131e:	fb92 f8f3 	sdivle	r8, r2, r3
90011322:	1c63      	adds	r3, r4, #1
90011324:	aa10      	add	r2, sp, #64	; 0x40
90011326:	f004 0401 	and.w	r4, r4, #1
9001132a:	f04f 0b00 	mov.w	fp, #0
9001132e:	9308      	str	r3, [sp, #32]
90011330:	9b00      	ldr	r3, [sp, #0]
90011332:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90011336:	fb93 f3f8 	sdiv	r3, r3, r8
9001133a:	3404      	adds	r4, #4
9001133c:	b29b      	uxth	r3, r3
9001133e:	9304      	str	r3, [sp, #16]
90011340:	9a04      	ldr	r2, [sp, #16]
90011342:	f854 3c04 	ldr.w	r3, [r4, #-4]
90011346:	fb13 f302 	smulbb	r3, r3, r2
9001134a:	9a01      	ldr	r2, [sp, #4]
9001134c:	b29b      	uxth	r3, r3
9001134e:	1899      	adds	r1, r3, r2
90011350:	9305      	str	r3, [sp, #20]
90011352:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011356:	b209      	sxth	r1, r1
90011358:	4299      	cmp	r1, r3
9001135a:	db4d      	blt.n	900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001135c:	8932      	ldrh	r2, [r6, #8]
9001135e:	4413      	add	r3, r2
90011360:	b21b      	sxth	r3, r3
90011362:	4299      	cmp	r1, r3
90011364:	da48      	bge.n	900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011366:	9b04      	ldr	r3, [sp, #16]
90011368:	6827      	ldr	r7, [r4, #0]
9001136a:	fb17 f703 	smulbb	r7, r7, r3
9001136e:	9b02      	ldr	r3, [sp, #8]
90011370:	b2bf      	uxth	r7, r7
90011372:	18fa      	adds	r2, r7, r3
90011374:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011378:	b212      	sxth	r2, r2
9001137a:	429a      	cmp	r2, r3
9001137c:	db3c      	blt.n	900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001137e:	8970      	ldrh	r0, [r6, #10]
90011380:	4403      	add	r3, r0
90011382:	b21b      	sxth	r3, r3
90011384:	429a      	cmp	r2, r3
90011386:	da37      	bge.n	900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011388:	2300      	movs	r3, #0
9001138a:	4630      	mov	r0, r6
9001138c:	930b      	str	r3, [sp, #44]	; 0x2c
9001138e:	ab0b      	add	r3, sp, #44	; 0x2c
90011390:	f7ff ff36 	bl	90011200 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90011394:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90011396:	b37a      	cbz	r2, 900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011398:	4552      	cmp	r2, sl
9001139a:	d02d      	beq.n	900113f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001139c:	4611      	mov	r1, r2
9001139e:	a80e      	add	r0, sp, #56	; 0x38
900113a0:	9209      	str	r2, [sp, #36]	; 0x24
900113a2:	f004 f82b 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900113a6:	f04f 0e02 	mov.w	lr, #2
900113aa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
900113ae:	9a06      	ldr	r2, [sp, #24]
900113b0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
900113b4:	9b01      	ldr	r3, [sp, #4]
900113b6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
900113ba:	4413      	add	r3, r2
900113bc:	9a07      	ldr	r2, [sp, #28]
900113be:	fb91 f1fe 	sdiv	r1, r1, lr
900113c2:	fb9c fcfe 	sdiv	ip, ip, lr
900113c6:	4401      	add	r1, r0
900113c8:	1a58      	subs	r0, r3, r1
900113ca:	9b02      	ldr	r3, [sp, #8]
900113cc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
900113d0:	4413      	add	r3, r2
900113d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
900113d4:	448c      	add	ip, r1
900113d6:	eba3 030c 	sub.w	r3, r3, ip
900113da:	435b      	muls	r3, r3
900113dc:	fb00 3300 	mla	r3, r0, r0, r3
900113e0:	42ab      	cmp	r3, r5
900113e2:	d208      	bcs.n	900113f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
900113e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
900113e6:	461d      	mov	r5, r3
900113e8:	9803      	ldr	r0, [sp, #12]
900113ea:	6001      	str	r1, [r0, #0]
900113ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
900113ee:	9805      	ldr	r0, [sp, #20]
900113f0:	8008      	strh	r0, [r1, #0]
900113f2:	992b      	ldr	r1, [sp, #172]	; 0xac
900113f4:	800f      	strh	r7, [r1, #0]
900113f6:	4692      	mov	sl, r2
900113f8:	f10b 0b01 	add.w	fp, fp, #1
900113fc:	3408      	adds	r4, #8
900113fe:	f1bb 0f04 	cmp.w	fp, #4
90011402:	d19d      	bne.n	90011340 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90011404:	9b00      	ldr	r3, [sp, #0]
90011406:	9c08      	ldr	r4, [sp, #32]
90011408:	444b      	add	r3, r9
9001140a:	4544      	cmp	r4, r8
9001140c:	9300      	str	r3, [sp, #0]
9001140e:	d188      	bne.n	90011322 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90011410:	b021      	add	sp, #132	; 0x84
90011412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011416:	f04f 35ff 	mov.w	r5, #4294967295
9001141a:	e767      	b.n	900112ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
9001141c:	24026264 	.word	0x24026264
90011420:	90023f1c 	.word	0x90023f1c

90011424 <_ZN8touchgfx4RectaNERKS0_>:
90011424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011428:	f9b1 7000 	ldrsh.w	r7, [r1]
9001142c:	888c      	ldrh	r4, [r1, #4]
9001142e:	f9b0 9000 	ldrsh.w	r9, [r0]
90011432:	443c      	add	r4, r7
90011434:	b2a4      	uxth	r4, r4
90011436:	fa0f f884 	sxth.w	r8, r4
9001143a:	45c1      	cmp	r9, r8
9001143c:	da2f      	bge.n	9001149e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001143e:	8882      	ldrh	r2, [r0, #4]
90011440:	444a      	add	r2, r9
90011442:	b292      	uxth	r2, r2
90011444:	fa0f fe82 	sxth.w	lr, r2
90011448:	4577      	cmp	r7, lr
9001144a:	da28      	bge.n	9001149e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001144c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90011450:	88cb      	ldrh	r3, [r1, #6]
90011452:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90011456:	442b      	add	r3, r5
90011458:	b21b      	sxth	r3, r3
9001145a:	429e      	cmp	r6, r3
9001145c:	da1f      	bge.n	9001149e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001145e:	88c3      	ldrh	r3, [r0, #6]
90011460:	4433      	add	r3, r6
90011462:	b29b      	uxth	r3, r3
90011464:	fa0f fc83 	sxth.w	ip, r3
90011468:	4565      	cmp	r5, ip
9001146a:	da18      	bge.n	9001149e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001146c:	454f      	cmp	r7, r9
9001146e:	bfb8      	it	lt
90011470:	464f      	movlt	r7, r9
90011472:	42b5      	cmp	r5, r6
90011474:	bfb8      	it	lt
90011476:	4635      	movlt	r5, r6
90011478:	45f0      	cmp	r8, lr
9001147a:	bfd8      	it	le
9001147c:	4622      	movle	r2, r4
9001147e:	1bd2      	subs	r2, r2, r7
90011480:	8082      	strh	r2, [r0, #4]
90011482:	884a      	ldrh	r2, [r1, #2]
90011484:	88c9      	ldrh	r1, [r1, #6]
90011486:	8007      	strh	r7, [r0, #0]
90011488:	440a      	add	r2, r1
9001148a:	8045      	strh	r5, [r0, #2]
9001148c:	b292      	uxth	r2, r2
9001148e:	b211      	sxth	r1, r2
90011490:	458c      	cmp	ip, r1
90011492:	bfa8      	it	ge
90011494:	4613      	movge	r3, r2
90011496:	1b5b      	subs	r3, r3, r5
90011498:	80c3      	strh	r3, [r0, #6]
9001149a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001149e:	2300      	movs	r3, #0
900114a0:	8003      	strh	r3, [r0, #0]
900114a2:	8043      	strh	r3, [r0, #2]
900114a4:	8083      	strh	r3, [r0, #4]
900114a6:	80c3      	strh	r3, [r0, #6]
900114a8:	e7f7      	b.n	9001149a <_ZN8touchgfx4RectaNERKS0_+0x76>

900114aa <_ZNK8touchgfx4Rect7isEmptyEv>:
900114aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900114ae:	2b00      	cmp	r3, #0
900114b0:	dd06      	ble.n	900114c0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
900114b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
900114b6:	2800      	cmp	r0, #0
900114b8:	bfcc      	ite	gt
900114ba:	2000      	movgt	r0, #0
900114bc:	2001      	movle	r0, #1
900114be:	4770      	bx	lr
900114c0:	2001      	movs	r0, #1
900114c2:	4770      	bx	lr

900114c4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
900114c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900114c8:	2300      	movs	r3, #0
900114ca:	4604      	mov	r4, r0
900114cc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
900114ce:	8003      	strh	r3, [r0, #0]
900114d0:	8043      	strh	r3, [r0, #2]
900114d2:	8083      	strh	r3, [r0, #4]
900114d4:	80c3      	strh	r3, [r0, #6]
900114d6:	2d00      	cmp	r5, #0
900114d8:	d040      	beq.n	9001155c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
900114da:	1d28      	adds	r0, r5, #4
900114dc:	f7ff ffe5 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900114e0:	b988      	cbnz	r0, 90011506 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900114e2:	4620      	mov	r0, r4
900114e4:	f7ff ffe1 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900114e8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
900114ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900114f0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
900114f4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
900114f8:	b138      	cbz	r0, 9001150a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
900114fa:	8022      	strh	r2, [r4, #0]
900114fc:	8063      	strh	r3, [r4, #2]
900114fe:	f8a4 e004 	strh.w	lr, [r4, #4]
90011502:	f8a4 c006 	strh.w	ip, [r4, #6]
90011506:	69ad      	ldr	r5, [r5, #24]
90011508:	e7e5      	b.n	900114d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
9001150a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001150e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90011512:	4290      	cmp	r0, r2
90011514:	4607      	mov	r7, r0
90011516:	f8b4 8004 	ldrh.w	r8, [r4, #4]
9001151a:	460e      	mov	r6, r1
9001151c:	bfa8      	it	ge
9001151e:	4617      	movge	r7, r2
90011520:	4299      	cmp	r1, r3
90011522:	4472      	add	r2, lr
90011524:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90011528:	bfa8      	it	ge
9001152a:	461e      	movge	r6, r3
9001152c:	4440      	add	r0, r8
9001152e:	4471      	add	r1, lr
90011530:	4463      	add	r3, ip
90011532:	b200      	sxth	r0, r0
90011534:	8027      	strh	r7, [r4, #0]
90011536:	b212      	sxth	r2, r2
90011538:	8066      	strh	r6, [r4, #2]
9001153a:	b209      	sxth	r1, r1
9001153c:	b21b      	sxth	r3, r3
9001153e:	4290      	cmp	r0, r2
90011540:	bfac      	ite	ge
90011542:	ebc7 0200 	rsbge	r2, r7, r0
90011546:	ebc7 0202 	rsblt	r2, r7, r2
9001154a:	4299      	cmp	r1, r3
9001154c:	bfac      	ite	ge
9001154e:	ebc6 0301 	rsbge	r3, r6, r1
90011552:	ebc6 0303 	rsblt	r3, r6, r3
90011556:	80a2      	strh	r2, [r4, #4]
90011558:	80e3      	strh	r3, [r4, #6]
9001155a:	e7d4      	b.n	90011506 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001155c:	4620      	mov	r0, r4
9001155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011562 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90011562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90011566:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001156a:	b383      	cbz	r3, 900115ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
9001156c:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001156e:	b374      	cbz	r4, 900115ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90011570:	f9b1 5000 	ldrsh.w	r5, [r1]
90011574:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90011578:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
9001157c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90011580:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90011584:	b303      	cbz	r3, 900115c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90011586:	4668      	mov	r0, sp
90011588:	1d21      	adds	r1, r4, #4
9001158a:	f8ad 5000 	strh.w	r5, [sp]
9001158e:	f8ad 6002 	strh.w	r6, [sp, #2]
90011592:	f8ad 7004 	strh.w	r7, [sp, #4]
90011596:	f8ad 8006 	strh.w	r8, [sp, #6]
9001159a:	f7ff ff43 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001159e:	4668      	mov	r0, sp
900115a0:	f7ff ff83 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900115a4:	b980      	cbnz	r0, 900115c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900115a6:	f8bd 3000 	ldrh.w	r3, [sp]
900115aa:	4669      	mov	r1, sp
900115ac:	88a2      	ldrh	r2, [r4, #4]
900115ae:	4620      	mov	r0, r4
900115b0:	1a9b      	subs	r3, r3, r2
900115b2:	88e2      	ldrh	r2, [r4, #6]
900115b4:	f8ad 3000 	strh.w	r3, [sp]
900115b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900115bc:	1a9b      	subs	r3, r3, r2
900115be:	f8ad 3002 	strh.w	r3, [sp, #2]
900115c2:	6823      	ldr	r3, [r4, #0]
900115c4:	689b      	ldr	r3, [r3, #8]
900115c6:	4798      	blx	r3
900115c8:	69a4      	ldr	r4, [r4, #24]
900115ca:	2c00      	cmp	r4, #0
900115cc:	d1d8      	bne.n	90011580 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
900115ce:	b002      	add	sp, #8
900115d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900115d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
900115d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
900115d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900115da:	460d      	mov	r5, r1
900115dc:	4616      	mov	r6, r2
900115de:	b323      	cbz	r3, 9001162a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900115e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
900115e2:	b314      	cbz	r4, 9001162a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
900115e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900115e8:	b1eb      	cbz	r3, 90011626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
900115ea:	6828      	ldr	r0, [r5, #0]
900115ec:	466b      	mov	r3, sp
900115ee:	6869      	ldr	r1, [r5, #4]
900115f0:	c303      	stmia	r3!, {r0, r1}
900115f2:	4668      	mov	r0, sp
900115f4:	1d21      	adds	r1, r4, #4
900115f6:	f7ff ff15 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
900115fa:	4668      	mov	r0, sp
900115fc:	f7ff ff55 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90011600:	b988      	cbnz	r0, 90011626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90011602:	f8bd 3000 	ldrh.w	r3, [sp]
90011606:	4669      	mov	r1, sp
90011608:	88a2      	ldrh	r2, [r4, #4]
9001160a:	4620      	mov	r0, r4
9001160c:	1a9b      	subs	r3, r3, r2
9001160e:	88e2      	ldrh	r2, [r4, #6]
90011610:	f8ad 3000 	strh.w	r3, [sp]
90011614:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90011618:	1a9b      	subs	r3, r3, r2
9001161a:	4632      	mov	r2, r6
9001161c:	f8ad 3002 	strh.w	r3, [sp, #2]
90011620:	6823      	ldr	r3, [r4, #0]
90011622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90011624:	4798      	blx	r3
90011626:	69a4      	ldr	r4, [r4, #24]
90011628:	e7db      	b.n	900115e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
9001162a:	b002      	add	sp, #8
9001162c:	bd70      	pop	{r4, r5, r6, pc}

9001162e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
9001162e:	6803      	ldr	r3, [r0, #0]
90011630:	b513      	push	{r0, r1, r4, lr}
90011632:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90011636:	2300      	movs	r3, #0
90011638:	e9cd 3300 	strd	r3, r3, [sp]
9001163c:	466b      	mov	r3, sp
9001163e:	47a0      	blx	r4
90011640:	b002      	add	sp, #8
90011642:	bd10      	pop	{r4, pc}

90011644 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90011644:	2301      	movs	r3, #1
90011646:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9001164a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001164e:	4770      	bx	lr

90011650 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90011650:	2301      	movs	r3, #1
90011652:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90011656:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001165a:	4770      	bx	lr

9001165c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9001165c:	6843      	ldr	r3, [r0, #4]
9001165e:	2201      	movs	r2, #1
90011660:	725a      	strb	r2, [r3, #9]
90011662:	6840      	ldr	r0, [r0, #4]
90011664:	6803      	ldr	r3, [r0, #0]
90011666:	691b      	ldr	r3, [r3, #16]
90011668:	4718      	bx	r3

9001166a <_ZN8touchgfx3HAL8flushDMAEv>:
9001166a:	6840      	ldr	r0, [r0, #4]
9001166c:	6803      	ldr	r3, [r0, #0]
9001166e:	689b      	ldr	r3, [r3, #8]
90011670:	4718      	bx	r3

90011672 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90011672:	b530      	push	{r4, r5, lr}
90011674:	b08b      	sub	sp, #44	; 0x2c
90011676:	6804      	ldr	r4, [r0, #0]
90011678:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001167c:	9509      	str	r5, [sp, #36]	; 0x24
9001167e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90011682:	9508      	str	r5, [sp, #32]
90011684:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90011688:	9507      	str	r5, [sp, #28]
9001168a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
9001168e:	9506      	str	r5, [sp, #24]
90011690:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90011694:	9505      	str	r5, [sp, #20]
90011696:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
9001169a:	9504      	str	r5, [sp, #16]
9001169c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
900116a0:	9503      	str	r5, [sp, #12]
900116a2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
900116a6:	9502      	str	r5, [sp, #8]
900116a8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
900116ac:	e9cd 3500 	strd	r3, r5, [sp]
900116b0:	4613      	mov	r3, r2
900116b2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
900116b4:	2200      	movs	r2, #0
900116b6:	47a0      	blx	r4
900116b8:	b00b      	add	sp, #44	; 0x2c
900116ba:	bd30      	pop	{r4, r5, pc}

900116bc <_ZN8touchgfx3HAL10beginFrameEv>:
900116bc:	4b04      	ldr	r3, [pc, #16]	; (900116d0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
900116be:	781b      	ldrb	r3, [r3, #0]
900116c0:	b123      	cbz	r3, 900116cc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
900116c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
900116c6:	f080 0001 	eor.w	r0, r0, #1
900116ca:	4770      	bx	lr
900116cc:	2001      	movs	r0, #1
900116ce:	4770      	bx	lr
900116d0:	24026262 	.word	0x24026262

900116d4 <_ZN8touchgfx3HAL8endFrameEv>:
900116d4:	b510      	push	{r4, lr}
900116d6:	4604      	mov	r4, r0
900116d8:	6840      	ldr	r0, [r0, #4]
900116da:	6803      	ldr	r3, [r0, #0]
900116dc:	689b      	ldr	r3, [r3, #8]
900116de:	4798      	blx	r3
900116e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
900116e4:	b113      	cbz	r3, 900116ec <_ZN8touchgfx3HAL8endFrameEv+0x18>
900116e6:	2301      	movs	r3, #1
900116e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
900116ec:	bd10      	pop	{r4, pc}

900116ee <_ZN8touchgfx3HAL10initializeEv>:
900116ee:	b510      	push	{r4, lr}
900116f0:	4604      	mov	r4, r0
900116f2:	f7f0 f91f 	bl	90001934 <_ZN8touchgfx10OSWrappers10initializeEv>
900116f6:	f7ee ff03 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
900116fa:	6860      	ldr	r0, [r4, #4]
900116fc:	6803      	ldr	r3, [r0, #0]
900116fe:	68db      	ldr	r3, [r3, #12]
90011700:	4798      	blx	r3
90011702:	68e0      	ldr	r0, [r4, #12]
90011704:	6803      	ldr	r3, [r0, #0]
90011706:	689b      	ldr	r3, [r3, #8]
90011708:	4798      	blx	r3
9001170a:	6823      	ldr	r3, [r4, #0]
9001170c:	4620      	mov	r0, r4
9001170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90011710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90011714:	4718      	bx	r3
	...

90011718 <_ZN8touchgfx3HAL4tickEv>:
90011718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9001171a:	6803      	ldr	r3, [r0, #0]
9001171c:	4604      	mov	r4, r0
9001171e:	4d5b      	ldr	r5, [pc, #364]	; (9001188c <_ZN8touchgfx3HAL4tickEv+0x174>)
90011720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90011724:	4798      	blx	r3
90011726:	2800      	cmp	r0, #0
90011728:	f000 8095 	beq.w	90011856 <_ZN8touchgfx3HAL4tickEv+0x13e>
9001172c:	2001      	movs	r0, #1
9001172e:	2600      	movs	r6, #0
90011730:	f7ee ff10 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90011734:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90011738:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
9001173c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90011740:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90011744:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90011748:	b133      	cbz	r3, 90011758 <_ZN8touchgfx3HAL4tickEv+0x40>
9001174a:	6823      	ldr	r3, [r4, #0]
9001174c:	4620      	mov	r0, r4
9001174e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90011752:	4798      	blx	r3
90011754:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90011758:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9001175c:	2601      	movs	r6, #1
9001175e:	6862      	ldr	r2, [r4, #4]
90011760:	f083 0301 	eor.w	r3, r3, #1
90011764:	702e      	strb	r6, [r5, #0]
90011766:	7253      	strb	r3, [r2, #9]
90011768:	f002 fd68 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
9001176c:	6803      	ldr	r3, [r0, #0]
9001176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011770:	4798      	blx	r3
90011772:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90011776:	b90b      	cbnz	r3, 9001177c <_ZN8touchgfx3HAL4tickEv+0x64>
90011778:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
9001177c:	f002 fd5e 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
90011780:	6803      	ldr	r3, [r0, #0]
90011782:	695b      	ldr	r3, [r3, #20]
90011784:	4798      	blx	r3
90011786:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011788:	6803      	ldr	r3, [r0, #0]
9001178a:	691b      	ldr	r3, [r3, #16]
9001178c:	4798      	blx	r3
9001178e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90011792:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90011796:	3b01      	subs	r3, #1
90011798:	b2db      	uxtb	r3, r3
9001179a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9001179e:	b10a      	cbz	r2, 900117a4 <_ZN8touchgfx3HAL4tickEv+0x8c>
900117a0:	2b00      	cmp	r3, #0
900117a2:	d1eb      	bne.n	9001177c <_ZN8touchgfx3HAL4tickEv+0x64>
900117a4:	4a3a      	ldr	r2, [pc, #232]	; (90011890 <_ZN8touchgfx3HAL4tickEv+0x178>)
900117a6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
900117aa:	7813      	ldrb	r3, [r2, #0]
900117ac:	3301      	adds	r3, #1
900117ae:	b25b      	sxtb	r3, r3
900117b0:	4299      	cmp	r1, r3
900117b2:	7013      	strb	r3, [r2, #0]
900117b4:	dc10      	bgt.n	900117d8 <_ZN8touchgfx3HAL4tickEv+0xc0>
900117b6:	2300      	movs	r3, #0
900117b8:	68e0      	ldr	r0, [r4, #12]
900117ba:	a902      	add	r1, sp, #8
900117bc:	7013      	strb	r3, [r2, #0]
900117be:	aa03      	add	r2, sp, #12
900117c0:	6803      	ldr	r3, [r0, #0]
900117c2:	68db      	ldr	r3, [r3, #12]
900117c4:	4798      	blx	r3
900117c6:	6823      	ldr	r3, [r4, #0]
900117c8:	2800      	cmp	r0, #0
900117ca:	d050      	beq.n	9001186e <_ZN8touchgfx3HAL4tickEv+0x156>
900117cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900117d0:	4620      	mov	r0, r4
900117d2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
900117d6:	4798      	blx	r3
900117d8:	2300      	movs	r3, #0
900117da:	6960      	ldr	r0, [r4, #20]
900117dc:	f88d 3007 	strb.w	r3, [sp, #7]
900117e0:	b158      	cbz	r0, 900117fa <_ZN8touchgfx3HAL4tickEv+0xe2>
900117e2:	6803      	ldr	r3, [r0, #0]
900117e4:	f10d 0107 	add.w	r1, sp, #7
900117e8:	68db      	ldr	r3, [r3, #12]
900117ea:	4798      	blx	r3
900117ec:	b128      	cbz	r0, 900117fa <_ZN8touchgfx3HAL4tickEv+0xe2>
900117ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
900117f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
900117f4:	6803      	ldr	r3, [r0, #0]
900117f6:	68db      	ldr	r3, [r3, #12]
900117f8:	4798      	blx	r3
900117fa:	f104 001c 	add.w	r0, r4, #28
900117fe:	f011 fa63 	bl	90022cc8 <_ZN8touchgfx8Gestures4tickEv>
90011802:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90011806:	b30b      	cbz	r3, 9001184c <_ZN8touchgfx3HAL4tickEv+0x134>
90011808:	6920      	ldr	r0, [r4, #16]
9001180a:	6803      	ldr	r3, [r0, #0]
9001180c:	691b      	ldr	r3, [r3, #16]
9001180e:	4798      	blx	r3
90011810:	6f23      	ldr	r3, [r4, #112]	; 0x70
90011812:	4606      	mov	r6, r0
90011814:	b903      	cbnz	r3, 90011818 <_ZN8touchgfx3HAL4tickEv+0x100>
90011816:	6720      	str	r0, [r4, #112]	; 0x70
90011818:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001181a:	4a1e      	ldr	r2, [pc, #120]	; (90011894 <_ZN8touchgfx3HAL4tickEv+0x17c>)
9001181c:	1af3      	subs	r3, r6, r3
9001181e:	4293      	cmp	r3, r2
90011820:	d914      	bls.n	9001184c <_ZN8touchgfx3HAL4tickEv+0x134>
90011822:	6920      	ldr	r0, [r4, #16]
90011824:	6803      	ldr	r3, [r0, #0]
90011826:	699b      	ldr	r3, [r3, #24]
90011828:	4798      	blx	r3
9001182a:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001182c:	2264      	movs	r2, #100	; 0x64
9001182e:	1af3      	subs	r3, r6, r3
90011830:	fbb3 f3f2 	udiv	r3, r3, r2
90011834:	fbb0 f0f3 	udiv	r0, r0, r3
90011838:	2800      	cmp	r0, #0
9001183a:	dc1d      	bgt.n	90011878 <_ZN8touchgfx3HAL4tickEv+0x160>
9001183c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90011840:	6920      	ldr	r0, [r4, #16]
90011842:	2100      	movs	r1, #0
90011844:	6803      	ldr	r3, [r0, #0]
90011846:	69db      	ldr	r3, [r3, #28]
90011848:	4798      	blx	r3
9001184a:	6726      	str	r6, [r4, #112]	; 0x70
9001184c:	f002 fcf6 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
90011850:	6803      	ldr	r3, [r0, #0]
90011852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011854:	4798      	blx	r3
90011856:	6823      	ldr	r3, [r4, #0]
90011858:	4620      	mov	r0, r4
9001185a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9001185e:	4798      	blx	r3
90011860:	2001      	movs	r0, #1
90011862:	f7ee feab 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90011866:	2300      	movs	r3, #0
90011868:	702b      	strb	r3, [r5, #0]
9001186a:	b004      	add	sp, #16
9001186c:	bd70      	pop	{r4, r5, r6, pc}
9001186e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90011872:	4620      	mov	r0, r4
90011874:	4798      	blx	r3
90011876:	e7af      	b.n	900117d8 <_ZN8touchgfx3HAL4tickEv+0xc0>
90011878:	2863      	cmp	r0, #99	; 0x63
9001187a:	bfcb      	itete	gt
9001187c:	2300      	movgt	r3, #0
9001187e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90011882:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90011886:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
9001188a:	e7d9      	b.n	90011840 <_ZN8touchgfx3HAL4tickEv+0x128>
9001188c:	24026268 	.word	0x24026268
90011890:	24026269 	.word	0x24026269
90011894:	05f5e100 	.word	0x05f5e100

90011898 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90011898:	f7f0 b87e 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001189c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
9001189c:	6581      	str	r1, [r0, #88]	; 0x58
9001189e:	301c      	adds	r0, #28
900118a0:	f011 ba10 	b.w	90022cc4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

900118a4 <_ZN8touchgfx3HAL5touchEll>:
900118a4:	b530      	push	{r4, r5, lr}
900118a6:	b087      	sub	sp, #28
900118a8:	4604      	mov	r4, r0
900118aa:	a804      	add	r0, sp, #16
900118ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
900118b0:	f002 fac2 	bl	90013e38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
900118b4:	9b04      	ldr	r3, [sp, #16]
900118b6:	a906      	add	r1, sp, #24
900118b8:	a803      	add	r0, sp, #12
900118ba:	f8ad 300c 	strh.w	r3, [sp, #12]
900118be:	9b05      	ldr	r3, [sp, #20]
900118c0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
900118c4:	f002 fb0a 	bl	90013edc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
900118c8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
900118cc:	f104 001c 	add.w	r0, r4, #28
900118d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
900118d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
900118d8:	b189      	cbz	r1, 900118fe <_ZN8touchgfx3HAL5touchEll+0x5a>
900118da:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
900118de:	9300      	str	r3, [sp, #0]
900118e0:	4613      	mov	r3, r2
900118e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900118e6:	462a      	mov	r2, r5
900118e8:	f011 f9fc 	bl	90022ce4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
900118ec:	b128      	cbz	r0, 900118fa <_ZN8touchgfx3HAL5touchEll+0x56>
900118ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
900118f2:	65e3      	str	r3, [r4, #92]	; 0x5c
900118f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900118f8:	6623      	str	r3, [r4, #96]	; 0x60
900118fa:	b007      	add	sp, #28
900118fc:	bd30      	pop	{r4, r5, pc}
900118fe:	f011 fa31 	bl	90022d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90011902:	2301      	movs	r3, #1
90011904:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90011908:	e7f1      	b.n	900118ee <_ZN8touchgfx3HAL5touchEll+0x4a>

9001190a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
9001190a:	b510      	push	{r4, lr}
9001190c:	2b00      	cmp	r3, #0
9001190e:	d046      	beq.n	9001199e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011910:	ea81 0002 	eor.w	r0, r1, r2
90011914:	07c4      	lsls	r4, r0, #31
90011916:	d508      	bpl.n	9001192a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90011918:	440b      	add	r3, r1
9001191a:	3a01      	subs	r2, #1
9001191c:	428b      	cmp	r3, r1
9001191e:	d93e      	bls.n	9001199e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011920:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011924:	f801 0b01 	strb.w	r0, [r1], #1
90011928:	e7f8      	b.n	9001191c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
9001192a:	07d0      	lsls	r0, r2, #31
9001192c:	bf42      	ittt	mi
9001192e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90011932:	f103 33ff 	addmi.w	r3, r3, #4294967295
90011936:	f801 0b01 	strbmi.w	r0, [r1], #1
9001193a:	2b01      	cmp	r3, #1
9001193c:	d911      	bls.n	90011962 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001193e:	ea81 0402 	eor.w	r4, r1, r2
90011942:	4610      	mov	r0, r2
90011944:	07a4      	lsls	r4, r4, #30
90011946:	d022      	beq.n	9001198e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90011948:	f023 0401 	bic.w	r4, r3, #1
9001194c:	440c      	add	r4, r1
9001194e:	428c      	cmp	r4, r1
90011950:	4602      	mov	r2, r0
90011952:	d904      	bls.n	9001195e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90011954:	8812      	ldrh	r2, [r2, #0]
90011956:	3002      	adds	r0, #2
90011958:	f821 2b02 	strh.w	r2, [r1], #2
9001195c:	e7f7      	b.n	9001194e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001195e:	f003 0301 	and.w	r3, r3, #1
90011962:	f023 0003 	bic.w	r0, r3, #3
90011966:	4408      	add	r0, r1
90011968:	4288      	cmp	r0, r1
9001196a:	4614      	mov	r4, r2
9001196c:	d904      	bls.n	90011978 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9001196e:	6824      	ldr	r4, [r4, #0]
90011970:	3204      	adds	r2, #4
90011972:	f841 4b04 	str.w	r4, [r1], #4
90011976:	e7f7      	b.n	90011968 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90011978:	f003 0303 	and.w	r3, r3, #3
9001197c:	3a01      	subs	r2, #1
9001197e:	440b      	add	r3, r1
90011980:	428b      	cmp	r3, r1
90011982:	d90c      	bls.n	9001199e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011984:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011988:	f801 0b01 	strb.w	r0, [r1], #1
9001198c:	e7f8      	b.n	90011980 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9001198e:	0790      	lsls	r0, r2, #30
90011990:	d0e7      	beq.n	90011962 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90011992:	f832 0b02 	ldrh.w	r0, [r2], #2
90011996:	3b02      	subs	r3, #2
90011998:	f821 0b02 	strh.w	r0, [r1], #2
9001199c:	e7e1      	b.n	90011962 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001199e:	2001      	movs	r0, #1
900119a0:	bd10      	pop	{r4, pc}

900119a2 <_ZN8touchgfx3HAL7noTouchEv>:
900119a2:	b510      	push	{r4, lr}
900119a4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
900119a8:	4604      	mov	r4, r0
900119aa:	b153      	cbz	r3, 900119c2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
900119ac:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
900119b0:	2101      	movs	r1, #1
900119b2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
900119b6:	301c      	adds	r0, #28
900119b8:	f011 f9d4 	bl	90022d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900119bc:	2300      	movs	r3, #0
900119be:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900119c2:	bd10      	pop	{r4, pc}

900119c4 <_ZN8touchgfx8Drawable5setXYEss>:
900119c4:	b570      	push	{r4, r5, r6, lr}
900119c6:	6803      	ldr	r3, [r0, #0]
900119c8:	4604      	mov	r4, r0
900119ca:	4615      	mov	r5, r2
900119cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900119ce:	4798      	blx	r3
900119d0:	6823      	ldr	r3, [r4, #0]
900119d2:	4629      	mov	r1, r5
900119d4:	4620      	mov	r0, r4
900119d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900119d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900119dc:	4718      	bx	r3
	...

900119e0 <_ZN8touchgfx3HAL3lcdEv>:
900119e0:	4b04      	ldr	r3, [pc, #16]	; (900119f4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
900119e2:	681b      	ldr	r3, [r3, #0]
900119e4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900119e8:	b10a      	cbz	r2, 900119ee <_ZN8touchgfx3HAL3lcdEv+0xe>
900119ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900119ec:	b900      	cbnz	r0, 900119f0 <_ZN8touchgfx3HAL3lcdEv+0x10>
900119ee:	6898      	ldr	r0, [r3, #8]
900119f0:	4770      	bx	lr
900119f2:	bf00      	nop
900119f4:	24026264 	.word	0x24026264

900119f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
900119f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900119fc:	b085      	sub	sp, #20
900119fe:	4604      	mov	r4, r0
90011a00:	2000      	movs	r0, #0
90011a02:	4699      	mov	r9, r3
90011a04:	ad04      	add	r5, sp, #16
90011a06:	460f      	mov	r7, r1
90011a08:	4690      	mov	r8, r2
90011a0a:	f845 0d04 	str.w	r0, [r5, #-4]!
90011a0e:	69a0      	ldr	r0, [r4, #24]
90011a10:	6806      	ldr	r6, [r0, #0]
90011a12:	9501      	str	r5, [sp, #4]
90011a14:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90011a18:	9500      	str	r5, [sp, #0]
90011a1a:	6835      	ldr	r5, [r6, #0]
90011a1c:	47a8      	blx	r5
90011a1e:	4d10      	ldr	r5, [pc, #64]	; (90011a60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90011a20:	4606      	mov	r6, r0
90011a22:	f8a5 9000 	strh.w	r9, [r5]
90011a26:	f7ff ffdb 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011a2a:	6803      	ldr	r3, [r0, #0]
90011a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a2e:	4798      	blx	r3
90011a30:	b128      	cbz	r0, 90011a3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90011a32:	2801      	cmp	r0, #1
90011a34:	d00b      	beq.n	90011a4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90011a36:	4630      	mov	r0, r6
90011a38:	b005      	add	sp, #20
90011a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011a3e:	882b      	ldrh	r3, [r5, #0]
90011a40:	fb08 7203 	mla	r2, r8, r3, r7
90011a44:	9b03      	ldr	r3, [sp, #12]
90011a46:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90011a4a:	63e3      	str	r3, [r4, #60]	; 0x3c
90011a4c:	e7f3      	b.n	90011a36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90011a4e:	882a      	ldrh	r2, [r5, #0]
90011a50:	9b03      	ldr	r3, [sp, #12]
90011a52:	fb08 7202 	mla	r2, r8, r2, r7
90011a56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90011a5a:	1a9a      	subs	r2, r3, r2
90011a5c:	63e2      	str	r2, [r4, #60]	; 0x3c
90011a5e:	e7ea      	b.n	90011a36 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90011a60:	2402625e 	.word	0x2402625e

90011a64 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90011a64:	b5f0      	push	{r4, r5, r6, r7, lr}
90011a66:	b08b      	sub	sp, #44	; 0x2c
90011a68:	4617      	mov	r7, r2
90011a6a:	4604      	mov	r4, r0
90011a6c:	460e      	mov	r6, r1
90011a6e:	461d      	mov	r5, r3
90011a70:	f7ff ffb6 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011a74:	6803      	ldr	r3, [r0, #0]
90011a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a78:	4798      	blx	r3
90011a7a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011a7e:	9007      	str	r0, [sp, #28]
90011a80:	4631      	mov	r1, r6
90011a82:	6822      	ldr	r2, [r4, #0]
90011a84:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011a88:	4b0c      	ldr	r3, [pc, #48]	; (90011abc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90011a8a:	4620      	mov	r0, r4
90011a8c:	881b      	ldrh	r3, [r3, #0]
90011a8e:	9306      	str	r3, [sp, #24]
90011a90:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011a94:	9305      	str	r3, [sp, #20]
90011a96:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90011a9a:	9304      	str	r3, [sp, #16]
90011a9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011aa0:	9303      	str	r3, [sp, #12]
90011aa2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011aa6:	9302      	str	r3, [sp, #8]
90011aa8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011aac:	e9cd 5300 	strd	r5, r3, [sp]
90011ab0:	463b      	mov	r3, r7
90011ab2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90011ab4:	2200      	movs	r2, #0
90011ab6:	47a8      	blx	r5
90011ab8:	b00b      	add	sp, #44	; 0x2c
90011aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011abc:	2402625e 	.word	0x2402625e

90011ac0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90011ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011ac4:	4698      	mov	r8, r3
90011ac6:	6803      	ldr	r3, [r0, #0]
90011ac8:	b08b      	sub	sp, #44	; 0x2c
90011aca:	4617      	mov	r7, r2
90011acc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90011ace:	460e      	mov	r6, r1
90011ad0:	4b13      	ldr	r3, [pc, #76]	; (90011b20 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90011ad2:	4604      	mov	r4, r0
90011ad4:	f8b3 9000 	ldrh.w	r9, [r3]
90011ad8:	f7ff ff82 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011adc:	6803      	ldr	r3, [r0, #0]
90011ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011ae0:	4798      	blx	r3
90011ae2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011ae6:	2200      	movs	r2, #0
90011ae8:	4631      	mov	r1, r6
90011aea:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011aee:	2302      	movs	r3, #2
90011af0:	4620      	mov	r0, r4
90011af2:	e9cd 9306 	strd	r9, r3, [sp, #24]
90011af6:	2301      	movs	r3, #1
90011af8:	9305      	str	r3, [sp, #20]
90011afa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011afe:	9304      	str	r3, [sp, #16]
90011b00:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011b04:	9303      	str	r3, [sp, #12]
90011b06:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011b0a:	9302      	str	r3, [sp, #8]
90011b0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011b10:	e9cd 8300 	strd	r8, r3, [sp]
90011b14:	463b      	mov	r3, r7
90011b16:	47a8      	blx	r5
90011b18:	b00b      	add	sp, #44	; 0x2c
90011b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011b1e:	bf00      	nop
90011b20:	2402625e 	.word	0x2402625e

90011b24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90011b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011b28:	4698      	mov	r8, r3
90011b2a:	6803      	ldr	r3, [r0, #0]
90011b2c:	b087      	sub	sp, #28
90011b2e:	460e      	mov	r6, r1
90011b30:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90011b32:	4617      	mov	r7, r2
90011b34:	4b0f      	ldr	r3, [pc, #60]	; (90011b74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90011b36:	4604      	mov	r4, r0
90011b38:	f8b3 9000 	ldrh.w	r9, [r3]
90011b3c:	f7ff ff50 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011b40:	6803      	ldr	r3, [r0, #0]
90011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b44:	4798      	blx	r3
90011b46:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
90011b4a:	463a      	mov	r2, r7
90011b4c:	4631      	mov	r1, r6
90011b4e:	f8cd 900c 	str.w	r9, [sp, #12]
90011b52:	e9cd 0304 	strd	r0, r3, [sp, #16]
90011b56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90011b5a:	4620      	mov	r0, r4
90011b5c:	9302      	str	r3, [sp, #8]
90011b5e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90011b62:	9301      	str	r3, [sp, #4]
90011b64:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90011b68:	9300      	str	r3, [sp, #0]
90011b6a:	4643      	mov	r3, r8
90011b6c:	47a8      	blx	r5
90011b6e:	b007      	add	sp, #28
90011b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011b74:	2402625e 	.word	0x2402625e

90011b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011b7c:	4604      	mov	r4, r0
90011b7e:	b08f      	sub	sp, #60	; 0x3c
90011b80:	4610      	mov	r0, r2
90011b82:	460d      	mov	r5, r1
90011b84:	4691      	mov	r9, r2
90011b86:	461e      	mov	r6, r3
90011b88:	f005 fade 	bl	90017148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011b8c:	2800      	cmp	r0, #0
90011b8e:	f000 809d 	beq.w	90011ccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90011b92:	6823      	ldr	r3, [r4, #0]
90011b94:	4620      	mov	r0, r4
90011b96:	f8df b198 	ldr.w	fp, [pc, #408]	; 90011d30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90011b9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
90011b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011ba0:	4798      	blx	r3
90011ba2:	6823      	ldr	r3, [r4, #0]
90011ba4:	4620      	mov	r0, r4
90011ba6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90011d34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90011baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011bac:	4798      	blx	r3
90011bae:	f8bb 3000 	ldrh.w	r3, [fp]
90011bb2:	4f5c      	ldr	r7, [pc, #368]	; (90011d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011bb4:	9301      	str	r3, [sp, #4]
90011bb6:	f8ba 3000 	ldrh.w	r3, [sl]
90011bba:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90011bbe:	4640      	mov	r0, r8
90011bc0:	9302      	str	r3, [sp, #8]
90011bc2:	883b      	ldrh	r3, [r7, #0]
90011bc4:	9303      	str	r3, [sp, #12]
90011bc6:	4b58      	ldr	r3, [pc, #352]	; (90011d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011bc8:	881a      	ldrh	r2, [r3, #0]
90011bca:	9305      	str	r3, [sp, #20]
90011bcc:	9204      	str	r2, [sp, #16]
90011bce:	f005 fb4f 	bl	90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011bd2:	8038      	strh	r0, [r7, #0]
90011bd4:	4640      	mov	r0, r8
90011bd6:	f005 fb7f 	bl	900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011bda:	9b05      	ldr	r3, [sp, #20]
90011bdc:	b280      	uxth	r0, r0
90011bde:	8018      	strh	r0, [r3, #0]
90011be0:	4b52      	ldr	r3, [pc, #328]	; (90011d2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90011be2:	781b      	ldrb	r3, [r3, #0]
90011be4:	2b00      	cmp	r3, #0
90011be6:	d174      	bne.n	90011cd2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90011be8:	883b      	ldrh	r3, [r7, #0]
90011bea:	f8aa 0000 	strh.w	r0, [sl]
90011bee:	f8ab 3000 	strh.w	r3, [fp]
90011bf2:	4648      	mov	r0, r9
90011bf4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90011bf8:	f005 faa6 	bl	90017148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011bfc:	2200      	movs	r2, #0
90011bfe:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90011c02:	4611      	mov	r1, r2
90011c04:	4628      	mov	r0, r5
90011c06:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90011c0a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
90011c0e:	f7ff fed9 	bl	900119c4 <_ZN8touchgfx8Drawable5setXYEss>
90011c12:	2301      	movs	r3, #1
90011c14:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90011c18:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
90011c1c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011c20:	2b00      	cmp	r3, #0
90011c22:	dd5c      	ble.n	90011cde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011c24:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011c28:	2b00      	cmp	r3, #0
90011c2a:	dd58      	ble.n	90011cde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011c2c:	462a      	mov	r2, r5
90011c2e:	ab0a      	add	r3, sp, #40	; 0x28
90011c30:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011c34:	6851      	ldr	r1, [r2, #4]
90011c36:	c303      	stmia	r3!, {r0, r1}
90011c38:	4631      	mov	r1, r6
90011c3a:	a80a      	add	r0, sp, #40	; 0x28
90011c3c:	f7ff fbf2 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90011c40:	4b38      	ldr	r3, [pc, #224]	; (90011d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011c42:	2100      	movs	r1, #0
90011c44:	f9b3 2000 	ldrsh.w	r2, [r3]
90011c48:	4b37      	ldr	r3, [pc, #220]	; (90011d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011c4a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90011c4e:	aa0a      	add	r2, sp, #40	; 0x28
90011c50:	f9b3 3000 	ldrsh.w	r3, [r3]
90011c54:	910c      	str	r1, [sp, #48]	; 0x30
90011c56:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90011c5a:	ab08      	add	r3, sp, #32
90011c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
90011c60:	e883 0003 	stmia.w	r3, {r0, r1}
90011c64:	4618      	mov	r0, r3
90011c66:	a90c      	add	r1, sp, #48	; 0x30
90011c68:	f7ff fbdc 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90011c6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90011c6e:	2b00      	cmp	r3, #0
90011c70:	d13c      	bne.n	90011cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90011c72:	2000      	movs	r0, #0
90011c74:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90011c78:	2600      	movs	r6, #0
90011c7a:	696b      	ldr	r3, [r5, #20]
90011c7c:	a908      	add	r1, sp, #32
90011c7e:	682a      	ldr	r2, [r5, #0]
90011c80:	4628      	mov	r0, r5
90011c82:	9305      	str	r3, [sp, #20]
90011c84:	616e      	str	r6, [r5, #20]
90011c86:	6892      	ldr	r2, [r2, #8]
90011c88:	4790      	blx	r2
90011c8a:	9b05      	ldr	r3, [sp, #20]
90011c8c:	4652      	mov	r2, sl
90011c8e:	4649      	mov	r1, r9
90011c90:	616b      	str	r3, [r5, #20]
90011c92:	4628      	mov	r0, r5
90011c94:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90011c98:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90011c9c:	f7ff fe92 	bl	900119c4 <_ZN8touchgfx8Drawable5setXYEss>
90011ca0:	9a01      	ldr	r2, [sp, #4]
90011ca2:	4b23      	ldr	r3, [pc, #140]	; (90011d30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90011ca4:	4620      	mov	r0, r4
90011ca6:	801a      	strh	r2, [r3, #0]
90011ca8:	9a02      	ldr	r2, [sp, #8]
90011caa:	4b22      	ldr	r3, [pc, #136]	; (90011d34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90011cac:	801a      	strh	r2, [r3, #0]
90011cae:	9a03      	ldr	r2, [sp, #12]
90011cb0:	4b1c      	ldr	r3, [pc, #112]	; (90011d24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011cb2:	801a      	strh	r2, [r3, #0]
90011cb4:	4b1c      	ldr	r3, [pc, #112]	; (90011d28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011cb6:	9a04      	ldr	r2, [sp, #16]
90011cb8:	801a      	strh	r2, [r3, #0]
90011cba:	6823      	ldr	r3, [r4, #0]
90011cbc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90011cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011cc2:	4798      	blx	r3
90011cc4:	6823      	ldr	r3, [r4, #0]
90011cc6:	4620      	mov	r0, r4
90011cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011cca:	4798      	blx	r3
90011ccc:	b00f      	add	sp, #60	; 0x3c
90011cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011cd2:	883b      	ldrh	r3, [r7, #0]
90011cd4:	f8ab 0000 	strh.w	r0, [fp]
90011cd8:	f8aa 3000 	strh.w	r3, [sl]
90011cdc:	e789      	b.n	90011bf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90011cde:	462a      	mov	r2, r5
90011ce0:	ab0a      	add	r3, sp, #40	; 0x28
90011ce2:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011ce6:	6851      	ldr	r1, [r2, #4]
90011ce8:	c303      	stmia	r3!, {r0, r1}
90011cea:	e7a9      	b.n	90011c40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90011cec:	a807      	add	r0, sp, #28
90011cee:	f005 fc2f 	bl	90017550 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011cf2:	4606      	mov	r6, r0
90011cf4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90011cf6:	6803      	ldr	r3, [r0, #0]
90011cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011cfa:	4798      	blx	r3
90011cfc:	4286      	cmp	r6, r0
90011cfe:	d1b8      	bne.n	90011c72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90011d00:	f7ff fe6e 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011d04:	6803      	ldr	r3, [r0, #0]
90011d06:	4606      	mov	r6, r0
90011d08:	a807      	add	r0, sp, #28
90011d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011d0c:	9305      	str	r3, [sp, #20]
90011d0e:	f005 fc1f 	bl	90017550 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011d12:	9b05      	ldr	r3, [sp, #20]
90011d14:	4601      	mov	r1, r0
90011d16:	4630      	mov	r0, r6
90011d18:	4798      	blx	r3
90011d1a:	f080 0001 	eor.w	r0, r0, #1
90011d1e:	b2c0      	uxtb	r0, r0
90011d20:	e7a8      	b.n	90011c74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90011d22:	bf00      	nop
90011d24:	24026258 	.word	0x24026258
90011d28:	2402625a 	.word	0x2402625a
90011d2c:	2402625c 	.word	0x2402625c
90011d30:	2402625e 	.word	0x2402625e
90011d34:	24026260 	.word	0x24026260

90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90011d38:	4b07      	ldr	r3, [pc, #28]	; (90011d58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90011d3a:	b510      	push	{r4, lr}
90011d3c:	781b      	ldrb	r3, [r3, #0]
90011d3e:	4604      	mov	r4, r0
90011d40:	b13b      	cbz	r3, 90011d52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011d42:	6803      	ldr	r3, [r0, #0]
90011d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011d46:	4798      	blx	r3
90011d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011d4a:	4283      	cmp	r3, r0
90011d4c:	d101      	bne.n	90011d52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011d4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90011d50:	bd10      	pop	{r4, pc}
90011d52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90011d54:	e7fc      	b.n	90011d50 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90011d56:	bf00      	nop
90011d58:	24026262 	.word	0x24026262

90011d5c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90011d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011d60:	461d      	mov	r5, r3
90011d62:	b08a      	sub	sp, #40	; 0x28
90011d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
90011d68:	4690      	mov	r8, r2
90011d6a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
90011d6e:	2400      	movs	r4, #0
90011d70:	4607      	mov	r7, r0
90011d72:	fb06 8505 	mla	r5, r6, r5, r8
90011d76:	9404      	str	r4, [sp, #16]
90011d78:	f88d 4020 	strb.w	r4, [sp, #32]
90011d7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011d80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011d84:	f8ad 3018 	strh.w	r3, [sp, #24]
90011d88:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011d8c:	f8ad 301a 	strh.w	r3, [sp, #26]
90011d90:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011d94:	f8ad 301c 	strh.w	r3, [sp, #28]
90011d98:	f7ff ffce 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011d9c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011da0:	6878      	ldr	r0, [r7, #4]
90011da2:	f8ad 601e 	strh.w	r6, [sp, #30]
90011da6:	a901      	add	r1, sp, #4
90011da8:	9505      	str	r5, [sp, #20]
90011daa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011dae:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90011db2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011db6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011dba:	6803      	ldr	r3, [r0, #0]
90011dbc:	685b      	ldr	r3, [r3, #4]
90011dbe:	4798      	blx	r3
90011dc0:	b00a      	add	sp, #40	; 0x28
90011dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011dc6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90011dc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011dca:	b08b      	sub	sp, #44	; 0x2c
90011dcc:	2400      	movs	r4, #0
90011dce:	4691      	mov	r9, r2
90011dd0:	461d      	mov	r5, r3
90011dd2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90011dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
90011dda:	4688      	mov	r8, r1
90011ddc:	4607      	mov	r7, r0
90011dde:	9404      	str	r4, [sp, #16]
90011de0:	fb06 9505 	mla	r5, r6, r5, r9
90011de4:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011de8:	f7ff ffa6 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011dec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011df0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011df4:	6878      	ldr	r0, [r7, #4]
90011df6:	f8ad 3018 	strh.w	r3, [sp, #24]
90011dfa:	a901      	add	r1, sp, #4
90011dfc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011e00:	9505      	str	r5, [sp, #20]
90011e02:	f8ad 301a 	strh.w	r3, [sp, #26]
90011e06:	f8ad 401c 	strh.w	r4, [sp, #28]
90011e0a:	f8ad 601e 	strh.w	r6, [sp, #30]
90011e0e:	f8cd 8010 	str.w	r8, [sp, #16]
90011e12:	f8ad 4020 	strh.w	r4, [sp, #32]
90011e16:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011e1a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011e1e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011e22:	6803      	ldr	r3, [r0, #0]
90011e24:	685b      	ldr	r3, [r3, #4]
90011e26:	4798      	blx	r3
90011e28:	b00b      	add	sp, #44	; 0x2c
90011e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90011e30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90011e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011e34:	b08a      	sub	sp, #40	; 0x28
90011e36:	4698      	mov	r8, r3
90011e38:	2300      	movs	r3, #0
90011e3a:	4606      	mov	r6, r0
90011e3c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90011e40:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90011e44:	2d0b      	cmp	r5, #11
90011e46:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
90011e4a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
90011e4e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90011e52:	9304      	str	r3, [sp, #16]
90011e54:	d137      	bne.n	90011ec6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90011e56:	2380      	movs	r3, #128	; 0x80
90011e58:	f88d 0020 	strb.w	r0, [sp, #32]
90011e5c:	4630      	mov	r0, r6
90011e5e:	9203      	str	r2, [sp, #12]
90011e60:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011e64:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011e68:	f8ad 3018 	strh.w	r3, [sp, #24]
90011e6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011e70:	f8ad 301a 	strh.w	r3, [sp, #26]
90011e74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011e78:	f8ad 301c 	strh.w	r3, [sp, #28]
90011e7c:	f7ff ff5c 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011e80:	2c0b      	cmp	r4, #11
90011e82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90011e86:	f8ad 701e 	strh.w	r7, [sp, #30]
90011e8a:	bf94      	ite	ls
90011e8c:	4b19      	ldrls	r3, [pc, #100]	; (90011ef4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90011e8e:	2100      	movhi	r1, #0
90011e90:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90011e94:	bf98      	it	ls
90011e96:	5d19      	ldrbls	r1, [r3, r4]
90011e98:	fb02 8307 	mla	r3, r2, r7, r8
90011e9c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011ea0:	10c9      	asrs	r1, r1, #3
90011ea2:	fb01 0003 	mla	r0, r1, r3, r0
90011ea6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
90011eaa:	a901      	add	r1, sp, #4
90011eac:	9005      	str	r0, [sp, #20]
90011eae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011eb2:	2300      	movs	r3, #0
90011eb4:	6870      	ldr	r0, [r6, #4]
90011eb6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011eba:	6803      	ldr	r3, [r0, #0]
90011ebc:	685b      	ldr	r3, [r3, #4]
90011ebe:	4798      	blx	r3
90011ec0:	b00a      	add	sp, #40	; 0x28
90011ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011ec6:	2d02      	cmp	r5, #2
90011ec8:	d109      	bne.n	90011ede <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90011eca:	28ff      	cmp	r0, #255	; 0xff
90011ecc:	d105      	bne.n	90011eda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90011ece:	f1bc 0f00 	cmp.w	ip, #0
90011ed2:	bf14      	ite	ne
90011ed4:	2340      	movne	r3, #64	; 0x40
90011ed6:	2320      	moveq	r3, #32
90011ed8:	e7be      	b.n	90011e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011eda:	2340      	movs	r3, #64	; 0x40
90011edc:	e7bc      	b.n	90011e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011ede:	28ff      	cmp	r0, #255	; 0xff
90011ee0:	d105      	bne.n	90011eee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90011ee2:	f1bc 0f00 	cmp.w	ip, #0
90011ee6:	bf14      	ite	ne
90011ee8:	2304      	movne	r3, #4
90011eea:	2301      	moveq	r3, #1
90011eec:	e7b4      	b.n	90011e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011eee:	2304      	movs	r3, #4
90011ef0:	e7b2      	b.n	90011e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011ef2:	bf00      	nop
90011ef4:	90026be0 	.word	0x90026be0

90011ef8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90011ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011efc:	b08b      	sub	sp, #44	; 0x2c
90011efe:	461d      	mov	r5, r3
90011f00:	2400      	movs	r4, #0
90011f02:	4688      	mov	r8, r1
90011f04:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90011f08:	4693      	mov	fp, r2
90011f0a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
90011f0e:	4607      	mov	r7, r0
90011f10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90011f14:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90011f18:	9404      	str	r4, [sp, #16]
90011f1a:	bf14      	ite	ne
90011f1c:	2308      	movne	r3, #8
90011f1e:	2302      	moveq	r3, #2
90011f20:	fb05 b50a 	mla	r5, r5, sl, fp
90011f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011f28:	f7ff ff06 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011f2c:	2e0b      	cmp	r6, #11
90011f2e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90011f32:	a901      	add	r1, sp, #4
90011f34:	bf98      	it	ls
90011f36:	4b13      	ldrls	r3, [pc, #76]	; (90011f84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90011f38:	f8ad a01e 	strh.w	sl, [sp, #30]
90011f3c:	bf98      	it	ls
90011f3e:	5d9c      	ldrbls	r4, [r3, r6]
90011f40:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011f44:	10e4      	asrs	r4, r4, #3
90011f46:	f8cd 8010 	str.w	r8, [sp, #16]
90011f4a:	f8ad 3018 	strh.w	r3, [sp, #24]
90011f4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011f52:	fb04 0405 	mla	r4, r4, r5, r0
90011f56:	6878      	ldr	r0, [r7, #4]
90011f58:	f8ad 301a 	strh.w	r3, [sp, #26]
90011f5c:	2300      	movs	r3, #0
90011f5e:	9405      	str	r4, [sp, #20]
90011f60:	f8ad 301c 	strh.w	r3, [sp, #28]
90011f64:	f88d 9020 	strb.w	r9, [sp, #32]
90011f68:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90011f6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011f70:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90011f74:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90011f78:	6803      	ldr	r3, [r0, #0]
90011f7a:	685b      	ldr	r3, [r3, #4]
90011f7c:	4798      	blx	r3
90011f7e:	b00b      	add	sp, #44	; 0x2c
90011f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011f84:	90026be0 	.word	0x90026be0

90011f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011f8c:	461e      	mov	r6, r3
90011f8e:	4b0a      	ldr	r3, [pc, #40]	; (90011fb8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90011f90:	460f      	mov	r7, r1
90011f92:	4690      	mov	r8, r2
90011f94:	881d      	ldrh	r5, [r3, #0]
90011f96:	f7ff fd23 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90011f9a:	6803      	ldr	r3, [r0, #0]
90011f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011f9e:	4798      	blx	r3
90011fa0:	280b      	cmp	r0, #11
90011fa2:	bf96      	itet	ls
90011fa4:	4b05      	ldrls	r3, [pc, #20]	; (90011fbc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90011fa6:	2400      	movhi	r4, #0
90011fa8:	5c1c      	ldrbls	r4, [r3, r0]
90011faa:	fb08 7005 	mla	r0, r8, r5, r7
90011fae:	10e4      	asrs	r4, r4, #3
90011fb0:	fb04 6000 	mla	r0, r4, r0, r6
90011fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011fb8:	2402625e 	.word	0x2402625e
90011fbc:	90026be0 	.word	0x90026be0

90011fc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90011fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
90011fc2:	b08b      	sub	sp, #44	; 0x2c
90011fc4:	461f      	mov	r7, r3
90011fc6:	4604      	mov	r4, r0
90011fc8:	4616      	mov	r6, r2
90011fca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011fce:	2500      	movs	r5, #0
90011fd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011fd4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011fd8:	9504      	str	r5, [sp, #16]
90011fda:	f8ad 3018 	strh.w	r3, [sp, #24]
90011fde:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011fe2:	f8ad 301a 	strh.w	r3, [sp, #26]
90011fe6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011fea:	f8ad 301c 	strh.w	r3, [sp, #28]
90011fee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011ff2:	f88d 3020 	strb.w	r3, [sp, #32]
90011ff6:	f7ff fe9f 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011ffa:	463a      	mov	r2, r7
90011ffc:	4631      	mov	r1, r6
90011ffe:	4603      	mov	r3, r0
90012000:	4620      	mov	r0, r4
90012002:	f7ff ffc1 	bl	90011f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012006:	4b0e      	ldr	r3, [pc, #56]	; (90012040 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90012008:	9005      	str	r0, [sp, #20]
9001200a:	881b      	ldrh	r3, [r3, #0]
9001200c:	f8ad 301e 	strh.w	r3, [sp, #30]
90012010:	f7ff fce6 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90012014:	6803      	ldr	r3, [r0, #0]
90012016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012018:	4798      	blx	r3
9001201a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001201c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90012020:	a901      	add	r1, sp, #4
90012022:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90012026:	9304      	str	r3, [sp, #16]
90012028:	6860      	ldr	r0, [r4, #4]
9001202a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
9001202e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90012032:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90012036:	6803      	ldr	r3, [r0, #0]
90012038:	685b      	ldr	r3, [r3, #4]
9001203a:	4798      	blx	r3
9001203c:	b00b      	add	sp, #44	; 0x2c
9001203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012040:	2402625e 	.word	0x2402625e

90012044 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90012044:	b5f0      	push	{r4, r5, r6, r7, lr}
90012046:	b08d      	sub	sp, #52	; 0x34
90012048:	2501      	movs	r5, #1
9001204a:	4604      	mov	r4, r0
9001204c:	466b      	mov	r3, sp
9001204e:	9503      	str	r5, [sp, #12]
90012050:	e883 0006 	stmia.w	r3, {r1, r2}
90012054:	2300      	movs	r3, #0
90012056:	f8bd 6000 	ldrh.w	r6, [sp]
9001205a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
9001205e:	9306      	str	r3, [sp, #24]
90012060:	6803      	ldr	r3, [r0, #0]
90012062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90012064:	4798      	blx	r3
90012066:	463a      	mov	r2, r7
90012068:	4631      	mov	r1, r6
9001206a:	4603      	mov	r3, r0
9001206c:	4620      	mov	r0, r4
9001206e:	f7ff ff8b 	bl	90011f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012072:	6c63      	ldr	r3, [r4, #68]	; 0x44
90012074:	9004      	str	r0, [sp, #16]
90012076:	9307      	str	r3, [sp, #28]
90012078:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001207c:	f8ad 3020 	strh.w	r3, [sp, #32]
90012080:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90012084:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90012088:	4b0e      	ldr	r3, [pc, #56]	; (900120c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
9001208a:	881b      	ldrh	r3, [r3, #0]
9001208c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90012090:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90012094:	f7ff fca4 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90012098:	6803      	ldr	r3, [r0, #0]
9001209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001209c:	4798      	blx	r3
9001209e:	23ff      	movs	r3, #255	; 0xff
900120a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900120a4:	a903      	add	r1, sp, #12
900120a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900120aa:	6860      	ldr	r0, [r4, #4]
900120ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900120b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900120b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900120b8:	6803      	ldr	r3, [r0, #0]
900120ba:	685b      	ldr	r3, [r3, #4]
900120bc:	4798      	blx	r3
900120be:	6c60      	ldr	r0, [r4, #68]	; 0x44
900120c0:	b00d      	add	sp, #52	; 0x34
900120c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
900120c4:	2402625e 	.word	0x2402625e

900120c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
900120c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900120cc:	b08c      	sub	sp, #48	; 0x30
900120ce:	461e      	mov	r6, r3
900120d0:	2300      	movs	r3, #0
900120d2:	4604      	mov	r4, r0
900120d4:	466d      	mov	r5, sp
900120d6:	9306      	str	r3, [sp, #24]
900120d8:	6803      	ldr	r3, [r0, #0]
900120da:	e885 0006 	stmia.w	r5, {r1, r2}
900120de:	2501      	movs	r5, #1
900120e0:	f8bd 7000 	ldrh.w	r7, [sp]
900120e4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
900120e8:	9503      	str	r5, [sp, #12]
900120ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900120ec:	4798      	blx	r3
900120ee:	4642      	mov	r2, r8
900120f0:	4639      	mov	r1, r7
900120f2:	4603      	mov	r3, r0
900120f4:	4620      	mov	r0, r4
900120f6:	f7ff ff47 	bl	90011f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
900120fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900120fe:	9004      	str	r0, [sp, #16]
90012100:	f8ad 3020 	strh.w	r3, [sp, #32]
90012104:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90012108:	9607      	str	r6, [sp, #28]
9001210a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001210e:	4b10      	ldr	r3, [pc, #64]	; (90012150 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90012110:	881b      	ldrh	r3, [r3, #0]
90012112:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90012116:	9b12      	ldr	r3, [sp, #72]	; 0x48
90012118:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
9001211c:	f7ff fc60 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
90012120:	6803      	ldr	r3, [r0, #0]
90012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012124:	4798      	blx	r3
90012126:	23ff      	movs	r3, #255	; 0xff
90012128:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
9001212c:	a903      	add	r1, sp, #12
9001212e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90012132:	6860      	ldr	r0, [r4, #4]
90012134:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90012138:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
9001213c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90012140:	6803      	ldr	r3, [r0, #0]
90012142:	685b      	ldr	r3, [r3, #4]
90012144:	4798      	blx	r3
90012146:	4630      	mov	r0, r6
90012148:	b00c      	add	sp, #48	; 0x30
9001214a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001214e:	bf00      	nop
90012150:	2402625e 	.word	0x2402625e

90012154 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90012154:	b5f0      	push	{r4, r5, r6, r7, lr}
90012156:	b085      	sub	sp, #20
90012158:	4605      	mov	r5, r0
9001215a:	ac02      	add	r4, sp, #8
9001215c:	e884 0006 	stmia.w	r4, {r1, r2}
90012160:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90012164:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90012168:	f7ff fde6 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001216c:	4631      	mov	r1, r6
9001216e:	4603      	mov	r3, r0
90012170:	463a      	mov	r2, r7
90012172:	4628      	mov	r0, r5
90012174:	f7ff ff08 	bl	90011f88 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012178:	4a05      	ldr	r2, [pc, #20]	; (90012190 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
9001217a:	682b      	ldr	r3, [r5, #0]
9001217c:	8812      	ldrh	r2, [r2, #0]
9001217e:	9200      	str	r2, [sp, #0]
90012180:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90012182:	4603      	mov	r3, r0
90012184:	4628      	mov	r0, r5
90012186:	e894 0006 	ldmia.w	r4, {r1, r2}
9001218a:	47b0      	blx	r6
9001218c:	b005      	add	sp, #20
9001218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012190:	2402625e 	.word	0x2402625e

90012194 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90012194:	b570      	push	{r4, r5, r6, lr}
90012196:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
9001219a:	4604      	mov	r4, r0
9001219c:	b19b      	cbz	r3, 900121c6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
9001219e:	2002      	movs	r0, #2
900121a0:	f7ee fa40 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
900121a4:	2300      	movs	r3, #0
900121a6:	4620      	mov	r0, r4
900121a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
900121ac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
900121b0:	6823      	ldr	r3, [r4, #0]
900121b2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
900121b6:	f7ff fdbf 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900121ba:	4601      	mov	r1, r0
900121bc:	4620      	mov	r0, r4
900121be:	462b      	mov	r3, r5
900121c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900121c4:	4718      	bx	r3
900121c6:	bd70      	pop	{r4, r5, r6, pc}

900121c8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
900121c8:	b570      	push	{r4, r5, r6, lr}
900121ca:	4605      	mov	r5, r0
900121cc:	460c      	mov	r4, r1
900121ce:	2003      	movs	r0, #3
900121d0:	b149      	cbz	r1, 900121e6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
900121d2:	f7ee f9bf 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900121d6:	6928      	ldr	r0, [r5, #16]
900121d8:	b168      	cbz	r0, 900121f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
900121da:	6803      	ldr	r3, [r0, #0]
900121dc:	2101      	movs	r1, #1
900121de:	695b      	ldr	r3, [r3, #20]
900121e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900121e4:	4718      	bx	r3
900121e6:	f7ee f9e9 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
900121ea:	6928      	ldr	r0, [r5, #16]
900121ec:	b118      	cbz	r0, 900121f6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
900121ee:	6803      	ldr	r3, [r0, #0]
900121f0:	4621      	mov	r1, r4
900121f2:	695b      	ldr	r3, [r3, #20]
900121f4:	e7f4      	b.n	900121e0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
900121f6:	bd70      	pop	{r4, r5, r6, pc}

900121f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
900121f8:	b538      	push	{r3, r4, r5, lr}
900121fa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
900121fe:	4604      	mov	r4, r0
90012200:	460d      	mov	r5, r1
90012202:	428b      	cmp	r3, r1
90012204:	d006      	beq.n	90012214 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90012206:	6803      	ldr	r3, [r0, #0]
90012208:	b929      	cbnz	r1, 90012216 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
9001220a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
9001220e:	4798      	blx	r3
90012210:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90012214:	bd38      	pop	{r3, r4, r5, pc}
90012216:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
9001221a:	e7f8      	b.n	9001220e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

9001221c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
9001221c:	4b0d      	ldr	r3, [pc, #52]	; (90012254 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
9001221e:	b510      	push	{r4, lr}
90012220:	781b      	ldrb	r3, [r3, #0]
90012222:	4604      	mov	r4, r0
90012224:	b95b      	cbnz	r3, 9001223e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90012226:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
9001222a:	2b02      	cmp	r3, #2
9001222c:	d007      	beq.n	9001223e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
9001222e:	6840      	ldr	r0, [r0, #4]
90012230:	f000 f900 	bl	90012434 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90012234:	b118      	cbz	r0, 9001223e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90012236:	6862      	ldr	r2, [r4, #4]
90012238:	7a53      	ldrb	r3, [r2, #9]
9001223a:	2b00      	cmp	r3, #0
9001223c:	d0fc      	beq.n	90012238 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
9001223e:	f7ef fba3 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90012242:	4620      	mov	r0, r4
90012244:	2100      	movs	r1, #0
90012246:	f7ff ffd7 	bl	900121f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
9001224a:	4620      	mov	r0, r4
9001224c:	f7ff fd74 	bl	90011d38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90012250:	bd10      	pop	{r4, pc}
90012252:	bf00      	nop
90012254:	24026262 	.word	0x24026262

90012258 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90012258:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
9001225c:	1a13      	subs	r3, r2, r0
9001225e:	4258      	negs	r0, r3
90012260:	4158      	adcs	r0, r3
90012262:	4770      	bx	lr

90012264 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90012264:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90012268:	1a9b      	subs	r3, r3, r2
9001226a:	2b00      	cmp	r3, #0
9001226c:	bfdc      	itt	le
9001226e:	6882      	ldrle	r2, [r0, #8]
90012270:	189b      	addle	r3, r3, r2
90012272:	2b01      	cmp	r3, #1
90012274:	bfcc      	ite	gt
90012276:	2000      	movgt	r0, #0
90012278:	2001      	movle	r0, #1
9001227a:	4770      	bx	lr

9001227c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
9001227c:	6902      	ldr	r2, [r0, #16]
9001227e:	6843      	ldr	r3, [r0, #4]
90012280:	2024      	movs	r0, #36	; 0x24
90012282:	fb00 3002 	mla	r0, r0, r2, r3
90012286:	4770      	bx	lr

90012288 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90012288:	6803      	ldr	r3, [r0, #0]
9001228a:	691b      	ldr	r3, [r3, #16]
9001228c:	4718      	bx	r3

9001228e <_ZN8touchgfx13DMA_Interface7executeEv>:
9001228e:	2301      	movs	r3, #1
90012290:	b570      	push	{r4, r5, r6, lr}
90012292:	7203      	strb	r3, [r0, #8]
90012294:	4604      	mov	r4, r0
90012296:	6840      	ldr	r0, [r0, #4]
90012298:	6803      	ldr	r3, [r0, #0]
9001229a:	699b      	ldr	r3, [r3, #24]
9001229c:	4798      	blx	r3
9001229e:	6803      	ldr	r3, [r0, #0]
900122a0:	4605      	mov	r5, r0
900122a2:	2b40      	cmp	r3, #64	; 0x40
900122a4:	d00c      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900122a6:	d810      	bhi.n	900122ca <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
900122a8:	2b04      	cmp	r3, #4
900122aa:	d01d      	beq.n	900122e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
900122ac:	d804      	bhi.n	900122b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
900122ae:	2b01      	cmp	r3, #1
900122b0:	d006      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900122b2:	2b02      	cmp	r3, #2
900122b4:	d02c      	beq.n	90012310 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
900122b6:	bd70      	pop	{r4, r5, r6, pc}
900122b8:	2b08      	cmp	r3, #8
900122ba:	d01d      	beq.n	900122f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
900122bc:	2b20      	cmp	r3, #32
900122be:	d1fa      	bne.n	900122b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
900122c0:	6823      	ldr	r3, [r4, #0]
900122c2:	4620      	mov	r0, r4
900122c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900122c6:	4798      	blx	r3
900122c8:	e013      	b.n	900122f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
900122ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900122ce:	d0f7      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900122d0:	d804      	bhi.n	900122dc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
900122d2:	2b80      	cmp	r3, #128	; 0x80
900122d4:	d0f4      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900122d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900122da:	e7f0      	b.n	900122be <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
900122dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900122e0:	d0ee      	beq.n	900122c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
900122e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900122e6:	e7e5      	b.n	900122b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
900122e8:	6823      	ldr	r3, [r4, #0]
900122ea:	7f01      	ldrb	r1, [r0, #28]
900122ec:	4620      	mov	r0, r4
900122ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900122f0:	4798      	blx	r3
900122f2:	6823      	ldr	r3, [r4, #0]
900122f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900122f6:	e006      	b.n	90012306 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
900122f8:	6823      	ldr	r3, [r4, #0]
900122fa:	7f01      	ldrb	r1, [r0, #28]
900122fc:	4620      	mov	r0, r4
900122fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012300:	4798      	blx	r3
90012302:	6823      	ldr	r3, [r4, #0]
90012304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90012306:	4629      	mov	r1, r5
90012308:	4620      	mov	r0, r4
9001230a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001230e:	4718      	bx	r3
90012310:	6823      	ldr	r3, [r4, #0]
90012312:	4620      	mov	r0, r4
90012314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012316:	4798      	blx	r3
90012318:	e7f3      	b.n	90012302 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

9001231a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
9001231a:	4770      	bx	lr

9001231c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
9001231c:	4770      	bx	lr

9001231e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
9001231e:	4770      	bx	lr

90012320 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90012320:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90012324:	b510      	push	{r4, lr}
90012326:	1ad2      	subs	r2, r2, r3
90012328:	2a00      	cmp	r2, #0
9001232a:	bfdc      	itt	le
9001232c:	6884      	ldrle	r4, [r0, #8]
9001232e:	1912      	addle	r2, r2, r4
90012330:	2a01      	cmp	r2, #1
90012332:	dd16      	ble.n	90012362 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90012334:	6842      	ldr	r2, [r0, #4]
90012336:	2424      	movs	r4, #36	; 0x24
90012338:	fb04 2303 	mla	r3, r4, r3, r2
9001233c:	f101 0220 	add.w	r2, r1, #32
90012340:	f851 4b04 	ldr.w	r4, [r1], #4
90012344:	4291      	cmp	r1, r2
90012346:	f843 4b04 	str.w	r4, [r3], #4
9001234a:	d1f9      	bne.n	90012340 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
9001234c:	780a      	ldrb	r2, [r1, #0]
9001234e:	701a      	strb	r2, [r3, #0]
90012350:	68c3      	ldr	r3, [r0, #12]
90012352:	6882      	ldr	r2, [r0, #8]
90012354:	f3bf 8f5b 	dmb	ish
90012358:	3301      	adds	r3, #1
9001235a:	429a      	cmp	r2, r3
9001235c:	bfd8      	it	le
9001235e:	1a9b      	suble	r3, r3, r2
90012360:	60c3      	str	r3, [r0, #12]
90012362:	bd10      	pop	{r4, pc}

90012364 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90012364:	6903      	ldr	r3, [r0, #16]
90012366:	6882      	ldr	r2, [r0, #8]
90012368:	f3bf 8f5b 	dmb	ish
9001236c:	3301      	adds	r3, #1
9001236e:	429a      	cmp	r2, r3
90012370:	bfd8      	it	le
90012372:	1a9b      	suble	r3, r3, r2
90012374:	6103      	str	r3, [r0, #16]
90012376:	4770      	bx	lr

90012378 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90012378:	b570      	push	{r4, r5, r6, lr}
9001237a:	4604      	mov	r4, r0
9001237c:	460e      	mov	r6, r1
9001237e:	6860      	ldr	r0, [r4, #4]
90012380:	6803      	ldr	r3, [r0, #0]
90012382:	685b      	ldr	r3, [r3, #4]
90012384:	4798      	blx	r3
90012386:	2800      	cmp	r0, #0
90012388:	d1f9      	bne.n	9001237e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
9001238a:	4d0d      	ldr	r5, [pc, #52]	; (900123c0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
9001238c:	6828      	ldr	r0, [r5, #0]
9001238e:	6803      	ldr	r3, [r0, #0]
90012390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012392:	4798      	blx	r3
90012394:	f7ef fb06 	bl	900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90012398:	6828      	ldr	r0, [r5, #0]
9001239a:	2101      	movs	r1, #1
9001239c:	f7ff ff2c 	bl	900121f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900123a0:	6860      	ldr	r0, [r4, #4]
900123a2:	4631      	mov	r1, r6
900123a4:	6803      	ldr	r3, [r0, #0]
900123a6:	689b      	ldr	r3, [r3, #8]
900123a8:	4798      	blx	r3
900123aa:	6823      	ldr	r3, [r4, #0]
900123ac:	4620      	mov	r0, r4
900123ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900123b0:	4798      	blx	r3
900123b2:	6828      	ldr	r0, [r5, #0]
900123b4:	6803      	ldr	r3, [r0, #0]
900123b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900123ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900123bc:	4718      	bx	r3
900123be:	bf00      	nop
900123c0:	24026264 	.word	0x24026264

900123c4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
900123c4:	b508      	push	{r3, lr}
900123c6:	f7ef fadf 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900123ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
900123ce:	f7ef bae3 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

900123d2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
900123d2:	b510      	push	{r4, lr}
900123d4:	4604      	mov	r4, r0
900123d6:	2114      	movs	r1, #20
900123d8:	f010 fd2b 	bl	90022e32 <_ZdlPvj>
900123dc:	4620      	mov	r0, r4
900123de:	bd10      	pop	{r4, pc}

900123e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
900123e0:	b570      	push	{r4, r5, r6, lr}
900123e2:	4604      	mov	r4, r0
900123e4:	6840      	ldr	r0, [r0, #4]
900123e6:	6803      	ldr	r3, [r0, #0]
900123e8:	681b      	ldr	r3, [r3, #0]
900123ea:	4798      	blx	r3
900123ec:	4605      	mov	r5, r0
900123ee:	b930      	cbnz	r0, 900123fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900123f0:	7a23      	ldrb	r3, [r4, #8]
900123f2:	b123      	cbz	r3, 900123fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
900123f4:	6860      	ldr	r0, [r4, #4]
900123f6:	6803      	ldr	r3, [r0, #0]
900123f8:	695b      	ldr	r3, [r3, #20]
900123fa:	4798      	blx	r3
900123fc:	7225      	strb	r5, [r4, #8]
900123fe:	6860      	ldr	r0, [r4, #4]
90012400:	6803      	ldr	r3, [r0, #0]
90012402:	681b      	ldr	r3, [r3, #0]
90012404:	4798      	blx	r3
90012406:	b928      	cbnz	r0, 90012414 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90012408:	6823      	ldr	r3, [r4, #0]
9001240a:	4620      	mov	r0, r4
9001240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001240e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012412:	4718      	bx	r3
90012414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012418:	f7ef bacc 	b.w	900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

9001241c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
9001241c:	b510      	push	{r4, lr}
9001241e:	6082      	str	r2, [r0, #8]
90012420:	2200      	movs	r2, #0
90012422:	4c03      	ldr	r4, [pc, #12]	; (90012430 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90012424:	e9c0 2203 	strd	r2, r2, [r0, #12]
90012428:	e9c0 4100 	strd	r4, r1, [r0]
9001242c:	bd10      	pop	{r4, pc}
9001242e:	bf00      	nop
90012430:	90026bf4 	.word	0x90026bf4

90012434 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90012434:	6840      	ldr	r0, [r0, #4]
90012436:	6803      	ldr	r3, [r0, #0]
90012438:	681b      	ldr	r3, [r3, #0]
9001243a:	4718      	bx	r3

9001243c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
9001243c:	4b07      	ldr	r3, [pc, #28]	; (9001245c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
9001243e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012440:	881b      	ldrh	r3, [r3, #0]
90012442:	4293      	cmp	r3, r2
90012444:	bf81      	itttt	hi
90012446:	4b06      	ldrhi	r3, [pc, #24]	; (90012460 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90012448:	681b      	ldrhi	r3, [r3, #0]
9001244a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
9001244e:	7858      	ldrbhi	r0, [r3, #1]
90012450:	bf8c      	ite	hi
90012452:	f000 0003 	andhi.w	r0, r0, #3
90012456:	2000      	movls	r0, #0
90012458:	4770      	bx	lr
9001245a:	bf00      	nop
9001245c:	240262b8 	.word	0x240262b8
90012460:	240262b4 	.word	0x240262b4

90012464 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90012464:	4b11      	ldr	r3, [pc, #68]	; (900124ac <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90012466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001246a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001246c:	4604      	mov	r4, r0
9001246e:	881b      	ldrh	r3, [r3, #0]
90012470:	428b      	cmp	r3, r1
90012472:	d918      	bls.n	900124a6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90012474:	6803      	ldr	r3, [r0, #0]
90012476:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90012478:	4b0d      	ldr	r3, [pc, #52]	; (900124b0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
9001247a:	6818      	ldr	r0, [r3, #0]
9001247c:	f7f3 fa50 	bl	90005920 <_ZNK8touchgfx5Texts7getTextEt>
90012480:	6823      	ldr	r3, [r4, #0]
90012482:	4606      	mov	r6, r0
90012484:	4620      	mov	r0, r4
90012486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012488:	4798      	blx	r3
9001248a:	6823      	ldr	r3, [r4, #0]
9001248c:	4607      	mov	r7, r0
9001248e:	4620      	mov	r0, r4
90012490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012494:	4798      	blx	r3
90012496:	463a      	mov	r2, r7
90012498:	4603      	mov	r3, r0
9001249a:	4631      	mov	r1, r6
9001249c:	4620      	mov	r0, r4
9001249e:	46ac      	mov	ip, r5
900124a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900124a4:	4760      	bx	ip
900124a6:	2000      	movs	r0, #0
900124a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900124ac:	240262b8 	.word	0x240262b8
900124b0:	240262c0 	.word	0x240262c0

900124b4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
900124b4:	4b18      	ldr	r3, [pc, #96]	; (90012518 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
900124b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
900124ba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
900124bc:	4604      	mov	r4, r0
900124be:	881b      	ldrh	r3, [r3, #0]
900124c0:	428b      	cmp	r3, r1
900124c2:	d926      	bls.n	90012512 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
900124c4:	4b15      	ldr	r3, [pc, #84]	; (9001251c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
900124c6:	681b      	ldr	r3, [r3, #0]
900124c8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
900124cc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
900124d0:	4b13      	ldr	r3, [pc, #76]	; (90012520 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
900124d2:	7855      	ldrb	r5, [r2, #1]
900124d4:	681b      	ldr	r3, [r3, #0]
900124d6:	f3c5 0581 	ubfx	r5, r5, #2, #2
900124da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
900124de:	6833      	ldr	r3, [r6, #0]
900124e0:	69df      	ldr	r7, [r3, #28]
900124e2:	4b10      	ldr	r3, [pc, #64]	; (90012524 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
900124e4:	6818      	ldr	r0, [r3, #0]
900124e6:	f7f3 fa1b 	bl	90005920 <_ZNK8touchgfx5Texts7getTextEt>
900124ea:	6823      	ldr	r3, [r4, #0]
900124ec:	4680      	mov	r8, r0
900124ee:	4620      	mov	r0, r4
900124f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900124f2:	4798      	blx	r3
900124f4:	6823      	ldr	r3, [r4, #0]
900124f6:	4681      	mov	r9, r0
900124f8:	4620      	mov	r0, r4
900124fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900124fe:	4798      	blx	r3
90012500:	464b      	mov	r3, r9
90012502:	9000      	str	r0, [sp, #0]
90012504:	4642      	mov	r2, r8
90012506:	4629      	mov	r1, r5
90012508:	4630      	mov	r0, r6
9001250a:	47b8      	blx	r7
9001250c:	b003      	add	sp, #12
9001250e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012512:	2000      	movs	r0, #0
90012514:	e7fa      	b.n	9001250c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90012516:	bf00      	nop
90012518:	240262b8 	.word	0x240262b8
9001251c:	240262b4 	.word	0x240262b4
90012520:	240262bc 	.word	0x240262bc
90012524:	240262c0 	.word	0x240262c0

90012528 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90012528:	b40e      	push	{r1, r2, r3}
9001252a:	4b30      	ldr	r3, [pc, #192]	; (900125ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
9001252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90012530:	881a      	ldrh	r2, [r3, #0]
90012532:	b09d      	sub	sp, #116	; 0x74
90012534:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90012536:	4604      	mov	r4, r0
90012538:	429a      	cmp	r2, r3
9001253a:	d954      	bls.n	900125e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
9001253c:	aa26      	add	r2, sp, #152	; 0x98
9001253e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 900125f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90012542:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900125f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90012546:	9202      	str	r2, [sp, #8]
90012548:	f8d9 2000 	ldr.w	r2, [r9]
9001254c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90012550:	f8d8 3000 	ldr.w	r3, [r8]
90012554:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90012558:	682b      	ldr	r3, [r5, #0]
9001255a:	4628      	mov	r0, r5
9001255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001255e:	4798      	blx	r3
90012560:	4606      	mov	r6, r0
90012562:	b207      	sxth	r7, r0
90012564:	a803      	add	r0, sp, #12
90012566:	f003 fb09 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
9001256a:	682b      	ldr	r3, [r5, #0]
9001256c:	4628      	mov	r0, r5
9001256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90012570:	4798      	blx	r3
90012572:	682b      	ldr	r3, [r5, #0]
90012574:	4682      	mov	sl, r0
90012576:	4628      	mov	r0, r5
90012578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001257a:	4798      	blx	r3
9001257c:	4653      	mov	r3, sl
9001257e:	9000      	str	r0, [sp, #0]
90012580:	a803      	add	r0, sp, #12
90012582:	9a02      	ldr	r2, [sp, #8]
90012584:	9925      	ldr	r1, [sp, #148]	; 0x94
90012586:	f003 fb4c 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001258a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001258c:	f8d9 3000 	ldr.w	r3, [r9]
90012590:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90012594:	8925      	ldrh	r5, [r4, #8]
90012596:	eb03 0142 	add.w	r1, r3, r2, lsl #1
9001259a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
9001259e:	eba5 050c 	sub.w	r5, r5, ip
900125a2:	784a      	ldrb	r2, [r1, #1]
900125a4:	f8d8 3000 	ldr.w	r3, [r8]
900125a8:	b22d      	sxth	r5, r5
900125aa:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
900125ae:	f3c2 0281 	ubfx	r2, r2, #2, #2
900125b2:	9500      	str	r5, [sp, #0]
900125b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
900125b8:	a803      	add	r0, sp, #12
900125ba:	f001 f9cb 	bl	90013954 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
900125be:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
900125c2:	b203      	sxth	r3, r0
900125c4:	18b9      	adds	r1, r7, r2
900125c6:	2900      	cmp	r1, #0
900125c8:	dd0b      	ble.n	900125e2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
900125ca:	3b01      	subs	r3, #1
900125cc:	fb13 f302 	smulbb	r3, r3, r2
900125d0:	fb16 3300 	smlabb	r3, r6, r0, r3
900125d4:	b21f      	sxth	r7, r3
900125d6:	4638      	mov	r0, r7
900125d8:	b01d      	add	sp, #116	; 0x74
900125da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900125de:	b003      	add	sp, #12
900125e0:	4770      	bx	lr
900125e2:	2b00      	cmp	r3, #0
900125e4:	dcf7      	bgt.n	900125d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900125e6:	2700      	movs	r7, #0
900125e8:	e7f5      	b.n	900125d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900125ea:	bf00      	nop
900125ec:	240262b8 	.word	0x240262b8
900125f0:	240262b4 	.word	0x240262b4
900125f4:	240262bc 	.word	0x240262bc

900125f8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
900125f8:	b570      	push	{r4, r5, r6, lr}
900125fa:	6803      	ldr	r3, [r0, #0]
900125fc:	4604      	mov	r4, r0
900125fe:	4615      	mov	r5, r2
90012600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012602:	4798      	blx	r3
90012604:	6823      	ldr	r3, [r4, #0]
90012606:	4629      	mov	r1, r5
90012608:	4620      	mov	r0, r4
9001260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001260c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012610:	4718      	bx	r3
	...

90012614 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90012614:	b538      	push	{r3, r4, r5, lr}
90012616:	4b0e      	ldr	r3, [pc, #56]	; (90012650 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
90012618:	4604      	mov	r4, r0
9001261a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9001261c:	881b      	ldrh	r3, [r3, #0]
9001261e:	429a      	cmp	r2, r3
90012620:	d214      	bcs.n	9001264c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
90012622:	6803      	ldr	r3, [r0, #0]
90012624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90012626:	4798      	blx	r3
90012628:	6823      	ldr	r3, [r4, #0]
9001262a:	4605      	mov	r5, r0
9001262c:	4620      	mov	r0, r4
9001262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012630:	4798      	blx	r3
90012632:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90012636:	b22d      	sxth	r5, r5
90012638:	4601      	mov	r1, r0
9001263a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
9001263e:	bf06      	itte	eq
90012640:	4602      	moveq	r2, r0
90012642:	4629      	moveq	r1, r5
90012644:	462a      	movne	r2, r5
90012646:	4620      	mov	r0, r4
90012648:	f7ff ffd6 	bl	900125f8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
9001264c:	bd38      	pop	{r3, r4, r5, pc}
9001264e:	bf00      	nop
90012650:	240262b8 	.word	0x240262b8

90012654 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90012654:	b530      	push	{r4, r5, lr}
90012656:	888b      	ldrh	r3, [r1, #4]
90012658:	b085      	sub	sp, #20
9001265a:	4604      	mov	r4, r0
9001265c:	8583      	strh	r3, [r0, #44]	; 0x2c
9001265e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90012662:	b923      	cbnz	r3, 9001266e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90012664:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90012668:	b90b      	cbnz	r3, 9001266e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001266a:	f7ff ffd3 	bl	90012614 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
9001266e:	6823      	ldr	r3, [r4, #0]
90012670:	466d      	mov	r5, sp
90012672:	4621      	mov	r1, r4
90012674:	343c      	adds	r4, #60	; 0x3c
90012676:	4628      	mov	r0, r5
90012678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001267c:	4798      	blx	r3
9001267e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90012682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90012686:	b005      	add	sp, #20
90012688:	bd30      	pop	{r4, r5, pc}

9001268a <_ZNK8touchgfx3Box12getSolidRectEv>:
9001268a:	2300      	movs	r3, #0
9001268c:	8083      	strh	r3, [r0, #4]
9001268e:	80c3      	strh	r3, [r0, #6]
90012690:	8003      	strh	r3, [r0, #0]
90012692:	8043      	strh	r3, [r0, #2]
90012694:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90012698:	2bff      	cmp	r3, #255	; 0xff
9001269a:	bf01      	itttt	eq
9001269c:	890b      	ldrheq	r3, [r1, #8]
9001269e:	8083      	strheq	r3, [r0, #4]
900126a0:	894b      	ldrheq	r3, [r1, #10]
900126a2:	80c3      	strheq	r3, [r0, #6]
900126a4:	4770      	bx	lr
	...

900126a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
900126a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900126aa:	4604      	mov	r4, r0
900126ac:	466b      	mov	r3, sp
900126ae:	6808      	ldr	r0, [r1, #0]
900126b0:	6849      	ldr	r1, [r1, #4]
900126b2:	c303      	stmia	r3!, {r0, r1}
900126b4:	6823      	ldr	r3, [r4, #0]
900126b6:	4669      	mov	r1, sp
900126b8:	4620      	mov	r0, r4
900126ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900126bc:	4798      	blx	r3
900126be:	4b08      	ldr	r3, [pc, #32]	; (900126e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900126c0:	681b      	ldr	r3, [r3, #0]
900126c2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900126c6:	b10a      	cbz	r2, 900126cc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
900126c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900126ca:	b900      	cbnz	r0, 900126ce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
900126cc:	6898      	ldr	r0, [r3, #8]
900126ce:	6803      	ldr	r3, [r0, #0]
900126d0:	4669      	mov	r1, sp
900126d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900126d4:	6a1d      	ldr	r5, [r3, #32]
900126d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900126da:	47a8      	blx	r5
900126dc:	b003      	add	sp, #12
900126de:	bd30      	pop	{r4, r5, pc}
900126e0:	24026264 	.word	0x24026264

900126e4 <_ZN8touchgfx3BoxD1Ev>:
900126e4:	4770      	bx	lr

900126e6 <_ZN8touchgfx3BoxD0Ev>:
900126e6:	b510      	push	{r4, lr}
900126e8:	4604      	mov	r4, r0
900126ea:	212c      	movs	r1, #44	; 0x2c
900126ec:	f010 fba1 	bl	90022e32 <_ZdlPvj>
900126f0:	4620      	mov	r0, r4
900126f2:	bd10      	pop	{r4, pc}

900126f4 <_ZNK8touchgfx3Box17invalidateContentEv>:
900126f4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900126f8:	b12a      	cbz	r2, 90012706 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900126fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900126fe:	b112      	cbz	r2, 90012706 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012700:	6803      	ldr	r3, [r0, #0]
90012702:	695b      	ldr	r3, [r3, #20]
90012704:	4718      	bx	r3
90012706:	4770      	bx	lr

90012708 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
90012708:	4b30      	ldr	r3, [pc, #192]	; (900127cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
9001270a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001270e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012710:	b08d      	sub	sp, #52	; 0x34
90012712:	881b      	ldrh	r3, [r3, #0]
90012714:	4604      	mov	r4, r0
90012716:	460f      	mov	r7, r1
90012718:	4293      	cmp	r3, r2
9001271a:	d954      	bls.n	900127c6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
9001271c:	4b2c      	ldr	r3, [pc, #176]	; (900127d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
9001271e:	6819      	ldr	r1, [r3, #0]
90012720:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90012724:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
90012728:	4a2a      	ldr	r2, [pc, #168]	; (900127d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
9001272a:	6812      	ldr	r2, [r2, #0]
9001272c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
90012730:	2900      	cmp	r1, #0
90012732:	d048      	beq.n	900127c6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90012734:	785a      	ldrb	r2, [r3, #1]
90012736:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
9001273a:	f3c2 0801 	ubfx	r8, r2, #0, #2
9001273e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90012742:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90012746:	4b24      	ldr	r3, [pc, #144]	; (900127d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
90012748:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
9001274c:	681a      	ldr	r2, [r3, #0]
9001274e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90012752:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90012756:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001275a:	6b26      	ldr	r6, [r4, #48]	; 0x30
9001275c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90012760:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90012764:	9107      	str	r1, [sp, #28]
90012766:	f88d 8020 	strb.w	r8, [sp, #32]
9001276a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
9001276e:	9609      	str	r6, [sp, #36]	; 0x24
90012770:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90012774:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90012778:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
9001277c:	b10b      	cbz	r3, 90012782 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
9001277e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90012780:	b905      	cbnz	r5, 90012784 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90012782:	6895      	ldr	r5, [r2, #8]
90012784:	ae05      	add	r6, sp, #20
90012786:	4621      	mov	r1, r4
90012788:	4630      	mov	r0, r6
9001278a:	f002 fe37 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001278e:	4b13      	ldr	r3, [pc, #76]	; (900127dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90012790:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90012792:	6818      	ldr	r0, [r3, #0]
90012794:	f7f3 f8c4 	bl	90005920 <_ZNK8touchgfx5Texts7getTextEt>
90012798:	6823      	ldr	r3, [r4, #0]
9001279a:	4680      	mov	r8, r0
9001279c:	4620      	mov	r0, r4
9001279e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900127a0:	4798      	blx	r3
900127a2:	6823      	ldr	r3, [r4, #0]
900127a4:	4681      	mov	r9, r0
900127a6:	4620      	mov	r0, r4
900127a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900127ac:	4798      	blx	r3
900127ae:	ab07      	add	r3, sp, #28
900127b0:	f8cd 8004 	str.w	r8, [sp, #4]
900127b4:	9300      	str	r3, [sp, #0]
900127b6:	463b      	mov	r3, r7
900127b8:	e9cd 9002 	strd	r9, r0, [sp, #8]
900127bc:	4628      	mov	r0, r5
900127be:	e896 0006 	ldmia.w	r6, {r1, r2}
900127c2:	f7f3 f85d 	bl	90005880 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900127c6:	b00d      	add	sp, #52	; 0x34
900127c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900127cc:	240262b8 	.word	0x240262b8
900127d0:	240262b4 	.word	0x240262b4
900127d4:	240262bc 	.word	0x240262bc
900127d8:	24026264 	.word	0x24026264
900127dc:	240262c0 	.word	0x240262c0

900127e0 <_ZN8touchgfx5ImageD1Ev>:
900127e0:	4770      	bx	lr

900127e2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
900127e2:	b570      	push	{r4, r5, r6, lr}
900127e4:	880b      	ldrh	r3, [r1, #0]
900127e6:	460d      	mov	r5, r1
900127e8:	4604      	mov	r4, r0
900127ea:	84c3      	strh	r3, [r0, #38]	; 0x26
900127ec:	4608      	mov	r0, r1
900127ee:	f004 fd3f 	bl	90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>
900127f2:	4606      	mov	r6, r0
900127f4:	4628      	mov	r0, r5
900127f6:	f004 fd6f 	bl	900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
900127fa:	6823      	ldr	r3, [r4, #0]
900127fc:	4605      	mov	r5, r0
900127fe:	4631      	mov	r1, r6
90012800:	4620      	mov	r0, r4
90012802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012804:	4798      	blx	r3
90012806:	6823      	ldr	r3, [r4, #0]
90012808:	4629      	mov	r1, r5
9001280a:	4620      	mov	r0, r4
9001280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012812:	4718      	bx	r3

90012814 <_ZN8touchgfx5ImageD0Ev>:
90012814:	b510      	push	{r4, lr}
90012816:	4604      	mov	r4, r0
90012818:	212c      	movs	r1, #44	; 0x2c
9001281a:	f010 fb0a 	bl	90022e32 <_ZdlPvj>
9001281e:	4620      	mov	r0, r4
90012820:	bd10      	pop	{r4, pc}

90012822 <_ZNK8touchgfx5Image12getSolidRectEv>:
90012822:	b510      	push	{r4, lr}
90012824:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90012828:	4604      	mov	r4, r0
9001282a:	2bff      	cmp	r3, #255	; 0xff
9001282c:	d006      	beq.n	9001283c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
9001282e:	2300      	movs	r3, #0
90012830:	8003      	strh	r3, [r0, #0]
90012832:	8043      	strh	r3, [r0, #2]
90012834:	8083      	strh	r3, [r0, #4]
90012836:	80c3      	strh	r3, [r0, #6]
90012838:	4620      	mov	r0, r4
9001283a:	bd10      	pop	{r4, pc}
9001283c:	3126      	adds	r1, #38	; 0x26
9001283e:	f004 fd7f 	bl	90017340 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90012842:	e7f9      	b.n	90012838 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90012844 <_ZNK8touchgfx5Image17invalidateContentEv>:
90012844:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
90012848:	b12a      	cbz	r2, 90012856 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
9001284a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
9001284e:	b112      	cbz	r2, 90012856 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
90012850:	6803      	ldr	r3, [r0, #0]
90012852:	695b      	ldr	r3, [r3, #20]
90012854:	4718      	bx	r3
90012856:	4770      	bx	lr

90012858 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001285c:	4604      	mov	r4, r0
9001285e:	b088      	sub	sp, #32
90012860:	2500      	movs	r5, #0
90012862:	460f      	mov	r7, r1
90012864:	f854 3b26 	ldr.w	r3, [r4], #38
90012868:	a904      	add	r1, sp, #16
9001286a:	4606      	mov	r6, r0
9001286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001286e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90012872:	4798      	blx	r3
90012874:	4620      	mov	r0, r4
90012876:	f004 fcfb 	bl	90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001287a:	4680      	mov	r8, r0
9001287c:	4620      	mov	r0, r4
9001287e:	f004 fd2b 	bl	900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012882:	9506      	str	r5, [sp, #24]
90012884:	ad06      	add	r5, sp, #24
90012886:	f8ad 001e 	strh.w	r0, [sp, #30]
9001288a:	4639      	mov	r1, r7
9001288c:	f8ad 801c 	strh.w	r8, [sp, #28]
90012890:	4628      	mov	r0, r5
90012892:	f7fe fdc7 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90012896:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001289a:	2b00      	cmp	r3, #0
9001289c:	dd19      	ble.n	900128d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001289e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
900128a2:	2b00      	cmp	r3, #0
900128a4:	dd15      	ble.n	900128d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900128a6:	4b0c      	ldr	r3, [pc, #48]	; (900128d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
900128a8:	681b      	ldr	r3, [r3, #0]
900128aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900128ae:	b10a      	cbz	r2, 900128b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
900128b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900128b2:	b900      	cbnz	r0, 900128b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
900128b4:	6898      	ldr	r0, [r3, #8]
900128b6:	2701      	movs	r7, #1
900128b8:	6801      	ldr	r1, [r0, #0]
900128ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
900128be:	9702      	str	r7, [sp, #8]
900128c0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
900128c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
900128c8:	e9cd 5600 	strd	r5, r6, [sp]
900128cc:	688d      	ldr	r5, [r1, #8]
900128ce:	4621      	mov	r1, r4
900128d0:	47a8      	blx	r5
900128d2:	b008      	add	sp, #32
900128d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900128d8:	24026264 	.word	0x24026264

900128dc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900128dc:	b510      	push	{r4, lr}
900128de:	6803      	ldr	r3, [r0, #0]
900128e0:	460c      	mov	r4, r1
900128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900128e4:	4798      	blx	r3
900128e6:	1b03      	subs	r3, r0, r4
900128e8:	4258      	negs	r0, r3
900128ea:	4158      	adcs	r0, r3
900128ec:	bd10      	pop	{r4, pc}
	...

900128f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900128f0:	4b01      	ldr	r3, [pc, #4]	; (900128f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900128f2:	6019      	str	r1, [r3, #0]
900128f4:	4770      	bx	lr
900128f6:	bf00      	nop
900128f8:	2402626c 	.word	0x2402626c

900128fc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900128fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012900:	4696      	mov	lr, r2
90012902:	b097      	sub	sp, #92	; 0x5c
90012904:	4605      	mov	r5, r0
90012906:	4614      	mov	r4, r2
90012908:	460e      	mov	r6, r1
9001290a:	461f      	mov	r7, r3
9001290c:	f10d 0c1c 	add.w	ip, sp, #28
90012910:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90012914:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90012918:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
9001291c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012924:	f8de 3000 	ldr.w	r3, [lr]
90012928:	f104 0e14 	add.w	lr, r4, #20
9001292c:	f8cc 3000 	str.w	r3, [ip]
90012930:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90012934:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001293c:	f8de 3000 	ldr.w	r3, [lr]
90012940:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90012944:	f8cc 3000 	str.w	r3, [ip]
90012948:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
9001294c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012954:	f8de 3000 	ldr.w	r3, [lr]
90012958:	4631      	mov	r1, r6
9001295a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001295c:	4628      	mov	r0, r5
9001295e:	f8cc 3000 	str.w	r3, [ip]
90012962:	682b      	ldr	r3, [r5, #0]
90012964:	9201      	str	r2, [sp, #4]
90012966:	9a20      	ldr	r2, [sp, #128]	; 0x80
90012968:	f8cd 8008 	str.w	r8, [sp, #8]
9001296c:	9200      	str	r2, [sp, #0]
9001296e:	aa07      	add	r2, sp, #28
90012970:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90012974:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90012978:	463b      	mov	r3, r7
9001297a:	47d8      	blx	fp
9001297c:	46a6      	mov	lr, r4
9001297e:	f10d 0c1c 	add.w	ip, sp, #28
90012982:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012986:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001298a:	f8de 3000 	ldr.w	r3, [lr]
9001298e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90012992:	343c      	adds	r4, #60	; 0x3c
90012994:	f8cc 3000 	str.w	r3, [ip]
90012998:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
9001299c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900129a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900129a4:	f8de 3000 	ldr.w	r3, [lr]
900129a8:	f8cc 3000 	str.w	r3, [ip]
900129ac:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900129b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900129b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900129b6:	6823      	ldr	r3, [r4, #0]
900129b8:	4631      	mov	r1, r6
900129ba:	4628      	mov	r0, r5
900129bc:	f8cc 3000 	str.w	r3, [ip]
900129c0:	682b      	ldr	r3, [r5, #0]
900129c2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900129c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
900129c8:	f8cd 8008 	str.w	r8, [sp, #8]
900129cc:	9201      	str	r2, [sp, #4]
900129ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
900129d0:	9200      	str	r2, [sp, #0]
900129d2:	aa07      	add	r2, sp, #28
900129d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900129d6:	463b      	mov	r3, r7
900129d8:	47a0      	blx	r4
900129da:	b017      	add	sp, #92	; 0x5c
900129dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900129e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900129e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900129e4:	b08d      	sub	sp, #52	; 0x34
900129e6:	4688      	mov	r8, r1
900129e8:	f8d3 c000 	ldr.w	ip, [r3]
900129ec:	9916      	ldr	r1, [sp, #88]	; 0x58
900129ee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900129f2:	680f      	ldr	r7, [r1, #0]
900129f4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900129f8:	eba7 070c 	sub.w	r7, r7, ip
900129fc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
90012a00:	edd3 6a07 	vldr	s13, [r3, #28]
90012a04:	42bc      	cmp	r4, r7
90012a06:	9918      	ldr	r1, [sp, #96]	; 0x60
90012a08:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90012a0c:	bfa8      	it	ge
90012a0e:	463c      	movge	r4, r7
90012a10:	f9b1 9000 	ldrsh.w	r9, [r1]
90012a14:	f9ba 1000 	ldrsh.w	r1, [sl]
90012a18:	ee07 4a90 	vmov	s15, r4
90012a1c:	eb09 0e0c 	add.w	lr, r9, ip
90012a20:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90012a24:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90012a28:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90012a2c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90012a30:	4571      	cmp	r1, lr
90012a32:	ee25 4a04 	vmul.f32	s8, s10, s8
90012a36:	ee65 4a24 	vmul.f32	s9, s10, s9
90012a3a:	ee25 5a27 	vmul.f32	s10, s10, s15
90012a3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
90012a42:	ee71 0aa4 	vadd.f32	s1, s3, s9
90012a46:	ee32 1a05 	vadd.f32	s2, s4, s10
90012a4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
90012a4e:	ee36 0a84 	vadd.f32	s0, s13, s8
90012a52:	ee61 1a87 	vmul.f32	s3, s3, s14
90012a56:	ee22 2a07 	vmul.f32	s4, s4, s14
90012a5a:	f340 808c 	ble.w	90012b76 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
90012a5e:	eba1 060e 	sub.w	r6, r1, lr
90012a62:	fb96 f5f4 	sdiv	r5, r6, r4
90012a66:	ee07 5a10 	vmov	s14, r5
90012a6a:	2d00      	cmp	r5, #0
90012a6c:	fb04 6615 	mls	r6, r4, r5, r6
90012a70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90012a74:	eea7 0a04 	vfma.f32	s0, s14, s8
90012a78:	eee7 0a24 	vfma.f32	s1, s14, s9
90012a7c:	eea7 1a05 	vfma.f32	s2, s14, s10
90012a80:	dd12      	ble.n	90012aa8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90012a82:	ee70 6a44 	vsub.f32	s13, s0, s8
90012a86:	ee70 1ae4 	vsub.f32	s3, s1, s9
90012a8a:	ee31 2a45 	vsub.f32	s4, s2, s10
90012a8e:	eef5 6a40 	vcmp.f32	s13, #0.0
90012a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012a96:	bf14      	ite	ne
90012a98:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90012a9c:	eeb0 7a67 	vmoveq.f32	s14, s15
90012aa0:	ee61 1a87 	vmul.f32	s3, s3, s14
90012aa4:	ee22 2a07 	vmul.f32	s4, s4, s14
90012aa8:	fb05 f204 	mul.w	r2, r5, r4
90012aac:	1abf      	subs	r7, r7, r2
90012aae:	4494      	add	ip, r2
90012ab0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90012ab4:	4411      	add	r1, r2
90012ab6:	eb09 020c 	add.w	r2, r9, ip
90012aba:	b209      	sxth	r1, r1
90012abc:	443a      	add	r2, r7
90012abe:	428a      	cmp	r2, r1
90012ac0:	bfc4      	itt	gt
90012ac2:	eba1 0209 	subgt.w	r2, r1, r9
90012ac6:	eba2 070c 	subgt.w	r7, r2, ip
90012aca:	2f00      	cmp	r7, #0
90012acc:	dd50      	ble.n	90012b70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90012ace:	fb97 f1f4 	sdiv	r1, r7, r4
90012ad2:	fb04 7211 	mls	r2, r4, r1, r7
90012ad6:	b90a      	cbnz	r2, 90012adc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90012ad8:	3901      	subs	r1, #1
90012ada:	4622      	mov	r2, r4
90012adc:	eec7 3a80 	vdiv.f32	s7, s15, s0
90012ae0:	6840      	ldr	r0, [r0, #4]
90012ae2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90012ae6:	44b6      	add	lr, r6
90012ae8:	f8d0 a000 	ldr.w	sl, [r0]
90012aec:	2900      	cmp	r1, #0
90012aee:	bfcc      	ite	gt
90012af0:	46a1      	movgt	r9, r4
90012af2:	4691      	movle	r9, r2
90012af4:	900b      	str	r0, [sp, #44]	; 0x2c
90012af6:	9817      	ldr	r0, [sp, #92]	; 0x5c
90012af8:	fb04 e505 	mla	r5, r4, r5, lr
90012afc:	eef0 6a42 	vmov.f32	s13, s4
90012b00:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90012b04:	9008      	str	r0, [sp, #32]
90012b06:	eeb0 7a61 	vmov.f32	s14, s3
90012b0a:	9818      	ldr	r0, [sp, #96]	; 0x60
90012b0c:	695b      	ldr	r3, [r3, #20]
90012b0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90012b12:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90012b16:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90012b1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
90012b1c:	445b      	add	r3, fp
90012b1e:	9307      	str	r3, [sp, #28]
90012b20:	ee16 3a90 	vmov	r3, s13
90012b24:	e9cd 8505 	strd	r8, r5, [sp, #20]
90012b28:	ee60 2aa3 	vmul.f32	s5, s1, s7
90012b2c:	ee21 3a23 	vmul.f32	s6, s2, s7
90012b30:	ee72 7ae1 	vsub.f32	s15, s5, s3
90012b34:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90012b38:	ee17 7a90 	vmov	r7, s15
90012b3c:	ee73 7a42 	vsub.f32	s15, s6, s4
90012b40:	fb97 f7f4 	sdiv	r7, r7, r4
90012b44:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90012b48:	ee17 ca90 	vmov	ip, s15
90012b4c:	fb9c fcf4 	sdiv	ip, ip, r4
90012b50:	fb0c 3306 	mla	r3, ip, r6, r3
90012b54:	9302      	str	r3, [sp, #8]
90012b56:	ee17 3a10 	vmov	r3, s14
90012b5a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90012b5e:	fb07 3706 	mla	r7, r7, r6, r3
90012b62:	eba9 0306 	sub.w	r3, r9, r6
90012b66:	e9cd 4700 	strd	r4, r7, [sp]
90012b6a:	f8da 4008 	ldr.w	r4, [sl, #8]
90012b6e:	47a0      	blx	r4
90012b70:	b00d      	add	sp, #52	; 0x34
90012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012b76:	2500      	movs	r5, #0
90012b78:	462e      	mov	r6, r5
90012b7a:	e799      	b.n	90012ab0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90012b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012b80:	b0db      	sub	sp, #364	; 0x16c
90012b82:	461d      	mov	r5, r3
90012b84:	4614      	mov	r4, r2
90012b86:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90012b8a:	910f      	str	r1, [sp, #60]	; 0x3c
90012b8c:	4629      	mov	r1, r5
90012b8e:	930a      	str	r3, [sp, #40]	; 0x28
90012b90:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90012b94:	9009      	str	r0, [sp, #36]	; 0x24
90012b96:	930b      	str	r3, [sp, #44]	; 0x2c
90012b98:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90012b9c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90012ba0:	9310      	str	r3, [sp, #64]	; 0x40
90012ba2:	6803      	ldr	r3, [r0, #0]
90012ba4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90012ba6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90012baa:	47b8      	blx	r7
90012bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012bae:	6058      	str	r0, [r3, #4]
90012bb0:	2800      	cmp	r0, #0
90012bb2:	f000 83a1 	beq.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bb6:	682b      	ldr	r3, [r5, #0]
90012bb8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90012bbc:	ed94 7a02 	vldr	s14, [r4, #8]
90012bc0:	9314      	str	r3, [sp, #80]	; 0x50
90012bc2:	686b      	ldr	r3, [r5, #4]
90012bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012bc8:	9315      	str	r3, [sp, #84]	; 0x54
90012bca:	4bc1      	ldr	r3, [pc, #772]	; (90012ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90012bcc:	7819      	ldrb	r1, [r3, #0]
90012bce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90012bd2:	2900      	cmp	r1, #0
90012bd4:	bf16      	itet	ne
90012bd6:	4619      	movne	r1, r3
90012bd8:	4611      	moveq	r1, r2
90012bda:	4613      	movne	r3, r2
90012bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012be0:	9116      	str	r1, [sp, #88]	; 0x58
90012be2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90012be6:	f240 8387 	bls.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bea:	ed94 7a07 	vldr	s14, [r4, #28]
90012bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012bf6:	f240 837f 	bls.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012bfa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90012bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012c06:	f240 8377 	bls.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c0a:	6822      	ldr	r2, [r4, #0]
90012c0c:	4bb1      	ldr	r3, [pc, #708]	; (90012ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90012c0e:	429a      	cmp	r2, r3
90012c10:	f2c0 8372 	blt.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c14:	49b0      	ldr	r1, [pc, #704]	; (90012ed8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90012c16:	6963      	ldr	r3, [r4, #20]
90012c18:	428a      	cmp	r2, r1
90012c1a:	f300 836d 	bgt.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c1e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012c22:	48ae      	ldr	r0, [pc, #696]	; (90012edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90012c24:	33ff      	adds	r3, #255	; 0xff
90012c26:	4283      	cmp	r3, r0
90012c28:	f200 8366 	bhi.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90012c2e:	4dac      	ldr	r5, [pc, #688]	; (90012ee0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90012c30:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012c34:	33ff      	adds	r3, #255	; 0xff
90012c36:	42ab      	cmp	r3, r5
90012c38:	f200 835e 	bhi.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c3c:	6862      	ldr	r2, [r4, #4]
90012c3e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90012c42:	33ff      	adds	r3, #255	; 0xff
90012c44:	4283      	cmp	r3, r0
90012c46:	f200 8357 	bhi.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c4a:	69a1      	ldr	r1, [r4, #24]
90012c4c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90012c50:	33ff      	adds	r3, #255	; 0xff
90012c52:	4283      	cmp	r3, r0
90012c54:	f200 8350 	bhi.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90012c5a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90012c5e:	30ff      	adds	r0, #255	; 0xff
90012c60:	42a8      	cmp	r0, r5
90012c62:	f200 8349 	bhi.w	900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012c66:	428a      	cmp	r2, r1
90012c68:	f280 8110 	bge.w	90012e8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90012c6c:	429a      	cmp	r2, r3
90012c6e:	f300 8119 	bgt.w	90012ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90012c72:	4299      	cmp	r1, r3
90012c74:	f280 811d 	bge.w	90012eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90012c78:	2502      	movs	r5, #2
90012c7a:	2701      	movs	r7, #1
90012c7c:	46a9      	mov	r9, r5
90012c7e:	46b8      	mov	r8, r7
90012c80:	f04f 0a00 	mov.w	sl, #0
90012c84:	4621      	mov	r1, r4
90012c86:	a849      	add	r0, sp, #292	; 0x124
90012c88:	f003 fcaa 	bl	900165e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90012c8c:	4622      	mov	r2, r4
90012c8e:	4653      	mov	r3, sl
90012c90:	a949      	add	r1, sp, #292	; 0x124
90012c92:	f8cd 9000 	str.w	r9, [sp]
90012c96:	a819      	add	r0, sp, #100	; 0x64
90012c98:	f003 fdd2 	bl	90016840 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012c9c:	4622      	mov	r2, r4
90012c9e:	4653      	mov	r3, sl
90012ca0:	a949      	add	r1, sp, #292	; 0x124
90012ca2:	f8cd 8000 	str.w	r8, [sp]
90012ca6:	a829      	add	r0, sp, #164	; 0xa4
90012ca8:	f003 fdca 	bl	90016840 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012cac:	4643      	mov	r3, r8
90012cae:	4622      	mov	r2, r4
90012cb0:	a949      	add	r1, sp, #292	; 0x124
90012cb2:	f8cd 9000 	str.w	r9, [sp]
90012cb6:	a839      	add	r0, sp, #228	; 0xe4
90012cb8:	f003 fdc2 	bl	90016840 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012cbc:	42af      	cmp	r7, r5
90012cbe:	af12      	add	r7, sp, #72	; 0x48
90012cc0:	bfb7      	itett	lt
90012cc2:	2300      	movlt	r3, #0
90012cc4:	2301      	movge	r3, #1
90012cc6:	ad29      	addlt	r5, sp, #164	; 0xa4
90012cc8:	ac19      	addlt	r4, sp, #100	; 0x64
90012cca:	bfb1      	iteee	lt
90012ccc:	930e      	strlt	r3, [sp, #56]	; 0x38
90012cce:	ad19      	addge	r5, sp, #100	; 0x64
90012cd0:	930e      	strge	r3, [sp, #56]	; 0x38
90012cd2:	ac29      	addge	r4, sp, #164	; 0xa4
90012cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90012cd6:	e893 0003 	ldmia.w	r3, {r0, r1}
90012cda:	e887 0003 	stmia.w	r7, {r0, r1}
90012cde:	b928      	cbnz	r0, 90012cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90012ce0:	4b80      	ldr	r3, [pc, #512]	; (90012ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90012ce2:	6818      	ldr	r0, [r3, #0]
90012ce4:	6803      	ldr	r3, [r0, #0]
90012ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012ce8:	4798      	blx	r3
90012cea:	6038      	str	r0, [r7, #0]
90012cec:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012cee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012cf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012cf6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90012cf8:	930c      	str	r3, [sp, #48]	; 0x30
90012cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
90012cfc:	6963      	ldr	r3, [r4, #20]
90012cfe:	440b      	add	r3, r1
90012d00:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012d04:	4408      	add	r0, r1
90012d06:	b200      	sxth	r0, r0
90012d08:	4283      	cmp	r3, r0
90012d0a:	900d      	str	r0, [sp, #52]	; 0x34
90012d0c:	f280 80dd 	bge.w	90012eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90012d10:	428b      	cmp	r3, r1
90012d12:	da08      	bge.n	90012d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012d14:	2a00      	cmp	r2, #0
90012d16:	dd06      	ble.n	90012d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012d18:	1acb      	subs	r3, r1, r3
90012d1a:	429a      	cmp	r2, r3
90012d1c:	f2c0 80e4 	blt.w	90012ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90012d20:	2b00      	cmp	r3, #0
90012d22:	f300 80e2 	bgt.w	90012eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90012d26:	6967      	ldr	r7, [r4, #20]
90012d28:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012d2e:	443b      	add	r3, r7
90012d30:	461f      	mov	r7, r3
90012d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012d34:	1bdf      	subs	r7, r3, r7
90012d36:	4297      	cmp	r7, r2
90012d38:	bfa8      	it	ge
90012d3a:	4617      	movge	r7, r2
90012d3c:	2f00      	cmp	r7, #0
90012d3e:	f340 8166 	ble.w	9001300e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90012d42:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012d44:	6829      	ldr	r1, [r5, #0]
90012d46:	f9b3 2000 	ldrsh.w	r2, [r3]
90012d4a:	f9bb 3000 	ldrsh.w	r3, [fp]
90012d4e:	4411      	add	r1, r2
90012d50:	6820      	ldr	r0, [r4, #0]
90012d52:	4299      	cmp	r1, r3
90012d54:	dd1a      	ble.n	90012d8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012d56:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90012d5a:	4402      	add	r2, r0
90012d5c:	440b      	add	r3, r1
90012d5e:	b21b      	sxth	r3, r3
90012d60:	429a      	cmp	r2, r3
90012d62:	dc13      	bgt.n	90012d8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012d66:	a912      	add	r1, sp, #72	; 0x48
90012d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
90012d6c:	681b      	ldr	r3, [r3, #0]
90012d6e:	9206      	str	r2, [sp, #24]
90012d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012d72:	9500      	str	r5, [sp, #0]
90012d74:	9205      	str	r2, [sp, #20]
90012d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012d78:	e9cd b203 	strd	fp, r2, [sp, #12]
90012d7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012d7e:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012d82:	aa49      	add	r2, sp, #292	; 0x124
90012d84:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90012d88:	4623      	mov	r3, r4
90012d8a:	47c8      	blx	r9
90012d8c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012d90:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012d94:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90012d98:	ee37 7a27 	vadd.f32	s14, s14, s15
90012d9c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012da0:	68a1      	ldr	r1, [r4, #8]
90012da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012da6:	ed94 6a08 	vldr	s12, [r4, #32]
90012daa:	edd4 6a07 	vldr	s13, [r4, #28]
90012dae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012db2:	ee76 6a86 	vadd.f32	s13, s13, s12
90012db6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012dba:	e9d4 2300 	ldrd	r2, r3, [r4]
90012dbe:	edc4 6a07 	vstr	s13, [r4, #28]
90012dc2:	441a      	add	r2, r3
90012dc4:	6963      	ldr	r3, [r4, #20]
90012dc6:	3301      	adds	r3, #1
90012dc8:	6022      	str	r2, [r4, #0]
90012dca:	6163      	str	r3, [r4, #20]
90012dcc:	69a3      	ldr	r3, [r4, #24]
90012dce:	3b01      	subs	r3, #1
90012dd0:	61a3      	str	r3, [r4, #24]
90012dd2:	6923      	ldr	r3, [r4, #16]
90012dd4:	440b      	add	r3, r1
90012dd6:	68e1      	ldr	r1, [r4, #12]
90012dd8:	428b      	cmp	r3, r1
90012dda:	6123      	str	r3, [r4, #16]
90012ddc:	db15      	blt.n	90012e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90012dde:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90012de2:	3201      	adds	r2, #1
90012de4:	1a5b      	subs	r3, r3, r1
90012de6:	ee76 6a26 	vadd.f32	s13, s12, s13
90012dea:	6022      	str	r2, [r4, #0]
90012dec:	6123      	str	r3, [r4, #16]
90012dee:	edc4 6a07 	vstr	s13, [r4, #28]
90012df2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90012df6:	ee36 7a87 	vadd.f32	s14, s13, s14
90012dfa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012dfe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90012e02:	ee77 7a27 	vadd.f32	s15, s14, s15
90012e06:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012e0a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90012e0e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90012e12:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90012e16:	ee37 7a27 	vadd.f32	s14, s14, s15
90012e1a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90012e1e:	68a9      	ldr	r1, [r5, #8]
90012e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012e24:	ed95 6a08 	vldr	s12, [r5, #32]
90012e28:	edd5 6a07 	vldr	s13, [r5, #28]
90012e2c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012e30:	ee76 6a86 	vadd.f32	s13, s13, s12
90012e34:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012e38:	e9d5 2300 	ldrd	r2, r3, [r5]
90012e3c:	edc5 6a07 	vstr	s13, [r5, #28]
90012e40:	441a      	add	r2, r3
90012e42:	696b      	ldr	r3, [r5, #20]
90012e44:	3301      	adds	r3, #1
90012e46:	602a      	str	r2, [r5, #0]
90012e48:	616b      	str	r3, [r5, #20]
90012e4a:	69ab      	ldr	r3, [r5, #24]
90012e4c:	3b01      	subs	r3, #1
90012e4e:	61ab      	str	r3, [r5, #24]
90012e50:	692b      	ldr	r3, [r5, #16]
90012e52:	440b      	add	r3, r1
90012e54:	68e9      	ldr	r1, [r5, #12]
90012e56:	428b      	cmp	r3, r1
90012e58:	612b      	str	r3, [r5, #16]
90012e5a:	db15      	blt.n	90012e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90012e5c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90012e60:	3201      	adds	r2, #1
90012e62:	1a5b      	subs	r3, r3, r1
90012e64:	ee76 6a26 	vadd.f32	s13, s12, s13
90012e68:	602a      	str	r2, [r5, #0]
90012e6a:	612b      	str	r3, [r5, #16]
90012e6c:	edc5 6a07 	vstr	s13, [r5, #28]
90012e70:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90012e74:	ee36 7a87 	vadd.f32	s14, s13, s14
90012e78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012e7c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90012e80:	ee77 7a27 	vadd.f32	s15, s14, s15
90012e84:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012e88:	3f01      	subs	r7, #1
90012e8a:	e757      	b.n	90012d3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90012e8c:	4299      	cmp	r1, r3
90012e8e:	dc13      	bgt.n	90012eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90012e90:	429a      	cmp	r2, r3
90012e92:	da14      	bge.n	90012ebe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90012e94:	2502      	movs	r5, #2
90012e96:	2703      	movs	r7, #3
90012e98:	f04f 0800 	mov.w	r8, #0
90012e9c:	46a9      	mov	r9, r5
90012e9e:	f04f 0a01 	mov.w	sl, #1
90012ea2:	e6ef      	b.n	90012c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012ea4:	2501      	movs	r5, #1
90012ea6:	2700      	movs	r7, #0
90012ea8:	46a9      	mov	r9, r5
90012eaa:	46b8      	mov	r8, r7
90012eac:	f04f 0a02 	mov.w	sl, #2
90012eb0:	e6e8      	b.n	90012c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012eb2:	2501      	movs	r5, #1
90012eb4:	2702      	movs	r7, #2
90012eb6:	e6e1      	b.n	90012c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90012eb8:	2500      	movs	r5, #0
90012eba:	2701      	movs	r7, #1
90012ebc:	e7f4      	b.n	90012ea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90012ebe:	2702      	movs	r7, #2
90012ec0:	2503      	movs	r5, #3
90012ec2:	f04f 0900 	mov.w	r9, #0
90012ec6:	46b8      	mov	r8, r7
90012ec8:	e7e9      	b.n	90012e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90012eca:	4613      	mov	r3, r2
90012ecc:	e728      	b.n	90012d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90012ece:	bf00      	nop
90012ed0:	2402625c 	.word	0x2402625c
90012ed4:	fffd8f01 	.word	0xfffd8f01
90012ed8:	00027100 	.word	0x00027100
90012edc:	0004e1ff 	.word	0x0004e1ff
90012ee0:	0004e1fe 	.word	0x0004e1fe
90012ee4:	24026264 	.word	0x24026264
90012ee8:	4613      	mov	r3, r2
90012eea:	992b      	ldr	r1, [sp, #172]	; 0xac
90012eec:	469e      	mov	lr, r3
90012eee:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90012ef0:	469c      	mov	ip, r3
90012ef2:	9111      	str	r1, [sp, #68]	; 0x44
90012ef4:	f04f 0900 	mov.w	r9, #0
90012ef8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90012efc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90012f00:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90012f04:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90012f08:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90012f0c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90012f10:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90012f14:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90012f18:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90012f1c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90012f20:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90012f24:	f1bc 0f00 	cmp.w	ip, #0
90012f28:	d147      	bne.n	90012fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90012f2a:	eb03 0c07 	add.w	ip, r3, r7
90012f2e:	1ad7      	subs	r7, r2, r3
90012f30:	f1b9 0f00 	cmp.w	r9, #0
90012f34:	d009      	beq.n	90012f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90012f36:	9029      	str	r0, [sp, #164]	; 0xa4
90012f38:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90012f3c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90012f40:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90012f44:	912d      	str	r1, [sp, #180]	; 0xb4
90012f46:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90012f4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
90012f4c:	f04f 0800 	mov.w	r8, #0
90012f50:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90012f54:	9111      	str	r1, [sp, #68]	; 0x44
90012f56:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90012f5a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90012f5e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90012f62:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90012f66:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90012f6a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90012f6e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90012f72:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90012f76:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90012f7a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90012f7e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90012f82:	f1be 0f00 	cmp.w	lr, #0
90012f86:	d031      	beq.n	90012fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90012f88:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012f8a:	4450      	add	r0, sl
90012f8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012f90:	4431      	add	r1, r6
90012f92:	ee37 7a04 	vadd.f32	s14, s14, s8
90012f96:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012f9a:	4549      	cmp	r1, r9
90012f9c:	db08      	blt.n	90012fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90012f9e:	ee77 7a85 	vadd.f32	s15, s15, s10
90012fa2:	3001      	adds	r0, #1
90012fa4:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012fa8:	eba1 0109 	sub.w	r1, r1, r9
90012fac:	ee37 7a06 	vadd.f32	s14, s14, s12
90012fb0:	f10e 3eff 	add.w	lr, lr, #4294967295
90012fb4:	f04f 0801 	mov.w	r8, #1
90012fb8:	e7e3      	b.n	90012f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90012fba:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012fbc:	4450      	add	r0, sl
90012fbe:	ee37 7a24 	vadd.f32	s14, s14, s9
90012fc2:	4431      	add	r1, r6
90012fc4:	ee77 7a84 	vadd.f32	s15, s15, s8
90012fc8:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012fcc:	4541      	cmp	r1, r8
90012fce:	db08      	blt.n	90012fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90012fd0:	ee76 6a85 	vadd.f32	s13, s13, s10
90012fd4:	3001      	adds	r0, #1
90012fd6:	ee37 7a25 	vadd.f32	s14, s14, s11
90012fda:	eba1 0108 	sub.w	r1, r1, r8
90012fde:	ee77 7a86 	vadd.f32	s15, s15, s12
90012fe2:	f10c 3cff 	add.w	ip, ip, #4294967295
90012fe6:	f04f 0901 	mov.w	r9, #1
90012fea:	e79b      	b.n	90012f24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90012fec:	449c      	add	ip, r3
90012fee:	1aff      	subs	r7, r7, r3
90012ff0:	f1b8 0f00 	cmp.w	r8, #0
90012ff4:	d009      	beq.n	9001300a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90012ff6:	9019      	str	r0, [sp, #100]	; 0x64
90012ff8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90012ffc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90013000:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90013004:	911d      	str	r1, [sp, #116]	; 0x74
90013006:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
9001300a:	1ad2      	subs	r2, r2, r3
9001300c:	e68b      	b.n	90012d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
9001300e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90013010:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90013012:	2b00      	cmp	r3, #0
90013014:	f000 80d1 	beq.w	900131ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90013018:	ad19      	add	r5, sp, #100	; 0x64
9001301a:	ac39      	add	r4, sp, #228	; 0xe4
9001301c:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001301e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90013022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90013026:	930c      	str	r3, [sp, #48]	; 0x30
90013028:	990c      	ldr	r1, [sp, #48]	; 0x30
9001302a:	6963      	ldr	r3, [r4, #20]
9001302c:	440b      	add	r3, r1
9001302e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90013032:	4408      	add	r0, r1
90013034:	b200      	sxth	r0, r0
90013036:	4283      	cmp	r3, r0
90013038:	900d      	str	r0, [sp, #52]	; 0x34
9001303a:	f280 80c1 	bge.w	900131c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
9001303e:	428b      	cmp	r3, r1
90013040:	da08      	bge.n	90013054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013042:	2a00      	cmp	r2, #0
90013044:	dd06      	ble.n	90013054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013046:	1acb      	subs	r3, r1, r3
90013048:	429a      	cmp	r2, r3
9001304a:	f2c0 80bb 	blt.w	900131c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
9001304e:	2b00      	cmp	r3, #0
90013050:	f300 80b9 	bgt.w	900131c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90013054:	6967      	ldr	r7, [r4, #20]
90013056:	f10d 0850 	add.w	r8, sp, #80	; 0x50
9001305a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001305c:	443b      	add	r3, r7
9001305e:	461f      	mov	r7, r3
90013060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013062:	1bdf      	subs	r7, r3, r7
90013064:	4297      	cmp	r7, r2
90013066:	bfa8      	it	ge
90013068:	4617      	movge	r7, r2
9001306a:	2f00      	cmp	r7, #0
9001306c:	f340 813c 	ble.w	900132e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90013070:	9b64      	ldr	r3, [sp, #400]	; 0x190
90013072:	6829      	ldr	r1, [r5, #0]
90013074:	f9b3 2000 	ldrsh.w	r2, [r3]
90013078:	f9bb 3000 	ldrsh.w	r3, [fp]
9001307c:	4411      	add	r1, r2
9001307e:	6820      	ldr	r0, [r4, #0]
90013080:	4299      	cmp	r1, r3
90013082:	dd1a      	ble.n	900130ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90013084:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90013088:	4402      	add	r2, r0
9001308a:	440b      	add	r3, r1
9001308c:	b21b      	sxth	r3, r3
9001308e:	429a      	cmp	r2, r3
90013090:	dc13      	bgt.n	900130ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90013092:	9a10      	ldr	r2, [sp, #64]	; 0x40
90013094:	a912      	add	r1, sp, #72	; 0x48
90013096:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013098:	9809      	ldr	r0, [sp, #36]	; 0x24
9001309a:	681b      	ldr	r3, [r3, #0]
9001309c:	9206      	str	r2, [sp, #24]
9001309e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900130a0:	9500      	str	r5, [sp, #0]
900130a2:	9205      	str	r2, [sp, #20]
900130a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900130a6:	e9cd b203 	strd	fp, r2, [sp, #12]
900130aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
900130ac:	e9cd 8201 	strd	r8, r2, [sp, #4]
900130b0:	aa49      	add	r2, sp, #292	; 0x124
900130b2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900130b6:	4623      	mov	r3, r4
900130b8:	47c8      	blx	r9
900130ba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900130be:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900130c2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900130c6:	ee37 7a27 	vadd.f32	s14, s14, s15
900130ca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900130ce:	68a1      	ldr	r1, [r4, #8]
900130d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
900130d4:	ed94 6a08 	vldr	s12, [r4, #32]
900130d8:	edd4 6a07 	vldr	s13, [r4, #28]
900130dc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900130e0:	ee76 6a86 	vadd.f32	s13, s13, s12
900130e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900130e8:	e9d4 2300 	ldrd	r2, r3, [r4]
900130ec:	edc4 6a07 	vstr	s13, [r4, #28]
900130f0:	441a      	add	r2, r3
900130f2:	6963      	ldr	r3, [r4, #20]
900130f4:	3301      	adds	r3, #1
900130f6:	6022      	str	r2, [r4, #0]
900130f8:	6163      	str	r3, [r4, #20]
900130fa:	69a3      	ldr	r3, [r4, #24]
900130fc:	3b01      	subs	r3, #1
900130fe:	61a3      	str	r3, [r4, #24]
90013100:	6923      	ldr	r3, [r4, #16]
90013102:	440b      	add	r3, r1
90013104:	68e1      	ldr	r1, [r4, #12]
90013106:	428b      	cmp	r3, r1
90013108:	6123      	str	r3, [r4, #16]
9001310a:	db15      	blt.n	90013138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
9001310c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90013110:	3201      	adds	r2, #1
90013112:	1a5b      	subs	r3, r3, r1
90013114:	ee76 6a26 	vadd.f32	s13, s12, s13
90013118:	6022      	str	r2, [r4, #0]
9001311a:	6123      	str	r3, [r4, #16]
9001311c:	edc4 6a07 	vstr	s13, [r4, #28]
90013120:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90013124:	ee36 7a87 	vadd.f32	s14, s13, s14
90013128:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001312c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90013130:	ee77 7a27 	vadd.f32	s15, s14, s15
90013134:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90013138:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
9001313c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90013140:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90013144:	ee37 7a27 	vadd.f32	s14, s14, s15
90013148:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
9001314c:	68a9      	ldr	r1, [r5, #8]
9001314e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90013152:	ed95 6a08 	vldr	s12, [r5, #32]
90013156:	edd5 6a07 	vldr	s13, [r5, #28]
9001315a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001315e:	ee76 6a86 	vadd.f32	s13, s13, s12
90013162:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90013166:	e9d5 2300 	ldrd	r2, r3, [r5]
9001316a:	edc5 6a07 	vstr	s13, [r5, #28]
9001316e:	441a      	add	r2, r3
90013170:	696b      	ldr	r3, [r5, #20]
90013172:	3301      	adds	r3, #1
90013174:	602a      	str	r2, [r5, #0]
90013176:	616b      	str	r3, [r5, #20]
90013178:	69ab      	ldr	r3, [r5, #24]
9001317a:	3b01      	subs	r3, #1
9001317c:	61ab      	str	r3, [r5, #24]
9001317e:	692b      	ldr	r3, [r5, #16]
90013180:	440b      	add	r3, r1
90013182:	68e9      	ldr	r1, [r5, #12]
90013184:	428b      	cmp	r3, r1
90013186:	612b      	str	r3, [r5, #16]
90013188:	db15      	blt.n	900131b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
9001318a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001318e:	3201      	adds	r2, #1
90013190:	1a5b      	subs	r3, r3, r1
90013192:	ee76 6a26 	vadd.f32	s13, s12, s13
90013196:	602a      	str	r2, [r5, #0]
90013198:	612b      	str	r3, [r5, #16]
9001319a:	edc5 6a07 	vstr	s13, [r5, #28]
9001319e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900131a2:	ee36 7a87 	vadd.f32	s14, s13, s14
900131a6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900131aa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900131ae:	ee77 7a27 	vadd.f32	s15, s14, s15
900131b2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900131b6:	3f01      	subs	r7, #1
900131b8:	e757      	b.n	9001306a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
900131ba:	ad39      	add	r5, sp, #228	; 0xe4
900131bc:	ac19      	add	r4, sp, #100	; 0x64
900131be:	e72d      	b.n	9001301c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
900131c0:	4613      	mov	r3, r2
900131c2:	e744      	b.n	9001304e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
900131c4:	4613      	mov	r3, r2
900131c6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
900131c8:	469e      	mov	lr, r3
900131ca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
900131ce:	461f      	mov	r7, r3
900131d0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
900131d4:	f04f 0900 	mov.w	r9, #0
900131d8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
900131dc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
900131e0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
900131e4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
900131e8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
900131ec:	993d      	ldr	r1, [sp, #244]	; 0xf4
900131ee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
900131f2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
900131f6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
900131fa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
900131fe:	960e      	str	r6, [sp, #56]	; 0x38
90013200:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90013204:	2f00      	cmp	r7, #0
90013206:	d146      	bne.n	90013296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90013208:	449c      	add	ip, r3
9001320a:	1ad7      	subs	r7, r2, r3
9001320c:	f1b9 0f00 	cmp.w	r9, #0
90013210:	d009      	beq.n	90013226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90013212:	9039      	str	r0, [sp, #228]	; 0xe4
90013214:	913d      	str	r1, [sp, #244]	; 0xf4
90013216:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
9001321a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
9001321e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90013222:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90013226:	991b      	ldr	r1, [sp, #108]	; 0x6c
90013228:	f04f 0800 	mov.w	r8, #0
9001322c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90013230:	910e      	str	r1, [sp, #56]	; 0x38
90013232:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90013236:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
9001323a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001323e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90013242:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90013246:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
9001324a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001324e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90013252:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90013256:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
9001325a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
9001325e:	f1be 0f00 	cmp.w	lr, #0
90013262:	d030      	beq.n	900132c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90013264:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013266:	4450      	add	r0, sl
90013268:	ee76 6aa4 	vadd.f32	s13, s13, s9
9001326c:	4431      	add	r1, r6
9001326e:	ee37 7a04 	vadd.f32	s14, s14, s8
90013272:	ee77 7aa3 	vadd.f32	s15, s15, s7
90013276:	4549      	cmp	r1, r9
90013278:	db08      	blt.n	9001328c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
9001327a:	ee77 7a85 	vadd.f32	s15, s15, s10
9001327e:	3001      	adds	r0, #1
90013280:	ee76 6aa5 	vadd.f32	s13, s13, s11
90013284:	eba1 0109 	sub.w	r1, r1, r9
90013288:	ee37 7a06 	vadd.f32	s14, s14, s12
9001328c:	f10e 3eff 	add.w	lr, lr, #4294967295
90013290:	f04f 0801 	mov.w	r8, #1
90013294:	e7e3      	b.n	9001325e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90013296:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013298:	4450      	add	r0, sl
9001329a:	ee37 7a24 	vadd.f32	s14, s14, s9
9001329e:	4431      	add	r1, r6
900132a0:	ee77 7a84 	vadd.f32	s15, s15, s8
900132a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
900132a8:	4541      	cmp	r1, r8
900132aa:	db08      	blt.n	900132be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
900132ac:	ee76 6a85 	vadd.f32	s13, s13, s10
900132b0:	3001      	adds	r0, #1
900132b2:	ee37 7a25 	vadd.f32	s14, s14, s11
900132b6:	eba1 0108 	sub.w	r1, r1, r8
900132ba:	ee77 7a86 	vadd.f32	s15, s15, s12
900132be:	3f01      	subs	r7, #1
900132c0:	f04f 0901 	mov.w	r9, #1
900132c4:	e79e      	b.n	90013204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
900132c6:	449c      	add	ip, r3
900132c8:	1aff      	subs	r7, r7, r3
900132ca:	f1b8 0f00 	cmp.w	r8, #0
900132ce:	d009      	beq.n	900132e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
900132d0:	9019      	str	r0, [sp, #100]	; 0x64
900132d2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
900132d6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
900132da:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
900132de:	911d      	str	r1, [sp, #116]	; 0x74
900132e0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
900132e4:	1ad2      	subs	r2, r2, r3
900132e6:	e6b5      	b.n	90013054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
900132e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900132ea:	681b      	ldr	r3, [r3, #0]
900132ec:	b923      	cbnz	r3, 900132f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900132ee:	4b04      	ldr	r3, [pc, #16]	; (90013300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
900132f0:	6818      	ldr	r0, [r3, #0]
900132f2:	6803      	ldr	r3, [r0, #0]
900132f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900132f6:	4798      	blx	r3
900132f8:	b05b      	add	sp, #364	; 0x16c
900132fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900132fe:	bf00      	nop
90013300:	24026264 	.word	0x24026264

90013304 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90013304:	b570      	push	{r4, r5, r6, lr}
90013306:	4604      	mov	r4, r0
90013308:	2500      	movs	r5, #0
9001330a:	9805      	ldr	r0, [sp, #20]
9001330c:	f89d 601c 	ldrb.w	r6, [sp, #28]
90013310:	6061      	str	r1, [r4, #4]
90013312:	8263      	strh	r3, [r4, #18]
90013314:	f89d 1010 	ldrb.w	r1, [sp, #16]
90013318:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001331c:	8025      	strh	r5, [r4, #0]
9001331e:	7221      	strb	r1, [r4, #8]
90013320:	7266      	strb	r6, [r4, #9]
90013322:	60e0      	str	r0, [r4, #12]
90013324:	8222      	strh	r2, [r4, #16]
90013326:	82a3      	strh	r3, [r4, #20]
90013328:	82e5      	strh	r5, [r4, #22]
9001332a:	8325      	strh	r5, [r4, #24]
9001332c:	8365      	strh	r5, [r4, #26]
9001332e:	83a5      	strh	r5, [r4, #28]
90013330:	83e5      	strh	r5, [r4, #30]
90013332:	8425      	strh	r5, [r4, #32]
90013334:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90013338:	b32e      	cbz	r6, 90013386 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
9001333a:	6803      	ldr	r3, [r0, #0]
9001333c:	695b      	ldr	r3, [r3, #20]
9001333e:	4798      	blx	r3
90013340:	4606      	mov	r6, r0
90013342:	b300      	cbz	r0, 90013386 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013344:	68e0      	ldr	r0, [r4, #12]
90013346:	4631      	mov	r1, r6
90013348:	6803      	ldr	r3, [r0, #0]
9001334a:	68db      	ldr	r3, [r3, #12]
9001334c:	4798      	blx	r3
9001334e:	4605      	mov	r5, r0
90013350:	b1c8      	cbz	r0, 90013386 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013352:	7b43      	ldrb	r3, [r0, #13]
90013354:	7a82      	ldrb	r2, [r0, #10]
90013356:	005b      	lsls	r3, r3, #1
90013358:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001335c:	4313      	orrs	r3, r2
9001335e:	8423      	strh	r3, [r4, #32]
90013360:	7a63      	ldrb	r3, [r4, #9]
90013362:	2b06      	cmp	r3, #6
90013364:	d10f      	bne.n	90013386 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013366:	68e0      	ldr	r0, [r4, #12]
90013368:	462a      	mov	r2, r5
9001336a:	4631      	mov	r1, r6
9001336c:	6803      	ldr	r3, [r0, #0]
9001336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013370:	4798      	blx	r3
90013372:	7b6b      	ldrb	r3, [r5, #13]
90013374:	005b      	lsls	r3, r3, #1
90013376:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001337a:	7aab      	ldrb	r3, [r5, #10]
9001337c:	4313      	orrs	r3, r2
9001337e:	4418      	add	r0, r3
90013380:	8c23      	ldrh	r3, [r4, #32]
90013382:	4418      	add	r0, r3
90013384:	8420      	strh	r0, [r4, #32]
90013386:	4620      	mov	r0, r4
90013388:	bd70      	pop	{r4, r5, r6, pc}

9001338a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
9001338a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001338e:	2400      	movs	r4, #0
90013390:	b085      	sub	sp, #20
90013392:	4681      	mov	r9, r0
90013394:	4688      	mov	r8, r1
90013396:	4692      	mov	sl, r2
90013398:	469b      	mov	fp, r3
9001339a:	4627      	mov	r7, r4
9001339c:	4625      	mov	r5, r4
9001339e:	4626      	mov	r6, r4
900133a0:	4554      	cmp	r4, sl
900133a2:	da2a      	bge.n	900133fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900133a4:	2300      	movs	r3, #0
900133a6:	9303      	str	r3, [sp, #12]
900133a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900133ac:	429d      	cmp	r5, r3
900133ae:	d004      	beq.n	900133ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
900133b0:	f242 030b 	movw	r3, #8203	; 0x200b
900133b4:	429d      	cmp	r5, r3
900133b6:	bf18      	it	ne
900133b8:	462f      	movne	r7, r5
900133ba:	ab03      	add	r3, sp, #12
900133bc:	4642      	mov	r2, r8
900133be:	4659      	mov	r1, fp
900133c0:	4648      	mov	r0, r9
900133c2:	f002 ff23 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900133c6:	4605      	mov	r5, r0
900133c8:	b1b8      	cbz	r0, 900133fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900133ca:	280a      	cmp	r0, #10
900133cc:	d015      	beq.n	900133fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900133ce:	9a03      	ldr	r2, [sp, #12]
900133d0:	b18a      	cbz	r2, 900133f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
900133d2:	7b50      	ldrb	r0, [r2, #13]
900133d4:	4639      	mov	r1, r7
900133d6:	7a93      	ldrb	r3, [r2, #10]
900133d8:	0040      	lsls	r0, r0, #1
900133da:	8895      	ldrh	r5, [r2, #4]
900133dc:	f400 7080 	and.w	r0, r0, #256	; 0x100
900133e0:	4303      	orrs	r3, r0
900133e2:	4640      	mov	r0, r8
900133e4:	9301      	str	r3, [sp, #4]
900133e6:	f8d8 3000 	ldr.w	r3, [r8]
900133ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900133ec:	4798      	blx	r3
900133ee:	9b01      	ldr	r3, [sp, #4]
900133f0:	4418      	add	r0, r3
900133f2:	4406      	add	r6, r0
900133f4:	b2b6      	uxth	r6, r6
900133f6:	3401      	adds	r4, #1
900133f8:	e7d2      	b.n	900133a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
900133fa:	4630      	mov	r0, r6
900133fc:	b005      	add	sp, #20
900133fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90013402 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90013402:	2a02      	cmp	r2, #2
90013404:	b530      	push	{r4, r5, lr}
90013406:	d011      	beq.n	9001342c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90013408:	2a03      	cmp	r2, #3
9001340a:	d01c      	beq.n	90013446 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
9001340c:	2a01      	cmp	r2, #1
9001340e:	d10c      	bne.n	9001342a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90013410:	888b      	ldrh	r3, [r1, #4]
90013412:	8801      	ldrh	r1, [r0, #0]
90013414:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90013418:	1a5b      	subs	r3, r3, r1
9001341a:	8844      	ldrh	r4, [r0, #2]
9001341c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90013420:	1a9b      	subs	r3, r3, r2
90013422:	8004      	strh	r4, [r0, #0]
90013424:	8081      	strh	r1, [r0, #4]
90013426:	8043      	strh	r3, [r0, #2]
90013428:	80c2      	strh	r2, [r0, #6]
9001342a:	bd30      	pop	{r4, r5, pc}
9001342c:	88cb      	ldrh	r3, [r1, #6]
9001342e:	8842      	ldrh	r2, [r0, #2]
90013430:	1a9b      	subs	r3, r3, r2
90013432:	88c2      	ldrh	r2, [r0, #6]
90013434:	1a9b      	subs	r3, r3, r2
90013436:	888a      	ldrh	r2, [r1, #4]
90013438:	8801      	ldrh	r1, [r0, #0]
9001343a:	8043      	strh	r3, [r0, #2]
9001343c:	1a52      	subs	r2, r2, r1
9001343e:	8881      	ldrh	r1, [r0, #4]
90013440:	1a52      	subs	r2, r2, r1
90013442:	8002      	strh	r2, [r0, #0]
90013444:	e7f1      	b.n	9001342a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90013446:	88cb      	ldrh	r3, [r1, #6]
90013448:	8841      	ldrh	r1, [r0, #2]
9001344a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
9001344e:	1a5b      	subs	r3, r3, r1
90013450:	f9b0 5000 	ldrsh.w	r5, [r0]
90013454:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90013458:	1a9b      	subs	r3, r3, r2
9001345a:	8045      	strh	r5, [r0, #2]
9001345c:	8082      	strh	r2, [r0, #4]
9001345e:	8003      	strh	r3, [r0, #0]
90013460:	80c4      	strh	r4, [r0, #6]
90013462:	e7e2      	b.n	9001342a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90013464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90013464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013468:	b09f      	sub	sp, #124	; 0x7c
9001346a:	9116      	str	r1, [sp, #88]	; 0x58
9001346c:	9317      	str	r3, [sp, #92]	; 0x5c
9001346e:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013470:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013472:	8809      	ldrh	r1, [r1, #0]
90013474:	889b      	ldrh	r3, [r3, #4]
90013476:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
9001347a:	440b      	add	r3, r1
9001347c:	9212      	str	r2, [sp, #72]	; 0x48
9001347e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90013482:	b21b      	sxth	r3, r3
90013484:	9011      	str	r0, [sp, #68]	; 0x44
90013486:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
9001348a:	9310      	str	r3, [sp, #64]	; 0x40
9001348c:	f8d8 3000 	ldr.w	r3, [r8]
90013490:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90013494:	7b19      	ldrb	r1, [r3, #12]
90013496:	7adb      	ldrb	r3, [r3, #11]
90013498:	9114      	str	r1, [sp, #80]	; 0x50
9001349a:	9315      	str	r3, [sp, #84]	; 0x54
9001349c:	2a00      	cmp	r2, #0
9001349e:	d06a      	beq.n	90013576 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
900134a0:	f898 3010 	ldrb.w	r3, [r8, #16]
900134a4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
900134a6:	2b06      	cmp	r3, #6
900134a8:	bf14      	ite	ne
900134aa:	2301      	movne	r3, #1
900134ac:	2302      	moveq	r3, #2
900134ae:	4413      	add	r3, r2
900134b0:	f04f 0900 	mov.w	r9, #0
900134b4:	930f      	str	r3, [sp, #60]	; 0x3c
900134b6:	464c      	mov	r4, r9
900134b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
900134bc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
900134c0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
900134c4:	4293      	cmp	r3, r2
900134c6:	f280 808f 	bge.w	900135e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
900134ca:	2300      	movs	r3, #0
900134cc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
900134d0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
900134d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900134d8:	429c      	cmp	r4, r3
900134da:	d006      	beq.n	900134ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
900134dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900134de:	f242 020b 	movw	r2, #8203	; 0x200b
900134e2:	4294      	cmp	r4, r2
900134e4:	bf18      	it	ne
900134e6:	4623      	movne	r3, r4
900134e8:	930d      	str	r3, [sp, #52]	; 0x34
900134ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900134ec:	992d      	ldr	r1, [sp, #180]	; 0xb4
900134ee:	f8d8 2000 	ldr.w	r2, [r8]
900134f2:	428b      	cmp	r3, r1
900134f4:	db41      	blt.n	9001357a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
900134f6:	6813      	ldr	r3, [r2, #0]
900134f8:	4610      	mov	r0, r2
900134fa:	695b      	ldr	r3, [r3, #20]
900134fc:	4798      	blx	r3
900134fe:	4604      	mov	r4, r0
90013500:	f8d8 0000 	ldr.w	r0, [r8]
90013504:	aa1d      	add	r2, sp, #116	; 0x74
90013506:	4621      	mov	r1, r4
90013508:	6803      	ldr	r3, [r0, #0]
9001350a:	689d      	ldr	r5, [r3, #8]
9001350c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90013510:	47a8      	blx	r5
90013512:	901c      	str	r0, [sp, #112]	; 0x70
90013514:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013518:	429c      	cmp	r4, r3
9001351a:	f000 80ec 	beq.w	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001351e:	f242 030b 	movw	r3, #8203	; 0x200b
90013522:	429c      	cmp	r4, r3
90013524:	f000 80e7 	beq.w	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013528:	2c00      	cmp	r4, #0
9001352a:	f000 80f9 	beq.w	90013720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001352e:	2c0a      	cmp	r4, #10
90013530:	d060      	beq.n	900135f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90013532:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90013534:	b36a      	cbz	r2, 90013592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90013536:	8894      	ldrh	r4, [r2, #4]
90013538:	f1bb 0f00 	cmp.w	fp, #0
9001353c:	d03b      	beq.n	900135b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
9001353e:	f892 900d 	ldrb.w	r9, [r2, #13]
90013542:	f1bb 0f01 	cmp.w	fp, #1
90013546:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001354a:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001354e:	f892 900a 	ldrb.w	r9, [r2, #10]
90013552:	ea49 0903 	orr.w	r9, r9, r3
90013556:	d134      	bne.n	900135c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90013558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001355a:	eba6 0609 	sub.w	r6, r6, r9
9001355e:	2b00      	cmp	r3, #0
90013560:	d14f      	bne.n	90013602 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013562:	9a14      	ldr	r2, [sp, #80]	; 0x50
90013564:	eb09 0306 	add.w	r3, r9, r6
90013568:	4413      	add	r3, r2
9001356a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001356c:	f9b2 2000 	ldrsh.w	r2, [r2]
90013570:	4293      	cmp	r3, r2
90013572:	da51      	bge.n	90013618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013574:	e038      	b.n	900135e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90013576:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013578:	e79a      	b.n	900134b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
9001357a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001357e:	4659      	mov	r1, fp
90013580:	982c      	ldr	r0, [sp, #176]	; 0xb0
90013582:	9301      	str	r3, [sp, #4]
90013584:	ab1d      	add	r3, sp, #116	; 0x74
90013586:	9300      	str	r3, [sp, #0]
90013588:	ab1c      	add	r3, sp, #112	; 0x70
9001358a:	f002 fe88 	bl	9001629e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
9001358e:	4604      	mov	r4, r0
90013590:	e7c0      	b.n	90013514 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90013592:	f8d8 0000 	ldr.w	r0, [r8]
90013596:	6803      	ldr	r3, [r0, #0]
90013598:	691b      	ldr	r3, [r3, #16]
9001359a:	4798      	blx	r3
9001359c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900135a0:	4298      	cmp	r0, r3
900135a2:	f000 80a8 	beq.w	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900135a6:	f242 030b 	movw	r3, #8203	; 0x200b
900135aa:	4298      	cmp	r0, r3
900135ac:	f000 80a3 	beq.w	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900135b0:	f1bb 0f00 	cmp.w	fp, #0
900135b4:	d100      	bne.n	900135b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
900135b6:	444e      	add	r6, r9
900135b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900135ba:	2a00      	cmp	r2, #0
900135bc:	d1bf      	bne.n	9001353e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
900135be:	4691      	mov	r9, r2
900135c0:	e099      	b.n	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900135c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900135c4:	2b00      	cmp	r3, #0
900135c6:	f000 80ad 	beq.w	90013724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
900135ca:	f1bb 0f00 	cmp.w	fp, #0
900135ce:	d118      	bne.n	90013602 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900135d0:	f8d8 0000 	ldr.w	r0, [r8]
900135d4:	990d      	ldr	r1, [sp, #52]	; 0x34
900135d6:	6803      	ldr	r3, [r0, #0]
900135d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900135da:	4798      	blx	r3
900135dc:	4406      	add	r6, r0
900135de:	9b15      	ldr	r3, [sp, #84]	; 0x54
900135e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
900135e2:	1af3      	subs	r3, r6, r3
900135e4:	4293      	cmp	r3, r2
900135e6:	dd17      	ble.n	90013618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900135e8:	2c00      	cmp	r4, #0
900135ea:	f000 8099 	beq.w	90013720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900135ee:	2c0a      	cmp	r4, #10
900135f0:	f040 8087 	bne.w	90013702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
900135f4:	240a      	movs	r4, #10
900135f6:	fab4 f084 	clz	r0, r4
900135fa:	0940      	lsrs	r0, r0, #5
900135fc:	b01f      	add	sp, #124	; 0x7c
900135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013602:	f8d8 0000 	ldr.w	r0, [r8]
90013606:	990d      	ldr	r1, [sp, #52]	; 0x34
90013608:	6803      	ldr	r3, [r0, #0]
9001360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001360c:	4798      	blx	r3
9001360e:	f1bb 0f01 	cmp.w	fp, #1
90013612:	eba6 0600 	sub.w	r6, r6, r0
90013616:	d0a4      	beq.n	90013562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90013618:	981c      	ldr	r0, [sp, #112]	; 0x70
9001361a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001361c:	f990 1009 	ldrsb.w	r1, [r0, #9]
90013620:	f9b3 7000 	ldrsh.w	r7, [r3]
90013624:	7b43      	ldrb	r3, [r0, #13]
90013626:	4431      	add	r1, r6
90013628:	015b      	lsls	r3, r3, #5
9001362a:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001362e:	7983      	ldrb	r3, [r0, #6]
90013630:	4313      	orrs	r3, r2
90013632:	440b      	add	r3, r1
90013634:	42bb      	cmp	r3, r7
90013636:	db5e      	blt.n	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013638:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001363a:	4299      	cmp	r1, r3
9001363c:	da5b      	bge.n	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001363e:	f8d8 0000 	ldr.w	r0, [r8]
90013642:	42b7      	cmp	r7, r6
90013644:	6803      	ldr	r3, [r0, #0]
90013646:	bfcc      	ite	gt
90013648:	1bbf      	subgt	r7, r7, r6
9001364a:	2700      	movle	r7, #0
9001364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001364e:	bfc8      	it	gt
90013650:	b2bf      	uxthgt	r7, r7
90013652:	4798      	blx	r3
90013654:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90013656:	7b5a      	ldrb	r2, [r3, #13]
90013658:	00d1      	lsls	r1, r2, #3
9001365a:	f401 7580 	and.w	r5, r1, #256	; 0x100
9001365e:	7a19      	ldrb	r1, [r3, #8]
90013660:	4329      	orrs	r1, r5
90013662:	0655      	lsls	r5, r2, #25
90013664:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90013666:	bf48      	it	mi
90013668:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
9001366c:	4405      	add	r5, r0
9001366e:	bf48      	it	mi
90013670:	b209      	sxthmi	r1, r1
90013672:	1a6d      	subs	r5, r5, r1
90013674:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013676:	b2ad      	uxth	r5, r5
90013678:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
9001367c:	fa0f fa85 	sxth.w	sl, r5
90013680:	4551      	cmp	r1, sl
90013682:	dd3c      	ble.n	900136fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90013684:	0112      	lsls	r2, r2, #4
90013686:	79d8      	ldrb	r0, [r3, #7]
90013688:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001368c:	4302      	orrs	r2, r0
9001368e:	4492      	add	sl, r2
90013690:	4551      	cmp	r1, sl
90013692:	dc30      	bgt.n	900136f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013694:	1b4d      	subs	r5, r1, r5
90013696:	468a      	mov	sl, r1
90013698:	b22d      	sxth	r5, r5
9001369a:	9319      	str	r3, [sp, #100]	; 0x64
9001369c:	b2ad      	uxth	r5, r5
9001369e:	9b11      	ldr	r3, [sp, #68]	; 0x44
900136a0:	f8d8 0000 	ldr.w	r0, [r8]
900136a4:	681a      	ldr	r2, [r3, #0]
900136a6:	6801      	ldr	r1, [r0, #0]
900136a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
900136aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900136ac:	9313      	str	r3, [sp, #76]	; 0x4c
900136ae:	9218      	str	r2, [sp, #96]	; 0x60
900136b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
900136b2:	4788      	blx	r1
900136b4:	f898 1006 	ldrb.w	r1, [r8, #6]
900136b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
900136ba:	910b      	str	r1, [sp, #44]	; 0x2c
900136bc:	f898 100e 	ldrb.w	r1, [r8, #14]
900136c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
900136c2:	910a      	str	r1, [sp, #40]	; 0x28
900136c4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
900136c8:	9109      	str	r1, [sp, #36]	; 0x24
900136ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
900136ce:	9305      	str	r3, [sp, #20]
900136d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900136d2:	9206      	str	r2, [sp, #24]
900136d4:	9304      	str	r3, [sp, #16]
900136d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900136d8:	f8cd a004 	str.w	sl, [sp, #4]
900136dc:	e9cd 7502 	strd	r7, r5, [sp, #8]
900136e0:	4437      	add	r7, r6
900136e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900136e4:	b23f      	sxth	r7, r7
900136e6:	e9cd 0107 	strd	r0, r1, [sp, #28]
900136ea:	9700      	str	r7, [sp, #0]
900136ec:	9916      	ldr	r1, [sp, #88]	; 0x58
900136ee:	681a      	ldr	r2, [r3, #0]
900136f0:	9811      	ldr	r0, [sp, #68]	; 0x44
900136f2:	685b      	ldr	r3, [r3, #4]
900136f4:	47a8      	blx	r5
900136f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900136f8:	3301      	adds	r3, #1
900136fa:	930e      	str	r3, [sp, #56]	; 0x38
900136fc:	e6e0      	b.n	900134c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
900136fe:	2500      	movs	r5, #0
90013700:	e7cb      	b.n	9001369a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
90013702:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90013704:	3501      	adds	r5, #1
90013706:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013708:	429d      	cmp	r5, r3
9001370a:	f6bf af74 	bge.w	900135f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
9001370e:	4659      	mov	r1, fp
90013710:	982c      	ldr	r0, [sp, #176]	; 0xb0
90013712:	f7f2 f863 	bl	900057dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90013716:	4604      	mov	r4, r0
90013718:	b110      	cbz	r0, 90013720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001371a:	280a      	cmp	r0, #10
9001371c:	d1f2      	bne.n	90013704 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
9001371e:	e769      	b.n	900135f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90013720:	2400      	movs	r4, #0
90013722:	e768      	b.n	900135f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90013724:	f1bb 0f00 	cmp.w	fp, #0
90013728:	f43f af59 	beq.w	900135de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
9001372c:	e774      	b.n	90013618 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

9001372e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
9001372e:	b530      	push	{r4, r5, lr}
90013730:	8ac4      	ldrh	r4, [r0, #22]
90013732:	8b45      	ldrh	r5, [r0, #26]
90013734:	8343      	strh	r3, [r0, #26]
90013736:	442c      	add	r4, r5
90013738:	1ae4      	subs	r4, r4, r3
9001373a:	8b83      	ldrh	r3, [r0, #28]
9001373c:	82c4      	strh	r4, [r0, #22]
9001373e:	8b04      	ldrh	r4, [r0, #24]
90013740:	4422      	add	r2, r4
90013742:	440c      	add	r4, r1
90013744:	1a59      	subs	r1, r3, r1
90013746:	83c2      	strh	r2, [r0, #30]
90013748:	8304      	strh	r4, [r0, #24]
9001374a:	8381      	strh	r1, [r0, #28]
9001374c:	bd30      	pop	{r4, r5, pc}

9001374e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001374e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013752:	4604      	mov	r4, r0
90013754:	8a47      	ldrh	r7, [r0, #18]
90013756:	68c0      	ldr	r0, [r0, #12]
90013758:	b085      	sub	sp, #20
9001375a:	6803      	ldr	r3, [r0, #0]
9001375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001375e:	4798      	blx	r3
90013760:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90013764:	7a63      	ldrb	r3, [r4, #9]
90013766:	eb06 0640 	add.w	r6, r6, r0, lsl #1
9001376a:	3b01      	subs	r3, #1
9001376c:	42b7      	cmp	r7, r6
9001376e:	bfac      	ite	ge
90013770:	f04f 0900 	movge.w	r9, #0
90013774:	f04f 0901 	movlt.w	r9, #1
90013778:	2b05      	cmp	r3, #5
9001377a:	d804      	bhi.n	90013786 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
9001377c:	e8df f003 	tbb	[pc, r3]
90013780:	470f0854 	.word	0x470f0854
90013784:	4c4c      	.short	0x4c4c
90013786:	2500      	movs	r5, #0
90013788:	46a9      	mov	r9, r5
9001378a:	462e      	mov	r6, r5
9001378c:	462f      	mov	r7, r5
9001378e:	e00e      	b.n	900137ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013790:	42b7      	cmp	r7, r6
90013792:	f04f 0500 	mov.w	r5, #0
90013796:	bfb4      	ite	lt
90013798:	2600      	movlt	r6, #0
9001379a:	2601      	movge	r6, #1
9001379c:	e7f6      	b.n	9001378c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001379e:	42b7      	cmp	r7, r6
900137a0:	464d      	mov	r5, r9
900137a2:	f04f 0900 	mov.w	r9, #0
900137a6:	bfb4      	ite	lt
900137a8:	2600      	movlt	r6, #0
900137aa:	2601      	movge	r6, #1
900137ac:	464f      	mov	r7, r9
900137ae:	f04f 0800 	mov.w	r8, #0
900137b2:	f8a4 8016 	strh.w	r8, [r4, #22]
900137b6:	f8a4 8018 	strh.w	r8, [r4, #24]
900137ba:	f8cd 8004 	str.w	r8, [sp, #4]
900137be:	2300      	movs	r3, #0
900137c0:	9303      	str	r3, [sp, #12]
900137c2:	8823      	ldrh	r3, [r4, #0]
900137c4:	2b20      	cmp	r3, #32
900137c6:	d033      	beq.n	90013830 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
900137c8:	f242 010b 	movw	r1, #8203	; 0x200b
900137cc:	1a5a      	subs	r2, r3, r1
900137ce:	f1d2 0a00 	rsbs	sl, r2, #0
900137d2:	eb4a 0a02 	adc.w	sl, sl, r2
900137d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900137da:	4293      	cmp	r3, r2
900137dc:	d008      	beq.n	900137f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900137de:	428b      	cmp	r3, r1
900137e0:	9a01      	ldr	r2, [sp, #4]
900137e2:	bf0e      	itee	eq
900137e4:	f04f 0a01 	moveq.w	sl, #1
900137e8:	461a      	movne	r2, r3
900137ea:	f04f 0a00 	movne.w	sl, #0
900137ee:	9201      	str	r2, [sp, #4]
900137f0:	ab03      	add	r3, sp, #12
900137f2:	68e2      	ldr	r2, [r4, #12]
900137f4:	7a21      	ldrb	r1, [r4, #8]
900137f6:	6860      	ldr	r0, [r4, #4]
900137f8:	f002 fd08 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900137fc:	8020      	strh	r0, [r4, #0]
900137fe:	b9d8      	cbnz	r0, 90013838 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90013800:	8ba2      	ldrh	r2, [r4, #28]
90013802:	2300      	movs	r3, #0
90013804:	4611      	mov	r1, r2
90013806:	4620      	mov	r0, r4
90013808:	f7ff ff91 	bl	9001372e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
9001380c:	e06e      	b.n	900138ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001380e:	2500      	movs	r5, #0
90013810:	2701      	movs	r7, #1
90013812:	46a9      	mov	r9, r5
90013814:	462e      	mov	r6, r5
90013816:	e7ca      	b.n	900137ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013818:	42b7      	cmp	r7, r6
9001381a:	f04f 0500 	mov.w	r5, #0
9001381e:	bfb4      	ite	lt
90013820:	2700      	movlt	r7, #0
90013822:	2701      	movge	r7, #1
90013824:	462e      	mov	r6, r5
90013826:	e7c2      	b.n	900137ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013828:	2500      	movs	r5, #0
9001382a:	2601      	movs	r6, #1
9001382c:	46a9      	mov	r9, r5
9001382e:	e7ad      	b.n	9001378c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013830:	9301      	str	r3, [sp, #4]
90013832:	f04f 0a01 	mov.w	sl, #1
90013836:	e7db      	b.n	900137f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90013838:	8b63      	ldrh	r3, [r4, #26]
9001383a:	280a      	cmp	r0, #10
9001383c:	f103 0301 	add.w	r3, r3, #1
90013840:	8363      	strh	r3, [r4, #26]
90013842:	d0dd      	beq.n	90013800 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90013844:	9a03      	ldr	r2, [sp, #12]
90013846:	bb62      	cbnz	r2, 900138a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90013848:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001384c:	4298      	cmp	r0, r3
9001384e:	d003      	beq.n	90013858 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013850:	f242 030b 	movw	r3, #8203	; 0x200b
90013854:	4298      	cmp	r0, r3
90013856:	d1b2      	bne.n	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013858:	8823      	ldrh	r3, [r4, #0]
9001385a:	8ba1      	ldrh	r1, [r4, #28]
9001385c:	2b20      	cmp	r3, #32
9001385e:	d003      	beq.n	90013868 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
90013860:	f242 000b 	movw	r0, #8203	; 0x200b
90013864:	4283      	cmp	r3, r0
90013866:	d131      	bne.n	900138cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90013868:	f1ba 0f00 	cmp.w	sl, #0
9001386c:	bf0a      	itet	eq
9001386e:	4688      	moveq	r8, r1
90013870:	4650      	movne	r0, sl
90013872:	2001      	moveq	r0, #1
90013874:	440a      	add	r2, r1
90013876:	8b23      	ldrh	r3, [r4, #24]
90013878:	f8b4 c010 	ldrh.w	ip, [r4, #16]
9001387c:	b292      	uxth	r2, r2
9001387e:	83a2      	strh	r2, [r4, #28]
90013880:	4413      	add	r3, r2
90013882:	f1b9 0f00 	cmp.w	r9, #0
90013886:	d102      	bne.n	9001388e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90013888:	2d00      	cmp	r5, #0
9001388a:	d042      	beq.n	90013912 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
9001388c:	b300      	cbz	r0, 900138d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
9001388e:	8c21      	ldrh	r1, [r4, #32]
90013890:	4419      	add	r1, r3
90013892:	458c      	cmp	ip, r1
90013894:	da37      	bge.n	90013906 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013896:	8ae1      	ldrh	r1, [r4, #22]
90013898:	2900      	cmp	r1, #0
9001389a:	d034      	beq.n	90013906 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
9001389c:	4563      	cmp	r3, ip
9001389e:	dd8e      	ble.n	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138a0:	e01d      	b.n	900138de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
900138a2:	8893      	ldrh	r3, [r2, #4]
900138a4:	9901      	ldr	r1, [sp, #4]
900138a6:	8023      	strh	r3, [r4, #0]
900138a8:	f892 b00d 	ldrb.w	fp, [r2, #13]
900138ac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
900138b0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
900138b4:	f892 b00a 	ldrb.w	fp, [r2, #10]
900138b8:	ea4b 0b00 	orr.w	fp, fp, r0
900138bc:	68e0      	ldr	r0, [r4, #12]
900138be:	6803      	ldr	r3, [r0, #0]
900138c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900138c2:	4798      	blx	r3
900138c4:	eb0b 0200 	add.w	r2, fp, r0
900138c8:	b292      	uxth	r2, r2
900138ca:	e7c5      	b.n	90013858 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900138cc:	2000      	movs	r0, #0
900138ce:	e7d1      	b.n	90013874 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
900138d0:	4563      	cmp	r3, ip
900138d2:	f77f af74 	ble.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138d6:	8ae3      	ldrh	r3, [r4, #22]
900138d8:	2b00      	cmp	r3, #0
900138da:	f43f af70 	beq.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900138de:	2301      	movs	r3, #1
900138e0:	8c22      	ldrh	r2, [r4, #32]
900138e2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
900138e6:	8be3      	ldrh	r3, [r4, #30]
900138e8:	4413      	add	r3, r2
900138ea:	83e3      	strh	r3, [r4, #30]
900138ec:	68e0      	ldr	r0, [r4, #12]
900138ee:	6803      	ldr	r3, [r0, #0]
900138f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900138f2:	4798      	blx	r3
900138f4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
900138f8:	4418      	add	r0, r3
900138fa:	8a63      	ldrh	r3, [r4, #18]
900138fc:	1a18      	subs	r0, r3, r0
900138fe:	8260      	strh	r0, [r4, #18]
90013900:	b005      	add	sp, #20
90013902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013906:	2300      	movs	r3, #0
90013908:	4611      	mov	r1, r2
9001390a:	4620      	mov	r0, r4
9001390c:	f7ff ff0f 	bl	9001372e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013910:	e755      	b.n	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013912:	4563      	cmp	r3, ip
90013914:	dd14      	ble.n	90013940 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90013916:	b117      	cbz	r7, 9001391e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90013918:	2301      	movs	r3, #1
9001391a:	460a      	mov	r2, r1
9001391c:	e772      	b.n	90013804 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001391e:	2e00      	cmp	r6, #0
90013920:	f43f af4d 	beq.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013924:	2800      	cmp	r0, #0
90013926:	f47f af4a 	bne.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001392a:	f1ba 0f00 	cmp.w	sl, #0
9001392e:	d002      	beq.n	90013936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
90013930:	2301      	movs	r3, #1
90013932:	4642      	mov	r2, r8
90013934:	e767      	b.n	90013806 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90013936:	8ae3      	ldrh	r3, [r4, #22]
90013938:	2b00      	cmp	r3, #0
9001393a:	f43f af40 	beq.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001393e:	e7d5      	b.n	900138ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90013940:	2800      	cmp	r0, #0
90013942:	f47f af3c 	bne.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013946:	f1ba 0f00 	cmp.w	sl, #0
9001394a:	f43f af38 	beq.w	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001394e:	2301      	movs	r3, #1
90013950:	4642      	mov	r2, r8
90013952:	e7da      	b.n	9001390a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90013954 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90013954:	b5f0      	push	{r4, r5, r6, r7, lr}
90013956:	4605      	mov	r5, r0
90013958:	b08f      	sub	sp, #60	; 0x3c
9001395a:	4617      	mov	r7, r2
9001395c:	461c      	mov	r4, r3
9001395e:	460e      	mov	r6, r1
90013960:	b1d1      	cbz	r1, 90013998 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
90013962:	681b      	ldr	r3, [r3, #0]
90013964:	4620      	mov	r0, r4
90013966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013968:	4798      	blx	r3
9001396a:	4240      	negs	r0, r0
9001396c:	9603      	str	r6, [sp, #12]
9001396e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90013972:	b200      	sxth	r0, r0
90013974:	9700      	str	r7, [sp, #0]
90013976:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001397a:	4629      	mov	r1, r5
9001397c:	e9cd 4001 	strd	r4, r0, [sp, #4]
90013980:	2401      	movs	r4, #1
90013982:	a805      	add	r0, sp, #20
90013984:	f7ff fcbe 	bl	90013304 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013988:	a805      	add	r0, sp, #20
9001398a:	f7ff fee0 	bl	9001374e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001398e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
90013992:	b163      	cbz	r3, 900139ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
90013994:	3401      	adds	r4, #1
90013996:	e7f7      	b.n	90013988 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90013998:	2401      	movs	r4, #1
9001399a:	f002 fd03 	bl	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001399e:	280a      	cmp	r0, #10
900139a0:	4628      	mov	r0, r5
900139a2:	bf08      	it	eq
900139a4:	3401      	addeq	r4, #1
900139a6:	f002 fcfd 	bl	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
900139aa:	2800      	cmp	r0, #0
900139ac:	d1f7      	bne.n	9001399e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
900139ae:	b2a0      	uxth	r0, r4
900139b0:	b00f      	add	sp, #60	; 0x3c
900139b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

900139b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
900139b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900139b8:	b0e3      	sub	sp, #396	; 0x18c
900139ba:	461c      	mov	r4, r3
900139bc:	4683      	mov	fp, r0
900139be:	4688      	mov	r8, r1
900139c0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
900139c2:	2b00      	cmp	r3, #0
900139c4:	f000 810f 	beq.w	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139c8:	6823      	ldr	r3, [r4, #0]
900139ca:	2b00      	cmp	r3, #0
900139cc:	f000 810b 	beq.w	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139d0:	7ba3      	ldrb	r3, [r4, #14]
900139d2:	2b00      	cmp	r3, #0
900139d4:	f000 8107 	beq.w	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139d8:	ad0a      	add	r5, sp, #40	; 0x28
900139da:	6810      	ldr	r0, [r2, #0]
900139dc:	6851      	ldr	r1, [r2, #4]
900139de:	462b      	mov	r3, r5
900139e0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
900139e4:	c303      	stmia	r3!, {r0, r1}
900139e6:	2100      	movs	r1, #0
900139e8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
900139ec:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900139f0:	4628      	mov	r0, r5
900139f2:	910c      	str	r1, [sp, #48]	; 0x30
900139f4:	a90c      	add	r1, sp, #48	; 0x30
900139f6:	79a2      	ldrb	r2, [r4, #6]
900139f8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900139fc:	f7ff fd01 	bl	90013402 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013a00:	a90c      	add	r1, sp, #48	; 0x30
90013a02:	79a2      	ldrb	r2, [r4, #6]
90013a04:	4608      	mov	r0, r1
90013a06:	f7ff fcfc 	bl	90013402 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013a0a:	a817      	add	r0, sp, #92	; 0x5c
90013a0c:	f002 f8b6 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
90013a10:	6820      	ldr	r0, [r4, #0]
90013a12:	6803      	ldr	r3, [r0, #0]
90013a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013a16:	4798      	blx	r3
90013a18:	4606      	mov	r6, r0
90013a1a:	6820      	ldr	r0, [r4, #0]
90013a1c:	6803      	ldr	r3, [r0, #0]
90013a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90013a20:	4798      	blx	r3
90013a22:	4633      	mov	r3, r6
90013a24:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90013a26:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90013a28:	9000      	str	r0, [sp, #0]
90013a2a:	a817      	add	r0, sp, #92	; 0x5c
90013a2c:	f002 f8f9 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013a30:	6820      	ldr	r0, [r4, #0]
90013a32:	f894 a004 	ldrb.w	sl, [r4, #4]
90013a36:	6803      	ldr	r3, [r0, #0]
90013a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013a3a:	4798      	blx	r3
90013a3c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
90013a40:	6823      	ldr	r3, [r4, #0]
90013a42:	4607      	mov	r7, r0
90013a44:	4406      	add	r6, r0
90013a46:	a830      	add	r0, sp, #192	; 0xc0
90013a48:	f893 9009 	ldrb.w	r9, [r3, #9]
90013a4c:	f002 f896 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
90013a50:	7c23      	ldrb	r3, [r4, #16]
90013a52:	b17b      	cbz	r3, 90013a74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90013a54:	6820      	ldr	r0, [r4, #0]
90013a56:	6803      	ldr	r3, [r0, #0]
90013a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90013a5a:	4798      	blx	r3
90013a5c:	9009      	str	r0, [sp, #36]	; 0x24
90013a5e:	6820      	ldr	r0, [r4, #0]
90013a60:	6802      	ldr	r2, [r0, #0]
90013a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
90013a64:	4790      	blx	r2
90013a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013a68:	9000      	str	r0, [sp, #0]
90013a6a:	a830      	add	r0, sp, #192	; 0xc0
90013a6c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90013a6e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90013a70:	f002 f8d7 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90013a74:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90013a78:	a80e      	add	r0, sp, #56	; 0x38
90013a7a:	7be2      	ldrb	r2, [r4, #15]
90013a7c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013a80:	1a8a      	subs	r2, r1, r2
90013a82:	7c21      	ldrb	r1, [r4, #16]
90013a84:	9103      	str	r1, [sp, #12]
90013a86:	b292      	uxth	r2, r2
90013a88:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90013a8c:	9102      	str	r1, [sp, #8]
90013a8e:	6821      	ldr	r1, [r4, #0]
90013a90:	9101      	str	r1, [sp, #4]
90013a92:	7961      	ldrb	r1, [r4, #5]
90013a94:	9100      	str	r1, [sp, #0]
90013a96:	a930      	add	r1, sp, #192	; 0xc0
90013a98:	f7ff fc34 	bl	90013304 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013a9c:	2e00      	cmp	r6, #0
90013a9e:	dc5b      	bgt.n	90013b58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90013aa0:	af17      	add	r7, sp, #92	; 0x5c
90013aa2:	f04f 0900 	mov.w	r9, #0
90013aa6:	7c23      	ldrb	r3, [r4, #16]
90013aa8:	2b00      	cmp	r3, #0
90013aaa:	f000 80ae 	beq.w	90013c0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90013aae:	a80e      	add	r0, sp, #56	; 0x38
90013ab0:	f7ff fe4d 	bl	9001374e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90013ab4:	f1ba 0f00 	cmp.w	sl, #0
90013ab8:	f000 80a2 	beq.w	90013c00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013abc:	7c23      	ldrb	r3, [r4, #16]
90013abe:	2264      	movs	r2, #100	; 0x64
90013ac0:	4639      	mov	r1, r7
90013ac2:	a849      	add	r0, sp, #292	; 0x124
90013ac4:	9309      	str	r3, [sp, #36]	; 0x24
90013ac6:	f00f fd5e 	bl	90023586 <memcpy>
90013aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013acc:	2b00      	cmp	r3, #0
90013ace:	f000 80a4 	beq.w	90013c1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90013ad2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90013ad6:	7922      	ldrb	r2, [r4, #4]
90013ad8:	2a01      	cmp	r2, #1
90013ada:	f040 8087 	bne.w	90013bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90013ade:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90013ae2:	1ac0      	subs	r0, r0, r3
90013ae4:	2302      	movs	r3, #2
90013ae6:	fb90 f0f3 	sdiv	r0, r0, r3
90013aea:	b200      	sxth	r0, r0
90013aec:	7c23      	ldrb	r3, [r4, #16]
90013aee:	2b00      	cmp	r3, #0
90013af0:	f000 8088 	beq.w	90013c04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90013af4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90013af8:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90013afc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013b00:	e9cd 2105 	strd	r2, r1, [sp, #20]
90013b04:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90013b08:	2100      	movs	r1, #0
90013b0a:	4410      	add	r0, r2
90013b0c:	4642      	mov	r2, r8
90013b0e:	b200      	sxth	r0, r0
90013b10:	e9cd 9703 	strd	r9, r7, [sp, #12]
90013b14:	9000      	str	r0, [sp, #0]
90013b16:	4658      	mov	r0, fp
90013b18:	e9cd 5401 	strd	r5, r4, [sp, #4]
90013b1c:	f7ff fca2 	bl	90013464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90013b20:	2800      	cmp	r0, #0
90013b22:	d160      	bne.n	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013b24:	b2b2      	uxth	r2, r6
90013b26:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90013b2a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90013b2e:	4413      	add	r3, r2
90013b30:	1a8a      	subs	r2, r1, r2
90013b32:	b21b      	sxth	r3, r3
90013b34:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90013b38:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90013b3c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90013b40:	2a00      	cmp	r2, #0
90013b42:	d150      	bne.n	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013b44:	6822      	ldr	r2, [r4, #0]
90013b46:	8869      	ldrh	r1, [r5, #2]
90013b48:	7a12      	ldrb	r2, [r2, #8]
90013b4a:	1a9b      	subs	r3, r3, r2
90013b4c:	88ea      	ldrh	r2, [r5, #6]
90013b4e:	440a      	add	r2, r1
90013b50:	b212      	sxth	r2, r2
90013b52:	4293      	cmp	r3, r2
90013b54:	dda7      	ble.n	90013aa6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90013b56:	e046      	b.n	90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013b58:	7c23      	ldrb	r3, [r4, #16]
90013b5a:	444f      	add	r7, r9
90013b5c:	b1c3      	cbz	r3, 90013b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
90013b5e:	f64f 79ff 	movw	r9, #65535	; 0xffff
90013b62:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013b66:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013b6a:	443b      	add	r3, r7
90013b6c:	4293      	cmp	r3, r2
90013b6e:	da97      	bge.n	90013aa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90013b70:	a80e      	add	r0, sp, #56	; 0x38
90013b72:	f7ff fdec 	bl	9001374e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90013b76:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90013b7a:	3b01      	subs	r3, #1
90013b7c:	b29b      	uxth	r3, r3
90013b7e:	454b      	cmp	r3, r9
90013b80:	9309      	str	r3, [sp, #36]	; 0x24
90013b82:	d021      	beq.n	90013bc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90013b84:	7961      	ldrb	r1, [r4, #5]
90013b86:	a817      	add	r0, sp, #92	; 0x5c
90013b88:	f7f1 fe28 	bl	900057dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90013b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013b8e:	e7f4      	b.n	90013b7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90013b90:	fa1f f986 	uxth.w	r9, r6
90013b94:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013b98:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013b9c:	443b      	add	r3, r7
90013b9e:	4293      	cmp	r3, r2
90013ba0:	f6bf af7e 	bge.w	90013aa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90013ba4:	a817      	add	r0, sp, #92	; 0x5c
90013ba6:	f002 fbfd 	bl	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90013baa:	b1e0      	cbz	r0, 90013be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013bac:	280a      	cmp	r0, #10
90013bae:	d1f1      	bne.n	90013b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013bb0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90013bb4:	444b      	add	r3, r9
90013bb6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90013bba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013bbe:	eba3 0309 	sub.w	r3, r3, r9
90013bc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013bc6:	e7e5      	b.n	90013b94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013bc8:	b2b3      	uxth	r3, r6
90013bca:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90013bce:	441a      	add	r2, r3
90013bd0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90013bd4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90013bd8:	1ad3      	subs	r3, r2, r3
90013bda:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013bde:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90013be2:	2b00      	cmp	r3, #0
90013be4:	d1bd      	bne.n	90013b62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90013be6:	b063      	add	sp, #396	; 0x18c
90013be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013bec:	2a02      	cmp	r2, #2
90013bee:	d105      	bne.n	90013bfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90013bf0:	7be2      	ldrb	r2, [r4, #15]
90013bf2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90013bf6:	1a80      	subs	r0, r0, r2
90013bf8:	1ac0      	subs	r0, r0, r3
90013bfa:	e776      	b.n	90013aea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90013bfc:	2000      	movs	r0, #0
90013bfe:	e775      	b.n	90013aec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013c00:	7be0      	ldrb	r0, [r4, #15]
90013c02:	e773      	b.n	90013aec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013c04:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013c08:	e776      	b.n	90013af8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90013c0a:	f1ba 0f00 	cmp.w	sl, #0
90013c0e:	d0f7      	beq.n	90013c00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013c10:	2264      	movs	r2, #100	; 0x64
90013c12:	4639      	mov	r1, r7
90013c14:	a849      	add	r0, sp, #292	; 0x124
90013c16:	f00f fcb6 	bl	90023586 <memcpy>
90013c1a:	2300      	movs	r3, #0
90013c1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013c20:	6821      	ldr	r1, [r4, #0]
90013c22:	a849      	add	r0, sp, #292	; 0x124
90013c24:	f7ff fbb1 	bl	9001338a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90013c28:	b203      	sxth	r3, r0
90013c2a:	e754      	b.n	90013ad6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90013c2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90013c2c:	2b03      	cmp	r3, #3
90013c2e:	d818      	bhi.n	90013c62 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90013c30:	e8df f003 	tbb	[pc, r3]
90013c34:	130d0602 	.word	0x130d0602
90013c38:	f9b0 2000 	ldrsh.w	r2, [r0]
90013c3c:	1850      	adds	r0, r2, r1
90013c3e:	4770      	bx	lr
90013c40:	8803      	ldrh	r3, [r0, #0]
90013c42:	8880      	ldrh	r0, [r0, #4]
90013c44:	4418      	add	r0, r3
90013c46:	b200      	sxth	r0, r0
90013c48:	1a80      	subs	r0, r0, r2
90013c4a:	3801      	subs	r0, #1
90013c4c:	4770      	bx	lr
90013c4e:	8803      	ldrh	r3, [r0, #0]
90013c50:	8880      	ldrh	r0, [r0, #4]
90013c52:	4418      	add	r0, r3
90013c54:	b200      	sxth	r0, r0
90013c56:	1a40      	subs	r0, r0, r1
90013c58:	e7f7      	b.n	90013c4a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90013c5a:	f9b0 0000 	ldrsh.w	r0, [r0]
90013c5e:	4410      	add	r0, r2
90013c60:	4770      	bx	lr
90013c62:	2000      	movs	r0, #0
90013c64:	4770      	bx	lr

90013c66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90013c66:	2b03      	cmp	r3, #3
90013c68:	d817      	bhi.n	90013c9a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90013c6a:	e8df f003 	tbb	[pc, r3]
90013c6e:	0602      	.short	0x0602
90013c70:	1009      	.short	0x1009
90013c72:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90013c76:	1850      	adds	r0, r2, r1
90013c78:	4770      	bx	lr
90013c7a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90013c7e:	e7fa      	b.n	90013c76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90013c80:	8843      	ldrh	r3, [r0, #2]
90013c82:	88c0      	ldrh	r0, [r0, #6]
90013c84:	4418      	add	r0, r3
90013c86:	b200      	sxth	r0, r0
90013c88:	1a80      	subs	r0, r0, r2
90013c8a:	3801      	subs	r0, #1
90013c8c:	4770      	bx	lr
90013c8e:	8843      	ldrh	r3, [r0, #2]
90013c90:	88c0      	ldrh	r0, [r0, #6]
90013c92:	4418      	add	r0, r3
90013c94:	b200      	sxth	r0, r0
90013c96:	1a40      	subs	r0, r0, r1
90013c98:	e7f7      	b.n	90013c8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90013c9a:	2000      	movs	r0, #0
90013c9c:	4770      	bx	lr
	...

90013ca0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90013ca0:	4b01      	ldr	r3, [pc, #4]	; (90013ca8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90013ca2:	2200      	movs	r2, #0
90013ca4:	601a      	str	r2, [r3, #0]
90013ca6:	4770      	bx	lr
90013ca8:	2402626c 	.word	0x2402626c

90013cac <_ZN8touchgfx16TouchCalibration4clzuEm>:
90013cac:	4603      	mov	r3, r0
90013cae:	b1c8      	cbz	r0, 90013ce4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90013cb0:	0c02      	lsrs	r2, r0, #16
90013cb2:	0412      	lsls	r2, r2, #16
90013cb4:	b9a2      	cbnz	r2, 90013ce0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90013cb6:	0403      	lsls	r3, r0, #16
90013cb8:	2010      	movs	r0, #16
90013cba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90013cbe:	bf04      	itt	eq
90013cc0:	021b      	lsleq	r3, r3, #8
90013cc2:	3008      	addeq	r0, #8
90013cc4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90013cc8:	bf04      	itt	eq
90013cca:	011b      	lsleq	r3, r3, #4
90013ccc:	3004      	addeq	r0, #4
90013cce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90013cd2:	bf04      	itt	eq
90013cd4:	009b      	lsleq	r3, r3, #2
90013cd6:	3002      	addeq	r0, #2
90013cd8:	2b00      	cmp	r3, #0
90013cda:	db04      	blt.n	90013ce6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90013cdc:	3001      	adds	r0, #1
90013cde:	4770      	bx	lr
90013ce0:	2000      	movs	r0, #0
90013ce2:	e7ea      	b.n	90013cba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90013ce4:	2020      	movs	r0, #32
90013ce6:	4770      	bx	lr

90013ce8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013cec:	b087      	sub	sp, #28
90013cee:	4681      	mov	r9, r0
90013cf0:	4698      	mov	r8, r3
90013cf2:	4610      	mov	r0, r2
90013cf4:	460d      	mov	r5, r1
90013cf6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90013cfa:	b981      	cbnz	r1, 90013d1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90013cfc:	b14b      	cbz	r3, 90013d12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90013cfe:	460b      	mov	r3, r1
90013d00:	464a      	mov	r2, r9
90013d02:	4641      	mov	r1, r8
90013d04:	e9cd 4700 	strd	r4, r7, [sp]
90013d08:	f7ff ffee 	bl	90013ce8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013d0c:	b007      	add	sp, #28
90013d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013d12:	f04f 33ff 	mov.w	r3, #4294967295
90013d16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90013d1a:	603b      	str	r3, [r7, #0]
90013d1c:	e7f6      	b.n	90013d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013d1e:	fa32 fa01 	lsrs.w	sl, r2, r1
90013d22:	d107      	bne.n	90013d34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90013d24:	fb09 f602 	mul.w	r6, r9, r2
90013d28:	fbb6 f0f4 	udiv	r0, r6, r4
90013d2c:	fb04 6610 	mls	r6, r4, r0, r6
90013d30:	603e      	str	r6, [r7, #0]
90013d32:	e7eb      	b.n	90013d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013d34:	2601      	movs	r6, #1
90013d36:	fa09 fb01 	lsl.w	fp, r9, r1
90013d3a:	408e      	lsls	r6, r1
90013d3c:	fbbb f3f4 	udiv	r3, fp, r4
90013d40:	3e01      	subs	r6, #1
90013d42:	9302      	str	r3, [sp, #8]
90013d44:	fb0a f303 	mul.w	r3, sl, r3
90013d48:	4016      	ands	r6, r2
90013d4a:	9303      	str	r3, [sp, #12]
90013d4c:	4630      	mov	r0, r6
90013d4e:	f7ff ffad 	bl	90013cac <_ZN8touchgfx16TouchCalibration4clzuEm>
90013d52:	464a      	mov	r2, r9
90013d54:	460b      	mov	r3, r1
90013d56:	4601      	mov	r1, r0
90013d58:	4630      	mov	r0, r6
90013d5a:	e9cd 4700 	strd	r4, r7, [sp]
90013d5e:	f7ff ffc3 	bl	90013ce8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013d62:	9b02      	ldr	r3, [sp, #8]
90013d64:	4606      	mov	r6, r0
90013d66:	eb05 0108 	add.w	r1, r5, r8
90013d6a:	fb04 bb13 	mls	fp, r4, r3, fp
90013d6e:	4658      	mov	r0, fp
90013d70:	f7ff ff9c 	bl	90013cac <_ZN8touchgfx16TouchCalibration4clzuEm>
90013d74:	ab05      	add	r3, sp, #20
90013d76:	465a      	mov	r2, fp
90013d78:	e9cd 4300 	strd	r4, r3, [sp]
90013d7c:	4603      	mov	r3, r0
90013d7e:	4650      	mov	r0, sl
90013d80:	f7ff ffb2 	bl	90013ce8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013d84:	6839      	ldr	r1, [r7, #0]
90013d86:	9a05      	ldr	r2, [sp, #20]
90013d88:	9b03      	ldr	r3, [sp, #12]
90013d8a:	4411      	add	r1, r2
90013d8c:	fbb1 f2f4 	udiv	r2, r1, r4
90013d90:	18d3      	adds	r3, r2, r3
90013d92:	fb04 1412 	mls	r4, r4, r2, r1
90013d96:	441e      	add	r6, r3
90013d98:	603c      	str	r4, [r7, #0]
90013d9a:	4430      	add	r0, r6
90013d9c:	e7b6      	b.n	90013d0c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90013d9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90013d9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90013da2:	b085      	sub	sp, #20
90013da4:	f1b0 0900 	subs.w	r9, r0, #0
90013da8:	461d      	mov	r5, r3
90013daa:	4617      	mov	r7, r2
90013dac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90013dae:	bfbb      	ittet	lt
90013db0:	f1c9 0900 	rsblt	r9, r9, #0
90013db4:	f04f 36ff 	movlt.w	r6, #4294967295
90013db8:	2601      	movge	r6, #1
90013dba:	6823      	ldrlt	r3, [r4, #0]
90013dbc:	bfbc      	itt	lt
90013dbe:	425b      	neglt	r3, r3
90013dc0:	6023      	strlt	r3, [r4, #0]
90013dc2:	2a00      	cmp	r2, #0
90013dc4:	da04      	bge.n	90013dd0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90013dc6:	6823      	ldr	r3, [r4, #0]
90013dc8:	4257      	negs	r7, r2
90013dca:	4276      	negs	r6, r6
90013dcc:	425b      	negs	r3, r3
90013dce:	6023      	str	r3, [r4, #0]
90013dd0:	2d00      	cmp	r5, #0
90013dd2:	4638      	mov	r0, r7
90013dd4:	bfba      	itte	lt
90013dd6:	426d      	neglt	r5, r5
90013dd8:	f04f 38ff 	movlt.w	r8, #4294967295
90013ddc:	f04f 0801 	movge.w	r8, #1
90013de0:	f7ff ff64 	bl	90013cac <_ZN8touchgfx16TouchCalibration4clzuEm>
90013de4:	ab03      	add	r3, sp, #12
90013de6:	463a      	mov	r2, r7
90013de8:	e9cd 5300 	strd	r5, r3, [sp]
90013dec:	4603      	mov	r3, r0
90013dee:	4648      	mov	r0, r9
90013df0:	f7ff ff7a 	bl	90013ce8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013df4:	6823      	ldr	r3, [r4, #0]
90013df6:	9a03      	ldr	r2, [sp, #12]
90013df8:	4546      	cmp	r6, r8
90013dfa:	441a      	add	r2, r3
90013dfc:	fb92 f3f5 	sdiv	r3, r2, r5
90013e00:	4418      	add	r0, r3
90013e02:	fb05 2313 	mls	r3, r5, r3, r2
90013e06:	bf18      	it	ne
90013e08:	4240      	negne	r0, r0
90013e0a:	1c72      	adds	r2, r6, #1
90013e0c:	6023      	str	r3, [r4, #0]
90013e0e:	d105      	bne.n	90013e1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90013e10:	2b00      	cmp	r3, #0
90013e12:	f1c3 0200 	rsb	r2, r3, #0
90013e16:	db0b      	blt.n	90013e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90013e18:	6022      	str	r2, [r4, #0]
90013e1a:	e006      	b.n	90013e2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013e1c:	2e01      	cmp	r6, #1
90013e1e:	d104      	bne.n	90013e2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013e20:	2b00      	cmp	r3, #0
90013e22:	da02      	bge.n	90013e2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013e24:	442b      	add	r3, r5
90013e26:	3801      	subs	r0, #1
90013e28:	6023      	str	r3, [r4, #0]
90013e2a:	b005      	add	sp, #20
90013e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013e30:	3801      	subs	r0, #1
90013e32:	1b52      	subs	r2, r2, r5
90013e34:	e7f0      	b.n	90013e18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90013e38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90013e38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90013e3c:	4c1c      	ldr	r4, [pc, #112]	; (90013eb0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90013e3e:	4605      	mov	r5, r0
90013e40:	6807      	ldr	r7, [r0, #0]
90013e42:	69a3      	ldr	r3, [r4, #24]
90013e44:	b92b      	cbnz	r3, 90013e52 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90013e46:	6840      	ldr	r0, [r0, #4]
90013e48:	e9c5 7000 	strd	r7, r0, [r5]
90013e4c:	b004      	add	sp, #16
90013e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013e52:	f04f 0802 	mov.w	r8, #2
90013e56:	68a2      	ldr	r2, [r4, #8]
90013e58:	ae04      	add	r6, sp, #16
90013e5a:	6820      	ldr	r0, [r4, #0]
90013e5c:	fb93 f1f8 	sdiv	r1, r3, r8
90013e60:	440a      	add	r2, r1
90013e62:	69e1      	ldr	r1, [r4, #28]
90013e64:	f846 2d04 	str.w	r2, [r6, #-4]!
90013e68:	463a      	mov	r2, r7
90013e6a:	9600      	str	r6, [sp, #0]
90013e6c:	f7ff ff97 	bl	90013d9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e70:	69a3      	ldr	r3, [r4, #24]
90013e72:	4607      	mov	r7, r0
90013e74:	686a      	ldr	r2, [r5, #4]
90013e76:	6a21      	ldr	r1, [r4, #32]
90013e78:	9600      	str	r6, [sp, #0]
90013e7a:	6860      	ldr	r0, [r4, #4]
90013e7c:	f7ff ff8f 	bl	90013d9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e80:	69a3      	ldr	r3, [r4, #24]
90013e82:	6962      	ldr	r2, [r4, #20]
90013e84:	4407      	add	r7, r0
90013e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
90013e88:	9600      	str	r6, [sp, #0]
90013e8a:	68e0      	ldr	r0, [r4, #12]
90013e8c:	fb93 f8f8 	sdiv	r8, r3, r8
90013e90:	4442      	add	r2, r8
90013e92:	9203      	str	r2, [sp, #12]
90013e94:	682a      	ldr	r2, [r5, #0]
90013e96:	f7ff ff82 	bl	90013d9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013e9a:	4680      	mov	r8, r0
90013e9c:	9600      	str	r6, [sp, #0]
90013e9e:	69a3      	ldr	r3, [r4, #24]
90013ea0:	686a      	ldr	r2, [r5, #4]
90013ea2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90013ea4:	6920      	ldr	r0, [r4, #16]
90013ea6:	f7ff ff7a 	bl	90013d9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013eaa:	4440      	add	r0, r8
90013eac:	e7cc      	b.n	90013e48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90013eae:	bf00      	nop
90013eb0:	24026270 	.word	0x24026270

90013eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90013eb4:	4b07      	ldr	r3, [pc, #28]	; (90013ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90013eb6:	781b      	ldrb	r3, [r3, #0]
90013eb8:	2b01      	cmp	r3, #1
90013eba:	d109      	bne.n	90013ed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90013ebc:	f9b1 3000 	ldrsh.w	r3, [r1]
90013ec0:	f9b0 2000 	ldrsh.w	r2, [r0]
90013ec4:	8003      	strh	r3, [r0, #0]
90013ec6:	4b04      	ldr	r3, [pc, #16]	; (90013ed8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90013ec8:	881b      	ldrh	r3, [r3, #0]
90013eca:	3b01      	subs	r3, #1
90013ecc:	1a9b      	subs	r3, r3, r2
90013ece:	800b      	strh	r3, [r1, #0]
90013ed0:	4770      	bx	lr
90013ed2:	bf00      	nop
90013ed4:	2402625c 	.word	0x2402625c
90013ed8:	24026258 	.word	0x24026258

90013edc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90013edc:	4b07      	ldr	r3, [pc, #28]	; (90013efc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90013ede:	b510      	push	{r4, lr}
90013ee0:	781b      	ldrb	r3, [r3, #0]
90013ee2:	2b01      	cmp	r3, #1
90013ee4:	d108      	bne.n	90013ef8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90013ee6:	4b06      	ldr	r3, [pc, #24]	; (90013f00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90013ee8:	880c      	ldrh	r4, [r1, #0]
90013eea:	881b      	ldrh	r3, [r3, #0]
90013eec:	f9b0 2000 	ldrsh.w	r2, [r0]
90013ef0:	3b01      	subs	r3, #1
90013ef2:	1b1b      	subs	r3, r3, r4
90013ef4:	8003      	strh	r3, [r0, #0]
90013ef6:	800a      	strh	r2, [r1, #0]
90013ef8:	bd10      	pop	{r4, pc}
90013efa:	bf00      	nop
90013efc:	2402625c 	.word	0x2402625c
90013f00:	24026258 	.word	0x24026258

90013f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90013f04:	4b0a      	ldr	r3, [pc, #40]	; (90013f30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90013f06:	b510      	push	{r4, lr}
90013f08:	781b      	ldrb	r3, [r3, #0]
90013f0a:	2b01      	cmp	r3, #1
90013f0c:	d10e      	bne.n	90013f2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90013f0e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90013f12:	8843      	ldrh	r3, [r0, #2]
90013f14:	f9b0 4000 	ldrsh.w	r4, [r0]
90013f18:	18ca      	adds	r2, r1, r3
90013f1a:	4b06      	ldr	r3, [pc, #24]	; (90013f34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90013f1c:	8044      	strh	r4, [r0, #2]
90013f1e:	881b      	ldrh	r3, [r3, #0]
90013f20:	1a9b      	subs	r3, r3, r2
90013f22:	8003      	strh	r3, [r0, #0]
90013f24:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013f28:	8081      	strh	r1, [r0, #4]
90013f2a:	80c3      	strh	r3, [r0, #6]
90013f2c:	bd10      	pop	{r4, pc}
90013f2e:	bf00      	nop
90013f30:	2402625c 	.word	0x2402625c
90013f34:	24026258 	.word	0x24026258

90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90013f38:	4b08      	ldr	r3, [pc, #32]	; (90013f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90013f3a:	781b      	ldrb	r3, [r3, #0]
90013f3c:	2b01      	cmp	r3, #1
90013f3e:	d10c      	bne.n	90013f5a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90013f40:	8803      	ldrh	r3, [r0, #0]
90013f42:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90013f46:	8842      	ldrh	r2, [r0, #2]
90013f48:	8002      	strh	r2, [r0, #0]
90013f4a:	185a      	adds	r2, r3, r1
90013f4c:	4b04      	ldr	r3, [pc, #16]	; (90013f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90013f4e:	881b      	ldrh	r3, [r3, #0]
90013f50:	1a9b      	subs	r3, r3, r2
90013f52:	8043      	strh	r3, [r0, #2]
90013f54:	88c3      	ldrh	r3, [r0, #6]
90013f56:	80c1      	strh	r1, [r0, #6]
90013f58:	8083      	strh	r3, [r0, #4]
90013f5a:	4770      	bx	lr
90013f5c:	2402625c 	.word	0x2402625c
90013f60:	24026258 	.word	0x24026258

90013f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90013f64:	4b07      	ldr	r3, [pc, #28]	; (90013f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90013f66:	b510      	push	{r4, lr}
90013f68:	781b      	ldrb	r3, [r3, #0]
90013f6a:	2b01      	cmp	r3, #1
90013f6c:	d108      	bne.n	90013f80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90013f6e:	f9b1 3000 	ldrsh.w	r3, [r1]
90013f72:	f9b0 4000 	ldrsh.w	r4, [r0]
90013f76:	8003      	strh	r3, [r0, #0]
90013f78:	8893      	ldrh	r3, [r2, #4]
90013f7a:	3b01      	subs	r3, #1
90013f7c:	1b1b      	subs	r3, r3, r4
90013f7e:	800b      	strh	r3, [r1, #0]
90013f80:	bd10      	pop	{r4, pc}
90013f82:	bf00      	nop
90013f84:	2402625c 	.word	0x2402625c

90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90013f88:	4b0a      	ldr	r3, [pc, #40]	; (90013fb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90013f8a:	460a      	mov	r2, r1
90013f8c:	b510      	push	{r4, lr}
90013f8e:	781b      	ldrb	r3, [r3, #0]
90013f90:	2b01      	cmp	r3, #1
90013f92:	d10d      	bne.n	90013fb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90013f94:	8881      	ldrh	r1, [r0, #4]
90013f96:	8803      	ldrh	r3, [r0, #0]
90013f98:	440b      	add	r3, r1
90013f9a:	4601      	mov	r1, r0
90013f9c:	3b01      	subs	r3, #1
90013f9e:	f821 3b02 	strh.w	r3, [r1], #2
90013fa2:	f7ff ffdf 	bl	90013f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90013fa6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013faa:	88c2      	ldrh	r2, [r0, #6]
90013fac:	80c3      	strh	r3, [r0, #6]
90013fae:	8082      	strh	r2, [r0, #4]
90013fb0:	bd10      	pop	{r4, pc}
90013fb2:	bf00      	nop
90013fb4:	2402625c 	.word	0x2402625c

90013fb8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90013fb8:	4770      	bx	lr
	...

90013fbc <_ZN8touchgfx11Application13requestRedrawEv>:
90013fbc:	4b06      	ldr	r3, [pc, #24]	; (90013fd8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90013fbe:	2100      	movs	r1, #0
90013fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
90013fc4:	4b05      	ldr	r3, [pc, #20]	; (90013fdc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90013fc6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90013fca:	f9b3 3000 	ldrsh.w	r3, [r3]
90013fce:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90013fd2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90013fd6:	4770      	bx	lr
90013fd8:	24026258 	.word	0x24026258
90013fdc:	2402625a 	.word	0x2402625a

90013fe0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90013fe0:	4b03      	ldr	r3, [pc, #12]	; (90013ff0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90013fe2:	6818      	ldr	r0, [r3, #0]
90013fe4:	b110      	cbz	r0, 90013fec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90013fe6:	6803      	ldr	r3, [r0, #0]
90013fe8:	699b      	ldr	r3, [r3, #24]
90013fea:	4718      	bx	r3
90013fec:	4770      	bx	lr
90013fee:	bf00      	nop
90013ff0:	240262a0 	.word	0x240262a0

90013ff4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90013ff4:	4770      	bx	lr
	...

90013ff8 <_ZN8touchgfx11Application4drawEv>:
90013ff8:	4b09      	ldr	r3, [pc, #36]	; (90014020 <_ZN8touchgfx11Application4drawEv+0x28>)
90013ffa:	b507      	push	{r0, r1, r2, lr}
90013ffc:	f9b3 2000 	ldrsh.w	r2, [r3]
90014000:	2100      	movs	r1, #0
90014002:	4b08      	ldr	r3, [pc, #32]	; (90014024 <_ZN8touchgfx11Application4drawEv+0x2c>)
90014004:	9100      	str	r1, [sp, #0]
90014006:	4669      	mov	r1, sp
90014008:	f9b3 3000 	ldrsh.w	r3, [r3]
9001400c:	f8ad 2004 	strh.w	r2, [sp, #4]
90014010:	f8ad 3006 	strh.w	r3, [sp, #6]
90014014:	6803      	ldr	r3, [r0, #0]
90014016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014018:	4798      	blx	r3
9001401a:	b003      	add	sp, #12
9001401c:	f85d fb04 	ldr.w	pc, [sp], #4
90014020:	24026258 	.word	0x24026258
90014024:	2402625a 	.word	0x2402625a

90014028 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90014028:	4b03      	ldr	r3, [pc, #12]	; (90014038 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
9001402a:	6818      	ldr	r0, [r3, #0]
9001402c:	b110      	cbz	r0, 90014034 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
9001402e:	6803      	ldr	r3, [r0, #0]
90014030:	69db      	ldr	r3, [r3, #28]
90014032:	4718      	bx	r3
90014034:	4770      	bx	lr
90014036:	bf00      	nop
90014038:	240262a0 	.word	0x240262a0

9001403c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
9001403c:	4b03      	ldr	r3, [pc, #12]	; (9001404c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
9001403e:	6818      	ldr	r0, [r3, #0]
90014040:	b110      	cbz	r0, 90014048 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90014042:	6803      	ldr	r3, [r0, #0]
90014044:	6a1b      	ldr	r3, [r3, #32]
90014046:	4718      	bx	r3
90014048:	4770      	bx	lr
9001404a:	bf00      	nop
9001404c:	240262a0 	.word	0x240262a0

90014050 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90014050:	2300      	movs	r3, #0
90014052:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90014056:	4770      	bx	lr

90014058 <_ZN8touchgfx11Application14handleKeyEventEh>:
90014058:	4b03      	ldr	r3, [pc, #12]	; (90014068 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
9001405a:	6818      	ldr	r0, [r3, #0]
9001405c:	b110      	cbz	r0, 90014064 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
9001405e:	6803      	ldr	r3, [r0, #0]
90014060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014062:	4718      	bx	r3
90014064:	4770      	bx	lr
90014066:	bf00      	nop
90014068:	240262a0 	.word	0x240262a0

9001406c <_ZN8touchgfx11ApplicationD1Ev>:
9001406c:	4770      	bx	lr

9001406e <_ZN8touchgfx11ApplicationD0Ev>:
9001406e:	b510      	push	{r4, lr}
90014070:	4604      	mov	r4, r0
90014072:	f44f 719e 	mov.w	r1, #316	; 0x13c
90014076:	f00e fedc 	bl	90022e32 <_ZdlPvj>
9001407a:	4620      	mov	r0, r4
9001407c:	bd10      	pop	{r4, pc}

9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>:
9001407e:	b510      	push	{r4, lr}
90014080:	f9b1 4000 	ldrsh.w	r4, [r1]
90014084:	888a      	ldrh	r2, [r1, #4]
90014086:	f9b0 3000 	ldrsh.w	r3, [r0]
9001408a:	4422      	add	r2, r4
9001408c:	b212      	sxth	r2, r2
9001408e:	4293      	cmp	r3, r2
90014090:	da15      	bge.n	900140be <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90014092:	8882      	ldrh	r2, [r0, #4]
90014094:	4413      	add	r3, r2
90014096:	b21b      	sxth	r3, r3
90014098:	429c      	cmp	r4, r3
9001409a:	da10      	bge.n	900140be <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001409c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
900140a0:	88c9      	ldrh	r1, [r1, #6]
900140a2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900140a6:	4419      	add	r1, r3
900140a8:	b209      	sxth	r1, r1
900140aa:	428a      	cmp	r2, r1
900140ac:	da07      	bge.n	900140be <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
900140ae:	88c0      	ldrh	r0, [r0, #6]
900140b0:	4410      	add	r0, r2
900140b2:	b200      	sxth	r0, r0
900140b4:	4283      	cmp	r3, r0
900140b6:	bfac      	ite	ge
900140b8:	2000      	movge	r0, #0
900140ba:	2001      	movlt	r0, #1
900140bc:	bd10      	pop	{r4, pc}
900140be:	2000      	movs	r0, #0
900140c0:	e7fc      	b.n	900140bc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

900140c2 <_ZN8touchgfx4Rect10restrictToEss>:
900140c2:	f9b0 3000 	ldrsh.w	r3, [r0]
900140c6:	2b00      	cmp	r3, #0
900140c8:	b510      	push	{r4, lr}
900140ca:	da04      	bge.n	900140d6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
900140cc:	8884      	ldrh	r4, [r0, #4]
900140ce:	4423      	add	r3, r4
900140d0:	8083      	strh	r3, [r0, #4]
900140d2:	2300      	movs	r3, #0
900140d4:	8003      	strh	r3, [r0, #0]
900140d6:	f9b0 4000 	ldrsh.w	r4, [r0]
900140da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900140de:	1b09      	subs	r1, r1, r4
900140e0:	428b      	cmp	r3, r1
900140e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
900140e6:	bfc8      	it	gt
900140e8:	8081      	strhgt	r1, [r0, #4]
900140ea:	2b00      	cmp	r3, #0
900140ec:	da04      	bge.n	900140f8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
900140ee:	88c1      	ldrh	r1, [r0, #6]
900140f0:	440b      	add	r3, r1
900140f2:	80c3      	strh	r3, [r0, #6]
900140f4:	2300      	movs	r3, #0
900140f6:	8043      	strh	r3, [r0, #2]
900140f8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900140fc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90014100:	1a52      	subs	r2, r2, r1
90014102:	4293      	cmp	r3, r2
90014104:	bfc8      	it	gt
90014106:	80c2      	strhgt	r2, [r0, #6]
90014108:	bd10      	pop	{r4, pc}
	...

9001410c <_ZN8touchgfx11Application4drawERNS_4RectE>:
9001410c:	4b10      	ldr	r3, [pc, #64]	; (90014150 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
9001410e:	b510      	push	{r4, lr}
90014110:	460c      	mov	r4, r1
90014112:	f9b3 2000 	ldrsh.w	r2, [r3]
90014116:	4b0f      	ldr	r3, [pc, #60]	; (90014154 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90014118:	4620      	mov	r0, r4
9001411a:	f9b3 1000 	ldrsh.w	r1, [r3]
9001411e:	f7ff ffd0 	bl	900140c2 <_ZN8touchgfx4Rect10restrictToEss>
90014122:	4b0d      	ldr	r3, [pc, #52]	; (90014158 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90014124:	6818      	ldr	r0, [r3, #0]
90014126:	b190      	cbz	r0, 9001414e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90014128:	6803      	ldr	r3, [r0, #0]
9001412a:	4621      	mov	r1, r4
9001412c:	689b      	ldr	r3, [r3, #8]
9001412e:	4798      	blx	r3
90014130:	4b0a      	ldr	r3, [pc, #40]	; (9001415c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90014132:	6818      	ldr	r0, [r3, #0]
90014134:	b118      	cbz	r0, 9001413e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90014136:	6803      	ldr	r3, [r0, #0]
90014138:	4621      	mov	r1, r4
9001413a:	689b      	ldr	r3, [r3, #8]
9001413c:	4798      	blx	r3
9001413e:	4b08      	ldr	r3, [pc, #32]	; (90014160 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90014140:	4621      	mov	r1, r4
90014142:	6818      	ldr	r0, [r3, #0]
90014144:	6803      	ldr	r3, [r0, #0]
90014146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001414a:	69db      	ldr	r3, [r3, #28]
9001414c:	4718      	bx	r3
9001414e:	bd10      	pop	{r4, pc}
90014150:	2402625a 	.word	0x2402625a
90014154:	24026258 	.word	0x24026258
90014158:	240262a0 	.word	0x240262a0
9001415c:	2402629c 	.word	0x2402629c
90014160:	24026264 	.word	0x24026264

90014164 <_ZNK8touchgfx4Rect8includesERKS0_>:
90014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014166:	4606      	mov	r6, r0
90014168:	4608      	mov	r0, r1
9001416a:	460f      	mov	r7, r1
9001416c:	f7fd f99d 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014170:	b9e8      	cbnz	r0, 900141ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90014172:	f9b7 5000 	ldrsh.w	r5, [r7]
90014176:	f9b6 4000 	ldrsh.w	r4, [r6]
9001417a:	42a5      	cmp	r5, r4
9001417c:	db17      	blt.n	900141ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001417e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
90014182:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90014186:	429a      	cmp	r2, r3
90014188:	db11      	blt.n	900141ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001418a:	88b9      	ldrh	r1, [r7, #4]
9001418c:	440d      	add	r5, r1
9001418e:	88b1      	ldrh	r1, [r6, #4]
90014190:	440c      	add	r4, r1
90014192:	b22d      	sxth	r5, r5
90014194:	b224      	sxth	r4, r4
90014196:	42a5      	cmp	r5, r4
90014198:	dc09      	bgt.n	900141ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001419a:	88f8      	ldrh	r0, [r7, #6]
9001419c:	4410      	add	r0, r2
9001419e:	88f2      	ldrh	r2, [r6, #6]
900141a0:	4413      	add	r3, r2
900141a2:	b200      	sxth	r0, r0
900141a4:	b21b      	sxth	r3, r3
900141a6:	4298      	cmp	r0, r3
900141a8:	bfcc      	ite	gt
900141aa:	2000      	movgt	r0, #0
900141ac:	2001      	movle	r0, #1
900141ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900141b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
900141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900141b2:	4604      	mov	r4, r0
900141b4:	4608      	mov	r0, r1
900141b6:	460d      	mov	r5, r1
900141b8:	f7fd f977 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900141bc:	b978      	cbnz	r0, 900141de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
900141be:	4620      	mov	r0, r4
900141c0:	f7fd f973 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900141c4:	f9b5 6000 	ldrsh.w	r6, [r5]
900141c8:	b150      	cbz	r0, 900141e0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
900141ca:	8026      	strh	r6, [r4, #0]
900141cc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
900141d0:	8063      	strh	r3, [r4, #2]
900141d2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
900141d6:	80a3      	strh	r3, [r4, #4]
900141d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900141dc:	80e3      	strh	r3, [r4, #6]
900141de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900141e0:	f9b4 1000 	ldrsh.w	r1, [r4]
900141e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900141e8:	42b1      	cmp	r1, r6
900141ea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
900141ee:	f8b5 c004 	ldrh.w	ip, [r5, #4]
900141f2:	460f      	mov	r7, r1
900141f4:	88ed      	ldrh	r5, [r5, #6]
900141f6:	bfa8      	it	ge
900141f8:	4637      	movge	r7, r6
900141fa:	4293      	cmp	r3, r2
900141fc:	4618      	mov	r0, r3
900141fe:	4466      	add	r6, ip
90014200:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014204:	bfa8      	it	ge
90014206:	4610      	movge	r0, r2
90014208:	442a      	add	r2, r5
9001420a:	88e5      	ldrh	r5, [r4, #6]
9001420c:	4461      	add	r1, ip
9001420e:	b236      	sxth	r6, r6
90014210:	8027      	strh	r7, [r4, #0]
90014212:	442b      	add	r3, r5
90014214:	b209      	sxth	r1, r1
90014216:	b212      	sxth	r2, r2
90014218:	8060      	strh	r0, [r4, #2]
9001421a:	b21b      	sxth	r3, r3
9001421c:	428e      	cmp	r6, r1
9001421e:	bfac      	ite	ge
90014220:	ebc7 0106 	rsbge	r1, r7, r6
90014224:	ebc7 0101 	rsblt	r1, r7, r1
90014228:	429a      	cmp	r2, r3
9001422a:	bfac      	ite	ge
9001422c:	ebc0 0202 	rsbge	r2, r0, r2
90014230:	ebc0 0203 	rsblt	r2, r0, r3
90014234:	80a1      	strh	r1, [r4, #4]
90014236:	80e2      	strh	r2, [r4, #6]
90014238:	e7d1      	b.n	900141de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

9001423c <_ZN8touchgfx11Application11getInstanceEv>:
9001423c:	4b01      	ldr	r3, [pc, #4]	; (90014244 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
9001423e:	6818      	ldr	r0, [r3, #0]
90014240:	4770      	bx	lr
90014242:	bf00      	nop
90014244:	240262b0 	.word	0x240262b0

90014248 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90014248:	2300      	movs	r3, #0
9001424a:	b510      	push	{r4, lr}
9001424c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
90014250:	4604      	mov	r4, r0
90014252:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90014256:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
9001425a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001425e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
90014262:	429a      	cmp	r2, r3
90014264:	d90e      	bls.n	90014284 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
90014266:	18e2      	adds	r2, r4, r3
90014268:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
9001426c:	b122      	cbz	r2, 90014278 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
9001426e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90014272:	6803      	ldr	r3, [r0, #0]
90014274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014276:	4798      	blx	r3
90014278:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
9001427c:	3301      	adds	r3, #1
9001427e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90014282:	e7ea      	b.n	9001425a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
90014284:	bd10      	pop	{r4, pc}

90014286 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90014286:	2300      	movs	r3, #0
90014288:	f100 0284 	add.w	r2, r0, #132	; 0x84
9001428c:	30a4      	adds	r0, #164	; 0xa4
9001428e:	f820 3c24 	strh.w	r3, [r0, #-36]
90014292:	f802 3b01 	strb.w	r3, [r2], #1
90014296:	4282      	cmp	r2, r0
90014298:	d1fb      	bne.n	90014292 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
9001429a:	4770      	bx	lr

9001429c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
9001429c:	b570      	push	{r4, r5, r6, lr}
9001429e:	4c0b      	ldr	r4, [pc, #44]	; (900142cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
900142a0:	4605      	mov	r5, r0
900142a2:	460e      	mov	r6, r1
900142a4:	6820      	ldr	r0, [r4, #0]
900142a6:	b110      	cbz	r0, 900142ae <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
900142a8:	6803      	ldr	r3, [r0, #0]
900142aa:	695b      	ldr	r3, [r3, #20]
900142ac:	4798      	blx	r3
900142ae:	1d28      	adds	r0, r5, #4
900142b0:	f7ff ffe9 	bl	90014286 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
900142b4:	6026      	str	r6, [r4, #0]
900142b6:	6833      	ldr	r3, [r6, #0]
900142b8:	4630      	mov	r0, r6
900142ba:	68db      	ldr	r3, [r3, #12]
900142bc:	4798      	blx	r3
900142be:	682b      	ldr	r3, [r5, #0]
900142c0:	4628      	mov	r0, r5
900142c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900142c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900142c8:	4718      	bx	r3
900142ca:	bf00      	nop
900142cc:	240262a0 	.word	0x240262a0

900142d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
900142d0:	2300      	movs	r3, #0
900142d2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
900142d6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
900142da:	461a      	mov	r2, r3
900142dc:	b5f0      	push	{r4, r5, r6, r7, lr}
900142de:	461c      	mov	r4, r3
900142e0:	461d      	mov	r5, r3
900142e2:	459c      	cmp	ip, r3
900142e4:	dd1a      	ble.n	9001431c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
900142e6:	18c6      	adds	r6, r0, r3
900142e8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
900142ec:	b16e      	cbz	r6, 9001430a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
900142ee:	429a      	cmp	r2, r3
900142f0:	d008      	beq.n	90014304 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
900142f2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
900142f6:	fa1f fe82 	uxth.w	lr, r2
900142fa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
900142fe:	1887      	adds	r7, r0, r2
90014300:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90014304:	3201      	adds	r2, #1
90014306:	3301      	adds	r3, #1
90014308:	e7eb      	b.n	900142e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
9001430a:	4299      	cmp	r1, r3
9001430c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90014310:	bfa8      	it	ge
90014312:	3501      	addge	r5, #1
90014314:	429e      	cmp	r6, r3
90014316:	bfc8      	it	gt
90014318:	3401      	addgt	r4, #1
9001431a:	e7f4      	b.n	90014306 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
9001431c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90014320:	1b49      	subs	r1, r1, r5
90014322:	1b1b      	subs	r3, r3, r4
90014324:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90014328:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
9001432c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90014330:	4293      	cmp	r3, r2
90014332:	dd03      	ble.n	9001433c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90014334:	3b01      	subs	r3, #1
90014336:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
9001433a:	e7f7      	b.n	9001432c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
9001433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90014340 <_ZN8touchgfx11Application15handleTickEventEv>:
90014340:	b570      	push	{r4, r5, r6, lr}
90014342:	4d16      	ldr	r5, [pc, #88]	; (9001439c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90014344:	4604      	mov	r4, r0
90014346:	6828      	ldr	r0, [r5, #0]
90014348:	b140      	cbz	r0, 9001435c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
9001434a:	7a03      	ldrb	r3, [r0, #8]
9001434c:	b933      	cbnz	r3, 9001435c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
9001434e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014352:	6803      	ldr	r3, [r0, #0]
90014354:	689b      	ldr	r3, [r3, #8]
90014356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001435a:	4718      	bx	r3
9001435c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90014360:	4e0f      	ldr	r6, [pc, #60]	; (900143a0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90014362:	b973      	cbnz	r3, 90014382 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014364:	b168      	cbz	r0, 90014382 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014366:	7a03      	ldrb	r3, [r0, #8]
90014368:	b15b      	cbz	r3, 90014382 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
9001436a:	6830      	ldr	r0, [r6, #0]
9001436c:	b110      	cbz	r0, 90014374 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
9001436e:	6803      	ldr	r3, [r0, #0]
90014370:	691b      	ldr	r3, [r3, #16]
90014372:	4798      	blx	r3
90014374:	6828      	ldr	r0, [r5, #0]
90014376:	6803      	ldr	r3, [r0, #0]
90014378:	68db      	ldr	r3, [r3, #12]
9001437a:	4798      	blx	r3
9001437c:	2301      	movs	r3, #1
9001437e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014382:	3404      	adds	r4, #4
90014384:	4620      	mov	r0, r4
90014386:	f7ff ff5f 	bl	90014248 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
9001438a:	4620      	mov	r0, r4
9001438c:	f7ff ffa0 	bl	900142d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90014390:	6830      	ldr	r0, [r6, #0]
90014392:	b110      	cbz	r0, 9001439a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90014394:	6803      	ldr	r3, [r0, #0]
90014396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014398:	e7dd      	b.n	90014356 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
9001439a:	bd70      	pop	{r4, r5, r6, pc}
9001439c:	240262a4 	.word	0x240262a4
900143a0:	240262a0 	.word	0x240262a0

900143a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
900143a4:	4603      	mov	r3, r0
900143a6:	f100 0140 	add.w	r1, r0, #64	; 0x40
900143aa:	2200      	movs	r2, #0
900143ac:	801a      	strh	r2, [r3, #0]
900143ae:	3308      	adds	r3, #8
900143b0:	f823 2c06 	strh.w	r2, [r3, #-6]
900143b4:	f823 2c04 	strh.w	r2, [r3, #-4]
900143b8:	f823 2c02 	strh.w	r2, [r3, #-2]
900143bc:	428b      	cmp	r3, r1
900143be:	d1f5      	bne.n	900143ac <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
900143c0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
900143c4:	4770      	bx	lr
	...

900143c8 <_ZN8touchgfx11ApplicationC1Ev>:
900143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900143ca:	4b1d      	ldr	r3, [pc, #116]	; (90014440 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
900143cc:	4606      	mov	r6, r0
900143ce:	4604      	mov	r4, r0
900143d0:	2500      	movs	r5, #0
900143d2:	f846 3b04 	str.w	r3, [r6], #4
900143d6:	22a8      	movs	r2, #168	; 0xa8
900143d8:	2100      	movs	r1, #0
900143da:	4630      	mov	r0, r6
900143dc:	f00e fff2 	bl	900233c4 <memset>
900143e0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
900143e4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900143e8:	4f16      	ldr	r7, [pc, #88]	; (90014444 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
900143ea:	f7ff ffdb 	bl	900143a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900143ee:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900143f2:	f7ff ffd7 	bl	900143a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900143f6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
900143fa:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
900143fe:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90014402:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90014406:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
9001440a:	490f      	ldr	r1, [pc, #60]	; (90014448 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
9001440c:	480f      	ldr	r0, [pc, #60]	; (9001444c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
9001440e:	f00e fc07 	bl	90022c20 <CRC_Lock>
90014412:	4b0f      	ldr	r3, [pc, #60]	; (90014450 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90014414:	b158      	cbz	r0, 9001442e <_ZN8touchgfx11ApplicationC1Ev+0x66>
90014416:	801d      	strh	r5, [r3, #0]
90014418:	2300      	movs	r3, #0
9001441a:	4a0e      	ldr	r2, [pc, #56]	; (90014454 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
9001441c:	4630      	mov	r0, r6
9001441e:	6013      	str	r3, [r2, #0]
90014420:	4a0d      	ldr	r2, [pc, #52]	; (90014458 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90014422:	603b      	str	r3, [r7, #0]
90014424:	6013      	str	r3, [r2, #0]
90014426:	f7ff ff2e 	bl	90014286 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
9001442a:	4620      	mov	r0, r4
9001442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001442e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90014432:	2002      	movs	r0, #2
90014434:	801a      	strh	r2, [r3, #0]
90014436:	6038      	str	r0, [r7, #0]
90014438:	f001 fa26 	bl	90015888 <_ZN8touchgfx6Screen4drawEv>
9001443c:	e7ec      	b.n	90014418 <_ZN8touchgfx11ApplicationC1Ev+0x50>
9001443e:	bf00      	nop
90014440:	90026cec 	.word	0x90026cec
90014444:	240262a0 	.word	0x240262a0
90014448:	b5e8b5cd 	.word	0xb5e8b5cd
9001444c:	f407a5c2 	.word	0xf407a5c2
90014450:	24000068 	.word	0x24000068
90014454:	240262b0 	.word	0x240262b0
90014458:	240262a4 	.word	0x240262a4

9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
9001445c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90014460:	3b01      	subs	r3, #1
90014462:	b29b      	uxth	r3, r3
90014464:	428b      	cmp	r3, r1
90014466:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
9001446a:	b510      	push	{r4, lr}
9001446c:	d908      	bls.n	90014480 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
9001446e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90014472:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90014476:	681a      	ldr	r2, [r3, #0]
90014478:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
9001447c:	685a      	ldr	r2, [r3, #4]
9001447e:	6062      	str	r2, [r4, #4]
90014480:	bd10      	pop	{r4, pc}
	...

90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90014484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014488:	b08f      	sub	sp, #60	; 0x3c
9001448a:	4b8f      	ldr	r3, [pc, #572]	; (900146c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
9001448c:	4683      	mov	fp, r0
9001448e:	ac0a      	add	r4, sp, #40	; 0x28
90014490:	e884 0006 	stmia.w	r4, {r1, r2}
90014494:	f9b3 2000 	ldrsh.w	r2, [r3]
90014498:	4620      	mov	r0, r4
9001449a:	4b8c      	ldr	r3, [pc, #560]	; (900146cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
9001449c:	f9b3 1000 	ldrsh.w	r1, [r3]
900144a0:	f7ff fe0f 	bl	900140c2 <_ZN8touchgfx4Rect10restrictToEss>
900144a4:	4620      	mov	r0, r4
900144a6:	f7fd f800 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
900144aa:	2800      	cmp	r0, #0
900144ac:	d16a      	bne.n	90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900144ae:	9403      	str	r4, [sp, #12]
900144b0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
900144b4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900144b8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
900144bc:	9301      	str	r3, [sp, #4]
900144be:	35a4      	adds	r5, #164	; 0xa4
900144c0:	b15c      	cbz	r4, 900144da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
900144c2:	4629      	mov	r1, r5
900144c4:	9803      	ldr	r0, [sp, #12]
900144c6:	f7ff fe4d 	bl	90014164 <_ZNK8touchgfx4Rect8includesERKS0_>
900144ca:	3c01      	subs	r4, #1
900144cc:	b118      	cbz	r0, 900144d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
900144ce:	b2a1      	uxth	r1, r4
900144d0:	9801      	ldr	r0, [sp, #4]
900144d2:	f7ff ffc3 	bl	9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900144d6:	3d08      	subs	r5, #8
900144d8:	e7f2      	b.n	900144c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
900144da:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
900144de:	f108 33ff 	add.w	r3, r8, #4294967295
900144e2:	f8cd 8010 	str.w	r8, [sp, #16]
900144e6:	9302      	str	r3, [sp, #8]
900144e8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
900144ec:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
900144f0:	9306      	str	r3, [sp, #24]
900144f2:	445c      	add	r4, fp
900144f4:	2500      	movs	r5, #0
900144f6:	4626      	mov	r6, r4
900144f8:	f8cd 8014 	str.w	r8, [sp, #20]
900144fc:	462f      	mov	r7, r5
900144fe:	9b05      	ldr	r3, [sp, #20]
90014500:	2b00      	cmp	r3, #0
90014502:	d073      	beq.n	900145ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90014504:	9903      	ldr	r1, [sp, #12]
90014506:	4630      	mov	r0, r6
90014508:	f7ff fdb9 	bl	9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>
9001450c:	b350      	cbz	r0, 90014564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
9001450e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90014512:	f9b6 c000 	ldrsh.w	ip, [r6]
90014516:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001451a:	45e6      	cmp	lr, ip
9001451c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90014520:	db33      	blt.n	9001458a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90014522:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90014526:	88b3      	ldrh	r3, [r6, #4]
90014528:	4472      	add	r2, lr
9001452a:	4463      	add	r3, ip
9001452c:	b212      	sxth	r2, r2
9001452e:	b21b      	sxth	r3, r3
90014530:	429a      	cmp	r2, r3
90014532:	dc2a      	bgt.n	9001458a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90014534:	fa1f f289 	uxth.w	r2, r9
90014538:	88f3      	ldrh	r3, [r6, #6]
9001453a:	45ca      	cmp	sl, r9
9001453c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90014540:	4413      	add	r3, r2
90014542:	fa1f fc8a 	uxth.w	ip, sl
90014546:	b29b      	uxth	r3, r3
90014548:	fa0f fe83 	sxth.w	lr, r3
9001454c:	db0f      	blt.n	9001456e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
9001454e:	eba3 030c 	sub.w	r3, r3, ip
90014552:	1ac9      	subs	r1, r1, r3
90014554:	b209      	sxth	r1, r1
90014556:	2900      	cmp	r1, #0
90014558:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001455c:	dd12      	ble.n	90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001455e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90014562:	4605      	mov	r5, r0
90014564:	9b05      	ldr	r3, [sp, #20]
90014566:	3e08      	subs	r6, #8
90014568:	3b01      	subs	r3, #1
9001456a:	9305      	str	r3, [sp, #20]
9001456c:	e7c7      	b.n	900144fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
9001456e:	4461      	add	r1, ip
90014570:	b209      	sxth	r1, r1
90014572:	4571      	cmp	r1, lr
90014574:	dc38      	bgt.n	900145e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014576:	eba2 020c 	sub.w	r2, r2, ip
9001457a:	b212      	sxth	r2, r2
9001457c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90014580:	2a00      	cmp	r2, #0
90014582:	dcee      	bgt.n	90014562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90014584:	b00f      	add	sp, #60	; 0x3c
90014586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001458a:	45ca      	cmp	sl, r9
9001458c:	db2c      	blt.n	900145e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001458e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90014592:	449a      	add	sl, r3
90014594:	88f3      	ldrh	r3, [r6, #6]
90014596:	4499      	add	r9, r3
90014598:	fa0f fa8a 	sxth.w	sl, sl
9001459c:	fa0f f989 	sxth.w	r9, r9
900145a0:	45ca      	cmp	sl, r9
900145a2:	dc21      	bgt.n	900145e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900145a4:	fa1f f28c 	uxth.w	r2, ip
900145a8:	88b3      	ldrh	r3, [r6, #4]
900145aa:	45e6      	cmp	lr, ip
900145ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
900145b0:	4413      	add	r3, r2
900145b2:	fa1f f98e 	uxth.w	r9, lr
900145b6:	b29b      	uxth	r3, r3
900145b8:	fa0f fa83 	sxth.w	sl, r3
900145bc:	db0a      	blt.n	900145d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
900145be:	eba3 0309 	sub.w	r3, r3, r9
900145c2:	1ac9      	subs	r1, r1, r3
900145c4:	b209      	sxth	r1, r1
900145c6:	2900      	cmp	r1, #0
900145c8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
900145cc:	ddda      	ble.n	90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900145ce:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
900145d2:	e7c6      	b.n	90014562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900145d4:	4449      	add	r1, r9
900145d6:	b209      	sxth	r1, r1
900145d8:	4551      	cmp	r1, sl
900145da:	dc05      	bgt.n	900145e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900145dc:	eba2 0209 	sub.w	r2, r2, r9
900145e0:	b212      	sxth	r2, r2
900145e2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
900145e6:	e7cb      	b.n	90014580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
900145e8:	4607      	mov	r7, r0
900145ea:	e7bb      	b.n	90014564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900145ec:	2d00      	cmp	r5, #0
900145ee:	d181      	bne.n	900144f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
900145f0:	2f00      	cmp	r7, #0
900145f2:	f000 81dd 	beq.w	900149b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900145f6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
900145fa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
900145fe:	b2b3      	uxth	r3, r6
90014600:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90014604:	b2b9      	uxth	r1, r7
90014606:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
9001460a:	441a      	add	r2, r3
9001460c:	448a      	add	sl, r1
9001460e:	9105      	str	r1, [sp, #20]
90014610:	b292      	uxth	r2, r2
90014612:	fa1f fa8a 	uxth.w	sl, sl
90014616:	fa0f f882 	sxth.w	r8, r2
9001461a:	fa0f f98a 	sxth.w	r9, sl
9001461e:	e9cd 2307 	strd	r2, r3, [sp, #28]
90014622:	9b04      	ldr	r3, [sp, #16]
90014624:	2b00      	cmp	r3, #0
90014626:	d053      	beq.n	900146d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90014628:	9903      	ldr	r1, [sp, #12]
9001462a:	4620      	mov	r0, r4
9001462c:	f7ff fd27 	bl	9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>
90014630:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90014634:	b1c0      	cbz	r0, 90014668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014636:	f9b4 e000 	ldrsh.w	lr, [r4]
9001463a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001463e:	4576      	cmp	r6, lr
90014640:	dc23      	bgt.n	9001468a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90014642:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014646:	44f4      	add	ip, lr
90014648:	fa0f fc8c 	sxth.w	ip, ip
9001464c:	45e0      	cmp	r8, ip
9001464e:	db1c      	blt.n	9001468a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90014650:	428f      	cmp	r7, r1
90014652:	fa1f fc81 	uxth.w	ip, r1
90014656:	88e1      	ldrh	r1, [r4, #6]
90014658:	dc0d      	bgt.n	90014676 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
9001465a:	ebaa 0c0c 	sub.w	ip, sl, ip
9001465e:	f8a4 9002 	strh.w	r9, [r4, #2]
90014662:	eba1 010c 	sub.w	r1, r1, ip
90014666:	80e1      	strh	r1, [r4, #6]
90014668:	4628      	mov	r0, r5
9001466a:	9904      	ldr	r1, [sp, #16]
9001466c:	3c08      	subs	r4, #8
9001466e:	4605      	mov	r5, r0
90014670:	3901      	subs	r1, #1
90014672:	9104      	str	r1, [sp, #16]
90014674:	e7d3      	b.n	9001461e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
90014676:	4461      	add	r1, ip
90014678:	b209      	sxth	r1, r1
9001467a:	4549      	cmp	r1, r9
9001467c:	dcf5      	bgt.n	9001466a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001467e:	9905      	ldr	r1, [sp, #20]
90014680:	eba1 0c0c 	sub.w	ip, r1, ip
90014684:	f8a4 c006 	strh.w	ip, [r4, #6]
90014688:	e7ee      	b.n	90014668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001468a:	428f      	cmp	r7, r1
9001468c:	dced      	bgt.n	9001466a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001468e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90014692:	4461      	add	r1, ip
90014694:	b209      	sxth	r1, r1
90014696:	4589      	cmp	r9, r1
90014698:	dbe7      	blt.n	9001466a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001469a:	4576      	cmp	r6, lr
9001469c:	fa1f fc8e 	uxth.w	ip, lr
900146a0:	88a1      	ldrh	r1, [r4, #4]
900146a2:	dc07      	bgt.n	900146b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
900146a4:	eba2 0c0c 	sub.w	ip, r2, ip
900146a8:	f8a4 8000 	strh.w	r8, [r4]
900146ac:	eba1 010c 	sub.w	r1, r1, ip
900146b0:	80a1      	strh	r1, [r4, #4]
900146b2:	e7d9      	b.n	90014668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900146b4:	4461      	add	r1, ip
900146b6:	b209      	sxth	r1, r1
900146b8:	4588      	cmp	r8, r1
900146ba:	dbd6      	blt.n	9001466a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900146bc:	eba3 0c0c 	sub.w	ip, r3, ip
900146c0:	f8a4 c004 	strh.w	ip, [r4, #4]
900146c4:	e7d0      	b.n	90014668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900146c6:	bf00      	nop
900146c8:	2402625a 	.word	0x2402625a
900146cc:	24026258 	.word	0x24026258
900146d0:	2d00      	cmp	r5, #0
900146d2:	f000 816d 	beq.w	900149b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900146d6:	9b06      	ldr	r3, [sp, #24]
900146d8:	445b      	add	r3, fp
900146da:	461c      	mov	r4, r3
900146dc:	9b02      	ldr	r3, [sp, #8]
900146de:	3301      	adds	r3, #1
900146e0:	f000 8166 	beq.w	900149b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900146e4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
900146e8:	9803      	ldr	r0, [sp, #12]
900146ea:	4629      	mov	r1, r5
900146ec:	f7ff fd3a 	bl	90014164 <_ZNK8touchgfx4Rect8includesERKS0_>
900146f0:	b120      	cbz	r0, 900146fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900146f2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900146f6:	9801      	ldr	r0, [sp, #4]
900146f8:	f7ff feb0 	bl	9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900146fc:	9903      	ldr	r1, [sp, #12]
900146fe:	4628      	mov	r0, r5
90014700:	f7ff fcbd 	bl	9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>
90014704:	2800      	cmp	r0, #0
90014706:	f000 809c 	beq.w	90014842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
9001470a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
9001470e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90014712:	fa1f f189 	uxth.w	r1, r9
90014716:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001471a:	9309      	str	r3, [sp, #36]	; 0x24
9001471c:	eb01 0c03 	add.w	ip, r1, r3
90014720:	b283      	uxth	r3, r0
90014722:	4548      	cmp	r0, r9
90014724:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
90014728:	fa1f fa8c 	uxth.w	sl, ip
9001472c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90014730:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90014734:	eb03 050c 	add.w	r5, r3, ip
90014738:	b2ad      	uxth	r5, r5
9001473a:	9505      	str	r5, [sp, #20]
9001473c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90014740:	9504      	str	r5, [sp, #16]
90014742:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
90014746:	f340 8099 	ble.w	9001487c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001474a:	1a5b      	subs	r3, r3, r1
9001474c:	4596      	cmp	lr, r2
9001474e:	fa0f f08a 	sxth.w	r0, sl
90014752:	b29b      	uxth	r3, r3
90014754:	b21e      	sxth	r6, r3
90014756:	dd2e      	ble.n	900147b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
90014758:	9f02      	ldr	r7, [sp, #8]
9001475a:	fa1f fe8e 	uxth.w	lr, lr
9001475e:	b292      	uxth	r2, r2
90014760:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90014764:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90014768:	9f04      	ldr	r7, [sp, #16]
9001476a:	ebae 0102 	sub.w	r1, lr, r2
9001476e:	44a6      	add	lr, r4
90014770:	1a3f      	subs	r7, r7, r0
90014772:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
90014776:	b289      	uxth	r1, r1
90014778:	4402      	add	r2, r0
9001477a:	fa0f fe8e 	sxth.w	lr, lr
9001477e:	b20d      	sxth	r5, r1
90014780:	b212      	sxth	r2, r2
90014782:	436f      	muls	r7, r5
90014784:	ebae 0202 	sub.w	r2, lr, r2
90014788:	4372      	muls	r2, r6
9001478a:	4297      	cmp	r7, r2
9001478c:	db09      	blt.n	900147a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
9001478e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90014792:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
90014796:	449c      	add	ip, r3
90014798:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001479c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900147a0:	e686      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900147a2:	4421      	add	r1, r4
900147a4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
900147a8:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
900147ac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900147b0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900147b4:	e67c      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900147b6:	9f04      	ldr	r7, [sp, #16]
900147b8:	42b8      	cmp	r0, r7
900147ba:	da27      	bge.n	9001480c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
900147bc:	9902      	ldr	r1, [sp, #8]
900147be:	1a3f      	subs	r7, r7, r0
900147c0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
900147c4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
900147c8:	eb05 010e 	add.w	r1, r5, lr
900147cc:	fa1f f881 	uxth.w	r8, r1
900147d0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
900147d4:	4411      	add	r1, r2
900147d6:	fa0f f988 	sxth.w	r9, r8
900147da:	eba2 020e 	sub.w	r2, r2, lr
900147de:	eba1 0108 	sub.w	r1, r1, r8
900147e2:	4372      	muls	r2, r6
900147e4:	b289      	uxth	r1, r1
900147e6:	fa0f f881 	sxth.w	r8, r1
900147ea:	fb08 f707 	mul.w	r7, r8, r7
900147ee:	42ba      	cmp	r2, r7
900147f0:	dc06      	bgt.n	90014800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
900147f2:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
900147f6:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
900147fa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
900147fe:	e7ca      	b.n	90014796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90014800:	4429      	add	r1, r5
90014802:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
90014806:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
9001480a:	e651      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001480c:	9805      	ldr	r0, [sp, #20]
9001480e:	2d06      	cmp	r5, #6
90014810:	ebaa 0000 	sub.w	r0, sl, r0
90014814:	b280      	uxth	r0, r0
90014816:	fa0f fe80 	sxth.w	lr, r0
9001481a:	d817      	bhi.n	9001484c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
9001481c:	9b04      	ldr	r3, [sp, #16]
9001481e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90014822:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90014826:	1c6b      	adds	r3, r5, #1
90014828:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
9001482c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90014830:	9b01      	ldr	r3, [sp, #4]
90014832:	9801      	ldr	r0, [sp, #4]
90014834:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90014838:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
9001483c:	805a      	strh	r2, [r3, #2]
9001483e:	809e      	strh	r6, [r3, #4]
90014840:	80d9      	strh	r1, [r3, #6]
90014842:	9b02      	ldr	r3, [sp, #8]
90014844:	3c08      	subs	r4, #8
90014846:	3b01      	subs	r3, #1
90014848:	9302      	str	r3, [sp, #8]
9001484a:	e747      	b.n	900146dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
9001484c:	9a02      	ldr	r2, [sp, #8]
9001484e:	45b6      	cmp	lr, r6
90014850:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90014854:	db0d      	blt.n	90014872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90014856:	449c      	add	ip, r3
90014858:	445a      	add	r2, fp
9001485a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
9001485e:	fa1f fc8c 	uxth.w	ip, ip
90014862:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
90014866:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
9001486a:	448c      	add	ip, r1
9001486c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90014870:	e61e      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014872:	445a      	add	r2, fp
90014874:	4484      	add	ip, r0
90014876:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
9001487a:	e78f      	b.n	9001479c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001487c:	fa1f f18e 	uxth.w	r1, lr
90014880:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90014884:	b293      	uxth	r3, r2
90014886:	4596      	cmp	lr, r2
90014888:	eb01 0806 	add.w	r8, r1, r6
9001488c:	9306      	str	r3, [sp, #24]
9001488e:	fa1f f888 	uxth.w	r8, r8
90014892:	9f06      	ldr	r7, [sp, #24]
90014894:	fa0f f388 	sxth.w	r3, r8
90014898:	9307      	str	r3, [sp, #28]
9001489a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
9001489e:	443b      	add	r3, r7
900148a0:	b29b      	uxth	r3, r3
900148a2:	9308      	str	r3, [sp, #32]
900148a4:	da24      	bge.n	900148f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
900148a6:	9905      	ldr	r1, [sp, #20]
900148a8:	eba3 0308 	sub.w	r3, r3, r8
900148ac:	eba2 020e 	sub.w	r2, r2, lr
900148b0:	eba9 0000 	sub.w	r0, r9, r0
900148b4:	ebaa 0401 	sub.w	r4, sl, r1
900148b8:	b29b      	uxth	r3, r3
900148ba:	b2a4      	uxth	r4, r4
900148bc:	b219      	sxth	r1, r3
900148be:	b225      	sxth	r5, r4
900148c0:	4348      	muls	r0, r1
900148c2:	436a      	muls	r2, r5
900148c4:	4282      	cmp	r2, r0
900148c6:	9a02      	ldr	r2, [sp, #8]
900148c8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900148cc:	445a      	add	r2, fp
900148ce:	dc06      	bgt.n	900148de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
900148d0:	9b07      	ldr	r3, [sp, #28]
900148d2:	44a4      	add	ip, r4
900148d4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
900148d8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
900148dc:	e75e      	b.n	9001479c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900148de:	9904      	ldr	r1, [sp, #16]
900148e0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
900148e4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
900148e8:	4433      	add	r3, r6
900148ea:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
900148ee:	e5df      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900148f0:	9f06      	ldr	r7, [sp, #24]
900148f2:	9b04      	ldr	r3, [sp, #16]
900148f4:	1bc9      	subs	r1, r1, r7
900148f6:	fa0f f78a 	sxth.w	r7, sl
900148fa:	b289      	uxth	r1, r1
900148fc:	429f      	cmp	r7, r3
900148fe:	fa0f fe81 	sxth.w	lr, r1
90014902:	dd23      	ble.n	9001494c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90014904:	9a05      	ldr	r2, [sp, #20]
90014906:	eba9 0000 	sub.w	r0, r9, r0
9001490a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
9001490e:	ebaa 0202 	sub.w	r2, sl, r2
90014912:	9d07      	ldr	r5, [sp, #28]
90014914:	fb0e f000 	mul.w	r0, lr, r0
90014918:	b292      	uxth	r2, r2
9001491a:	eba5 0a03 	sub.w	sl, r5, r3
9001491e:	9b02      	ldr	r3, [sp, #8]
90014920:	b214      	sxth	r4, r2
90014922:	00db      	lsls	r3, r3, #3
90014924:	fb04 fa0a 	mul.w	sl, r4, sl
90014928:	445b      	add	r3, fp
9001492a:	4550      	cmp	r0, sl
9001492c:	db03      	blt.n	90014936 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
9001492e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90014932:	4494      	add	ip, r2
90014934:	e732      	b.n	9001479c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90014936:	9a04      	ldr	r2, [sp, #16]
90014938:	4431      	add	r1, r6
9001493a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
9001493e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90014942:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
90014946:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001494a:	e75c      	b.n	90014806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
9001494c:	9b08      	ldr	r3, [sp, #32]
9001494e:	2d06      	cmp	r5, #6
90014950:	eba3 0308 	sub.w	r3, r3, r8
90014954:	b29b      	uxth	r3, r3
90014956:	b218      	sxth	r0, r3
90014958:	d813      	bhi.n	90014982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
9001495a:	9b07      	ldr	r3, [sp, #28]
9001495c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90014960:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90014964:	1c6b      	adds	r3, r5, #1
90014966:	9901      	ldr	r1, [sp, #4]
90014968:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
9001496c:	9b01      	ldr	r3, [sp, #4]
9001496e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90014972:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90014976:	805a      	strh	r2, [r3, #2]
90014978:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001497a:	f8a3 e006 	strh.w	lr, [r3, #6]
9001497e:	809a      	strh	r2, [r3, #4]
90014980:	e75f      	b.n	90014842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90014982:	9c02      	ldr	r4, [sp, #8]
90014984:	4570      	cmp	r0, lr
90014986:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001498a:	db0d      	blt.n	900149a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
9001498c:	4431      	add	r1, r6
9001498e:	9b06      	ldr	r3, [sp, #24]
90014990:	445c      	add	r4, fp
90014992:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90014996:	b289      	uxth	r1, r1
90014998:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
9001499c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900149a0:	4419      	add	r1, r3
900149a2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
900149a6:	e583      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900149a8:	445c      	add	r4, fp
900149aa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
900149ae:	e79b      	b.n	900148e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
900149b0:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
900149b4:	2e07      	cmp	r6, #7
900149b6:	ea4f 04c6 	mov.w	r4, r6, lsl #3
900149ba:	d812      	bhi.n	900149e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
900149bc:	1c75      	adds	r5, r6, #1
900149be:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900149c2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
900149c6:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
900149ca:	9d01      	ldr	r5, [sp, #4]
900149cc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
900149d0:	442c      	add	r4, r5
900149d2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
900149d6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
900149da:	8061      	strh	r1, [r4, #2]
900149dc:	80a2      	strh	r2, [r4, #4]
900149de:	80e3      	strh	r3, [r4, #6]
900149e0:	e5d0      	b.n	90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900149e2:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900149e6:	3e01      	subs	r6, #1
900149e8:	445c      	add	r4, fp
900149ea:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
900149ee:	f04f 37ff 	mov.w	r7, #4294967295
900149f2:	2500      	movs	r5, #0
900149f4:	9305      	str	r3, [sp, #20]
900149f6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900149fa:	1e72      	subs	r2, r6, #1
900149fc:	9302      	str	r3, [sp, #8]
900149fe:	4691      	mov	r9, r2
90014a00:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90014a04:	9304      	str	r3, [sp, #16]
90014a06:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
90014a0a:	f1b9 3fff 	cmp.w	r9, #4294967295
90014a0e:	6818      	ldr	r0, [r3, #0]
90014a10:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90014a14:	9207      	str	r2, [sp, #28]
90014a16:	bf16      	itet	ne
90014a18:	9905      	ldrne	r1, [sp, #20]
90014a1a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90014a1e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90014a22:	9306      	str	r3, [sp, #24]
90014a24:	f8be 1006 	ldrh.w	r1, [lr, #6]
90014a28:	f8be 8004 	ldrh.w	r8, [lr, #4]
90014a2c:	fb18 f801 	smulbb	r8, r8, r1
90014a30:	6859      	ldr	r1, [r3, #4]
90014a32:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90014a36:	4671      	mov	r1, lr
90014a38:	a80c      	add	r0, sp, #48	; 0x30
90014a3a:	f7ff fbb9 	bl	900141b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a3e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90014a42:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90014a46:	f04f 0c08 	mov.w	ip, #8
90014a4a:	9b04      	ldr	r3, [sp, #16]
90014a4c:	9a02      	ldr	r2, [sp, #8]
90014a4e:	fb10 f001 	smulbb	r0, r0, r1
90014a52:	fb02 8803 	mla	r8, r2, r3, r8
90014a56:	eba0 0108 	sub.w	r1, r0, r8
90014a5a:	fb90 f0fc 	sdiv	r0, r0, ip
90014a5e:	4288      	cmp	r0, r1
90014a60:	dc20      	bgt.n	90014aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90014a62:	4551      	cmp	r1, sl
90014a64:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90014a68:	da03      	bge.n	90014a72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
90014a6a:	b1d9      	cbz	r1, 90014aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90014a6c:	468a      	mov	sl, r1
90014a6e:	464f      	mov	r7, r9
90014a70:	4635      	mov	r5, r6
90014a72:	f109 39ff 	add.w	r9, r9, #4294967295
90014a76:	f119 0f02 	cmn.w	r9, #2
90014a7a:	d1c6      	bne.n	90014a0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90014a7c:	4616      	mov	r6, r2
90014a7e:	3201      	adds	r2, #1
90014a80:	f1a4 0408 	sub.w	r4, r4, #8
90014a84:	d1b7      	bne.n	900149f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90014a86:	9b01      	ldr	r3, [sp, #4]
90014a88:	b2ac      	uxth	r4, r5
90014a8a:	00ed      	lsls	r5, r5, #3
90014a8c:	1958      	adds	r0, r3, r5
90014a8e:	1c7b      	adds	r3, r7, #1
90014a90:	d10b      	bne.n	90014aaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90014a92:	4601      	mov	r1, r0
90014a94:	9803      	ldr	r0, [sp, #12]
90014a96:	f7ff fb8b 	bl	900141b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014a9a:	4621      	mov	r1, r4
90014a9c:	9801      	ldr	r0, [sp, #4]
90014a9e:	f7ff fcdd 	bl	9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014aa2:	e505      	b.n	900144b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014aa4:	464f      	mov	r7, r9
90014aa6:	4635      	mov	r5, r6
90014aa8:	e7ed      	b.n	90014a86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
90014aaa:	9b01      	ldr	r3, [sp, #4]
90014aac:	00ff      	lsls	r7, r7, #3
90014aae:	445d      	add	r5, fp
90014ab0:	19d9      	adds	r1, r3, r7
90014ab2:	445f      	add	r7, fp
90014ab4:	f7ff fb7c 	bl	900141b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014ab8:	9b03      	ldr	r3, [sp, #12]
90014aba:	cb03      	ldmia	r3!, {r0, r1}
90014abc:	9b03      	ldr	r3, [sp, #12]
90014abe:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90014ac2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90014ac6:	f855 0fac 	ldr.w	r0, [r5, #172]!
90014aca:	6869      	ldr	r1, [r5, #4]
90014acc:	c303      	stmia	r3!, {r0, r1}
90014ace:	e7e4      	b.n	90014a9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90014ad0 <_ZN8touchgfx11Application10invalidateEv>:
90014ad0:	4b09      	ldr	r3, [pc, #36]	; (90014af8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
90014ad2:	b082      	sub	sp, #8
90014ad4:	2100      	movs	r1, #0
90014ad6:	f9b3 2000 	ldrsh.w	r2, [r3]
90014ada:	4b08      	ldr	r3, [pc, #32]	; (90014afc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90014adc:	9100      	str	r1, [sp, #0]
90014ade:	f9b3 3000 	ldrsh.w	r3, [r3]
90014ae2:	f8ad 2004 	strh.w	r2, [sp, #4]
90014ae6:	f8ad 3006 	strh.w	r3, [sp, #6]
90014aea:	ab02      	add	r3, sp, #8
90014aec:	e913 0006 	ldmdb	r3, {r1, r2}
90014af0:	b002      	add	sp, #8
90014af2:	f7ff bcc7 	b.w	90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014af6:	bf00      	nop
90014af8:	24026258 	.word	0x24026258
90014afc:	2402625a 	.word	0x2402625a

90014b00 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014b04:	f500 7698 	add.w	r6, r0, #304	; 0x130
90014b08:	b09b      	sub	sp, #108	; 0x6c
90014b0a:	4604      	mov	r4, r0
90014b0c:	4630      	mov	r0, r6
90014b0e:	f7fc fccc 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014b12:	4605      	mov	r5, r0
90014b14:	b940      	cbnz	r0, 90014b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90014b16:	4620      	mov	r0, r4
90014b18:	e896 0006 	ldmia.w	r6, {r1, r2}
90014b1c:	f7ff fcb2 	bl	90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014b20:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90014b24:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90014b28:	4bc8      	ldr	r3, [pc, #800]	; (90014e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90014b2a:	681b      	ldr	r3, [r3, #0]
90014b2c:	2b00      	cmp	r3, #0
90014b2e:	d03e      	beq.n	90014bae <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90014b30:	4dc7      	ldr	r5, [pc, #796]	; (90014e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90014b32:	4628      	mov	r0, r5
90014b34:	f7fc fcb9 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014b38:	4606      	mov	r6, r0
90014b3a:	2800      	cmp	r0, #0
90014b3c:	d137      	bne.n	90014bae <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90014b3e:	4628      	mov	r0, r5
90014b40:	f7ff f9e0 	bl	90013f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014b44:	6829      	ldr	r1, [r5, #0]
90014b46:	686a      	ldr	r2, [r5, #4]
90014b48:	4620      	mov	r0, r4
90014b4a:	f7ff fc9b 	bl	90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014b4e:	802e      	strh	r6, [r5, #0]
90014b50:	806e      	strh	r6, [r5, #2]
90014b52:	80ae      	strh	r6, [r5, #4]
90014b54:	80ee      	strh	r6, [r5, #6]
90014b56:	ae09      	add	r6, sp, #36	; 0x24
90014b58:	4630      	mov	r0, r6
90014b5a:	f7ff fc23 	bl	900143a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90014b5e:	4abd      	ldr	r2, [pc, #756]	; (90014e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90014b60:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90014b64:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90014b68:	8815      	ldrh	r5, [r2, #0]
90014b6a:	9202      	str	r2, [sp, #8]
90014b6c:	462b      	mov	r3, r5
90014b6e:	429f      	cmp	r7, r3
90014b70:	d924      	bls.n	90014bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90014b72:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90014b76:	2907      	cmp	r1, #7
90014b78:	d816      	bhi.n	90014ba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90014b7a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90014b7e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90014b82:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90014b86:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90014b8a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90014b8e:	1c4a      	adds	r2, r1, #1
90014b90:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90014b94:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90014b98:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90014b9c:	f8a2 9002 	strh.w	r9, [r2, #2]
90014ba0:	f8a2 e004 	strh.w	lr, [r2, #4]
90014ba4:	f8a2 c006 	strh.w	ip, [r2, #6]
90014ba8:	3301      	adds	r3, #1
90014baa:	b29b      	uxth	r3, r3
90014bac:	e7df      	b.n	90014b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90014bae:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014bb2:	2b00      	cmp	r3, #0
90014bb4:	d1cf      	bne.n	90014b56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90014bb6:	b01b      	add	sp, #108	; 0x6c
90014bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014bbc:	462f      	mov	r7, r5
90014bbe:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90014bc2:	42bb      	cmp	r3, r7
90014bc4:	d90b      	bls.n	90014bde <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90014bc6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90014bca:	3701      	adds	r7, #1
90014bcc:	4620      	mov	r0, r4
90014bce:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90014bd2:	b2bf      	uxth	r7, r7
90014bd4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90014bd8:	f7ff fc54 	bl	90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014bdc:	e7ef      	b.n	90014bbe <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90014bde:	4a9e      	ldr	r2, [pc, #632]	; (90014e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90014be0:	6813      	ldr	r3, [r2, #0]
90014be2:	4690      	mov	r8, r2
90014be4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90014be8:	2b01      	cmp	r3, #1
90014bea:	f040 80e4 	bne.w	90014db6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90014bee:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90014bf2:	4629      	mov	r1, r5
90014bf4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90014bf8:	2500      	movs	r5, #0
90014bfa:	33ae      	adds	r3, #174	; 0xae
90014bfc:	428f      	cmp	r7, r1
90014bfe:	f103 0308 	add.w	r3, r3, #8
90014c02:	dd0a      	ble.n	90014c1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90014c04:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90014c08:	3101      	adds	r1, #1
90014c0a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90014c0e:	4402      	add	r2, r0
90014c10:	b212      	sxth	r2, r2
90014c12:	4295      	cmp	r5, r2
90014c14:	bfb8      	it	lt
90014c16:	4615      	movlt	r5, r2
90014c18:	e7f0      	b.n	90014bfc <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90014c1a:	4b90      	ldr	r3, [pc, #576]	; (90014e5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90014c1c:	f8df b238 	ldr.w	fp, [pc, #568]	; 90014e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90014c20:	881b      	ldrh	r3, [r3, #0]
90014c22:	46d8      	mov	r8, fp
90014c24:	2b0f      	cmp	r3, #15
90014c26:	bf8c      	ite	hi
90014c28:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90014c2c:	f04f 0a01 	movls.w	sl, #1
90014c30:	2300      	movs	r3, #0
90014c32:	e9cd 3305 	strd	r3, r3, [sp, #20]
90014c36:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90014c3a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90014c3e:	4438      	add	r0, r7
90014c40:	b207      	sxth	r7, r0
90014c42:	f8db 0000 	ldr.w	r0, [fp]
90014c46:	42bd      	cmp	r5, r7
90014c48:	6803      	ldr	r3, [r0, #0]
90014c4a:	f340 8084 	ble.w	90014d56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90014c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90014c52:	4798      	blx	r3
90014c54:	eb07 030a 	add.w	r3, r7, sl
90014c58:	4298      	cmp	r0, r3
90014c5a:	da07      	bge.n	90014c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014c5c:	4285      	cmp	r5, r0
90014c5e:	dd05      	ble.n	90014c6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014c60:	4287      	cmp	r7, r0
90014c62:	dd6d      	ble.n	90014d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014c64:	2f00      	cmp	r7, #0
90014c66:	dd6b      	ble.n	90014d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014c68:	4628      	mov	r0, r5
90014c6a:	e004      	b.n	90014c76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90014c6c:	4287      	cmp	r7, r0
90014c6e:	dcfb      	bgt.n	90014c68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90014c70:	42a8      	cmp	r0, r5
90014c72:	bfa8      	it	ge
90014c74:	4628      	movge	r0, r5
90014c76:	4b7a      	ldr	r3, [pc, #488]	; (90014e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90014c78:	1bc0      	subs	r0, r0, r7
90014c7a:	2200      	movs	r2, #0
90014c7c:	f8ad 7016 	strh.w	r7, [sp, #22]
90014c80:	f9b3 3000 	ldrsh.w	r3, [r3]
90014c84:	f8ad 2014 	strh.w	r2, [sp, #20]
90014c88:	f8ad 3018 	strh.w	r3, [sp, #24]
90014c8c:	9b02      	ldr	r3, [sp, #8]
90014c8e:	f8ad 001a 	strh.w	r0, [sp, #26]
90014c92:	881f      	ldrh	r7, [r3, #0]
90014c94:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014c98:	42bb      	cmp	r3, r7
90014c9a:	d9cc      	bls.n	90014c36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014c9c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90014ca0:	ab07      	add	r3, sp, #28
90014ca2:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014ca6:	6851      	ldr	r1, [r2, #4]
90014ca8:	c303      	stmia	r3!, {r0, r1}
90014caa:	a905      	add	r1, sp, #20
90014cac:	a807      	add	r0, sp, #28
90014cae:	f7ff f9e6 	bl	9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>
90014cb2:	2800      	cmp	r0, #0
90014cb4:	d04c      	beq.n	90014d50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90014cb6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90014cba:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90014cbe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90014cc2:	4686      	mov	lr, r0
90014cc4:	4290      	cmp	r0, r2
90014cc6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90014cca:	4448      	add	r0, r9
90014ccc:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90014cd0:	bfb8      	it	lt
90014cd2:	4696      	movlt	lr, r2
90014cd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014cd8:	444a      	add	r2, r9
90014cda:	b280      	uxth	r0, r0
90014cdc:	4299      	cmp	r1, r3
90014cde:	468c      	mov	ip, r1
90014ce0:	b292      	uxth	r2, r2
90014ce2:	9303      	str	r3, [sp, #12]
90014ce4:	bfb8      	it	lt
90014ce6:	469c      	movlt	ip, r3
90014ce8:	b203      	sxth	r3, r0
90014cea:	fa0f f982 	sxth.w	r9, r2
90014cee:	f8ad e01c 	strh.w	lr, [sp, #28]
90014cf2:	f8ad c01e 	strh.w	ip, [sp, #30]
90014cf6:	454b      	cmp	r3, r9
90014cf8:	bfb8      	it	lt
90014cfa:	4602      	movlt	r2, r0
90014cfc:	9b03      	ldr	r3, [sp, #12]
90014cfe:	eba2 020e 	sub.w	r2, r2, lr
90014d02:	f8ad 2020 	strh.w	r2, [sp, #32]
90014d06:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90014d0a:	4411      	add	r1, r2
90014d0c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90014d10:	4413      	add	r3, r2
90014d12:	b289      	uxth	r1, r1
90014d14:	b29b      	uxth	r3, r3
90014d16:	b208      	sxth	r0, r1
90014d18:	b21a      	sxth	r2, r3
90014d1a:	4290      	cmp	r0, r2
90014d1c:	bfb8      	it	lt
90014d1e:	460b      	movlt	r3, r1
90014d20:	eba3 030c 	sub.w	r3, r3, ip
90014d24:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90014d28:	a807      	add	r0, sp, #28
90014d2a:	f7fc fbbe 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014d2e:	b920      	cbnz	r0, 90014d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90014d30:	6823      	ldr	r3, [r4, #0]
90014d32:	a907      	add	r1, sp, #28
90014d34:	4620      	mov	r0, r4
90014d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014d38:	4798      	blx	r3
90014d3a:	3701      	adds	r7, #1
90014d3c:	b2bf      	uxth	r7, r7
90014d3e:	e7a9      	b.n	90014c94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90014d40:	f8d8 0000 	ldr.w	r0, [r8]
90014d44:	2101      	movs	r1, #1
90014d46:	6803      	ldr	r3, [r0, #0]
90014d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90014d4c:	4798      	blx	r3
90014d4e:	e772      	b.n	90014c36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014d50:	e9cd 0007 	strd	r0, r0, [sp, #28]
90014d54:	e7e8      	b.n	90014d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90014d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014d58:	4798      	blx	r3
90014d5a:	4b42      	ldr	r3, [pc, #264]	; (90014e64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90014d5c:	781b      	ldrb	r3, [r3, #0]
90014d5e:	2b00      	cmp	r3, #0
90014d60:	f43f af29 	beq.w	90014bb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014d64:	2300      	movs	r3, #0
90014d66:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90014d6a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90014d6e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90014d72:	9b02      	ldr	r3, [sp, #8]
90014d74:	881b      	ldrh	r3, [r3, #0]
90014d76:	429d      	cmp	r5, r3
90014d78:	f67f af1d 	bls.w	90014bb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014d7c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90014d80:	2907      	cmp	r1, #7
90014d82:	d815      	bhi.n	90014db0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90014d84:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90014d88:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90014d8c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90014d90:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90014d94:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90014d98:	1c4a      	adds	r2, r1, #1
90014d9a:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90014d9e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90014da2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90014da6:	f8a2 e002 	strh.w	lr, [r2, #2]
90014daa:	f8a2 c004 	strh.w	ip, [r2, #4]
90014dae:	80d7      	strh	r7, [r2, #6]
90014db0:	3301      	adds	r3, #1
90014db2:	b29b      	uxth	r3, r3
90014db4:	e7df      	b.n	90014d76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90014db6:	2b02      	cmp	r3, #2
90014db8:	f040 8135 	bne.w	90015026 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90014dbc:	4b2a      	ldr	r3, [pc, #168]	; (90014e68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90014dbe:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90014dc2:	781b      	ldrb	r3, [r3, #0]
90014dc4:	2b01      	cmp	r3, #1
90014dc6:	f000 809c 	beq.w	90014f02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014dca:	9b02      	ldr	r3, [sp, #8]
90014dcc:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90014dd0:	f8b3 b000 	ldrh.w	fp, [r3]
90014dd4:	f10b 0b01 	add.w	fp, fp, #1
90014dd8:	fa1f fb8b 	uxth.w	fp, fp
90014ddc:	2a00      	cmp	r2, #0
90014dde:	d0bc      	beq.n	90014d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014de0:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90014de4:	4659      	mov	r1, fp
90014de6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90014dea:	f04f 0800 	mov.w	r8, #0
90014dee:	441d      	add	r5, r3
90014df0:	b22d      	sxth	r5, r5
90014df2:	b28b      	uxth	r3, r1
90014df4:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90014df8:	429a      	cmp	r2, r3
90014dfa:	f240 80c0 	bls.w	90014f7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90014dfe:	4427      	add	r7, r4
90014e00:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90014e04:	4608      	mov	r0, r1
90014e06:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90014e0a:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90014e0e:	4563      	cmp	r3, ip
90014e10:	f340 80a2 	ble.w	90014f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90014e14:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90014e18:	4465      	add	r5, ip
90014e1a:	b22d      	sxth	r5, r5
90014e1c:	429d      	cmp	r5, r3
90014e1e:	bfa8      	it	ge
90014e20:	461d      	movge	r5, r3
90014e22:	3101      	adds	r1, #1
90014e24:	4680      	mov	r8, r0
90014e26:	e7e4      	b.n	90014df2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90014e28:	d10b      	bne.n	90014e42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90014e2a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90014e2e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90014e32:	458c      	cmp	ip, r1
90014e34:	bfb4      	ite	lt
90014e36:	469c      	movlt	ip, r3
90014e38:	46bc      	movge	ip, r7
90014e3a:	4572      	cmp	r2, lr
90014e3c:	bfb8      	it	lt
90014e3e:	4672      	movlt	r2, lr
90014e40:	e087      	b.n	90014f52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014e42:	428a      	cmp	r2, r1
90014e44:	46bc      	mov	ip, r7
90014e46:	bfb8      	it	lt
90014e48:	460a      	movlt	r2, r1
90014e4a:	e082      	b.n	90014f52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014e4c:	2402629c 	.word	0x2402629c
90014e50:	240262a8 	.word	0x240262a8
90014e54:	24000068 	.word	0x24000068
90014e58:	24026264 	.word	0x24026264
90014e5c:	2402625a 	.word	0x2402625a
90014e60:	24026258 	.word	0x24026258
90014e64:	24026262 	.word	0x24026262
90014e68:	2402625c 	.word	0x2402625c
90014e6c:	1961      	adds	r1, r4, r5
90014e6e:	ab07      	add	r3, sp, #28
90014e70:	f851 0fac 	ldr.w	r0, [r1, #172]!
90014e74:	6849      	ldr	r1, [r1, #4]
90014e76:	c303      	stmia	r3!, {r0, r1}
90014e78:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90014e7c:	a807      	add	r0, sp, #28
90014e7e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014e82:	2b13      	cmp	r3, #19
90014e84:	440b      	add	r3, r1
90014e86:	bfd8      	it	le
90014e88:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90014e8c:	1a9b      	subs	r3, r3, r2
90014e8e:	f8ad 201c 	strh.w	r2, [sp, #28]
90014e92:	f8ad 3020 	strh.w	r3, [sp, #32]
90014e96:	f7ff f84f 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90014e9a:	a807      	add	r0, sp, #28
90014e9c:	f7fc fb05 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014ea0:	bb78      	cbnz	r0, 90014f02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014ea2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90014ea6:	4425      	add	r5, r4
90014ea8:	f8d8 0000 	ldr.w	r0, [r8]
90014eac:	f1bc 0f14 	cmp.w	ip, #20
90014eb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90014eb4:	f8d0 e000 	ldr.w	lr, [r0]
90014eb8:	bfa8      	it	ge
90014eba:	f04f 0c14 	movge.w	ip, #20
90014ebe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90014ec2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014ec6:	fa1f fc8c 	uxth.w	ip, ip
90014eca:	f8cd c000 	str.w	ip, [sp]
90014ece:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90014ed2:	47d0      	blx	sl
90014ed4:	4682      	mov	sl, r0
90014ed6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014eda:	a807      	add	r0, sp, #28
90014edc:	f7ff f812 	bl	90013f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014ee0:	6823      	ldr	r3, [r4, #0]
90014ee2:	4620      	mov	r0, r4
90014ee4:	a907      	add	r1, sp, #28
90014ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014ee8:	4798      	blx	r3
90014eea:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90014eee:	eba0 000a 	sub.w	r0, r0, sl
90014ef2:	b200      	sxth	r0, r0
90014ef4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90014ef8:	b918      	cbnz	r0, 90014f02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014efa:	b2b9      	uxth	r1, r7
90014efc:	4648      	mov	r0, r9
90014efe:	f7ff faad 	bl	9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014f02:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90014f06:	f1bb 0f00 	cmp.w	fp, #0
90014f0a:	f43f af26 	beq.w	90014d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014f0e:	9b02      	ldr	r3, [sp, #8]
90014f10:	2700      	movs	r7, #0
90014f12:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90014f16:	881b      	ldrh	r3, [r3, #0]
90014f18:	3301      	adds	r3, #1
90014f1a:	b29b      	uxth	r3, r3
90014f1c:	b299      	uxth	r1, r3
90014f1e:	00fd      	lsls	r5, r7, #3
90014f20:	458b      	cmp	fp, r1
90014f22:	d9a3      	bls.n	90014e6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90014f24:	4425      	add	r5, r4
90014f26:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90014f2a:	469c      	mov	ip, r3
90014f2c:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90014f30:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90014f34:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90014f38:	4408      	add	r0, r1
90014f3a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90014f3e:	4471      	add	r1, lr
90014f40:	b200      	sxth	r0, r0
90014f42:	b209      	sxth	r1, r1
90014f44:	4288      	cmp	r0, r1
90014f46:	f6bf af6f 	bge.w	90014e28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90014f4a:	4586      	cmp	lr, r0
90014f4c:	4672      	mov	r2, lr
90014f4e:	bfb8      	it	lt
90014f50:	4602      	movlt	r2, r0
90014f52:	3301      	adds	r3, #1
90014f54:	4667      	mov	r7, ip
90014f56:	e7e1      	b.n	90014f1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90014f58:	d10c      	bne.n	90014f74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90014f5a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90014f5e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90014f62:	4287      	cmp	r7, r0
90014f64:	bfb4      	ite	lt
90014f66:	4608      	movlt	r0, r1
90014f68:	4640      	movge	r0, r8
90014f6a:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90014f6e:	443b      	add	r3, r7
90014f70:	b21b      	sxth	r3, r3
90014f72:	e753      	b.n	90014e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90014f74:	4565      	cmp	r5, ip
90014f76:	4640      	mov	r0, r8
90014f78:	bfa8      	it	ge
90014f7a:	4665      	movge	r5, ip
90014f7c:	e751      	b.n	90014e22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90014f7e:	eb09 0007 	add.w	r0, r9, r7
90014f82:	4427      	add	r7, r4
90014f84:	9203      	str	r2, [sp, #12]
90014f86:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90014f8a:	f1ba 0f13 	cmp.w	sl, #19
90014f8e:	bfde      	ittt	le
90014f90:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90014f94:	4455      	addle	r5, sl
90014f96:	b22d      	sxthle	r5, r5
90014f98:	f7fc fa87 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90014f9c:	9a03      	ldr	r2, [sp, #12]
90014f9e:	2800      	cmp	r0, #0
90014fa0:	f47f af1c 	bne.w	90014ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90014fa4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90014fa8:	fa1f fa8a 	uxth.w	sl, sl
90014fac:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014fb0:	1aad      	subs	r5, r5, r2
90014fb2:	4829      	ldr	r0, [pc, #164]	; (90015058 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90014fb4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90014fb8:	2d14      	cmp	r5, #20
90014fba:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90014fbe:	6800      	ldr	r0, [r0, #0]
90014fc0:	bfa8      	it	ge
90014fc2:	2514      	movge	r5, #20
90014fc4:	f8ad 101c 	strh.w	r1, [sp, #28]
90014fc8:	f8ad 201e 	strh.w	r2, [sp, #30]
90014fcc:	b289      	uxth	r1, r1
90014fce:	f8ad 3020 	strh.w	r3, [sp, #32]
90014fd2:	b2ad      	uxth	r5, r5
90014fd4:	f8d0 c000 	ldr.w	ip, [r0]
90014fd8:	b292      	uxth	r2, r2
90014fda:	4555      	cmp	r5, sl
90014fdc:	bf94      	ite	ls
90014fde:	9500      	strls	r5, [sp, #0]
90014fe0:	f8cd a000 	strhi.w	sl, [sp]
90014fe4:	b29b      	uxth	r3, r3
90014fe6:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90014fea:	47a8      	blx	r5
90014fec:	6823      	ldr	r3, [r4, #0]
90014fee:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014ff2:	a907      	add	r1, sp, #28
90014ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014ff6:	4620      	mov	r0, r4
90014ff8:	4798      	blx	r3
90014ffa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90014ffe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90015002:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90015006:	1a5b      	subs	r3, r3, r1
90015008:	440a      	add	r2, r1
9001500a:	b21b      	sxth	r3, r3
9001500c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90015010:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90015014:	2b00      	cmp	r3, #0
90015016:	f47f aed8 	bne.w	90014dca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
9001501a:	fa1f f188 	uxth.w	r1, r8
9001501e:	4648      	mov	r0, r9
90015020:	f7ff fa1c 	bl	9001445c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90015024:	e6d1      	b.n	90014dca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90015026:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
9001502a:	42ab      	cmp	r3, r5
9001502c:	f67f ae95 	bls.w	90014d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90015030:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90015034:	ab07      	add	r3, sp, #28
90015036:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001503a:	6851      	ldr	r1, [r2, #4]
9001503c:	c303      	stmia	r3!, {r0, r1}
9001503e:	a807      	add	r0, sp, #28
90015040:	f7fc fa33 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
90015044:	b920      	cbnz	r0, 90015050 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90015046:	6823      	ldr	r3, [r4, #0]
90015048:	a907      	add	r1, sp, #28
9001504a:	4620      	mov	r0, r4
9001504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001504e:	4798      	blx	r3
90015050:	3501      	adds	r5, #1
90015052:	b2ad      	uxth	r5, r5
90015054:	e7e7      	b.n	90015026 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90015056:	bf00      	nop
90015058:	24026264 	.word	0x24026264

9001505c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
9001505c:	4b03      	ldr	r3, [pc, #12]	; (9001506c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
9001505e:	2200      	movs	r2, #0
90015060:	801a      	strh	r2, [r3, #0]
90015062:	805a      	strh	r2, [r3, #2]
90015064:	809a      	strh	r2, [r3, #4]
90015066:	80da      	strh	r2, [r3, #6]
90015068:	4770      	bx	lr
9001506a:	bf00      	nop
9001506c:	240262a8 	.word	0x240262a8

90015070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90015070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015074:	b09d      	sub	sp, #116	; 0x74
90015076:	4606      	mov	r6, r0
90015078:	4614      	mov	r4, r2
9001507a:	468a      	mov	sl, r1
9001507c:	a803      	add	r0, sp, #12
9001507e:	461d      	mov	r5, r3
90015080:	f000 fd7c 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
90015084:	6833      	ldr	r3, [r6, #0]
90015086:	4630      	mov	r0, r6
90015088:	f242 0b0b 	movw	fp, #8203	; 0x200b
9001508c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001508e:	4798      	blx	r3
90015090:	6833      	ldr	r3, [r6, #0]
90015092:	4607      	mov	r7, r0
90015094:	4630      	mov	r0, r6
90015096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015098:	4798      	blx	r3
9001509a:	462a      	mov	r2, r5
9001509c:	2500      	movs	r5, #0
9001509e:	4621      	mov	r1, r4
900150a0:	9000      	str	r0, [sp, #0]
900150a2:	463b      	mov	r3, r7
900150a4:	462c      	mov	r4, r5
900150a6:	46a9      	mov	r9, r5
900150a8:	46a8      	mov	r8, r5
900150aa:	a803      	add	r0, sp, #12
900150ac:	f000 fdb9 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900150b0:	2300      	movs	r3, #0
900150b2:	9302      	str	r3, [sp, #8]
900150b4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900150b8:	429c      	cmp	r4, r3
900150ba:	d002      	beq.n	900150c2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
900150bc:	455c      	cmp	r4, fp
900150be:	bf18      	it	ne
900150c0:	4625      	movne	r5, r4
900150c2:	ab02      	add	r3, sp, #8
900150c4:	4632      	mov	r2, r6
900150c6:	4651      	mov	r1, sl
900150c8:	a803      	add	r0, sp, #12
900150ca:	f001 f89f 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900150ce:	4604      	mov	r4, r0
900150d0:	b108      	cbz	r0, 900150d6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
900150d2:	280a      	cmp	r0, #10
900150d4:	d10a      	bne.n	900150ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
900150d6:	45c1      	cmp	r9, r8
900150d8:	bf38      	it	cc
900150da:	46c1      	movcc	r9, r8
900150dc:	f04f 0800 	mov.w	r8, #0
900150e0:	2c00      	cmp	r4, #0
900150e2:	d1e5      	bne.n	900150b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
900150e4:	4648      	mov	r0, r9
900150e6:	b01d      	add	sp, #116	; 0x74
900150e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900150ec:	9a02      	ldr	r2, [sp, #8]
900150ee:	2a00      	cmp	r2, #0
900150f0:	d0de      	beq.n	900150b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
900150f2:	7b57      	ldrb	r7, [r2, #13]
900150f4:	4629      	mov	r1, r5
900150f6:	6833      	ldr	r3, [r6, #0]
900150f8:	007f      	lsls	r7, r7, #1
900150fa:	8894      	ldrh	r4, [r2, #4]
900150fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900150fe:	f407 7080 	and.w	r0, r7, #256	; 0x100
90015102:	7a97      	ldrb	r7, [r2, #10]
90015104:	4307      	orrs	r7, r0
90015106:	4630      	mov	r0, r6
90015108:	4798      	blx	r3
9001510a:	4438      	add	r0, r7
9001510c:	4480      	add	r8, r0
9001510e:	fa1f f888 	uxth.w	r8, r8
90015112:	e7e5      	b.n	900150e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90015114 <_ZNK8touchgfx4Font12getCharWidthEt>:
90015114:	b508      	push	{r3, lr}
90015116:	6803      	ldr	r3, [r0, #0]
90015118:	68db      	ldr	r3, [r3, #12]
9001511a:	4798      	blx	r3
9001511c:	b128      	cbz	r0, 9001512a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
9001511e:	7b43      	ldrb	r3, [r0, #13]
90015120:	7a80      	ldrb	r0, [r0, #10]
90015122:	005b      	lsls	r3, r3, #1
90015124:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015128:	4318      	orrs	r0, r3
9001512a:	bd08      	pop	{r3, pc}

9001512c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
9001512c:	b40e      	push	{r1, r2, r3}
9001512e:	b5f0      	push	{r4, r5, r6, r7, lr}
90015130:	b09e      	sub	sp, #120	; 0x78
90015132:	4605      	mov	r5, r0
90015134:	ab23      	add	r3, sp, #140	; 0x8c
90015136:	a805      	add	r0, sp, #20
90015138:	f853 4b04 	ldr.w	r4, [r3], #4
9001513c:	9303      	str	r3, [sp, #12]
9001513e:	f000 fd1d 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
90015142:	682b      	ldr	r3, [r5, #0]
90015144:	4628      	mov	r0, r5
90015146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015148:	4798      	blx	r3
9001514a:	682b      	ldr	r3, [r5, #0]
9001514c:	4606      	mov	r6, r0
9001514e:	4628      	mov	r0, r5
90015150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015152:	4798      	blx	r3
90015154:	4633      	mov	r3, r6
90015156:	4621      	mov	r1, r4
90015158:	ae1e      	add	r6, sp, #120	; 0x78
9001515a:	2400      	movs	r4, #0
9001515c:	9000      	str	r0, [sp, #0]
9001515e:	9a03      	ldr	r2, [sp, #12]
90015160:	a805      	add	r0, sp, #20
90015162:	f000 fd5e 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015166:	f846 4d68 	str.w	r4, [r6, #-104]!
9001516a:	462a      	mov	r2, r5
9001516c:	4633      	mov	r3, r6
9001516e:	4621      	mov	r1, r4
90015170:	a805      	add	r0, sp, #20
90015172:	f001 f84b 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015176:	b300      	cbz	r0, 900151ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90015178:	280a      	cmp	r0, #10
9001517a:	d01a      	beq.n	900151b2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
9001517c:	9f04      	ldr	r7, [sp, #16]
9001517e:	b1c7      	cbz	r7, 900151b2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90015180:	7b78      	ldrb	r0, [r7, #13]
90015182:	7a3b      	ldrb	r3, [r7, #8]
90015184:	00c1      	lsls	r1, r0, #3
90015186:	88ea      	ldrh	r2, [r5, #6]
90015188:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001518c:	4319      	orrs	r1, r3
9001518e:	0643      	lsls	r3, r0, #25
90015190:	ea4f 1000 	mov.w	r0, r0, lsl #4
90015194:	bf48      	it	mi
90015196:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
9001519a:	f400 7080 	and.w	r0, r0, #256	; 0x100
9001519e:	bf48      	it	mi
900151a0:	b219      	sxthmi	r1, r3
900151a2:	79fb      	ldrb	r3, [r7, #7]
900151a4:	4303      	orrs	r3, r0
900151a6:	4413      	add	r3, r2
900151a8:	1a5b      	subs	r3, r3, r1
900151aa:	b21b      	sxth	r3, r3
900151ac:	429c      	cmp	r4, r3
900151ae:	bfb8      	it	lt
900151b0:	461c      	movlt	r4, r3
900151b2:	4633      	mov	r3, r6
900151b4:	462a      	mov	r2, r5
900151b6:	2100      	movs	r1, #0
900151b8:	e7da      	b.n	90015170 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
900151ba:	b2a0      	uxth	r0, r4
900151bc:	b01e      	add	sp, #120	; 0x78
900151be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
900151c2:	b003      	add	sp, #12
900151c4:	4770      	bx	lr

900151c6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
900151c6:	7a43      	ldrb	r3, [r0, #9]
900151c8:	8880      	ldrh	r0, [r0, #4]
900151ca:	4418      	add	r0, r3
900151cc:	b280      	uxth	r0, r0
900151ce:	4770      	bx	lr

900151d0 <_ZNK8touchgfx4Font13getFontHeightEv>:
900151d0:	6803      	ldr	r3, [r0, #0]
900151d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900151d4:	4718      	bx	r3

900151d6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
900151d6:	b40e      	push	{r1, r2, r3}
900151d8:	b570      	push	{r4, r5, r6, lr}
900151da:	b09d      	sub	sp, #116	; 0x74
900151dc:	4604      	mov	r4, r0
900151de:	ab21      	add	r3, sp, #132	; 0x84
900151e0:	a803      	add	r0, sp, #12
900151e2:	f853 5b04 	ldr.w	r5, [r3], #4
900151e6:	9302      	str	r3, [sp, #8]
900151e8:	f000 fcc8 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
900151ec:	6823      	ldr	r3, [r4, #0]
900151ee:	4620      	mov	r0, r4
900151f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900151f2:	4798      	blx	r3
900151f4:	6823      	ldr	r3, [r4, #0]
900151f6:	4606      	mov	r6, r0
900151f8:	4620      	mov	r0, r4
900151fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900151fc:	2401      	movs	r4, #1
900151fe:	4798      	blx	r3
90015200:	4633      	mov	r3, r6
90015202:	9000      	str	r0, [sp, #0]
90015204:	4629      	mov	r1, r5
90015206:	9a02      	ldr	r2, [sp, #8]
90015208:	a803      	add	r0, sp, #12
9001520a:	f000 fd0a 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001520e:	a803      	add	r0, sp, #12
90015210:	f001 f8c8 	bl	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90015214:	b2a3      	uxth	r3, r4
90015216:	b138      	cbz	r0, 90015228 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90015218:	280a      	cmp	r0, #10
9001521a:	a803      	add	r0, sp, #12
9001521c:	bf04      	itt	eq
9001521e:	3301      	addeq	r3, #1
90015220:	b21c      	sxtheq	r4, r3
90015222:	f001 f8bf 	bl	900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90015226:	e7f5      	b.n	90015214 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90015228:	4618      	mov	r0, r3
9001522a:	b01d      	add	sp, #116	; 0x74
9001522c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015230:	b003      	add	sp, #12
90015232:	4770      	bx	lr

90015234 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90015234:	b40e      	push	{r1, r2, r3}
90015236:	b5f0      	push	{r4, r5, r6, r7, lr}
90015238:	b09e      	sub	sp, #120	; 0x78
9001523a:	4604      	mov	r4, r0
9001523c:	ab23      	add	r3, sp, #140	; 0x8c
9001523e:	a805      	add	r0, sp, #20
90015240:	f853 5b04 	ldr.w	r5, [r3], #4
90015244:	9303      	str	r3, [sp, #12]
90015246:	f000 fc99 	bl	90015b7c <_ZN8touchgfx12TextProviderC1Ev>
9001524a:	6823      	ldr	r3, [r4, #0]
9001524c:	4620      	mov	r0, r4
9001524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015250:	4798      	blx	r3
90015252:	6823      	ldr	r3, [r4, #0]
90015254:	4606      	mov	r6, r0
90015256:	4620      	mov	r0, r4
90015258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001525a:	4798      	blx	r3
9001525c:	4633      	mov	r3, r6
9001525e:	4629      	mov	r1, r5
90015260:	9000      	str	r0, [sp, #0]
90015262:	9a03      	ldr	r2, [sp, #12]
90015264:	a805      	add	r0, sp, #20
90015266:	f000 fcdc 	bl	90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001526a:	ad1e      	add	r5, sp, #120	; 0x78
9001526c:	2100      	movs	r1, #0
9001526e:	f647 76ff 	movw	r6, #32767	; 0x7fff
90015272:	4622      	mov	r2, r4
90015274:	a805      	add	r0, sp, #20
90015276:	f845 1d68 	str.w	r1, [r5, #-104]!
9001527a:	462b      	mov	r3, r5
9001527c:	f000 ffc6 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015280:	b1d8      	cbz	r0, 900152ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90015282:	280a      	cmp	r0, #10
90015284:	d012      	beq.n	900152ac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90015286:	9804      	ldr	r0, [sp, #16]
90015288:	b180      	cbz	r0, 900152ac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
9001528a:	7b47      	ldrb	r7, [r0, #13]
9001528c:	88e2      	ldrh	r2, [r4, #6]
9001528e:	00fb      	lsls	r3, r7, #3
90015290:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015294:	7a03      	ldrb	r3, [r0, #8]
90015296:	430b      	orrs	r3, r1
90015298:	0679      	lsls	r1, r7, #25
9001529a:	bf44      	itt	mi
9001529c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900152a0:	b21b      	sxthmi	r3, r3
900152a2:	1ad3      	subs	r3, r2, r3
900152a4:	b21b      	sxth	r3, r3
900152a6:	429e      	cmp	r6, r3
900152a8:	bfa8      	it	ge
900152aa:	461e      	movge	r6, r3
900152ac:	462b      	mov	r3, r5
900152ae:	4622      	mov	r2, r4
900152b0:	2100      	movs	r1, #0
900152b2:	a805      	add	r0, sp, #20
900152b4:	f000 ffaa 	bl	9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900152b8:	e7e2      	b.n	90015280 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
900152ba:	4630      	mov	r0, r6
900152bc:	b01e      	add	sp, #120	; 0x78
900152be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
900152c2:	b003      	add	sp, #12
900152c4:	4770      	bx	lr

900152c6 <_ZNK8touchgfx8Drawable10invalidateEv>:
900152c6:	b513      	push	{r0, r1, r4, lr}
900152c8:	6803      	ldr	r3, [r0, #0]
900152ca:	2400      	movs	r4, #0
900152cc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
900152d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
900152d4:	f8ad 1004 	strh.w	r1, [sp, #4]
900152d8:	4669      	mov	r1, sp
900152da:	691b      	ldr	r3, [r3, #16]
900152dc:	9400      	str	r4, [sp, #0]
900152de:	f8ad 2006 	strh.w	r2, [sp, #6]
900152e2:	4798      	blx	r3
900152e4:	b002      	add	sp, #8
900152e6:	bd10      	pop	{r4, pc}

900152e8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
900152e8:	b538      	push	{r3, r4, r5, lr}
900152ea:	680b      	ldr	r3, [r1, #0]
900152ec:	460c      	mov	r4, r1
900152ee:	4605      	mov	r5, r0
900152f0:	68db      	ldr	r3, [r3, #12]
900152f2:	4798      	blx	r3
900152f4:	6823      	ldr	r3, [r4, #0]
900152f6:	4620      	mov	r0, r4
900152f8:	4629      	mov	r1, r5
900152fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900152fc:	4798      	blx	r3
900152fe:	4628      	mov	r0, r5
90015300:	bd38      	pop	{r3, r4, r5, pc}

90015302 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90015302:	b410      	push	{r4}
90015304:	880a      	ldrh	r2, [r1, #0]
90015306:	8884      	ldrh	r4, [r0, #4]
90015308:	4422      	add	r2, r4
9001530a:	800a      	strh	r2, [r1, #0]
9001530c:	884a      	ldrh	r2, [r1, #2]
9001530e:	88c4      	ldrh	r4, [r0, #6]
90015310:	4422      	add	r2, r4
90015312:	804a      	strh	r2, [r1, #2]
90015314:	6940      	ldr	r0, [r0, #20]
90015316:	b120      	cbz	r0, 90015322 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90015318:	6803      	ldr	r3, [r0, #0]
9001531a:	f85d 4b04 	ldr.w	r4, [sp], #4
9001531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015320:	4718      	bx	r3
90015322:	f85d 4b04 	ldr.w	r4, [sp], #4
90015326:	4770      	bx	lr

90015328 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90015328:	b570      	push	{r4, r5, r6, lr}
9001532a:	8882      	ldrh	r2, [r0, #4]
9001532c:	460c      	mov	r4, r1
9001532e:	880b      	ldrh	r3, [r1, #0]
90015330:	4605      	mov	r5, r0
90015332:	4413      	add	r3, r2
90015334:	800b      	strh	r3, [r1, #0]
90015336:	884b      	ldrh	r3, [r1, #2]
90015338:	88c2      	ldrh	r2, [r0, #6]
9001533a:	4413      	add	r3, r2
9001533c:	804b      	strh	r3, [r1, #2]
9001533e:	1d01      	adds	r1, r0, #4
90015340:	4620      	mov	r0, r4
90015342:	f7fc f86f 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90015346:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001534a:	2b00      	cmp	r3, #0
9001534c:	dd0b      	ble.n	90015366 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001534e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015352:	2b00      	cmp	r3, #0
90015354:	dd07      	ble.n	90015366 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90015356:	6968      	ldr	r0, [r5, #20]
90015358:	b128      	cbz	r0, 90015366 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001535a:	6803      	ldr	r3, [r0, #0]
9001535c:	4621      	mov	r1, r4
9001535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015364:	4718      	bx	r3
90015366:	bd70      	pop	{r4, r5, r6, pc}

90015368 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90015368:	b570      	push	{r4, r5, r6, lr}
9001536a:	8882      	ldrh	r2, [r0, #4]
9001536c:	460c      	mov	r4, r1
9001536e:	880b      	ldrh	r3, [r1, #0]
90015370:	4605      	mov	r5, r0
90015372:	4413      	add	r3, r2
90015374:	800b      	strh	r3, [r1, #0]
90015376:	884b      	ldrh	r3, [r1, #2]
90015378:	88c2      	ldrh	r2, [r0, #6]
9001537a:	4413      	add	r3, r2
9001537c:	804b      	strh	r3, [r1, #2]
9001537e:	1d01      	adds	r1, r0, #4
90015380:	4620      	mov	r0, r4
90015382:	f7fc f84f 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90015386:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001538a:	2b00      	cmp	r3, #0
9001538c:	dd18      	ble.n	900153c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
9001538e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015392:	2b00      	cmp	r3, #0
90015394:	dd14      	ble.n	900153c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015396:	6968      	ldr	r0, [r5, #20]
90015398:	b128      	cbz	r0, 900153a6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
9001539a:	6803      	ldr	r3, [r0, #0]
9001539c:	4621      	mov	r1, r4
9001539e:	691b      	ldr	r3, [r3, #16]
900153a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900153a4:	4718      	bx	r3
900153a6:	4b07      	ldr	r3, [pc, #28]	; (900153c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
900153a8:	681b      	ldr	r3, [r3, #0]
900153aa:	3304      	adds	r3, #4
900153ac:	429d      	cmp	r5, r3
900153ae:	d107      	bne.n	900153c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900153b0:	f7fe ff44 	bl	9001423c <_ZN8touchgfx11Application11getInstanceEv>
900153b4:	6821      	ldr	r1, [r4, #0]
900153b6:	6862      	ldr	r2, [r4, #4]
900153b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900153bc:	f7ff b862 	b.w	90014484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900153c0:	bd70      	pop	{r4, r5, r6, pc}
900153c2:	bf00      	nop
900153c4:	240262a0 	.word	0x240262a0

900153c8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
900153c8:	b570      	push	{r4, r5, r6, lr}
900153ca:	4604      	mov	r4, r0
900153cc:	4616      	mov	r6, r2
900153ce:	460d      	mov	r5, r1
900153d0:	b901      	cbnz	r1, 900153d4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
900153d2:	b192      	cbz	r2, 900153fa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
900153d4:	6823      	ldr	r3, [r4, #0]
900153d6:	4620      	mov	r0, r4
900153d8:	699b      	ldr	r3, [r3, #24]
900153da:	4798      	blx	r3
900153dc:	88e2      	ldrh	r2, [r4, #6]
900153de:	88a1      	ldrh	r1, [r4, #4]
900153e0:	4620      	mov	r0, r4
900153e2:	4432      	add	r2, r6
900153e4:	4429      	add	r1, r5
900153e6:	b212      	sxth	r2, r2
900153e8:	b209      	sxth	r1, r1
900153ea:	f7fc faeb 	bl	900119c4 <_ZN8touchgfx8Drawable5setXYEss>
900153ee:	6823      	ldr	r3, [r4, #0]
900153f0:	4620      	mov	r0, r4
900153f2:	699b      	ldr	r3, [r3, #24]
900153f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900153f8:	4718      	bx	r3
900153fa:	bd70      	pop	{r4, r5, r6, pc}

900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
900153fc:	b510      	push	{r4, lr}
900153fe:	2300      	movs	r3, #0
90015400:	4604      	mov	r4, r0
90015402:	4608      	mov	r0, r1
90015404:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90015408:	8023      	strh	r3, [r4, #0]
9001540a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001540e:	8063      	strh	r3, [r4, #2]
90015410:	6803      	ldr	r3, [r0, #0]
90015412:	80a1      	strh	r1, [r4, #4]
90015414:	4621      	mov	r1, r4
90015416:	80e2      	strh	r2, [r4, #6]
90015418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001541a:	4798      	blx	r3
9001541c:	4620      	mov	r0, r4
9001541e:	bd10      	pop	{r4, pc}

90015420 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90015420:	b530      	push	{r4, r5, lr}
90015422:	8083      	strh	r3, [r0, #4]
90015424:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90015428:	f89d 5018 	ldrb.w	r5, [sp, #24]
9001542c:	80c3      	strh	r3, [r0, #6]
9001542e:	f89d 3010 	ldrb.w	r3, [sp, #16]
90015432:	6141      	str	r1, [r0, #20]
90015434:	7203      	strb	r3, [r0, #8]
90015436:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001543a:	8302      	strh	r2, [r0, #24]
9001543c:	7243      	strb	r3, [r0, #9]
9001543e:	7a83      	ldrb	r3, [r0, #10]
90015440:	f365 0306 	bfi	r3, r5, #0, #7
90015444:	f89d 501c 	ldrb.w	r5, [sp, #28]
90015448:	f365 13c7 	bfi	r3, r5, #7, #1
9001544c:	7283      	strb	r3, [r0, #10]
9001544e:	f89d 3020 	ldrb.w	r3, [sp, #32]
90015452:	72c3      	strb	r3, [r0, #11]
90015454:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90015458:	7303      	strb	r3, [r0, #12]
9001545a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
9001545e:	81c3      	strh	r3, [r0, #14]
90015460:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90015464:	8203      	strh	r3, [r0, #16]
90015466:	4b01      	ldr	r3, [pc, #4]	; (9001546c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90015468:	6003      	str	r3, [r0, #0]
9001546a:	bd30      	pop	{r4, r5, pc}
9001546c:	90026d38 	.word	0x90026d38

90015470 <_ZNK8touchgfx9ConstFont4findEt>:
90015470:	b5f0      	push	{r4, r5, r6, r7, lr}
90015472:	6944      	ldr	r4, [r0, #20]
90015474:	b3bc      	cbz	r4, 900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015476:	88a3      	ldrh	r3, [r4, #4]
90015478:	8b02      	ldrh	r2, [r0, #24]
9001547a:	1acb      	subs	r3, r1, r3
9001547c:	f102 32ff 	add.w	r2, r2, #4294967295
90015480:	d431      	bmi.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015482:	4293      	cmp	r3, r2
90015484:	dd0c      	ble.n	900154a0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90015486:	230e      	movs	r3, #14
90015488:	fb03 4302 	mla	r3, r3, r2, r4
9001548c:	889b      	ldrh	r3, [r3, #4]
9001548e:	1a5b      	subs	r3, r3, r1
90015490:	1ad3      	subs	r3, r2, r3
90015492:	429a      	cmp	r2, r3
90015494:	db27      	blt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015496:	2b00      	cmp	r3, #0
90015498:	bfbc      	itt	lt
9001549a:	2302      	movlt	r3, #2
9001549c:	fb92 f3f3 	sdivlt	r3, r2, r3
900154a0:	2500      	movs	r5, #0
900154a2:	260e      	movs	r6, #14
900154a4:	4295      	cmp	r5, r2
900154a6:	dc1e      	bgt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900154a8:	fb06 4003 	mla	r0, r6, r3, r4
900154ac:	8887      	ldrh	r7, [r0, #4]
900154ae:	42b9      	cmp	r1, r7
900154b0:	d01a      	beq.n	900154e8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
900154b2:	d20d      	bcs.n	900154d0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
900154b4:	1e5a      	subs	r2, r3, #1
900154b6:	4295      	cmp	r5, r2
900154b8:	dc15      	bgt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900154ba:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
900154be:	1a5b      	subs	r3, r3, r1
900154c0:	1ad3      	subs	r3, r2, r3
900154c2:	429a      	cmp	r2, r3
900154c4:	db0f      	blt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900154c6:	429d      	cmp	r5, r3
900154c8:	ddec      	ble.n	900154a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900154ca:	1953      	adds	r3, r2, r5
900154cc:	105b      	asrs	r3, r3, #1
900154ce:	e7e9      	b.n	900154a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900154d0:	1c5d      	adds	r5, r3, #1
900154d2:	42aa      	cmp	r2, r5
900154d4:	db07      	blt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900154d6:	8a43      	ldrh	r3, [r0, #18]
900154d8:	1acb      	subs	r3, r1, r3
900154da:	442b      	add	r3, r5
900154dc:	429d      	cmp	r5, r3
900154de:	dc02      	bgt.n	900154e6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900154e0:	429a      	cmp	r2, r3
900154e2:	dadf      	bge.n	900154a4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900154e4:	e7f1      	b.n	900154ca <_ZNK8touchgfx9ConstFont4findEt+0x5a>
900154e6:	2000      	movs	r0, #0
900154e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

900154ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
900154ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900154ec:	4604      	mov	r4, r0
900154ee:	4617      	mov	r7, r2
900154f0:	461e      	mov	r6, r3
900154f2:	b911      	cbnz	r1, 900154fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
900154f4:	2500      	movs	r5, #0
900154f6:	4628      	mov	r0, r5
900154f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900154fa:	290a      	cmp	r1, #10
900154fc:	d0fa      	beq.n	900154f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900154fe:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90015502:	4291      	cmp	r1, r2
90015504:	d0f6      	beq.n	900154f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015506:	f242 020b 	movw	r2, #8203	; 0x200b
9001550a:	4291      	cmp	r1, r2
9001550c:	d0f2      	beq.n	900154f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001550e:	f7ff ffaf 	bl	90015470 <_ZNK8touchgfx9ConstFont4findEt>
90015512:	4605      	mov	r5, r0
90015514:	b950      	cbnz	r0, 9001552c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90015516:	6823      	ldr	r3, [r4, #0]
90015518:	4620      	mov	r0, r4
9001551a:	691b      	ldr	r3, [r3, #16]
9001551c:	4798      	blx	r3
9001551e:	4601      	mov	r1, r0
90015520:	4620      	mov	r0, r4
90015522:	f7ff ffa5 	bl	90015470 <_ZNK8touchgfx9ConstFont4findEt>
90015526:	4605      	mov	r5, r0
90015528:	2800      	cmp	r0, #0
9001552a:	d0e3      	beq.n	900154f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001552c:	6823      	ldr	r3, [r4, #0]
9001552e:	4629      	mov	r1, r5
90015530:	4620      	mov	r0, r4
90015532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90015534:	4798      	blx	r3
90015536:	6038      	str	r0, [r7, #0]
90015538:	6823      	ldr	r3, [r4, #0]
9001553a:	4620      	mov	r0, r4
9001553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001553e:	4798      	blx	r3
90015540:	7030      	strb	r0, [r6, #0]
90015542:	e7d8      	b.n	900154f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90015544 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90015544:	2000      	movs	r0, #0
90015546:	4770      	bx	lr

90015548 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90015548:	2001      	movs	r0, #1
9001554a:	4770      	bx	lr

9001554c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
9001554c:	2002      	movs	r0, #2
9001554e:	4770      	bx	lr

90015550 <_ZN8touchgfx6ScreenD1Ev>:
90015550:	4770      	bx	lr

90015552 <_ZN8touchgfx6Screen11setupScreenEv>:
90015552:	4770      	bx	lr

90015554 <_ZN8touchgfx12GestureEventD1Ev>:
90015554:	4770      	bx	lr

90015556 <_ZN8touchgfx9DragEventD1Ev>:
90015556:	4770      	bx	lr

90015558 <_ZN8touchgfx10ClickEventD1Ev>:
90015558:	4770      	bx	lr

9001555a <_ZN8touchgfx10ClickEventD0Ev>:
9001555a:	b510      	push	{r4, lr}
9001555c:	4604      	mov	r4, r0
9001555e:	210c      	movs	r1, #12
90015560:	f00d fc67 	bl	90022e32 <_ZdlPvj>
90015564:	4620      	mov	r0, r4
90015566:	bd10      	pop	{r4, pc}

90015568 <_ZN8touchgfx9DragEventD0Ev>:
90015568:	b510      	push	{r4, lr}
9001556a:	4604      	mov	r4, r0
9001556c:	2110      	movs	r1, #16
9001556e:	f00d fc60 	bl	90022e32 <_ZdlPvj>
90015572:	4620      	mov	r0, r4
90015574:	bd10      	pop	{r4, pc}

90015576 <_ZN8touchgfx12GestureEventD0Ev>:
90015576:	b510      	push	{r4, lr}
90015578:	4604      	mov	r4, r0
9001557a:	210c      	movs	r1, #12
9001557c:	f00d fc59 	bl	90022e32 <_ZdlPvj>
90015580:	4620      	mov	r0, r4
90015582:	bd10      	pop	{r4, pc}

90015584 <_ZN8touchgfx6ScreenD0Ev>:
90015584:	b510      	push	{r4, lr}
90015586:	4604      	mov	r4, r0
90015588:	213c      	movs	r1, #60	; 0x3c
9001558a:	f00d fc52 	bl	90022e32 <_ZdlPvj>
9001558e:	4620      	mov	r0, r4
90015590:	bd10      	pop	{r4, pc}
	...

90015594 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90015594:	b530      	push	{r4, r5, lr}
90015596:	460d      	mov	r5, r1
90015598:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001559a:	b087      	sub	sp, #28
9001559c:	4604      	mov	r4, r0
9001559e:	b301      	cbz	r1, 900155e2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
900155a0:	a801      	add	r0, sp, #4
900155a2:	f7ff ff2b 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900155a6:	892a      	ldrh	r2, [r5, #8]
900155a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900155ac:	7928      	ldrb	r0, [r5, #4]
900155ae:	1ad2      	subs	r2, r2, r3
900155b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
900155b2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
900155b6:	441a      	add	r2, r3
900155b8:	896b      	ldrh	r3, [r5, #10]
900155ba:	f8bd 5006 	ldrh.w	r5, [sp, #6]
900155be:	f88d 0010 	strb.w	r0, [sp, #16]
900155c2:	1b5b      	subs	r3, r3, r5
900155c4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
900155c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
900155c8:	442b      	add	r3, r5
900155ca:	4d07      	ldr	r5, [pc, #28]	; (900155e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
900155cc:	f8ad 1012 	strh.w	r1, [sp, #18]
900155d0:	a903      	add	r1, sp, #12
900155d2:	9503      	str	r5, [sp, #12]
900155d4:	f8ad 2014 	strh.w	r2, [sp, #20]
900155d8:	f8ad 3016 	strh.w	r3, [sp, #22]
900155dc:	6803      	ldr	r3, [r0, #0]
900155de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900155e0:	4798      	blx	r3
900155e2:	b007      	add	sp, #28
900155e4:	bd30      	pop	{r4, r5, pc}
900155e6:	bf00      	nop
900155e8:	90026dc0 	.word	0x90026dc0

900155ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
900155ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900155f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
900155f2:	b08a      	sub	sp, #40	; 0x28
900155f4:	4604      	mov	r4, r0
900155f6:	460d      	mov	r5, r1
900155f8:	b113      	cbz	r3, 90015600 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
900155fa:	790b      	ldrb	r3, [r1, #4]
900155fc:	2b00      	cmp	r3, #0
900155fe:	d044      	beq.n	9001568a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015600:	f104 0804 	add.w	r8, r4, #4
90015604:	a803      	add	r0, sp, #12
90015606:	4641      	mov	r1, r8
90015608:	f7ff fef8 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001560c:	792b      	ldrb	r3, [r5, #4]
9001560e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90015612:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90015616:	b983      	cbnz	r3, 9001563a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90015618:	f104 0336 	add.w	r3, r4, #54	; 0x36
9001561c:	892a      	ldrh	r2, [r5, #8]
9001561e:	88e9      	ldrh	r1, [r5, #6]
90015620:	4640      	mov	r0, r8
90015622:	1b92      	subs	r2, r2, r6
90015624:	9301      	str	r3, [sp, #4]
90015626:	1bc9      	subs	r1, r1, r7
90015628:	f104 0334 	add.w	r3, r4, #52	; 0x34
9001562c:	b212      	sxth	r2, r2
9001562e:	9300      	str	r3, [sp, #0]
90015630:	b209      	sxth	r1, r1
90015632:	f104 0330 	add.w	r3, r4, #48	; 0x30
90015636:	f7fb fe13 	bl	90011260 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
9001563a:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001563c:	b329      	cbz	r1, 9001568a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001563e:	a805      	add	r0, sp, #20
90015640:	f7ff fedc 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015644:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90015648:	792b      	ldrb	r3, [r5, #4]
9001564a:	a907      	add	r1, sp, #28
9001564c:	1abf      	subs	r7, r7, r2
9001564e:	88ea      	ldrh	r2, [r5, #6]
90015650:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015652:	4417      	add	r7, r2
90015654:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
90015656:	f88d 3020 	strb.w	r3, [sp, #32]
9001565a:	4417      	add	r7, r2
9001565c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90015660:	1ab6      	subs	r6, r6, r2
90015662:	892a      	ldrh	r2, [r5, #8]
90015664:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90015668:	4416      	add	r6, r2
9001566a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001566c:	4416      	add	r6, r2
9001566e:	4a08      	ldr	r2, [pc, #32]	; (90015690 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90015670:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
90015674:	2600      	movs	r6, #0
90015676:	9207      	str	r2, [sp, #28]
90015678:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
9001567c:	6803      	ldr	r3, [r0, #0]
9001567e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015680:	4798      	blx	r3
90015682:	792b      	ldrb	r3, [r5, #4]
90015684:	b10b      	cbz	r3, 9001568a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015686:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
9001568a:	b00a      	add	sp, #40	; 0x28
9001568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015690:	90026d98 	.word	0x90026d98

90015694 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90015694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015698:	460c      	mov	r4, r1
9001569a:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001569c:	b088      	sub	sp, #32
9001569e:	4605      	mov	r5, r0
900156a0:	2900      	cmp	r1, #0
900156a2:	d06d      	beq.n	90015780 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
900156a4:	4668      	mov	r0, sp
900156a6:	f7ff fea9 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900156aa:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
900156ac:	88e3      	ldrh	r3, [r4, #6]
900156ae:	f9bd 8000 	ldrsh.w	r8, [sp]
900156b2:	440b      	add	r3, r1
900156b4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
900156b8:	b21b      	sxth	r3, r3
900156ba:	4543      	cmp	r3, r8
900156bc:	db31      	blt.n	90015722 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900156be:	f8bd c004 	ldrh.w	ip, [sp, #4]
900156c2:	44c4      	add	ip, r8
900156c4:	fa0f fc8c 	sxth.w	ip, ip
900156c8:	4563      	cmp	r3, ip
900156ca:	da2a      	bge.n	90015722 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900156cc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
900156ce:	8926      	ldrh	r6, [r4, #8]
900156d0:	4416      	add	r6, r2
900156d2:	b236      	sxth	r6, r6
900156d4:	42be      	cmp	r6, r7
900156d6:	db24      	blt.n	90015722 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900156d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
900156dc:	4438      	add	r0, r7
900156de:	b200      	sxth	r0, r0
900156e0:	4286      	cmp	r6, r0
900156e2:	da1e      	bge.n	90015722 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
900156e4:	8963      	ldrh	r3, [r4, #10]
900156e6:	4419      	add	r1, r3
900156e8:	b209      	sxth	r1, r1
900156ea:	4541      	cmp	r1, r8
900156ec:	db08      	blt.n	90015700 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900156ee:	4561      	cmp	r1, ip
900156f0:	da06      	bge.n	90015700 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900156f2:	89a3      	ldrh	r3, [r4, #12]
900156f4:	441a      	add	r2, r3
900156f6:	b212      	sxth	r2, r2
900156f8:	42ba      	cmp	r2, r7
900156fa:	db01      	blt.n	90015700 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
900156fc:	4282      	cmp	r2, r0
900156fe:	db10      	blt.n	90015722 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015700:	4b21      	ldr	r3, [pc, #132]	; (90015788 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
90015702:	a904      	add	r1, sp, #16
90015704:	6b28      	ldr	r0, [r5, #48]	; 0x30
90015706:	9304      	str	r3, [sp, #16]
90015708:	2302      	movs	r3, #2
9001570a:	f88d 3014 	strb.w	r3, [sp, #20]
9001570e:	2300      	movs	r3, #0
90015710:	f8ad 3016 	strh.w	r3, [sp, #22]
90015714:	f8ad 3018 	strh.w	r3, [sp, #24]
90015718:	f8ad 301a 	strh.w	r3, [sp, #26]
9001571c:	6803      	ldr	r3, [r0, #0]
9001571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015720:	4798      	blx	r3
90015722:	1d29      	adds	r1, r5, #4
90015724:	a802      	add	r0, sp, #8
90015726:	f7ff fe69 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001572a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001572e:	88e0      	ldrh	r0, [r4, #6]
90015730:	eba3 0808 	sub.w	r8, r3, r8
90015734:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90015738:	7921      	ldrb	r1, [r4, #4]
9001573a:	fa1f f888 	uxth.w	r8, r8
9001573e:	1bdf      	subs	r7, r3, r7
90015740:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
90015744:	b2bb      	uxth	r3, r7
90015746:	4440      	add	r0, r8
90015748:	8922      	ldrh	r2, [r4, #8]
9001574a:	8967      	ldrh	r7, [r4, #10]
9001574c:	4460      	add	r0, ip
9001574e:	89a4      	ldrh	r4, [r4, #12]
90015750:	441a      	add	r2, r3
90015752:	8eee      	ldrh	r6, [r5, #54]	; 0x36
90015754:	44b8      	add	r8, r7
90015756:	4423      	add	r3, r4
90015758:	f8ad 0016 	strh.w	r0, [sp, #22]
9001575c:	4432      	add	r2, r6
9001575e:	44e0      	add	r8, ip
90015760:	4433      	add	r3, r6
90015762:	4c0a      	ldr	r4, [pc, #40]	; (9001578c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90015764:	6b28      	ldr	r0, [r5, #48]	; 0x30
90015766:	f88d 1014 	strb.w	r1, [sp, #20]
9001576a:	a904      	add	r1, sp, #16
9001576c:	9404      	str	r4, [sp, #16]
9001576e:	f8ad 2018 	strh.w	r2, [sp, #24]
90015772:	f8ad 801a 	strh.w	r8, [sp, #26]
90015776:	f8ad 301c 	strh.w	r3, [sp, #28]
9001577a:	6803      	ldr	r3, [r0, #0]
9001577c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001577e:	4798      	blx	r3
90015780:	b008      	add	sp, #32
90015782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015786:	bf00      	nop
90015788:	90026d98 	.word	0x90026d98
9001578c:	90026dac 	.word	0x90026dac

90015790 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90015790:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015792:	4604      	mov	r4, r0
90015794:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90015798:	3201      	adds	r2, #1
9001579a:	d112      	bne.n	900157c2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
9001579c:	2500      	movs	r5, #0
9001579e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
900157a2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
900157a6:	6803      	ldr	r3, [r0, #0]
900157a8:	9500      	str	r5, [sp, #0]
900157aa:	466d      	mov	r5, sp
900157ac:	f8ad 1004 	strh.w	r1, [sp, #4]
900157b0:	f8ad 2006 	strh.w	r2, [sp, #6]
900157b4:	4629      	mov	r1, r5
900157b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900157b8:	4798      	blx	r3
900157ba:	e895 0003 	ldmia.w	r5, {r0, r1}
900157be:	e884 0003 	stmia.w	r4, {r0, r1}
900157c2:	4620      	mov	r0, r4
900157c4:	b003      	add	sp, #12
900157c6:	bd30      	pop	{r4, r5, pc}

900157c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
900157c8:	b513      	push	{r0, r1, r4, lr}
900157ca:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
900157ce:	4604      	mov	r4, r0
900157d0:	3301      	adds	r3, #1
900157d2:	d109      	bne.n	900157e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
900157d4:	4601      	mov	r1, r0
900157d6:	4668      	mov	r0, sp
900157d8:	f7ff fe10 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900157dc:	f8bd 3000 	ldrh.w	r3, [sp]
900157e0:	8423      	strh	r3, [r4, #32]
900157e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900157e6:	8463      	strh	r3, [r4, #34]	; 0x22
900157e8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
900157ec:	b002      	add	sp, #8
900157ee:	bd10      	pop	{r4, pc}

900157f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
900157f0:	b513      	push	{r0, r1, r4, lr}
900157f2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
900157f6:	4604      	mov	r4, r0
900157f8:	3301      	adds	r3, #1
900157fa:	d109      	bne.n	90015810 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
900157fc:	4601      	mov	r1, r0
900157fe:	4668      	mov	r0, sp
90015800:	f7ff fdfc 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015804:	f8bd 3000 	ldrh.w	r3, [sp]
90015808:	8423      	strh	r3, [r4, #32]
9001580a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001580e:	8463      	strh	r3, [r4, #34]	; 0x22
90015810:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
90015814:	b002      	add	sp, #8
90015816:	bd10      	pop	{r4, pc}

90015818 <_ZN8touchgfx6ScreenC1Ev>:
90015818:	b570      	push	{r4, r5, r6, lr}
9001581a:	4b17      	ldr	r3, [pc, #92]	; (90015878 <_ZN8touchgfx6ScreenC1Ev+0x60>)
9001581c:	4605      	mov	r5, r0
9001581e:	4a17      	ldr	r2, [pc, #92]	; (9001587c <_ZN8touchgfx6ScreenC1Ev+0x64>)
90015820:	2101      	movs	r1, #1
90015822:	f845 3b04 	str.w	r3, [r5], #4
90015826:	2300      	movs	r3, #0
90015828:	6042      	str	r2, [r0, #4]
9001582a:	4604      	mov	r4, r0
9001582c:	8103      	strh	r3, [r0, #8]
9001582e:	8143      	strh	r3, [r0, #10]
90015830:	8183      	strh	r3, [r0, #12]
90015832:	81c3      	strh	r3, [r0, #14]
90015834:	8203      	strh	r3, [r0, #16]
90015836:	8243      	strh	r3, [r0, #18]
90015838:	8283      	strh	r3, [r0, #20]
9001583a:	82c3      	strh	r3, [r0, #22]
9001583c:	6203      	str	r3, [r0, #32]
9001583e:	8483      	strh	r3, [r0, #36]	; 0x24
90015840:	84c3      	strh	r3, [r0, #38]	; 0x26
90015842:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90015846:	6343      	str	r3, [r0, #52]	; 0x34
90015848:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
9001584c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90015850:	e9c0 3306 	strd	r3, r3, [r0, #24]
90015854:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90015858:	4b09      	ldr	r3, [pc, #36]	; (90015880 <_ZN8touchgfx6ScreenC1Ev+0x68>)
9001585a:	4628      	mov	r0, r5
9001585c:	f9b3 6000 	ldrsh.w	r6, [r3]
90015860:	6b93      	ldr	r3, [r2, #56]	; 0x38
90015862:	4a08      	ldr	r2, [pc, #32]	; (90015884 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
90015864:	f9b2 1000 	ldrsh.w	r1, [r2]
90015868:	4798      	blx	r3
9001586a:	6863      	ldr	r3, [r4, #4]
9001586c:	4628      	mov	r0, r5
9001586e:	4631      	mov	r1, r6
90015870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015872:	4798      	blx	r3
90015874:	4620      	mov	r0, r4
90015876:	bd70      	pop	{r4, r5, r6, pc}
90015878:	90026dd4 	.word	0x90026dd4
9001587c:	90026b58 	.word	0x90026b58
90015880:	2402625a 	.word	0x2402625a
90015884:	24026258 	.word	0x24026258

90015888 <_ZN8touchgfx6Screen4drawEv>:
90015888:	4b09      	ldr	r3, [pc, #36]	; (900158b0 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001588a:	b507      	push	{r0, r1, r2, lr}
9001588c:	f9b3 2000 	ldrsh.w	r2, [r3]
90015890:	2100      	movs	r1, #0
90015892:	4b08      	ldr	r3, [pc, #32]	; (900158b4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90015894:	9100      	str	r1, [sp, #0]
90015896:	4669      	mov	r1, sp
90015898:	f9b3 3000 	ldrsh.w	r3, [r3]
9001589c:	f8ad 2004 	strh.w	r2, [sp, #4]
900158a0:	f8ad 3006 	strh.w	r3, [sp, #6]
900158a4:	6803      	ldr	r3, [r0, #0]
900158a6:	689b      	ldr	r3, [r3, #8]
900158a8:	4798      	blx	r3
900158aa:	b003      	add	sp, #12
900158ac:	f85d fb04 	ldr.w	pc, [sp], #4
900158b0:	24026258 	.word	0x24026258
900158b4:	2402625a 	.word	0x2402625a

900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
900158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900158bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
900158c0:	b089      	sub	sp, #36	; 0x24
900158c2:	4680      	mov	r8, r0
900158c4:	460c      	mov	r4, r1
900158c6:	2b00      	cmp	r3, #0
900158c8:	4615      	mov	r5, r2
900158ca:	dd0e      	ble.n	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900158cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
900158d0:	2b00      	cmp	r3, #0
900158d2:	dd0a      	ble.n	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
900158d4:	4628      	mov	r0, r5
900158d6:	f7ff ff5b 	bl	90015790 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900158da:	4621      	mov	r1, r4
900158dc:	f7fe fbcf 	bl	9001407e <_ZNK8touchgfx4Rect9intersectERKS0_>
900158e0:	69eb      	ldr	r3, [r5, #28]
900158e2:	b928      	cbnz	r0, 900158f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
900158e4:	461d      	mov	r5, r3
900158e6:	2b00      	cmp	r3, #0
900158e8:	d1f4      	bne.n	900158d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
900158ea:	b009      	add	sp, #36	; 0x24
900158ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900158f0:	ae04      	add	r6, sp, #16
900158f2:	2b00      	cmp	r3, #0
900158f4:	f000 80b5 	beq.w	90015a62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900158f8:	682b      	ldr	r3, [r5, #0]
900158fa:	4629      	mov	r1, r5
900158fc:	a802      	add	r0, sp, #8
900158fe:	68db      	ldr	r3, [r3, #12]
90015900:	4798      	blx	r3
90015902:	4628      	mov	r0, r5
90015904:	f7ff ff60 	bl	900157c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90015908:	f8bd 7008 	ldrh.w	r7, [sp, #8]
9001590c:	4407      	add	r7, r0
9001590e:	4628      	mov	r0, r5
90015910:	f7ff ff6e 	bl	900157f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90015914:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90015918:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
9001591c:	b23f      	sxth	r7, r7
9001591e:	4418      	add	r0, r3
90015920:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90015924:	4621      	mov	r1, r4
90015926:	f8ad 2014 	strh.w	r2, [sp, #20]
9001592a:	f8ad 0012 	strh.w	r0, [sp, #18]
9001592e:	4630      	mov	r0, r6
90015930:	f8ad 3016 	strh.w	r3, [sp, #22]
90015934:	f8ad 7010 	strh.w	r7, [sp, #16]
90015938:	f7fb fd74 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001593c:	4628      	mov	r0, r5
9001593e:	f7ff ff27 	bl	90015790 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90015942:	ab06      	add	r3, sp, #24
90015944:	4602      	mov	r2, r0
90015946:	e896 0003 	ldmia.w	r6, {r0, r1}
9001594a:	e883 0003 	stmia.w	r3, {r0, r1}
9001594e:	4611      	mov	r1, r2
90015950:	4618      	mov	r0, r3
90015952:	f7fb fd67 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90015956:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001595a:	f9b4 1000 	ldrsh.w	r1, [r4]
9001595e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90015962:	4299      	cmp	r1, r3
90015964:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90015968:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
9001596c:	d10b      	bne.n	90015986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001596e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90015972:	4552      	cmp	r2, sl
90015974:	d107      	bne.n	90015986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90015976:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
9001597a:	455a      	cmp	r2, fp
9001597c:	d103      	bne.n	90015986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001597e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90015982:	454a      	cmp	r2, r9
90015984:	d06d      	beq.n	90015a62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90015986:	f1bb 0f00 	cmp.w	fp, #0
9001598a:	dd65      	ble.n	90015a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001598c:	f1b9 0f00 	cmp.w	r9, #0
90015990:	dd62      	ble.n	90015a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90015992:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90015996:	fa1f f08a 	uxth.w	r0, sl
9001599a:	4552      	cmp	r2, sl
9001599c:	9000      	str	r0, [sp, #0]
9001599e:	da12      	bge.n	900159c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
900159a0:	9301      	str	r3, [sp, #4]
900159a2:	9b00      	ldr	r3, [sp, #0]
900159a4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900159a8:	f8ad 2012 	strh.w	r2, [sp, #18]
900159ac:	1a9a      	subs	r2, r3, r2
900159ae:	f8ad 1010 	strh.w	r1, [sp, #16]
900159b2:	4631      	mov	r1, r6
900159b4:	f8ad 0014 	strh.w	r0, [sp, #20]
900159b8:	4640      	mov	r0, r8
900159ba:	f8ad 2016 	strh.w	r2, [sp, #22]
900159be:	69ea      	ldr	r2, [r5, #28]
900159c0:	f7ff ff7a 	bl	900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900159c4:	9b01      	ldr	r3, [sp, #4]
900159c6:	f9b4 2000 	ldrsh.w	r2, [r4]
900159ca:	b29f      	uxth	r7, r3
900159cc:	429a      	cmp	r2, r3
900159ce:	da0d      	bge.n	900159ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
900159d0:	f8ad 2010 	strh.w	r2, [sp, #16]
900159d4:	1aba      	subs	r2, r7, r2
900159d6:	f8ad a012 	strh.w	sl, [sp, #18]
900159da:	4631      	mov	r1, r6
900159dc:	f8ad 2014 	strh.w	r2, [sp, #20]
900159e0:	4640      	mov	r0, r8
900159e2:	f8ad 9016 	strh.w	r9, [sp, #22]
900159e6:	69ea      	ldr	r2, [r5, #28]
900159e8:	f7ff ff66 	bl	900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900159ec:	8822      	ldrh	r2, [r4, #0]
900159ee:	445f      	add	r7, fp
900159f0:	88a3      	ldrh	r3, [r4, #4]
900159f2:	b2bf      	uxth	r7, r7
900159f4:	4413      	add	r3, r2
900159f6:	b23a      	sxth	r2, r7
900159f8:	b29b      	uxth	r3, r3
900159fa:	b219      	sxth	r1, r3
900159fc:	4291      	cmp	r1, r2
900159fe:	dd0d      	ble.n	90015a1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90015a00:	1bdb      	subs	r3, r3, r7
90015a02:	f8ad 2010 	strh.w	r2, [sp, #16]
90015a06:	f8ad a012 	strh.w	sl, [sp, #18]
90015a0a:	4631      	mov	r1, r6
90015a0c:	f8ad 3014 	strh.w	r3, [sp, #20]
90015a10:	4640      	mov	r0, r8
90015a12:	f8ad 9016 	strh.w	r9, [sp, #22]
90015a16:	69ea      	ldr	r2, [r5, #28]
90015a18:	f7ff ff4e 	bl	900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015a1c:	88e2      	ldrh	r2, [r4, #6]
90015a1e:	8863      	ldrh	r3, [r4, #2]
90015a20:	4413      	add	r3, r2
90015a22:	9a00      	ldr	r2, [sp, #0]
90015a24:	444a      	add	r2, r9
90015a26:	b29b      	uxth	r3, r3
90015a28:	fa1f f982 	uxth.w	r9, r2
90015a2c:	b219      	sxth	r1, r3
90015a2e:	fa0f f289 	sxth.w	r2, r9
90015a32:	428a      	cmp	r2, r1
90015a34:	da15      	bge.n	90015a62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90015a36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90015a3a:	eba3 0309 	sub.w	r3, r3, r9
90015a3e:	f9b4 0000 	ldrsh.w	r0, [r4]
90015a42:	f8ad 1014 	strh.w	r1, [sp, #20]
90015a46:	4631      	mov	r1, r6
90015a48:	f8ad 0010 	strh.w	r0, [sp, #16]
90015a4c:	f8ad 2012 	strh.w	r2, [sp, #18]
90015a50:	f8ad 3016 	strh.w	r3, [sp, #22]
90015a54:	69ea      	ldr	r2, [r5, #28]
90015a56:	e001      	b.n	90015a5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90015a58:	69ea      	ldr	r2, [r5, #28]
90015a5a:	4621      	mov	r1, r4
90015a5c:	4640      	mov	r0, r8
90015a5e:	f7ff ff2b 	bl	900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015a62:	4628      	mov	r0, r5
90015a64:	f7ff fe94 	bl	90015790 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90015a68:	6861      	ldr	r1, [r4, #4]
90015a6a:	4602      	mov	r2, r0
90015a6c:	4633      	mov	r3, r6
90015a6e:	6820      	ldr	r0, [r4, #0]
90015a70:	c303      	stmia	r3!, {r0, r1}
90015a72:	4611      	mov	r1, r2
90015a74:	4630      	mov	r0, r6
90015a76:	f7fb fcd5 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90015a7a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90015a7e:	2b00      	cmp	r3, #0
90015a80:	f77f af33 	ble.w	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015a84:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90015a88:	2b00      	cmp	r3, #0
90015a8a:	f77f af2e 	ble.w	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015a8e:	4628      	mov	r0, r5
90015a90:	f7ff fe9a 	bl	900157c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90015a94:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90015a98:	1a18      	subs	r0, r3, r0
90015a9a:	f8ad 0010 	strh.w	r0, [sp, #16]
90015a9e:	4628      	mov	r0, r5
90015aa0:	f7ff fea6 	bl	900157f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90015aa4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90015aa8:	4631      	mov	r1, r6
90015aaa:	1a18      	subs	r0, r3, r0
90015aac:	f8ad 0012 	strh.w	r0, [sp, #18]
90015ab0:	4628      	mov	r0, r5
90015ab2:	682b      	ldr	r3, [r5, #0]
90015ab4:	689b      	ldr	r3, [r3, #8]
90015ab6:	4798      	blx	r3
90015ab8:	e717      	b.n	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90015aba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90015aba:	b570      	push	{r4, r5, r6, lr}
90015abc:	1d06      	adds	r6, r0, #4
90015abe:	b086      	sub	sp, #24
90015ac0:	460c      	mov	r4, r1
90015ac2:	2300      	movs	r3, #0
90015ac4:	4631      	mov	r1, r6
90015ac6:	4605      	mov	r5, r0
90015ac8:	a802      	add	r0, sp, #8
90015aca:	9301      	str	r3, [sp, #4]
90015acc:	f7ff fc96 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015ad0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90015ad4:	8822      	ldrh	r2, [r4, #0]
90015ad6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90015ada:	1ad2      	subs	r2, r2, r3
90015adc:	8863      	ldrh	r3, [r4, #2]
90015ade:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90015ae2:	1a5b      	subs	r3, r3, r1
90015ae4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90015ae8:	f8ad 2010 	strh.w	r2, [sp, #16]
90015aec:	aa01      	add	r2, sp, #4
90015aee:	f8ad 0014 	strh.w	r0, [sp, #20]
90015af2:	4630      	mov	r0, r6
90015af4:	f8ad 1016 	strh.w	r1, [sp, #22]
90015af8:	a904      	add	r1, sp, #16
90015afa:	f8ad 3012 	strh.w	r3, [sp, #18]
90015afe:	f7fb fd69 	bl	900115d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90015b02:	9a01      	ldr	r2, [sp, #4]
90015b04:	b11a      	cbz	r2, 90015b0e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90015b06:	4621      	mov	r1, r4
90015b08:	4628      	mov	r0, r5
90015b0a:	f7ff fed5 	bl	900158b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015b0e:	b006      	add	sp, #24
90015b10:	bd70      	pop	{r4, r5, r6, pc}

90015b12 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90015b12:	4602      	mov	r2, r0
90015b14:	b530      	push	{r4, r5, lr}
90015b16:	4604      	mov	r4, r0
90015b18:	b085      	sub	sp, #20
90015b1a:	f852 0f08 	ldr.w	r0, [r2, #8]!
90015b1e:	460d      	mov	r5, r1
90015b20:	466b      	mov	r3, sp
90015b22:	6851      	ldr	r1, [r2, #4]
90015b24:	c303      	stmia	r3!, {r0, r1}
90015b26:	4629      	mov	r1, r5
90015b28:	4668      	mov	r0, sp
90015b2a:	f7fb fc7b 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
90015b2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015b32:	b12b      	cbz	r3, 90015b40 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90015b34:	4669      	mov	r1, sp
90015b36:	4620      	mov	r0, r4
90015b38:	f7ff ffbf 	bl	90015aba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90015b3c:	b005      	add	sp, #20
90015b3e:	bd30      	pop	{r4, r5, pc}
90015b40:	3404      	adds	r4, #4
90015b42:	a802      	add	r0, sp, #8
90015b44:	4621      	mov	r1, r4
90015b46:	f7ff fc59 	bl	900153fc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015b4a:	f8bd 3000 	ldrh.w	r3, [sp]
90015b4e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90015b52:	4669      	mov	r1, sp
90015b54:	4620      	mov	r0, r4
90015b56:	1a9b      	subs	r3, r3, r2
90015b58:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90015b5c:	f8ad 3000 	strh.w	r3, [sp]
90015b60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015b64:	1a9b      	subs	r3, r3, r2
90015b66:	f8ad 3002 	strh.w	r3, [sp, #2]
90015b6a:	f7fb fcfa 	bl	90011562 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90015b6e:	e7e5      	b.n	90015b3c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90015b70 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90015b70:	460b      	mov	r3, r1
90015b72:	680a      	ldr	r2, [r1, #0]
90015b74:	1d01      	adds	r1, r0, #4
90015b76:	6992      	ldr	r2, [r2, #24]
90015b78:	4618      	mov	r0, r3
90015b7a:	4710      	bx	r2

90015b7c <_ZN8touchgfx12TextProviderC1Ev>:
90015b7c:	b538      	push	{r3, r4, r5, lr}
90015b7e:	2500      	movs	r5, #0
90015b80:	2302      	movs	r3, #2
90015b82:	4604      	mov	r4, r0
90015b84:	220e      	movs	r2, #14
90015b86:	7403      	strb	r3, [r0, #16]
90015b88:	4629      	mov	r1, r5
90015b8a:	6145      	str	r5, [r0, #20]
90015b8c:	7605      	strb	r5, [r0, #24]
90015b8e:	83c5      	strh	r5, [r0, #30]
90015b90:	8405      	strh	r5, [r0, #32]
90015b92:	86c5      	strh	r5, [r0, #54]	; 0x36
90015b94:	8705      	strh	r5, [r0, #56]	; 0x38
90015b96:	87c5      	strh	r5, [r0, #62]	; 0x3e
90015b98:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90015b9c:	e9c0 5500 	strd	r5, r5, [r0]
90015ba0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90015ba4:	304c      	adds	r0, #76	; 0x4c
90015ba6:	f00d fc0d 	bl	900233c4 <memset>
90015baa:	2301      	movs	r3, #1
90015bac:	4620      	mov	r0, r4
90015bae:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90015bb2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015bb6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90015bba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90015bbe:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90015bc2:	f7ef fe5b 	bl	9000587c <_ZN8touchgfx12TextProvider18initializeInternalEv>
90015bc6:	4620      	mov	r0, r4
90015bc8:	bd38      	pop	{r3, r4, r5, pc}

90015bca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90015bca:	b530      	push	{r4, r5, lr}
90015bcc:	2500      	movs	r5, #0
90015bce:	2401      	movs	r4, #1
90015bd0:	6843      	ldr	r3, [r0, #4]
90015bd2:	b913      	cbnz	r3, 90015bda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90015bd4:	6803      	ldr	r3, [r0, #0]
90015bd6:	b313      	cbz	r3, 90015c1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015bd8:	6043      	str	r3, [r0, #4]
90015bda:	7e03      	ldrb	r3, [r0, #24]
90015bdc:	b143      	cbz	r3, 90015bf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90015bde:	6943      	ldr	r3, [r0, #20]
90015be0:	b12b      	cbz	r3, 90015bee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015be2:	881a      	ldrh	r2, [r3, #0]
90015be4:	b11a      	cbz	r2, 90015bee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015be6:	1c9a      	adds	r2, r3, #2
90015be8:	6142      	str	r2, [r0, #20]
90015bea:	8818      	ldrh	r0, [r3, #0]
90015bec:	bd30      	pop	{r4, r5, pc}
90015bee:	7605      	strb	r5, [r0, #24]
90015bf0:	6843      	ldr	r3, [r0, #4]
90015bf2:	8819      	ldrh	r1, [r3, #0]
90015bf4:	b199      	cbz	r1, 90015c1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015bf6:	1c9a      	adds	r2, r3, #2
90015bf8:	2902      	cmp	r1, #2
90015bfa:	6042      	str	r2, [r0, #4]
90015bfc:	d1f5      	bne.n	90015bea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90015bfe:	7c03      	ldrb	r3, [r0, #16]
90015c00:	2b01      	cmp	r3, #1
90015c02:	d8e5      	bhi.n	90015bd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015c04:	1c5a      	adds	r2, r3, #1
90015c06:	3302      	adds	r3, #2
90015c08:	7402      	strb	r2, [r0, #16]
90015c0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90015c0e:	6143      	str	r3, [r0, #20]
90015c10:	2b00      	cmp	r3, #0
90015c12:	d0dd      	beq.n	90015bd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015c14:	881b      	ldrh	r3, [r3, #0]
90015c16:	2b00      	cmp	r3, #0
90015c18:	d0da      	beq.n	90015bd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015c1a:	7604      	strb	r4, [r0, #24]
90015c1c:	e7d8      	b.n	90015bd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015c1e:	2000      	movs	r0, #0
90015c20:	e7e4      	b.n	90015bec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90015c22 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90015c22:	6001      	str	r1, [r0, #0]
90015c24:	2100      	movs	r1, #0
90015c26:	b430      	push	{r4, r5}
90015c28:	6041      	str	r1, [r0, #4]
90015c2a:	6815      	ldr	r5, [r2, #0]
90015c2c:	6085      	str	r5, [r0, #8]
90015c2e:	6852      	ldr	r2, [r2, #4]
90015c30:	6443      	str	r3, [r0, #68]	; 0x44
90015c32:	9b02      	ldr	r3, [sp, #8]
90015c34:	60c2      	str	r2, [r0, #12]
90015c36:	7401      	strb	r1, [r0, #16]
90015c38:	6141      	str	r1, [r0, #20]
90015c3a:	7601      	strb	r1, [r0, #24]
90015c3c:	8701      	strh	r1, [r0, #56]	; 0x38
90015c3e:	8401      	strh	r1, [r0, #32]
90015c40:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90015c44:	6483      	str	r3, [r0, #72]	; 0x48
90015c46:	bc30      	pop	{r4, r5}
90015c48:	f7ef be18 	b.w	9000587c <_ZN8touchgfx12TextProvider18initializeInternalEv>

90015c4c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90015c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
90015c4e:	4605      	mov	r5, r0
90015c50:	4608      	mov	r0, r1
90015c52:	b1f1      	cbz	r1, 90015c92 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90015c54:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90015c58:	460b      	mov	r3, r1
90015c5a:	f101 0708 	add.w	r7, r1, #8
90015c5e:	4622      	mov	r2, r4
90015c60:	6818      	ldr	r0, [r3, #0]
90015c62:	3308      	adds	r3, #8
90015c64:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015c68:	4626      	mov	r6, r4
90015c6a:	42bb      	cmp	r3, r7
90015c6c:	c603      	stmia	r6!, {r0, r1}
90015c6e:	4634      	mov	r4, r6
90015c70:	d1f6      	bne.n	90015c60 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90015c72:	6818      	ldr	r0, [r3, #0]
90015c74:	6030      	str	r0, [r6, #0]
90015c76:	4610      	mov	r0, r2
90015c78:	889b      	ldrh	r3, [r3, #4]
90015c7a:	80b3      	strh	r3, [r6, #4]
90015c7c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90015c80:	015b      	lsls	r3, r3, #5
90015c82:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015c86:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90015c8a:	430b      	orrs	r3, r1
90015c8c:	425b      	negs	r3, r3
90015c8e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90015c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015c94 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90015c94:	b538      	push	{r3, r4, r5, lr}
90015c96:	460c      	mov	r4, r1
90015c98:	6811      	ldr	r1, [r2, #0]
90015c9a:	4610      	mov	r0, r2
90015c9c:	68cd      	ldr	r5, [r1, #12]
90015c9e:	4619      	mov	r1, r3
90015ca0:	47a8      	blx	r5
90015ca2:	2800      	cmp	r0, #0
90015ca4:	bf08      	it	eq
90015ca6:	4620      	moveq	r0, r4
90015ca8:	bd38      	pop	{r3, r4, r5, pc}
	...

90015cac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90015cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015cae:	4604      	mov	r4, r0
90015cb0:	4615      	mov	r5, r2
90015cb2:	4608      	mov	r0, r1
90015cb4:	b93a      	cbnz	r2, 90015cc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90015cb6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015cba:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90015cbe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90015cc2:	4628      	mov	r0, r5
90015cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015cc6:	f892 c00d 	ldrb.w	ip, [r2, #13]
90015cca:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90015cce:	8893      	ldrh	r3, [r2, #4]
90015cd0:	ea4f 160c 	mov.w	r6, ip, lsl #4
90015cd4:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015cd8:	79ee      	ldrb	r6, [r5, #7]
90015cda:	4316      	orrs	r6, r2
90015cdc:	19da      	adds	r2, r3, r7
90015cde:	b291      	uxth	r1, r2
90015ce0:	b2b7      	uxth	r7, r6
90015ce2:	291d      	cmp	r1, #29
90015ce4:	d87b      	bhi.n	90015dde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015ce6:	2201      	movs	r2, #1
90015ce8:	10f6      	asrs	r6, r6, #3
90015cea:	408a      	lsls	r2, r1
90015cec:	4974      	ldr	r1, [pc, #464]	; (90015ec0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90015cee:	420a      	tst	r2, r1
90015cf0:	d12e      	bne.n	90015d50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90015cf2:	f412 7f60 	tst.w	r2, #896	; 0x380
90015cf6:	d072      	beq.n	90015dde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015cf8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90015cfc:	462b      	mov	r3, r5
90015cfe:	f105 0e08 	add.w	lr, r5, #8
90015d02:	4615      	mov	r5, r2
90015d04:	6818      	ldr	r0, [r3, #0]
90015d06:	3308      	adds	r3, #8
90015d08:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015d0c:	4694      	mov	ip, r2
90015d0e:	4573      	cmp	r3, lr
90015d10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90015d14:	4662      	mov	r2, ip
90015d16:	d1f5      	bne.n	90015d04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90015d18:	6818      	ldr	r0, [r3, #0]
90015d1a:	f8cc 0000 	str.w	r0, [ip]
90015d1e:	889b      	ldrh	r3, [r3, #4]
90015d20:	f8ac 3004 	strh.w	r3, [ip, #4]
90015d24:	b2b3      	uxth	r3, r6
90015d26:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90015d2a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90015d2e:	1aca      	subs	r2, r1, r3
90015d30:	1bcf      	subs	r7, r1, r7
90015d32:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90015d36:	b292      	uxth	r2, r2
90015d38:	1afb      	subs	r3, r7, r3
90015d3a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90015d3e:	10d2      	asrs	r2, r2, #3
90015d40:	f002 0260 	and.w	r2, r2, #96	; 0x60
90015d44:	4302      	orrs	r2, r0
90015d46:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90015d4a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90015d4e:	e7b8      	b.n	90015cc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015d50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90015d52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015d56:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90015d58:	f640 6333 	movw	r3, #3635	; 0xe33
90015d5c:	4299      	cmp	r1, r3
90015d5e:	d110      	bne.n	90015d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90015d60:	6803      	ldr	r3, [r0, #0]
90015d62:	68db      	ldr	r3, [r3, #12]
90015d64:	4798      	blx	r3
90015d66:	7b41      	ldrb	r1, [r0, #13]
90015d68:	00cb      	lsls	r3, r1, #3
90015d6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015d6e:	7a03      	ldrb	r3, [r0, #8]
90015d70:	0648      	lsls	r0, r1, #25
90015d72:	ea43 0302 	orr.w	r3, r3, r2
90015d76:	bf44      	itt	mi
90015d78:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015d7c:	b21b      	sxthmi	r3, r3
90015d7e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015d82:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90015d86:	462a      	mov	r2, r5
90015d88:	f105 0c08 	add.w	ip, r5, #8
90015d8c:	443b      	add	r3, r7
90015d8e:	4433      	add	r3, r6
90015d90:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90015d94:	b29b      	uxth	r3, r3
90015d96:	4635      	mov	r5, r6
90015d98:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015d9c:	6810      	ldr	r0, [r2, #0]
90015d9e:	3208      	adds	r2, #8
90015da0:	f852 1c04 	ldr.w	r1, [r2, #-4]
90015da4:	4637      	mov	r7, r6
90015da6:	4562      	cmp	r2, ip
90015da8:	c703      	stmia	r7!, {r0, r1}
90015daa:	463e      	mov	r6, r7
90015dac:	d1f6      	bne.n	90015d9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90015dae:	6810      	ldr	r0, [r2, #0]
90015db0:	6038      	str	r0, [r7, #0]
90015db2:	8892      	ldrh	r2, [r2, #4]
90015db4:	80ba      	strh	r2, [r7, #4]
90015db6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90015dba:	10db      	asrs	r3, r3, #3
90015dbc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015dc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015dc8:	4313      	orrs	r3, r2
90015dca:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90015dce:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015dd2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90015dd6:	1a9b      	subs	r3, r3, r2
90015dd8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90015ddc:	e771      	b.n	90015cc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015dde:	f023 0204 	bic.w	r2, r3, #4
90015de2:	f640 611b 	movw	r1, #3611	; 0xe1b
90015de6:	428a      	cmp	r2, r1
90015de8:	d003      	beq.n	90015df2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90015dea:	f640 621d 	movw	r2, #3613	; 0xe1d
90015dee:	4293      	cmp	r3, r2
90015df0:	d120      	bne.n	90015e34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90015df2:	3b01      	subs	r3, #1
90015df4:	4602      	mov	r2, r0
90015df6:	4629      	mov	r1, r5
90015df8:	4620      	mov	r0, r4
90015dfa:	b29b      	uxth	r3, r3
90015dfc:	f7ff ff4a 	bl	90015c94 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015e00:	7b41      	ldrb	r1, [r0, #13]
90015e02:	00cb      	lsls	r3, r1, #3
90015e04:	0649      	lsls	r1, r1, #25
90015e06:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015e0a:	7a03      	ldrb	r3, [r0, #8]
90015e0c:	ea43 0302 	orr.w	r3, r3, r2
90015e10:	bf44      	itt	mi
90015e12:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015e16:	b21b      	sxthmi	r3, r3
90015e18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015e1c:	7b6b      	ldrb	r3, [r5, #13]
90015e1e:	7aaa      	ldrb	r2, [r5, #10]
90015e20:	005b      	lsls	r3, r3, #1
90015e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015e26:	4313      	orrs	r3, r2
90015e28:	115a      	asrs	r2, r3, #5
90015e2a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90015e2e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015e32:	e035      	b.n	90015ea0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90015e34:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90015e38:	f01c 0f40 	tst.w	ip, #64	; 0x40
90015e3c:	f402 7180 	and.w	r1, r2, #256	; 0x100
90015e40:	7a2a      	ldrb	r2, [r5, #8]
90015e42:	ea42 0201 	orr.w	r2, r2, r1
90015e46:	f640 6109 	movw	r1, #3593	; 0xe09
90015e4a:	bf1c      	itt	ne
90015e4c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90015e50:	b212      	sxthne	r2, r2
90015e52:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015e56:	f023 0210 	bic.w	r2, r3, #16
90015e5a:	428a      	cmp	r2, r1
90015e5c:	d003      	beq.n	90015e66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90015e5e:	f640 6213 	movw	r2, #3603	; 0xe13
90015e62:	4293      	cmp	r3, r2
90015e64:	d129      	bne.n	90015eba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90015e66:	7b6e      	ldrb	r6, [r5, #13]
90015e68:	4629      	mov	r1, r5
90015e6a:	0076      	lsls	r6, r6, #1
90015e6c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015e70:	7aae      	ldrb	r6, [r5, #10]
90015e72:	4316      	orrs	r6, r2
90015e74:	f640 6213 	movw	r2, #3603	; 0xe13
90015e78:	4293      	cmp	r3, r2
90015e7a:	4602      	mov	r2, r0
90015e7c:	4620      	mov	r0, r4
90015e7e:	bf16      	itet	ne
90015e80:	f103 33ff 	addne.w	r3, r3, #4294967295
90015e84:	f640 630c 	movweq	r3, #3596	; 0xe0c
90015e88:	b29b      	uxthne	r3, r3
90015e8a:	f7ff ff03 	bl	90015c94 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015e8e:	7b43      	ldrb	r3, [r0, #13]
90015e90:	7a82      	ldrb	r2, [r0, #10]
90015e92:	005b      	lsls	r3, r3, #1
90015e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015e98:	4313      	orrs	r3, r2
90015e9a:	1af6      	subs	r6, r6, r3
90015e9c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90015ea0:	7b69      	ldrb	r1, [r5, #13]
90015ea2:	00cb      	lsls	r3, r1, #3
90015ea4:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015ea8:	7a2b      	ldrb	r3, [r5, #8]
90015eaa:	4313      	orrs	r3, r2
90015eac:	064a      	lsls	r2, r1, #25
90015eae:	bf44      	itt	mi
90015eb0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015eb4:	b21b      	sxthmi	r3, r3
90015eb6:	1bdb      	subs	r3, r3, r7
90015eb8:	e747      	b.n	90015d4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90015eba:	2300      	movs	r3, #0
90015ebc:	e7b7      	b.n	90015e2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90015ebe:	bf00      	nop
90015ec0:	3fc00079 	.word	0x3fc00079

90015ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90015ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015ec8:	4604      	mov	r4, r0
90015eca:	b942      	cbnz	r2, 90015ede <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90015ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015ed0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90015ed4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90015ed8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015edc:	e047      	b.n	90015f6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90015ede:	7b51      	ldrb	r1, [r2, #13]
90015ee0:	8893      	ldrh	r3, [r2, #4]
90015ee2:	010d      	lsls	r5, r1, #4
90015ee4:	f405 7080 	and.w	r0, r5, #256	; 0x100
90015ee8:	79d5      	ldrb	r5, [r2, #7]
90015eea:	4305      	orrs	r5, r0
90015eec:	2d04      	cmp	r5, #4
90015eee:	bfcc      	ite	gt
90015ef0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90015ef4:	f04f 0e01 	movle.w	lr, #1
90015ef8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90015efc:	f200 80ab 	bhi.w	90016056 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90015f00:	f240 60e7 	movw	r0, #1767	; 0x6e7
90015f04:	4283      	cmp	r3, r0
90015f06:	d216      	bcs.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f08:	f240 605b 	movw	r0, #1627	; 0x65b
90015f0c:	4283      	cmp	r3, r0
90015f0e:	d859      	bhi.n	90015fc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90015f10:	f240 6057 	movw	r0, #1623	; 0x657
90015f14:	4283      	cmp	r3, r0
90015f16:	d20e      	bcs.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f18:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015f1c:	d24a      	bcs.n	90015fb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90015f1e:	f240 604e 	movw	r0, #1614	; 0x64e
90015f22:	4283      	cmp	r3, r0
90015f24:	d207      	bcs.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f26:	f240 601a 	movw	r0, #1562	; 0x61a
90015f2a:	4283      	cmp	r3, r0
90015f2c:	d02a      	beq.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f2e:	d821      	bhi.n	90015f74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90015f30:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90015f34:	d35b      	bcc.n	90015fee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015f36:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90015f3a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015f3e:	f040 80d0 	bne.w	900160e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015f42:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90015f46:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015f4a:	f040 80ca 	bne.w	900160e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015f4e:	00cb      	lsls	r3, r1, #3
90015f50:	0649      	lsls	r1, r1, #25
90015f52:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015f56:	7a13      	ldrb	r3, [r2, #8]
90015f58:	ea43 0300 	orr.w	r3, r3, r0
90015f5c:	bf44      	itt	mi
90015f5e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015f62:	b21b      	sxthmi	r3, r3
90015f64:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015f68:	1b5d      	subs	r5, r3, r5
90015f6a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015f6e:	4610      	mov	r0, r2
90015f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015f74:	f240 604b 	movw	r0, #1611	; 0x64b
90015f78:	4283      	cmp	r3, r0
90015f7a:	d338      	bcc.n	90015fee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015f7c:	f240 604c 	movw	r0, #1612	; 0x64c
90015f80:	4283      	cmp	r3, r0
90015f82:	d9d8      	bls.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f84:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90015f88:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90015f8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015f90:	f040 80f3 	bne.w	9001617a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015f94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015f98:	f040 80ef 	bne.w	9001617a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015f9c:	00cb      	lsls	r3, r1, #3
90015f9e:	064e      	lsls	r6, r1, #25
90015fa0:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015fa4:	7a13      	ldrb	r3, [r2, #8]
90015fa6:	ea43 0300 	orr.w	r3, r3, r0
90015faa:	bf44      	itt	mi
90015fac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015fb0:	b21b      	sxthmi	r3, r3
90015fb2:	e7d9      	b.n	90015f68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90015fb4:	f240 6054 	movw	r0, #1620	; 0x654
90015fb8:	4283      	cmp	r3, r0
90015fba:	d8e3      	bhi.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015fbc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015fc0:	d9e0      	bls.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015fc2:	e7b8      	b.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015fc4:	f240 6074 	movw	r0, #1652	; 0x674
90015fc8:	4283      	cmp	r3, r0
90015fca:	d0b4      	beq.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015fcc:	d82d      	bhi.n	9001602a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90015fce:	f240 605e 	movw	r0, #1630	; 0x65e
90015fd2:	4283      	cmp	r3, r0
90015fd4:	d804      	bhi.n	90015fe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90015fd6:	f240 605d 	movw	r0, #1629	; 0x65d
90015fda:	4283      	cmp	r3, r0
90015fdc:	d3d2      	bcc.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015fde:	e7aa      	b.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015fe0:	f240 605f 	movw	r0, #1631	; 0x65f
90015fe4:	4283      	cmp	r3, r0
90015fe6:	d0cd      	beq.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015fe8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90015fec:	d0a3      	beq.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015fee:	00cb      	lsls	r3, r1, #3
90015ff0:	0649      	lsls	r1, r1, #25
90015ff2:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015ff6:	7a13      	ldrb	r3, [r2, #8]
90015ff8:	ea43 0300 	orr.w	r3, r3, r0
90015ffc:	bf44      	itt	mi
90015ffe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90016002:	b21b      	sxthmi	r3, r3
90016004:	1b5d      	subs	r5, r3, r5
90016006:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001600a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001600e:	7b53      	ldrb	r3, [r2, #13]
90016010:	015b      	lsls	r3, r3, #5
90016012:	f403 7180 	and.w	r1, r3, #256	; 0x100
90016016:	7993      	ldrb	r3, [r2, #6]
90016018:	430b      	orrs	r3, r1
9001601a:	2105      	movs	r1, #5
9001601c:	005b      	lsls	r3, r3, #1
9001601e:	fb93 f3f1 	sdiv	r3, r3, r1
90016022:	f992 1009 	ldrsb.w	r1, [r2, #9]
90016026:	440b      	add	r3, r1
90016028:	e756      	b.n	90015ed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001602a:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001602e:	4283      	cmp	r3, r0
90016030:	d809      	bhi.n	90016046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90016032:	f240 60df 	movw	r0, #1759	; 0x6df
90016036:	4283      	cmp	r3, r0
90016038:	f4bf af7d 	bcs.w	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001603c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90016040:	2b05      	cmp	r3, #5
90016042:	d8d4      	bhi.n	90015fee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90016044:	e777      	b.n	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016046:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001604a:	4283      	cmp	r3, r0
9001604c:	d09a      	beq.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001604e:	f240 60e4 	movw	r0, #1764	; 0x6e4
90016052:	4283      	cmp	r3, r0
90016054:	e7ca      	b.n	90015fec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90016056:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001605a:	d22b      	bcs.n	900160b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
9001605c:	f640 00ed 	movw	r0, #2285	; 0x8ed
90016060:	4283      	cmp	r3, r0
90016062:	d28f      	bcs.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016064:	f640 00e5 	movw	r0, #2277	; 0x8e5
90016068:	4283      	cmp	r3, r0
9001606a:	d816      	bhi.n	9001609a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
9001606c:	f640 00e4 	movw	r0, #2276	; 0x8e4
90016070:	4283      	cmp	r3, r0
90016072:	f4bf af60 	bcs.w	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016076:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001607a:	4283      	cmp	r3, r0
9001607c:	d80a      	bhi.n	90016094 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
9001607e:	f240 60eb 	movw	r0, #1771	; 0x6eb
90016082:	4283      	cmp	r3, r0
90016084:	f4bf af57 	bcs.w	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016088:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001608c:	4283      	cmp	r3, r0
9001608e:	f43f af79 	beq.w	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016092:	e7ac      	b.n	90015fee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90016094:	f240 60ed 	movw	r0, #1773	; 0x6ed
90016098:	e7f8      	b.n	9001608c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
9001609a:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001609e:	4283      	cmp	r3, r0
900160a0:	d802      	bhi.n	900160a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
900160a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
900160a6:	e798      	b.n	90015fda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
900160a8:	f640 00e9 	movw	r0, #2281	; 0x8e9
900160ac:	4283      	cmp	r3, r0
900160ae:	f47f af42 	bne.w	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900160b2:	e767      	b.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900160b4:	f640 00f6 	movw	r0, #2294	; 0x8f6
900160b8:	4283      	cmp	r3, r0
900160ba:	f43f af63 	beq.w	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900160be:	d802      	bhi.n	900160c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
900160c0:	f640 00f2 	movw	r0, #2290	; 0x8f2
900160c4:	e7f2      	b.n	900160ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
900160c6:	f640 00fa 	movw	r0, #2298	; 0x8fa
900160ca:	4283      	cmp	r3, r0
900160cc:	d805      	bhi.n	900160da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
900160ce:	f640 00f9 	movw	r0, #2297	; 0x8f9
900160d2:	4283      	cmp	r3, r0
900160d4:	f4ff af2f 	bcc.w	90015f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900160d8:	e754      	b.n	90015f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900160da:	f640 00fe 	movw	r0, #2302	; 0x8fe
900160de:	4283      	cmp	r3, r0
900160e0:	e7af      	b.n	90016042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
900160e2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
900160e6:	4617      	mov	r7, r2
900160e8:	f102 0808 	add.w	r8, r2, #8
900160ec:	4666      	mov	r6, ip
900160ee:	6838      	ldr	r0, [r7, #0]
900160f0:	3708      	adds	r7, #8
900160f2:	f857 1c04 	ldr.w	r1, [r7, #-4]
900160f6:	46e6      	mov	lr, ip
900160f8:	4547      	cmp	r7, r8
900160fa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
900160fe:	46f4      	mov	ip, lr
90016100:	d1f5      	bne.n	900160ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90016102:	6838      	ldr	r0, [r7, #0]
90016104:	f8ce 0000 	str.w	r0, [lr]
90016108:	88b9      	ldrh	r1, [r7, #4]
9001610a:	f8ae 1004 	strh.w	r1, [lr, #4]
9001610e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90016112:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90016116:	d009      	beq.n	9001612c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90016118:	7b51      	ldrb	r1, [r2, #13]
9001611a:	7992      	ldrb	r2, [r2, #6]
9001611c:	0149      	lsls	r1, r1, #5
9001611e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90016122:	4311      	orrs	r1, r2
90016124:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90016128:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001612c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016130:	b2ad      	uxth	r5, r5
90016132:	d00d      	beq.n	90016150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90016134:	442b      	add	r3, r5
90016136:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001613a:	b29b      	uxth	r3, r3
9001613c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90016140:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90016144:	10db      	asrs	r3, r3, #3
90016146:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001614a:	4313      	orrs	r3, r2
9001614c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90016150:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90016154:	00cb      	lsls	r3, r1, #3
90016156:	064f      	lsls	r7, r1, #25
90016158:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001615c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90016160:	ea43 0302 	orr.w	r3, r3, r2
90016164:	bf44      	itt	mi
90016166:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001616a:	b21b      	sxthmi	r3, r3
9001616c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90016170:	1b5b      	subs	r3, r3, r5
90016172:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90016176:	4632      	mov	r2, r6
90016178:	e6f9      	b.n	90015f6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001617a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001617e:	4617      	mov	r7, r2
90016180:	f102 0908 	add.w	r9, r2, #8
90016184:	4666      	mov	r6, ip
90016186:	6838      	ldr	r0, [r7, #0]
90016188:	3708      	adds	r7, #8
9001618a:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001618e:	46e0      	mov	r8, ip
90016190:	454f      	cmp	r7, r9
90016192:	e8a8 0003 	stmia.w	r8!, {r0, r1}
90016196:	46c4      	mov	ip, r8
90016198:	d1f5      	bne.n	90016186 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
9001619a:	6838      	ldr	r0, [r7, #0]
9001619c:	f8c8 0000 	str.w	r0, [r8]
900161a0:	88b9      	ldrh	r1, [r7, #4]
900161a2:	f8a8 1004 	strh.w	r1, [r8, #4]
900161a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
900161aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900161ae:	d009      	beq.n	900161c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
900161b0:	7b51      	ldrb	r1, [r2, #13]
900161b2:	7992      	ldrb	r2, [r2, #6]
900161b4:	0149      	lsls	r1, r1, #5
900161b6:	f401 7180 	and.w	r1, r1, #256	; 0x100
900161ba:	4311      	orrs	r1, r2
900161bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
900161c0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
900161c4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
900161c8:	d00e      	beq.n	900161e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
900161ca:	eba3 030e 	sub.w	r3, r3, lr
900161ce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
900161d2:	b29b      	uxth	r3, r3
900161d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900161d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
900161dc:	10db      	asrs	r3, r3, #3
900161de:	f003 0360 	and.w	r3, r3, #96	; 0x60
900161e2:	4313      	orrs	r3, r2
900161e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900161e8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
900161ec:	00cb      	lsls	r3, r1, #3
900161ee:	0648      	lsls	r0, r1, #25
900161f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
900161f4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
900161f8:	ea43 0302 	orr.w	r3, r3, r2
900161fc:	bf44      	itt	mi
900161fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90016202:	b21b      	sxthmi	r3, r3
90016204:	1b5d      	subs	r5, r3, r5
90016206:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001620a:	e7b4      	b.n	90016176 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

9001620c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016210:	461e      	mov	r6, r3
90016212:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016214:	4604      	mov	r4, r0
90016216:	4617      	mov	r7, r2
90016218:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001621c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90016220:	f7ef fadc 	bl	900057dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90016224:	4605      	mov	r5, r0
90016226:	b918      	cbnz	r0, 90016230 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90016228:	6030      	str	r0, [r6, #0]
9001622a:	4628      	mov	r0, r5
9001622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90016230:	683b      	ldr	r3, [r7, #0]
90016232:	4601      	mov	r1, r0
90016234:	4638      	mov	r0, r7
90016236:	68db      	ldr	r3, [r3, #12]
90016238:	4798      	blx	r3
9001623a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001623e:	4602      	mov	r2, r0
90016240:	6030      	str	r0, [r6, #0]
90016242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90016246:	d213      	bcs.n	90016270 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90016248:	4643      	mov	r3, r8
9001624a:	4639      	mov	r1, r7
9001624c:	4620      	mov	r0, r4
9001624e:	f7ff fe39 	bl	90015ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90016252:	6030      	str	r0, [r6, #0]
90016254:	6833      	ldr	r3, [r6, #0]
90016256:	b143      	cbz	r3, 9001626a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90016258:	7b5a      	ldrb	r2, [r3, #13]
9001625a:	7a9b      	ldrb	r3, [r3, #10]
9001625c:	0052      	lsls	r2, r2, #1
9001625e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90016262:	4313      	orrs	r3, r2
90016264:	bf0c      	ite	eq
90016266:	2301      	moveq	r3, #1
90016268:	2300      	movne	r3, #0
9001626a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001626e:	e7dc      	b.n	9001622a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90016270:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90016274:	b29b      	uxth	r3, r3
90016276:	2b7f      	cmp	r3, #127	; 0x7f
90016278:	d804      	bhi.n	90016284 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
9001627a:	4639      	mov	r1, r7
9001627c:	4620      	mov	r0, r4
9001627e:	f7ff fd15 	bl	90015cac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90016282:	e7e6      	b.n	90016252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90016284:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016288:	2b00      	cmp	r3, #0
9001628a:	d0e3      	beq.n	90016254 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001628c:	f640 1302 	movw	r3, #2306	; 0x902
90016290:	429d      	cmp	r5, r3
90016292:	d1df      	bne.n	90016254 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90016294:	4601      	mov	r1, r0
90016296:	4620      	mov	r0, r4
90016298:	f7ff fcd8 	bl	90015c4c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001629c:	e7d9      	b.n	90016252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

9001629e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001629e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900162a2:	461e      	mov	r6, r3
900162a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
900162a6:	4604      	mov	r4, r0
900162a8:	4617      	mov	r7, r2
900162aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900162ae:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
900162b2:	f7ef fa93 	bl	900057dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900162b6:	4605      	mov	r5, r0
900162b8:	b918      	cbnz	r0, 900162c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
900162ba:	6030      	str	r0, [r6, #0]
900162bc:	4628      	mov	r0, r5
900162be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900162c2:	683b      	ldr	r3, [r7, #0]
900162c4:	4601      	mov	r1, r0
900162c6:	4638      	mov	r0, r7
900162c8:	f8d3 9008 	ldr.w	r9, [r3, #8]
900162cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
900162d0:	47c8      	blx	r9
900162d2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
900162d6:	4602      	mov	r2, r0
900162d8:	6030      	str	r0, [r6, #0]
900162da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900162de:	d213      	bcs.n	90016308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
900162e0:	4643      	mov	r3, r8
900162e2:	4639      	mov	r1, r7
900162e4:	4620      	mov	r0, r4
900162e6:	f7ff fded 	bl	90015ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
900162ea:	6030      	str	r0, [r6, #0]
900162ec:	6833      	ldr	r3, [r6, #0]
900162ee:	b143      	cbz	r3, 90016302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
900162f0:	7b5a      	ldrb	r2, [r3, #13]
900162f2:	7a9b      	ldrb	r3, [r3, #10]
900162f4:	0052      	lsls	r2, r2, #1
900162f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
900162fa:	4313      	orrs	r3, r2
900162fc:	bf0c      	ite	eq
900162fe:	2301      	moveq	r3, #1
90016300:	2300      	movne	r3, #0
90016302:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90016306:	e7d9      	b.n	900162bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90016308:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001630c:	b29b      	uxth	r3, r3
9001630e:	2b7f      	cmp	r3, #127	; 0x7f
90016310:	d804      	bhi.n	9001631c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90016312:	4639      	mov	r1, r7
90016314:	4620      	mov	r0, r4
90016316:	f7ff fcc9 	bl	90015cac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001631a:	e7e6      	b.n	900162ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
9001631c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016320:	2b00      	cmp	r3, #0
90016322:	d0e3      	beq.n	900162ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90016324:	f640 1302 	movw	r3, #2306	; 0x902
90016328:	429d      	cmp	r5, r3
9001632a:	d1df      	bne.n	900162ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001632c:	4601      	mov	r1, r0
9001632e:	4620      	mov	r0, r4
90016330:	f7ff fc8c 	bl	90015c4c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90016334:	e7d9      	b.n	900162ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90016336 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90016336:	b510      	push	{r4, lr}
90016338:	4604      	mov	r4, r0
9001633a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
9001633e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016340:	b1e1      	cbz	r1, 9001637c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90016342:	2b0a      	cmp	r3, #10
90016344:	d02d      	beq.n	900163a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90016346:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90016348:	3901      	subs	r1, #1
9001634a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
9001634e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90016350:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90016354:	1c51      	adds	r1, r2, #1
90016356:	b289      	uxth	r1, r1
90016358:	2901      	cmp	r1, #1
9001635a:	bf8a      	itet	hi
9001635c:	f102 32ff 	addhi.w	r2, r2, #4294967295
90016360:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90016362:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90016364:	1c5a      	adds	r2, r3, #1
90016366:	8722      	strh	r2, [r4, #56]	; 0x38
90016368:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001636a:	4413      	add	r3, r2
9001636c:	b29b      	uxth	r3, r3
9001636e:	2b09      	cmp	r3, #9
90016370:	bf88      	it	hi
90016372:	3b0a      	subhi	r3, #10
90016374:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016378:	8458      	strh	r0, [r3, #34]	; 0x22
9001637a:	e7de      	b.n	9001633a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001637c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001637e:	2b0a      	cmp	r3, #10
90016380:	d00f      	beq.n	900163a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90016382:	4620      	mov	r0, r4
90016384:	f7ff fc21 	bl	90015bca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90016388:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001638a:	1c5a      	adds	r2, r3, #1
9001638c:	8722      	strh	r2, [r4, #56]	; 0x38
9001638e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90016390:	4413      	add	r3, r2
90016392:	b29b      	uxth	r3, r3
90016394:	2b09      	cmp	r3, #9
90016396:	bf88      	it	hi
90016398:	3b0a      	subhi	r3, #10
9001639a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001639e:	8458      	strh	r0, [r3, #34]	; 0x22
900163a0:	e7ec      	b.n	9001637c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
900163a2:	bd10      	pop	{r4, pc}

900163a4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
900163a4:	b538      	push	{r3, r4, r5, lr}
900163a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
900163a8:	4604      	mov	r4, r0
900163aa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
900163ae:	8c55      	ldrh	r5, [r2, #34]	; 0x22
900163b0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
900163b2:	3a01      	subs	r2, #1
900163b4:	8702      	strh	r2, [r0, #56]	; 0x38
900163b6:	1c5a      	adds	r2, r3, #1
900163b8:	b292      	uxth	r2, r2
900163ba:	2a09      	cmp	r2, #9
900163bc:	bf8a      	itet	hi
900163be:	3b09      	subhi	r3, #9
900163c0:	86c2      	strhls	r2, [r0, #54]	; 0x36
900163c2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
900163c4:	f7ff ffb7 	bl	90016336 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
900163c8:	8c23      	ldrh	r3, [r4, #32]
900163ca:	2b01      	cmp	r3, #1
900163cc:	bf9c      	itt	ls
900163ce:	3301      	addls	r3, #1
900163d0:	8423      	strhls	r3, [r4, #32]
900163d2:	8be3      	ldrh	r3, [r4, #30]
900163d4:	b90b      	cbnz	r3, 900163da <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
900163d6:	2302      	movs	r3, #2
900163d8:	83e3      	strh	r3, [r4, #30]
900163da:	8be3      	ldrh	r3, [r4, #30]
900163dc:	4628      	mov	r0, r5
900163de:	3b01      	subs	r3, #1
900163e0:	b29b      	uxth	r3, r3
900163e2:	83e3      	strh	r3, [r4, #30]
900163e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900163e8:	8365      	strh	r5, [r4, #26]
900163ea:	bd38      	pop	{r3, r4, r5, pc}

900163ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
900163ec:	428a      	cmp	r2, r1
900163ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900163f2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
900163f4:	d932      	bls.n	9001645c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
900163f6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
900163f8:	1a54      	subs	r4, r2, r1
900163fa:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
900163fe:	19ee      	adds	r6, r5, r7
90016400:	fa1f fe84 	uxth.w	lr, r4
90016404:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
90016408:	3e01      	subs	r6, #1
9001640a:	b2b4      	uxth	r4, r6
9001640c:	eba4 090e 	sub.w	r9, r4, lr
90016410:	fa1f f989 	uxth.w	r9, r9
90016414:	2c09      	cmp	r4, #9
90016416:	4626      	mov	r6, r4
90016418:	bf88      	it	hi
9001641a:	f1a4 060a 	subhi.w	r6, r4, #10
9001641e:	f1bc 0f00 	cmp.w	ip, #0
90016422:	f104 34ff 	add.w	r4, r4, #4294967295
90016426:	bf08      	it	eq
90016428:	f04f 0c02 	moveq.w	ip, #2
9001642c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90016430:	b2a4      	uxth	r4, r4
90016432:	f10c 3cff 	add.w	ip, ip, #4294967295
90016436:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001643a:	454c      	cmp	r4, r9
9001643c:	fa1f fc8c 	uxth.w	ip, ip
90016440:	eb00 064c 	add.w	r6, r0, ip, lsl #1
90016444:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
90016448:	d1e4      	bne.n	90016414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001644a:	eba5 050e 	sub.w	r5, r5, lr
9001644e:	eb0e 0408 	add.w	r4, lr, r8
90016452:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
90016456:	8705      	strh	r5, [r0, #56]	; 0x38
90016458:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001645c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001645e:	250a      	movs	r5, #10
90016460:	1a64      	subs	r4, r4, r1
90016462:	4439      	add	r1, r7
90016464:	b289      	uxth	r1, r1
90016466:	8704      	strh	r4, [r0, #56]	; 0x38
90016468:	2909      	cmp	r1, #9
9001646a:	bf88      	it	hi
9001646c:	390a      	subhi	r1, #10
9001646e:	86c1      	strh	r1, [r0, #54]	; 0x36
90016470:	b18a      	cbz	r2, 90016496 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90016472:	8f01      	ldrh	r1, [r0, #56]	; 0x38
90016474:	3a01      	subs	r2, #1
90016476:	3101      	adds	r1, #1
90016478:	b292      	uxth	r2, r2
9001647a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001647e:	8701      	strh	r1, [r0, #56]	; 0x38
90016480:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016482:	b901      	cbnz	r1, 90016486 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90016484:	86c5      	strh	r5, [r0, #54]	; 0x36
90016486:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016488:	3901      	subs	r1, #1
9001648a:	b289      	uxth	r1, r1
9001648c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001648e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90016492:	844c      	strh	r4, [r1, #34]	; 0x22
90016494:	e7ec      	b.n	90016470 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90016496:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001649a:	f7ff bf4c 	b.w	90016336 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001649e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001649e:	b570      	push	{r4, r5, r6, lr}
900164a0:	2500      	movs	r5, #0
900164a2:	4295      	cmp	r5, r2
900164a4:	d011      	beq.n	900164ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
900164a6:	8bc4      	ldrh	r4, [r0, #30]
900164a8:	f831 6b02 	ldrh.w	r6, [r1], #2
900164ac:	4414      	add	r4, r2
900164ae:	3c01      	subs	r4, #1
900164b0:	1b64      	subs	r4, r4, r5
900164b2:	b2a4      	uxth	r4, r4
900164b4:	2c01      	cmp	r4, #1
900164b6:	bf88      	it	hi
900164b8:	3c02      	subhi	r4, #2
900164ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
900164be:	8b64      	ldrh	r4, [r4, #26]
900164c0:	42b4      	cmp	r4, r6
900164c2:	d117      	bne.n	900164f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
900164c4:	3501      	adds	r5, #1
900164c6:	b2ad      	uxth	r5, r5
900164c8:	e7eb      	b.n	900164a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
900164ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
900164ce:	2400      	movs	r4, #0
900164d0:	4413      	add	r3, r2
900164d2:	b2a2      	uxth	r2, r4
900164d4:	429a      	cmp	r2, r3
900164d6:	da0f      	bge.n	900164f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
900164d8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
900164da:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
900164de:	3401      	adds	r4, #1
900164e0:	4432      	add	r2, r6
900164e2:	b292      	uxth	r2, r2
900164e4:	2a09      	cmp	r2, #9
900164e6:	bf88      	it	hi
900164e8:	3a0a      	subhi	r2, #10
900164ea:	eb00 0242 	add.w	r2, r0, r2, lsl #1
900164ee:	8c52      	ldrh	r2, [r2, #34]	; 0x22
900164f0:	42aa      	cmp	r2, r5
900164f2:	d0ee      	beq.n	900164d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
900164f4:	2000      	movs	r0, #0
900164f6:	bd70      	pop	{r4, r5, r6, pc}
900164f8:	2001      	movs	r0, #1
900164fa:	e7fc      	b.n	900164f6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

900164fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
900164fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016500:	4605      	mov	r5, r0
90016502:	4616      	mov	r6, r2
90016504:	1c8c      	adds	r4, r1, #2
90016506:	8809      	ldrh	r1, [r1, #0]
90016508:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001650c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90016510:	42b3      	cmp	r3, r6
90016512:	d124      	bne.n	9001655e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
90016514:	f3c1 2903 	ubfx	r9, r1, #8, #4
90016518:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001651c:	f001 070f 	and.w	r7, r1, #15
90016520:	4652      	mov	r2, sl
90016522:	f8cd 8000 	str.w	r8, [sp]
90016526:	464b      	mov	r3, r9
90016528:	4621      	mov	r1, r4
9001652a:	4628      	mov	r0, r5
9001652c:	f7ff ffb7 	bl	9001649e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
90016530:	4683      	mov	fp, r0
90016532:	b168      	cbz	r0, 90016550 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
90016534:	eb0a 0109 	add.w	r1, sl, r9
90016538:	463a      	mov	r2, r7
9001653a:	4628      	mov	r0, r5
9001653c:	4441      	add	r1, r8
9001653e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
90016542:	4649      	mov	r1, r9
90016544:	f7ff ff52 	bl	900163ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90016548:	4658      	mov	r0, fp
9001654a:	b003      	add	sp, #12
9001654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016550:	eb07 010a 	add.w	r1, r7, sl
90016554:	4449      	add	r1, r9
90016556:	4441      	add	r1, r8
90016558:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001655c:	e7d2      	b.n	90016504 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001655e:	f04f 0b00 	mov.w	fp, #0
90016562:	e7f1      	b.n	90016548 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90016564 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90016564:	b570      	push	{r4, r5, r6, lr}
90016566:	8810      	ldrh	r0, [r2, #0]
90016568:	4298      	cmp	r0, r3
9001656a:	d817      	bhi.n	9001659c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001656c:	1e48      	subs	r0, r1, #1
9001656e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90016572:	4298      	cmp	r0, r3
90016574:	d312      	bcc.n	9001659c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016576:	2400      	movs	r4, #0
90016578:	428c      	cmp	r4, r1
9001657a:	d20f      	bcs.n	9001659c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001657c:	1860      	adds	r0, r4, r1
9001657e:	1040      	asrs	r0, r0, #1
90016580:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90016584:	0085      	lsls	r5, r0, #2
90016586:	42b3      	cmp	r3, r6
90016588:	d902      	bls.n	90016590 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001658a:	3001      	adds	r0, #1
9001658c:	b284      	uxth	r4, r0
9001658e:	e7f3      	b.n	90016578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016590:	d201      	bcs.n	90016596 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90016592:	b281      	uxth	r1, r0
90016594:	e7f0      	b.n	90016578 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016596:	442a      	add	r2, r5
90016598:	8850      	ldrh	r0, [r2, #2]
9001659a:	bd70      	pop	{r4, r5, r6, pc}
9001659c:	2000      	movs	r0, #0
9001659e:	e7fc      	b.n	9001659a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

900165a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
900165a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900165a4:	6c45      	ldr	r5, [r0, #68]	; 0x44
900165a6:	4604      	mov	r4, r0
900165a8:	260b      	movs	r6, #11
900165aa:	886f      	ldrh	r7, [r5, #2]
900165ac:	087f      	lsrs	r7, r7, #1
900165ae:	3e01      	subs	r6, #1
900165b0:	d013      	beq.n	900165da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
900165b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
900165b4:	462a      	mov	r2, r5
900165b6:	4639      	mov	r1, r7
900165b8:	4620      	mov	r0, r4
900165ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900165be:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
900165c2:	4643      	mov	r3, r8
900165c4:	f7ff ffce 	bl	90016564 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
900165c8:	b138      	cbz	r0, 900165da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
900165ca:	eb05 0140 	add.w	r1, r5, r0, lsl #1
900165ce:	4642      	mov	r2, r8
900165d0:	4620      	mov	r0, r4
900165d2:	f7ff ff93 	bl	900164fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
900165d6:	2800      	cmp	r0, #0
900165d8:	d1e9      	bne.n	900165ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
900165da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

900165e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
900165e0:	b570      	push	{r4, r5, r6, lr}
900165e2:	694a      	ldr	r2, [r1, #20]
900165e4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
900165e6:	684b      	ldr	r3, [r1, #4]
900165e8:	1b54      	subs	r4, r2, r5
900165ea:	6ace      	ldr	r6, [r1, #44]	; 0x2c
900165ec:	f000 8106 	beq.w	900167fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
900165f0:	1b9b      	subs	r3, r3, r6
900165f2:	d003      	beq.n	900165fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
900165f4:	4363      	muls	r3, r4
900165f6:	2210      	movs	r2, #16
900165f8:	fb93 f3f2 	sdiv	r3, r3, r2
900165fc:	680c      	ldr	r4, [r1, #0]
900165fe:	698a      	ldr	r2, [r1, #24]
90016600:	1b65      	subs	r5, r4, r5
90016602:	f000 80fd 	beq.w	90016800 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
90016606:	1b92      	subs	r2, r2, r6
90016608:	d003      	beq.n	90016612 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001660a:	436a      	muls	r2, r5
9001660c:	2410      	movs	r4, #16
9001660e:	fb92 f2f4 	sdiv	r2, r2, r4
90016612:	1a9b      	subs	r3, r3, r2
90016614:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001683c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
90016618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001661c:	460a      	mov	r2, r1
9001661e:	ee07 3a90 	vmov	s15, r3
90016622:	f100 040c 	add.w	r4, r0, #12
90016626:	4603      	mov	r3, r0
90016628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001662c:	ee67 7a84 	vmul.f32	s15, s15, s8
90016630:	ee87 3a27 	vdiv.f32	s6, s14, s15
90016634:	eeb1 6a43 	vneg.f32	s12, s6
90016638:	edd2 7a02 	vldr	s15, [r2, #8]
9001663c:	3214      	adds	r2, #20
9001663e:	eec7 6a27 	vdiv.f32	s13, s14, s15
90016642:	ece3 6a01 	vstmia	r3!, {s13}
90016646:	429c      	cmp	r4, r3
90016648:	ed52 7a02 	vldr	s15, [r2, #-8]
9001664c:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016650:	edc3 7a02 	vstr	s15, [r3, #8]
90016654:	ed52 7a01 	vldr	s15, [r2, #-4]
90016658:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001665c:	edc3 7a05 	vstr	s15, [r3, #20]
90016660:	d1ea      	bne.n	90016638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
90016662:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016664:	698b      	ldr	r3, [r1, #24]
90016666:	edd0 4a02 	vldr	s9, [r0, #8]
9001666a:	1a9b      	subs	r3, r3, r2
9001666c:	edd0 3a00 	vldr	s7, [r0]
90016670:	edd0 6a01 	vldr	s13, [r0, #4]
90016674:	ee07 3a90 	vmov	s15, r3
90016678:	684b      	ldr	r3, [r1, #4]
9001667a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001667e:	ed90 5a05 	vldr	s10, [r0, #20]
90016682:	1a9b      	subs	r3, r3, r2
90016684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016688:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001668c:	ed90 2a03 	vldr	s4, [r0, #12]
90016690:	ee07 3a10 	vmov	s14, r3
90016694:	edd0 5a04 	vldr	s11, [r0, #16]
90016698:	ee67 7a84 	vmul.f32	s15, s15, s8
9001669c:	ed90 1a07 	vldr	s2, [r0, #28]
900166a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166a4:	edd0 2a06 	vldr	s5, [r0, #24]
900166a8:	ee75 5ac5 	vsub.f32	s11, s11, s10
900166ac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
900166b0:	ee27 7a04 	vmul.f32	s14, s14, s8
900166b4:	ee32 5a45 	vsub.f32	s10, s4, s10
900166b8:	eee6 7a87 	vfma.f32	s15, s13, s14
900166bc:	ee67 7a83 	vmul.f32	s15, s15, s6
900166c0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
900166c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900166c6:	694a      	ldr	r2, [r1, #20]
900166c8:	1b13      	subs	r3, r2, r4
900166ca:	ee07 3a10 	vmov	s14, r3
900166ce:	680b      	ldr	r3, [r1, #0]
900166d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166d4:	1b1b      	subs	r3, r3, r4
900166d6:	ee27 7a04 	vmul.f32	s14, s14, s8
900166da:	ee64 4ac7 	vnmul.f32	s9, s9, s14
900166de:	ee07 3a10 	vmov	s14, r3
900166e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900166e6:	ee27 7a04 	vmul.f32	s14, s14, s8
900166ea:	eee6 4a87 	vfma.f32	s9, s13, s14
900166ee:	ee64 4a86 	vmul.f32	s9, s9, s12
900166f2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
900166f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900166f8:	698b      	ldr	r3, [r1, #24]
900166fa:	1a9b      	subs	r3, r3, r2
900166fc:	ee06 3a90 	vmov	s13, r3
90016700:	684b      	ldr	r3, [r1, #4]
90016702:	1a9b      	subs	r3, r3, r2
90016704:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90016708:	ee07 3a10 	vmov	s14, r3
9001670c:	ee66 6a84 	vmul.f32	s13, s13, s8
90016710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016714:	ee65 6a66 	vnmul.f32	s13, s10, s13
90016718:	ee27 7a04 	vmul.f32	s14, s14, s8
9001671c:	eee5 6a87 	vfma.f32	s13, s11, s14
90016720:	ee66 6a83 	vmul.f32	s13, s13, s6
90016724:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
90016728:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001672a:	694a      	ldr	r2, [r1, #20]
9001672c:	1b13      	subs	r3, r2, r4
9001672e:	ee07 3a10 	vmov	s14, r3
90016732:	680b      	ldr	r3, [r1, #0]
90016734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016738:	1b1b      	subs	r3, r3, r4
9001673a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001673e:	ee25 5a47 	vnmul.f32	s10, s10, s14
90016742:	ee07 3a10 	vmov	s14, r3
90016746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001674a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001674e:	eea5 5a87 	vfma.f32	s10, s11, s14
90016752:	edd0 5a08 	vldr	s11, [r0, #32]
90016756:	ee31 1a65 	vsub.f32	s2, s2, s11
9001675a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001675e:	ee25 5a06 	vmul.f32	s10, s10, s12
90016762:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
90016766:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016768:	698b      	ldr	r3, [r1, #24]
9001676a:	1a9b      	subs	r3, r3, r2
9001676c:	ee07 3a10 	vmov	s14, r3
90016770:	684b      	ldr	r3, [r1, #4]
90016772:	1a9b      	subs	r3, r3, r2
90016774:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016778:	ee01 3a90 	vmov	s3, r3
9001677c:	ee27 7a04 	vmul.f32	s14, s14, s8
90016780:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90016784:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90016788:	ee61 1a84 	vmul.f32	s3, s3, s8
9001678c:	eea1 7a21 	vfma.f32	s14, s2, s3
90016790:	ee27 7a03 	vmul.f32	s14, s14, s6
90016794:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016798:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001679a:	694a      	ldr	r2, [r1, #20]
9001679c:	1b13      	subs	r3, r2, r4
9001679e:	ee03 3a10 	vmov	s6, r3
900167a2:	680b      	ldr	r3, [r1, #0]
900167a4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
900167a8:	1b1b      	subs	r3, r3, r4
900167aa:	ee23 3a04 	vmul.f32	s6, s6, s8
900167ae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
900167b2:	ee03 3a10 	vmov	s6, r3
900167b6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
900167ba:	ee23 4a04 	vmul.f32	s8, s6, s8
900167be:	eee1 5a04 	vfma.f32	s11, s2, s8
900167c2:	ee25 6a86 	vmul.f32	s12, s11, s12
900167c6:	ee62 5a67 	vnmul.f32	s11, s4, s15
900167ca:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
900167ce:	eee3 5aa6 	vfma.f32	s11, s7, s13
900167d2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
900167d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900167da:	dd13      	ble.n	90016804 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
900167dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900167e0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
900167e4:	63c3      	str	r3, [r0, #60]	; 0x3c
900167e6:	eee3 7a87 	vfma.f32	s15, s7, s14
900167ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900167ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900167f2:	dd15      	ble.n	90016820 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
900167f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900167f8:	6403      	str	r3, [r0, #64]	; 0x40
900167fa:	bd70      	pop	{r4, r5, r6, pc}
900167fc:	4623      	mov	r3, r4
900167fe:	e6fd      	b.n	900165fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016800:	462a      	mov	r2, r5
90016802:	e706      	b.n	90016612 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90016804:	d502      	bpl.n	9001680c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
90016806:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001680a:	e7e9      	b.n	900167e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001680c:	ee22 2a64 	vnmul.f32	s4, s4, s9
90016810:	eea3 2a85 	vfma.f32	s4, s7, s10
90016814:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
90016818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001681c:	dade      	bge.n	900167dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001681e:	e7f2      	b.n	90016806 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
90016820:	d502      	bpl.n	90016828 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
90016822:	f647 73ff 	movw	r3, #32767	; 0x7fff
90016826:	e7e7      	b.n	900167f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
90016828:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001682c:	eee3 4a86 	vfma.f32	s9, s7, s12
90016830:	eef5 4ac0 	vcmpe.f32	s9, #0.0
90016834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016838:	dadc      	bge.n	900167f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001683a:	e7f2      	b.n	90016822 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001683c:	3d800000 	.word	0x3d800000

90016840 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
90016840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016844:	2714      	movs	r7, #20
90016846:	435f      	muls	r7, r3
90016848:	eb02 0c07 	add.w	ip, r2, r7
9001684c:	f8dc 5004 	ldr.w	r5, [ip, #4]
90016850:	f115 0e0f 	adds.w	lr, r5, #15
90016854:	f100 80a2 	bmi.w	9001699c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
90016858:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001685c:	9c08      	ldr	r4, [sp, #32]
9001685e:	2614      	movs	r6, #20
90016860:	f8c0 e014 	str.w	lr, [r0, #20]
90016864:	4366      	muls	r6, r4
90016866:	eb02 0806 	add.w	r8, r2, r6
9001686a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001686e:	f115 040f 	adds.w	r4, r5, #15
90016872:	f100 809f 	bmi.w	900169b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
90016876:	1124      	asrs	r4, r4, #4
90016878:	eba4 040e 	sub.w	r4, r4, lr
9001687c:	6184      	str	r4, [r0, #24]
9001687e:	2c00      	cmp	r4, #0
90016880:	f000 808a 	beq.w	90016998 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
90016884:	f8dc 9004 	ldr.w	r9, [ip, #4]
90016888:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001688c:	5995      	ldr	r5, [r2, r6]
9001688e:	eba4 0809 	sub.w	r8, r4, r9
90016892:	59d4      	ldr	r4, [r2, r7]
90016894:	eba5 0a04 	sub.w	sl, r5, r4
90016898:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001689c:	ea4f 150a 	mov.w	r5, sl, lsl #4
900168a0:	fb0e fe05 	mul.w	lr, lr, r5
900168a4:	fb0a ee19 	mls	lr, sl, r9, lr
900168a8:	fb08 e404 	mla	r4, r8, r4, lr
900168ac:	3c01      	subs	r4, #1
900168ae:	19a4      	adds	r4, r4, r6
900168b0:	f100 808c 	bmi.w	900169cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
900168b4:	fb94 fef6 	sdiv	lr, r4, r6
900168b8:	fb06 441e 	mls	r4, r6, lr, r4
900168bc:	f8c0 e000 	str.w	lr, [r0]
900168c0:	6104      	str	r4, [r0, #16]
900168c2:	2d00      	cmp	r5, #0
900168c4:	f2c0 8095 	blt.w	900169f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
900168c8:	fb95 f4f6 	sdiv	r4, r5, r6
900168cc:	fb06 5514 	mls	r5, r6, r4, r5
900168d0:	6044      	str	r4, [r0, #4]
900168d2:	6085      	str	r5, [r0, #8]
900168d4:	60c6      	str	r6, [r0, #12]
900168d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
900168da:	f8dc 4004 	ldr.w	r4, [ip, #4]
900168de:	6945      	ldr	r5, [r0, #20]
900168e0:	59d2      	ldr	r2, [r2, r7]
900168e2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
900168e6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 90016a14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
900168ea:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900168ee:	ee07 4a10 	vmov	s14, r4
900168f2:	6804      	ldr	r4, [r0, #0]
900168f4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
900168f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900168fc:	ee07 2a90 	vmov	s15, r2
90016900:	ee27 7a26 	vmul.f32	s14, s14, s13
90016904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016908:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001690c:	edd3 6a00 	vldr	s13, [r3]
90016910:	eee6 6a07 	vfma.f32	s13, s12, s14
90016914:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
90016918:	eee6 6a27 	vfma.f32	s13, s12, s15
9001691c:	edc0 6a07 	vstr	s13, [r0, #28]
90016920:	edd0 6a01 	vldr	s13, [r0, #4]
90016924:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
90016928:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001692c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90016930:	eea6 6aa5 	vfma.f32	s12, s13, s11
90016934:	ed80 6a08 	vstr	s12, [r0, #32]
90016938:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001693a:	6242      	str	r2, [r0, #36]	; 0x24
9001693c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
90016940:	ed93 6a03 	vldr	s12, [r3, #12]
90016944:	eea5 6a87 	vfma.f32	s12, s11, s14
90016948:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001694c:	eea5 6aa7 	vfma.f32	s12, s11, s15
90016950:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
90016954:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90016958:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001695c:	eea6 6aa5 	vfma.f32	s12, s13, s11
90016960:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
90016964:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016966:	6302      	str	r2, [r0, #48]	; 0x30
90016968:	ed93 6a06 	vldr	s12, [r3, #24]
9001696c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90016970:	eea5 6a87 	vfma.f32	s12, s11, s14
90016974:	eeb0 7a46 	vmov.f32	s14, s12
90016978:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001697c:	eea6 7a27 	vfma.f32	s14, s12, s15
90016980:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016984:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90016988:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001698c:	eee6 7a87 	vfma.f32	s15, s13, s14
90016990:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
90016994:	6b4b      	ldr	r3, [r1, #52]	; 0x34
90016996:	63c3      	str	r3, [r0, #60]	; 0x3c
90016998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001699c:	2410      	movs	r4, #16
9001699e:	f1c5 0501 	rsb	r5, r5, #1
900169a2:	fb9e fef4 	sdiv	lr, lr, r4
900169a6:	f015 050f 	ands.w	r5, r5, #15
900169aa:	bf18      	it	ne
900169ac:	2501      	movne	r5, #1
900169ae:	ebae 0e05 	sub.w	lr, lr, r5
900169b2:	e753      	b.n	9001685c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
900169b4:	f04f 0910 	mov.w	r9, #16
900169b8:	f1c5 0501 	rsb	r5, r5, #1
900169bc:	fb94 f4f9 	sdiv	r4, r4, r9
900169c0:	f015 050f 	ands.w	r5, r5, #15
900169c4:	bf18      	it	ne
900169c6:	2501      	movne	r5, #1
900169c8:	1b64      	subs	r4, r4, r5
900169ca:	e755      	b.n	90016878 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
900169cc:	4264      	negs	r4, r4
900169ce:	fb94 fef6 	sdiv	lr, r4, r6
900169d2:	f1ce 0800 	rsb	r8, lr, #0
900169d6:	fb06 441e 	mls	r4, r6, lr, r4
900169da:	f8c0 8000 	str.w	r8, [r0]
900169de:	6104      	str	r4, [r0, #16]
900169e0:	2c00      	cmp	r4, #0
900169e2:	f43f af6e 	beq.w	900168c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
900169e6:	ea6f 0e0e 	mvn.w	lr, lr
900169ea:	1b34      	subs	r4, r6, r4
900169ec:	f8c0 e000 	str.w	lr, [r0]
900169f0:	e766      	b.n	900168c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
900169f2:	426d      	negs	r5, r5
900169f4:	fb95 f4f6 	sdiv	r4, r5, r6
900169f8:	f1c4 0e00 	rsb	lr, r4, #0
900169fc:	fb06 5514 	mls	r5, r6, r4, r5
90016a00:	f8c0 e004 	str.w	lr, [r0, #4]
90016a04:	6085      	str	r5, [r0, #8]
90016a06:	2d00      	cmp	r5, #0
90016a08:	f43f af64 	beq.w	900168d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
90016a0c:	43e4      	mvns	r4, r4
90016a0e:	1b75      	subs	r5, r6, r5
90016a10:	6044      	str	r4, [r0, #4]
90016a12:	e75e      	b.n	900168d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
90016a14:	3d800000 	.word	0x3d800000

90016a18 <_ZN8touchgfx7Unicode6strlenEPKt>:
90016a18:	4602      	mov	r2, r0
90016a1a:	b148      	cbz	r0, 90016a30 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
90016a1c:	2300      	movs	r3, #0
90016a1e:	b298      	uxth	r0, r3
90016a20:	3301      	adds	r3, #1
90016a22:	eb02 0143 	add.w	r1, r2, r3, lsl #1
90016a26:	f831 1c02 	ldrh.w	r1, [r1, #-2]
90016a2a:	2900      	cmp	r1, #0
90016a2c:	d1f7      	bne.n	90016a1e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
90016a2e:	4770      	bx	lr
90016a30:	4770      	bx	lr

90016a32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
90016a32:	b530      	push	{r4, r5, lr}
90016a34:	4604      	mov	r4, r0
90016a36:	b159      	cbz	r1, 90016a50 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
90016a38:	b148      	cbz	r0, 90016a4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
90016a3a:	2300      	movs	r3, #0
90016a3c:	b298      	uxth	r0, r3
90016a3e:	4282      	cmp	r2, r0
90016a40:	d905      	bls.n	90016a4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
90016a42:	5ccd      	ldrb	r5, [r1, r3]
90016a44:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
90016a48:	3301      	adds	r3, #1
90016a4a:	2d00      	cmp	r5, #0
90016a4c:	d1f6      	bne.n	90016a3c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
90016a4e:	bd30      	pop	{r4, r5, pc}
90016a50:	4608      	mov	r0, r1
90016a52:	e7fc      	b.n	90016a4e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

90016a54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
90016a54:	b5f0      	push	{r4, r5, r6, r7, lr}
90016a56:	468c      	mov	ip, r1
90016a58:	b08b      	sub	sp, #44	; 0x2c
90016a5a:	2100      	movs	r1, #0
90016a5c:	ae01      	add	r6, sp, #4
90016a5e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90016a62:	211f      	movs	r1, #31
90016a64:	fbb0 f7f3 	udiv	r7, r0, r3
90016a68:	fb03 0517 	mls	r5, r3, r7, r0
90016a6c:	4638      	mov	r0, r7
90016a6e:	b2ec      	uxtb	r4, r5
90016a70:	2d09      	cmp	r5, #9
90016a72:	bfd4      	ite	le
90016a74:	3430      	addle	r4, #48	; 0x30
90016a76:	3457      	addgt	r4, #87	; 0x57
90016a78:	b2e4      	uxtb	r4, r4
90016a7a:	558c      	strb	r4, [r1, r6]
90016a7c:	1e4c      	subs	r4, r1, #1
90016a7e:	b92f      	cbnz	r7, 90016a8c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90016a80:	4431      	add	r1, r6
90016a82:	4660      	mov	r0, ip
90016a84:	f7ff ffd5 	bl	90016a32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016a88:	b00b      	add	sp, #44	; 0x2c
90016a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016a8c:	4621      	mov	r1, r4
90016a8e:	e7e9      	b.n	90016a64 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

90016a90 <_ZN8touchgfx7Unicode4itoaElPtti>:
90016a90:	b5f0      	push	{r4, r5, r6, r7, lr}
90016a92:	4607      	mov	r7, r0
90016a94:	b08b      	sub	sp, #44	; 0x2c
90016a96:	4608      	mov	r0, r1
90016a98:	b341      	cbz	r1, 90016aec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016a9a:	1e99      	subs	r1, r3, #2
90016a9c:	2922      	cmp	r1, #34	; 0x22
90016a9e:	d825      	bhi.n	90016aec <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016aa0:	2100      	movs	r1, #0
90016aa2:	463c      	mov	r4, r7
90016aa4:	261f      	movs	r6, #31
90016aa6:	f10d 0c04 	add.w	ip, sp, #4
90016aaa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90016aae:	1e71      	subs	r1, r6, #1
90016ab0:	fb94 fef3 	sdiv	lr, r4, r3
90016ab4:	fb03 441e 	mls	r4, r3, lr, r4
90016ab8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
90016abc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
90016ac0:	b2ec      	uxtb	r4, r5
90016ac2:	2d09      	cmp	r5, #9
90016ac4:	bfd4      	ite	le
90016ac6:	3430      	addle	r4, #48	; 0x30
90016ac8:	3457      	addgt	r4, #87	; 0x57
90016aca:	b2e4      	uxtb	r4, r4
90016acc:	f80c 4006 	strb.w	r4, [ip, r6]
90016ad0:	4674      	mov	r4, lr
90016ad2:	b96c      	cbnz	r4, 90016af0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
90016ad4:	2f00      	cmp	r7, #0
90016ad6:	da05      	bge.n	90016ae4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
90016ad8:	ab0a      	add	r3, sp, #40	; 0x28
90016ada:	4419      	add	r1, r3
90016adc:	232d      	movs	r3, #45	; 0x2d
90016ade:	f801 3c24 	strb.w	r3, [r1, #-36]
90016ae2:	1eb1      	subs	r1, r6, #2
90016ae4:	3101      	adds	r1, #1
90016ae6:	4461      	add	r1, ip
90016ae8:	f7ff ffa3 	bl	90016a32 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016aec:	b00b      	add	sp, #44	; 0x2c
90016aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016af0:	460e      	mov	r6, r1
90016af2:	e7dc      	b.n	90016aae <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

90016af4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
90016af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016af8:	b085      	sub	sp, #20
90016afa:	4691      	mov	r9, r2
90016afc:	6802      	ldr	r2, [r0, #0]
90016afe:	4688      	mov	r8, r1
90016b00:	461c      	mov	r4, r3
90016b02:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
90016b06:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
90016b0a:	4683      	mov	fp, r0
90016b0c:	4610      	mov	r0, r2
90016b0e:	9103      	str	r1, [sp, #12]
90016b10:	9302      	str	r3, [sp, #8]
90016b12:	9201      	str	r2, [sp, #4]
90016b14:	f7ff ff80 	bl	90016a18 <_ZN8touchgfx7Unicode6strlenEPKt>
90016b18:	f1b8 0f00 	cmp.w	r8, #0
90016b1c:	bf0c      	ite	eq
90016b1e:	4684      	moveq	ip, r0
90016b20:	f100 0c01 	addne.w	ip, r0, #1
90016b24:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
90016b28:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
90016b2c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90016b2e:	fa1f fc8c 	uxth.w	ip, ip
90016b32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90016b34:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
90016b38:	9903      	ldr	r1, [sp, #12]
90016b3a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
90016b3e:	d041      	beq.n	90016bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016b40:	d834      	bhi.n	90016bac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
90016b42:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
90016b46:	d059      	beq.n	90016bfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
90016b48:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
90016b4c:	d03a      	beq.n	90016bc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90016b4e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
90016b52:	d034      	beq.n	90016bbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016b54:	2400      	movs	r4, #0
90016b56:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90016b5a:	3a01      	subs	r2, #1
90016b5c:	b169      	cbz	r1, 90016b7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016b5e:	9911      	ldr	r1, [sp, #68]	; 0x44
90016b60:	458c      	cmp	ip, r1
90016b62:	da09      	bge.n	90016b78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016b64:	eba1 010c 	sub.w	r1, r1, ip
90016b68:	b289      	uxth	r1, r1
90016b6a:	b933      	cbnz	r3, 90016b7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016b6c:	2e00      	cmp	r6, #0
90016b6e:	d051      	beq.n	90016c14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016b70:	2800      	cmp	r0, #0
90016b72:	d04f      	beq.n	90016c14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90016b74:	440c      	add	r4, r1
90016b76:	b2a4      	uxth	r4, r4
90016b78:	2100      	movs	r1, #0
90016b7a:	682b      	ldr	r3, [r5, #0]
90016b7c:	4293      	cmp	r3, r2
90016b7e:	da07      	bge.n	90016b90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016b80:	f1b8 0f00 	cmp.w	r8, #0
90016b84:	d004      	beq.n	90016b90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016b86:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
90016b8a:	682b      	ldr	r3, [r5, #0]
90016b8c:	3301      	adds	r3, #1
90016b8e:	602b      	str	r3, [r5, #0]
90016b90:	2730      	movs	r7, #48	; 0x30
90016b92:	2c00      	cmp	r4, #0
90016b94:	d04e      	beq.n	90016c34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016b96:	682e      	ldr	r6, [r5, #0]
90016b98:	3c01      	subs	r4, #1
90016b9a:	42b2      	cmp	r2, r6
90016b9c:	b2a4      	uxth	r4, r4
90016b9e:	dd49      	ble.n	90016c34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016ba0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016ba4:	682b      	ldr	r3, [r5, #0]
90016ba6:	3301      	adds	r3, #1
90016ba8:	602b      	str	r3, [r5, #0]
90016baa:	e7f2      	b.n	90016b92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
90016bac:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
90016bb0:	d01d      	beq.n	90016bee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
90016bb2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
90016bb6:	d002      	beq.n	90016bbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016bb8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
90016bbc:	e7c9      	b.n	90016b52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
90016bbe:	4684      	mov	ip, r0
90016bc0:	f04f 0800 	mov.w	r8, #0
90016bc4:	2c00      	cmp	r4, #0
90016bc6:	d0c6      	beq.n	90016b56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016bc8:	b947      	cbnz	r7, 90016bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016bca:	2801      	cmp	r0, #1
90016bcc:	d106      	bne.n	90016bdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016bce:	8814      	ldrh	r4, [r2, #0]
90016bd0:	2c30      	cmp	r4, #48	; 0x30
90016bd2:	bf02      	ittt	eq
90016bd4:	3202      	addeq	r2, #2
90016bd6:	4638      	moveq	r0, r7
90016bd8:	f8cb 2000 	streq.w	r2, [fp]
90016bdc:	45bc      	cmp	ip, r7
90016bde:	da14      	bge.n	90016c0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
90016be0:	b2bf      	uxth	r7, r7
90016be2:	eba7 040c 	sub.w	r4, r7, ip
90016be6:	46bc      	mov	ip, r7
90016be8:	b2a4      	uxth	r4, r4
90016bea:	2600      	movs	r6, #0
90016bec:	e7b3      	b.n	90016b56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016bee:	4684      	mov	ip, r0
90016bf0:	b16c      	cbz	r4, 90016c0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
90016bf2:	42b8      	cmp	r0, r7
90016bf4:	dd00      	ble.n	90016bf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
90016bf6:	b2b8      	uxth	r0, r7
90016bf8:	2400      	movs	r4, #0
90016bfa:	e003      	b.n	90016c04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
90016bfc:	f04f 0c01 	mov.w	ip, #1
90016c00:	2400      	movs	r4, #0
90016c02:	4660      	mov	r0, ip
90016c04:	4626      	mov	r6, r4
90016c06:	46a0      	mov	r8, r4
90016c08:	e7a5      	b.n	90016b56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016c0a:	2400      	movs	r4, #0
90016c0c:	e7ed      	b.n	90016bea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
90016c0e:	4626      	mov	r6, r4
90016c10:	46a0      	mov	r8, r4
90016c12:	e7a0      	b.n	90016b56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016c14:	2900      	cmp	r1, #0
90016c16:	d0b0      	beq.n	90016b7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016c18:	2720      	movs	r7, #32
90016c1a:	682e      	ldr	r6, [r5, #0]
90016c1c:	2900      	cmp	r1, #0
90016c1e:	d0ac      	beq.n	90016b7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016c20:	3901      	subs	r1, #1
90016c22:	4296      	cmp	r6, r2
90016c24:	b289      	uxth	r1, r1
90016c26:	daa7      	bge.n	90016b78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016c28:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016c2c:	682b      	ldr	r3, [r5, #0]
90016c2e:	3301      	adds	r3, #1
90016c30:	602b      	str	r3, [r5, #0]
90016c32:	e7f2      	b.n	90016c1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
90016c34:	b188      	cbz	r0, 90016c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016c36:	682b      	ldr	r3, [r5, #0]
90016c38:	3801      	subs	r0, #1
90016c3a:	429a      	cmp	r2, r3
90016c3c:	b280      	uxth	r0, r0
90016c3e:	dd0c      	ble.n	90016c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016c40:	f8db 3000 	ldr.w	r3, [fp]
90016c44:	1c9c      	adds	r4, r3, #2
90016c46:	f8cb 4000 	str.w	r4, [fp]
90016c4a:	881c      	ldrh	r4, [r3, #0]
90016c4c:	682b      	ldr	r3, [r5, #0]
90016c4e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
90016c52:	682b      	ldr	r3, [r5, #0]
90016c54:	3301      	adds	r3, #1
90016c56:	602b      	str	r3, [r5, #0]
90016c58:	e7ec      	b.n	90016c34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016c5a:	2620      	movs	r6, #32
90016c5c:	b151      	cbz	r1, 90016c74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016c5e:	6828      	ldr	r0, [r5, #0]
90016c60:	3901      	subs	r1, #1
90016c62:	4282      	cmp	r2, r0
90016c64:	b289      	uxth	r1, r1
90016c66:	dd05      	ble.n	90016c74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016c68:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
90016c6c:	682b      	ldr	r3, [r5, #0]
90016c6e:	3301      	adds	r3, #1
90016c70:	602b      	str	r3, [r5, #0]
90016c72:	e7f3      	b.n	90016c5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
90016c74:	b005      	add	sp, #20
90016c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016c7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
90016c7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90016c7e:	2400      	movs	r4, #0
90016c80:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
90016c84:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
90016c88:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
90016c8c:	8014      	strh	r4, [r2, #0]
90016c8e:	701c      	strb	r4, [r3, #0]
90016c90:	f888 4000 	strb.w	r4, [r8]
90016c94:	f88c 4000 	strb.w	r4, [ip]
90016c98:	f88e 4000 	strb.w	r4, [lr]
90016c9c:	703c      	strb	r4, [r7, #0]
90016c9e:	6804      	ldr	r4, [r0, #0]
90016ca0:	b1a4      	cbz	r4, 90016ccc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
90016ca2:	8824      	ldrh	r4, [r4, #0]
90016ca4:	f04f 0901 	mov.w	r9, #1
90016ca8:	b314      	cbz	r4, 90016cf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016caa:	2c2b      	cmp	r4, #43	; 0x2b
90016cac:	d001      	beq.n	90016cb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
90016cae:	2c20      	cmp	r4, #32
90016cb0:	d110      	bne.n	90016cd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
90016cb2:	8014      	strh	r4, [r2, #0]
90016cb4:	6804      	ldr	r4, [r0, #0]
90016cb6:	b10c      	cbz	r4, 90016cbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
90016cb8:	3402      	adds	r4, #2
90016cba:	6004      	str	r4, [r0, #0]
90016cbc:	680c      	ldr	r4, [r1, #0]
90016cbe:	b10c      	cbz	r4, 90016cc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
90016cc0:	3401      	adds	r4, #1
90016cc2:	600c      	str	r4, [r1, #0]
90016cc4:	6804      	ldr	r4, [r0, #0]
90016cc6:	b17c      	cbz	r4, 90016ce8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
90016cc8:	8824      	ldrh	r4, [r4, #0]
90016cca:	e7ed      	b.n	90016ca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016ccc:	680c      	ldr	r4, [r1, #0]
90016cce:	b17c      	cbz	r4, 90016cf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016cd0:	7824      	ldrb	r4, [r4, #0]
90016cd2:	e7e7      	b.n	90016ca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
90016cd4:	2c2d      	cmp	r4, #45	; 0x2d
90016cd6:	d102      	bne.n	90016cde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
90016cd8:	f883 9000 	strb.w	r9, [r3]
90016cdc:	e7ea      	b.n	90016cb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016cde:	2c23      	cmp	r4, #35	; 0x23
90016ce0:	d107      	bne.n	90016cf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
90016ce2:	f888 9000 	strb.w	r9, [r8]
90016ce6:	e7e5      	b.n	90016cb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016ce8:	680c      	ldr	r4, [r1, #0]
90016cea:	b10c      	cbz	r4, 90016cf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016cec:	7824      	ldrb	r4, [r4, #0]
90016cee:	e7db      	b.n	90016ca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016cf0:	2400      	movs	r4, #0
90016cf2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
90016cf6:	2b09      	cmp	r3, #9
90016cf8:	d901      	bls.n	90016cfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
90016cfa:	2c2a      	cmp	r4, #42	; 0x2a
90016cfc:	d122      	bne.n	90016d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016cfe:	2301      	movs	r3, #1
90016d00:	2c30      	cmp	r4, #48	; 0x30
90016d02:	f88e 3000 	strb.w	r3, [lr]
90016d06:	d10d      	bne.n	90016d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016d08:	f88c 3000 	strb.w	r3, [ip]
90016d0c:	6803      	ldr	r3, [r0, #0]
90016d0e:	b10b      	cbz	r3, 90016d14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
90016d10:	3302      	adds	r3, #2
90016d12:	6003      	str	r3, [r0, #0]
90016d14:	680b      	ldr	r3, [r1, #0]
90016d16:	b10b      	cbz	r3, 90016d1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
90016d18:	3301      	adds	r3, #1
90016d1a:	600b      	str	r3, [r1, #0]
90016d1c:	6803      	ldr	r3, [r0, #0]
90016d1e:	2b00      	cmp	r3, #0
90016d20:	d02f      	beq.n	90016d82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
90016d22:	881c      	ldrh	r4, [r3, #0]
90016d24:	2c2a      	cmp	r4, #42	; 0x2a
90016d26:	d135      	bne.n	90016d94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016d28:	f04f 33ff 	mov.w	r3, #4294967295
90016d2c:	6033      	str	r3, [r6, #0]
90016d2e:	6803      	ldr	r3, [r0, #0]
90016d30:	b10b      	cbz	r3, 90016d36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
90016d32:	3302      	adds	r3, #2
90016d34:	6003      	str	r3, [r0, #0]
90016d36:	680b      	ldr	r3, [r1, #0]
90016d38:	b10b      	cbz	r3, 90016d3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
90016d3a:	3301      	adds	r3, #1
90016d3c:	600b      	str	r3, [r1, #0]
90016d3e:	6803      	ldr	r3, [r0, #0]
90016d40:	b31b      	cbz	r3, 90016d8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
90016d42:	881c      	ldrh	r4, [r3, #0]
90016d44:	2c2e      	cmp	r4, #46	; 0x2e
90016d46:	d11a      	bne.n	90016d7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016d48:	2301      	movs	r3, #1
90016d4a:	703b      	strb	r3, [r7, #0]
90016d4c:	6803      	ldr	r3, [r0, #0]
90016d4e:	b10b      	cbz	r3, 90016d54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90016d50:	3302      	adds	r3, #2
90016d52:	6003      	str	r3, [r0, #0]
90016d54:	680b      	ldr	r3, [r1, #0]
90016d56:	b10b      	cbz	r3, 90016d5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
90016d58:	3301      	adds	r3, #1
90016d5a:	600b      	str	r3, [r1, #0]
90016d5c:	6803      	ldr	r3, [r0, #0]
90016d5e:	2b00      	cmp	r3, #0
90016d60:	d036      	beq.n	90016dd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
90016d62:	881b      	ldrh	r3, [r3, #0]
90016d64:	2b2a      	cmp	r3, #42	; 0x2a
90016d66:	d137      	bne.n	90016dd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016d68:	f04f 33ff 	mov.w	r3, #4294967295
90016d6c:	602b      	str	r3, [r5, #0]
90016d6e:	6803      	ldr	r3, [r0, #0]
90016d70:	b10b      	cbz	r3, 90016d76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
90016d72:	3302      	adds	r3, #2
90016d74:	6003      	str	r3, [r0, #0]
90016d76:	680b      	ldr	r3, [r1, #0]
90016d78:	b10b      	cbz	r3, 90016d7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016d7a:	3301      	adds	r3, #1
90016d7c:	600b      	str	r3, [r1, #0]
90016d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90016d82:	680c      	ldr	r4, [r1, #0]
90016d84:	b134      	cbz	r4, 90016d94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016d86:	7824      	ldrb	r4, [r4, #0]
90016d88:	e7cc      	b.n	90016d24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016d8a:	680b      	ldr	r3, [r1, #0]
90016d8c:	2b00      	cmp	r3, #0
90016d8e:	d0f6      	beq.n	90016d7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016d90:	781c      	ldrb	r4, [r3, #0]
90016d92:	e7d7      	b.n	90016d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016d94:	2300      	movs	r3, #0
90016d96:	220a      	movs	r2, #10
90016d98:	6033      	str	r3, [r6, #0]
90016d9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
90016d9e:	fa1f f38c 	uxth.w	r3, ip
90016da2:	2b09      	cmp	r3, #9
90016da4:	d8ce      	bhi.n	90016d44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016da6:	6833      	ldr	r3, [r6, #0]
90016da8:	fb02 c303 	mla	r3, r2, r3, ip
90016dac:	6033      	str	r3, [r6, #0]
90016dae:	6803      	ldr	r3, [r0, #0]
90016db0:	b10b      	cbz	r3, 90016db6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
90016db2:	3302      	adds	r3, #2
90016db4:	6003      	str	r3, [r0, #0]
90016db6:	680b      	ldr	r3, [r1, #0]
90016db8:	b10b      	cbz	r3, 90016dbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
90016dba:	3301      	adds	r3, #1
90016dbc:	600b      	str	r3, [r1, #0]
90016dbe:	6803      	ldr	r3, [r0, #0]
90016dc0:	b10b      	cbz	r3, 90016dc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
90016dc2:	881c      	ldrh	r4, [r3, #0]
90016dc4:	e7e9      	b.n	90016d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016dc6:	680c      	ldr	r4, [r1, #0]
90016dc8:	2c00      	cmp	r4, #0
90016dca:	d0e6      	beq.n	90016d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016dcc:	7824      	ldrb	r4, [r4, #0]
90016dce:	e7e4      	b.n	90016d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016dd0:	680b      	ldr	r3, [r1, #0]
90016dd2:	b10b      	cbz	r3, 90016dd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016dd4:	781b      	ldrb	r3, [r3, #0]
90016dd6:	e7c5      	b.n	90016d64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
90016dd8:	2200      	movs	r2, #0
90016dda:	240a      	movs	r4, #10
90016ddc:	602a      	str	r2, [r5, #0]
90016dde:	3b30      	subs	r3, #48	; 0x30
90016de0:	682a      	ldr	r2, [r5, #0]
90016de2:	b29e      	uxth	r6, r3
90016de4:	2e09      	cmp	r6, #9
90016de6:	d813      	bhi.n	90016e10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
90016de8:	fb04 3302 	mla	r3, r4, r2, r3
90016dec:	602b      	str	r3, [r5, #0]
90016dee:	6803      	ldr	r3, [r0, #0]
90016df0:	b10b      	cbz	r3, 90016df6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
90016df2:	3302      	adds	r3, #2
90016df4:	6003      	str	r3, [r0, #0]
90016df6:	680b      	ldr	r3, [r1, #0]
90016df8:	b10b      	cbz	r3, 90016dfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
90016dfa:	3301      	adds	r3, #1
90016dfc:	600b      	str	r3, [r1, #0]
90016dfe:	6803      	ldr	r3, [r0, #0]
90016e00:	b10b      	cbz	r3, 90016e06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
90016e02:	881b      	ldrh	r3, [r3, #0]
90016e04:	e7eb      	b.n	90016dde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016e06:	680b      	ldr	r3, [r1, #0]
90016e08:	2b00      	cmp	r3, #0
90016e0a:	d0e8      	beq.n	90016dde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016e0c:	781b      	ldrb	r3, [r3, #0]
90016e0e:	e7e6      	b.n	90016dde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016e10:	2a06      	cmp	r2, #6
90016e12:	bfa8      	it	ge
90016e14:	2206      	movge	r2, #6
90016e16:	602a      	str	r2, [r5, #0]
90016e18:	e7b1      	b.n	90016d7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

90016e1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
90016e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016e1e:	b0a3      	sub	sp, #140	; 0x8c
90016e20:	2600      	movs	r6, #0
90016e22:	4607      	mov	r7, r0
90016e24:	4688      	mov	r8, r1
90016e26:	f10d 0944 	add.w	r9, sp, #68	; 0x44
90016e2a:	4631      	mov	r1, r6
90016e2c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
90016e2e:	4648      	mov	r0, r9
90016e30:	960d      	str	r6, [sp, #52]	; 0x34
90016e32:	e9cd 3208 	strd	r3, r2, [sp, #32]
90016e36:	2242      	movs	r2, #66	; 0x42
90016e38:	f00c fac4 	bl	900233c4 <memset>
90016e3c:	b15f      	cbz	r7, 90016e56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
90016e3e:	f108 3aff 	add.w	sl, r8, #4294967295
90016e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016e46:	b152      	cbz	r2, 90016e5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
90016e48:	8812      	ldrh	r2, [r2, #0]
90016e4a:	b10a      	cbz	r2, 90016e50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016e4c:	459a      	cmp	sl, r3
90016e4e:	dc2e      	bgt.n	90016eae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90016e50:	2200      	movs	r2, #0
90016e52:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016e56:	4638      	mov	r0, r7
90016e58:	b023      	add	sp, #140	; 0x8c
90016e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016e5e:	9a08      	ldr	r2, [sp, #32]
90016e60:	2a00      	cmp	r2, #0
90016e62:	d0f5      	beq.n	90016e50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016e64:	7812      	ldrb	r2, [r2, #0]
90016e66:	e7f0      	b.n	90016e4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
90016e68:	2d00      	cmp	r5, #0
90016e6a:	d0ea      	beq.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e6c:	782a      	ldrb	r2, [r5, #0]
90016e6e:	b142      	cbz	r2, 90016e82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90016e70:	2a25      	cmp	r2, #37	; 0x25
90016e72:	d001      	beq.n	90016e78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
90016e74:	459a      	cmp	sl, r3
90016e76:	dc08      	bgt.n	90016e8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
90016e78:	f1bb 0f00 	cmp.w	fp, #0
90016e7c:	d121      	bne.n	90016ec2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
90016e7e:	2d00      	cmp	r5, #0
90016e80:	d0df      	beq.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e82:	782a      	ldrb	r2, [r5, #0]
90016e84:	f04f 0b00 	mov.w	fp, #0
90016e88:	e01d      	b.n	90016ec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
90016e8a:	f1bb 0f00 	cmp.w	fp, #0
90016e8e:	d077      	beq.n	90016f80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
90016e90:	f8bb 2000 	ldrh.w	r2, [fp]
90016e94:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016e98:	f1bb 0f00 	cmp.w	fp, #0
90016e9c:	d002      	beq.n	90016ea4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
90016e9e:	f10b 0202 	add.w	r2, fp, #2
90016ea2:	9209      	str	r2, [sp, #36]	; 0x24
90016ea4:	b10d      	cbz	r5, 90016eaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
90016ea6:	3501      	adds	r5, #1
90016ea8:	9508      	str	r5, [sp, #32]
90016eaa:	3301      	adds	r3, #1
90016eac:	930d      	str	r3, [sp, #52]	; 0x34
90016eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016eb0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
90016eb4:	f1bb 0f00 	cmp.w	fp, #0
90016eb8:	d0d6      	beq.n	90016e68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
90016eba:	f8bb 2000 	ldrh.w	r2, [fp]
90016ebe:	2a00      	cmp	r2, #0
90016ec0:	d1d6      	bne.n	90016e70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
90016ec2:	f8bb 2000 	ldrh.w	r2, [fp]
90016ec6:	2a00      	cmp	r2, #0
90016ec8:	d0bb      	beq.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016eca:	459a      	cmp	sl, r3
90016ecc:	ddb9      	ble.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016ece:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
90016ed2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
90016ed6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
90016eda:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
90016ede:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
90016ee2:	960e      	str	r6, [sp, #56]	; 0x38
90016ee4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
90016ee8:	960f      	str	r6, [sp, #60]	; 0x3c
90016eea:	f1bb 0f00 	cmp.w	fp, #0
90016eee:	d002      	beq.n	90016ef6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
90016ef0:	f10b 0302 	add.w	r3, fp, #2
90016ef4:	9309      	str	r3, [sp, #36]	; 0x24
90016ef6:	b10d      	cbz	r5, 90016efc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
90016ef8:	1c6b      	adds	r3, r5, #1
90016efa:	9308      	str	r3, [sp, #32]
90016efc:	ab0f      	add	r3, sp, #60	; 0x3c
90016efe:	f10d 0232 	add.w	r2, sp, #50	; 0x32
90016f02:	a908      	add	r1, sp, #32
90016f04:	a809      	add	r0, sp, #36	; 0x24
90016f06:	9305      	str	r3, [sp, #20]
90016f08:	f10d 0331 	add.w	r3, sp, #49	; 0x31
90016f0c:	9304      	str	r3, [sp, #16]
90016f0e:	ab0e      	add	r3, sp, #56	; 0x38
90016f10:	9303      	str	r3, [sp, #12]
90016f12:	ab0c      	add	r3, sp, #48	; 0x30
90016f14:	9302      	str	r3, [sp, #8]
90016f16:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
90016f1a:	9301      	str	r3, [sp, #4]
90016f1c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
90016f20:	9300      	str	r3, [sp, #0]
90016f22:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
90016f26:	f7ff fea8 	bl	90016c7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
90016f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016f2c:	2b00      	cmp	r3, #0
90016f2e:	bfbf      	itttt	lt
90016f30:	6823      	ldrlt	r3, [r4, #0]
90016f32:	3404      	addlt	r4, #4
90016f34:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016f38:	930e      	strlt	r3, [sp, #56]	; 0x38
90016f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016f3c:	2b00      	cmp	r3, #0
90016f3e:	bfbe      	ittt	lt
90016f40:	6823      	ldrlt	r3, [r4, #0]
90016f42:	3404      	addlt	r4, #4
90016f44:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016f48:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90016f4c:	bfb8      	it	lt
90016f4e:	930f      	strlt	r3, [sp, #60]	; 0x3c
90016f50:	b1d9      	cbz	r1, 90016f8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
90016f52:	880b      	ldrh	r3, [r1, #0]
90016f54:	2b69      	cmp	r3, #105	; 0x69
90016f56:	d01f      	beq.n	90016f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f58:	d82f      	bhi.n	90016fba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
90016f5a:	2b58      	cmp	r3, #88	; 0x58
90016f5c:	d01c      	beq.n	90016f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016f5e:	d818      	bhi.n	90016f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90016f60:	2b25      	cmp	r3, #37	; 0x25
90016f62:	d034      	beq.n	90016fce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
90016f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016f66:	e9cd 5b08 	strd	r5, fp, [sp, #32]
90016f6a:	f1bb 0f00 	cmp.w	fp, #0
90016f6e:	f000 80b7 	beq.w	900170e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
90016f72:	f8bb 5000 	ldrh.w	r5, [fp]
90016f76:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
90016f7a:	3301      	adds	r3, #1
90016f7c:	930d      	str	r3, [sp, #52]	; 0x34
90016f7e:	e029      	b.n	90016fd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016f80:	b10d      	cbz	r5, 90016f86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
90016f82:	782a      	ldrb	r2, [r5, #0]
90016f84:	e786      	b.n	90016e94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016f86:	462a      	mov	r2, r5
90016f88:	e784      	b.n	90016e94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016f8a:	2a00      	cmp	r2, #0
90016f8c:	d0ea      	beq.n	90016f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016f8e:	7813      	ldrb	r3, [r2, #0]
90016f90:	e7e0      	b.n	90016f54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
90016f92:	3b63      	subs	r3, #99	; 0x63
90016f94:	2b01      	cmp	r3, #1
90016f96:	d8e5      	bhi.n	90016f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016f98:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
90016f9c:	b329      	cbz	r1, 90016fea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
90016f9e:	880b      	ldrh	r3, [r1, #0]
90016fa0:	2b69      	cmp	r3, #105	; 0x69
90016fa2:	d063      	beq.n	9001706c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016fa4:	d825      	bhi.n	90016ff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
90016fa6:	2b63      	cmp	r3, #99	; 0x63
90016fa8:	d038      	beq.n	9001701c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
90016faa:	2b64      	cmp	r3, #100	; 0x64
90016fac:	d05e      	beq.n	9001706c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016fae:	2b58      	cmp	r3, #88	; 0x58
90016fb0:	d07a      	beq.n	900170a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
90016fb2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90016fb6:	4625      	mov	r5, r4
90016fb8:	e036      	b.n	90017028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016fba:	2b73      	cmp	r3, #115	; 0x73
90016fbc:	d0ec      	beq.n	90016f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016fbe:	d802      	bhi.n	90016fc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
90016fc0:	2b6f      	cmp	r3, #111	; 0x6f
90016fc2:	d1cf      	bne.n	90016f64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016fc4:	e7e8      	b.n	90016f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016fc6:	2b75      	cmp	r3, #117	; 0x75
90016fc8:	d0e6      	beq.n	90016f98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016fca:	2b78      	cmp	r3, #120	; 0x78
90016fcc:	e7f9      	b.n	90016fc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
90016fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016fd0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
90016fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016fd6:	b10b      	cbz	r3, 90016fdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
90016fd8:	3302      	adds	r3, #2
90016fda:	9309      	str	r3, [sp, #36]	; 0x24
90016fdc:	9b08      	ldr	r3, [sp, #32]
90016fde:	2b00      	cmp	r3, #0
90016fe0:	f43f af2f 	beq.w	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016fe4:	3301      	adds	r3, #1
90016fe6:	9308      	str	r3, [sp, #32]
90016fe8:	e72b      	b.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016fea:	2a00      	cmp	r2, #0
90016fec:	d0e1      	beq.n	90016fb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016fee:	7813      	ldrb	r3, [r2, #0]
90016ff0:	e7d6      	b.n	90016fa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
90016ff2:	2b73      	cmp	r3, #115	; 0x73
90016ff4:	d036      	beq.n	90017064 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
90016ff6:	d807      	bhi.n	90017008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
90016ff8:	2b6f      	cmp	r3, #111	; 0x6f
90016ffa:	d1da      	bne.n	90016fb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016ffe:	1d25      	adds	r5, r4, #4
90017000:	2308      	movs	r3, #8
90017002:	eba8 0202 	sub.w	r2, r8, r2
90017006:	e049      	b.n	9001709c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90017008:	2b75      	cmp	r3, #117	; 0x75
9001700a:	d042      	beq.n	90017092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001700c:	2b78      	cmp	r3, #120	; 0x78
9001700e:	d1d0      	bne.n	90016fb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90017010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90017012:	1d25      	adds	r5, r4, #4
90017014:	2310      	movs	r3, #16
90017016:	eba8 0202 	sub.w	r2, r8, r2
9001701a:	e03f      	b.n	9001709c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001701c:	6823      	ldr	r3, [r4, #0]
9001701e:	1d25      	adds	r5, r4, #4
90017020:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
90017024:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
90017028:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001702a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001702e:	2b00      	cmp	r3, #0
90017030:	d051      	beq.n	900170d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
90017032:	881a      	ldrh	r2, [r3, #0]
90017034:	a80d      	add	r0, sp, #52	; 0x34
90017036:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001703a:	462c      	mov	r4, r5
9001703c:	9005      	str	r0, [sp, #20]
9001703e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
90017042:	9004      	str	r0, [sp, #16]
90017044:	980e      	ldr	r0, [sp, #56]	; 0x38
90017046:	9003      	str	r0, [sp, #12]
90017048:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001704c:	9002      	str	r0, [sp, #8]
9001704e:	980f      	ldr	r0, [sp, #60]	; 0x3c
90017050:	9001      	str	r0, [sp, #4]
90017052:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
90017056:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001705a:	9000      	str	r0, [sp, #0]
9001705c:	a810      	add	r0, sp, #64	; 0x40
9001705e:	f7ff fd49 	bl	90016af4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90017062:	e7b7      	b.n	90016fd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90017064:	1d25      	adds	r5, r4, #4
90017066:	6823      	ldr	r3, [r4, #0]
90017068:	9310      	str	r3, [sp, #64]	; 0x40
9001706a:	e7dd      	b.n	90017028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001706c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001706e:	230a      	movs	r3, #10
90017070:	4649      	mov	r1, r9
90017072:	6820      	ldr	r0, [r4, #0]
90017074:	eba8 0202 	sub.w	r2, r8, r2
90017078:	1d25      	adds	r5, r4, #4
9001707a:	b292      	uxth	r2, r2
9001707c:	f7ff fd08 	bl	90016a90 <_ZN8touchgfx7Unicode4itoaElPtti>
90017080:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90017084:	2b2d      	cmp	r3, #45	; 0x2d
90017086:	d1cf      	bne.n	90017028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017088:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001708c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001708e:	3302      	adds	r3, #2
90017090:	e7ea      	b.n	90017068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
90017092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90017094:	1d25      	adds	r5, r4, #4
90017096:	230a      	movs	r3, #10
90017098:	eba8 0202 	sub.w	r2, r8, r2
9001709c:	b292      	uxth	r2, r2
9001709e:	4649      	mov	r1, r9
900170a0:	6820      	ldr	r0, [r4, #0]
900170a2:	f7ff fcd7 	bl	90016a54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
900170a6:	e7bf      	b.n	90017028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
900170a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900170aa:	2310      	movs	r3, #16
900170ac:	4649      	mov	r1, r9
900170ae:	6820      	ldr	r0, [r4, #0]
900170b0:	eba8 0202 	sub.w	r2, r8, r2
900170b4:	1d25      	adds	r5, r4, #4
900170b6:	b292      	uxth	r2, r2
900170b8:	f7ff fccc 	bl	90016a54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
900170bc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
900170c0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
900170c4:	2b00      	cmp	r3, #0
900170c6:	d0af      	beq.n	90017028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
900170c8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
900170cc:	2919      	cmp	r1, #25
900170ce:	d8f7      	bhi.n	900170c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
900170d0:	3b20      	subs	r3, #32
900170d2:	8013      	strh	r3, [r2, #0]
900170d4:	e7f4      	b.n	900170c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
900170d6:	9a08      	ldr	r2, [sp, #32]
900170d8:	2a00      	cmp	r2, #0
900170da:	d0ab      	beq.n	90017034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
900170dc:	7812      	ldrb	r2, [r2, #0]
900170de:	e7a9      	b.n	90017034 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
900170e0:	2d00      	cmp	r5, #0
900170e2:	f43f af48 	beq.w	90016f76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
900170e6:	782d      	ldrb	r5, [r5, #0]
900170e8:	e745      	b.n	90016f76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

900170ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
900170ea:	b507      	push	{r0, r1, r2, lr}
900170ec:	9300      	str	r3, [sp, #0]
900170ee:	4613      	mov	r3, r2
900170f0:	2200      	movs	r2, #0
900170f2:	f7ff fe92 	bl	90016e1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
900170f6:	b003      	add	sp, #12
900170f8:	f85d fb04 	ldr.w	pc, [sp], #4

900170fc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
900170fc:	b40c      	push	{r2, r3}
900170fe:	b507      	push	{r0, r1, r2, lr}
90017100:	ab04      	add	r3, sp, #16
90017102:	f853 2b04 	ldr.w	r2, [r3], #4
90017106:	9301      	str	r3, [sp, #4]
90017108:	f7ff ffef 	bl	900170ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001710c:	b003      	add	sp, #12
9001710e:	f85d eb04 	ldr.w	lr, [sp], #4
90017112:	b002      	add	sp, #8
90017114:	4770      	bx	lr
	...

90017118 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
90017118:	4b01      	ldr	r3, [pc, #4]	; (90017120 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001711a:	6018      	str	r0, [r3, #0]
9001711c:	4770      	bx	lr
9001711e:	bf00      	nop
90017120:	240262c4 	.word	0x240262c4

90017124 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
90017124:	4b06      	ldr	r3, [pc, #24]	; (90017140 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
90017126:	881a      	ldrh	r2, [r3, #0]
90017128:	4282      	cmp	r2, r0
9001712a:	d807      	bhi.n	9001713c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001712c:	4b05      	ldr	r3, [pc, #20]	; (90017144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001712e:	881b      	ldrh	r3, [r3, #0]
90017130:	4413      	add	r3, r2
90017132:	4298      	cmp	r0, r3
90017134:	bfac      	ite	ge
90017136:	2000      	movge	r0, #0
90017138:	2001      	movlt	r0, #1
9001713a:	4770      	bx	lr
9001713c:	2000      	movs	r0, #0
9001713e:	4770      	bx	lr
90017140:	240262e4 	.word	0x240262e4
90017144:	240262e8 	.word	0x240262e8

90017148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90017148:	b508      	push	{r3, lr}
9001714a:	4601      	mov	r1, r0
9001714c:	f7ff ffea 	bl	90017124 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90017150:	b118      	cbz	r0, 9001715a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90017152:	4b02      	ldr	r3, [pc, #8]	; (9001715c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90017154:	681b      	ldr	r3, [r3, #0]
90017156:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001715a:	bd08      	pop	{r3, pc}
9001715c:	240262c8 	.word	0x240262c8

90017160 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90017160:	b5f0      	push	{r4, r5, r6, r7, lr}
90017162:	4c24      	ldr	r4, [pc, #144]	; (900171f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90017164:	6823      	ldr	r3, [r4, #0]
90017166:	2b00      	cmp	r3, #0
90017168:	d042      	beq.n	900171f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001716a:	4a23      	ldr	r2, [pc, #140]	; (900171f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001716c:	4d23      	ldr	r5, [pc, #140]	; (900171fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001716e:	8811      	ldrh	r1, [r2, #0]
90017170:	f8b5 c000 	ldrh.w	ip, [r5]
90017174:	4822      	ldr	r0, [pc, #136]	; (90017200 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90017176:	4461      	add	r1, ip
90017178:	1c4a      	adds	r2, r1, #1
9001717a:	008f      	lsls	r7, r1, #2
9001717c:	f022 0201 	bic.w	r2, r2, #1
90017180:	19de      	adds	r6, r3, r7
90017182:	0412      	lsls	r2, r2, #16
90017184:	6006      	str	r6, [r0, #0]
90017186:	4e1f      	ldr	r6, [pc, #124]	; (90017204 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90017188:	0c12      	lsrs	r2, r2, #16
9001718a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001718e:	19da      	adds	r2, r3, r7
90017190:	6032      	str	r2, [r6, #0]
90017192:	220e      	movs	r2, #14
90017194:	fb02 f20c 	mul.w	r2, r2, ip
90017198:	3203      	adds	r2, #3
9001719a:	f022 0203 	bic.w	r2, r2, #3
9001719e:	443a      	add	r2, r7
900171a0:	4f19      	ldr	r7, [pc, #100]	; (90017208 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
900171a2:	4413      	add	r3, r2
900171a4:	603b      	str	r3, [r7, #0]
900171a6:	2300      	movs	r3, #0
900171a8:	4f18      	ldr	r7, [pc, #96]	; (9001720c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
900171aa:	469c      	mov	ip, r3
900171ac:	803b      	strh	r3, [r7, #0]
900171ae:	4f18      	ldr	r7, [pc, #96]	; (90017210 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
900171b0:	683f      	ldr	r7, [r7, #0]
900171b2:	1aba      	subs	r2, r7, r2
900171b4:	4f17      	ldr	r7, [pc, #92]	; (90017214 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
900171b6:	603a      	str	r2, [r7, #0]
900171b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
900171bc:	4a16      	ldr	r2, [pc, #88]	; (90017218 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
900171be:	8013      	strh	r3, [r2, #0]
900171c0:	428b      	cmp	r3, r1
900171c2:	d10d      	bne.n	900171e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
900171c4:	882d      	ldrh	r5, [r5, #0]
900171c6:	2300      	movs	r3, #0
900171c8:	6830      	ldr	r0, [r6, #0]
900171ca:	240e      	movs	r4, #14
900171cc:	429d      	cmp	r5, r3
900171ce:	d90f      	bls.n	900171f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
900171d0:	fb04 0203 	mla	r2, r4, r3, r0
900171d4:	3301      	adds	r3, #1
900171d6:	7b11      	ldrb	r1, [r2, #12]
900171d8:	f36f 1145 	bfc	r1, #5, #1
900171dc:	7311      	strb	r1, [r2, #12]
900171de:	e7f5      	b.n	900171cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
900171e0:	6822      	ldr	r2, [r4, #0]
900171e2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
900171e6:	6802      	ldr	r2, [r0, #0]
900171e8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
900171ec:	3301      	adds	r3, #1
900171ee:	e7e7      	b.n	900171c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
900171f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
900171f2:	bf00      	nop
900171f4:	240262c8 	.word	0x240262c8
900171f8:	240262e4 	.word	0x240262e4
900171fc:	240262e8 	.word	0x240262e8
90017200:	240262dc 	.word	0x240262dc
90017204:	240262cc 	.word	0x240262cc
90017208:	240262d4 	.word	0x240262d4
9001720c:	240262e6 	.word	0x240262e6
90017210:	240262d0 	.word	0x240262d0
90017214:	240262e0 	.word	0x240262e0
90017218:	240262d8 	.word	0x240262d8

9001721c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001721c:	4b06      	ldr	r3, [pc, #24]	; (90017238 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001721e:	681b      	ldr	r3, [r3, #0]
90017220:	b943      	cbnz	r3, 90017234 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90017222:	b139      	cbz	r1, 90017234 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
90017224:	4b05      	ldr	r3, [pc, #20]	; (9001723c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
90017226:	801a      	strh	r2, [r3, #0]
90017228:	4b05      	ldr	r3, [pc, #20]	; (90017240 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001722a:	6019      	str	r1, [r3, #0]
9001722c:	4b05      	ldr	r3, [pc, #20]	; (90017244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001722e:	6018      	str	r0, [r3, #0]
90017230:	f7ff bf96 	b.w	90017160 <_ZN8touchgfx6Bitmap10clearCacheEv>
90017234:	4770      	bx	lr
90017236:	bf00      	nop
90017238:	240262d4 	.word	0x240262d4
9001723c:	240262e8 	.word	0x240262e8
90017240:	240262d0 	.word	0x240262d0
90017244:	240262c8 	.word	0x240262c8

90017248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
90017248:	b470      	push	{r4, r5, r6}
9001724a:	4c07      	ldr	r4, [pc, #28]	; (90017268 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001724c:	4605      	mov	r5, r0
9001724e:	4610      	mov	r0, r2
90017250:	9a03      	ldr	r2, [sp, #12]
90017252:	6826      	ldr	r6, [r4, #0]
90017254:	b936      	cbnz	r6, 90017264 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90017256:	6025      	str	r5, [r4, #0]
90017258:	4c04      	ldr	r4, [pc, #16]	; (9001726c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001725a:	8021      	strh	r1, [r4, #0]
9001725c:	4619      	mov	r1, r3
9001725e:	bc70      	pop	{r4, r5, r6}
90017260:	f7ff bfdc 	b.w	9001721c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90017264:	bc70      	pop	{r4, r5, r6}
90017266:	4770      	bx	lr
90017268:	240262ec 	.word	0x240262ec
9001726c:	240262e4 	.word	0x240262e4

90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90017270:	4a12      	ldr	r2, [pc, #72]	; (900172bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90017272:	8803      	ldrh	r3, [r0, #0]
90017274:	8812      	ldrh	r2, [r2, #0]
90017276:	4293      	cmp	r3, r2
90017278:	d207      	bcs.n	9001728a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001727a:	4a11      	ldr	r2, [pc, #68]	; (900172c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001727c:	2114      	movs	r1, #20
9001727e:	6812      	ldr	r2, [r2, #0]
90017280:	fb01 2303 	mla	r3, r1, r3, r2
90017284:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90017288:	4770      	bx	lr
9001728a:	490e      	ldr	r1, [pc, #56]	; (900172c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001728c:	8809      	ldrh	r1, [r1, #0]
9001728e:	4411      	add	r1, r2
90017290:	428b      	cmp	r3, r1
90017292:	da04      	bge.n	9001729e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90017294:	1a9b      	subs	r3, r3, r2
90017296:	4a0c      	ldr	r2, [pc, #48]	; (900172c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90017298:	210e      	movs	r1, #14
9001729a:	6812      	ldr	r2, [r2, #0]
9001729c:	e7f0      	b.n	90017280 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001729e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
900172a2:	4293      	cmp	r3, r2
900172a4:	d108      	bne.n	900172b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
900172a6:	4b09      	ldr	r3, [pc, #36]	; (900172cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
900172a8:	781b      	ldrb	r3, [r3, #0]
900172aa:	b91b      	cbnz	r3, 900172b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
900172ac:	4b08      	ldr	r3, [pc, #32]	; (900172d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
900172ae:	f9b3 0000 	ldrsh.w	r0, [r3]
900172b2:	4770      	bx	lr
900172b4:	4b07      	ldr	r3, [pc, #28]	; (900172d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
900172b6:	e7fa      	b.n	900172ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
900172b8:	2000      	movs	r0, #0
900172ba:	4770      	bx	lr
900172bc:	240262e4 	.word	0x240262e4
900172c0:	240262ec 	.word	0x240262ec
900172c4:	240262e8 	.word	0x240262e8
900172c8:	240262cc 	.word	0x240262cc
900172cc:	2402625c 	.word	0x2402625c
900172d0:	2402625e 	.word	0x2402625e
900172d4:	24026260 	.word	0x24026260

900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
900172d8:	4a12      	ldr	r2, [pc, #72]	; (90017324 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
900172da:	8803      	ldrh	r3, [r0, #0]
900172dc:	8812      	ldrh	r2, [r2, #0]
900172de:	4293      	cmp	r3, r2
900172e0:	d207      	bcs.n	900172f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
900172e2:	4a11      	ldr	r2, [pc, #68]	; (90017328 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
900172e4:	2114      	movs	r1, #20
900172e6:	6812      	ldr	r2, [r2, #0]
900172e8:	fb01 2303 	mla	r3, r1, r3, r2
900172ec:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
900172f0:	4770      	bx	lr
900172f2:	490e      	ldr	r1, [pc, #56]	; (9001732c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
900172f4:	8809      	ldrh	r1, [r1, #0]
900172f6:	4411      	add	r1, r2
900172f8:	428b      	cmp	r3, r1
900172fa:	da04      	bge.n	90017306 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
900172fc:	1a9b      	subs	r3, r3, r2
900172fe:	4a0c      	ldr	r2, [pc, #48]	; (90017330 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90017300:	210e      	movs	r1, #14
90017302:	6812      	ldr	r2, [r2, #0]
90017304:	e7f0      	b.n	900172e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
90017306:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001730a:	4293      	cmp	r3, r2
9001730c:	d108      	bne.n	90017320 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001730e:	4b09      	ldr	r3, [pc, #36]	; (90017334 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90017310:	781b      	ldrb	r3, [r3, #0]
90017312:	b91b      	cbnz	r3, 9001731c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
90017314:	4b08      	ldr	r3, [pc, #32]	; (90017338 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
90017316:	f9b3 0000 	ldrsh.w	r0, [r3]
9001731a:	4770      	bx	lr
9001731c:	4b07      	ldr	r3, [pc, #28]	; (9001733c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001731e:	e7fa      	b.n	90017316 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
90017320:	2000      	movs	r0, #0
90017322:	4770      	bx	lr
90017324:	240262e4 	.word	0x240262e4
90017328:	240262ec 	.word	0x240262ec
9001732c:	240262e8 	.word	0x240262e8
90017330:	240262cc 	.word	0x240262cc
90017334:	2402625c 	.word	0x2402625c
90017338:	24026260 	.word	0x24026260
9001733c:	2402625e 	.word	0x2402625e

90017340 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
90017340:	4a1f      	ldr	r2, [pc, #124]	; (900173c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
90017342:	b510      	push	{r4, lr}
90017344:	880b      	ldrh	r3, [r1, #0]
90017346:	8812      	ldrh	r2, [r2, #0]
90017348:	4293      	cmp	r3, r2
9001734a:	d213      	bcs.n	90017374 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001734c:	4a1d      	ldr	r2, [pc, #116]	; (900173c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001734e:	2114      	movs	r1, #20
90017350:	6812      	ldr	r2, [r2, #0]
90017352:	fb01 2303 	mla	r3, r1, r3, r2
90017356:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001735a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001735e:	8a1a      	ldrh	r2, [r3, #16]
90017360:	8a5b      	ldrh	r3, [r3, #18]
90017362:	f3c2 020c 	ubfx	r2, r2, #0, #13
90017366:	8004      	strh	r4, [r0, #0]
90017368:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001736c:	8041      	strh	r1, [r0, #2]
9001736e:	8082      	strh	r2, [r0, #4]
90017370:	80c3      	strh	r3, [r0, #6]
90017372:	e00e      	b.n	90017392 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017374:	4914      	ldr	r1, [pc, #80]	; (900173c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90017376:	8809      	ldrh	r1, [r1, #0]
90017378:	4411      	add	r1, r2
9001737a:	428b      	cmp	r3, r1
9001737c:	da0a      	bge.n	90017394 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001737e:	1a9b      	subs	r3, r3, r2
90017380:	4a12      	ldr	r2, [pc, #72]	; (900173cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90017382:	210e      	movs	r1, #14
90017384:	6812      	ldr	r2, [r2, #0]
90017386:	fb01 2303 	mla	r3, r1, r3, r2
9001738a:	681a      	ldr	r2, [r3, #0]
9001738c:	6002      	str	r2, [r0, #0]
9001738e:	685a      	ldr	r2, [r3, #4]
90017390:	6042      	str	r2, [r0, #4]
90017392:	bd10      	pop	{r4, pc}
90017394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017398:	4293      	cmp	r3, r2
9001739a:	d10b      	bne.n	900173b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001739c:	4b0c      	ldr	r3, [pc, #48]	; (900173d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001739e:	f9b3 1000 	ldrsh.w	r1, [r3]
900173a2:	4b0c      	ldr	r3, [pc, #48]	; (900173d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
900173a4:	8081      	strh	r1, [r0, #4]
900173a6:	f9b3 2000 	ldrsh.w	r2, [r3]
900173aa:	2300      	movs	r3, #0
900173ac:	80c2      	strh	r2, [r0, #6]
900173ae:	8003      	strh	r3, [r0, #0]
900173b0:	8043      	strh	r3, [r0, #2]
900173b2:	e7ee      	b.n	90017392 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
900173b4:	2300      	movs	r3, #0
900173b6:	8003      	strh	r3, [r0, #0]
900173b8:	8043      	strh	r3, [r0, #2]
900173ba:	8083      	strh	r3, [r0, #4]
900173bc:	e7d8      	b.n	90017370 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
900173be:	bf00      	nop
900173c0:	240262e4 	.word	0x240262e4
900173c4:	240262ec 	.word	0x240262ec
900173c8:	240262e8 	.word	0x240262e8
900173cc:	240262cc 	.word	0x240262cc
900173d0:	24026258 	.word	0x24026258
900173d4:	2402625a 	.word	0x2402625a

900173d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
900173d8:	4a17      	ldr	r2, [pc, #92]	; (90017438 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
900173da:	8803      	ldrh	r3, [r0, #0]
900173dc:	8812      	ldrh	r2, [r2, #0]
900173de:	4293      	cmp	r3, r2
900173e0:	d213      	bcs.n	9001740a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
900173e2:	4a16      	ldr	r2, [pc, #88]	; (9001743c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
900173e4:	2114      	movs	r1, #20
900173e6:	6812      	ldr	r2, [r2, #0]
900173e8:	fb01 2303 	mla	r3, r1, r3, r2
900173ec:	8a1a      	ldrh	r2, [r3, #16]
900173ee:	8919      	ldrh	r1, [r3, #8]
900173f0:	f3c2 020c 	ubfx	r2, r2, #0, #13
900173f4:	428a      	cmp	r2, r1
900173f6:	db1d      	blt.n	90017434 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900173f8:	8a58      	ldrh	r0, [r3, #18]
900173fa:	f3c0 000c 	ubfx	r0, r0, #0, #13
900173fe:	895b      	ldrh	r3, [r3, #10]
90017400:	4298      	cmp	r0, r3
90017402:	bfac      	ite	ge
90017404:	2000      	movge	r0, #0
90017406:	2001      	movlt	r0, #1
90017408:	4770      	bx	lr
9001740a:	490d      	ldr	r1, [pc, #52]	; (90017440 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001740c:	8809      	ldrh	r1, [r1, #0]
9001740e:	4411      	add	r1, r2
90017410:	428b      	cmp	r3, r1
90017412:	da0d      	bge.n	90017430 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
90017414:	1a9b      	subs	r3, r3, r2
90017416:	4a0b      	ldr	r2, [pc, #44]	; (90017444 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
90017418:	210e      	movs	r1, #14
9001741a:	6812      	ldr	r2, [r2, #0]
9001741c:	fb01 2303 	mla	r3, r1, r3, r2
90017420:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
90017424:	891a      	ldrh	r2, [r3, #8]
90017426:	4291      	cmp	r1, r2
90017428:	db04      	blt.n	90017434 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001742a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001742e:	e7e6      	b.n	900173fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
90017430:	2000      	movs	r0, #0
90017432:	4770      	bx	lr
90017434:	2001      	movs	r0, #1
90017436:	4770      	bx	lr
90017438:	240262e4 	.word	0x240262e4
9001743c:	240262ec 	.word	0x240262ec
90017440:	240262e8 	.word	0x240262e8
90017444:	240262cc 	.word	0x240262cc

90017448 <_ZNK8touchgfx6Bitmap7getDataEv>:
90017448:	4a12      	ldr	r2, [pc, #72]	; (90017494 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001744a:	8803      	ldrh	r3, [r0, #0]
9001744c:	8811      	ldrh	r1, [r2, #0]
9001744e:	428b      	cmp	r3, r1
90017450:	d20b      	bcs.n	9001746a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
90017452:	4a11      	ldr	r2, [pc, #68]	; (90017498 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017454:	6812      	ldr	r2, [r2, #0]
90017456:	b112      	cbz	r2, 9001745e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
90017458:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001745c:	b9c0      	cbnz	r0, 90017490 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001745e:	4a0f      	ldr	r2, [pc, #60]	; (9001749c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
90017460:	6811      	ldr	r1, [r2, #0]
90017462:	2214      	movs	r2, #20
90017464:	4353      	muls	r3, r2
90017466:	58c8      	ldr	r0, [r1, r3]
90017468:	4770      	bx	lr
9001746a:	4a0d      	ldr	r2, [pc, #52]	; (900174a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001746c:	8812      	ldrh	r2, [r2, #0]
9001746e:	440a      	add	r2, r1
90017470:	4293      	cmp	r3, r2
90017472:	da04      	bge.n	9001747e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
90017474:	4a08      	ldr	r2, [pc, #32]	; (90017498 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017476:	6812      	ldr	r2, [r2, #0]
90017478:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001747c:	4770      	bx	lr
9001747e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017482:	4293      	cmp	r3, r2
90017484:	d103      	bne.n	9001748e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
90017486:	4b07      	ldr	r3, [pc, #28]	; (900174a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90017488:	681b      	ldr	r3, [r3, #0]
9001748a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001748c:	4770      	bx	lr
9001748e:	2000      	movs	r0, #0
90017490:	4770      	bx	lr
90017492:	bf00      	nop
90017494:	240262e4 	.word	0x240262e4
90017498:	240262c8 	.word	0x240262c8
9001749c:	240262ec 	.word	0x240262ec
900174a0:	240262e8 	.word	0x240262e8
900174a4:	24026264 	.word	0x24026264

900174a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
900174a8:	4b24      	ldr	r3, [pc, #144]	; (9001753c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
900174aa:	8802      	ldrh	r2, [r0, #0]
900174ac:	8818      	ldrh	r0, [r3, #0]
900174ae:	4282      	cmp	r2, r0
900174b0:	d221      	bcs.n	900174f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
900174b2:	4b23      	ldr	r3, [pc, #140]	; (90017540 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
900174b4:	6819      	ldr	r1, [r3, #0]
900174b6:	2314      	movs	r3, #20
900174b8:	fb03 1302 	mla	r3, r3, r2, r1
900174bc:	6858      	ldr	r0, [r3, #4]
900174be:	2800      	cmp	r0, #0
900174c0:	d03a      	beq.n	90017538 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
900174c2:	4920      	ldr	r1, [pc, #128]	; (90017544 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900174c4:	6809      	ldr	r1, [r1, #0]
900174c6:	2900      	cmp	r1, #0
900174c8:	d036      	beq.n	90017538 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
900174ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
900174ce:	2900      	cmp	r1, #0
900174d0:	d032      	beq.n	90017538 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
900174d2:	891a      	ldrh	r2, [r3, #8]
900174d4:	8958      	ldrh	r0, [r3, #10]
900174d6:	4350      	muls	r0, r2
900174d8:	7c5a      	ldrb	r2, [r3, #17]
900174da:	7cdb      	ldrb	r3, [r3, #19]
900174dc:	0952      	lsrs	r2, r2, #5
900174de:	f3c3 1342 	ubfx	r3, r3, #5, #3
900174e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
900174e6:	2b0b      	cmp	r3, #11
900174e8:	bf18      	it	ne
900174ea:	0040      	lslne	r0, r0, #1
900174ec:	3003      	adds	r0, #3
900174ee:	f020 0003 	bic.w	r0, r0, #3
900174f2:	4408      	add	r0, r1
900174f4:	4770      	bx	lr
900174f6:	4b14      	ldr	r3, [pc, #80]	; (90017548 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
900174f8:	881b      	ldrh	r3, [r3, #0]
900174fa:	4403      	add	r3, r0
900174fc:	429a      	cmp	r2, r3
900174fe:	da1a      	bge.n	90017536 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017500:	4b12      	ldr	r3, [pc, #72]	; (9001754c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
90017502:	1a10      	subs	r0, r2, r0
90017504:	210e      	movs	r1, #14
90017506:	681b      	ldr	r3, [r3, #0]
90017508:	fb01 3000 	mla	r0, r1, r0, r3
9001750c:	7b03      	ldrb	r3, [r0, #12]
9001750e:	f003 031f 	and.w	r3, r3, #31
90017512:	2b0b      	cmp	r3, #11
90017514:	d10b      	bne.n	9001752e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
90017516:	8903      	ldrh	r3, [r0, #8]
90017518:	8940      	ldrh	r0, [r0, #10]
9001751a:	4358      	muls	r0, r3
9001751c:	4b09      	ldr	r3, [pc, #36]	; (90017544 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001751e:	3003      	adds	r0, #3
90017520:	6819      	ldr	r1, [r3, #0]
90017522:	f020 0303 	bic.w	r3, r0, #3
90017526:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001752a:	4418      	add	r0, r3
9001752c:	4770      	bx	lr
9001752e:	2b0d      	cmp	r3, #13
90017530:	d101      	bne.n	90017536 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017532:	300d      	adds	r0, #13
90017534:	4770      	bx	lr
90017536:	2000      	movs	r0, #0
90017538:	4770      	bx	lr
9001753a:	bf00      	nop
9001753c:	240262e4 	.word	0x240262e4
90017540:	240262ec 	.word	0x240262ec
90017544:	240262c8 	.word	0x240262c8
90017548:	240262e8 	.word	0x240262e8
9001754c:	240262cc 	.word	0x240262cc

90017550 <_ZNK8touchgfx6Bitmap9getFormatEv>:
90017550:	4a17      	ldr	r2, [pc, #92]	; (900175b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
90017552:	b510      	push	{r4, lr}
90017554:	8803      	ldrh	r3, [r0, #0]
90017556:	8812      	ldrh	r2, [r2, #0]
90017558:	4293      	cmp	r3, r2
9001755a:	d20c      	bcs.n	90017576 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001755c:	4a15      	ldr	r2, [pc, #84]	; (900175b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001755e:	2114      	movs	r1, #20
90017560:	6812      	ldr	r2, [r2, #0]
90017562:	fb01 2303 	mla	r3, r1, r3, r2
90017566:	7c58      	ldrb	r0, [r3, #17]
90017568:	0942      	lsrs	r2, r0, #5
9001756a:	7cd8      	ldrb	r0, [r3, #19]
9001756c:	f3c0 1042 	ubfx	r0, r0, #5, #3
90017570:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
90017574:	bd10      	pop	{r4, pc}
90017576:	4910      	ldr	r1, [pc, #64]	; (900175b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90017578:	8809      	ldrh	r1, [r1, #0]
9001757a:	4411      	add	r1, r2
9001757c:	428b      	cmp	r3, r1
9001757e:	da09      	bge.n	90017594 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90017580:	1a9b      	subs	r3, r3, r2
90017582:	4a0e      	ldr	r2, [pc, #56]	; (900175bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90017584:	210e      	movs	r1, #14
90017586:	6812      	ldr	r2, [r2, #0]
90017588:	fb01 2303 	mla	r3, r1, r3, r2
9001758c:	7b18      	ldrb	r0, [r3, #12]
9001758e:	f000 001f 	and.w	r0, r0, #31
90017592:	e7ef      	b.n	90017574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017594:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017598:	4293      	cmp	r3, r2
9001759a:	d106      	bne.n	900175aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001759c:	f7fa fa20 	bl	900119e0 <_ZN8touchgfx3HAL3lcdEv>
900175a0:	6803      	ldr	r3, [r0, #0]
900175a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900175a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900175a8:	4718      	bx	r3
900175aa:	2000      	movs	r0, #0
900175ac:	e7e2      	b.n	90017574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
900175ae:	bf00      	nop
900175b0:	240262e4 	.word	0x240262e4
900175b4:	240262ec 	.word	0x240262ec
900175b8:	240262e8 	.word	0x240262e8
900175bc:	240262cc 	.word	0x240262cc

900175c0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
900175c0:	2010      	movs	r0, #16
900175c2:	4770      	bx	lr

900175c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
900175c4:	4b02      	ldr	r3, [pc, #8]	; (900175d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
900175c6:	8818      	ldrh	r0, [r3, #0]
900175c8:	0040      	lsls	r0, r0, #1
900175ca:	b280      	uxth	r0, r0
900175cc:	4770      	bx	lr
900175ce:	bf00      	nop
900175d0:	2402625e 	.word	0x2402625e

900175d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
900175d4:	2bff      	cmp	r3, #255	; 0xff
900175d6:	d050      	beq.n	9001767a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
900175d8:	2a0b      	cmp	r2, #11
900175da:	d04a      	beq.n	90017672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900175dc:	d80e      	bhi.n	900175fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
900175de:	2a03      	cmp	r2, #3
900175e0:	d03f      	beq.n	90017662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
900175e2:	d804      	bhi.n	900175ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
900175e4:	2a01      	cmp	r2, #1
900175e6:	d03e      	beq.n	90017666 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
900175e8:	d93f      	bls.n	9001766a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
900175ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
900175ec:	4770      	bx	lr
900175ee:	2a09      	cmp	r2, #9
900175f0:	d03f      	beq.n	90017672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
900175f2:	d83c      	bhi.n	9001766e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900175f4:	2a08      	cmp	r2, #8
900175f6:	d03a      	beq.n	9001766e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
900175f8:	2000      	movs	r0, #0
900175fa:	4770      	bx	lr
900175fc:	2a2f      	cmp	r2, #47	; 0x2f
900175fe:	d024      	beq.n	9001764a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
90017600:	d80d      	bhi.n	9001761e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
90017602:	2a2d      	cmp	r2, #45	; 0x2d
90017604:	d014      	beq.n	90017630 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
90017606:	d826      	bhi.n	90017656 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
90017608:	2a2c      	cmp	r2, #44	; 0x2c
9001760a:	d1f5      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001760c:	684b      	ldr	r3, [r1, #4]
9001760e:	781b      	ldrb	r3, [r3, #0]
90017610:	2b01      	cmp	r3, #1
90017612:	d018      	beq.n	90017646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
90017614:	d323      	bcc.n	9001765e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
90017616:	2b02      	cmp	r3, #2
90017618:	d1ee      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001761a:	6880      	ldr	r0, [r0, #8]
9001761c:	4770      	bx	lr
9001761e:	2a31      	cmp	r2, #49	; 0x31
90017620:	d004      	beq.n	9001762c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
90017622:	d328      	bcc.n	90017676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
90017624:	2a32      	cmp	r2, #50	; 0x32
90017626:	d026      	beq.n	90017676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
90017628:	2a33      	cmp	r2, #51	; 0x33
9001762a:	d1e5      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001762c:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001762e:	4770      	bx	lr
90017630:	684b      	ldr	r3, [r1, #4]
90017632:	781b      	ldrb	r3, [r3, #0]
90017634:	2b01      	cmp	r3, #1
90017636:	d004      	beq.n	90017642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
90017638:	d30b      	bcc.n	90017652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001763a:	2b02      	cmp	r3, #2
9001763c:	d1dc      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001763e:	6900      	ldr	r0, [r0, #16]
90017640:	4770      	bx	lr
90017642:	6a00      	ldr	r0, [r0, #32]
90017644:	4770      	bx	lr
90017646:	6980      	ldr	r0, [r0, #24]
90017648:	4770      	bx	lr
9001764a:	684b      	ldr	r3, [r1, #4]
9001764c:	781b      	ldrb	r3, [r3, #0]
9001764e:	2b00      	cmp	r3, #0
90017650:	d1d2      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017652:	6b00      	ldr	r0, [r0, #48]	; 0x30
90017654:	4770      	bx	lr
90017656:	684b      	ldr	r3, [r1, #4]
90017658:	781b      	ldrb	r3, [r3, #0]
9001765a:	2b00      	cmp	r3, #0
9001765c:	d1cc      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001765e:	6a80      	ldr	r0, [r0, #40]	; 0x28
90017660:	4770      	bx	lr
90017662:	6c80      	ldr	r0, [r0, #72]	; 0x48
90017664:	4770      	bx	lr
90017666:	6d00      	ldr	r0, [r0, #80]	; 0x50
90017668:	4770      	bx	lr
9001766a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001766c:	4770      	bx	lr
9001766e:	6d80      	ldr	r0, [r0, #88]	; 0x58
90017670:	4770      	bx	lr
90017672:	6e00      	ldr	r0, [r0, #96]	; 0x60
90017674:	4770      	bx	lr
90017676:	6e80      	ldr	r0, [r0, #104]	; 0x68
90017678:	4770      	bx	lr
9001767a:	2a0b      	cmp	r2, #11
9001767c:	d049      	beq.n	90017712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001767e:	d80e      	bhi.n	9001769e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90017680:	2a03      	cmp	r2, #3
90017682:	d040      	beq.n	90017706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90017684:	d804      	bhi.n	90017690 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
90017686:	2a01      	cmp	r2, #1
90017688:	d03f      	beq.n	9001770a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001768a:	d940      	bls.n	9001770e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001768c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001768e:	4770      	bx	lr
90017690:	2a09      	cmp	r2, #9
90017692:	d03e      	beq.n	90017712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017694:	d801      	bhi.n	9001769a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
90017696:	2a08      	cmp	r2, #8
90017698:	d1ae      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001769a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001769c:	4770      	bx	lr
9001769e:	2a2f      	cmp	r2, #47	; 0x2f
900176a0:	d024      	beq.n	900176ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
900176a2:	d80d      	bhi.n	900176c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
900176a4:	2a2d      	cmp	r2, #45	; 0x2d
900176a6:	d014      	beq.n	900176d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
900176a8:	d826      	bhi.n	900176f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
900176aa:	2a2c      	cmp	r2, #44	; 0x2c
900176ac:	d1a4      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176ae:	684b      	ldr	r3, [r1, #4]
900176b0:	781b      	ldrb	r3, [r3, #0]
900176b2:	2b01      	cmp	r3, #1
900176b4:	d018      	beq.n	900176e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
900176b6:	d324      	bcc.n	90017702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
900176b8:	2b02      	cmp	r3, #2
900176ba:	d19d      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176bc:	68c0      	ldr	r0, [r0, #12]
900176be:	4770      	bx	lr
900176c0:	2a31      	cmp	r2, #49	; 0x31
900176c2:	d004      	beq.n	900176ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
900176c4:	d327      	bcc.n	90017716 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
900176c6:	2a32      	cmp	r2, #50	; 0x32
900176c8:	d025      	beq.n	90017716 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
900176ca:	2a33      	cmp	r2, #51	; 0x33
900176cc:	d194      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
900176d0:	4770      	bx	lr
900176d2:	684b      	ldr	r3, [r1, #4]
900176d4:	781b      	ldrb	r3, [r3, #0]
900176d6:	2b01      	cmp	r3, #1
900176d8:	d004      	beq.n	900176e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
900176da:	d30b      	bcc.n	900176f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
900176dc:	2b02      	cmp	r3, #2
900176de:	d18b      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176e0:	6940      	ldr	r0, [r0, #20]
900176e2:	4770      	bx	lr
900176e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
900176e6:	4770      	bx	lr
900176e8:	69c0      	ldr	r0, [r0, #28]
900176ea:	4770      	bx	lr
900176ec:	684b      	ldr	r3, [r1, #4]
900176ee:	781b      	ldrb	r3, [r3, #0]
900176f0:	2b00      	cmp	r3, #0
900176f2:	d181      	bne.n	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900176f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
900176f6:	4770      	bx	lr
900176f8:	684b      	ldr	r3, [r1, #4]
900176fa:	781b      	ldrb	r3, [r3, #0]
900176fc:	2b00      	cmp	r3, #0
900176fe:	f47f af7b 	bne.w	900175f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017702:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
90017704:	4770      	bx	lr
90017706:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
90017708:	4770      	bx	lr
9001770a:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001770c:	4770      	bx	lr
9001770e:	6c40      	ldr	r0, [r0, #68]	; 0x44
90017710:	4770      	bx	lr
90017712:	6e40      	ldr	r0, [r0, #100]	; 0x64
90017714:	4770      	bx	lr
90017716:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
90017718:	4770      	bx	lr

9001771a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001771a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001771e:	b087      	sub	sp, #28
90017720:	9815      	ldr	r0, [sp, #84]	; 0x54
90017722:	9205      	str	r2, [sp, #20]
90017724:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017728:	9101      	str	r1, [sp, #4]
9001772a:	9202      	str	r2, [sp, #8]
9001772c:	6841      	ldr	r1, [r0, #4]
9001772e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90017732:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017736:	fb01 2404 	mla	r4, r1, r4, r2
9001773a:	6802      	ldr	r2, [r0, #0]
9001773c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017740:	f8de 2000 	ldr.w	r2, [lr]
90017744:	9203      	str	r2, [sp, #12]
90017746:	f8de 2004 	ldr.w	r2, [lr, #4]
9001774a:	3204      	adds	r2, #4
9001774c:	9204      	str	r2, [sp, #16]
9001774e:	9a02      	ldr	r2, [sp, #8]
90017750:	43d6      	mvns	r6, r2
90017752:	b2f6      	uxtb	r6, r6
90017754:	9a01      	ldr	r2, [sp, #4]
90017756:	2a00      	cmp	r2, #0
90017758:	dc03      	bgt.n	90017762 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001775a:	9a05      	ldr	r2, [sp, #20]
9001775c:	2a00      	cmp	r2, #0
9001775e:	f340 8129 	ble.w	900179b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90017762:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017764:	f9be c008 	ldrsh.w	ip, [lr, #8]
90017768:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001776c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001776e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90017772:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017776:	2b00      	cmp	r3, #0
90017778:	dd0e      	ble.n	90017798 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001777a:	1408      	asrs	r0, r1, #16
9001777c:	d405      	bmi.n	9001778a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001777e:	4560      	cmp	r0, ip
90017780:	da03      	bge.n	9001778a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017782:	1410      	asrs	r0, r2, #16
90017784:	d401      	bmi.n	9001778a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017786:	42b8      	cmp	r0, r7
90017788:	db07      	blt.n	9001779a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001778a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001778c:	3b01      	subs	r3, #1
9001778e:	3402      	adds	r4, #2
90017790:	4401      	add	r1, r0
90017792:	9814      	ldr	r0, [sp, #80]	; 0x50
90017794:	4402      	add	r2, r0
90017796:	e7ee      	b.n	90017776 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90017798:	d071      	beq.n	9001787e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001779a:	1e58      	subs	r0, r3, #1
9001779c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001779e:	fb05 1500 	mla	r5, r5, r0, r1
900177a2:	142d      	asrs	r5, r5, #16
900177a4:	d45f      	bmi.n	90017866 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
900177a6:	4565      	cmp	r5, ip
900177a8:	da5d      	bge.n	90017866 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
900177aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
900177ac:	fb05 2000 	mla	r0, r5, r0, r2
900177b0:	1400      	asrs	r0, r0, #16
900177b2:	d458      	bmi.n	90017866 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
900177b4:	42b8      	cmp	r0, r7
900177b6:	da56      	bge.n	90017866 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
900177b8:	4699      	mov	r9, r3
900177ba:	46a2      	mov	sl, r4
900177bc:	f8bd b008 	ldrh.w	fp, [sp, #8]
900177c0:	f1b9 0f00 	cmp.w	r9, #0
900177c4:	dd57      	ble.n	90017876 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
900177c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
900177ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
900177ce:	9803      	ldr	r0, [sp, #12]
900177d0:	140d      	asrs	r5, r1, #16
900177d2:	f109 39ff 	add.w	r9, r9, #4294967295
900177d6:	fb07 000c 	mla	r0, r7, ip, r0
900177da:	5d40      	ldrb	r0, [r0, r5]
900177dc:	9d04      	ldr	r5, [sp, #16]
900177de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900177e2:	f8ba 5000 	ldrh.w	r5, [sl]
900177e6:	ea4f 2c20 	mov.w	ip, r0, asr #8
900177ea:	122f      	asrs	r7, r5, #8
900177ec:	ea4f 08e5 	mov.w	r8, r5, asr #3
900177f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900177f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900177f8:	00ed      	lsls	r5, r5, #3
900177fa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900177fe:	fb17 f706 	smulbb	r7, r7, r6
90017802:	b2ed      	uxtb	r5, r5
90017804:	fb18 f806 	smulbb	r8, r8, r6
90017808:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001780c:	10c7      	asrs	r7, r0, #3
9001780e:	fb15 f506 	smulbb	r5, r5, r6
90017812:	00c0      	lsls	r0, r0, #3
90017814:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017818:	fa1f fc8c 	uxth.w	ip, ip
9001781c:	b2c0      	uxtb	r0, r0
9001781e:	fb07 870b 	mla	r7, r7, fp, r8
90017822:	fb00 500b 	mla	r0, r0, fp, r5
90017826:	f10c 0501 	add.w	r5, ip, #1
9001782a:	b2bf      	uxth	r7, r7
9001782c:	b280      	uxth	r0, r0
9001782e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017832:	f107 0801 	add.w	r8, r7, #1
90017836:	1c45      	adds	r5, r0, #1
90017838:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001783c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017840:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90017844:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017846:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001784a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001784e:	4401      	add	r1, r0
90017850:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90017854:	9814      	ldr	r0, [sp, #80]	; 0x50
90017856:	ea45 0c0c 	orr.w	ip, r5, ip
9001785a:	4402      	add	r2, r0
9001785c:	ea4c 0c08 	orr.w	ip, ip, r8
90017860:	f82a cb02 	strh.w	ip, [sl], #2
90017864:	e7ac      	b.n	900177c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90017866:	f04f 0800 	mov.w	r8, #0
9001786a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001786e:	eb03 0008 	add.w	r0, r3, r8
90017872:	2800      	cmp	r0, #0
90017874:	dc41      	bgt.n	900178fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90017876:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001787a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001787e:	9b01      	ldr	r3, [sp, #4]
90017880:	2b00      	cmp	r3, #0
90017882:	f340 8097 	ble.w	900179b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90017886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001788a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001788c:	ee30 0a04 	vadd.f32	s0, s0, s8
90017890:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017894:	eef0 6a62 	vmov.f32	s13, s5
90017898:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001789c:	ee31 1a05 	vadd.f32	s2, s2, s10
900178a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900178a4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
900178a8:	eef0 6a43 	vmov.f32	s13, s6
900178ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900178b0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
900178b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
900178b8:	ee61 7a27 	vmul.f32	s15, s2, s15
900178bc:	ee77 2a62 	vsub.f32	s5, s14, s5
900178c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
900178c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900178c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900178cc:	ee12 2a90 	vmov	r2, s5
900178d0:	eef0 2a47 	vmov.f32	s5, s14
900178d4:	fb92 f3f3 	sdiv	r3, r2, r3
900178d8:	ee13 2a10 	vmov	r2, s6
900178dc:	9313      	str	r3, [sp, #76]	; 0x4c
900178de:	9b10      	ldr	r3, [sp, #64]	; 0x40
900178e0:	eeb0 3a67 	vmov.f32	s6, s15
900178e4:	fb92 f3f3 	sdiv	r3, r2, r3
900178e8:	9314      	str	r3, [sp, #80]	; 0x50
900178ea:	9b01      	ldr	r3, [sp, #4]
900178ec:	9a05      	ldr	r2, [sp, #20]
900178ee:	3b01      	subs	r3, #1
900178f0:	9301      	str	r3, [sp, #4]
900178f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900178f4:	bf08      	it	eq
900178f6:	4613      	moveq	r3, r2
900178f8:	e72c      	b.n	90017754 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900178fa:	140f      	asrs	r7, r1, #16
900178fc:	d453      	bmi.n	900179a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900178fe:	f8de 5008 	ldr.w	r5, [lr, #8]
90017902:	42bd      	cmp	r5, r7
90017904:	dd4f      	ble.n	900179a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017906:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001790a:	d44c      	bmi.n	900179a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001790c:	f8de 000c 	ldr.w	r0, [lr, #12]
90017910:	4560      	cmp	r0, ip
90017912:	dd48      	ble.n	900179a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017914:	9803      	ldr	r0, [sp, #12]
90017916:	b22d      	sxth	r5, r5
90017918:	fb0c 0505 	mla	r5, ip, r5, r0
9001791c:	5de8      	ldrb	r0, [r5, r7]
9001791e:	9d04      	ldr	r5, [sp, #16]
90017920:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90017924:	f06f 0501 	mvn.w	r5, #1
90017928:	fb05 fb08 	mul.w	fp, r5, r8
9001792c:	ea4f 2c20 	mov.w	ip, r0, asr #8
90017930:	f834 500b 	ldrh.w	r5, [r4, fp]
90017934:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017938:	122f      	asrs	r7, r5, #8
9001793a:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001793e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017942:	00ed      	lsls	r5, r5, #3
90017944:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90017948:	fb17 f706 	smulbb	r7, r7, r6
9001794c:	b2ed      	uxtb	r5, r5
9001794e:	fb19 f906 	smulbb	r9, r9, r6
90017952:	fb0c 7c0a 	mla	ip, ip, sl, r7
90017956:	10c7      	asrs	r7, r0, #3
90017958:	fb15 f506 	smulbb	r5, r5, r6
9001795c:	00c0      	lsls	r0, r0, #3
9001795e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017962:	fa1f fc8c 	uxth.w	ip, ip
90017966:	b2c0      	uxtb	r0, r0
90017968:	fb07 970a 	mla	r7, r7, sl, r9
9001796c:	fb00 500a 	mla	r0, r0, sl, r5
90017970:	f10c 0501 	add.w	r5, ip, #1
90017974:	b2bf      	uxth	r7, r7
90017976:	b280      	uxth	r0, r0
90017978:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001797c:	f107 0901 	add.w	r9, r7, #1
90017980:	1c45      	adds	r5, r0, #1
90017982:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90017986:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001798a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001798e:	ea4f 1959 	mov.w	r9, r9, lsr #5
90017992:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90017996:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001799a:	ea45 0c0c 	orr.w	ip, r5, ip
9001799e:	ea4c 0c09 	orr.w	ip, ip, r9
900179a2:	f824 c00b 	strh.w	ip, [r4, fp]
900179a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
900179a8:	f108 38ff 	add.w	r8, r8, #4294967295
900179ac:	4401      	add	r1, r0
900179ae:	9814      	ldr	r0, [sp, #80]	; 0x50
900179b0:	4402      	add	r2, r0
900179b2:	e75c      	b.n	9001786e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900179b4:	b007      	add	sp, #28
900179b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900179ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900179ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900179be:	b085      	sub	sp, #20
900179c0:	4693      	mov	fp, r2
900179c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900179c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900179c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
900179ca:	6870      	ldr	r0, [r6, #4]
900179cc:	9100      	str	r1, [sp, #0]
900179ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900179d2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
900179d6:	fb00 2404 	mla	r4, r0, r4, r2
900179da:	6832      	ldr	r2, [r6, #0]
900179dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900179e0:	682a      	ldr	r2, [r5, #0]
900179e2:	9201      	str	r2, [sp, #4]
900179e4:	686a      	ldr	r2, [r5, #4]
900179e6:	3204      	adds	r2, #4
900179e8:	9202      	str	r2, [sp, #8]
900179ea:	9a00      	ldr	r2, [sp, #0]
900179ec:	2a00      	cmp	r2, #0
900179ee:	dc03      	bgt.n	900179f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900179f0:	f1bb 0f00 	cmp.w	fp, #0
900179f4:	f340 80a0 	ble.w	90017b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900179f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900179fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900179fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017a02:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017a04:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017a08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017a0c:	2b00      	cmp	r3, #0
90017a0e:	dd0c      	ble.n	90017a2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017a10:	1406      	asrs	r6, r0, #16
90017a12:	d405      	bmi.n	90017a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a14:	454e      	cmp	r6, r9
90017a16:	da03      	bge.n	90017a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a18:	1416      	asrs	r6, r2, #16
90017a1a:	d401      	bmi.n	90017a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90017a1c:	4546      	cmp	r6, r8
90017a1e:	db05      	blt.n	90017a2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017a20:	4470      	add	r0, lr
90017a22:	4462      	add	r2, ip
90017a24:	3b01      	subs	r3, #1
90017a26:	3402      	adds	r4, #2
90017a28:	e7f0      	b.n	90017a0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90017a2a:	d00f      	beq.n	90017a4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017a2c:	1e5e      	subs	r6, r3, #1
90017a2e:	fb0e 0706 	mla	r7, lr, r6, r0
90017a32:	143f      	asrs	r7, r7, #16
90017a34:	d541      	bpl.n	90017aba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
90017a36:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90017a3a:	4698      	mov	r8, r3
90017a3c:	9603      	str	r6, [sp, #12]
90017a3e:	f1b8 0f00 	cmp.w	r8, #0
90017a42:	dc59      	bgt.n	90017af8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90017a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017a48:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017a4c:	9b00      	ldr	r3, [sp, #0]
90017a4e:	2b00      	cmp	r3, #0
90017a50:	dd72      	ble.n	90017b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90017a52:	ee30 0a04 	vadd.f32	s0, s0, s8
90017a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017a58:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017a5c:	eeb0 6a62 	vmov.f32	s12, s5
90017a60:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017a64:	ee31 1a05 	vadd.f32	s2, s2, s10
90017a68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a6c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017a70:	eeb0 6a43 	vmov.f32	s12, s6
90017a74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017a78:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017a7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017a80:	ee61 7a27 	vmul.f32	s15, s2, s15
90017a84:	ee77 2a62 	vsub.f32	s5, s14, s5
90017a88:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017a8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017a90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017a94:	ee12 2a90 	vmov	r2, s5
90017a98:	eef0 2a47 	vmov.f32	s5, s14
90017a9c:	fb92 fef3 	sdiv	lr, r2, r3
90017aa0:	ee13 2a10 	vmov	r2, s6
90017aa4:	eeb0 3a67 	vmov.f32	s6, s15
90017aa8:	fb92 fcf3 	sdiv	ip, r2, r3
90017aac:	9b00      	ldr	r3, [sp, #0]
90017aae:	3b01      	subs	r3, #1
90017ab0:	9300      	str	r3, [sp, #0]
90017ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017ab4:	bf08      	it	eq
90017ab6:	465b      	moveq	r3, fp
90017ab8:	e797      	b.n	900179ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017aba:	454f      	cmp	r7, r9
90017abc:	dabb      	bge.n	90017a36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017abe:	fb0c 2606 	mla	r6, ip, r6, r2
90017ac2:	1436      	asrs	r6, r6, #16
90017ac4:	d4b7      	bmi.n	90017a36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017ac6:	4546      	cmp	r6, r8
90017ac8:	dab5      	bge.n	90017a36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017aca:	461e      	mov	r6, r3
90017acc:	46a0      	mov	r8, r4
90017ace:	2e00      	cmp	r6, #0
90017ad0:	ddb8      	ble.n	90017a44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017ad2:	1417      	asrs	r7, r2, #16
90017ad4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017ad8:	9901      	ldr	r1, [sp, #4]
90017ada:	ea4f 4920 	mov.w	r9, r0, asr #16
90017ade:	4462      	add	r2, ip
90017ae0:	4470      	add	r0, lr
90017ae2:	fb0a 1707 	mla	r7, sl, r7, r1
90017ae6:	9902      	ldr	r1, [sp, #8]
90017ae8:	3e01      	subs	r6, #1
90017aea:	f817 7009 	ldrb.w	r7, [r7, r9]
90017aee:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90017af2:	f828 7b02 	strh.w	r7, [r8], #2
90017af6:	e7ea      	b.n	90017ace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
90017af8:	ea5f 4920 	movs.w	r9, r0, asr #16
90017afc:	d417      	bmi.n	90017b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017afe:	68ae      	ldr	r6, [r5, #8]
90017b00:	454e      	cmp	r6, r9
90017b02:	dd14      	ble.n	90017b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017b04:	ea5f 4a22 	movs.w	sl, r2, asr #16
90017b08:	d411      	bmi.n	90017b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017b0a:	68ef      	ldr	r7, [r5, #12]
90017b0c:	4557      	cmp	r7, sl
90017b0e:	dd0e      	ble.n	90017b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017b10:	9f01      	ldr	r7, [sp, #4]
90017b12:	b236      	sxth	r6, r6
90017b14:	f06f 0101 	mvn.w	r1, #1
90017b18:	fb0a 7606 	mla	r6, sl, r6, r7
90017b1c:	9f02      	ldr	r7, [sp, #8]
90017b1e:	f816 6009 	ldrb.w	r6, [r6, r9]
90017b22:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90017b26:	fb01 f608 	mul.w	r6, r1, r8
90017b2a:	9903      	ldr	r1, [sp, #12]
90017b2c:	538f      	strh	r7, [r1, r6]
90017b2e:	4470      	add	r0, lr
90017b30:	4462      	add	r2, ip
90017b32:	f108 38ff 	add.w	r8, r8, #4294967295
90017b36:	e782      	b.n	90017a3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017b38:	b005      	add	sp, #20
90017b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017b3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017b3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017b42:	b087      	sub	sp, #28
90017b44:	9c15      	ldr	r4, [sp, #84]	; 0x54
90017b46:	9205      	str	r2, [sp, #20]
90017b48:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017b4c:	9102      	str	r1, [sp, #8]
90017b4e:	9203      	str	r2, [sp, #12]
90017b50:	6861      	ldr	r1, [r4, #4]
90017b52:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90017b56:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90017b5a:	fb01 2000 	mla	r0, r1, r0, r2
90017b5e:	6822      	ldr	r2, [r4, #0]
90017b60:	eb02 0240 	add.w	r2, r2, r0, lsl #1
90017b64:	9200      	str	r2, [sp, #0]
90017b66:	f8dc 2000 	ldr.w	r2, [ip]
90017b6a:	9204      	str	r2, [sp, #16]
90017b6c:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017b70:	3204      	adds	r2, #4
90017b72:	9201      	str	r2, [sp, #4]
90017b74:	9a03      	ldr	r2, [sp, #12]
90017b76:	43d5      	mvns	r5, r2
90017b78:	b2ed      	uxtb	r5, r5
90017b7a:	9a02      	ldr	r2, [sp, #8]
90017b7c:	2a00      	cmp	r2, #0
90017b7e:	dc03      	bgt.n	90017b88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90017b80:	9a05      	ldr	r2, [sp, #20]
90017b82:	2a00      	cmp	r2, #0
90017b84:	f340 812c 	ble.w	90017de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017b88:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017b8a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90017b8e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017b94:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90017b98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017b9c:	2b00      	cmp	r3, #0
90017b9e:	dd10      	ble.n	90017bc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017ba0:	140c      	asrs	r4, r1, #16
90017ba2:	d405      	bmi.n	90017bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017ba4:	4574      	cmp	r4, lr
90017ba6:	da03      	bge.n	90017bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017ba8:	1414      	asrs	r4, r2, #16
90017baa:	d401      	bmi.n	90017bb0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017bac:	42bc      	cmp	r4, r7
90017bae:	db09      	blt.n	90017bc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90017bb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017bb2:	3b01      	subs	r3, #1
90017bb4:	9800      	ldr	r0, [sp, #0]
90017bb6:	4421      	add	r1, r4
90017bb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017bba:	3002      	adds	r0, #2
90017bbc:	4422      	add	r2, r4
90017bbe:	9000      	str	r0, [sp, #0]
90017bc0:	e7ec      	b.n	90017b9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90017bc2:	d071      	beq.n	90017ca8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90017bc4:	1e5c      	subs	r4, r3, #1
90017bc6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017bc8:	fb06 1604 	mla	r6, r6, r4, r1
90017bcc:	1436      	asrs	r6, r6, #16
90017bce:	d45d      	bmi.n	90017c8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017bd0:	4576      	cmp	r6, lr
90017bd2:	da5b      	bge.n	90017c8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017bd4:	9e14      	ldr	r6, [sp, #80]	; 0x50
90017bd6:	fb06 2404 	mla	r4, r6, r4, r2
90017bda:	1424      	asrs	r4, r4, #16
90017bdc:	d456      	bmi.n	90017c8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017bde:	42bc      	cmp	r4, r7
90017be0:	da54      	bge.n	90017c8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017be2:	4698      	mov	r8, r3
90017be4:	f8dd 9000 	ldr.w	r9, [sp]
90017be8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
90017bec:	f1b8 0f00 	cmp.w	r8, #0
90017bf0:	dd54      	ble.n	90017c9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90017bf2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017bf6:	1414      	asrs	r4, r2, #16
90017bf8:	9804      	ldr	r0, [sp, #16]
90017bfa:	140e      	asrs	r6, r1, #16
90017bfc:	f108 38ff 	add.w	r8, r8, #4294967295
90017c00:	fb07 0404 	mla	r4, r7, r4, r0
90017c04:	9801      	ldr	r0, [sp, #4]
90017c06:	f814 e006 	ldrb.w	lr, [r4, r6]
90017c0a:	f8b9 4000 	ldrh.w	r4, [r9]
90017c0e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017c12:	1227      	asrs	r7, r4, #8
90017c14:	eb00 0b0e 	add.w	fp, r0, lr
90017c18:	f810 e00e 	ldrb.w	lr, [r0, lr]
90017c1c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017c20:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017c22:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017c26:	f89b b001 	ldrb.w	fp, [fp, #1]
90017c2a:	4401      	add	r1, r0
90017c2c:	fb16 f60a 	smulbb	r6, r6, sl
90017c30:	9814      	ldr	r0, [sp, #80]	; 0x50
90017c32:	fb1b fb0a 	smulbb	fp, fp, sl
90017c36:	fb07 6705 	mla	r7, r7, r5, r6
90017c3a:	10e6      	asrs	r6, r4, #3
90017c3c:	00e4      	lsls	r4, r4, #3
90017c3e:	4402      	add	r2, r0
90017c40:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017c44:	b2bf      	uxth	r7, r7
90017c46:	b2e4      	uxtb	r4, r4
90017c48:	fb06 b605 	mla	r6, r6, r5, fp
90017c4c:	fb14 f405 	smulbb	r4, r4, r5
90017c50:	b2b6      	uxth	r6, r6
90017c52:	fb0e 4e0a 	mla	lr, lr, sl, r4
90017c56:	1c7c      	adds	r4, r7, #1
90017c58:	f106 0b01 	add.w	fp, r6, #1
90017c5c:	fa1f fe8e 	uxth.w	lr, lr
90017c60:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017c64:	f10e 0401 	add.w	r4, lr, #1
90017c68:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017c6c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017c70:	eb04 241e 	add.w	r4, r4, lr, lsr #8
90017c74:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017c78:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017c7c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017c80:	4327      	orrs	r7, r4
90017c82:	ea47 070b 	orr.w	r7, r7, fp
90017c86:	f829 7b02 	strh.w	r7, [r9], #2
90017c8a:	e7af      	b.n	90017bec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90017c8c:	f04f 0e00 	mov.w	lr, #0
90017c90:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90017c94:	eb03 040e 	add.w	r4, r3, lr
90017c98:	2c00      	cmp	r4, #0
90017c9a:	dc43      	bgt.n	90017d24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90017c9c:	9a00      	ldr	r2, [sp, #0]
90017c9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017ca2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90017ca6:	9300      	str	r3, [sp, #0]
90017ca8:	9b02      	ldr	r3, [sp, #8]
90017caa:	2b00      	cmp	r3, #0
90017cac:	f340 8098 	ble.w	90017de0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017cb6:	ee30 0a04 	vadd.f32	s0, s0, s8
90017cba:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017cbe:	eef0 6a62 	vmov.f32	s13, s5
90017cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017cc6:	ee31 1a05 	vadd.f32	s2, s2, s10
90017cca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017cce:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90017cd2:	eef0 6a43 	vmov.f32	s13, s6
90017cd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017cda:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90017cde:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017ce2:	ee61 7a27 	vmul.f32	s15, s2, s15
90017ce6:	ee77 2a62 	vsub.f32	s5, s14, s5
90017cea:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017cee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017cf2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017cf6:	ee12 2a90 	vmov	r2, s5
90017cfa:	eef0 2a47 	vmov.f32	s5, s14
90017cfe:	fb92 f3f3 	sdiv	r3, r2, r3
90017d02:	ee13 2a10 	vmov	r2, s6
90017d06:	9313      	str	r3, [sp, #76]	; 0x4c
90017d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017d0a:	eeb0 3a67 	vmov.f32	s6, s15
90017d0e:	fb92 f3f3 	sdiv	r3, r2, r3
90017d12:	9314      	str	r3, [sp, #80]	; 0x50
90017d14:	9b02      	ldr	r3, [sp, #8]
90017d16:	9a05      	ldr	r2, [sp, #20]
90017d18:	3b01      	subs	r3, #1
90017d1a:	9302      	str	r3, [sp, #8]
90017d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017d1e:	bf08      	it	eq
90017d20:	4613      	moveq	r3, r2
90017d22:	e72a      	b.n	90017b7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017d24:	140f      	asrs	r7, r1, #16
90017d26:	d454      	bmi.n	90017dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017d28:	f8dc 6008 	ldr.w	r6, [ip, #8]
90017d2c:	42be      	cmp	r6, r7
90017d2e:	dd50      	ble.n	90017dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017d30:	ea5f 4822 	movs.w	r8, r2, asr #16
90017d34:	d44d      	bmi.n	90017dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017d36:	f8dc 400c 	ldr.w	r4, [ip, #12]
90017d3a:	4544      	cmp	r4, r8
90017d3c:	dd49      	ble.n	90017dd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017d3e:	9c04      	ldr	r4, [sp, #16]
90017d40:	b236      	sxth	r6, r6
90017d42:	f06f 0001 	mvn.w	r0, #1
90017d46:	fb08 4606 	mla	r6, r8, r6, r4
90017d4a:	9c01      	ldr	r4, [sp, #4]
90017d4c:	fb00 fa0e 	mul.w	sl, r0, lr
90017d50:	9800      	ldr	r0, [sp, #0]
90017d52:	f816 8007 	ldrb.w	r8, [r6, r7]
90017d56:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90017d5a:	eb04 0b08 	add.w	fp, r4, r8
90017d5e:	f830 400a 	ldrh.w	r4, [r0, sl]
90017d62:	9801      	ldr	r0, [sp, #4]
90017d64:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017d68:	1227      	asrs	r7, r4, #8
90017d6a:	f89b b001 	ldrb.w	fp, [fp, #1]
90017d6e:	fb16 f609 	smulbb	r6, r6, r9
90017d72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017d76:	f810 8008 	ldrb.w	r8, [r0, r8]
90017d7a:	fb1b fb09 	smulbb	fp, fp, r9
90017d7e:	fb07 6705 	mla	r7, r7, r5, r6
90017d82:	10e6      	asrs	r6, r4, #3
90017d84:	00e4      	lsls	r4, r4, #3
90017d86:	9800      	ldr	r0, [sp, #0]
90017d88:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017d8c:	b2bf      	uxth	r7, r7
90017d8e:	b2e4      	uxtb	r4, r4
90017d90:	fb06 b605 	mla	r6, r6, r5, fp
90017d94:	fb14 f405 	smulbb	r4, r4, r5
90017d98:	b2b6      	uxth	r6, r6
90017d9a:	fb08 4809 	mla	r8, r8, r9, r4
90017d9e:	1c7c      	adds	r4, r7, #1
90017da0:	f106 0b01 	add.w	fp, r6, #1
90017da4:	fa1f f888 	uxth.w	r8, r8
90017da8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017dac:	f108 0401 	add.w	r4, r8, #1
90017db0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017db4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017db8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90017dbc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017dc0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017dc4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017dc8:	4327      	orrs	r7, r4
90017dca:	ea47 070b 	orr.w	r7, r7, fp
90017dce:	f820 700a 	strh.w	r7, [r0, sl]
90017dd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017dd4:	f10e 3eff 	add.w	lr, lr, #4294967295
90017dd8:	4401      	add	r1, r0
90017dda:	9814      	ldr	r0, [sp, #80]	; 0x50
90017ddc:	4402      	add	r2, r0
90017dde:	e759      	b.n	90017c94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90017de0:	b007      	add	sp, #28
90017de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017de8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017dec:	b085      	sub	sp, #20
90017dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017df2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017df4:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017df6:	9203      	str	r2, [sp, #12]
90017df8:	6870      	ldr	r0, [r6, #4]
90017dfa:	686f      	ldr	r7, [r5, #4]
90017dfc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
90017e00:	3704      	adds	r7, #4
90017e02:	9101      	str	r1, [sp, #4]
90017e04:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017e08:	fb00 2404 	mla	r4, r0, r4, r2
90017e0c:	6832      	ldr	r2, [r6, #0]
90017e0e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017e12:	682a      	ldr	r2, [r5, #0]
90017e14:	9202      	str	r2, [sp, #8]
90017e16:	9a01      	ldr	r2, [sp, #4]
90017e18:	2a00      	cmp	r2, #0
90017e1a:	dc03      	bgt.n	90017e24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017e1c:	9a03      	ldr	r2, [sp, #12]
90017e1e:	2a00      	cmp	r2, #0
90017e20:	f340 80cc 	ble.w	90017fbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017e26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017e2a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017e30:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017e34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017e38:	2b00      	cmp	r3, #0
90017e3a:	dd0d      	ble.n	90017e58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017e3c:	1406      	asrs	r6, r0, #16
90017e3e:	d405      	bmi.n	90017e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017e40:	454e      	cmp	r6, r9
90017e42:	da03      	bge.n	90017e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017e44:	1416      	asrs	r6, r2, #16
90017e46:	d401      	bmi.n	90017e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017e48:	4546      	cmp	r6, r8
90017e4a:	db06      	blt.n	90017e5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017e4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
90017e4e:	4460      	add	r0, ip
90017e50:	3b01      	subs	r3, #1
90017e52:	3402      	adds	r4, #2
90017e54:	4432      	add	r2, r6
90017e56:	e7ef      	b.n	90017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90017e58:	d00f      	beq.n	90017e7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017e5a:	1e5e      	subs	r6, r3, #1
90017e5c:	fb0c 0e06 	mla	lr, ip, r6, r0
90017e60:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90017e64:	d543      	bpl.n	90017eee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90017e66:	4698      	mov	r8, r3
90017e68:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90017e6c:	f1b8 0f00 	cmp.w	r8, #0
90017e70:	dc71      	bgt.n	90017f56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90017e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017e76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017e7a:	9b01      	ldr	r3, [sp, #4]
90017e7c:	2b00      	cmp	r3, #0
90017e7e:	f340 809d 	ble.w	90017fbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017e82:	ee30 0a04 	vadd.f32	s0, s0, s8
90017e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017e88:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017e8c:	eeb0 6a62 	vmov.f32	s12, s5
90017e90:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017e94:	ee31 1a05 	vadd.f32	s2, s2, s10
90017e98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017e9c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017ea0:	eeb0 6a43 	vmov.f32	s12, s6
90017ea4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017ea8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017eac:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017eb0:	ee61 7a27 	vmul.f32	s15, s2, s15
90017eb4:	ee77 2a62 	vsub.f32	s5, s14, s5
90017eb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017ebc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017ec0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017ec4:	ee12 2a90 	vmov	r2, s5
90017ec8:	eef0 2a47 	vmov.f32	s5, s14
90017ecc:	fb92 fcf3 	sdiv	ip, r2, r3
90017ed0:	ee13 2a10 	vmov	r2, s6
90017ed4:	eeb0 3a67 	vmov.f32	s6, s15
90017ed8:	fb92 f3f3 	sdiv	r3, r2, r3
90017edc:	9312      	str	r3, [sp, #72]	; 0x48
90017ede:	9b01      	ldr	r3, [sp, #4]
90017ee0:	9a03      	ldr	r2, [sp, #12]
90017ee2:	3b01      	subs	r3, #1
90017ee4:	9301      	str	r3, [sp, #4]
90017ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017ee8:	bf08      	it	eq
90017eea:	4613      	moveq	r3, r2
90017eec:	e793      	b.n	90017e16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90017eee:	45ce      	cmp	lr, r9
90017ef0:	dab9      	bge.n	90017e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017ef2:	9912      	ldr	r1, [sp, #72]	; 0x48
90017ef4:	fb01 2606 	mla	r6, r1, r6, r2
90017ef8:	1436      	asrs	r6, r6, #16
90017efa:	d4b4      	bmi.n	90017e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017efc:	4546      	cmp	r6, r8
90017efe:	dab2      	bge.n	90017e66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017f00:	4698      	mov	r8, r3
90017f02:	46a2      	mov	sl, r4
90017f04:	f1b8 0f00 	cmp.w	r8, #0
90017f08:	ddb3      	ble.n	90017e72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017f0a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017f0e:	1416      	asrs	r6, r2, #16
90017f10:	9902      	ldr	r1, [sp, #8]
90017f12:	ea4f 4e20 	mov.w	lr, r0, asr #16
90017f16:	f108 38ff 	add.w	r8, r8, #4294967295
90017f1a:	4460      	add	r0, ip
90017f1c:	fb09 1606 	mla	r6, r9, r6, r1
90017f20:	4928      	ldr	r1, [pc, #160]	; (90017fc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
90017f22:	f816 e00e 	ldrb.w	lr, [r6, lr]
90017f26:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017f2a:	eb07 0b0e 	add.w	fp, r7, lr
90017f2e:	f89b 6001 	ldrb.w	r6, [fp, #1]
90017f32:	f89b 9002 	ldrb.w	r9, [fp, #2]
90017f36:	00f6      	lsls	r6, r6, #3
90017f38:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90017f3c:	9912      	ldr	r1, [sp, #72]	; 0x48
90017f3e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017f42:	440a      	add	r2, r1
90017f44:	ea49 0606 	orr.w	r6, r9, r6
90017f48:	f817 900e 	ldrb.w	r9, [r7, lr]
90017f4c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90017f50:	f82a 6b02 	strh.w	r6, [sl], #2
90017f54:	e7d6      	b.n	90017f04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017f56:	ea5f 4920 	movs.w	r9, r0, asr #16
90017f5a:	d429      	bmi.n	90017fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f5c:	68ae      	ldr	r6, [r5, #8]
90017f5e:	454e      	cmp	r6, r9
90017f60:	dd26      	ble.n	90017fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f62:	ea5f 4b22 	movs.w	fp, r2, asr #16
90017f66:	d423      	bmi.n	90017fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f68:	68e9      	ldr	r1, [r5, #12]
90017f6a:	4559      	cmp	r1, fp
90017f6c:	dd20      	ble.n	90017fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017f6e:	fa0f fe86 	sxth.w	lr, r6
90017f72:	9902      	ldr	r1, [sp, #8]
90017f74:	fb0b 1e0e 	mla	lr, fp, lr, r1
90017f78:	f06f 0101 	mvn.w	r1, #1
90017f7c:	f81e e009 	ldrb.w	lr, [lr, r9]
90017f80:	fb01 f908 	mul.w	r9, r1, r8
90017f84:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90017f88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017f8c:	eb07 060e 	add.w	r6, r7, lr
90017f90:	f896 b002 	ldrb.w	fp, [r6, #2]
90017f94:	7876      	ldrb	r6, [r6, #1]
90017f96:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90017f9a:	00f6      	lsls	r6, r6, #3
90017f9c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017fa0:	ea4b 0606 	orr.w	r6, fp, r6
90017fa4:	f817 b00e 	ldrb.w	fp, [r7, lr]
90017fa8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90017fac:	f82a 6009 	strh.w	r6, [sl, r9]
90017fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
90017fb2:	4460      	add	r0, ip
90017fb4:	f108 38ff 	add.w	r8, r8, #4294967295
90017fb8:	440a      	add	r2, r1
90017fba:	e757      	b.n	90017e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017fbc:	b005      	add	sp, #20
90017fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017fc2:	bf00      	nop
90017fc4:	fffff800 	.word	0xfffff800

90017fc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017fcc:	b087      	sub	sp, #28
90017fce:	468b      	mov	fp, r1
90017fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017fd4:	9815      	ldr	r0, [sp, #84]	; 0x54
90017fd6:	9204      	str	r2, [sp, #16]
90017fd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017fdc:	6841      	ldr	r1, [r0, #4]
90017fde:	9205      	str	r2, [sp, #20]
90017fe0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90017fe4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017fe8:	fb01 2404 	mla	r4, r1, r4, r2
90017fec:	6802      	ldr	r2, [r0, #0]
90017fee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017ff2:	f8dc 2000 	ldr.w	r2, [ip]
90017ff6:	9201      	str	r2, [sp, #4]
90017ff8:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017ffc:	3204      	adds	r2, #4
90017ffe:	9202      	str	r2, [sp, #8]
90018000:	f1bb 0f00 	cmp.w	fp, #0
90018004:	dc03      	bgt.n	9001800e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90018006:	9a04      	ldr	r2, [sp, #16]
90018008:	2a00      	cmp	r2, #0
9001800a:	f340 8138 	ble.w	9001827e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001800e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018010:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90018014:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018018:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001801a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001801e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018022:	2b00      	cmp	r3, #0
90018024:	dd0e      	ble.n	90018044 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018026:	1402      	asrs	r2, r0, #16
90018028:	d405      	bmi.n	90018036 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001802a:	42ba      	cmp	r2, r7
9001802c:	da03      	bge.n	90018036 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001802e:	140a      	asrs	r2, r1, #16
90018030:	d401      	bmi.n	90018036 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90018032:	42b2      	cmp	r2, r6
90018034:	db07      	blt.n	90018046 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018036:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018038:	3b01      	subs	r3, #1
9001803a:	3402      	adds	r4, #2
9001803c:	4410      	add	r0, r2
9001803e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018040:	4411      	add	r1, r2
90018042:	e7ee      	b.n	90018022 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90018044:	d019      	beq.n	9001807a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90018046:	1e5a      	subs	r2, r3, #1
90018048:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001804a:	fb05 0502 	mla	r5, r5, r2, r0
9001804e:	142d      	asrs	r5, r5, #16
90018050:	d409      	bmi.n	90018066 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018052:	42bd      	cmp	r5, r7
90018054:	da07      	bge.n	90018066 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018056:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018058:	fb05 1202 	mla	r2, r5, r2, r1
9001805c:	1412      	asrs	r2, r2, #16
9001805e:	d402      	bmi.n	90018066 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018060:	42b2      	cmp	r2, r6
90018062:	f2c0 80ac 	blt.w	900181be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90018066:	f04f 0e00 	mov.w	lr, #0
9001806a:	eb03 020e 	add.w	r2, r3, lr
9001806e:	2a00      	cmp	r2, #0
90018070:	dc3e      	bgt.n	900180f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90018072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018076:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001807a:	f1bb 0f00 	cmp.w	fp, #0
9001807e:	f340 80fe 	ble.w	9001827e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90018082:	ee30 0a04 	vadd.f32	s0, s0, s8
90018086:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018088:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001808c:	f1bb 0b01 	subs.w	fp, fp, #1
90018090:	eeb0 6a62 	vmov.f32	s12, s5
90018094:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018098:	ee31 1a05 	vadd.f32	s2, s2, s10
9001809c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900180a0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900180a4:	eeb0 6a43 	vmov.f32	s12, s6
900180a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900180ac:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900180b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900180b4:	ee61 7a27 	vmul.f32	s15, s2, s15
900180b8:	ee77 2a62 	vsub.f32	s5, s14, s5
900180bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
900180c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900180c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900180c8:	ee12 2a90 	vmov	r2, s5
900180cc:	eef0 2a47 	vmov.f32	s5, s14
900180d0:	fb92 f3f3 	sdiv	r3, r2, r3
900180d4:	ee13 2a10 	vmov	r2, s6
900180d8:	9313      	str	r3, [sp, #76]	; 0x4c
900180da:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180dc:	eeb0 3a67 	vmov.f32	s6, s15
900180e0:	fb92 f3f3 	sdiv	r3, r2, r3
900180e4:	9a04      	ldr	r2, [sp, #16]
900180e6:	9314      	str	r3, [sp, #80]	; 0x50
900180e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180ea:	bf08      	it	eq
900180ec:	4613      	moveq	r3, r2
900180ee:	e787      	b.n	90018000 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900180f0:	1406      	asrs	r6, r0, #16
900180f2:	d45d      	bmi.n	900181b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180f4:	f8dc 5008 	ldr.w	r5, [ip, #8]
900180f8:	42b5      	cmp	r5, r6
900180fa:	dd59      	ble.n	900181b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900180fc:	140f      	asrs	r7, r1, #16
900180fe:	d457      	bmi.n	900181b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90018100:	f8dc 200c 	ldr.w	r2, [ip, #12]
90018104:	42ba      	cmp	r2, r7
90018106:	dd53      	ble.n	900181b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90018108:	9a01      	ldr	r2, [sp, #4]
9001810a:	b22d      	sxth	r5, r5
9001810c:	fb07 2505 	mla	r5, r7, r5, r2
90018110:	5daa      	ldrb	r2, [r5, r6]
90018112:	9d02      	ldr	r5, [sp, #8]
90018114:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90018118:	0e2e      	lsrs	r6, r5, #24
9001811a:	d049      	beq.n	900181b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001811c:	f06f 0201 	mvn.w	r2, #1
90018120:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018124:	fb02 f20e 	mul.w	r2, r2, lr
90018128:	f834 8002 	ldrh.w	r8, [r4, r2]
9001812c:	9203      	str	r2, [sp, #12]
9001812e:	9a05      	ldr	r2, [sp, #20]
90018130:	ea4f 2728 	mov.w	r7, r8, asr #8
90018134:	4356      	muls	r6, r2
90018136:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001813a:	1c72      	adds	r2, r6, #1
9001813c:	eb02 2226 	add.w	r2, r2, r6, asr #8
90018140:	f3c5 4607 	ubfx	r6, r5, #16, #8
90018144:	b2ed      	uxtb	r5, r5
90018146:	1212      	asrs	r2, r2, #8
90018148:	fa1f f982 	uxth.w	r9, r2
9001814c:	43d2      	mvns	r2, r2
9001814e:	fb16 f609 	smulbb	r6, r6, r9
90018152:	b2d2      	uxtb	r2, r2
90018154:	fb15 f509 	smulbb	r5, r5, r9
90018158:	fb07 6702 	mla	r7, r7, r2, r6
9001815c:	ea4f 06e8 	mov.w	r6, r8, asr #3
90018160:	fb1a fa09 	smulbb	sl, sl, r9
90018164:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018168:	b2bf      	uxth	r7, r7
9001816a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001816e:	fa5f f888 	uxtb.w	r8, r8
90018172:	fb06 a602 	mla	r6, r6, r2, sl
90018176:	fb08 5502 	mla	r5, r8, r2, r5
9001817a:	1c7a      	adds	r2, r7, #1
9001817c:	b2b6      	uxth	r6, r6
9001817e:	b2ad      	uxth	r5, r5
90018180:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90018184:	9a03      	ldr	r2, [sp, #12]
90018186:	f105 0a01 	add.w	sl, r5, #1
9001818a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001818e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018192:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018196:	ea4a 0707 	orr.w	r7, sl, r7
9001819a:	f106 0a01 	add.w	sl, r6, #1
9001819e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900181a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900181a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900181aa:	ea47 070a 	orr.w	r7, r7, sl
900181ae:	52a7      	strh	r7, [r4, r2]
900181b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900181b2:	f10e 3eff 	add.w	lr, lr, #4294967295
900181b6:	4410      	add	r0, r2
900181b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
900181ba:	4411      	add	r1, r2
900181bc:	e755      	b.n	9001806a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
900181be:	f04f 0800 	mov.w	r8, #0
900181c2:	eba3 0208 	sub.w	r2, r3, r8
900181c6:	2a00      	cmp	r2, #0
900181c8:	f77f af53 	ble.w	90018072 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900181cc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
900181d0:	140a      	asrs	r2, r1, #16
900181d2:	9f01      	ldr	r7, [sp, #4]
900181d4:	1405      	asrs	r5, r0, #16
900181d6:	fb06 7202 	mla	r2, r6, r2, r7
900181da:	5d52      	ldrb	r2, [r2, r5]
900181dc:	9d02      	ldr	r5, [sp, #8]
900181de:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
900181e2:	0e2e      	lsrs	r6, r5, #24
900181e4:	d044      	beq.n	90018270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
900181e6:	9a05      	ldr	r2, [sp, #20]
900181e8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900181ec:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
900181f0:	4356      	muls	r6, r2
900181f2:	ea4f 272e 	mov.w	r7, lr, asr #8
900181f6:	1c72      	adds	r2, r6, #1
900181f8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900181fc:	eb02 2226 	add.w	r2, r2, r6, asr #8
90018200:	f3c5 4607 	ubfx	r6, r5, #16, #8
90018204:	b2ed      	uxtb	r5, r5
90018206:	1212      	asrs	r2, r2, #8
90018208:	fa1f f982 	uxth.w	r9, r2
9001820c:	43d2      	mvns	r2, r2
9001820e:	fb16 f609 	smulbb	r6, r6, r9
90018212:	b2d2      	uxtb	r2, r2
90018214:	fb15 f509 	smulbb	r5, r5, r9
90018218:	fb07 6702 	mla	r7, r7, r2, r6
9001821c:	ea4f 06ee 	mov.w	r6, lr, asr #3
90018220:	fb1a fa09 	smulbb	sl, sl, r9
90018224:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018228:	b2bf      	uxth	r7, r7
9001822a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001822e:	fa5f fe8e 	uxtb.w	lr, lr
90018232:	fb06 a602 	mla	r6, r6, r2, sl
90018236:	fb0e 5502 	mla	r5, lr, r2, r5
9001823a:	1c7a      	adds	r2, r7, #1
9001823c:	b2b6      	uxth	r6, r6
9001823e:	b2ad      	uxth	r5, r5
90018240:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90018244:	f105 0a01 	add.w	sl, r5, #1
90018248:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001824c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018250:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018254:	ea4a 0707 	orr.w	r7, sl, r7
90018258:	f106 0a01 	add.w	sl, r6, #1
9001825c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018260:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018264:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018268:	ea47 070a 	orr.w	r7, r7, sl
9001826c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018272:	f108 0801 	add.w	r8, r8, #1
90018276:	4410      	add	r0, r2
90018278:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001827a:	4411      	add	r1, r2
9001827c:	e7a1      	b.n	900181c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001827e:	b007      	add	sp, #28
90018280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018288:	b085      	sub	sp, #20
9001828a:	468b      	mov	fp, r1
9001828c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018290:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018292:	9203      	str	r2, [sp, #12]
90018294:	6841      	ldr	r1, [r0, #4]
90018296:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001829a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001829e:	fb01 2404 	mla	r4, r1, r4, r2
900182a2:	6802      	ldr	r2, [r0, #0]
900182a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900182a8:	f8de 2000 	ldr.w	r2, [lr]
900182ac:	9200      	str	r2, [sp, #0]
900182ae:	f8de 2004 	ldr.w	r2, [lr, #4]
900182b2:	3204      	adds	r2, #4
900182b4:	9201      	str	r2, [sp, #4]
900182b6:	f1bb 0f00 	cmp.w	fp, #0
900182ba:	dc03      	bgt.n	900182c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
900182bc:	9a03      	ldr	r2, [sp, #12]
900182be:	2a00      	cmp	r2, #0
900182c0:	f340 8153 	ble.w	9001856a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
900182c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900182c6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
900182ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900182ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
900182d0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
900182d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900182d8:	2b00      	cmp	r3, #0
900182da:	dd0e      	ble.n	900182fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900182dc:	1408      	asrs	r0, r1, #16
900182de:	d405      	bmi.n	900182ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900182e0:	42b8      	cmp	r0, r7
900182e2:	da03      	bge.n	900182ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900182e4:	1410      	asrs	r0, r2, #16
900182e6:	d401      	bmi.n	900182ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900182e8:	42b0      	cmp	r0, r6
900182ea:	db07      	blt.n	900182fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
900182ec:	9811      	ldr	r0, [sp, #68]	; 0x44
900182ee:	3b01      	subs	r3, #1
900182f0:	3402      	adds	r4, #2
900182f2:	4401      	add	r1, r0
900182f4:	9812      	ldr	r0, [sp, #72]	; 0x48
900182f6:	4402      	add	r2, r0
900182f8:	e7ee      	b.n	900182d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
900182fa:	d017      	beq.n	9001832c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900182fc:	1e58      	subs	r0, r3, #1
900182fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018300:	fb05 1500 	mla	r5, r5, r0, r1
90018304:	142d      	asrs	r5, r5, #16
90018306:	d409      	bmi.n	9001831c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018308:	42bd      	cmp	r5, r7
9001830a:	da07      	bge.n	9001831c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001830c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001830e:	fb05 2000 	mla	r0, r5, r0, r2
90018312:	1400      	asrs	r0, r0, #16
90018314:	d402      	bmi.n	9001831c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018316:	42b0      	cmp	r0, r6
90018318:	f2c0 80bc 	blt.w	90018494 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001831c:	2600      	movs	r6, #0
9001831e:	1998      	adds	r0, r3, r6
90018320:	2800      	cmp	r0, #0
90018322:	dc3e      	bgt.n	900183a2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
90018324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018328:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001832c:	f1bb 0f00 	cmp.w	fp, #0
90018330:	f340 811b 	ble.w	9001856a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90018334:	ee30 0a04 	vadd.f32	s0, s0, s8
90018338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001833a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001833e:	f1bb 0b01 	subs.w	fp, fp, #1
90018342:	eeb0 6a62 	vmov.f32	s12, s5
90018346:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001834a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001834e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018352:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018356:	eeb0 6a43 	vmov.f32	s12, s6
9001835a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001835e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018362:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018366:	ee61 7a27 	vmul.f32	s15, s2, s15
9001836a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001836e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018372:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018376:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001837a:	ee12 2a90 	vmov	r2, s5
9001837e:	eef0 2a47 	vmov.f32	s5, s14
90018382:	fb92 f3f3 	sdiv	r3, r2, r3
90018386:	ee13 2a10 	vmov	r2, s6
9001838a:	9311      	str	r3, [sp, #68]	; 0x44
9001838c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001838e:	eeb0 3a67 	vmov.f32	s6, s15
90018392:	fb92 f3f3 	sdiv	r3, r2, r3
90018396:	9a03      	ldr	r2, [sp, #12]
90018398:	9312      	str	r3, [sp, #72]	; 0x48
9001839a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001839c:	bf08      	it	eq
9001839e:	4613      	moveq	r3, r2
900183a0:	e789      	b.n	900182b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
900183a2:	140f      	asrs	r7, r1, #16
900183a4:	d426      	bmi.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900183a6:	f8de 5008 	ldr.w	r5, [lr, #8]
900183aa:	42bd      	cmp	r5, r7
900183ac:	dd22      	ble.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900183ae:	ea5f 4c22 	movs.w	ip, r2, asr #16
900183b2:	d41f      	bmi.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900183b4:	f8de 000c 	ldr.w	r0, [lr, #12]
900183b8:	4560      	cmp	r0, ip
900183ba:	dd1b      	ble.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900183bc:	9800      	ldr	r0, [sp, #0]
900183be:	b22d      	sxth	r5, r5
900183c0:	fb0c 0505 	mla	r5, ip, r5, r0
900183c4:	5de8      	ldrb	r0, [r5, r7]
900183c6:	9d01      	ldr	r5, [sp, #4]
900183c8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
900183cc:	0e07      	lsrs	r7, r0, #24
900183ce:	2fff      	cmp	r7, #255	; 0xff
900183d0:	d116      	bne.n	90018400 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900183d2:	f06f 0501 	mvn.w	r5, #1
900183d6:	fb05 f706 	mul.w	r7, r5, r6
900183da:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
900183de:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
900183e2:	0945      	lsrs	r5, r0, #5
900183e4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
900183e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900183ec:	ea4c 0505 	orr.w	r5, ip, r5
900183f0:	4305      	orrs	r5, r0
900183f2:	53e5      	strh	r5, [r4, r7]
900183f4:	9811      	ldr	r0, [sp, #68]	; 0x44
900183f6:	3e01      	subs	r6, #1
900183f8:	4401      	add	r1, r0
900183fa:	9812      	ldr	r0, [sp, #72]	; 0x48
900183fc:	4402      	add	r2, r0
900183fe:	e78e      	b.n	9001831e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90018400:	b2fd      	uxtb	r5, r7
90018402:	2f00      	cmp	r7, #0
90018404:	d0f6      	beq.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018406:	f06f 0701 	mvn.w	r7, #1
9001840a:	fa1f f985 	uxth.w	r9, r5
9001840e:	43ed      	mvns	r5, r5
90018410:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90018414:	4377      	muls	r7, r6
90018416:	fb1a fa09 	smulbb	sl, sl, r9
9001841a:	b2ed      	uxtb	r5, r5
9001841c:	f834 8007 	ldrh.w	r8, [r4, r7]
90018420:	9702      	str	r7, [sp, #8]
90018422:	f3c0 4707 	ubfx	r7, r0, #16, #8
90018426:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001842a:	fb17 f709 	smulbb	r7, r7, r9
9001842e:	b2c0      	uxtb	r0, r0
90018430:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018434:	fb10 f009 	smulbb	r0, r0, r9
90018438:	fb0c 7c05 	mla	ip, ip, r5, r7
9001843c:	ea4f 07e8 	mov.w	r7, r8, asr #3
90018440:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018444:	fa1f fc8c 	uxth.w	ip, ip
90018448:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001844c:	fa5f f888 	uxtb.w	r8, r8
90018450:	fb07 a705 	mla	r7, r7, r5, sl
90018454:	fb08 0005 	mla	r0, r8, r5, r0
90018458:	f10c 0501 	add.w	r5, ip, #1
9001845c:	b2bf      	uxth	r7, r7
9001845e:	b280      	uxth	r0, r0
90018460:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018464:	f100 0a01 	add.w	sl, r0, #1
90018468:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001846c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90018470:	9802      	ldr	r0, [sp, #8]
90018472:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018476:	ea4a 0c0c 	orr.w	ip, sl, ip
9001847a:	f107 0a01 	add.w	sl, r7, #1
9001847e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90018482:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018486:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001848a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001848e:	f824 c000 	strh.w	ip, [r4, r0]
90018492:	e7af      	b.n	900183f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018494:	f04f 0800 	mov.w	r8, #0
90018498:	eba3 0008 	sub.w	r0, r3, r8
9001849c:	2800      	cmp	r0, #0
9001849e:	f77f af41 	ble.w	90018324 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
900184a2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
900184a6:	1410      	asrs	r0, r2, #16
900184a8:	9f00      	ldr	r7, [sp, #0]
900184aa:	140d      	asrs	r5, r1, #16
900184ac:	fb06 7000 	mla	r0, r6, r0, r7
900184b0:	5d40      	ldrb	r0, [r0, r5]
900184b2:	9d01      	ldr	r5, [sp, #4]
900184b4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
900184b8:	0e2e      	lsrs	r6, r5, #24
900184ba:	2eff      	cmp	r6, #255	; 0xff
900184bc:	d112      	bne.n	900184e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
900184be:	482c      	ldr	r0, [pc, #176]	; (90018570 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
900184c0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
900184c4:	0968      	lsrs	r0, r5, #5
900184c6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900184ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900184ce:	4330      	orrs	r0, r6
900184d0:	4328      	orrs	r0, r5
900184d2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
900184d6:	9811      	ldr	r0, [sp, #68]	; 0x44
900184d8:	f108 0801 	add.w	r8, r8, #1
900184dc:	4401      	add	r1, r0
900184de:	9812      	ldr	r0, [sp, #72]	; 0x48
900184e0:	4402      	add	r2, r0
900184e2:	e7d9      	b.n	90018498 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900184e4:	b2f0      	uxtb	r0, r6
900184e6:	2e00      	cmp	r6, #0
900184e8:	d0f5      	beq.n	900184d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
900184ea:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
900184ee:	fa1f f980 	uxth.w	r9, r0
900184f2:	f3c5 4607 	ubfx	r6, r5, #16, #8
900184f6:	43c0      	mvns	r0, r0
900184f8:	ea4f 272c 	mov.w	r7, ip, asr #8
900184fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018500:	fb16 f609 	smulbb	r6, r6, r9
90018504:	b2c0      	uxtb	r0, r0
90018506:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001850a:	b2ed      	uxtb	r5, r5
9001850c:	fb1a fa09 	smulbb	sl, sl, r9
90018510:	fb07 6700 	mla	r7, r7, r0, r6
90018514:	ea4f 06ec 	mov.w	r6, ip, asr #3
90018518:	fb15 f509 	smulbb	r5, r5, r9
9001851c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90018520:	b2bf      	uxth	r7, r7
90018522:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018526:	fa5f fc8c 	uxtb.w	ip, ip
9001852a:	fb06 a600 	mla	r6, r6, r0, sl
9001852e:	fb0c 5500 	mla	r5, ip, r0, r5
90018532:	1c78      	adds	r0, r7, #1
90018534:	b2b6      	uxth	r6, r6
90018536:	b2ad      	uxth	r5, r5
90018538:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001853c:	f105 0a01 	add.w	sl, r5, #1
90018540:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018544:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018548:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001854c:	ea4a 0707 	orr.w	r7, sl, r7
90018550:	f106 0a01 	add.w	sl, r6, #1
90018554:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018558:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001855c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018560:	ea47 070a 	orr.w	r7, r7, sl
90018564:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018568:	e7b5      	b.n	900184d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001856a:	b005      	add	sp, #20
9001856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018570:	fffff800 	.word	0xfffff800

90018574 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018578:	b087      	sub	sp, #28
9001857a:	468b      	mov	fp, r1
9001857c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018580:	9c15      	ldr	r4, [sp, #84]	; 0x54
90018582:	9204      	str	r2, [sp, #16]
90018584:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018588:	6861      	ldr	r1, [r4, #4]
9001858a:	9205      	str	r2, [sp, #20]
9001858c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90018590:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90018594:	fb01 2000 	mla	r0, r1, r0, r2
90018598:	6822      	ldr	r2, [r4, #0]
9001859a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001859e:	f8de 2000 	ldr.w	r2, [lr]
900185a2:	9201      	str	r2, [sp, #4]
900185a4:	f8de 2004 	ldr.w	r2, [lr, #4]
900185a8:	9202      	str	r2, [sp, #8]
900185aa:	f1bb 0f00 	cmp.w	fp, #0
900185ae:	dc03      	bgt.n	900185b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
900185b0:	9a04      	ldr	r2, [sp, #16]
900185b2:	2a00      	cmp	r2, #0
900185b4:	f340 8142 	ble.w	9001883c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900185b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
900185ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
900185be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900185c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
900185c4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
900185c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900185cc:	2b00      	cmp	r3, #0
900185ce:	dd0e      	ble.n	900185ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900185d0:	140c      	asrs	r4, r1, #16
900185d2:	d405      	bmi.n	900185e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900185d4:	42bc      	cmp	r4, r7
900185d6:	da03      	bge.n	900185e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900185d8:	1414      	asrs	r4, r2, #16
900185da:	d401      	bmi.n	900185e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900185dc:	42b4      	cmp	r4, r6
900185de:	db07      	blt.n	900185f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900185e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900185e2:	3b01      	subs	r3, #1
900185e4:	3002      	adds	r0, #2
900185e6:	4421      	add	r1, r4
900185e8:	9c14      	ldr	r4, [sp, #80]	; 0x50
900185ea:	4422      	add	r2, r4
900185ec:	e7ee      	b.n	900185cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900185ee:	d019      	beq.n	90018624 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900185f0:	1e5c      	subs	r4, r3, #1
900185f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900185f4:	fb05 1504 	mla	r5, r5, r4, r1
900185f8:	142d      	asrs	r5, r5, #16
900185fa:	d409      	bmi.n	90018610 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900185fc:	42bd      	cmp	r5, r7
900185fe:	da07      	bge.n	90018610 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018600:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018602:	fb05 2404 	mla	r4, r5, r4, r2
90018606:	1424      	asrs	r4, r4, #16
90018608:	d402      	bmi.n	90018610 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001860a:	42b4      	cmp	r4, r6
9001860c:	f2c0 80b1 	blt.w	90018772 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90018610:	f04f 0800 	mov.w	r8, #0
90018614:	eb03 0408 	add.w	r4, r3, r8
90018618:	2c00      	cmp	r4, #0
9001861a:	dc3e      	bgt.n	9001869a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001861c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018620:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90018624:	f1bb 0f00 	cmp.w	fp, #0
90018628:	f340 8108 	ble.w	9001883c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001862c:	ee30 0a04 	vadd.f32	s0, s0, s8
90018630:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018632:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018636:	f1bb 0b01 	subs.w	fp, fp, #1
9001863a:	eeb0 6a62 	vmov.f32	s12, s5
9001863e:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018642:	ee31 1a05 	vadd.f32	s2, s2, s10
90018646:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001864a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001864e:	eeb0 6a43 	vmov.f32	s12, s6
90018652:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018656:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001865a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001865e:	ee61 7a27 	vmul.f32	s15, s2, s15
90018662:	ee77 2a62 	vsub.f32	s5, s14, s5
90018666:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001866a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001866e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018672:	ee12 2a90 	vmov	r2, s5
90018676:	eef0 2a47 	vmov.f32	s5, s14
9001867a:	fb92 f3f3 	sdiv	r3, r2, r3
9001867e:	ee13 2a10 	vmov	r2, s6
90018682:	9313      	str	r3, [sp, #76]	; 0x4c
90018684:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018686:	eeb0 3a67 	vmov.f32	s6, s15
9001868a:	fb92 f3f3 	sdiv	r3, r2, r3
9001868e:	9a04      	ldr	r2, [sp, #16]
90018690:	9314      	str	r3, [sp, #80]	; 0x50
90018692:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018694:	bf08      	it	eq
90018696:	4613      	moveq	r3, r2
90018698:	e787      	b.n	900185aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001869a:	140e      	asrs	r6, r1, #16
9001869c:	d462      	bmi.n	90018764 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001869e:	f8de 5008 	ldr.w	r5, [lr, #8]
900186a2:	42b5      	cmp	r5, r6
900186a4:	dd5e      	ble.n	90018764 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
900186a6:	1417      	asrs	r7, r2, #16
900186a8:	d45c      	bmi.n	90018764 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
900186aa:	f8de 400c 	ldr.w	r4, [lr, #12]
900186ae:	42bc      	cmp	r4, r7
900186b0:	dd58      	ble.n	90018764 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
900186b2:	b22d      	sxth	r5, r5
900186b4:	9c02      	ldr	r4, [sp, #8]
900186b6:	fb07 6505 	mla	r5, r7, r5, r6
900186ba:	5d66      	ldrb	r6, [r4, r5]
900186bc:	2e00      	cmp	r6, #0
900186be:	d051      	beq.n	90018764 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
900186c0:	9c01      	ldr	r4, [sp, #4]
900186c2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
900186c6:	f06f 0401 	mvn.w	r4, #1
900186ca:	fb04 f408 	mul.w	r4, r4, r8
900186ce:	ea4f 2c29 	mov.w	ip, r9, asr #8
900186d2:	5b05      	ldrh	r5, [r0, r4]
900186d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900186d8:	9403      	str	r4, [sp, #12]
900186da:	9c05      	ldr	r4, [sp, #20]
900186dc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900186e0:	4366      	muls	r6, r4
900186e2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900186e6:	1c74      	adds	r4, r6, #1
900186e8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
900186ec:	122e      	asrs	r6, r5, #8
900186ee:	1224      	asrs	r4, r4, #8
900186f0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900186f4:	00ed      	lsls	r5, r5, #3
900186f6:	b2a7      	uxth	r7, r4
900186f8:	43e4      	mvns	r4, r4
900186fa:	b2ed      	uxtb	r5, r5
900186fc:	b2e4      	uxtb	r4, r4
900186fe:	fb16 f604 	smulbb	r6, r6, r4
90018702:	fb15 f504 	smulbb	r5, r5, r4
90018706:	fb0c 6c07 	mla	ip, ip, r7, r6
9001870a:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001870e:	fb1a fa04 	smulbb	sl, sl, r4
90018712:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90018716:	fa1f fc8c 	uxth.w	ip, ip
9001871a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001871e:	fa5f f989 	uxtb.w	r9, r9
90018722:	fb06 a607 	mla	r6, r6, r7, sl
90018726:	f10c 0401 	add.w	r4, ip, #1
9001872a:	fb09 5507 	mla	r5, r9, r7, r5
9001872e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018732:	9c03      	ldr	r4, [sp, #12]
90018734:	b2ad      	uxth	r5, r5
90018736:	b2b6      	uxth	r6, r6
90018738:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001873c:	f105 0a01 	add.w	sl, r5, #1
90018740:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018744:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018748:	ea4a 0c0c 	orr.w	ip, sl, ip
9001874c:	f106 0a01 	add.w	sl, r6, #1
90018750:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018754:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018758:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001875c:	ea4c 0c0a 	orr.w	ip, ip, sl
90018760:	f820 c004 	strh.w	ip, [r0, r4]
90018764:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018766:	f108 38ff 	add.w	r8, r8, #4294967295
9001876a:	4421      	add	r1, r4
9001876c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001876e:	4422      	add	r2, r4
90018770:	e750      	b.n	90018614 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018772:	f04f 0900 	mov.w	r9, #0
90018776:	eba3 0409 	sub.w	r4, r3, r9
9001877a:	2c00      	cmp	r4, #0
9001877c:	f77f af4e 	ble.w	9001861c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018780:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018784:	140d      	asrs	r5, r1, #16
90018786:	1414      	asrs	r4, r2, #16
90018788:	fb06 5404 	mla	r4, r6, r4, r5
9001878c:	9d02      	ldr	r5, [sp, #8]
9001878e:	5d2e      	ldrb	r6, [r5, r4]
90018790:	2e00      	cmp	r6, #0
90018792:	d04c      	beq.n	9001882e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90018794:	9d01      	ldr	r5, [sp, #4]
90018796:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001879a:	9c05      	ldr	r4, [sp, #20]
9001879c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
900187a0:	ea4f 2c28 	mov.w	ip, r8, asr #8
900187a4:	4366      	muls	r6, r4
900187a6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900187aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900187ae:	1c74      	adds	r4, r6, #1
900187b0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900187b4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
900187b8:	122e      	asrs	r6, r5, #8
900187ba:	1224      	asrs	r4, r4, #8
900187bc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
900187c0:	00ed      	lsls	r5, r5, #3
900187c2:	b2a7      	uxth	r7, r4
900187c4:	43e4      	mvns	r4, r4
900187c6:	b2ed      	uxtb	r5, r5
900187c8:	b2e4      	uxtb	r4, r4
900187ca:	fb16 f604 	smulbb	r6, r6, r4
900187ce:	fb15 f504 	smulbb	r5, r5, r4
900187d2:	fb0c 6c07 	mla	ip, ip, r7, r6
900187d6:	ea4f 06e8 	mov.w	r6, r8, asr #3
900187da:	fb1a fa04 	smulbb	sl, sl, r4
900187de:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900187e2:	fa1f fc8c 	uxth.w	ip, ip
900187e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900187ea:	fa5f f888 	uxtb.w	r8, r8
900187ee:	fb06 a607 	mla	r6, r6, r7, sl
900187f2:	f10c 0401 	add.w	r4, ip, #1
900187f6:	fb08 5507 	mla	r5, r8, r7, r5
900187fa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900187fe:	b2ad      	uxth	r5, r5
90018800:	b2b6      	uxth	r6, r6
90018802:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018806:	f105 0a01 	add.w	sl, r5, #1
9001880a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001880e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018812:	ea4a 0c0c 	orr.w	ip, sl, ip
90018816:	f106 0a01 	add.w	sl, r6, #1
9001881a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001881e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018822:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018826:	ea4c 0c0a 	orr.w	ip, ip, sl
9001882a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001882e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018830:	f109 0901 	add.w	r9, r9, #1
90018834:	4421      	add	r1, r4
90018836:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018838:	4422      	add	r2, r4
9001883a:	e79c      	b.n	90018776 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001883c:	b007      	add	sp, #28
9001883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018842 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018846:	b085      	sub	sp, #20
90018848:	468b      	mov	fp, r1
9001884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001884e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018850:	9203      	str	r2, [sp, #12]
90018852:	6861      	ldr	r1, [r4, #4]
90018854:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90018858:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001885c:	fb01 2000 	mla	r0, r1, r0, r2
90018860:	6822      	ldr	r2, [r4, #0]
90018862:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90018866:	f8d8 2000 	ldr.w	r2, [r8]
9001886a:	9200      	str	r2, [sp, #0]
9001886c:	f8d8 2004 	ldr.w	r2, [r8, #4]
90018870:	9201      	str	r2, [sp, #4]
90018872:	f1bb 0f00 	cmp.w	fp, #0
90018876:	dc03      	bgt.n	90018880 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018878:	9a03      	ldr	r2, [sp, #12]
9001887a:	2a00      	cmp	r2, #0
9001887c:	f340 8146 	ble.w	90018b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018882:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90018886:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001888a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001888c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90018890:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018894:	2b00      	cmp	r3, #0
90018896:	dd0e      	ble.n	900188b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018898:	140c      	asrs	r4, r1, #16
9001889a:	d405      	bmi.n	900188a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001889c:	42bc      	cmp	r4, r7
9001889e:	da03      	bge.n	900188a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900188a0:	1414      	asrs	r4, r2, #16
900188a2:	d401      	bmi.n	900188a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900188a4:	42b4      	cmp	r4, r6
900188a6:	db07      	blt.n	900188b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900188a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
900188aa:	3b01      	subs	r3, #1
900188ac:	3002      	adds	r0, #2
900188ae:	4421      	add	r1, r4
900188b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
900188b2:	4422      	add	r2, r4
900188b4:	e7ee      	b.n	90018894 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900188b6:	d017      	beq.n	900188e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
900188b8:	1e5c      	subs	r4, r3, #1
900188ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
900188bc:	fb05 1504 	mla	r5, r5, r4, r1
900188c0:	142d      	asrs	r5, r5, #16
900188c2:	d409      	bmi.n	900188d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900188c4:	42bd      	cmp	r5, r7
900188c6:	da07      	bge.n	900188d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900188c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900188ca:	fb05 2404 	mla	r4, r5, r4, r2
900188ce:	1424      	asrs	r4, r4, #16
900188d0:	d402      	bmi.n	900188d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900188d2:	42b4      	cmp	r4, r6
900188d4:	f2c0 80b3 	blt.w	90018a3e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900188d8:	2600      	movs	r6, #0
900188da:	199c      	adds	r4, r3, r6
900188dc:	2c00      	cmp	r4, #0
900188de:	dc3e      	bgt.n	9001895e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900188e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900188e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900188e8:	f1bb 0f00 	cmp.w	fp, #0
900188ec:	f340 810e 	ble.w	90018b0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900188f0:	ee30 0a04 	vadd.f32	s0, s0, s8
900188f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900188f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900188fa:	f1bb 0b01 	subs.w	fp, fp, #1
900188fe:	eeb0 6a62 	vmov.f32	s12, s5
90018902:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018906:	ee31 1a05 	vadd.f32	s2, s2, s10
9001890a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001890e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018912:	eeb0 6a43 	vmov.f32	s12, s6
90018916:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001891a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001891e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018922:	ee61 7a27 	vmul.f32	s15, s2, s15
90018926:	ee77 2a62 	vsub.f32	s5, s14, s5
9001892a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001892e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018932:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018936:	ee12 2a90 	vmov	r2, s5
9001893a:	eef0 2a47 	vmov.f32	s5, s14
9001893e:	fb92 f3f3 	sdiv	r3, r2, r3
90018942:	ee13 2a10 	vmov	r2, s6
90018946:	9311      	str	r3, [sp, #68]	; 0x44
90018948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001894a:	eeb0 3a67 	vmov.f32	s6, s15
9001894e:	fb92 f3f3 	sdiv	r3, r2, r3
90018952:	9a03      	ldr	r2, [sp, #12]
90018954:	9312      	str	r3, [sp, #72]	; 0x48
90018956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018958:	bf08      	it	eq
9001895a:	4613      	moveq	r3, r2
9001895c:	e789      	b.n	90018872 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001895e:	140f      	asrs	r7, r1, #16
90018960:	d418      	bmi.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018962:	f8d8 5008 	ldr.w	r5, [r8, #8]
90018966:	42bd      	cmp	r5, r7
90018968:	dd14      	ble.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001896a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001896e:	d411      	bmi.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018970:	f8d8 400c 	ldr.w	r4, [r8, #12]
90018974:	4564      	cmp	r4, ip
90018976:	dd0d      	ble.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018978:	b22d      	sxth	r5, r5
9001897a:	9c01      	ldr	r4, [sp, #4]
9001897c:	fb0c 7505 	mla	r5, ip, r5, r7
90018980:	5d64      	ldrb	r4, [r4, r5]
90018982:	2cff      	cmp	r4, #255	; 0xff
90018984:	d10c      	bne.n	900189a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90018986:	9c00      	ldr	r4, [sp, #0]
90018988:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001898c:	f06f 0401 	mvn.w	r4, #1
90018990:	4374      	muls	r4, r6
90018992:	5305      	strh	r5, [r0, r4]
90018994:	9c11      	ldr	r4, [sp, #68]	; 0x44
90018996:	3e01      	subs	r6, #1
90018998:	4421      	add	r1, r4
9001899a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001899c:	4422      	add	r2, r4
9001899e:	e79c      	b.n	900188da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900189a0:	2c00      	cmp	r4, #0
900189a2:	d0f7      	beq.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900189a4:	9f00      	ldr	r7, [sp, #0]
900189a6:	fa1f fc84 	uxth.w	ip, r4
900189aa:	43e4      	mvns	r4, r4
900189ac:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
900189b0:	f06f 0501 	mvn.w	r5, #1
900189b4:	b2e4      	uxtb	r4, r4
900189b6:	4375      	muls	r5, r6
900189b8:	ea4f 2e29 	mov.w	lr, r9, asr #8
900189bc:	9502      	str	r5, [sp, #8]
900189be:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900189c2:	5b45      	ldrh	r5, [r0, r5]
900189c4:	122f      	asrs	r7, r5, #8
900189c6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900189ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900189ce:	00ed      	lsls	r5, r5, #3
900189d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900189d4:	fb17 f704 	smulbb	r7, r7, r4
900189d8:	b2ed      	uxtb	r5, r5
900189da:	fb1a fa04 	smulbb	sl, sl, r4
900189de:	fb0e 7e0c 	mla	lr, lr, ip, r7
900189e2:	ea4f 07e9 	mov.w	r7, r9, asr #3
900189e6:	fb15 f504 	smulbb	r5, r5, r4
900189ea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900189ee:	fa1f fe8e 	uxth.w	lr, lr
900189f2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900189f6:	fa5f f989 	uxtb.w	r9, r9
900189fa:	fb07 a70c 	mla	r7, r7, ip, sl
900189fe:	f10e 0401 	add.w	r4, lr, #1
90018a02:	fb09 550c 	mla	r5, r9, ip, r5
90018a06:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
90018a0a:	9c02      	ldr	r4, [sp, #8]
90018a0c:	b2ad      	uxth	r5, r5
90018a0e:	b2bf      	uxth	r7, r7
90018a10:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90018a14:	f105 0a01 	add.w	sl, r5, #1
90018a18:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018a1c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018a20:	ea4a 0e0e 	orr.w	lr, sl, lr
90018a24:	f107 0a01 	add.w	sl, r7, #1
90018a28:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90018a2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018a30:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018a34:	ea4e 0e0a 	orr.w	lr, lr, sl
90018a38:	f820 e004 	strh.w	lr, [r0, r4]
90018a3c:	e7aa      	b.n	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018a3e:	f04f 0900 	mov.w	r9, #0
90018a42:	eba3 0409 	sub.w	r4, r3, r9
90018a46:	2c00      	cmp	r4, #0
90018a48:	f77f af4a 	ble.w	900188e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018a4c:	1414      	asrs	r4, r2, #16
90018a4e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90018a52:	140d      	asrs	r5, r1, #16
90018a54:	fb06 5504 	mla	r5, r6, r4, r5
90018a58:	9c01      	ldr	r4, [sp, #4]
90018a5a:	5d64      	ldrb	r4, [r4, r5]
90018a5c:	2cff      	cmp	r4, #255	; 0xff
90018a5e:	d10b      	bne.n	90018a78 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90018a60:	9c00      	ldr	r4, [sp, #0]
90018a62:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
90018a66:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
90018a6a:	9c11      	ldr	r4, [sp, #68]	; 0x44
90018a6c:	f109 0901 	add.w	r9, r9, #1
90018a70:	4421      	add	r1, r4
90018a72:	9c12      	ldr	r4, [sp, #72]	; 0x48
90018a74:	4422      	add	r2, r4
90018a76:	e7e4      	b.n	90018a42 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90018a78:	2c00      	cmp	r4, #0
90018a7a:	d0f6      	beq.n	90018a6a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018a7c:	9e00      	ldr	r6, [sp, #0]
90018a7e:	b2a7      	uxth	r7, r4
90018a80:	43e4      	mvns	r4, r4
90018a82:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
90018a86:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018a8a:	b2e4      	uxtb	r4, r4
90018a8c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018a90:	122e      	asrs	r6, r5, #8
90018a92:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018a96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018a9a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018a9e:	00ed      	lsls	r5, r5, #3
90018aa0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018aa4:	fb16 f604 	smulbb	r6, r6, r4
90018aa8:	b2ed      	uxtb	r5, r5
90018aaa:	fb1a fa04 	smulbb	sl, sl, r4
90018aae:	fb0c 6c07 	mla	ip, ip, r7, r6
90018ab2:	ea4f 06ee 	mov.w	r6, lr, asr #3
90018ab6:	fb15 f504 	smulbb	r5, r5, r4
90018aba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018abe:	fa1f fc8c 	uxth.w	ip, ip
90018ac2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018ac6:	fa5f fe8e 	uxtb.w	lr, lr
90018aca:	fb06 a607 	mla	r6, r6, r7, sl
90018ace:	f10c 0401 	add.w	r4, ip, #1
90018ad2:	fb0e 5507 	mla	r5, lr, r7, r5
90018ad6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018ada:	b2ad      	uxth	r5, r5
90018adc:	b2b6      	uxth	r6, r6
90018ade:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018ae2:	f105 0a01 	add.w	sl, r5, #1
90018ae6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018aea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018aee:	ea4a 0c0c 	orr.w	ip, sl, ip
90018af2:	f106 0a01 	add.w	sl, r6, #1
90018af6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018afa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018afe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018b02:	ea4c 0c0a 	orr.w	ip, ip, sl
90018b06:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90018b0a:	e7ae      	b.n	90018a6a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018b0c:	b005      	add	sp, #20
90018b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018b12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018b16:	b085      	sub	sp, #20
90018b18:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018b1a:	9203      	str	r2, [sp, #12]
90018b1c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
90018b20:	9100      	str	r1, [sp, #0]
90018b22:	9201      	str	r2, [sp, #4]
90018b24:	6841      	ldr	r1, [r0, #4]
90018b26:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90018b2a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018b2e:	fb01 2404 	mla	r4, r1, r4, r2
90018b32:	6802      	ldr	r2, [r0, #0]
90018b34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018b38:	f8de 2000 	ldr.w	r2, [lr]
90018b3c:	9202      	str	r2, [sp, #8]
90018b3e:	9a01      	ldr	r2, [sp, #4]
90018b40:	43d6      	mvns	r6, r2
90018b42:	b2f6      	uxtb	r6, r6
90018b44:	9a00      	ldr	r2, [sp, #0]
90018b46:	2a00      	cmp	r2, #0
90018b48:	dc03      	bgt.n	90018b52 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90018b4a:	9a03      	ldr	r2, [sp, #12]
90018b4c:	2a00      	cmp	r2, #0
90018b4e:	f340 8124 	ble.w	90018d9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90018b52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018b54:	f9be c008 	ldrsh.w	ip, [lr, #8]
90018b58:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018b5e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90018b62:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018b66:	2b00      	cmp	r3, #0
90018b68:	dd0e      	ble.n	90018b88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018b6a:	1408      	asrs	r0, r1, #16
90018b6c:	d405      	bmi.n	90018b7a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b6e:	4560      	cmp	r0, ip
90018b70:	da03      	bge.n	90018b7a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b72:	1410      	asrs	r0, r2, #16
90018b74:	d401      	bmi.n	90018b7a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018b76:	42b8      	cmp	r0, r7
90018b78:	db07      	blt.n	90018b8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018b7a:	9811      	ldr	r0, [sp, #68]	; 0x44
90018b7c:	3b01      	subs	r3, #1
90018b7e:	3402      	adds	r4, #2
90018b80:	4401      	add	r1, r0
90018b82:	9812      	ldr	r0, [sp, #72]	; 0x48
90018b84:	4402      	add	r2, r0
90018b86:	e7ee      	b.n	90018b66 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90018b88:	d06e      	beq.n	90018c68 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90018b8a:	1e58      	subs	r0, r3, #1
90018b8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018b8e:	fb05 1500 	mla	r5, r5, r0, r1
90018b92:	142d      	asrs	r5, r5, #16
90018b94:	d45c      	bmi.n	90018c50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b96:	4565      	cmp	r5, ip
90018b98:	da5a      	bge.n	90018c50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018b9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018b9c:	fb05 2000 	mla	r0, r5, r0, r2
90018ba0:	1400      	asrs	r0, r0, #16
90018ba2:	d455      	bmi.n	90018c50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018ba4:	42b8      	cmp	r0, r7
90018ba6:	da53      	bge.n	90018c50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018ba8:	4699      	mov	r9, r3
90018baa:	46a2      	mov	sl, r4
90018bac:	f8bd b004 	ldrh.w	fp, [sp, #4]
90018bb0:	f1b9 0f00 	cmp.w	r9, #0
90018bb4:	dd54      	ble.n	90018c60 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90018bb6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018bba:	140d      	asrs	r5, r1, #16
90018bbc:	1410      	asrs	r0, r2, #16
90018bbe:	f109 39ff 	add.w	r9, r9, #4294967295
90018bc2:	fb07 5000 	mla	r0, r7, r0, r5
90018bc6:	9d02      	ldr	r5, [sp, #8]
90018bc8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90018bcc:	f8ba 5000 	ldrh.w	r5, [sl]
90018bd0:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018bd4:	122f      	asrs	r7, r5, #8
90018bd6:	ea4f 08e5 	mov.w	r8, r5, asr #3
90018bda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018bde:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018be2:	00ed      	lsls	r5, r5, #3
90018be4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90018be8:	fb17 f706 	smulbb	r7, r7, r6
90018bec:	b2ed      	uxtb	r5, r5
90018bee:	fb18 f806 	smulbb	r8, r8, r6
90018bf2:	fb0c 7c0b 	mla	ip, ip, fp, r7
90018bf6:	10c7      	asrs	r7, r0, #3
90018bf8:	fb15 f506 	smulbb	r5, r5, r6
90018bfc:	00c0      	lsls	r0, r0, #3
90018bfe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018c02:	fa1f fc8c 	uxth.w	ip, ip
90018c06:	b2c0      	uxtb	r0, r0
90018c08:	fb07 870b 	mla	r7, r7, fp, r8
90018c0c:	fb00 500b 	mla	r0, r0, fp, r5
90018c10:	f10c 0501 	add.w	r5, ip, #1
90018c14:	b2bf      	uxth	r7, r7
90018c16:	b280      	uxth	r0, r0
90018c18:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018c1c:	f107 0801 	add.w	r8, r7, #1
90018c20:	1c45      	adds	r5, r0, #1
90018c22:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90018c26:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018c2a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018c2e:	9811      	ldr	r0, [sp, #68]	; 0x44
90018c30:	ea4f 1858 	mov.w	r8, r8, lsr #5
90018c34:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018c38:	4401      	add	r1, r0
90018c3a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90018c3e:	9812      	ldr	r0, [sp, #72]	; 0x48
90018c40:	ea45 0c0c 	orr.w	ip, r5, ip
90018c44:	4402      	add	r2, r0
90018c46:	ea4c 0c08 	orr.w	ip, ip, r8
90018c4a:	f82a cb02 	strh.w	ip, [sl], #2
90018c4e:	e7af      	b.n	90018bb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018c50:	f04f 0800 	mov.w	r8, #0
90018c54:	f8bd a004 	ldrh.w	sl, [sp, #4]
90018c58:	eb03 0008 	add.w	r0, r3, r8
90018c5c:	2800      	cmp	r0, #0
90018c5e:	dc41      	bgt.n	90018ce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90018c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018c64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018c68:	9b00      	ldr	r3, [sp, #0]
90018c6a:	2b00      	cmp	r3, #0
90018c6c:	f340 8095 	ble.w	90018d9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90018c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90018c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018c76:	ee30 0a04 	vadd.f32	s0, s0, s8
90018c7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018c7e:	eef0 6a62 	vmov.f32	s13, s5
90018c82:	eec7 7a00 	vdiv.f32	s15, s14, s0
90018c86:	ee31 1a05 	vadd.f32	s2, s2, s10
90018c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018c8e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
90018c92:	eef0 6a43 	vmov.f32	s13, s6
90018c96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018c9a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
90018c9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
90018ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
90018caa:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018cae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018cb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018cb6:	ee12 2a90 	vmov	r2, s5
90018cba:	eef0 2a47 	vmov.f32	s5, s14
90018cbe:	fb92 f3f3 	sdiv	r3, r2, r3
90018cc2:	ee13 2a10 	vmov	r2, s6
90018cc6:	9311      	str	r3, [sp, #68]	; 0x44
90018cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018cca:	eeb0 3a67 	vmov.f32	s6, s15
90018cce:	fb92 f3f3 	sdiv	r3, r2, r3
90018cd2:	9312      	str	r3, [sp, #72]	; 0x48
90018cd4:	9b00      	ldr	r3, [sp, #0]
90018cd6:	9a03      	ldr	r2, [sp, #12]
90018cd8:	3b01      	subs	r3, #1
90018cda:	9300      	str	r3, [sp, #0]
90018cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018cde:	bf08      	it	eq
90018ce0:	4613      	moveq	r3, r2
90018ce2:	e72f      	b.n	90018b44 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018ce4:	140f      	asrs	r7, r1, #16
90018ce6:	d451      	bmi.n	90018d8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018ce8:	f8de 5008 	ldr.w	r5, [lr, #8]
90018cec:	42bd      	cmp	r5, r7
90018cee:	dd4d      	ble.n	90018d8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018cf0:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018cf4:	d44a      	bmi.n	90018d8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018cf6:	f8de 000c 	ldr.w	r0, [lr, #12]
90018cfa:	4560      	cmp	r0, ip
90018cfc:	dd46      	ble.n	90018d8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018cfe:	b22d      	sxth	r5, r5
90018d00:	9802      	ldr	r0, [sp, #8]
90018d02:	fb0c 7505 	mla	r5, ip, r5, r7
90018d06:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
90018d0a:	f06f 0501 	mvn.w	r5, #1
90018d0e:	fb05 fb08 	mul.w	fp, r5, r8
90018d12:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018d16:	f834 500b 	ldrh.w	r5, [r4, fp]
90018d1a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018d1e:	122f      	asrs	r7, r5, #8
90018d20:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018d24:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018d28:	00ed      	lsls	r5, r5, #3
90018d2a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90018d2e:	fb17 f706 	smulbb	r7, r7, r6
90018d32:	b2ed      	uxtb	r5, r5
90018d34:	fb19 f906 	smulbb	r9, r9, r6
90018d38:	fb0c 7c0a 	mla	ip, ip, sl, r7
90018d3c:	10c7      	asrs	r7, r0, #3
90018d3e:	fb15 f506 	smulbb	r5, r5, r6
90018d42:	00c0      	lsls	r0, r0, #3
90018d44:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018d48:	fa1f fc8c 	uxth.w	ip, ip
90018d4c:	b2c0      	uxtb	r0, r0
90018d4e:	fb07 970a 	mla	r7, r7, sl, r9
90018d52:	fb00 500a 	mla	r0, r0, sl, r5
90018d56:	f10c 0501 	add.w	r5, ip, #1
90018d5a:	b2bf      	uxth	r7, r7
90018d5c:	b280      	uxth	r0, r0
90018d5e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018d62:	f107 0901 	add.w	r9, r7, #1
90018d66:	1c45      	adds	r5, r0, #1
90018d68:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90018d6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018d70:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018d74:	ea4f 1959 	mov.w	r9, r9, lsr #5
90018d78:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018d7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90018d80:	ea45 0c0c 	orr.w	ip, r5, ip
90018d84:	ea4c 0c09 	orr.w	ip, ip, r9
90018d88:	f824 c00b 	strh.w	ip, [r4, fp]
90018d8c:	9811      	ldr	r0, [sp, #68]	; 0x44
90018d8e:	f108 38ff 	add.w	r8, r8, #4294967295
90018d92:	4401      	add	r1, r0
90018d94:	9812      	ldr	r0, [sp, #72]	; 0x48
90018d96:	4402      	add	r2, r0
90018d98:	e75e      	b.n	90018c58 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90018d9a:	b005      	add	sp, #20
90018d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018da0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018da4:	b085      	sub	sp, #20
90018da6:	4693      	mov	fp, r2
90018da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018dac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90018dae:	9d16      	ldr	r5, [sp, #88]	; 0x58
90018db0:	6870      	ldr	r0, [r6, #4]
90018db2:	9101      	str	r1, [sp, #4]
90018db4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018db8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90018dbc:	fb00 2404 	mla	r4, r0, r4, r2
90018dc0:	6832      	ldr	r2, [r6, #0]
90018dc2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018dc6:	682a      	ldr	r2, [r5, #0]
90018dc8:	9202      	str	r2, [sp, #8]
90018dca:	9a01      	ldr	r2, [sp, #4]
90018dcc:	2a00      	cmp	r2, #0
90018dce:	dc03      	bgt.n	90018dd8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90018dd0:	f1bb 0f00 	cmp.w	fp, #0
90018dd4:	f340 809a 	ble.w	90018f0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018dda:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90018dde:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018de2:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018de4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90018de8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018dec:	2b00      	cmp	r3, #0
90018dee:	dd0c      	ble.n	90018e0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90018df0:	1406      	asrs	r6, r0, #16
90018df2:	d405      	bmi.n	90018e00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018df4:	454e      	cmp	r6, r9
90018df6:	da03      	bge.n	90018e00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018df8:	1416      	asrs	r6, r2, #16
90018dfa:	d401      	bmi.n	90018e00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018dfc:	4546      	cmp	r6, r8
90018dfe:	db05      	blt.n	90018e0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018e00:	4470      	add	r0, lr
90018e02:	4462      	add	r2, ip
90018e04:	3b01      	subs	r3, #1
90018e06:	3402      	adds	r4, #2
90018e08:	e7f0      	b.n	90018dec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90018e0a:	d00f      	beq.n	90018e2c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90018e0c:	1e5e      	subs	r6, r3, #1
90018e0e:	fb0e 0706 	mla	r7, lr, r6, r0
90018e12:	143f      	asrs	r7, r7, #16
90018e14:	d541      	bpl.n	90018e9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
90018e16:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90018e1a:	4698      	mov	r8, r3
90018e1c:	9603      	str	r6, [sp, #12]
90018e1e:	f1b8 0f00 	cmp.w	r8, #0
90018e22:	dc56      	bgt.n	90018ed2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
90018e24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018e28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018e2c:	9b01      	ldr	r3, [sp, #4]
90018e2e:	2b00      	cmp	r3, #0
90018e30:	dd6c      	ble.n	90018f0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018e32:	ee30 0a04 	vadd.f32	s0, s0, s8
90018e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018e38:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018e3c:	eeb0 6a62 	vmov.f32	s12, s5
90018e40:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018e44:	ee31 1a05 	vadd.f32	s2, s2, s10
90018e48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e4c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018e50:	eeb0 6a43 	vmov.f32	s12, s6
90018e54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e58:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018e5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018e60:	ee61 7a27 	vmul.f32	s15, s2, s15
90018e64:	ee77 2a62 	vsub.f32	s5, s14, s5
90018e68:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018e6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018e70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018e74:	ee12 2a90 	vmov	r2, s5
90018e78:	eef0 2a47 	vmov.f32	s5, s14
90018e7c:	fb92 fef3 	sdiv	lr, r2, r3
90018e80:	ee13 2a10 	vmov	r2, s6
90018e84:	eeb0 3a67 	vmov.f32	s6, s15
90018e88:	fb92 fcf3 	sdiv	ip, r2, r3
90018e8c:	9b01      	ldr	r3, [sp, #4]
90018e8e:	3b01      	subs	r3, #1
90018e90:	9301      	str	r3, [sp, #4]
90018e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018e94:	bf08      	it	eq
90018e96:	465b      	moveq	r3, fp
90018e98:	e797      	b.n	90018dca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90018e9a:	454f      	cmp	r7, r9
90018e9c:	dabb      	bge.n	90018e16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018e9e:	fb0c 2606 	mla	r6, ip, r6, r2
90018ea2:	1436      	asrs	r6, r6, #16
90018ea4:	d4b7      	bmi.n	90018e16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018ea6:	4546      	cmp	r6, r8
90018ea8:	dab5      	bge.n	90018e16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018eaa:	461e      	mov	r6, r3
90018eac:	46a0      	mov	r8, r4
90018eae:	2e00      	cmp	r6, #0
90018eb0:	ddb8      	ble.n	90018e24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018eb2:	1417      	asrs	r7, r2, #16
90018eb4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90018eb8:	ea4f 4920 	mov.w	r9, r0, asr #16
90018ebc:	9902      	ldr	r1, [sp, #8]
90018ebe:	4470      	add	r0, lr
90018ec0:	4462      	add	r2, ip
90018ec2:	fb0a 9707 	mla	r7, sl, r7, r9
90018ec6:	3e01      	subs	r6, #1
90018ec8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90018ecc:	f828 7b02 	strh.w	r7, [r8], #2
90018ed0:	e7ed      	b.n	90018eae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90018ed2:	ea5f 4920 	movs.w	r9, r0, asr #16
90018ed6:	d414      	bmi.n	90018f02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018ed8:	68ae      	ldr	r6, [r5, #8]
90018eda:	454e      	cmp	r6, r9
90018edc:	dd11      	ble.n	90018f02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018ede:	ea5f 4a22 	movs.w	sl, r2, asr #16
90018ee2:	d40e      	bmi.n	90018f02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018ee4:	68ef      	ldr	r7, [r5, #12]
90018ee6:	4557      	cmp	r7, sl
90018ee8:	dd0b      	ble.n	90018f02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018eea:	b236      	sxth	r6, r6
90018eec:	f06f 0101 	mvn.w	r1, #1
90018ef0:	9f02      	ldr	r7, [sp, #8]
90018ef2:	fb0a 9606 	mla	r6, sl, r6, r9
90018ef6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90018efa:	fb01 f608 	mul.w	r6, r1, r8
90018efe:	9903      	ldr	r1, [sp, #12]
90018f00:	538f      	strh	r7, [r1, r6]
90018f02:	4470      	add	r0, lr
90018f04:	4462      	add	r2, ip
90018f06:	f108 38ff 	add.w	r8, r8, #4294967295
90018f0a:	e788      	b.n	90018e1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018f0c:	b005      	add	sp, #20
90018f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018f12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018f16:	b087      	sub	sp, #28
90018f18:	468b      	mov	fp, r1
90018f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018f1e:	9815      	ldr	r0, [sp, #84]	; 0x54
90018f20:	9203      	str	r2, [sp, #12]
90018f22:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018f26:	6841      	ldr	r1, [r0, #4]
90018f28:	9204      	str	r2, [sp, #16]
90018f2a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90018f2e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
90018f32:	fb01 2505 	mla	r5, r1, r5, r2
90018f36:	6802      	ldr	r2, [r0, #0]
90018f38:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90018f3c:	f8d9 2000 	ldr.w	r2, [r9]
90018f40:	9201      	str	r2, [sp, #4]
90018f42:	f1bb 0f00 	cmp.w	fp, #0
90018f46:	dc03      	bgt.n	90018f50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018f48:	9a03      	ldr	r2, [sp, #12]
90018f4a:	2a00      	cmp	r2, #0
90018f4c:	f340 8158 	ble.w	90019200 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018f50:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018f52:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90018f56:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018f5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018f5c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90018f60:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018f64:	2b00      	cmp	r3, #0
90018f66:	dd0e      	ble.n	90018f86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018f68:	1402      	asrs	r2, r0, #16
90018f6a:	d405      	bmi.n	90018f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f6c:	42ba      	cmp	r2, r7
90018f6e:	da03      	bge.n	90018f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f70:	140a      	asrs	r2, r1, #16
90018f72:	d401      	bmi.n	90018f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018f74:	42b2      	cmp	r2, r6
90018f76:	db07      	blt.n	90018f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018f7a:	3b01      	subs	r3, #1
90018f7c:	3502      	adds	r5, #2
90018f7e:	4410      	add	r0, r2
90018f80:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018f82:	4411      	add	r1, r2
90018f84:	e7ee      	b.n	90018f64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018f86:	d017      	beq.n	90018fb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018f88:	1e5a      	subs	r2, r3, #1
90018f8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018f8c:	fb04 0402 	mla	r4, r4, r2, r0
90018f90:	1424      	asrs	r4, r4, #16
90018f92:	d409      	bmi.n	90018fa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018f94:	42bc      	cmp	r4, r7
90018f96:	da07      	bge.n	90018fa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018f98:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018f9a:	fb04 1202 	mla	r2, r4, r2, r1
90018f9e:	1412      	asrs	r2, r2, #16
90018fa0:	d402      	bmi.n	90018fa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018fa2:	42b2      	cmp	r2, r6
90018fa4:	f2c0 80bf 	blt.w	90019126 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018fa8:	2700      	movs	r7, #0
90018faa:	19da      	adds	r2, r3, r7
90018fac:	2a00      	cmp	r2, #0
90018fae:	dc3e      	bgt.n	9001902e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018fb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018fb4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018fb8:	f1bb 0f00 	cmp.w	fp, #0
90018fbc:	f340 8120 	ble.w	90019200 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018fc0:	ee30 0a04 	vadd.f32	s0, s0, s8
90018fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018fc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018fca:	f1bb 0b01 	subs.w	fp, fp, #1
90018fce:	eeb0 6a62 	vmov.f32	s12, s5
90018fd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018fd6:	ee31 1a05 	vadd.f32	s2, s2, s10
90018fda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018fde:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018fe2:	eeb0 6a43 	vmov.f32	s12, s6
90018fe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018fea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018fee:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018ff2:	ee61 7a27 	vmul.f32	s15, s2, s15
90018ff6:	ee77 2a62 	vsub.f32	s5, s14, s5
90018ffa:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018ffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019002:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019006:	ee12 2a90 	vmov	r2, s5
9001900a:	eef0 2a47 	vmov.f32	s5, s14
9001900e:	fb92 f3f3 	sdiv	r3, r2, r3
90019012:	ee13 2a10 	vmov	r2, s6
90019016:	9313      	str	r3, [sp, #76]	; 0x4c
90019018:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001901a:	eeb0 3a67 	vmov.f32	s6, s15
9001901e:	fb92 f3f3 	sdiv	r3, r2, r3
90019022:	9a03      	ldr	r2, [sp, #12]
90019024:	9314      	str	r3, [sp, #80]	; 0x50
90019026:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019028:	bf08      	it	eq
9001902a:	4613      	moveq	r3, r2
9001902c:	e789      	b.n	90018f42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001902e:	1406      	asrs	r6, r0, #16
90019030:	d42d      	bmi.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019032:	f8d9 4008 	ldr.w	r4, [r9, #8]
90019036:	42b4      	cmp	r4, r6
90019038:	dd29      	ble.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001903a:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001903e:	d426      	bmi.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019040:	f8d9 200c 	ldr.w	r2, [r9, #12]
90019044:	4562      	cmp	r2, ip
90019046:	dd22      	ble.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019048:	b224      	sxth	r4, r4
9001904a:	9a01      	ldr	r2, [sp, #4]
9001904c:	fb0c 6404 	mla	r4, ip, r4, r6
90019050:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90019054:	0e22      	lsrs	r2, r4, #24
90019056:	d01a      	beq.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019058:	9e04      	ldr	r6, [sp, #16]
9001905a:	4372      	muls	r2, r6
9001905c:	1c56      	adds	r6, r2, #1
9001905e:	eb06 2222 	add.w	r2, r6, r2, asr #8
90019062:	0a26      	lsrs	r6, r4, #8
90019064:	1212      	asrs	r2, r2, #8
90019066:	9605      	str	r6, [sp, #20]
90019068:	2aff      	cmp	r2, #255	; 0xff
9001906a:	d116      	bne.n	9001909a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001906c:	f06f 0201 	mvn.w	r2, #1
90019070:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019074:	fb02 fc07 	mul.w	ip, r2, r7
90019078:	0962      	lsrs	r2, r4, #5
9001907a:	f026 0607 	bic.w	r6, r6, #7
9001907e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90019082:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019086:	4316      	orrs	r6, r2
90019088:	4326      	orrs	r6, r4
9001908a:	f825 600c 	strh.w	r6, [r5, ip]
9001908e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019090:	3f01      	subs	r7, #1
90019092:	4410      	add	r0, r2
90019094:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019096:	4411      	add	r1, r2
90019098:	e787      	b.n	90018faa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001909a:	f06f 0601 	mvn.w	r6, #1
9001909e:	fa1f fa82 	uxth.w	sl, r2
900190a2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
900190a6:	43d2      	mvns	r2, r2
900190a8:	437e      	muls	r6, r7
900190aa:	b2e4      	uxtb	r4, r4
900190ac:	fb1c fc0a 	smulbb	ip, ip, sl
900190b0:	b2d2      	uxtb	r2, r2
900190b2:	f835 8006 	ldrh.w	r8, [r5, r6]
900190b6:	fb14 f40a 	smulbb	r4, r4, sl
900190ba:	9602      	str	r6, [sp, #8]
900190bc:	ea4f 2e28 	mov.w	lr, r8, asr #8
900190c0:	f89d 6014 	ldrb.w	r6, [sp, #20]
900190c4:	fb16 f60a 	smulbb	r6, r6, sl
900190c8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900190cc:	fb0e ce02 	mla	lr, lr, r2, ip
900190d0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
900190d4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900190d8:	fa1f fe8e 	uxth.w	lr, lr
900190dc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900190e0:	fa5f f888 	uxtb.w	r8, r8
900190e4:	fb0c 6c02 	mla	ip, ip, r2, r6
900190e8:	fb08 4402 	mla	r4, r8, r2, r4
900190ec:	f10e 0201 	add.w	r2, lr, #1
900190f0:	fa1f fc8c 	uxth.w	ip, ip
900190f4:	b2a4      	uxth	r4, r4
900190f6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900190fa:	9a02      	ldr	r2, [sp, #8]
900190fc:	1c66      	adds	r6, r4, #1
900190fe:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90019102:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90019106:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001910a:	ea46 0e0e 	orr.w	lr, r6, lr
9001910e:	f10c 0601 	add.w	r6, ip, #1
90019112:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90019116:	0976      	lsrs	r6, r6, #5
90019118:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001911c:	ea4e 0e06 	orr.w	lr, lr, r6
90019120:	f825 e002 	strh.w	lr, [r5, r2]
90019124:	e7b3      	b.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019126:	f04f 0800 	mov.w	r8, #0
9001912a:	eba3 0208 	sub.w	r2, r3, r8
9001912e:	2a00      	cmp	r2, #0
90019130:	f77f af3e 	ble.w	90018fb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90019134:	1404      	asrs	r4, r0, #16
90019136:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001913a:	140a      	asrs	r2, r1, #16
9001913c:	fb06 4202 	mla	r2, r6, r2, r4
90019140:	9c01      	ldr	r4, [sp, #4]
90019142:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
90019146:	0e22      	lsrs	r2, r4, #24
90019148:	d015      	beq.n	90019176 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001914a:	9e04      	ldr	r6, [sp, #16]
9001914c:	4372      	muls	r2, r6
9001914e:	1c56      	adds	r6, r2, #1
90019150:	eb06 2222 	add.w	r2, r6, r2, asr #8
90019154:	0a26      	lsrs	r6, r4, #8
90019156:	1212      	asrs	r2, r2, #8
90019158:	2aff      	cmp	r2, #255	; 0xff
9001915a:	d113      	bne.n	90019184 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001915c:	0962      	lsrs	r2, r4, #5
9001915e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019162:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90019166:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001916a:	f026 0607 	bic.w	r6, r6, #7
9001916e:	4316      	orrs	r6, r2
90019170:	4326      	orrs	r6, r4
90019172:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90019176:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019178:	f108 0801 	add.w	r8, r8, #1
9001917c:	4410      	add	r0, r2
9001917e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019180:	4411      	add	r1, r2
90019182:	e7d2      	b.n	9001912a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
90019184:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90019188:	fa1f fa82 	uxth.w	sl, r2
9001918c:	f3c4 4707 	ubfx	r7, r4, #16, #8
90019190:	43d2      	mvns	r2, r2
90019192:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019196:	fb17 f70a 	smulbb	r7, r7, sl
9001919a:	b2d2      	uxtb	r2, r2
9001919c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900191a0:	b2e4      	uxtb	r4, r4
900191a2:	b2f6      	uxtb	r6, r6
900191a4:	fb0c 7c02 	mla	ip, ip, r2, r7
900191a8:	ea4f 07ee 	mov.w	r7, lr, asr #3
900191ac:	fb14 f40a 	smulbb	r4, r4, sl
900191b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900191b4:	fa1f fc8c 	uxth.w	ip, ip
900191b8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900191bc:	fb16 f60a 	smulbb	r6, r6, sl
900191c0:	fa5f fe8e 	uxtb.w	lr, lr
900191c4:	fb0e 4402 	mla	r4, lr, r2, r4
900191c8:	fb07 6702 	mla	r7, r7, r2, r6
900191cc:	f10c 0201 	add.w	r2, ip, #1
900191d0:	b2a4      	uxth	r4, r4
900191d2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
900191d6:	1c66      	adds	r6, r4, #1
900191d8:	b2bf      	uxth	r7, r7
900191da:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900191de:	eb06 2614 	add.w	r6, r6, r4, lsr #8
900191e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900191e6:	ea46 0c0c 	orr.w	ip, r6, ip
900191ea:	1c7e      	adds	r6, r7, #1
900191ec:	eb06 2617 	add.w	r6, r6, r7, lsr #8
900191f0:	0976      	lsrs	r6, r6, #5
900191f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900191f6:	ea4c 0c06 	orr.w	ip, ip, r6
900191fa:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
900191fe:	e7ba      	b.n	90019176 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90019200:	b007      	add	sp, #28
90019202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90019208 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001920c:	b085      	sub	sp, #20
9001920e:	468b      	mov	fp, r1
90019210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019214:	9813      	ldr	r0, [sp, #76]	; 0x4c
90019216:	9203      	str	r2, [sp, #12]
90019218:	6841      	ldr	r1, [r0, #4]
9001921a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001921e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90019222:	fb01 2404 	mla	r4, r1, r4, r2
90019226:	6802      	ldr	r2, [r0, #0]
90019228:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001922c:	f8d8 2000 	ldr.w	r2, [r8]
90019230:	9201      	str	r2, [sp, #4]
90019232:	f1bb 0f00 	cmp.w	fp, #0
90019236:	dc03      	bgt.n	90019240 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90019238:	9a03      	ldr	r2, [sp, #12]
9001923a:	2a00      	cmp	r2, #0
9001923c:	f340 814f 	ble.w	900194de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90019242:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90019246:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001924a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001924c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90019250:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90019254:	2b00      	cmp	r3, #0
90019256:	dd0e      	ble.n	90019276 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90019258:	1408      	asrs	r0, r1, #16
9001925a:	d405      	bmi.n	90019268 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001925c:	42b8      	cmp	r0, r7
9001925e:	da03      	bge.n	90019268 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019260:	1410      	asrs	r0, r2, #16
90019262:	d401      	bmi.n	90019268 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019264:	42b0      	cmp	r0, r6
90019266:	db07      	blt.n	90019278 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019268:	9811      	ldr	r0, [sp, #68]	; 0x44
9001926a:	3b01      	subs	r3, #1
9001926c:	3402      	adds	r4, #2
9001926e:	4401      	add	r1, r0
90019270:	9812      	ldr	r0, [sp, #72]	; 0x48
90019272:	4402      	add	r2, r0
90019274:	e7ee      	b.n	90019254 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90019276:	d017      	beq.n	900192a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019278:	1e58      	subs	r0, r3, #1
9001927a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001927c:	fb05 1500 	mla	r5, r5, r0, r1
90019280:	142d      	asrs	r5, r5, #16
90019282:	d409      	bmi.n	90019298 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019284:	42bd      	cmp	r5, r7
90019286:	da07      	bge.n	90019298 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019288:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001928a:	fb05 2000 	mla	r0, r5, r0, r2
9001928e:	1400      	asrs	r0, r0, #16
90019290:	d402      	bmi.n	90019298 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019292:	42b0      	cmp	r0, r6
90019294:	f2c0 80ba 	blt.w	9001940c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90019298:	2600      	movs	r6, #0
9001929a:	1998      	adds	r0, r3, r6
9001929c:	2800      	cmp	r0, #0
9001929e:	dc3e      	bgt.n	9001931e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900192a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900192a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900192a8:	f1bb 0f00 	cmp.w	fp, #0
900192ac:	f340 8117 	ble.w	900194de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
900192b0:	ee30 0a04 	vadd.f32	s0, s0, s8
900192b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900192b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900192ba:	f1bb 0b01 	subs.w	fp, fp, #1
900192be:	eeb0 6a62 	vmov.f32	s12, s5
900192c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
900192c6:	ee31 1a05 	vadd.f32	s2, s2, s10
900192ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900192ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900192d2:	eeb0 6a43 	vmov.f32	s12, s6
900192d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900192da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900192de:	ee20 7aa7 	vmul.f32	s14, s1, s15
900192e2:	ee61 7a27 	vmul.f32	s15, s2, s15
900192e6:	ee77 2a62 	vsub.f32	s5, s14, s5
900192ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
900192ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900192f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900192f6:	ee12 2a90 	vmov	r2, s5
900192fa:	eef0 2a47 	vmov.f32	s5, s14
900192fe:	fb92 f3f3 	sdiv	r3, r2, r3
90019302:	ee13 2a10 	vmov	r2, s6
90019306:	9311      	str	r3, [sp, #68]	; 0x44
90019308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001930a:	eeb0 3a67 	vmov.f32	s6, s15
9001930e:	fb92 f3f3 	sdiv	r3, r2, r3
90019312:	9a03      	ldr	r2, [sp, #12]
90019314:	9312      	str	r3, [sp, #72]	; 0x48
90019316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019318:	bf08      	it	eq
9001931a:	4613      	moveq	r3, r2
9001931c:	e789      	b.n	90019232 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001931e:	140f      	asrs	r7, r1, #16
90019320:	d424      	bmi.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019322:	f8d8 5008 	ldr.w	r5, [r8, #8]
90019326:	42bd      	cmp	r5, r7
90019328:	dd20      	ble.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001932a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001932e:	d41d      	bmi.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019330:	f8d8 000c 	ldr.w	r0, [r8, #12]
90019334:	4560      	cmp	r0, ip
90019336:	dd19      	ble.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019338:	b22d      	sxth	r5, r5
9001933a:	9801      	ldr	r0, [sp, #4]
9001933c:	fb0c 7505 	mla	r5, ip, r5, r7
90019340:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
90019344:	0e07      	lsrs	r7, r0, #24
90019346:	2fff      	cmp	r7, #255	; 0xff
90019348:	d116      	bne.n	90019378 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001934a:	f06f 0501 	mvn.w	r5, #1
9001934e:	fb05 f706 	mul.w	r7, r5, r6
90019352:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90019356:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001935a:	0945      	lsrs	r5, r0, #5
9001935c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90019360:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019364:	ea4c 0505 	orr.w	r5, ip, r5
90019368:	4305      	orrs	r5, r0
9001936a:	53e5      	strh	r5, [r4, r7]
9001936c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001936e:	3e01      	subs	r6, #1
90019370:	4401      	add	r1, r0
90019372:	9812      	ldr	r0, [sp, #72]	; 0x48
90019374:	4402      	add	r2, r0
90019376:	e790      	b.n	9001929a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90019378:	b2fd      	uxtb	r5, r7
9001937a:	2f00      	cmp	r7, #0
9001937c:	d0f6      	beq.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001937e:	f06f 0701 	mvn.w	r7, #1
90019382:	fa1f f985 	uxth.w	r9, r5
90019386:	43ed      	mvns	r5, r5
90019388:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001938c:	4377      	muls	r7, r6
9001938e:	fb1a fa09 	smulbb	sl, sl, r9
90019392:	b2ed      	uxtb	r5, r5
90019394:	f834 e007 	ldrh.w	lr, [r4, r7]
90019398:	9702      	str	r7, [sp, #8]
9001939a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001939e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
900193a2:	fb17 f709 	smulbb	r7, r7, r9
900193a6:	b2c0      	uxtb	r0, r0
900193a8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900193ac:	fb10 f009 	smulbb	r0, r0, r9
900193b0:	fb0c 7c05 	mla	ip, ip, r5, r7
900193b4:	ea4f 07ee 	mov.w	r7, lr, asr #3
900193b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900193bc:	fa1f fc8c 	uxth.w	ip, ip
900193c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900193c4:	fa5f fe8e 	uxtb.w	lr, lr
900193c8:	fb07 a705 	mla	r7, r7, r5, sl
900193cc:	fb0e 0005 	mla	r0, lr, r5, r0
900193d0:	f10c 0501 	add.w	r5, ip, #1
900193d4:	b2bf      	uxth	r7, r7
900193d6:	b280      	uxth	r0, r0
900193d8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900193dc:	f100 0a01 	add.w	sl, r0, #1
900193e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900193e4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
900193e8:	9802      	ldr	r0, [sp, #8]
900193ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900193ee:	ea4a 0c0c 	orr.w	ip, sl, ip
900193f2:	f107 0a01 	add.w	sl, r7, #1
900193f6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900193fa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900193fe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019402:	ea4c 0c0a 	orr.w	ip, ip, sl
90019406:	f824 c000 	strh.w	ip, [r4, r0]
9001940a:	e7af      	b.n	9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001940c:	f04f 0e00 	mov.w	lr, #0
90019410:	eba3 000e 	sub.w	r0, r3, lr
90019414:	2800      	cmp	r0, #0
90019416:	f77f af43 	ble.w	900192a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001941a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001941e:	140d      	asrs	r5, r1, #16
90019420:	1410      	asrs	r0, r2, #16
90019422:	fb06 5000 	mla	r0, r6, r0, r5
90019426:	9d01      	ldr	r5, [sp, #4]
90019428:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001942c:	0e2e      	lsrs	r6, r5, #24
9001942e:	2eff      	cmp	r6, #255	; 0xff
90019430:	d112      	bne.n	90019458 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
90019432:	482c      	ldr	r0, [pc, #176]	; (900194e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
90019434:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90019438:	0968      	lsrs	r0, r5, #5
9001943a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001943e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90019442:	4330      	orrs	r0, r6
90019444:	4328      	orrs	r0, r5
90019446:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001944a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001944c:	f10e 0e01 	add.w	lr, lr, #1
90019450:	4401      	add	r1, r0
90019452:	9812      	ldr	r0, [sp, #72]	; 0x48
90019454:	4402      	add	r2, r0
90019456:	e7db      	b.n	90019410 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90019458:	b2f0      	uxtb	r0, r6
9001945a:	2e00      	cmp	r6, #0
9001945c:	d0f5      	beq.n	9001944a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001945e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019462:	fa1f f980 	uxth.w	r9, r0
90019466:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001946a:	43c0      	mvns	r0, r0
9001946c:	ea4f 272c 	mov.w	r7, ip, asr #8
90019470:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90019474:	fb16 f609 	smulbb	r6, r6, r9
90019478:	b2c0      	uxtb	r0, r0
9001947a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001947e:	b2ed      	uxtb	r5, r5
90019480:	fb1a fa09 	smulbb	sl, sl, r9
90019484:	fb07 6700 	mla	r7, r7, r0, r6
90019488:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001948c:	fb15 f509 	smulbb	r5, r5, r9
90019490:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019494:	b2bf      	uxth	r7, r7
90019496:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001949a:	fa5f fc8c 	uxtb.w	ip, ip
9001949e:	fb06 a600 	mla	r6, r6, r0, sl
900194a2:	fb0c 5500 	mla	r5, ip, r0, r5
900194a6:	1c78      	adds	r0, r7, #1
900194a8:	b2b6      	uxth	r6, r6
900194aa:	b2ad      	uxth	r5, r5
900194ac:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900194b0:	f105 0a01 	add.w	sl, r5, #1
900194b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900194b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900194bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900194c0:	ea4a 0707 	orr.w	r7, sl, r7
900194c4:	f106 0a01 	add.w	sl, r6, #1
900194c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900194cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900194d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900194d4:	ea47 070a 	orr.w	r7, r7, sl
900194d8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
900194dc:	e7b5      	b.n	9001944a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900194de:	b005      	add	sp, #20
900194e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900194e4:	fffff800 	.word	0xfffff800

900194e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900194e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900194ec:	b087      	sub	sp, #28
900194ee:	468b      	mov	fp, r1
900194f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900194f4:	9815      	ldr	r0, [sp, #84]	; 0x54
900194f6:	9203      	str	r2, [sp, #12]
900194f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900194fc:	6841      	ldr	r1, [r0, #4]
900194fe:	9204      	str	r2, [sp, #16]
90019500:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90019504:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90019508:	fb01 2404 	mla	r4, r1, r4, r2
9001950c:	6802      	ldr	r2, [r0, #0]
9001950e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019512:	f8d9 2008 	ldr.w	r2, [r9, #8]
90019516:	3201      	adds	r2, #1
90019518:	f022 0201 	bic.w	r2, r2, #1
9001951c:	9200      	str	r2, [sp, #0]
9001951e:	f8d9 2000 	ldr.w	r2, [r9]
90019522:	9201      	str	r2, [sp, #4]
90019524:	f1bb 0f00 	cmp.w	fp, #0
90019528:	dc03      	bgt.n	90019532 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001952a:	9a03      	ldr	r2, [sp, #12]
9001952c:	2a00      	cmp	r2, #0
9001952e:	f340 816a 	ble.w	90019806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90019532:	9a11      	ldr	r2, [sp, #68]	; 0x44
90019534:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90019538:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001953c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001953e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90019542:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90019546:	2b00      	cmp	r3, #0
90019548:	dd0e      	ble.n	90019568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001954a:	1402      	asrs	r2, r0, #16
9001954c:	d405      	bmi.n	9001955a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001954e:	42ba      	cmp	r2, r7
90019550:	da03      	bge.n	9001955a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019552:	140a      	asrs	r2, r1, #16
90019554:	d401      	bmi.n	9001955a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019556:	42b2      	cmp	r2, r6
90019558:	db07      	blt.n	9001956a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001955a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001955c:	3b01      	subs	r3, #1
9001955e:	3402      	adds	r4, #2
90019560:	4410      	add	r0, r2
90019562:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019564:	4411      	add	r1, r2
90019566:	e7ee      	b.n	90019546 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90019568:	d017      	beq.n	9001959a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001956a:	1e5a      	subs	r2, r3, #1
9001956c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001956e:	fb05 0502 	mla	r5, r5, r2, r0
90019572:	142d      	asrs	r5, r5, #16
90019574:	d409      	bmi.n	9001958a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019576:	42bd      	cmp	r5, r7
90019578:	da07      	bge.n	9001958a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001957a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001957c:	fb05 1202 	mla	r2, r5, r2, r1
90019580:	1412      	asrs	r2, r2, #16
90019582:	d402      	bmi.n	9001958a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019584:	42b2      	cmp	r2, r6
90019586:	f2c0 80c8 	blt.w	9001971a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001958a:	2700      	movs	r7, #0
9001958c:	19da      	adds	r2, r3, r7
9001958e:	2a00      	cmp	r2, #0
90019590:	dc3e      	bgt.n	90019610 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019596:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001959a:	f1bb 0f00 	cmp.w	fp, #0
9001959e:	f340 8132 	ble.w	90019806 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900195a2:	ee30 0a04 	vadd.f32	s0, s0, s8
900195a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
900195a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
900195ac:	f1bb 0b01 	subs.w	fp, fp, #1
900195b0:	eeb0 6a62 	vmov.f32	s12, s5
900195b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
900195b8:	ee31 1a05 	vadd.f32	s2, s2, s10
900195bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900195c0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900195c4:	eeb0 6a43 	vmov.f32	s12, s6
900195c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900195cc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900195d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900195d4:	ee61 7a27 	vmul.f32	s15, s2, s15
900195d8:	ee77 2a62 	vsub.f32	s5, s14, s5
900195dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
900195e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900195e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900195e8:	ee12 2a90 	vmov	r2, s5
900195ec:	eef0 2a47 	vmov.f32	s5, s14
900195f0:	fb92 f3f3 	sdiv	r3, r2, r3
900195f4:	ee13 2a10 	vmov	r2, s6
900195f8:	9313      	str	r3, [sp, #76]	; 0x4c
900195fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
900195fc:	eeb0 3a67 	vmov.f32	s6, s15
90019600:	fb92 f3f3 	sdiv	r3, r2, r3
90019604:	9a03      	ldr	r2, [sp, #12]
90019606:	9314      	str	r3, [sp, #80]	; 0x50
90019608:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001960a:	bf08      	it	eq
9001960c:	4613      	moveq	r3, r2
9001960e:	e789      	b.n	90019524 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90019610:	1405      	asrs	r5, r0, #16
90019612:	d436      	bmi.n	90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019614:	f8d9 2008 	ldr.w	r2, [r9, #8]
90019618:	42aa      	cmp	r2, r5
9001961a:	dd32      	ble.n	90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001961c:	140e      	asrs	r6, r1, #16
9001961e:	d430      	bmi.n	90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019620:	f8d9 200c 	ldr.w	r2, [r9, #12]
90019624:	42b2      	cmp	r2, r6
90019626:	dd2c      	ble.n	90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019628:	9a00      	ldr	r2, [sp, #0]
9001962a:	fb06 5502 	mla	r5, r6, r2, r5
9001962e:	9e01      	ldr	r6, [sp, #4]
90019630:	086a      	lsrs	r2, r5, #1
90019632:	5cb2      	ldrb	r2, [r6, r2]
90019634:	07ee      	lsls	r6, r5, #31
90019636:	bf54      	ite	pl
90019638:	f002 020f 	andpl.w	r2, r2, #15
9001963c:	1112      	asrmi	r2, r2, #4
9001963e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019642:	b2d2      	uxtb	r2, r2
90019644:	b1ea      	cbz	r2, 90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019646:	9d04      	ldr	r5, [sp, #16]
90019648:	436a      	muls	r2, r5
9001964a:	1c55      	adds	r5, r2, #1
9001964c:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019650:	4d6e      	ldr	r5, [pc, #440]	; (9001980c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019652:	1212      	asrs	r2, r2, #8
90019654:	682d      	ldr	r5, [r5, #0]
90019656:	2aff      	cmp	r2, #255	; 0xff
90019658:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001965c:	9605      	str	r6, [sp, #20]
9001965e:	d116      	bne.n	9001968e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
90019660:	f06f 0201 	mvn.w	r2, #1
90019664:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019668:	fb02 fc07 	mul.w	ip, r2, r7
9001966c:	096a      	lsrs	r2, r5, #5
9001966e:	f026 0607 	bic.w	r6, r6, #7
90019672:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019676:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001967a:	4316      	orrs	r6, r2
9001967c:	432e      	orrs	r6, r5
9001967e:	f824 600c 	strh.w	r6, [r4, ip]
90019682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019684:	3f01      	subs	r7, #1
90019686:	4410      	add	r0, r2
90019688:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001968a:	4411      	add	r1, r2
9001968c:	e77e      	b.n	9001958c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001968e:	f06f 0601 	mvn.w	r6, #1
90019692:	fa1f fa82 	uxth.w	sl, r2
90019696:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001969a:	43d2      	mvns	r2, r2
9001969c:	437e      	muls	r6, r7
9001969e:	b2ed      	uxtb	r5, r5
900196a0:	fb1c fc0a 	smulbb	ip, ip, sl
900196a4:	b2d2      	uxtb	r2, r2
900196a6:	f834 8006 	ldrh.w	r8, [r4, r6]
900196aa:	fb15 f50a 	smulbb	r5, r5, sl
900196ae:	9602      	str	r6, [sp, #8]
900196b0:	ea4f 2e28 	mov.w	lr, r8, asr #8
900196b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
900196b8:	fb16 f60a 	smulbb	r6, r6, sl
900196bc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900196c0:	fb0e ce02 	mla	lr, lr, r2, ip
900196c4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
900196c8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900196cc:	fa1f fe8e 	uxth.w	lr, lr
900196d0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900196d4:	fa5f f888 	uxtb.w	r8, r8
900196d8:	fb0c 6c02 	mla	ip, ip, r2, r6
900196dc:	fb08 5502 	mla	r5, r8, r2, r5
900196e0:	f10e 0201 	add.w	r2, lr, #1
900196e4:	fa1f fc8c 	uxth.w	ip, ip
900196e8:	b2ad      	uxth	r5, r5
900196ea:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900196ee:	9a02      	ldr	r2, [sp, #8]
900196f0:	1c6e      	adds	r6, r5, #1
900196f2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900196f6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
900196fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900196fe:	ea46 0e0e 	orr.w	lr, r6, lr
90019702:	f10c 0601 	add.w	r6, ip, #1
90019706:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001970a:	0976      	lsrs	r6, r6, #5
9001970c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90019710:	ea4e 0e06 	orr.w	lr, lr, r6
90019714:	f824 e002 	strh.w	lr, [r4, r2]
90019718:	e7b3      	b.n	90019682 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001971a:	f04f 0800 	mov.w	r8, #0
9001971e:	eba3 0208 	sub.w	r2, r3, r8
90019722:	2a00      	cmp	r2, #0
90019724:	f77f af35 	ble.w	90019592 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90019728:	1402      	asrs	r2, r0, #16
9001972a:	9e00      	ldr	r6, [sp, #0]
9001972c:	140d      	asrs	r5, r1, #16
9001972e:	fb06 2505 	mla	r5, r6, r5, r2
90019732:	9e01      	ldr	r6, [sp, #4]
90019734:	086a      	lsrs	r2, r5, #1
90019736:	07ed      	lsls	r5, r5, #31
90019738:	5cb2      	ldrb	r2, [r6, r2]
9001973a:	bf54      	ite	pl
9001973c:	f002 020f 	andpl.w	r2, r2, #15
90019740:	1112      	asrmi	r2, r2, #4
90019742:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019746:	b2d2      	uxtb	r2, r2
90019748:	b1c2      	cbz	r2, 9001977c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001974a:	9d04      	ldr	r5, [sp, #16]
9001974c:	436a      	muls	r2, r5
9001974e:	1c55      	adds	r5, r2, #1
90019750:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019754:	4d2d      	ldr	r5, [pc, #180]	; (9001980c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019756:	1212      	asrs	r2, r2, #8
90019758:	682e      	ldr	r6, [r5, #0]
9001975a:	2aff      	cmp	r2, #255	; 0xff
9001975c:	ea4f 2516 	mov.w	r5, r6, lsr #8
90019760:	d113      	bne.n	9001978a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90019762:	0972      	lsrs	r2, r6, #5
90019764:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90019768:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001976c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019770:	f025 0507 	bic.w	r5, r5, #7
90019774:	4315      	orrs	r5, r2
90019776:	4335      	orrs	r5, r6
90019778:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001977c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001977e:	f108 0801 	add.w	r8, r8, #1
90019782:	4410      	add	r0, r2
90019784:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019786:	4411      	add	r1, r2
90019788:	e7c9      	b.n	9001971e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001978a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001978e:	fa1f fa82 	uxth.w	sl, r2
90019792:	f3c6 4707 	ubfx	r7, r6, #16, #8
90019796:	43d2      	mvns	r2, r2
90019798:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001979c:	fb17 f70a 	smulbb	r7, r7, sl
900197a0:	b2d2      	uxtb	r2, r2
900197a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900197a6:	b2f6      	uxtb	r6, r6
900197a8:	b2ed      	uxtb	r5, r5
900197aa:	fb0c 7c02 	mla	ip, ip, r2, r7
900197ae:	ea4f 07ee 	mov.w	r7, lr, asr #3
900197b2:	fb16 f60a 	smulbb	r6, r6, sl
900197b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900197ba:	fa1f fc8c 	uxth.w	ip, ip
900197be:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900197c2:	fb15 f50a 	smulbb	r5, r5, sl
900197c6:	fa5f fe8e 	uxtb.w	lr, lr
900197ca:	fb0e 6602 	mla	r6, lr, r2, r6
900197ce:	fb07 5702 	mla	r7, r7, r2, r5
900197d2:	f10c 0201 	add.w	r2, ip, #1
900197d6:	b2b6      	uxth	r6, r6
900197d8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
900197dc:	1c75      	adds	r5, r6, #1
900197de:	b2bf      	uxth	r7, r7
900197e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900197e4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
900197e8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900197ec:	ea45 0c0c 	orr.w	ip, r5, ip
900197f0:	1c7d      	adds	r5, r7, #1
900197f2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
900197f6:	096d      	lsrs	r5, r5, #5
900197f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900197fc:	ea4c 0c05 	orr.w	ip, ip, r5
90019800:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
90019804:	e7ba      	b.n	9001977c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90019806:	b007      	add	sp, #28
90019808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001980c:	2402626c 	.word	0x2402626c

90019810 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019814:	b087      	sub	sp, #28
90019816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001981a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 90019b24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001981e:	9815      	ldr	r0, [sp, #84]	; 0x54
90019820:	9101      	str	r1, [sp, #4]
90019822:	9205      	str	r2, [sp, #20]
90019824:	6841      	ldr	r1, [r0, #4]
90019826:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001982a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001982e:	fb01 2404 	mla	r4, r1, r4, r2
90019832:	6802      	ldr	r2, [r0, #0]
90019834:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019838:	f8db 2008 	ldr.w	r2, [fp, #8]
9001983c:	3201      	adds	r2, #1
9001983e:	f022 0201 	bic.w	r2, r2, #1
90019842:	9202      	str	r2, [sp, #8]
90019844:	f8db 2000 	ldr.w	r2, [fp]
90019848:	9203      	str	r2, [sp, #12]
9001984a:	9a01      	ldr	r2, [sp, #4]
9001984c:	2a00      	cmp	r2, #0
9001984e:	dc03      	bgt.n	90019858 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90019850:	9a05      	ldr	r2, [sp, #20]
90019852:	2a00      	cmp	r2, #0
90019854:	f340 8162 	ble.w	90019b1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90019858:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001985a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001985e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90019862:	9a12      	ldr	r2, [sp, #72]	; 0x48
90019864:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
90019868:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001986c:	2b00      	cmp	r3, #0
9001986e:	dd0e      	ble.n	9001988e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90019870:	1402      	asrs	r2, r0, #16
90019872:	d405      	bmi.n	90019880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019874:	42ba      	cmp	r2, r7
90019876:	da03      	bge.n	90019880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019878:	140a      	asrs	r2, r1, #16
9001987a:	d401      	bmi.n	90019880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001987c:	42b2      	cmp	r2, r6
9001987e:	db07      	blt.n	90019890 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90019880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019882:	3b01      	subs	r3, #1
90019884:	3402      	adds	r4, #2
90019886:	4410      	add	r0, r2
90019888:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001988a:	4411      	add	r1, r2
9001988c:	e7ee      	b.n	9001986c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001988e:	d017      	beq.n	900198c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90019890:	1e5a      	subs	r2, r3, #1
90019892:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90019894:	fb05 0502 	mla	r5, r5, r2, r0
90019898:	142d      	asrs	r5, r5, #16
9001989a:	d409      	bmi.n	900198b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001989c:	42bd      	cmp	r5, r7
9001989e:	da07      	bge.n	900198b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
900198a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
900198a2:	fb05 1202 	mla	r2, r5, r2, r1
900198a6:	1412      	asrs	r2, r2, #16
900198a8:	d402      	bmi.n	900198b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
900198aa:	42b2      	cmp	r2, r6
900198ac:	f2c0 80c3 	blt.w	90019a36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
900198b0:	2500      	movs	r5, #0
900198b2:	195a      	adds	r2, r3, r5
900198b4:	2a00      	cmp	r2, #0
900198b6:	dc3f      	bgt.n	90019938 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
900198b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900198bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900198c0:	9b01      	ldr	r3, [sp, #4]
900198c2:	2b00      	cmp	r3, #0
900198c4:	f340 812a 	ble.w	90019b1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
900198c8:	ee30 0a04 	vadd.f32	s0, s0, s8
900198cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
900198ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
900198d2:	eeb0 6a62 	vmov.f32	s12, s5
900198d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900198da:	ee31 1a05 	vadd.f32	s2, s2, s10
900198de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900198e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900198e6:	eeb0 6a43 	vmov.f32	s12, s6
900198ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900198ee:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900198f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900198f6:	ee61 7a27 	vmul.f32	s15, s2, s15
900198fa:	ee77 2a62 	vsub.f32	s5, s14, s5
900198fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019902:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019906:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001990a:	ee12 2a90 	vmov	r2, s5
9001990e:	eef0 2a47 	vmov.f32	s5, s14
90019912:	fb92 f3f3 	sdiv	r3, r2, r3
90019916:	ee13 2a10 	vmov	r2, s6
9001991a:	9313      	str	r3, [sp, #76]	; 0x4c
9001991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001991e:	eeb0 3a67 	vmov.f32	s6, s15
90019922:	fb92 f3f3 	sdiv	r3, r2, r3
90019926:	9314      	str	r3, [sp, #80]	; 0x50
90019928:	9b01      	ldr	r3, [sp, #4]
9001992a:	9a05      	ldr	r2, [sp, #20]
9001992c:	3b01      	subs	r3, #1
9001992e:	9301      	str	r3, [sp, #4]
90019930:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019932:	bf08      	it	eq
90019934:	4613      	moveq	r3, r2
90019936:	e788      	b.n	9001984a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90019938:	1406      	asrs	r6, r0, #16
9001993a:	d42c      	bmi.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001993c:	f8db 2008 	ldr.w	r2, [fp, #8]
90019940:	42b2      	cmp	r2, r6
90019942:	dd28      	ble.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019944:	140f      	asrs	r7, r1, #16
90019946:	d426      	bmi.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019948:	f8db 200c 	ldr.w	r2, [fp, #12]
9001994c:	42ba      	cmp	r2, r7
9001994e:	dd22      	ble.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019950:	9a02      	ldr	r2, [sp, #8]
90019952:	fb07 6602 	mla	r6, r7, r2, r6
90019956:	9f03      	ldr	r7, [sp, #12]
90019958:	0872      	lsrs	r2, r6, #1
9001995a:	07f6      	lsls	r6, r6, #31
9001995c:	5cba      	ldrb	r2, [r7, r2]
9001995e:	bf54      	ite	pl
90019960:	f002 020f 	andpl.w	r2, r2, #15
90019964:	1112      	asrmi	r2, r2, #4
90019966:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001996a:	b2d2      	uxtb	r2, r2
9001996c:	2aff      	cmp	r2, #255	; 0xff
9001996e:	d118      	bne.n	900199a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
90019970:	f06f 0601 	mvn.w	r6, #1
90019974:	f8d8 2000 	ldr.w	r2, [r8]
90019978:	fb06 f705 	mul.w	r7, r6, r5
9001997c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90019980:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
90019984:	0956      	lsrs	r6, r2, #5
90019986:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001998a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001998e:	ea4c 0606 	orr.w	r6, ip, r6
90019992:	4316      	orrs	r6, r2
90019994:	53e6      	strh	r6, [r4, r7]
90019996:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019998:	3d01      	subs	r5, #1
9001999a:	4410      	add	r0, r2
9001999c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001999e:	4411      	add	r1, r2
900199a0:	e787      	b.n	900198b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
900199a2:	2a00      	cmp	r2, #0
900199a4:	d0f7      	beq.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900199a6:	f06f 0601 	mvn.w	r6, #1
900199aa:	f8d8 c000 	ldr.w	ip, [r8]
900199ae:	fa1f f982 	uxth.w	r9, r2
900199b2:	43d2      	mvns	r2, r2
900199b4:	436e      	muls	r6, r5
900199b6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
900199ba:	b2d2      	uxtb	r2, r2
900199bc:	f834 e006 	ldrh.w	lr, [r4, r6]
900199c0:	fb1a fa09 	smulbb	sl, sl, r9
900199c4:	9604      	str	r6, [sp, #16]
900199c6:	f3cc 4607 	ubfx	r6, ip, #16, #8
900199ca:	ea4f 272e 	mov.w	r7, lr, asr #8
900199ce:	fb16 f609 	smulbb	r6, r6, r9
900199d2:	fa5f fc8c 	uxtb.w	ip, ip
900199d6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900199da:	fb1c fc09 	smulbb	ip, ip, r9
900199de:	fb07 6702 	mla	r7, r7, r2, r6
900199e2:	ea4f 06ee 	mov.w	r6, lr, asr #3
900199e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900199ea:	b2bf      	uxth	r7, r7
900199ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900199f0:	fa5f fe8e 	uxtb.w	lr, lr
900199f4:	fb06 a602 	mla	r6, r6, r2, sl
900199f8:	fb0e cc02 	mla	ip, lr, r2, ip
900199fc:	1c7a      	adds	r2, r7, #1
900199fe:	b2b6      	uxth	r6, r6
90019a00:	fa1f fc8c 	uxth.w	ip, ip
90019a04:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90019a08:	9a04      	ldr	r2, [sp, #16]
90019a0a:	f10c 0a01 	add.w	sl, ip, #1
90019a0e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90019a12:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
90019a16:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019a1a:	ea4a 0707 	orr.w	r7, sl, r7
90019a1e:	f106 0a01 	add.w	sl, r6, #1
90019a22:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90019a26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019a2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019a2e:	ea47 070a 	orr.w	r7, r7, sl
90019a32:	52a7      	strh	r7, [r4, r2]
90019a34:	e7af      	b.n	90019996 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90019a36:	f04f 0e00 	mov.w	lr, #0
90019a3a:	eba3 020e 	sub.w	r2, r3, lr
90019a3e:	2a00      	cmp	r2, #0
90019a40:	f77f af3a 	ble.w	900198b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90019a44:	1402      	asrs	r2, r0, #16
90019a46:	9e02      	ldr	r6, [sp, #8]
90019a48:	140d      	asrs	r5, r1, #16
90019a4a:	fb06 2505 	mla	r5, r6, r5, r2
90019a4e:	9e03      	ldr	r6, [sp, #12]
90019a50:	086a      	lsrs	r2, r5, #1
90019a52:	07ed      	lsls	r5, r5, #31
90019a54:	5cb2      	ldrb	r2, [r6, r2]
90019a56:	bf54      	ite	pl
90019a58:	f002 020f 	andpl.w	r2, r2, #15
90019a5c:	1112      	asrmi	r2, r2, #4
90019a5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019a62:	b2d2      	uxtb	r2, r2
90019a64:	2aff      	cmp	r2, #255	; 0xff
90019a66:	d115      	bne.n	90019a94 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
90019a68:	f8d8 5000 	ldr.w	r5, [r8]
90019a6c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
90019a70:	ea02 2615 	and.w	r6, r2, r5, lsr #8
90019a74:	096a      	lsrs	r2, r5, #5
90019a76:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019a7a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019a7e:	4332      	orrs	r2, r6
90019a80:	432a      	orrs	r2, r5
90019a82:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
90019a86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019a88:	f10e 0e01 	add.w	lr, lr, #1
90019a8c:	4410      	add	r0, r2
90019a8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019a90:	4411      	add	r1, r2
90019a92:	e7d2      	b.n	90019a3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90019a94:	2a00      	cmp	r2, #0
90019a96:	d0f6      	beq.n	90019a86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90019a98:	f8d8 7000 	ldr.w	r7, [r8]
90019a9c:	fa1f f982 	uxth.w	r9, r2
90019aa0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019aa4:	43d2      	mvns	r2, r2
90019aa6:	f3c7 4507 	ubfx	r5, r7, #16, #8
90019aaa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90019aae:	ea4f 262c 	mov.w	r6, ip, asr #8
90019ab2:	fb15 f509 	smulbb	r5, r5, r9
90019ab6:	b2d2      	uxtb	r2, r2
90019ab8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019abc:	b2ff      	uxtb	r7, r7
90019abe:	fb1a fa09 	smulbb	sl, sl, r9
90019ac2:	fb06 5602 	mla	r6, r6, r2, r5
90019ac6:	ea4f 05ec 	mov.w	r5, ip, asr #3
90019aca:	fb17 f709 	smulbb	r7, r7, r9
90019ace:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019ad2:	b2b6      	uxth	r6, r6
90019ad4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019ad8:	fa5f fc8c 	uxtb.w	ip, ip
90019adc:	fb05 a502 	mla	r5, r5, r2, sl
90019ae0:	fb0c 7702 	mla	r7, ip, r2, r7
90019ae4:	1c72      	adds	r2, r6, #1
90019ae6:	b2ad      	uxth	r5, r5
90019ae8:	b2bf      	uxth	r7, r7
90019aea:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90019aee:	f107 0a01 	add.w	sl, r7, #1
90019af2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90019af6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019afa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019afe:	ea4a 0606 	orr.w	r6, sl, r6
90019b02:	f105 0a01 	add.w	sl, r5, #1
90019b06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019b0a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019b0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019b12:	ea46 060a 	orr.w	r6, r6, sl
90019b16:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
90019b1a:	e7b4      	b.n	90019a86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90019b1c:	b007      	add	sp, #28
90019b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019b22:	bf00      	nop
90019b24:	2402626c 	.word	0x2402626c

90019b28 <_ZN8touchgfx8LCD16bppD1Ev>:
90019b28:	4770      	bx	lr

90019b2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
90019b2a:	4770      	bx	lr

90019b2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
90019b2c:	4770      	bx	lr

90019b2e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
90019b2e:	4770      	bx	lr

90019b30 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
90019b30:	4770      	bx	lr

90019b32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019b32:	4770      	bx	lr

90019b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019b34:	4770      	bx	lr

90019b36 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019b36:	4770      	bx	lr

90019b38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90019b38:	4770      	bx	lr

90019b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019b3a:	4770      	bx	lr

90019b3c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90019b3c:	4770      	bx	lr

90019b3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019b3e:	4770      	bx	lr

90019b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019b40:	4770      	bx	lr

90019b42 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90019b42:	4770      	bx	lr

90019b44 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90019b44:	4770      	bx	lr

90019b46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019b46:	4770      	bx	lr

90019b48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
90019b48:	4770      	bx	lr

90019b4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
90019b4a:	4770      	bx	lr

90019b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
90019b4c:	4770      	bx	lr

90019b4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
90019b4e:	4770      	bx	lr

90019b50 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
90019b50:	4770      	bx	lr

90019b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019b52:	4770      	bx	lr

90019b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
90019b54:	4770      	bx	lr

90019b56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
90019b56:	4770      	bx	lr

90019b58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
90019b58:	4770      	bx	lr

90019b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
90019b5a:	4770      	bx	lr

90019b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
90019b5c:	4770      	bx	lr

90019b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
90019b5e:	4770      	bx	lr

90019b60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
90019b60:	4770      	bx	lr

90019b62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
90019b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90019b66:	b088      	sub	sp, #32
90019b68:	4606      	mov	r6, r0
90019b6a:	4688      	mov	r8, r1
90019b6c:	4691      	mov	r9, r2
90019b6e:	ac08      	add	r4, sp, #32
90019b70:	f824 3d0c 	strh.w	r3, [r4, #-12]!
90019b74:	4620      	mov	r0, r4
90019b76:	f7fd fc67 	bl	90017448 <_ZNK8touchgfx6Bitmap7getDataEv>
90019b7a:	6833      	ldr	r3, [r6, #0]
90019b7c:	4605      	mov	r5, r0
90019b7e:	4620      	mov	r0, r4
90019b80:	699f      	ldr	r7, [r3, #24]
90019b82:	f7fd fb75 	bl	90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>
90019b86:	4682      	mov	sl, r0
90019b88:	4620      	mov	r0, r4
90019b8a:	f7fd fba5 	bl	900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90019b8e:	9500      	str	r5, [sp, #0]
90019b90:	464b      	mov	r3, r9
90019b92:	4642      	mov	r2, r8
90019b94:	4631      	mov	r1, r6
90019b96:	e9cd a001 	strd	sl, r0, [sp, #4]
90019b9a:	a806      	add	r0, sp, #24
90019b9c:	47b8      	blx	r7
90019b9e:	4628      	mov	r0, r5
90019ba0:	b008      	add	sp, #32
90019ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

90019ba8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90019ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90019bac:	2300      	movs	r3, #0
90019bae:	9300      	str	r3, [sp, #0]
90019bb0:	4b3d      	ldr	r3, [pc, #244]	; (90019ca8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90019bb2:	781b      	ldrb	r3, [r3, #0]
90019bb4:	2b00      	cmp	r3, #0
90019bb6:	d137      	bne.n	90019c28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90019bb8:	4a3c      	ldr	r2, [pc, #240]	; (90019cac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019bba:	f9b2 2000 	ldrsh.w	r2, [r2]
90019bbe:	f8ad 2004 	strh.w	r2, [sp, #4]
90019bc2:	2b00      	cmp	r3, #0
90019bc4:	d132      	bne.n	90019c2c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90019bc6:	4b3a      	ldr	r3, [pc, #232]	; (90019cb0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
90019bcc:	ac02      	add	r4, sp, #8
90019bce:	6808      	ldr	r0, [r1, #0]
90019bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
90019bd4:	ab02      	add	r3, sp, #8
90019bd6:	6849      	ldr	r1, [r1, #4]
90019bd8:	4d36      	ldr	r5, [pc, #216]	; (90019cb4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
90019bda:	c303      	stmia	r3!, {r0, r1}
90019bdc:	4669      	mov	r1, sp
90019bde:	4620      	mov	r0, r4
90019be0:	f7fa f9d2 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019be4:	4668      	mov	r0, sp
90019be6:	f7fa f9a7 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019bea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019bee:	f8bd 2000 	ldrh.w	r2, [sp]
90019bf2:	462f      	mov	r7, r5
90019bf4:	6828      	ldr	r0, [r5, #0]
90019bf6:	4413      	add	r3, r2
90019bf8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90019bfc:	f8ad 3008 	strh.w	r3, [sp, #8]
90019c00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019c04:	4413      	add	r3, r2
90019c06:	f8ad 300a 	strh.w	r3, [sp, #10]
90019c0a:	6803      	ldr	r3, [r0, #0]
90019c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019c0e:	4798      	blx	r3
90019c10:	f010 0f01 	tst.w	r0, #1
90019c14:	d00c      	beq.n	90019c30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
90019c16:	6828      	ldr	r0, [r5, #0]
90019c18:	6803      	ldr	r3, [r0, #0]
90019c1a:	e894 0006 	ldmia.w	r4, {r1, r2}
90019c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90019c20:	4798      	blx	r3
90019c22:	b004      	add	sp, #16
90019c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90019c28:	4a21      	ldr	r2, [pc, #132]	; (90019cb0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019c2a:	e7c6      	b.n	90019bba <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
90019c2c:	4b1f      	ldr	r3, [pc, #124]	; (90019cac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019c2e:	e7cb      	b.n	90019bc8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
90019c30:	6838      	ldr	r0, [r7, #0]
90019c32:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90019c36:	6803      	ldr	r3, [r0, #0]
90019c38:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
90019c3c:	ea4f 0848 	mov.w	r8, r8, lsl #1
90019c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019c42:	4798      	blx	r3
90019c44:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90019c48:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019c4c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
90019c50:	fb16 3602 	smlabb	r6, r6, r2, r3
90019c54:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90019c58:	6838      	ldr	r0, [r7, #0]
90019c5a:	6803      	ldr	r3, [r0, #0]
90019c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019c5e:	4798      	blx	r3
90019c60:	4a12      	ldr	r2, [pc, #72]	; (90019cac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019c62:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90019c66:	8813      	ldrh	r3, [r2, #0]
90019c68:	4691      	mov	r9, r2
90019c6a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
90019c6e:	435d      	muls	r5, r3
90019c70:	fb03 1404 	mla	r4, r3, r4, r1
90019c74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019c78:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019c7c:	6838      	ldr	r0, [r7, #0]
90019c7e:	42ac      	cmp	r4, r5
90019c80:	6803      	ldr	r3, [r0, #0]
90019c82:	d20e      	bcs.n	90019ca2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90019c84:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90019c88:	4632      	mov	r2, r6
90019c8a:	4643      	mov	r3, r8
90019c8c:	4621      	mov	r1, r4
90019c8e:	47d0      	blx	sl
90019c90:	f8b9 3000 	ldrh.w	r3, [r9]
90019c94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019c98:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90019c9c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019ca0:	e7ec      	b.n	90019c7c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90019ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019ca4:	4798      	blx	r3
90019ca6:	e7bc      	b.n	90019c22 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90019ca8:	2402625c 	.word	0x2402625c
90019cac:	2402625e 	.word	0x2402625e
90019cb0:	24026260 	.word	0x24026260
90019cb4:	24026264 	.word	0x24026264

90019cb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90019cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019cbc:	b08b      	sub	sp, #44	; 0x2c
90019cbe:	460f      	mov	r7, r1
90019cc0:	4616      	mov	r6, r2
90019cc2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90019cc6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
90019cca:	f1bb 0f00 	cmp.w	fp, #0
90019cce:	d049      	beq.n	90019d64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019cd0:	6810      	ldr	r0, [r2, #0]
90019cd2:	ad06      	add	r5, sp, #24
90019cd4:	6851      	ldr	r1, [r2, #4]
90019cd6:	c503      	stmia	r5!, {r0, r1}
90019cd8:	6818      	ldr	r0, [r3, #0]
90019cda:	ad08      	add	r5, sp, #32
90019cdc:	6859      	ldr	r1, [r3, #4]
90019cde:	c503      	stmia	r5!, {r0, r1}
90019ce0:	a806      	add	r0, sp, #24
90019ce2:	f7fa f929 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019ce6:	4631      	mov	r1, r6
90019ce8:	a808      	add	r0, sp, #32
90019cea:	f7fa f94d 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019cee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
90019cf2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90019cf6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
90019cfa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
90019cfe:	fb16 2103 	smlabb	r1, r6, r3, r2
90019d02:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
90019d06:	eb07 0641 	add.w	r6, r7, r1, lsl #1
90019d0a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
90019d0e:	4f5f      	ldr	r7, [pc, #380]	; (90019e8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019d10:	440a      	add	r2, r1
90019d12:	6838      	ldr	r0, [r7, #0]
90019d14:	46b9      	mov	r9, r7
90019d16:	f8ad 2020 	strh.w	r2, [sp, #32]
90019d1a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90019d1e:	4413      	add	r3, r2
90019d20:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90019d24:	6803      	ldr	r3, [r0, #0]
90019d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019d28:	4798      	blx	r3
90019d2a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019d2e:	d01c      	beq.n	90019d6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
90019d30:	f010 0f04 	tst.w	r0, #4
90019d34:	d01d      	beq.n	90019d72 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019d36:	f8d9 0000 	ldr.w	r0, [r9]
90019d3a:	2700      	movs	r7, #0
90019d3c:	b2ad      	uxth	r5, r5
90019d3e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
90019d42:	6801      	ldr	r1, [r0, #0]
90019d44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90019d48:	f8cd b00c 	str.w	fp, [sp, #12]
90019d4c:	9501      	str	r5, [sp, #4]
90019d4e:	e9cd 4704 	strd	r4, r7, [sp, #16]
90019d52:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90019d56:	9402      	str	r4, [sp, #8]
90019d58:	fa1f f488 	uxth.w	r4, r8
90019d5c:	9400      	str	r4, [sp, #0]
90019d5e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
90019d60:	4631      	mov	r1, r6
90019d62:	47a0      	blx	r4
90019d64:	b00b      	add	sp, #44	; 0x2c
90019d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019d6a:	b914      	cbnz	r4, 90019d72 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019d6c:	f010 0f01 	tst.w	r0, #1
90019d70:	e7e0      	b.n	90019d34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90019d72:	f8d9 0000 	ldr.w	r0, [r9]
90019d76:	ea4f 0748 	mov.w	r7, r8, lsl #1
90019d7a:	6803      	ldr	r3, [r0, #0]
90019d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019d7e:	4798      	blx	r3
90019d80:	4b43      	ldr	r3, [pc, #268]	; (90019e90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90019d82:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90019d86:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019d8a:	881a      	ldrh	r2, [r3, #0]
90019d8c:	469a      	mov	sl, r3
90019d8e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90019d92:	fb05 f502 	mul.w	r5, r5, r2
90019d96:	fb02 1404 	mla	r4, r2, r4, r1
90019d9a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019d9e:	d059      	beq.n	90019e54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90019da0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90019da4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019da8:	fa1f f28b 	uxth.w	r2, fp
90019dac:	469e      	mov	lr, r3
90019dae:	fa1f f989 	uxth.w	r9, r9
90019db2:	42ac      	cmp	r4, r5
90019db4:	d264      	bcs.n	90019e80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019db6:	eb04 0a07 	add.w	sl, r4, r7
90019dba:	4554      	cmp	r4, sl
90019dbc:	d23d      	bcs.n	90019e3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
90019dbe:	8821      	ldrh	r1, [r4, #0]
90019dc0:	f836 3b02 	ldrh.w	r3, [r6], #2
90019dc4:	1208      	asrs	r0, r1, #8
90019dc6:	ea4f 2c23 	mov.w	ip, r3, asr #8
90019dca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90019dce:	ea4f 0be1 	mov.w	fp, r1, asr #3
90019dd2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019dd6:	00c9      	lsls	r1, r1, #3
90019dd8:	fb10 f009 	smulbb	r0, r0, r9
90019ddc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90019de0:	b2c9      	uxtb	r1, r1
90019de2:	fb0c 0c02 	mla	ip, ip, r2, r0
90019de6:	10d8      	asrs	r0, r3, #3
90019de8:	fb1b fb09 	smulbb	fp, fp, r9
90019dec:	00db      	lsls	r3, r3, #3
90019dee:	fa1f fc8c 	uxth.w	ip, ip
90019df2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90019df6:	fb11 f109 	smulbb	r1, r1, r9
90019dfa:	b2db      	uxtb	r3, r3
90019dfc:	fb00 b002 	mla	r0, r0, r2, fp
90019e00:	f10c 0b01 	add.w	fp, ip, #1
90019e04:	fb03 1302 	mla	r3, r3, r2, r1
90019e08:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
90019e0c:	b29b      	uxth	r3, r3
90019e0e:	b280      	uxth	r0, r0
90019e10:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
90019e14:	f103 0c01 	add.w	ip, r3, #1
90019e18:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019e1c:	1c43      	adds	r3, r0, #1
90019e1e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90019e22:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90019e26:	0940      	lsrs	r0, r0, #5
90019e28:	ea4c 0c0b 	orr.w	ip, ip, fp
90019e2c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90019e30:	ea4c 0c00 	orr.w	ip, ip, r0
90019e34:	f824 cb02 	strh.w	ip, [r4], #2
90019e38:	e7bf      	b.n	90019dba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
90019e3a:	f8be 3000 	ldrh.w	r3, [lr]
90019e3e:	eba3 0308 	sub.w	r3, r3, r8
90019e42:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019e46:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019e4a:	eba3 0308 	sub.w	r3, r3, r8
90019e4e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019e52:	e7ae      	b.n	90019db2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90019e54:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019e58:	f8d9 0000 	ldr.w	r0, [r9]
90019e5c:	42ac      	cmp	r4, r5
90019e5e:	6803      	ldr	r3, [r0, #0]
90019e60:	d20e      	bcs.n	90019e80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019e62:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
90019e66:	4632      	mov	r2, r6
90019e68:	463b      	mov	r3, r7
90019e6a:	4621      	mov	r1, r4
90019e6c:	47c0      	blx	r8
90019e6e:	f8ba 3000 	ldrh.w	r3, [sl]
90019e72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019e76:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019e7a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019e7e:	e7eb      	b.n	90019e58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90019e80:	4b02      	ldr	r3, [pc, #8]	; (90019e8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019e82:	6818      	ldr	r0, [r3, #0]
90019e84:	6803      	ldr	r3, [r0, #0]
90019e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019e88:	4798      	blx	r3
90019e8a:	e76b      	b.n	90019d64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019e8c:	24026264 	.word	0x24026264
90019e90:	2402625e 	.word	0x2402625e

90019e94 <_ZN8touchgfx8LCD16bppD0Ev>:
90019e94:	b510      	push	{r4, lr}
90019e96:	4604      	mov	r4, r0
90019e98:	2178      	movs	r1, #120	; 0x78
90019e9a:	f008 ffca 	bl	90022e32 <_ZdlPvj>
90019e9e:	4620      	mov	r0, r4
90019ea0:	bd10      	pop	{r4, pc}

90019ea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019ea2:	b510      	push	{r4, lr}
90019ea4:	4604      	mov	r4, r0
90019ea6:	2104      	movs	r1, #4
90019ea8:	f008 ffc3 	bl	90022e32 <_ZdlPvj>
90019eac:	4620      	mov	r0, r4
90019eae:	bd10      	pop	{r4, pc}

90019eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019eb0:	b510      	push	{r4, lr}
90019eb2:	4604      	mov	r4, r0
90019eb4:	2104      	movs	r1, #4
90019eb6:	f008 ffbc 	bl	90022e32 <_ZdlPvj>
90019eba:	4620      	mov	r0, r4
90019ebc:	bd10      	pop	{r4, pc}

90019ebe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019ebe:	b510      	push	{r4, lr}
90019ec0:	4604      	mov	r4, r0
90019ec2:	2104      	movs	r1, #4
90019ec4:	f008 ffb5 	bl	90022e32 <_ZdlPvj>
90019ec8:	4620      	mov	r0, r4
90019eca:	bd10      	pop	{r4, pc}

90019ecc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019ecc:	b510      	push	{r4, lr}
90019ece:	4604      	mov	r4, r0
90019ed0:	2104      	movs	r1, #4
90019ed2:	f008 ffae 	bl	90022e32 <_ZdlPvj>
90019ed6:	4620      	mov	r0, r4
90019ed8:	bd10      	pop	{r4, pc}

90019eda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019eda:	b510      	push	{r4, lr}
90019edc:	4604      	mov	r4, r0
90019ede:	2104      	movs	r1, #4
90019ee0:	f008 ffa7 	bl	90022e32 <_ZdlPvj>
90019ee4:	4620      	mov	r0, r4
90019ee6:	bd10      	pop	{r4, pc}

90019ee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90019ee8:	b510      	push	{r4, lr}
90019eea:	4604      	mov	r4, r0
90019eec:	2104      	movs	r1, #4
90019eee:	f008 ffa0 	bl	90022e32 <_ZdlPvj>
90019ef2:	4620      	mov	r0, r4
90019ef4:	bd10      	pop	{r4, pc}

90019ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90019ef6:	b510      	push	{r4, lr}
90019ef8:	4604      	mov	r4, r0
90019efa:	2104      	movs	r1, #4
90019efc:	f008 ff99 	bl	90022e32 <_ZdlPvj>
90019f00:	4620      	mov	r0, r4
90019f02:	bd10      	pop	{r4, pc}

90019f04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90019f04:	b510      	push	{r4, lr}
90019f06:	4604      	mov	r4, r0
90019f08:	2104      	movs	r1, #4
90019f0a:	f008 ff92 	bl	90022e32 <_ZdlPvj>
90019f0e:	4620      	mov	r0, r4
90019f10:	bd10      	pop	{r4, pc}

90019f12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019f12:	b510      	push	{r4, lr}
90019f14:	4604      	mov	r4, r0
90019f16:	2104      	movs	r1, #4
90019f18:	f008 ff8b 	bl	90022e32 <_ZdlPvj>
90019f1c:	4620      	mov	r0, r4
90019f1e:	bd10      	pop	{r4, pc}

90019f20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019f20:	b510      	push	{r4, lr}
90019f22:	4604      	mov	r4, r0
90019f24:	2104      	movs	r1, #4
90019f26:	f008 ff84 	bl	90022e32 <_ZdlPvj>
90019f2a:	4620      	mov	r0, r4
90019f2c:	bd10      	pop	{r4, pc}

90019f2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019f2e:	b510      	push	{r4, lr}
90019f30:	4604      	mov	r4, r0
90019f32:	2104      	movs	r1, #4
90019f34:	f008 ff7d 	bl	90022e32 <_ZdlPvj>
90019f38:	4620      	mov	r0, r4
90019f3a:	bd10      	pop	{r4, pc}

90019f3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019f3c:	b510      	push	{r4, lr}
90019f3e:	4604      	mov	r4, r0
90019f40:	2104      	movs	r1, #4
90019f42:	f008 ff76 	bl	90022e32 <_ZdlPvj>
90019f46:	4620      	mov	r0, r4
90019f48:	bd10      	pop	{r4, pc}

90019f4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019f4a:	b510      	push	{r4, lr}
90019f4c:	4604      	mov	r4, r0
90019f4e:	2104      	movs	r1, #4
90019f50:	f008 ff6f 	bl	90022e32 <_ZdlPvj>
90019f54:	4620      	mov	r0, r4
90019f56:	bd10      	pop	{r4, pc}

90019f58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019f58:	b510      	push	{r4, lr}
90019f5a:	4604      	mov	r4, r0
90019f5c:	2104      	movs	r1, #4
90019f5e:	f008 ff68 	bl	90022e32 <_ZdlPvj>
90019f62:	4620      	mov	r0, r4
90019f64:	bd10      	pop	{r4, pc}

90019f66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019f66:	b510      	push	{r4, lr}
90019f68:	4604      	mov	r4, r0
90019f6a:	2104      	movs	r1, #4
90019f6c:	f008 ff61 	bl	90022e32 <_ZdlPvj>
90019f70:	4620      	mov	r0, r4
90019f72:	bd10      	pop	{r4, pc}

90019f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019f74:	b510      	push	{r4, lr}
90019f76:	4604      	mov	r4, r0
90019f78:	2104      	movs	r1, #4
90019f7a:	f008 ff5a 	bl	90022e32 <_ZdlPvj>
90019f7e:	4620      	mov	r0, r4
90019f80:	bd10      	pop	{r4, pc}

90019f82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019f82:	b510      	push	{r4, lr}
90019f84:	4604      	mov	r4, r0
90019f86:	2104      	movs	r1, #4
90019f88:	f008 ff53 	bl	90022e32 <_ZdlPvj>
90019f8c:	4620      	mov	r0, r4
90019f8e:	bd10      	pop	{r4, pc}

90019f90 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019f90:	b510      	push	{r4, lr}
90019f92:	4604      	mov	r4, r0
90019f94:	2104      	movs	r1, #4
90019f96:	f008 ff4c 	bl	90022e32 <_ZdlPvj>
90019f9a:	4620      	mov	r0, r4
90019f9c:	bd10      	pop	{r4, pc}

90019f9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019f9e:	b510      	push	{r4, lr}
90019fa0:	4604      	mov	r4, r0
90019fa2:	2104      	movs	r1, #4
90019fa4:	f008 ff45 	bl	90022e32 <_ZdlPvj>
90019fa8:	4620      	mov	r0, r4
90019faa:	bd10      	pop	{r4, pc}

90019fac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90019fac:	b510      	push	{r4, lr}
90019fae:	4604      	mov	r4, r0
90019fb0:	2104      	movs	r1, #4
90019fb2:	f008 ff3e 	bl	90022e32 <_ZdlPvj>
90019fb6:	4620      	mov	r0, r4
90019fb8:	bd10      	pop	{r4, pc}

90019fba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019fba:	b510      	push	{r4, lr}
90019fbc:	4604      	mov	r4, r0
90019fbe:	2104      	movs	r1, #4
90019fc0:	f008 ff37 	bl	90022e32 <_ZdlPvj>
90019fc4:	4620      	mov	r0, r4
90019fc6:	bd10      	pop	{r4, pc}

90019fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019fc8:	b510      	push	{r4, lr}
90019fca:	4604      	mov	r4, r0
90019fcc:	2104      	movs	r1, #4
90019fce:	f008 ff30 	bl	90022e32 <_ZdlPvj>
90019fd2:	4620      	mov	r0, r4
90019fd4:	bd10      	pop	{r4, pc}

90019fd6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019fd6:	b510      	push	{r4, lr}
90019fd8:	4604      	mov	r4, r0
90019fda:	2104      	movs	r1, #4
90019fdc:	f008 ff29 	bl	90022e32 <_ZdlPvj>
90019fe0:	4620      	mov	r0, r4
90019fe2:	bd10      	pop	{r4, pc}

90019fe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019fe4:	b510      	push	{r4, lr}
90019fe6:	4604      	mov	r4, r0
90019fe8:	2104      	movs	r1, #4
90019fea:	f008 ff22 	bl	90022e32 <_ZdlPvj>
90019fee:	4620      	mov	r0, r4
90019ff0:	bd10      	pop	{r4, pc}

90019ff2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90019ff2:	b510      	push	{r4, lr}
90019ff4:	4604      	mov	r4, r0
90019ff6:	2104      	movs	r1, #4
90019ff8:	f008 ff1b 	bl	90022e32 <_ZdlPvj>
90019ffc:	4620      	mov	r0, r4
90019ffe:	bd10      	pop	{r4, pc}

9001a000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001a000:	b510      	push	{r4, lr}
9001a002:	4604      	mov	r4, r0
9001a004:	2104      	movs	r1, #4
9001a006:	f008 ff14 	bl	90022e32 <_ZdlPvj>
9001a00a:	4620      	mov	r0, r4
9001a00c:	bd10      	pop	{r4, pc}

9001a00e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001a00e:	b510      	push	{r4, lr}
9001a010:	4604      	mov	r4, r0
9001a012:	2104      	movs	r1, #4
9001a014:	f008 ff0d 	bl	90022e32 <_ZdlPvj>
9001a018:	4620      	mov	r0, r4
9001a01a:	bd10      	pop	{r4, pc}

9001a01c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001a01c:	b510      	push	{r4, lr}
9001a01e:	4604      	mov	r4, r0
9001a020:	2104      	movs	r1, #4
9001a022:	f008 ff06 	bl	90022e32 <_ZdlPvj>
9001a026:	4620      	mov	r0, r4
9001a028:	bd10      	pop	{r4, pc}
	...

9001a02c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a030:	b091      	sub	sp, #68	; 0x44
9001a032:	469b      	mov	fp, r3
9001a034:	4616      	mov	r6, r2
9001a036:	f9b3 2000 	ldrsh.w	r2, [r3]
9001a03a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001a03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001a042:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001a046:	4604      	mov	r4, r0
9001a048:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001a04c:	4640      	mov	r0, r8
9001a04e:	460d      	mov	r5, r1
9001a050:	4659      	mov	r1, fp
9001a052:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a056:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a05a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001a05e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001a062:	f7f7 f9df 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001a066:	4631      	mov	r1, r6
9001a068:	4640      	mov	r0, r8
9001a06a:	f7f7 f9db 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001a06e:	4b74      	ldr	r3, [pc, #464]	; (9001a240 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001a070:	8818      	ldrh	r0, [r3, #0]
9001a072:	4b74      	ldr	r3, [pc, #464]	; (9001a244 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001a074:	b202      	sxth	r2, r0
9001a076:	8819      	ldrh	r1, [r3, #0]
9001a078:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a07c:	b20e      	sxth	r6, r1
9001a07e:	2b00      	cmp	r3, #0
9001a080:	da07      	bge.n	9001a092 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001a082:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001a086:	4463      	add	r3, ip
9001a088:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001a08c:	2300      	movs	r3, #0
9001a08e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001a092:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a096:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a09a:	1ad2      	subs	r2, r2, r3
9001a09c:	4594      	cmp	ip, r2
9001a09e:	bfc4      	itt	gt
9001a0a0:	1ac2      	subgt	r2, r0, r3
9001a0a2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001a0a6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a0aa:	2a00      	cmp	r2, #0
9001a0ac:	da07      	bge.n	9001a0be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001a0ae:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001a0b2:	4462      	add	r2, ip
9001a0b4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001a0b8:	2200      	movs	r2, #0
9001a0ba:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001a0be:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001a0c2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a0c6:	eba6 060a 	sub.w	r6, r6, sl
9001a0ca:	42b2      	cmp	r2, r6
9001a0cc:	bfc4      	itt	gt
9001a0ce:	eba1 020a 	subgt.w	r2, r1, sl
9001a0d2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001a0d6:	4a5c      	ldr	r2, [pc, #368]	; (9001a248 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001a0d8:	7812      	ldrb	r2, [r2, #0]
9001a0da:	b9a2      	cbnz	r2, 9001a106 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001a0dc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001a0e0:	4286      	cmp	r6, r0
9001a0e2:	4640      	mov	r0, r8
9001a0e4:	9303      	str	r3, [sp, #12]
9001a0e6:	bf14      	ite	ne
9001a0e8:	2600      	movne	r6, #0
9001a0ea:	2601      	moveq	r6, #1
9001a0ec:	f7f7 f9dd 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
9001a0f0:	9b03      	ldr	r3, [sp, #12]
9001a0f2:	b160      	cbz	r0, 9001a10e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001a0f4:	2300      	movs	r3, #0
9001a0f6:	8023      	strh	r3, [r4, #0]
9001a0f8:	8063      	strh	r3, [r4, #2]
9001a0fa:	80a3      	strh	r3, [r4, #4]
9001a0fc:	4620      	mov	r0, r4
9001a0fe:	80e3      	strh	r3, [r4, #6]
9001a100:	b011      	add	sp, #68	; 0x44
9001a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a106:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a10a:	428e      	cmp	r6, r1
9001a10c:	e7e9      	b.n	9001a0e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001a10e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001a112:	a90e      	add	r1, sp, #56	; 0x38
9001a114:	900e      	str	r0, [sp, #56]	; 0x38
9001a116:	a80c      	add	r0, sp, #48	; 0x30
9001a118:	9205      	str	r2, [sp, #20]
9001a11a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a11e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001a122:	9206      	str	r2, [sp, #24]
9001a124:	f8bb 2000 	ldrh.w	r2, [fp]
9001a128:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001a12c:	1a9b      	subs	r3, r3, r2
9001a12e:	b21b      	sxth	r3, r3
9001a130:	9303      	str	r3, [sp, #12]
9001a132:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001a136:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001a250 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a13a:	ebaa 0a03 	sub.w	sl, sl, r3
9001a13e:	fa0f f38a 	sxth.w	r3, sl
9001a142:	9304      	str	r3, [sp, #16]
9001a144:	9b03      	ldr	r3, [sp, #12]
9001a146:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001a14a:	9b04      	ldr	r3, [sp, #16]
9001a14c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a150:	9b05      	ldr	r3, [sp, #20]
9001a152:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001a156:	9b06      	ldr	r3, [sp, #24]
9001a158:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001a15c:	f7f9 ff14 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a160:	4640      	mov	r0, r8
9001a162:	f7f9 fee9 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a166:	a80e      	add	r0, sp, #56	; 0x38
9001a168:	f7f9 fee6 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a16c:	4b37      	ldr	r3, [pc, #220]	; (9001a24c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001a16e:	4628      	mov	r0, r5
9001a170:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001a174:	881b      	ldrh	r3, [r3, #0]
9001a176:	9307      	str	r3, [sp, #28]
9001a178:	682b      	ldr	r3, [r5, #0]
9001a17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a17c:	4798      	blx	r3
9001a17e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001a182:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001a186:	4681      	mov	r9, r0
9001a188:	f8db 0000 	ldr.w	r0, [fp]
9001a18c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001a190:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001a192:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001a196:	6803      	ldr	r3, [r0, #0]
9001a198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a19a:	4798      	blx	r3
9001a19c:	4607      	mov	r7, r0
9001a19e:	f8db 0000 	ldr.w	r0, [fp]
9001a1a2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001a1a6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a1aa:	6803      	ldr	r3, [r0, #0]
9001a1ac:	9109      	str	r1, [sp, #36]	; 0x24
9001a1ae:	9208      	str	r2, [sp, #32]
9001a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a1b2:	4798      	blx	r3
9001a1b4:	f010 0f01 	tst.w	r0, #1
9001a1b8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001a1bc:	d012      	beq.n	9001a1e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001a1be:	f8db 0000 	ldr.w	r0, [fp]
9001a1c2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a1c6:	6803      	ldr	r3, [r0, #0]
9001a1c8:	9200      	str	r2, [sp, #0]
9001a1ca:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001a1cc:	462b      	mov	r3, r5
9001a1ce:	e898 0006 	ldmia.w	r8, {r1, r2}
9001a1d2:	47b0      	blx	r6
9001a1d4:	9b03      	ldr	r3, [sp, #12]
9001a1d6:	8023      	strh	r3, [r4, #0]
9001a1d8:	9b04      	ldr	r3, [sp, #16]
9001a1da:	8063      	strh	r3, [r4, #2]
9001a1dc:	9b05      	ldr	r3, [sp, #20]
9001a1de:	80a3      	strh	r3, [r4, #4]
9001a1e0:	9b06      	ldr	r3, [sp, #24]
9001a1e2:	e78b      	b.n	9001a0fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001a1e4:	fb09 f202 	mul.w	r2, r9, r2
9001a1e8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a1ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001a1f0:	440f      	add	r7, r1
9001a1f2:	b166      	cbz	r6, 9001a20e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a1f4:	9a07      	ldr	r2, [sp, #28]
9001a1f6:	4592      	cmp	sl, r2
9001a1f8:	d109      	bne.n	9001a20e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a1fa:	f8db 0000 	ldr.w	r0, [fp]
9001a1fe:	fb09 f303 	mul.w	r3, r9, r3
9001a202:	4629      	mov	r1, r5
9001a204:	6802      	ldr	r2, [r0, #0]
9001a206:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001a208:	463a      	mov	r2, r7
9001a20a:	47b0      	blx	r6
9001a20c:	e7e2      	b.n	9001a1d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a20e:	fb0a f303 	mul.w	r3, sl, r3
9001a212:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001a216:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001a250 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a21a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001a21e:	4545      	cmp	r5, r8
9001a220:	d2d8      	bcs.n	9001a1d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a222:	f8db 0000 	ldr.w	r0, [fp]
9001a226:	4629      	mov	r1, r5
9001a228:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001a22c:	4435      	add	r5, r6
9001a22e:	6802      	ldr	r2, [r0, #0]
9001a230:	005b      	lsls	r3, r3, #1
9001a232:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001a236:	463a      	mov	r2, r7
9001a238:	47d0      	blx	sl
9001a23a:	444f      	add	r7, r9
9001a23c:	e7ef      	b.n	9001a21e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001a23e:	bf00      	nop
9001a240:	24026258 	.word	0x24026258
9001a244:	2402625a 	.word	0x2402625a
9001a248:	2402625c 	.word	0x2402625c
9001a24c:	2402625e 	.word	0x2402625e
9001a250:	24026264 	.word	0x24026264

9001a254 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001a254:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a256:	4606      	mov	r6, r0
9001a258:	b087      	sub	sp, #28
9001a25a:	460c      	mov	r4, r1
9001a25c:	4617      	mov	r7, r2
9001a25e:	461d      	mov	r5, r3
9001a260:	b333      	cbz	r3, 9001a2b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a262:	4608      	mov	r0, r1
9001a264:	f7f7 f921 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
9001a268:	bb10      	cbnz	r0, 9001a2b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a26a:	6820      	ldr	r0, [r4, #0]
9001a26c:	ab04      	add	r3, sp, #16
9001a26e:	6861      	ldr	r1, [r4, #4]
9001a270:	4c1b      	ldr	r4, [pc, #108]	; (9001a2e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001a272:	c303      	stmia	r3!, {r0, r1}
9001a274:	a804      	add	r0, sp, #16
9001a276:	f7f9 fe5f 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a27a:	6820      	ldr	r0, [r4, #0]
9001a27c:	6803      	ldr	r3, [r0, #0]
9001a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a280:	4798      	blx	r3
9001a282:	2dff      	cmp	r5, #255	; 0xff
9001a284:	d016      	beq.n	9001a2b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001a286:	f010 0f08 	tst.w	r0, #8
9001a28a:	6820      	ldr	r0, [r4, #0]
9001a28c:	d015      	beq.n	9001a2ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001a28e:	2400      	movs	r4, #0
9001a290:	6801      	ldr	r1, [r0, #0]
9001a292:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a296:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a29a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001a29e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001a2a2:	9401      	str	r4, [sp, #4]
9001a2a4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001a2a8:	9400      	str	r4, [sp, #0]
9001a2aa:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001a2ac:	4639      	mov	r1, r7
9001a2ae:	47a0      	blx	r4
9001a2b0:	b007      	add	sp, #28
9001a2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a2b4:	f010 0f02 	tst.w	r0, #2
9001a2b8:	e7e7      	b.n	9001a28a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001a2ba:	6803      	ldr	r3, [r0, #0]
9001a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a2be:	4798      	blx	r3
9001a2c0:	4b08      	ldr	r3, [pc, #32]	; (9001a2e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001a2c2:	4601      	mov	r1, r0
9001a2c4:	4630      	mov	r0, r6
9001a2c6:	881a      	ldrh	r2, [r3, #0]
9001a2c8:	6833      	ldr	r3, [r6, #0]
9001a2ca:	e9cd 7500 	strd	r7, r5, [sp]
9001a2ce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001a2d0:	ab04      	add	r3, sp, #16
9001a2d2:	47a8      	blx	r5
9001a2d4:	6820      	ldr	r0, [r4, #0]
9001a2d6:	6803      	ldr	r3, [r0, #0]
9001a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a2da:	4798      	blx	r3
9001a2dc:	e7e8      	b.n	9001a2b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a2de:	bf00      	nop
9001a2e0:	24026264 	.word	0x24026264
9001a2e4:	2402625e 	.word	0x2402625e

9001a2e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001a2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a2ec:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001a2f0:	4688      	mov	r8, r1
9001a2f2:	4614      	mov	r4, r2
9001a2f4:	461d      	mov	r5, r3
9001a2f6:	9e08      	ldr	r6, [sp, #32]
9001a2f8:	2f00      	cmp	r7, #0
9001a2fa:	f000 80ab 	beq.w	9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2fe:	4618      	mov	r0, r3
9001a300:	f7f7 f8d3 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
9001a304:	2800      	cmp	r0, #0
9001a306:	f040 80a5 	bne.w	9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a30a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001a30e:	2fff      	cmp	r7, #255	; 0xff
9001a310:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001a314:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001a318:	fb04 1303 	mla	r3, r4, r3, r1
9001a31c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001a320:	eba4 0200 	sub.w	r2, r4, r0
9001a324:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001a328:	fb04 f505 	mul.w	r5, r4, r5
9001a32c:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001a330:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001a334:	d04a      	beq.n	9001a3cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001a336:	b2bc      	uxth	r4, r7
9001a338:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001a33c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001a340:	fa5f f788 	uxtb.w	r7, r8
9001a344:	b2f3      	uxtb	r3, r6
9001a346:	0040      	lsls	r0, r0, #1
9001a348:	fb0e fe04 	mul.w	lr, lr, r4
9001a34c:	4367      	muls	r7, r4
9001a34e:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001a352:	4363      	muls	r3, r4
9001a354:	fa1f fc8c 	uxth.w	ip, ip
9001a358:	42a9      	cmp	r1, r5
9001a35a:	d27b      	bcs.n	9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a35c:	eb01 0900 	add.w	r9, r1, r0
9001a360:	4549      	cmp	r1, r9
9001a362:	d231      	bcs.n	9001a3c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001a364:	880a      	ldrh	r2, [r1, #0]
9001a366:	1214      	asrs	r4, r2, #8
9001a368:	10d6      	asrs	r6, r2, #3
9001a36a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001a36e:	00d2      	lsls	r2, r2, #3
9001a370:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001a374:	b2d2      	uxtb	r2, r2
9001a376:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a37a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a37e:	fb14 f40c 	smulbb	r4, r4, ip
9001a382:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001a386:	fb12 f20c 	smulbb	r2, r2, ip
9001a38a:	fb16 f60c 	smulbb	r6, r6, ip
9001a38e:	4474      	add	r4, lr
9001a390:	441a      	add	r2, r3
9001a392:	b2a4      	uxth	r4, r4
9001a394:	443e      	add	r6, r7
9001a396:	b292      	uxth	r2, r2
9001a398:	f104 0a01 	add.w	sl, r4, #1
9001a39c:	b2b6      	uxth	r6, r6
9001a39e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001a3a2:	f102 0a01 	add.w	sl, r2, #1
9001a3a6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001a3aa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001a3ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a3b2:	4322      	orrs	r2, r4
9001a3b4:	1c74      	adds	r4, r6, #1
9001a3b6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001a3ba:	0976      	lsrs	r6, r6, #5
9001a3bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001a3c0:	4332      	orrs	r2, r6
9001a3c2:	f821 2b02 	strh.w	r2, [r1], #2
9001a3c6:	e7cb      	b.n	9001a360 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001a3c8:	4441      	add	r1, r8
9001a3ca:	e7c5      	b.n	9001a358 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001a3cc:	0973      	lsrs	r3, r6, #5
9001a3ce:	4f22      	ldr	r7, [pc, #136]	; (9001a458 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001a3d0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001a3d4:	ea08 0707 	and.w	r7, r8, r7
9001a3d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a3dc:	433b      	orrs	r3, r7
9001a3de:	07e7      	lsls	r7, r4, #31
9001a3e0:	ea43 0306 	orr.w	r3, r3, r6
9001a3e4:	b29b      	uxth	r3, r3
9001a3e6:	d50b      	bpl.n	9001a400 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001a3e8:	0040      	lsls	r0, r0, #1
9001a3ea:	0052      	lsls	r2, r2, #1
9001a3ec:	42a9      	cmp	r1, r5
9001a3ee:	d231      	bcs.n	9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a3f0:	180c      	adds	r4, r1, r0
9001a3f2:	42a1      	cmp	r1, r4
9001a3f4:	d202      	bcs.n	9001a3fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001a3f6:	f821 3b02 	strh.w	r3, [r1], #2
9001a3fa:	e7fa      	b.n	9001a3f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001a3fc:	4411      	add	r1, r2
9001a3fe:	e7f5      	b.n	9001a3ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001a400:	078e      	lsls	r6, r1, #30
9001a402:	d008      	beq.n	9001a416 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001a404:	0066      	lsls	r6, r4, #1
9001a406:	460a      	mov	r2, r1
9001a408:	42aa      	cmp	r2, r5
9001a40a:	d202      	bcs.n	9001a412 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001a40c:	8013      	strh	r3, [r2, #0]
9001a40e:	4432      	add	r2, r6
9001a410:	e7fa      	b.n	9001a408 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001a412:	3102      	adds	r1, #2
9001a414:	3801      	subs	r0, #1
9001a416:	07c2      	lsls	r2, r0, #31
9001a418:	d50b      	bpl.n	9001a432 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001a41a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001a41e:	0066      	lsls	r6, r4, #1
9001a420:	3a01      	subs	r2, #1
9001a422:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001a426:	42aa      	cmp	r2, r5
9001a428:	d202      	bcs.n	9001a430 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001a42a:	8013      	strh	r3, [r2, #0]
9001a42c:	4432      	add	r2, r6
9001a42e:	e7fa      	b.n	9001a426 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001a430:	3801      	subs	r0, #1
9001a432:	b178      	cbz	r0, 9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a434:	1040      	asrs	r0, r0, #1
9001a436:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001a43a:	0080      	lsls	r0, r0, #2
9001a43c:	0064      	lsls	r4, r4, #1
9001a43e:	42a9      	cmp	r1, r5
9001a440:	d208      	bcs.n	9001a454 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a442:	180e      	adds	r6, r1, r0
9001a444:	460a      	mov	r2, r1
9001a446:	42b2      	cmp	r2, r6
9001a448:	d202      	bcs.n	9001a450 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001a44a:	f842 3b04 	str.w	r3, [r2], #4
9001a44e:	e7fa      	b.n	9001a446 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001a450:	4421      	add	r1, r4
9001a452:	e7f4      	b.n	9001a43e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001a454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a458:	00fff800 	.word	0x00fff800

9001a45c <_ZN8touchgfx8LCD16bppC1Ev>:
9001a45c:	2200      	movs	r2, #0
9001a45e:	4910      	ldr	r1, [pc, #64]	; (9001a4a0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001a460:	6042      	str	r2, [r0, #4]
9001a462:	6001      	str	r1, [r0, #0]
9001a464:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001a468:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001a46c:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001a470:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001a474:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001a478:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001a47c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001a480:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001a484:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001a488:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001a48c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001a490:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001a494:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001a498:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001a49c:	4770      	bx	lr
9001a49e:	bf00      	nop
9001a4a0:	90027038 	.word	0x90027038

9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a4a8:	b08d      	sub	sp, #52	; 0x34
9001a4aa:	460d      	mov	r5, r1
9001a4ac:	4604      	mov	r4, r0
9001a4ae:	4699      	mov	r9, r3
9001a4b0:	6808      	ldr	r0, [r1, #0]
9001a4b2:	ab08      	add	r3, sp, #32
9001a4b4:	6849      	ldr	r1, [r1, #4]
9001a4b6:	c303      	stmia	r3!, {r0, r1}
9001a4b8:	6810      	ldr	r0, [r2, #0]
9001a4ba:	ab0a      	add	r3, sp, #40	; 0x28
9001a4bc:	6851      	ldr	r1, [r2, #4]
9001a4be:	c303      	stmia	r3!, {r0, r1}
9001a4c0:	a808      	add	r0, sp, #32
9001a4c2:	f7f9 fd39 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a4c6:	4629      	mov	r1, r5
9001a4c8:	a80a      	add	r0, sp, #40	; 0x28
9001a4ca:	4d67      	ldr	r5, [pc, #412]	; (9001a668 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a4cc:	f7f9 fd5c 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a4d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001a4d4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001a4d8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001a4dc:	6828      	ldr	r0, [r5, #0]
9001a4de:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a4e2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001a4e6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a4ea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a4ee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001a4f2:	440a      	add	r2, r1
9001a4f4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a4f8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001a4fc:	4413      	add	r3, r2
9001a4fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a502:	6803      	ldr	r3, [r0, #0]
9001a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a506:	4798      	blx	r3
9001a508:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a50c:	d119      	bne.n	9001a542 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001a50e:	f010 0f20 	tst.w	r0, #32
9001a512:	6828      	ldr	r0, [r5, #0]
9001a514:	d018      	beq.n	9001a548 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001a516:	2500      	movs	r5, #0
9001a518:	6801      	ldr	r1, [r0, #0]
9001a51a:	b2b6      	uxth	r6, r6
9001a51c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001a520:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001a524:	9601      	str	r6, [sp, #4]
9001a526:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001a52a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001a52e:	9502      	str	r5, [sp, #8]
9001a530:	fa1f f588 	uxth.w	r5, r8
9001a534:	9500      	str	r5, [sp, #0]
9001a536:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001a538:	4621      	mov	r1, r4
9001a53a:	47a8      	blx	r5
9001a53c:	b00d      	add	sp, #52	; 0x34
9001a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a542:	f010 0f40 	tst.w	r0, #64	; 0x40
9001a546:	e7e4      	b.n	9001a512 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001a548:	6803      	ldr	r3, [r0, #0]
9001a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a54c:	4798      	blx	r3
9001a54e:	4947      	ldr	r1, [pc, #284]	; (9001a66c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001a550:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a554:	880b      	ldrh	r3, [r1, #0]
9001a556:	468a      	mov	sl, r1
9001a558:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001a55c:	fb03 5202 	mla	r2, r3, r2, r5
9001a560:	4373      	muls	r3, r6
9001a562:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a566:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a56a:	9307      	str	r3, [sp, #28]
9001a56c:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001a570:	9306      	str	r3, [sp, #24]
9001a572:	9b07      	ldr	r3, [sp, #28]
9001a574:	4298      	cmp	r0, r3
9001a576:	d270      	bcs.n	9001a65a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001a578:	9b06      	ldr	r3, [sp, #24]
9001a57a:	4621      	mov	r1, r4
9001a57c:	eb00 0b03 	add.w	fp, r0, r3
9001a580:	4558      	cmp	r0, fp
9001a582:	d25d      	bcs.n	9001a640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001a584:	f851 4b04 	ldr.w	r4, [r1], #4
9001a588:	0e23      	lsrs	r3, r4, #24
9001a58a:	d014      	beq.n	9001a5b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a58c:	2bff      	cmp	r3, #255	; 0xff
9001a58e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001a592:	d112      	bne.n	9001a5ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a594:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a598:	d10f      	bne.n	9001a5ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a59a:	0963      	lsrs	r3, r4, #5
9001a59c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001a5a0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001a5a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a5a8:	f02c 0c07 	bic.w	ip, ip, #7
9001a5ac:	ea43 0c0c 	orr.w	ip, r3, ip
9001a5b0:	ea4c 0404 	orr.w	r4, ip, r4
9001a5b4:	8004      	strh	r4, [r0, #0]
9001a5b6:	3002      	adds	r0, #2
9001a5b8:	e7e2      	b.n	9001a580 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001a5ba:	fb09 f303 	mul.w	r3, r9, r3
9001a5be:	8807      	ldrh	r7, [r0, #0]
9001a5c0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001a5c4:	fa5f fc8c 	uxtb.w	ip, ip
9001a5c8:	1c5a      	adds	r2, r3, #1
9001a5ca:	123e      	asrs	r6, r7, #8
9001a5cc:	10fd      	asrs	r5, r7, #3
9001a5ce:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001a5d2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001a5d6:	00ff      	lsls	r7, r7, #3
9001a5d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a5dc:	1212      	asrs	r2, r2, #8
9001a5de:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a5e2:	b293      	uxth	r3, r2
9001a5e4:	43d2      	mvns	r2, r2
9001a5e6:	b2ff      	uxtb	r7, r7
9001a5e8:	fb1e fe03 	smulbb	lr, lr, r3
9001a5ec:	b2d2      	uxtb	r2, r2
9001a5ee:	fb1c fc03 	smulbb	ip, ip, r3
9001a5f2:	b2e4      	uxtb	r4, r4
9001a5f4:	fb06 e602 	mla	r6, r6, r2, lr
9001a5f8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a5fc:	fb14 f403 	smulbb	r4, r4, r3
9001a600:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001a604:	b2b6      	uxth	r6, r6
9001a606:	fb05 c502 	mla	r5, r5, r2, ip
9001a60a:	fb07 4702 	mla	r7, r7, r2, r4
9001a60e:	f106 0e01 	add.w	lr, r6, #1
9001a612:	b2ad      	uxth	r5, r5
9001a614:	b2bf      	uxth	r7, r7
9001a616:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001a61a:	f105 0c01 	add.w	ip, r5, #1
9001a61e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001a622:	1c7e      	adds	r6, r7, #1
9001a624:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a628:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001a62c:	096d      	lsrs	r5, r5, #5
9001a62e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001a632:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a636:	ea46 060e 	orr.w	r6, r6, lr
9001a63a:	432e      	orrs	r6, r5
9001a63c:	8006      	strh	r6, [r0, #0]
9001a63e:	e7ba      	b.n	9001a5b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a640:	f8ba 3000 	ldrh.w	r3, [sl]
9001a644:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001a648:	eba3 0308 	sub.w	r3, r3, r8
9001a64c:	eba4 0408 	sub.w	r4, r4, r8
9001a650:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001a654:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001a658:	e78b      	b.n	9001a572 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001a65a:	4b03      	ldr	r3, [pc, #12]	; (9001a668 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a65c:	6818      	ldr	r0, [r3, #0]
9001a65e:	6803      	ldr	r3, [r0, #0]
9001a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a662:	4798      	blx	r3
9001a664:	e76a      	b.n	9001a53c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001a666:	bf00      	nop
9001a668:	24026264 	.word	0x24026264
9001a66c:	2402625e 	.word	0x2402625e

9001a670 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001a670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a674:	b085      	sub	sp, #20
9001a676:	6810      	ldr	r0, [r2, #0]
9001a678:	460c      	mov	r4, r1
9001a67a:	6851      	ldr	r1, [r2, #4]
9001a67c:	466d      	mov	r5, sp
9001a67e:	4616      	mov	r6, r2
9001a680:	c503      	stmia	r5!, {r0, r1}
9001a682:	6818      	ldr	r0, [r3, #0]
9001a684:	6859      	ldr	r1, [r3, #4]
9001a686:	c503      	stmia	r5!, {r0, r1}
9001a688:	4668      	mov	r0, sp
9001a68a:	4d2e      	ldr	r5, [pc, #184]	; (9001a744 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001a68c:	f7f9 fc54 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a690:	4631      	mov	r1, r6
9001a692:	a802      	add	r0, sp, #8
9001a694:	4e2c      	ldr	r6, [pc, #176]	; (9001a748 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001a696:	f7f9 fc77 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a69a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001a69e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001a6a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001a6a6:	6828      	ldr	r0, [r5, #0]
9001a6a8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a6ac:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001a6b0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001a6b4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a6b8:	f8bd 1000 	ldrh.w	r1, [sp]
9001a6bc:	440a      	add	r2, r1
9001a6be:	f8ad 2008 	strh.w	r2, [sp, #8]
9001a6c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a6c6:	4413      	add	r3, r2
9001a6c8:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a6cc:	6803      	ldr	r3, [r0, #0]
9001a6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a6d0:	4798      	blx	r3
9001a6d2:	8833      	ldrh	r3, [r6, #0]
9001a6d4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001a6d8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001a6dc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a6e0:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001a74c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001a6e4:	fb03 1202 	mla	r2, r3, r2, r1
9001a6e8:	fb08 f303 	mul.w	r3, r8, r3
9001a6ec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a6f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a6f4:	4298      	cmp	r0, r3
9001a6f6:	d21d      	bcs.n	9001a734 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001a6f8:	eb00 080c 	add.w	r8, r0, ip
9001a6fc:	4540      	cmp	r0, r8
9001a6fe:	d20f      	bcs.n	9001a720 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001a700:	f854 1b04 	ldr.w	r1, [r4], #4
9001a704:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001a708:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001a70c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001a710:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001a714:	ea42 0209 	orr.w	r2, r2, r9
9001a718:	430a      	orrs	r2, r1
9001a71a:	f820 2b02 	strh.w	r2, [r0], #2
9001a71e:	e7ed      	b.n	9001a6fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001a720:	8832      	ldrh	r2, [r6, #0]
9001a722:	1bd2      	subs	r2, r2, r7
9001a724:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a728:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001a72c:	1bd2      	subs	r2, r2, r7
9001a72e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001a732:	e7df      	b.n	9001a6f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001a734:	6828      	ldr	r0, [r5, #0]
9001a736:	6803      	ldr	r3, [r0, #0]
9001a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a73a:	4798      	blx	r3
9001a73c:	b005      	add	sp, #20
9001a73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a742:	bf00      	nop
9001a744:	24026264 	.word	0x24026264
9001a748:	2402625e 	.word	0x2402625e
9001a74c:	fffff800 	.word	0xfffff800

9001a750 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a754:	b08e      	sub	sp, #56	; 0x38
9001a756:	460e      	mov	r6, r1
9001a758:	4604      	mov	r4, r0
9001a75a:	461d      	mov	r5, r3
9001a75c:	6808      	ldr	r0, [r1, #0]
9001a75e:	ab0a      	add	r3, sp, #40	; 0x28
9001a760:	6849      	ldr	r1, [r1, #4]
9001a762:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001a938 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001a766:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001a93c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001a76a:	c303      	stmia	r3!, {r0, r1}
9001a76c:	6810      	ldr	r0, [r2, #0]
9001a76e:	ab0c      	add	r3, sp, #48	; 0x30
9001a770:	6851      	ldr	r1, [r2, #4]
9001a772:	c303      	stmia	r3!, {r0, r1}
9001a774:	a80a      	add	r0, sp, #40	; 0x28
9001a776:	f7f9 fbdf 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a77a:	4631      	mov	r1, r6
9001a77c:	a80c      	add	r0, sp, #48	; 0x30
9001a77e:	f7f9 fc03 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a782:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001a786:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001a78a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a78e:	f8d8 0000 	ldr.w	r0, [r8]
9001a792:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a796:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001a79a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001a79e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001a7a2:	440c      	add	r4, r1
9001a7a4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001a7a8:	440a      	add	r2, r1
9001a7aa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001a7ae:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001a7b2:	4413      	add	r3, r2
9001a7b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a7b8:	6803      	ldr	r3, [r0, #0]
9001a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a7bc:	4798      	blx	r3
9001a7be:	2dff      	cmp	r5, #255	; 0xff
9001a7c0:	d124      	bne.n	9001a80c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001a7c2:	f010 0f01 	tst.w	r0, #1
9001a7c6:	f8d8 0000 	ldr.w	r0, [r8]
9001a7ca:	d022      	beq.n	9001a812 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001a7cc:	2100      	movs	r1, #0
9001a7ce:	f04f 0e01 	mov.w	lr, #1
9001a7d2:	f8d0 c000 	ldr.w	ip, [r0]
9001a7d6:	b2b6      	uxth	r6, r6
9001a7d8:	f8cd e018 	str.w	lr, [sp, #24]
9001a7dc:	b2bf      	uxth	r7, r7
9001a7de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001a7e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001a7e6:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001a7ea:	f8b9 e000 	ldrh.w	lr, [r9]
9001a7ee:	9503      	str	r5, [sp, #12]
9001a7f0:	9601      	str	r6, [sp, #4]
9001a7f2:	9700      	str	r7, [sp, #0]
9001a7f4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001a7f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a7fc:	9102      	str	r1, [sp, #8]
9001a7fe:	4621      	mov	r1, r4
9001a800:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001a804:	47a8      	blx	r5
9001a806:	b00e      	add	sp, #56	; 0x38
9001a808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a80c:	f010 0f04 	tst.w	r0, #4
9001a810:	e7d9      	b.n	9001a7c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001a812:	6803      	ldr	r3, [r0, #0]
9001a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a816:	4798      	blx	r3
9001a818:	f8b9 3000 	ldrh.w	r3, [r9]
9001a81c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001a820:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001a824:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001a828:	435e      	muls	r6, r3
9001a82a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a82e:	2dff      	cmp	r5, #255	; 0xff
9001a830:	fb03 1202 	mla	r2, r3, r2, r1
9001a834:	ebac 0c07 	sub.w	ip, ip, r7
9001a838:	eba3 0707 	sub.w	r7, r3, r7
9001a83c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a840:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001a844:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a848:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001a84c:	d049      	beq.n	9001a8e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001a84e:	43eb      	mvns	r3, r5
9001a850:	fa1f f985 	uxth.w	r9, r5
9001a854:	b2db      	uxtb	r3, r3
9001a856:	42b0      	cmp	r0, r6
9001a858:	d266      	bcs.n	9001a928 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a85a:	eb00 0a0e 	add.w	sl, r0, lr
9001a85e:	4550      	cmp	r0, sl
9001a860:	4621      	mov	r1, r4
9001a862:	f104 0403 	add.w	r4, r4, #3
9001a866:	d25b      	bcs.n	9001a920 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001a868:	8802      	ldrh	r2, [r0, #0]
9001a86a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a86e:	ea4f 2822 	mov.w	r8, r2, asr #8
9001a872:	fb11 f109 	smulbb	r1, r1, r9
9001a876:	10d5      	asrs	r5, r2, #3
9001a878:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001a87c:	00d2      	lsls	r2, r2, #3
9001a87e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a882:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001a886:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a88a:	fb08 1803 	mla	r8, r8, r3, r1
9001a88e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001a892:	b2d2      	uxtb	r2, r2
9001a894:	fb11 f109 	smulbb	r1, r1, r9
9001a898:	fa1f f888 	uxth.w	r8, r8
9001a89c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a8a0:	fb05 1503 	mla	r5, r5, r3, r1
9001a8a4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a8a8:	fb11 f109 	smulbb	r1, r1, r9
9001a8ac:	b2ad      	uxth	r5, r5
9001a8ae:	fb02 1203 	mla	r2, r2, r3, r1
9001a8b2:	f108 0101 	add.w	r1, r8, #1
9001a8b6:	b292      	uxth	r2, r2
9001a8b8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001a8bc:	1c51      	adds	r1, r2, #1
9001a8be:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001a8c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001a8c6:	1c69      	adds	r1, r5, #1
9001a8c8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001a8cc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a8d0:	096d      	lsrs	r5, r5, #5
9001a8d2:	ea42 0208 	orr.w	r2, r2, r8
9001a8d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a8da:	432a      	orrs	r2, r5
9001a8dc:	f820 2b02 	strh.w	r2, [r0], #2
9001a8e0:	e7bd      	b.n	9001a85e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001a8e2:	4a14      	ldr	r2, [pc, #80]	; (9001a934 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001a8e4:	42b0      	cmp	r0, r6
9001a8e6:	d21f      	bcs.n	9001a928 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a8e8:	eb00 050e 	add.w	r5, r0, lr
9001a8ec:	42a8      	cmp	r0, r5
9001a8ee:	4621      	mov	r1, r4
9001a8f0:	f104 0403 	add.w	r4, r4, #3
9001a8f4:	d210      	bcs.n	9001a918 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001a8f6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001a8fa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a8fe:	00db      	lsls	r3, r3, #3
9001a900:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001a904:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a908:	430b      	orrs	r3, r1
9001a90a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a90e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001a912:	f820 3b02 	strh.w	r3, [r0], #2
9001a916:	e7e9      	b.n	9001a8ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001a918:	4438      	add	r0, r7
9001a91a:	eb01 040c 	add.w	r4, r1, ip
9001a91e:	e7e1      	b.n	9001a8e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001a920:	4438      	add	r0, r7
9001a922:	eb01 040c 	add.w	r4, r1, ip
9001a926:	e796      	b.n	9001a856 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001a928:	4b03      	ldr	r3, [pc, #12]	; (9001a938 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001a92a:	6818      	ldr	r0, [r3, #0]
9001a92c:	6803      	ldr	r3, [r0, #0]
9001a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a930:	4798      	blx	r3
9001a932:	e768      	b.n	9001a806 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001a934:	fffff800 	.word	0xfffff800
9001a938:	24026264 	.word	0x24026264
9001a93c:	2402625e 	.word	0x2402625e

9001a940 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001a940:	b4f0      	push	{r4, r5, r6, r7}
9001a942:	4616      	mov	r6, r2
9001a944:	461c      	mov	r4, r3
9001a946:	460d      	mov	r5, r1
9001a948:	9a04      	ldr	r2, [sp, #16]
9001a94a:	2e01      	cmp	r6, #1
9001a94c:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001a950:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001a954:	d012      	beq.n	9001a97c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001a956:	d303      	bcc.n	9001a960 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001a958:	2e02      	cmp	r6, #2
9001a95a:	d00a      	beq.n	9001a972 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001a95c:	bcf0      	pop	{r4, r5, r6, r7}
9001a95e:	4770      	bx	lr
9001a960:	6805      	ldr	r5, [r0, #0]
9001a962:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001a966:	68ed      	ldr	r5, [r5, #12]
9001a968:	4613      	mov	r3, r2
9001a96a:	4622      	mov	r2, r4
9001a96c:	46ac      	mov	ip, r5
9001a96e:	bcf0      	pop	{r4, r5, r6, r7}
9001a970:	4760      	bx	ip
9001a972:	4621      	mov	r1, r4
9001a974:	4628      	mov	r0, r5
9001a976:	bcf0      	pop	{r4, r5, r6, r7}
9001a978:	f7ff bd94 	b.w	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001a97c:	4621      	mov	r1, r4
9001a97e:	4628      	mov	r0, r5
9001a980:	bcf0      	pop	{r4, r5, r6, r7}
9001a982:	f7ff bee5 	b.w	9001a750 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001a988 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a98c:	b093      	sub	sp, #76	; 0x4c
9001a98e:	4681      	mov	r9, r0
9001a990:	4688      	mov	r8, r1
9001a992:	6810      	ldr	r0, [r2, #0]
9001a994:	6851      	ldr	r1, [r2, #4]
9001a996:	ac0e      	add	r4, sp, #56	; 0x38
9001a998:	4616      	mov	r6, r2
9001a99a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001a99e:	4f6b      	ldr	r7, [pc, #428]	; (9001ab4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001a9a0:	c403      	stmia	r4!, {r0, r1}
9001a9a2:	6818      	ldr	r0, [r3, #0]
9001a9a4:	ac10      	add	r4, sp, #64	; 0x40
9001a9a6:	6859      	ldr	r1, [r3, #4]
9001a9a8:	c403      	stmia	r4!, {r0, r1}
9001a9aa:	a80e      	add	r0, sp, #56	; 0x38
9001a9ac:	f7f9 fac4 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a9b0:	4631      	mov	r1, r6
9001a9b2:	a810      	add	r0, sp, #64	; 0x40
9001a9b4:	4e66      	ldr	r6, [pc, #408]	; (9001ab50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a9b6:	f7f9 fae7 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a9ba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001a9be:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001a9c2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001a9c6:	6830      	ldr	r0, [r6, #0]
9001a9c8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a9cc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001a9d0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001a9d4:	4489      	add	r9, r1
9001a9d6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001a9da:	440a      	add	r2, r1
9001a9dc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001a9e0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001a9e4:	4413      	add	r3, r2
9001a9e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001a9ea:	6803      	ldr	r3, [r0, #0]
9001a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a9ee:	4798      	blx	r3
9001a9f0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001a9f4:	6830      	ldr	r0, [r6, #0]
9001a9f6:	d01d      	beq.n	9001aa34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001a9f8:	2200      	movs	r2, #0
9001a9fa:	6801      	ldr	r1, [r0, #0]
9001a9fc:	b2a4      	uxth	r4, r4
9001a9fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001aa02:	b2ad      	uxth	r5, r5
9001aa04:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001aa08:	220b      	movs	r2, #11
9001aa0a:	9207      	str	r2, [sp, #28]
9001aa0c:	883a      	ldrh	r2, [r7, #0]
9001aa0e:	9502      	str	r5, [sp, #8]
9001aa10:	9206      	str	r2, [sp, #24]
9001aa12:	2201      	movs	r2, #1
9001aa14:	9401      	str	r4, [sp, #4]
9001aa16:	e9cd a204 	strd	sl, r2, [sp, #16]
9001aa1a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001aa1e:	9203      	str	r2, [sp, #12]
9001aa20:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001aa24:	9200      	str	r2, [sp, #0]
9001aa26:	4642      	mov	r2, r8
9001aa28:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001aa2a:	4649      	mov	r1, r9
9001aa2c:	47a0      	blx	r4
9001aa2e:	b013      	add	sp, #76	; 0x4c
9001aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001aa34:	6803      	ldr	r3, [r0, #0]
9001aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001aa38:	4798      	blx	r3
9001aa3a:	883b      	ldrh	r3, [r7, #0]
9001aa3c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001aa40:	f04f 0e04 	mov.w	lr, #4
9001aa44:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001aa48:	435d      	muls	r5, r3
9001aa4a:	fb03 1202 	mla	r2, r3, r2, r1
9001aa4e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001aa52:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001aa56:	920c      	str	r2, [sp, #48]	; 0x30
9001aa58:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001aa5c:	1b12      	subs	r2, r2, r4
9001aa5e:	920d      	str	r2, [sp, #52]	; 0x34
9001aa60:	0062      	lsls	r2, r4, #1
9001aa62:	1b1c      	subs	r4, r3, r4
9001aa64:	920a      	str	r2, [sp, #40]	; 0x28
9001aa66:	0063      	lsls	r3, r4, #1
9001aa68:	930b      	str	r3, [sp, #44]	; 0x2c
9001aa6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001aa6c:	4298      	cmp	r0, r3
9001aa6e:	d266      	bcs.n	9001ab3e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001aa72:	eb00 0b03 	add.w	fp, r0, r3
9001aa76:	4558      	cmp	r0, fp
9001aa78:	d25c      	bcs.n	9001ab34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001aa7a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001aa7e:	fb1e e303 	smlabb	r3, lr, r3, lr
9001aa82:	f858 2003 	ldr.w	r2, [r8, r3]
9001aa86:	0e11      	lsrs	r1, r2, #24
9001aa88:	d012      	beq.n	9001aab0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001aa8a:	29ff      	cmp	r1, #255	; 0xff
9001aa8c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001aa90:	d110      	bne.n	9001aab4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001aa92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001aa96:	d10d      	bne.n	9001aab4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001aa98:	0953      	lsrs	r3, r2, #5
9001aa9a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001aa9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001aaa2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001aaa6:	f027 0707 	bic.w	r7, r7, #7
9001aaaa:	431f      	orrs	r7, r3
9001aaac:	433a      	orrs	r2, r7
9001aaae:	8002      	strh	r2, [r0, #0]
9001aab0:	3002      	adds	r0, #2
9001aab2:	e7e0      	b.n	9001aa76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001aab4:	fb0a f101 	mul.w	r1, sl, r1
9001aab8:	8806      	ldrh	r6, [r0, #0]
9001aaba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001aabe:	b2d2      	uxtb	r2, r2
9001aac0:	1c4b      	adds	r3, r1, #1
9001aac2:	1235      	asrs	r5, r6, #8
9001aac4:	10f4      	asrs	r4, r6, #3
9001aac6:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001aaca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001aace:	00f6      	lsls	r6, r6, #3
9001aad0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001aad4:	121b      	asrs	r3, r3, #8
9001aad6:	b2f6      	uxtb	r6, r6
9001aad8:	b299      	uxth	r1, r3
9001aada:	43db      	mvns	r3, r3
9001aadc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001aae0:	fb1c fc01 	smulbb	ip, ip, r1
9001aae4:	b2db      	uxtb	r3, r3
9001aae6:	fb12 f201 	smulbb	r2, r2, r1
9001aaea:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001aaee:	fb05 c503 	mla	r5, r5, r3, ip
9001aaf2:	b2ff      	uxtb	r7, r7
9001aaf4:	fb06 2203 	mla	r2, r6, r3, r2
9001aaf8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001aafc:	fb17 f701 	smulbb	r7, r7, r1
9001ab00:	b2ad      	uxth	r5, r5
9001ab02:	b292      	uxth	r2, r2
9001ab04:	fb04 7403 	mla	r4, r4, r3, r7
9001ab08:	f105 0c01 	add.w	ip, r5, #1
9001ab0c:	1c57      	adds	r7, r2, #1
9001ab0e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ab12:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001ab16:	b2a4      	uxth	r4, r4
9001ab18:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ab1c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ab20:	433d      	orrs	r5, r7
9001ab22:	1c67      	adds	r7, r4, #1
9001ab24:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001ab28:	0964      	lsrs	r4, r4, #5
9001ab2a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ab2e:	4325      	orrs	r5, r4
9001ab30:	8005      	strh	r5, [r0, #0]
9001ab32:	e7bd      	b.n	9001aab0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ab34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ab36:	4418      	add	r0, r3
9001ab38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ab3a:	4499      	add	r9, r3
9001ab3c:	e795      	b.n	9001aa6a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001ab3e:	4b04      	ldr	r3, [pc, #16]	; (9001ab50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ab40:	6818      	ldr	r0, [r3, #0]
9001ab42:	6803      	ldr	r3, [r0, #0]
9001ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ab46:	4798      	blx	r3
9001ab48:	e771      	b.n	9001aa2e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001ab4a:	bf00      	nop
9001ab4c:	2402625e 	.word	0x2402625e
9001ab50:	24026264 	.word	0x24026264

9001ab54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ab58:	b087      	sub	sp, #28
9001ab5a:	4680      	mov	r8, r0
9001ab5c:	460d      	mov	r5, r1
9001ab5e:	4614      	mov	r4, r2
9001ab60:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001ab64:	2e00      	cmp	r6, #0
9001ab66:	f000 80b9 	beq.w	9001acdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001ab6a:	6810      	ldr	r0, [r2, #0]
9001ab6c:	af02      	add	r7, sp, #8
9001ab6e:	6851      	ldr	r1, [r2, #4]
9001ab70:	c703      	stmia	r7!, {r0, r1}
9001ab72:	6818      	ldr	r0, [r3, #0]
9001ab74:	af04      	add	r7, sp, #16
9001ab76:	6859      	ldr	r1, [r3, #4]
9001ab78:	c703      	stmia	r7!, {r0, r1}
9001ab7a:	a802      	add	r0, sp, #8
9001ab7c:	f7f9 f9dc 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ab80:	4621      	mov	r1, r4
9001ab82:	a804      	add	r0, sp, #16
9001ab84:	f7f9 fa00 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ab88:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ab8c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ab90:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001ab94:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001ab98:	fb14 2103 	smlabb	r1, r4, r3, r2
9001ab9c:	eb08 0401 	add.w	r4, r8, r1
9001aba0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001aba4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001aba8:	440a      	add	r2, r1
9001abaa:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001abae:	f8ad 2010 	strh.w	r2, [sp, #16]
9001abb2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001abb6:	4413      	add	r3, r2
9001abb8:	f8ad 3012 	strh.w	r3, [sp, #18]
9001abbc:	4b49      	ldr	r3, [pc, #292]	; (9001ace4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001abbe:	6818      	ldr	r0, [r3, #0]
9001abc0:	6803      	ldr	r3, [r0, #0]
9001abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001abc4:	4798      	blx	r3
9001abc6:	4b48      	ldr	r3, [pc, #288]	; (9001ace8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001abc8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001abcc:	2eff      	cmp	r6, #255	; 0xff
9001abce:	881a      	ldrh	r2, [r3, #0]
9001abd0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001abd4:	fb02 c101 	mla	r1, r2, r1, ip
9001abd8:	fb02 f207 	mul.w	r2, r2, r7
9001abdc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001abe0:	f105 0104 	add.w	r1, r5, #4
9001abe4:	461d      	mov	r5, r3
9001abe6:	d05a      	beq.n	9001ac9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001abe8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001abec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001abf0:	b2b6      	uxth	r6, r6
9001abf2:	9301      	str	r3, [sp, #4]
9001abf4:	fa1f fe8e 	uxth.w	lr, lr
9001abf8:	4282      	cmp	r2, r0
9001abfa:	d96a      	bls.n	9001acd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001abfc:	eb00 0b0a 	add.w	fp, r0, sl
9001ac00:	4583      	cmp	fp, r0
9001ac02:	d940      	bls.n	9001ac86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001ac04:	8805      	ldrh	r5, [r0, #0]
9001ac06:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ac0a:	122f      	asrs	r7, r5, #8
9001ac0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ac10:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001ac14:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ac18:	00ed      	lsls	r5, r5, #3
9001ac1a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ac1e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ac22:	fb17 f70e 	smulbb	r7, r7, lr
9001ac26:	b2ed      	uxtb	r5, r5
9001ac28:	fb19 f90e 	smulbb	r9, r9, lr
9001ac2c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ac30:	fb15 f50e 	smulbb	r5, r5, lr
9001ac34:	fb0c 7c06 	mla	ip, ip, r6, r7
9001ac38:	10df      	asrs	r7, r3, #3
9001ac3a:	00db      	lsls	r3, r3, #3
9001ac3c:	fa1f fc8c 	uxth.w	ip, ip
9001ac40:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ac44:	b2db      	uxtb	r3, r3
9001ac46:	fb07 9706 	mla	r7, r7, r6, r9
9001ac4a:	f10c 0901 	add.w	r9, ip, #1
9001ac4e:	fb03 5306 	mla	r3, r3, r6, r5
9001ac52:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001ac56:	b29b      	uxth	r3, r3
9001ac58:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001ac5c:	b2bf      	uxth	r7, r7
9001ac5e:	f103 0c01 	add.w	ip, r3, #1
9001ac62:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ac66:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ac6a:	ea4c 0c09 	orr.w	ip, ip, r9
9001ac6e:	f107 0901 	add.w	r9, r7, #1
9001ac72:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001ac76:	097f      	lsrs	r7, r7, #5
9001ac78:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ac7c:	ea4c 0c07 	orr.w	ip, ip, r7
9001ac80:	f820 cb02 	strh.w	ip, [r0], #2
9001ac84:	e7bc      	b.n	9001ac00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001ac86:	9b01      	ldr	r3, [sp, #4]
9001ac88:	881b      	ldrh	r3, [r3, #0]
9001ac8a:	eba3 0308 	sub.w	r3, r3, r8
9001ac8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ac96:	eba3 0308 	sub.w	r3, r3, r8
9001ac9a:	441c      	add	r4, r3
9001ac9c:	e7ac      	b.n	9001abf8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001ac9e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001aca2:	4282      	cmp	r2, r0
9001aca4:	d915      	bls.n	9001acd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001aca6:	eb00 060a 	add.w	r6, r0, sl
9001acaa:	4286      	cmp	r6, r0
9001acac:	d906      	bls.n	9001acbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001acae:	f814 3b01 	ldrb.w	r3, [r4], #1
9001acb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001acb6:	f820 3b02 	strh.w	r3, [r0], #2
9001acba:	e7f6      	b.n	9001acaa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001acbc:	882b      	ldrh	r3, [r5, #0]
9001acbe:	eba3 0308 	sub.w	r3, r3, r8
9001acc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001acc6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001acca:	eba3 0308 	sub.w	r3, r3, r8
9001acce:	441c      	add	r4, r3
9001acd0:	e7e7      	b.n	9001aca2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001acd2:	4b04      	ldr	r3, [pc, #16]	; (9001ace4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001acd4:	6818      	ldr	r0, [r3, #0]
9001acd6:	6803      	ldr	r3, [r0, #0]
9001acd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001acda:	4798      	blx	r3
9001acdc:	b007      	add	sp, #28
9001acde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ace2:	bf00      	nop
9001ace4:	24026264 	.word	0x24026264
9001ace8:	2402625e 	.word	0x2402625e

9001acec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001acf0:	b091      	sub	sp, #68	; 0x44
9001acf2:	4680      	mov	r8, r0
9001acf4:	460f      	mov	r7, r1
9001acf6:	4614      	mov	r4, r2
9001acf8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001acfc:	2d00      	cmp	r5, #0
9001acfe:	d051      	beq.n	9001ada4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ad00:	6810      	ldr	r0, [r2, #0]
9001ad02:	ae0c      	add	r6, sp, #48	; 0x30
9001ad04:	6851      	ldr	r1, [r2, #4]
9001ad06:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001af08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001ad0a:	c603      	stmia	r6!, {r0, r1}
9001ad0c:	6818      	ldr	r0, [r3, #0]
9001ad0e:	ae0e      	add	r6, sp, #56	; 0x38
9001ad10:	6859      	ldr	r1, [r3, #4]
9001ad12:	c603      	stmia	r6!, {r0, r1}
9001ad14:	a80c      	add	r0, sp, #48	; 0x30
9001ad16:	f7f9 f90f 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ad1a:	4621      	mov	r1, r4
9001ad1c:	a80e      	add	r0, sp, #56	; 0x38
9001ad1e:	f7f9 f933 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ad22:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001ad26:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ad2a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001ad2e:	f8d9 0000 	ldr.w	r0, [r9]
9001ad32:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ad36:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001ad3a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001ad3e:	eb08 0401 	add.w	r4, r8, r1
9001ad42:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001ad46:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001af0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001ad4a:	440a      	add	r2, r1
9001ad4c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001ad50:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001ad54:	4413      	add	r3, r2
9001ad56:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001ad5a:	6803      	ldr	r3, [r0, #0]
9001ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ad5e:	4798      	blx	r3
9001ad60:	f010 0f80 	tst.w	r0, #128	; 0x80
9001ad64:	f8d9 0000 	ldr.w	r0, [r9]
9001ad68:	d01f      	beq.n	9001adaa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001ad6a:	2200      	movs	r2, #0
9001ad6c:	6801      	ldr	r1, [r0, #0]
9001ad6e:	b2b6      	uxth	r6, r6
9001ad70:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001ad74:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ad78:	220b      	movs	r2, #11
9001ad7a:	9207      	str	r2, [sp, #28]
9001ad7c:	f8b8 2000 	ldrh.w	r2, [r8]
9001ad80:	9601      	str	r6, [sp, #4]
9001ad82:	9206      	str	r2, [sp, #24]
9001ad84:	2201      	movs	r2, #1
9001ad86:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ad8a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ad8e:	9203      	str	r2, [sp, #12]
9001ad90:	fa1f f28a 	uxth.w	r2, sl
9001ad94:	9202      	str	r2, [sp, #8]
9001ad96:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ad9a:	9200      	str	r2, [sp, #0]
9001ad9c:	463a      	mov	r2, r7
9001ad9e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ada0:	4621      	mov	r1, r4
9001ada2:	47a8      	blx	r5
9001ada4:	b011      	add	sp, #68	; 0x44
9001ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001adaa:	6803      	ldr	r3, [r0, #0]
9001adac:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001adb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001adb2:	4798      	blx	r3
9001adb4:	f8b8 2000 	ldrh.w	r2, [r8]
9001adb8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001adbc:	2dff      	cmp	r5, #255	; 0xff
9001adbe:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001adc2:	fb0a fa02 	mul.w	sl, sl, r2
9001adc6:	fb02 1303 	mla	r3, r2, r3, r1
9001adca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001adce:	d062      	beq.n	9001ae96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001add0:	ea6f 0c05 	mvn.w	ip, r5
9001add4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001add8:	b2ad      	uxth	r5, r5
9001adda:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001adde:	fa5f fc8c 	uxtb.w	ip, ip
9001ade2:	930a      	str	r3, [sp, #40]	; 0x28
9001ade4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ade6:	4298      	cmp	r0, r3
9001ade8:	f080 8085 	bcs.w	9001aef6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001adec:	eb00 0b09 	add.w	fp, r0, r9
9001adf0:	4558      	cmp	r0, fp
9001adf2:	d246      	bcs.n	9001ae82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001adf4:	f814 eb01 	ldrb.w	lr, [r4], #1
9001adf8:	2303      	movs	r3, #3
9001adfa:	2204      	movs	r2, #4
9001adfc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ae00:	8803      	ldrh	r3, [r0, #0]
9001ae02:	eb07 0a0e 	add.w	sl, r7, lr
9001ae06:	1219      	asrs	r1, r3, #8
9001ae08:	10da      	asrs	r2, r3, #3
9001ae0a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ae0e:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ae12:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ae16:	00db      	lsls	r3, r3, #3
9001ae18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001ae1c:	fb18 f805 	smulbb	r8, r8, r5
9001ae20:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001ae24:	fb1e fe05 	smulbb	lr, lr, r5
9001ae28:	b2db      	uxtb	r3, r3
9001ae2a:	fb01 810c 	mla	r1, r1, ip, r8
9001ae2e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ae32:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001ae36:	fb18 f805 	smulbb	r8, r8, r5
9001ae3a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001ae3e:	b289      	uxth	r1, r1
9001ae40:	fb02 820c 	mla	r2, r2, ip, r8
9001ae44:	fb03 e30c 	mla	r3, r3, ip, lr
9001ae48:	f101 0801 	add.w	r8, r1, #1
9001ae4c:	b292      	uxth	r2, r2
9001ae4e:	b29b      	uxth	r3, r3
9001ae50:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001ae54:	f102 0801 	add.w	r8, r2, #1
9001ae58:	f103 0e01 	add.w	lr, r3, #1
9001ae5c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001ae60:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001ae64:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001ae68:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ae6c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001ae70:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ae74:	ea4e 0101 	orr.w	r1, lr, r1
9001ae78:	ea41 0108 	orr.w	r1, r1, r8
9001ae7c:	f820 1b02 	strh.w	r1, [r0], #2
9001ae80:	e7b6      	b.n	9001adf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ae82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ae84:	881b      	ldrh	r3, [r3, #0]
9001ae86:	1b9b      	subs	r3, r3, r6
9001ae88:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae8c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ae90:	1b9b      	subs	r3, r3, r6
9001ae92:	441c      	add	r4, r3
9001ae94:	e7a6      	b.n	9001ade4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ae96:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ae9a:	2203      	movs	r2, #3
9001ae9c:	2504      	movs	r5, #4
9001ae9e:	4919      	ldr	r1, [pc, #100]	; (9001af04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001aea0:	4550      	cmp	r0, sl
9001aea2:	d228      	bcs.n	9001aef6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001aea4:	eb00 0c09 	add.w	ip, r0, r9
9001aea8:	4560      	cmp	r0, ip
9001aeaa:	4623      	mov	r3, r4
9001aeac:	d219      	bcs.n	9001aee2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001aeae:	f893 e000 	ldrb.w	lr, [r3]
9001aeb2:	3401      	adds	r4, #1
9001aeb4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001aeb8:	eb07 0b0e 	add.w	fp, r7, lr
9001aebc:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001aec0:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001aec4:	f89b b001 	ldrb.w	fp, [fp, #1]
9001aec8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001aecc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001aed0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001aed4:	ea43 030b 	orr.w	r3, r3, fp
9001aed8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001aedc:	f820 3b02 	strh.w	r3, [r0], #2
9001aee0:	e7e2      	b.n	9001aea8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001aee2:	f8b8 3000 	ldrh.w	r3, [r8]
9001aee6:	1b9b      	subs	r3, r3, r6
9001aee8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001aeec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001aef0:	1b9b      	subs	r3, r3, r6
9001aef2:	441c      	add	r4, r3
9001aef4:	e7d4      	b.n	9001aea0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001aef6:	4b04      	ldr	r3, [pc, #16]	; (9001af08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001aef8:	6818      	ldr	r0, [r3, #0]
9001aefa:	6803      	ldr	r3, [r0, #0]
9001aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001aefe:	4798      	blx	r3
9001af00:	e750      	b.n	9001ada4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001af02:	bf00      	nop
9001af04:	fffff800 	.word	0xfffff800
9001af08:	24026264 	.word	0x24026264
9001af0c:	2402625e 	.word	0x2402625e

9001af10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001af10:	b430      	push	{r4, r5}
9001af12:	780d      	ldrb	r5, [r1, #0]
9001af14:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001af18:	2d01      	cmp	r5, #1
9001af1a:	d00a      	beq.n	9001af32 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001af1c:	d305      	bcc.n	9001af2a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001af1e:	2d02      	cmp	r5, #2
9001af20:	d10b      	bne.n	9001af3a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001af22:	9402      	str	r4, [sp, #8]
9001af24:	bc30      	pop	{r4, r5}
9001af26:	f7ff be15 	b.w	9001ab54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001af2a:	9402      	str	r4, [sp, #8]
9001af2c:	bc30      	pop	{r4, r5}
9001af2e:	f7ff bd2b 	b.w	9001a988 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001af32:	9402      	str	r4, [sp, #8]
9001af34:	bc30      	pop	{r4, r5}
9001af36:	f7ff bed9 	b.w	9001acec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001af3a:	bc30      	pop	{r4, r5}
9001af3c:	4770      	bx	lr
	...

9001af40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001af44:	b087      	sub	sp, #28
9001af46:	4604      	mov	r4, r0
9001af48:	460e      	mov	r6, r1
9001af4a:	6810      	ldr	r0, [r2, #0]
9001af4c:	6851      	ldr	r1, [r2, #4]
9001af4e:	ad02      	add	r5, sp, #8
9001af50:	4617      	mov	r7, r2
9001af52:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001af56:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001b188 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001af5a:	c503      	stmia	r5!, {r0, r1}
9001af5c:	6818      	ldr	r0, [r3, #0]
9001af5e:	ad04      	add	r5, sp, #16
9001af60:	6859      	ldr	r1, [r3, #4]
9001af62:	c503      	stmia	r5!, {r0, r1}
9001af64:	a802      	add	r0, sp, #8
9001af66:	f7f8 ffe7 	bl	90013f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001af6a:	4639      	mov	r1, r7
9001af6c:	a804      	add	r0, sp, #16
9001af6e:	f7f9 f80b 	bl	90013f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001af72:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001af76:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001af7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001af7e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001af82:	fb11 2103 	smlabb	r1, r1, r3, r2
9001af86:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001af8a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001af8e:	440e      	add	r6, r1
9001af90:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001af94:	440a      	add	r2, r1
9001af96:	f8ad 2010 	strh.w	r2, [sp, #16]
9001af9a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001af9e:	4413      	add	r3, r2
9001afa0:	f8ad 3012 	strh.w	r3, [sp, #18]
9001afa4:	4b77      	ldr	r3, [pc, #476]	; (9001b184 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001afa6:	6818      	ldr	r0, [r3, #0]
9001afa8:	6803      	ldr	r3, [r0, #0]
9001afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001afac:	4798      	blx	r3
9001afae:	f8b9 b000 	ldrh.w	fp, [r9]
9001afb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001afb6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001afba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001afbe:	fb05 f50b 	mul.w	r5, r5, fp
9001afc2:	fb0b 2303 	mla	r3, fp, r3, r2
9001afc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001afca:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001afce:	9300      	str	r3, [sp, #0]
9001afd0:	d069      	beq.n	9001b0a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001afd2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001afd6:	4558      	cmp	r0, fp
9001afd8:	f080 80cc 	bcs.w	9001b174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001afdc:	9b00      	ldr	r3, [sp, #0]
9001afde:	4631      	mov	r1, r6
9001afe0:	18c3      	adds	r3, r0, r3
9001afe2:	9301      	str	r3, [sp, #4]
9001afe4:	9b01      	ldr	r3, [sp, #4]
9001afe6:	4298      	cmp	r0, r3
9001afe8:	d24f      	bcs.n	9001b08a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001afea:	f811 2b01 	ldrb.w	r2, [r1], #1
9001afee:	2a00      	cmp	r2, #0
9001aff0:	d048      	beq.n	9001b084 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001aff2:	fb0a f202 	mul.w	r2, sl, r2
9001aff6:	1c53      	adds	r3, r2, #1
9001aff8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001affc:	121b      	asrs	r3, r3, #8
9001affe:	d041      	beq.n	9001b084 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001b000:	8802      	ldrh	r2, [r0, #0]
9001b002:	b29e      	uxth	r6, r3
9001b004:	f8b4 c000 	ldrh.w	ip, [r4]
9001b008:	43db      	mvns	r3, r3
9001b00a:	1215      	asrs	r5, r2, #8
9001b00c:	b2db      	uxtb	r3, r3
9001b00e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001b012:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001b016:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001b01a:	fb15 f503 	smulbb	r5, r5, r3
9001b01e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b022:	00d2      	lsls	r2, r2, #3
9001b024:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001b028:	fb07 5706 	mla	r7, r7, r6, r5
9001b02c:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001b030:	b2d2      	uxtb	r2, r2
9001b032:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001b036:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001b03a:	fb1e fe03 	smulbb	lr, lr, r3
9001b03e:	b2bf      	uxth	r7, r7
9001b040:	fb12 f203 	smulbb	r2, r2, r3
9001b044:	fa5f fc8c 	uxtb.w	ip, ip
9001b048:	fb05 e506 	mla	r5, r5, r6, lr
9001b04c:	f107 0e01 	add.w	lr, r7, #1
9001b050:	fb0c 2c06 	mla	ip, ip, r6, r2
9001b054:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001b058:	fa1f fc8c 	uxth.w	ip, ip
9001b05c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001b060:	b2ad      	uxth	r5, r5
9001b062:	f10c 0701 	add.w	r7, ip, #1
9001b066:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001b06a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b06e:	ea47 070e 	orr.w	r7, r7, lr
9001b072:	f105 0e01 	add.w	lr, r5, #1
9001b076:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001b07a:	096d      	lsrs	r5, r5, #5
9001b07c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b080:	432f      	orrs	r7, r5
9001b082:	8007      	strh	r7, [r0, #0]
9001b084:	3002      	adds	r0, #2
9001b086:	3402      	adds	r4, #2
9001b088:	e7ac      	b.n	9001afe4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001b08a:	f8b9 3000 	ldrh.w	r3, [r9]
9001b08e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b092:	eba3 0308 	sub.w	r3, r3, r8
9001b096:	eba6 0608 	sub.w	r6, r6, r8
9001b09a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b09e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b0a2:	440e      	add	r6, r1
9001b0a4:	e797      	b.n	9001afd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001b0a6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001b0aa:	42a8      	cmp	r0, r5
9001b0ac:	d262      	bcs.n	9001b174 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001b0ae:	9b00      	ldr	r3, [sp, #0]
9001b0b0:	4631      	mov	r1, r6
9001b0b2:	eb00 0b03 	add.w	fp, r0, r3
9001b0b6:	4558      	cmp	r0, fp
9001b0b8:	d24e      	bcs.n	9001b158 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001b0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
9001b0be:	b12b      	cbz	r3, 9001b0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b0c0:	2bff      	cmp	r3, #255	; 0xff
9001b0c2:	f8b4 e000 	ldrh.w	lr, [r4]
9001b0c6:	d104      	bne.n	9001b0d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001b0c8:	f8a0 e000 	strh.w	lr, [r0]
9001b0cc:	3002      	adds	r0, #2
9001b0ce:	3402      	adds	r4, #2
9001b0d0:	e7f1      	b.n	9001b0b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001b0d2:	8802      	ldrh	r2, [r0, #0]
9001b0d4:	b29f      	uxth	r7, r3
9001b0d6:	43db      	mvns	r3, r3
9001b0d8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001b0dc:	1216      	asrs	r6, r2, #8
9001b0de:	b2db      	uxtb	r3, r3
9001b0e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b0e4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001b0e8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001b0ec:	00d2      	lsls	r2, r2, #3
9001b0ee:	fb16 f603 	smulbb	r6, r6, r3
9001b0f2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001b0f6:	b2d2      	uxtb	r2, r2
9001b0f8:	fb0c 6c07 	mla	ip, ip, r7, r6
9001b0fc:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001b100:	fb1a fa03 	smulbb	sl, sl, r3
9001b104:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b108:	fa1f fc8c 	uxth.w	ip, ip
9001b10c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b110:	fb12 f303 	smulbb	r3, r2, r3
9001b114:	fa5f fe8e 	uxtb.w	lr, lr
9001b118:	fb06 a607 	mla	r6, r6, r7, sl
9001b11c:	f10c 0201 	add.w	r2, ip, #1
9001b120:	fb0e 3307 	mla	r3, lr, r7, r3
9001b124:	b2b6      	uxth	r6, r6
9001b126:	b29b      	uxth	r3, r3
9001b128:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001b12c:	f106 0a01 	add.w	sl, r6, #1
9001b130:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001b134:	f103 0c01 	add.w	ip, r3, #1
9001b138:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001b13c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001b140:	0976      	lsrs	r6, r6, #5
9001b142:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b146:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001b14a:	ea4c 0c02 	orr.w	ip, ip, r2
9001b14e:	ea4c 0c06 	orr.w	ip, ip, r6
9001b152:	f8a0 c000 	strh.w	ip, [r0]
9001b156:	e7b9      	b.n	9001b0cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b158:	f8b9 3000 	ldrh.w	r3, [r9]
9001b15c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b160:	eba3 0308 	sub.w	r3, r3, r8
9001b164:	eba6 0608 	sub.w	r6, r6, r8
9001b168:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b16c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b170:	440e      	add	r6, r1
9001b172:	e79a      	b.n	9001b0aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001b174:	4b03      	ldr	r3, [pc, #12]	; (9001b184 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001b176:	6818      	ldr	r0, [r3, #0]
9001b178:	6803      	ldr	r3, [r0, #0]
9001b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b17c:	4798      	blx	r3
9001b17e:	b007      	add	sp, #28
9001b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b184:	24026264 	.word	0x24026264
9001b188:	2402625e 	.word	0x2402625e

9001b18c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b190:	b089      	sub	sp, #36	; 0x24
9001b192:	4682      	mov	sl, r0
9001b194:	460f      	mov	r7, r1
9001b196:	4691      	mov	r9, r2
9001b198:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001b19c:	4698      	mov	r8, r3
9001b19e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001b1a0:	2e00      	cmp	r6, #0
9001b1a2:	d036      	beq.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1a4:	4608      	mov	r0, r1
9001b1a6:	f7fc f863 	bl	90017270 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001b1aa:	4605      	mov	r5, r0
9001b1ac:	4638      	mov	r0, r7
9001b1ae:	f7fc f893 	bl	900172d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001b1b2:	f8ad 000e 	strh.w	r0, [sp, #14]
9001b1b6:	4638      	mov	r0, r7
9001b1b8:	f8ad 9008 	strh.w	r9, [sp, #8]
9001b1bc:	f8ad 500c 	strh.w	r5, [sp, #12]
9001b1c0:	f8ad 800a 	strh.w	r8, [sp, #10]
9001b1c4:	f7fc f940 	bl	90017448 <_ZNK8touchgfx6Bitmap7getDataEv>
9001b1c8:	4605      	mov	r5, r0
9001b1ca:	4638      	mov	r0, r7
9001b1cc:	f7fc f96c 	bl	900174a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001b1d0:	4681      	mov	r9, r0
9001b1d2:	4638      	mov	r0, r7
9001b1d4:	f7fc f9bc 	bl	90017550 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001b1d8:	280b      	cmp	r0, #11
9001b1da:	d81a      	bhi.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1dc:	e8df f000 	tbb	[pc, r0]
9001b1e0:	1906aebd 	.word	0x1906aebd
9001b1e4:	19191919 	.word	0x19191919
9001b1e8:	b5191919 	.word	0xb5191919
9001b1ec:	4bb0      	ldr	r3, [pc, #704]	; (9001b4b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001b1ee:	6818      	ldr	r0, [r3, #0]
9001b1f0:	6803      	ldr	r3, [r0, #0]
9001b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b1f4:	4798      	blx	r3
9001b1f6:	2eff      	cmp	r6, #255	; 0xff
9001b1f8:	d121      	bne.n	9001b23e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b1fa:	0683      	lsls	r3, r0, #26
9001b1fc:	d41f      	bmi.n	9001b23e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b1fe:	4638      	mov	r0, r7
9001b200:	f7fc f8ea 	bl	900173d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b204:	b940      	cbnz	r0, 9001b218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001b206:	4623      	mov	r3, r4
9001b208:	aa02      	add	r2, sp, #8
9001b20a:	4629      	mov	r1, r5
9001b20c:	4650      	mov	r0, sl
9001b20e:	f7ff fa2f 	bl	9001a670 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b212:	b009      	add	sp, #36	; 0x24
9001b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b218:	f10d 0818 	add.w	r8, sp, #24
9001b21c:	4639      	mov	r1, r7
9001b21e:	af04      	add	r7, sp, #16
9001b220:	4640      	mov	r0, r8
9001b222:	f7fc f88d 	bl	90017340 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b226:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b22a:	e887 0003 	stmia.w	r7, {r0, r1}
9001b22e:	4638      	mov	r0, r7
9001b230:	4621      	mov	r1, r4
9001b232:	f7f6 f8f7 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001b236:	4638      	mov	r0, r7
9001b238:	f7f6 f937 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
9001b23c:	b130      	cbz	r0, 9001b24c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001b23e:	4633      	mov	r3, r6
9001b240:	4622      	mov	r2, r4
9001b242:	a902      	add	r1, sp, #8
9001b244:	4628      	mov	r0, r5
9001b246:	f7ff f92d 	bl	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b24a:	e7e2      	b.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b24c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b250:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b254:	4293      	cmp	r3, r2
9001b256:	dd12      	ble.n	9001b27e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001b258:	1a9b      	subs	r3, r3, r2
9001b25a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b25e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b262:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b266:	4628      	mov	r0, r5
9001b268:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b26c:	4642      	mov	r2, r8
9001b26e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b272:	a902      	add	r1, sp, #8
9001b274:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b278:	4633      	mov	r3, r6
9001b27a:	f7ff f913 	bl	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b27e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b282:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b286:	4293      	cmp	r3, r2
9001b288:	dd12      	ble.n	9001b2b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001b28a:	1a9b      	subs	r3, r3, r2
9001b28c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b290:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b294:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b298:	4642      	mov	r2, r8
9001b29a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b29e:	4628      	mov	r0, r5
9001b2a0:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b2a4:	23ff      	movs	r3, #255	; 0xff
9001b2a6:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b2aa:	a902      	add	r1, sp, #8
9001b2ac:	f7ff f8fa 	bl	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b2b0:	463b      	mov	r3, r7
9001b2b2:	aa02      	add	r2, sp, #8
9001b2b4:	4629      	mov	r1, r5
9001b2b6:	4650      	mov	r0, sl
9001b2b8:	f7ff f9da 	bl	9001a670 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b2bc:	88a2      	ldrh	r2, [r4, #4]
9001b2be:	8823      	ldrh	r3, [r4, #0]
9001b2c0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b2c4:	4413      	add	r3, r2
9001b2c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b2ca:	440a      	add	r2, r1
9001b2cc:	b29b      	uxth	r3, r3
9001b2ce:	b292      	uxth	r2, r2
9001b2d0:	b218      	sxth	r0, r3
9001b2d2:	b211      	sxth	r1, r2
9001b2d4:	4288      	cmp	r0, r1
9001b2d6:	dd12      	ble.n	9001b2fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001b2d8:	1a9b      	subs	r3, r3, r2
9001b2da:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b2de:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001b2e2:	4642      	mov	r2, r8
9001b2e4:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b2e8:	a902      	add	r1, sp, #8
9001b2ea:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b2ee:	23ff      	movs	r3, #255	; 0xff
9001b2f0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b2f4:	4628      	mov	r0, r5
9001b2f6:	f8ad 601a 	strh.w	r6, [sp, #26]
9001b2fa:	f7ff f8d3 	bl	9001a4a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b2fe:	88e2      	ldrh	r2, [r4, #6]
9001b300:	8863      	ldrh	r3, [r4, #2]
9001b302:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b306:	4413      	add	r3, r2
9001b308:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b30c:	440a      	add	r2, r1
9001b30e:	b29b      	uxth	r3, r3
9001b310:	b292      	uxth	r2, r2
9001b312:	b218      	sxth	r0, r3
9001b314:	b211      	sxth	r1, r2
9001b316:	4288      	cmp	r0, r1
9001b318:	f77f af7b 	ble.w	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b31c:	1a9b      	subs	r3, r3, r2
9001b31e:	f9b4 6000 	ldrsh.w	r6, [r4]
9001b322:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b326:	4642      	mov	r2, r8
9001b328:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b32c:	23ff      	movs	r3, #255	; 0xff
9001b32e:	f8ad 6018 	strh.w	r6, [sp, #24]
9001b332:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b336:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b33a:	e782      	b.n	9001b242 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001b33c:	4633      	mov	r3, r6
9001b33e:	4622      	mov	r2, r4
9001b340:	a902      	add	r1, sp, #8
9001b342:	4628      	mov	r0, r5
9001b344:	f7ff fa04 	bl	9001a750 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001b348:	e763      	b.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b34a:	9600      	str	r6, [sp, #0]
9001b34c:	4623      	mov	r3, r4
9001b34e:	aa02      	add	r2, sp, #8
9001b350:	4649      	mov	r1, r9
9001b352:	4628      	mov	r0, r5
9001b354:	f7ff fddc 	bl	9001af10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001b358:	e75b      	b.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b35a:	4638      	mov	r0, r7
9001b35c:	f7fc f83c 	bl	900173d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b360:	b950      	cbnz	r0, 9001b378 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001b362:	f8da 3000 	ldr.w	r3, [sl]
9001b366:	aa02      	add	r2, sp, #8
9001b368:	4629      	mov	r1, r5
9001b36a:	e9cd 6000 	strd	r6, r0, [sp]
9001b36e:	4650      	mov	r0, sl
9001b370:	68de      	ldr	r6, [r3, #12]
9001b372:	4623      	mov	r3, r4
9001b374:	47b0      	blx	r6
9001b376:	e74c      	b.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b378:	f10d 0818 	add.w	r8, sp, #24
9001b37c:	4639      	mov	r1, r7
9001b37e:	af04      	add	r7, sp, #16
9001b380:	4640      	mov	r0, r8
9001b382:	f7fb ffdd 	bl	90017340 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b386:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b38a:	e887 0003 	stmia.w	r7, {r0, r1}
9001b38e:	4638      	mov	r0, r7
9001b390:	4621      	mov	r1, r4
9001b392:	f7f6 f847 	bl	90011424 <_ZN8touchgfx4RectaNERKS0_>
9001b396:	4638      	mov	r0, r7
9001b398:	f7f6 f887 	bl	900114aa <_ZNK8touchgfx4Rect7isEmptyEv>
9001b39c:	b138      	cbz	r0, 9001b3ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001b39e:	4623      	mov	r3, r4
9001b3a0:	9600      	str	r6, [sp, #0]
9001b3a2:	aa02      	add	r2, sp, #8
9001b3a4:	4649      	mov	r1, r9
9001b3a6:	4628      	mov	r0, r5
9001b3a8:	f7ff fdca 	bl	9001af40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b3ac:	e731      	b.n	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b3ae:	f8da 3000 	ldr.w	r3, [sl]
9001b3b2:	aa02      	add	r2, sp, #8
9001b3b4:	4629      	mov	r1, r5
9001b3b6:	e9cd 6000 	strd	r6, r0, [sp]
9001b3ba:	4650      	mov	r0, sl
9001b3bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001b3c0:	463b      	mov	r3, r7
9001b3c2:	47d8      	blx	fp
9001b3c4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b3c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b3cc:	4293      	cmp	r3, r2
9001b3ce:	dd13      	ble.n	9001b3f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001b3d0:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b3d4:	1a9b      	subs	r3, r3, r2
9001b3d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b3da:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b3de:	4628      	mov	r0, r5
9001b3e0:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b3e4:	aa02      	add	r2, sp, #8
9001b3e6:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b3ea:	4649      	mov	r1, r9
9001b3ec:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b3f0:	4643      	mov	r3, r8
9001b3f2:	9600      	str	r6, [sp, #0]
9001b3f4:	f7ff fda4 	bl	9001af40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b3f8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b3fc:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b400:	4293      	cmp	r3, r2
9001b402:	dd13      	ble.n	9001b42c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001b404:	1a9b      	subs	r3, r3, r2
9001b406:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b40a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b40e:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b412:	aa02      	add	r2, sp, #8
9001b414:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b418:	4628      	mov	r0, r5
9001b41a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b41e:	4643      	mov	r3, r8
9001b420:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b424:	4649      	mov	r1, r9
9001b426:	9600      	str	r6, [sp, #0]
9001b428:	f7ff fd8a 	bl	9001af40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b42c:	88a2      	ldrh	r2, [r4, #4]
9001b42e:	8823      	ldrh	r3, [r4, #0]
9001b430:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b434:	4413      	add	r3, r2
9001b436:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b43a:	440a      	add	r2, r1
9001b43c:	b29b      	uxth	r3, r3
9001b43e:	b292      	uxth	r2, r2
9001b440:	b218      	sxth	r0, r3
9001b442:	b211      	sxth	r1, r2
9001b444:	4288      	cmp	r0, r1
9001b446:	dd13      	ble.n	9001b470 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001b448:	1a9b      	subs	r3, r3, r2
9001b44a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b44e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001b452:	aa02      	add	r2, sp, #8
9001b454:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b458:	4649      	mov	r1, r9
9001b45a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b45e:	4643      	mov	r3, r8
9001b460:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b464:	4628      	mov	r0, r5
9001b466:	9600      	str	r6, [sp, #0]
9001b468:	f8ad 701a 	strh.w	r7, [sp, #26]
9001b46c:	f7ff fd68 	bl	9001af40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b470:	88e2      	ldrh	r2, [r4, #6]
9001b472:	8863      	ldrh	r3, [r4, #2]
9001b474:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b478:	4413      	add	r3, r2
9001b47a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b47e:	440a      	add	r2, r1
9001b480:	b29b      	uxth	r3, r3
9001b482:	b292      	uxth	r2, r2
9001b484:	b218      	sxth	r0, r3
9001b486:	b211      	sxth	r1, r2
9001b488:	4288      	cmp	r0, r1
9001b48a:	f77f aec2 	ble.w	9001b212 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b48e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001b492:	1a9b      	subs	r3, r3, r2
9001b494:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b498:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b49c:	4643      	mov	r3, r8
9001b49e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001b4a2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b4a6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b4aa:	9600      	str	r6, [sp, #0]
9001b4ac:	e779      	b.n	9001b3a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001b4ae:	bf00      	nop
9001b4b0:	24026264 	.word	0x24026264

9001b4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001b4b4:	b180      	cbz	r0, 9001b4d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001b4b6:	2903      	cmp	r1, #3
9001b4b8:	d81c      	bhi.n	9001b4f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b4ba:	e8df f001 	tbb	[pc, r1]
9001b4be:	1d02      	.short	0x1d02
9001b4c0:	1f08      	.short	0x1f08
9001b4c2:	4b10      	ldr	r3, [pc, #64]	; (9001b504 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b4c4:	8818      	ldrh	r0, [r3, #0]
9001b4c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4ca:	4240      	negs	r0, r0
9001b4cc:	4770      	bx	lr
9001b4ce:	4b0d      	ldr	r3, [pc, #52]	; (9001b504 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b4d0:	8818      	ldrh	r0, [r3, #0]
9001b4d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b4d6:	4770      	bx	lr
9001b4d8:	2903      	cmp	r1, #3
9001b4da:	d80b      	bhi.n	9001b4f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b4dc:	a301      	add	r3, pc, #4	; (adr r3, 9001b4e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001b4de:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b4e2:	bf00      	nop
9001b4e4:	9001b4f9 	.word	0x9001b4f9
9001b4e8:	9001b4cf 	.word	0x9001b4cf
9001b4ec:	9001b4fd 	.word	0x9001b4fd
9001b4f0:	9001b4c3 	.word	0x9001b4c3
9001b4f4:	2000      	movs	r0, #0
9001b4f6:	4770      	bx	lr
9001b4f8:	2001      	movs	r0, #1
9001b4fa:	4770      	bx	lr
9001b4fc:	f04f 30ff 	mov.w	r0, #4294967295
9001b500:	4770      	bx	lr
9001b502:	bf00      	nop
9001b504:	2402625e 	.word	0x2402625e

9001b508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001b508:	b180      	cbz	r0, 9001b52c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001b50a:	2903      	cmp	r1, #3
9001b50c:	d81c      	bhi.n	9001b548 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b50e:	e8df f001 	tbb	[pc, r1]
9001b512:	021d      	.short	0x021d
9001b514:	071f      	.short	0x071f
9001b516:	4b10      	ldr	r3, [pc, #64]	; (9001b558 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b518:	8818      	ldrh	r0, [r3, #0]
9001b51a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b51e:	4770      	bx	lr
9001b520:	4b0d      	ldr	r3, [pc, #52]	; (9001b558 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b522:	8818      	ldrh	r0, [r3, #0]
9001b524:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b528:	4240      	negs	r0, r0
9001b52a:	4770      	bx	lr
9001b52c:	2903      	cmp	r1, #3
9001b52e:	d80b      	bhi.n	9001b548 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b530:	a301      	add	r3, pc, #4	; (adr r3, 9001b538 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001b532:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b536:	bf00      	nop
9001b538:	9001b517 	.word	0x9001b517
9001b53c:	9001b551 	.word	0x9001b551
9001b540:	9001b521 	.word	0x9001b521
9001b544:	9001b54d 	.word	0x9001b54d
9001b548:	2000      	movs	r0, #0
9001b54a:	4770      	bx	lr
9001b54c:	2001      	movs	r0, #1
9001b54e:	4770      	bx	lr
9001b550:	f04f 30ff 	mov.w	r0, #4294967295
9001b554:	4770      	bx	lr
9001b556:	bf00      	nop
9001b558:	2402625e 	.word	0x2402625e

9001b55c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b560:	b099      	sub	sp, #100	; 0x64
9001b562:	910b      	str	r1, [sp, #44]	; 0x2c
9001b564:	a914      	add	r1, sp, #80	; 0x50
9001b566:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001b56a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001b56e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001b572:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001b576:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001b57a:	e881 000c 	stmia.w	r1, {r2, r3}
9001b57e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001b582:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001b586:	9309      	str	r3, [sp, #36]	; 0x24
9001b588:	f891 900d 	ldrb.w	r9, [r1, #13]
9001b58c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001b590:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001b594:	9310      	str	r3, [sp, #64]	; 0x40
9001b596:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001b59a:	930c      	str	r3, [sp, #48]	; 0x30
9001b59c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001b5a0:	798f      	ldrb	r7, [r1, #6]
9001b5a2:	431f      	orrs	r7, r3
9001b5a4:	f000 8195 	beq.w	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b5a8:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001b5ac:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001b5b0:	f891 9007 	ldrb.w	r9, [r1, #7]
9001b5b4:	ea59 0903 	orrs.w	r9, r9, r3
9001b5b8:	f000 818b 	beq.w	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b5bc:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001b5c0:	b29b      	uxth	r3, r3
9001b5c2:	2d00      	cmp	r5, #0
9001b5c4:	f000 812e 	beq.w	9001b824 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001b5c8:	1aed      	subs	r5, r5, r3
9001b5ca:	b2ad      	uxth	r5, r5
9001b5cc:	042b      	lsls	r3, r5, #16
9001b5ce:	d502      	bpl.n	9001b5d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b5d0:	1b64      	subs	r4, r4, r5
9001b5d2:	2500      	movs	r5, #0
9001b5d4:	b224      	sxth	r4, r4
9001b5d6:	f9b2 1000 	ldrsh.w	r1, [r2]
9001b5da:	a814      	add	r0, sp, #80	; 0x50
9001b5dc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001b5e0:	428c      	cmp	r4, r1
9001b5e2:	b28b      	uxth	r3, r1
9001b5e4:	bfbf      	itttt	lt
9001b5e6:	18ed      	addlt	r5, r5, r3
9001b5e8:	1b2c      	sublt	r4, r5, r4
9001b5ea:	b2a5      	uxthlt	r5, r4
9001b5ec:	460c      	movlt	r4, r1
9001b5ee:	8891      	ldrh	r1, [r2, #4]
9001b5f0:	440b      	add	r3, r1
9001b5f2:	4621      	mov	r1, r4
9001b5f4:	b21b      	sxth	r3, r3
9001b5f6:	930f      	str	r3, [sp, #60]	; 0x3c
9001b5f8:	88d3      	ldrh	r3, [r2, #6]
9001b5fa:	8852      	ldrh	r2, [r2, #2]
9001b5fc:	4413      	add	r3, r2
9001b5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b600:	b21b      	sxth	r3, r3
9001b602:	930d      	str	r3, [sp, #52]	; 0x34
9001b604:	4bbd      	ldr	r3, [pc, #756]	; (9001b8fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001b606:	f893 b000 	ldrb.w	fp, [r3]
9001b60a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001b60e:	f1dc 0300 	rsbs	r3, ip, #0
9001b612:	eb43 030c 	adc.w	r3, r3, ip
9001b616:	930e      	str	r3, [sp, #56]	; 0x38
9001b618:	4653      	mov	r3, sl
9001b61a:	f7f8 fb07 	bl	90013c2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001b61e:	4621      	mov	r1, r4
9001b620:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001b624:	4653      	mov	r3, sl
9001b626:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b628:	a814      	add	r0, sp, #80	; 0x50
9001b62a:	f7f8 fb1c 	bl	90013c66 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001b62e:	a918      	add	r1, sp, #96	; 0x60
9001b630:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001b634:	a817      	add	r0, sp, #92	; 0x5c
9001b636:	f7f8 fc3d 	bl	90013eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001b63a:	f1ba 0f00 	cmp.w	sl, #0
9001b63e:	f040 80f4 	bne.w	9001b82a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001b642:	f1bb 0f01 	cmp.w	fp, #1
9001b646:	f040 80f8 	bne.w	9001b83a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001b64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b64c:	2b00      	cmp	r3, #0
9001b64e:	f040 8145 	bne.w	9001b8dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001b652:	b2ba      	uxth	r2, r7
9001b654:	b905      	cbnz	r5, 9001b658 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001b656:	b16e      	cbz	r6, 9001b674 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001b658:	fb06 5302 	mla	r3, r6, r2, r5
9001b65c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001b65e:	4631      	mov	r1, r6
9001b660:	fb08 f303 	mul.w	r3, r8, r3
9001b664:	f003 0607 	and.w	r6, r3, #7
9001b668:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001b66c:	9328      	str	r3, [sp, #160]	; 0xa0
9001b66e:	eba9 0301 	sub.w	r3, r9, r1
9001b672:	930a      	str	r3, [sp, #40]	; 0x28
9001b674:	4651      	mov	r1, sl
9001b676:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b678:	f7ff ff1c 	bl	9001b4b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001b67c:	4681      	mov	r9, r0
9001b67e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b680:	f7ff ff42 	bl	9001b508 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001b684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b686:	9909      	ldr	r1, [sp, #36]	; 0x24
9001b688:	4683      	mov	fp, r0
9001b68a:	eba3 0a01 	sub.w	sl, r3, r1
9001b68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b690:	459a      	cmp	sl, r3
9001b692:	bfa8      	it	ge
9001b694:	469a      	movge	sl, r3
9001b696:	f1ba 0f00 	cmp.w	sl, #0
9001b69a:	f340 811a 	ble.w	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b69e:	1b64      	subs	r4, r4, r5
9001b6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b6a2:	1b1c      	subs	r4, r3, r4
9001b6a4:	42bc      	cmp	r4, r7
9001b6a6:	bfd4      	ite	le
9001b6a8:	ebc5 0504 	rsble	r5, r5, r4
9001b6ac:	ebc5 0507 	rsbgt	r5, r5, r7
9001b6b0:	2d00      	cmp	r5, #0
9001b6b2:	f340 810e 	ble.w	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b6b6:	1b52      	subs	r2, r2, r5
9001b6b8:	fb08 f302 	mul.w	r3, r8, r2
9001b6bc:	930f      	str	r3, [sp, #60]	; 0x3c
9001b6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b6c0:	2b00      	cmp	r3, #0
9001b6c2:	f040 8116 	bne.w	9001b8f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001b6c6:	4b8e      	ldr	r3, [pc, #568]	; (9001b900 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001b6c8:	6818      	ldr	r0, [r3, #0]
9001b6ca:	6803      	ldr	r3, [r0, #0]
9001b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b6ce:	4798      	blx	r3
9001b6d0:	2301      	movs	r3, #1
9001b6d2:	4a8c      	ldr	r2, [pc, #560]	; (9001b904 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001b6d4:	fa03 f308 	lsl.w	r3, r3, r8
9001b6d8:	8811      	ldrh	r1, [r2, #0]
9001b6da:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001b6de:	3b01      	subs	r3, #1
9001b6e0:	b2db      	uxtb	r3, r3
9001b6e2:	930e      	str	r3, [sp, #56]	; 0x38
9001b6e4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001b6e8:	fb01 2303 	mla	r3, r1, r3, r2
9001b6ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b6f0:	930a      	str	r3, [sp, #40]	; 0x28
9001b6f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6f4:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001b6f8:	9313      	str	r3, [sp, #76]	; 0x4c
9001b6fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b6fc:	0a19      	lsrs	r1, r3, #8
9001b6fe:	b2cb      	uxtb	r3, r1
9001b700:	9312      	str	r3, [sp, #72]	; 0x48
9001b702:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b704:	b2db      	uxtb	r3, r3
9001b706:	9311      	str	r3, [sp, #68]	; 0x44
9001b708:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b70a:	095a      	lsrs	r2, r3, #5
9001b70c:	4b7e      	ldr	r3, [pc, #504]	; (9001b908 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001b70e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001b712:	400b      	ands	r3, r1
9001b714:	4313      	orrs	r3, r2
9001b716:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001b718:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b71c:	4313      	orrs	r3, r2
9001b71e:	b29b      	uxth	r3, r3
9001b720:	9310      	str	r3, [sp, #64]	; 0x40
9001b722:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b724:	781a      	ldrb	r2, [r3, #0]
9001b726:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001b72a:	fb05 b919 	mls	r9, r5, r9, fp
9001b72e:	4132      	asrs	r2, r6
9001b730:	fb03 fb05 	mul.w	fp, r3, r5
9001b734:	930d      	str	r3, [sp, #52]	; 0x34
9001b736:	b2d2      	uxtb	r2, r2
9001b738:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001b73c:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001b740:	f0c0 80f5 	bcc.w	9001b92e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001b744:	46ae      	mov	lr, r5
9001b746:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001b74a:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001b74e:	f0c0 80dd 	bcc.w	9001b90c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001b752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b754:	4013      	ands	r3, r2
9001b756:	d055      	beq.n	9001b804 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001b758:	20ff      	movs	r0, #255	; 0xff
9001b75a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001b75c:	fb90 f1f1 	sdiv	r1, r0, r1
9001b760:	434b      	muls	r3, r1
9001b762:	2bfe      	cmp	r3, #254	; 0xfe
9001b764:	dd03      	ble.n	9001b76e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001b766:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b768:	4281      	cmp	r1, r0
9001b76a:	f000 80c4 	beq.w	9001b8f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001b76e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b770:	f8bc 4000 	ldrh.w	r4, [ip]
9001b774:	fb11 f303 	smulbb	r3, r1, r3
9001b778:	1220      	asrs	r0, r4, #8
9001b77a:	b29b      	uxth	r3, r3
9001b77c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001b780:	1c59      	adds	r1, r3, #1
9001b782:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001b786:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001b78a:	10e1      	asrs	r1, r4, #3
9001b78c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001b790:	00e4      	lsls	r4, r4, #3
9001b792:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001b796:	b29f      	uxth	r7, r3
9001b798:	43db      	mvns	r3, r3
9001b79a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001b79e:	b2db      	uxtb	r3, r3
9001b7a0:	b2e4      	uxtb	r4, r4
9001b7a2:	9309      	str	r3, [sp, #36]	; 0x24
9001b7a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001b7a6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001b7aa:	fb13 f907 	smulbb	r9, r3, r7
9001b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b7b0:	fb00 9003 	mla	r0, r0, r3, r9
9001b7b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b7b6:	fb13 f907 	smulbb	r9, r3, r7
9001b7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b7bc:	b280      	uxth	r0, r0
9001b7be:	fb01 9103 	mla	r1, r1, r3, r9
9001b7c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b7c4:	fb13 f707 	smulbb	r7, r3, r7
9001b7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b7ca:	b289      	uxth	r1, r1
9001b7cc:	fb04 7403 	mla	r4, r4, r3, r7
9001b7d0:	1c43      	adds	r3, r0, #1
9001b7d2:	b2a4      	uxth	r4, r4
9001b7d4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001b7d8:	f104 0901 	add.w	r9, r4, #1
9001b7dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001b7e0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001b7e4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001b7e8:	ea49 0000 	orr.w	r0, r9, r0
9001b7ec:	f101 0901 	add.w	r9, r1, #1
9001b7f0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001b7f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b7f8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b7fc:	ea40 0009 	orr.w	r0, r0, r9
9001b800:	f8ac 0000 	strh.w	r0, [ip]
9001b804:	4446      	add	r6, r8
9001b806:	b2b6      	uxth	r6, r6
9001b808:	2e07      	cmp	r6, #7
9001b80a:	bf89      	itett	hi
9001b80c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001b80e:	fa42 f208 	asrls.w	r2, r2, r8
9001b812:	2600      	movhi	r6, #0
9001b814:	785a      	ldrbhi	r2, [r3, #1]
9001b816:	bf8a      	itet	hi
9001b818:	3301      	addhi	r3, #1
9001b81a:	b2d2      	uxtbls	r2, r2
9001b81c:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001b81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b820:	449c      	add	ip, r3
9001b822:	e792      	b.n	9001b74a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001b824:	441c      	add	r4, r3
9001b826:	b224      	sxth	r4, r4
9001b828:	e6d5      	b.n	9001b5d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b82a:	f1ba 0f01 	cmp.w	sl, #1
9001b82e:	f47f af0c 	bne.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b832:	f1bb 0f01 	cmp.w	fp, #1
9001b836:	f47f af08 	bne.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b83a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001b900 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001b83e:	f8db 0000 	ldr.w	r0, [fp]
9001b842:	6803      	ldr	r3, [r0, #0]
9001b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b846:	4798      	blx	r3
9001b848:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001b84c:	465a      	mov	r2, fp
9001b84e:	d006      	beq.n	9001b85e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b850:	f1b8 0f04 	cmp.w	r8, #4
9001b854:	d140      	bne.n	9001b8d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001b856:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b858:	3300      	adds	r3, #0
9001b85a:	bf18      	it	ne
9001b85c:	2301      	movne	r3, #1
9001b85e:	0580      	lsls	r0, r0, #22
9001b860:	d56e      	bpl.n	9001b940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b862:	f1b8 0f08 	cmp.w	r8, #8
9001b866:	d16b      	bne.n	9001b940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b868:	2b00      	cmp	r3, #0
9001b86a:	bf0c      	ite	eq
9001b86c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001b870:	f44f 7180 	movne.w	r1, #256	; 0x100
9001b874:	2d00      	cmp	r5, #0
9001b876:	f47f aee8 	bne.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b87a:	2e00      	cmp	r6, #0
9001b87c:	f47f aee5 	bne.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b880:	19e3      	adds	r3, r4, r7
9001b882:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b884:	4283      	cmp	r3, r0
9001b886:	f73f aee0 	bgt.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b88c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001b88e:	444b      	add	r3, r9
9001b890:	4283      	cmp	r3, r0
9001b892:	f73f aeda 	bgt.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b896:	b2bf      	uxth	r7, r7
9001b898:	f1b8 0f08 	cmp.w	r8, #8
9001b89c:	6810      	ldr	r0, [r2, #0]
9001b89e:	f04f 0500 	mov.w	r5, #0
9001b8a2:	bf18      	it	ne
9001b8a4:	3701      	addne	r7, #1
9001b8a6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001b8aa:	6804      	ldr	r4, [r0, #0]
9001b8ac:	bf18      	it	ne
9001b8ae:	f027 0701 	bicne.w	r7, r7, #1
9001b8b2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001b8b6:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001b8ba:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b8bc:	bf18      	it	ne
9001b8be:	b2bf      	uxthne	r7, r7
9001b8c0:	9104      	str	r1, [sp, #16]
9001b8c2:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001b8c4:	e9cd 7900 	strd	r7, r9, [sp]
9001b8c8:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001b8cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001b8ce:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001b8d0:	47a0      	blx	r4
9001b8d2:	b019      	add	sp, #100	; 0x64
9001b8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b8d8:	2300      	movs	r3, #0
9001b8da:	e7c0      	b.n	9001b85e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b8dc:	2208      	movs	r2, #8
9001b8de:	fb92 f3f8 	sdiv	r3, r2, r8
9001b8e2:	1e5a      	subs	r2, r3, #1
9001b8e4:	443a      	add	r2, r7
9001b8e6:	fb92 f2f3 	sdiv	r2, r2, r3
9001b8ea:	fb12 f203 	smulbb	r2, r2, r3
9001b8ee:	b292      	uxth	r2, r2
9001b8f0:	e6b0      	b.n	9001b654 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001b8f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001b8f4:	e6ec      	b.n	9001b6d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001b8f6:	9810      	ldr	r0, [sp, #64]	; 0x40
9001b8f8:	e782      	b.n	9001b800 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001b8fa:	bf00      	nop
9001b8fc:	2402625c 	.word	0x2402625c
9001b900:	24026264 	.word	0x24026264
9001b904:	2402625e 	.word	0x2402625e
9001b908:	00fff800 	.word	0x00fff800
9001b90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b90e:	b153      	cbz	r3, 9001b926 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001b910:	441e      	add	r6, r3
9001b912:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b914:	b2b6      	uxth	r6, r6
9001b916:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001b91a:	f006 0607 	and.w	r6, r6, #7
9001b91e:	781a      	ldrb	r2, [r3, #0]
9001b920:	9328      	str	r3, [sp, #160]	; 0xa0
9001b922:	4132      	asrs	r2, r6
9001b924:	b2d2      	uxtb	r2, r2
9001b926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b928:	445b      	add	r3, fp
9001b92a:	930a      	str	r3, [sp, #40]	; 0x28
9001b92c:	e706      	b.n	9001b73c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001b92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b930:	2b00      	cmp	r3, #0
9001b932:	d1ce      	bne.n	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b934:	4b05      	ldr	r3, [pc, #20]	; (9001b94c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001b936:	6818      	ldr	r0, [r3, #0]
9001b938:	6803      	ldr	r3, [r0, #0]
9001b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b93c:	4798      	blx	r3
9001b93e:	e7c8      	b.n	9001b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b940:	2b00      	cmp	r3, #0
9001b942:	f43f ae82 	beq.w	9001b64a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b946:	f44f 7180 	mov.w	r1, #256	; 0x100
9001b94a:	e793      	b.n	9001b874 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001b94c:	24026264 	.word	0x24026264

9001b950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001b950:	b538      	push	{r3, r4, r5, lr}
9001b952:	4c15      	ldr	r4, [pc, #84]	; (9001b9a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001b954:	4605      	mov	r5, r0
9001b956:	7823      	ldrb	r3, [r4, #0]
9001b958:	f3bf 8f5b 	dmb	ish
9001b95c:	07da      	lsls	r2, r3, #31
9001b95e:	d40b      	bmi.n	9001b978 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b960:	4620      	mov	r0, r4
9001b962:	f007 fa68 	bl	90022e36 <__cxa_guard_acquire>
9001b966:	b138      	cbz	r0, 9001b978 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b968:	4620      	mov	r0, r4
9001b96a:	f007 fa70 	bl	90022e4e <__cxa_guard_release>
9001b96e:	4a0f      	ldr	r2, [pc, #60]	; (9001b9ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b970:	490f      	ldr	r1, [pc, #60]	; (9001b9b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001b972:	4810      	ldr	r0, [pc, #64]	; (9001b9b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b974:	f007 fa58 	bl	90022e28 <__aeabi_atexit>
9001b978:	4c0f      	ldr	r4, [pc, #60]	; (9001b9b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001b97a:	7823      	ldrb	r3, [r4, #0]
9001b97c:	f3bf 8f5b 	dmb	ish
9001b980:	07db      	lsls	r3, r3, #31
9001b982:	d40b      	bmi.n	9001b99c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b984:	4620      	mov	r0, r4
9001b986:	f007 fa56 	bl	90022e36 <__cxa_guard_acquire>
9001b98a:	b138      	cbz	r0, 9001b99c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b98c:	4620      	mov	r0, r4
9001b98e:	f007 fa5e 	bl	90022e4e <__cxa_guard_release>
9001b992:	4a06      	ldr	r2, [pc, #24]	; (9001b9ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b994:	4909      	ldr	r1, [pc, #36]	; (9001b9bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001b996:	480a      	ldr	r0, [pc, #40]	; (9001b9c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b998:	f007 fa46 	bl	90022e28 <__aeabi_atexit>
9001b99c:	4b05      	ldr	r3, [pc, #20]	; (9001b9b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b99e:	612b      	str	r3, [r5, #16]
9001b9a0:	4b07      	ldr	r3, [pc, #28]	; (9001b9c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b9a2:	616b      	str	r3, [r5, #20]
9001b9a4:	bd38      	pop	{r3, r4, r5, pc}
9001b9a6:	bf00      	nop
9001b9a8:	24026330 	.word	0x24026330
9001b9ac:	24000000 	.word	0x24000000
9001b9b0:	90019b5d 	.word	0x90019b5d
9001b9b4:	240000ac 	.word	0x240000ac
9001b9b8:	24026334 	.word	0x24026334
9001b9bc:	90019b5b 	.word	0x90019b5b
9001b9c0:	240000b0 	.word	0x240000b0

9001b9c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001b9c4:	b538      	push	{r3, r4, r5, lr}
9001b9c6:	4c15      	ldr	r4, [pc, #84]	; (9001ba1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001b9c8:	4605      	mov	r5, r0
9001b9ca:	7823      	ldrb	r3, [r4, #0]
9001b9cc:	f3bf 8f5b 	dmb	ish
9001b9d0:	07da      	lsls	r2, r3, #31
9001b9d2:	d40b      	bmi.n	9001b9ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b9d4:	4620      	mov	r0, r4
9001b9d6:	f007 fa2e 	bl	90022e36 <__cxa_guard_acquire>
9001b9da:	b138      	cbz	r0, 9001b9ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b9dc:	4620      	mov	r0, r4
9001b9de:	f007 fa36 	bl	90022e4e <__cxa_guard_release>
9001b9e2:	4a0f      	ldr	r2, [pc, #60]	; (9001ba20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b9e4:	490f      	ldr	r1, [pc, #60]	; (9001ba24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001b9e6:	4810      	ldr	r0, [pc, #64]	; (9001ba28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b9e8:	f007 fa1e 	bl	90022e28 <__aeabi_atexit>
9001b9ec:	4c0f      	ldr	r4, [pc, #60]	; (9001ba2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001b9ee:	7823      	ldrb	r3, [r4, #0]
9001b9f0:	f3bf 8f5b 	dmb	ish
9001b9f4:	07db      	lsls	r3, r3, #31
9001b9f6:	d40b      	bmi.n	9001ba10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b9f8:	4620      	mov	r0, r4
9001b9fa:	f007 fa1c 	bl	90022e36 <__cxa_guard_acquire>
9001b9fe:	b138      	cbz	r0, 9001ba10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001ba00:	4620      	mov	r0, r4
9001ba02:	f007 fa24 	bl	90022e4e <__cxa_guard_release>
9001ba06:	4a06      	ldr	r2, [pc, #24]	; (9001ba20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001ba08:	4909      	ldr	r1, [pc, #36]	; (9001ba30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001ba0a:	480a      	ldr	r0, [pc, #40]	; (9001ba34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001ba0c:	f007 fa0c 	bl	90022e28 <__aeabi_atexit>
9001ba10:	4b05      	ldr	r3, [pc, #20]	; (9001ba28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001ba12:	60ab      	str	r3, [r5, #8]
9001ba14:	4b07      	ldr	r3, [pc, #28]	; (9001ba34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001ba16:	60eb      	str	r3, [r5, #12]
9001ba18:	bd38      	pop	{r3, r4, r5, pc}
9001ba1a:	bf00      	nop
9001ba1c:	24026308 	.word	0x24026308
9001ba20:	24000000 	.word	0x24000000
9001ba24:	90019b61 	.word	0x90019b61
9001ba28:	24000084 	.word	0x24000084
9001ba2c:	2402630c 	.word	0x2402630c
9001ba30:	90019b5f 	.word	0x90019b5f
9001ba34:	24000088 	.word	0x24000088

9001ba38 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001ba38:	b510      	push	{r4, lr}
9001ba3a:	4604      	mov	r4, r0
9001ba3c:	f7ff ff88 	bl	9001b950 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001ba40:	4620      	mov	r0, r4
9001ba42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001ba46:	f7ff bfbd 	b.w	9001b9c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001ba4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001ba4c:	b538      	push	{r3, r4, r5, lr}
9001ba4e:	4c15      	ldr	r4, [pc, #84]	; (9001baa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001ba50:	4605      	mov	r5, r0
9001ba52:	7823      	ldrb	r3, [r4, #0]
9001ba54:	f3bf 8f5b 	dmb	ish
9001ba58:	07da      	lsls	r2, r3, #31
9001ba5a:	d40b      	bmi.n	9001ba74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba5c:	4620      	mov	r0, r4
9001ba5e:	f007 f9ea 	bl	90022e36 <__cxa_guard_acquire>
9001ba62:	b138      	cbz	r0, 9001ba74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001ba64:	4620      	mov	r0, r4
9001ba66:	f007 f9f2 	bl	90022e4e <__cxa_guard_release>
9001ba6a:	4a0f      	ldr	r2, [pc, #60]	; (9001baa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba6c:	490f      	ldr	r1, [pc, #60]	; (9001baac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001ba6e:	4810      	ldr	r0, [pc, #64]	; (9001bab0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba70:	f007 f9da 	bl	90022e28 <__aeabi_atexit>
9001ba74:	4c0f      	ldr	r4, [pc, #60]	; (9001bab4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001ba76:	7823      	ldrb	r3, [r4, #0]
9001ba78:	f3bf 8f5b 	dmb	ish
9001ba7c:	07db      	lsls	r3, r3, #31
9001ba7e:	d40b      	bmi.n	9001ba98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba80:	4620      	mov	r0, r4
9001ba82:	f007 f9d8 	bl	90022e36 <__cxa_guard_acquire>
9001ba86:	b138      	cbz	r0, 9001ba98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001ba88:	4620      	mov	r0, r4
9001ba8a:	f007 f9e0 	bl	90022e4e <__cxa_guard_release>
9001ba8e:	4a06      	ldr	r2, [pc, #24]	; (9001baa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001ba90:	4909      	ldr	r1, [pc, #36]	; (9001bab8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001ba92:	480a      	ldr	r0, [pc, #40]	; (9001babc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba94:	f007 f9c8 	bl	90022e28 <__aeabi_atexit>
9001ba98:	4b05      	ldr	r3, [pc, #20]	; (9001bab0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001ba9a:	622b      	str	r3, [r5, #32]
9001ba9c:	4b07      	ldr	r3, [pc, #28]	; (9001babc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001ba9e:	626b      	str	r3, [r5, #36]	; 0x24
9001baa0:	bd38      	pop	{r3, r4, r5, pc}
9001baa2:	bf00      	nop
9001baa4:	24026338 	.word	0x24026338
9001baa8:	24000000 	.word	0x24000000
9001baac:	90019b55 	.word	0x90019b55
9001bab0:	240000b4 	.word	0x240000b4
9001bab4:	2402633c 	.word	0x2402633c
9001bab8:	90019b53 	.word	0x90019b53
9001babc:	240000b8 	.word	0x240000b8

9001bac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001bac0:	b538      	push	{r3, r4, r5, lr}
9001bac2:	4c15      	ldr	r4, [pc, #84]	; (9001bb18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001bac4:	4605      	mov	r5, r0
9001bac6:	7823      	ldrb	r3, [r4, #0]
9001bac8:	f3bf 8f5b 	dmb	ish
9001bacc:	07da      	lsls	r2, r3, #31
9001bace:	d40b      	bmi.n	9001bae8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001bad0:	4620      	mov	r0, r4
9001bad2:	f007 f9b0 	bl	90022e36 <__cxa_guard_acquire>
9001bad6:	b138      	cbz	r0, 9001bae8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001bad8:	4620      	mov	r0, r4
9001bada:	f007 f9b8 	bl	90022e4e <__cxa_guard_release>
9001bade:	4a0f      	ldr	r2, [pc, #60]	; (9001bb1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001bae0:	490f      	ldr	r1, [pc, #60]	; (9001bb20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001bae2:	4810      	ldr	r0, [pc, #64]	; (9001bb24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001bae4:	f007 f9a0 	bl	90022e28 <__aeabi_atexit>
9001bae8:	4c0f      	ldr	r4, [pc, #60]	; (9001bb28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001baea:	7823      	ldrb	r3, [r4, #0]
9001baec:	f3bf 8f5b 	dmb	ish
9001baf0:	07db      	lsls	r3, r3, #31
9001baf2:	d40b      	bmi.n	9001bb0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001baf4:	4620      	mov	r0, r4
9001baf6:	f007 f99e 	bl	90022e36 <__cxa_guard_acquire>
9001bafa:	b138      	cbz	r0, 9001bb0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001bafc:	4620      	mov	r0, r4
9001bafe:	f007 f9a6 	bl	90022e4e <__cxa_guard_release>
9001bb02:	4a06      	ldr	r2, [pc, #24]	; (9001bb1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001bb04:	4909      	ldr	r1, [pc, #36]	; (9001bb2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001bb06:	480a      	ldr	r0, [pc, #40]	; (9001bb30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001bb08:	f007 f98e 	bl	90022e28 <__aeabi_atexit>
9001bb0c:	4b05      	ldr	r3, [pc, #20]	; (9001bb24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001bb0e:	61ab      	str	r3, [r5, #24]
9001bb10:	4b07      	ldr	r3, [pc, #28]	; (9001bb30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001bb12:	61eb      	str	r3, [r5, #28]
9001bb14:	bd38      	pop	{r3, r4, r5, pc}
9001bb16:	bf00      	nop
9001bb18:	24026310 	.word	0x24026310
9001bb1c:	24000000 	.word	0x24000000
9001bb20:	90019b59 	.word	0x90019b59
9001bb24:	2400008c 	.word	0x2400008c
9001bb28:	24026314 	.word	0x24026314
9001bb2c:	90019b57 	.word	0x90019b57
9001bb30:	24000090 	.word	0x24000090

9001bb34 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001bb34:	b510      	push	{r4, lr}
9001bb36:	4604      	mov	r4, r0
9001bb38:	f7ff ff88 	bl	9001ba4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001bb3c:	4620      	mov	r0, r4
9001bb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bb42:	f7ff bfbd 	b.w	9001bac0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001bb48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001bb48:	b538      	push	{r3, r4, r5, lr}
9001bb4a:	4c15      	ldr	r4, [pc, #84]	; (9001bba0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001bb4c:	4605      	mov	r5, r0
9001bb4e:	7823      	ldrb	r3, [r4, #0]
9001bb50:	f3bf 8f5b 	dmb	ish
9001bb54:	07da      	lsls	r2, r3, #31
9001bb56:	d40b      	bmi.n	9001bb70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb58:	4620      	mov	r0, r4
9001bb5a:	f007 f96c 	bl	90022e36 <__cxa_guard_acquire>
9001bb5e:	b138      	cbz	r0, 9001bb70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001bb60:	4620      	mov	r0, r4
9001bb62:	f007 f974 	bl	90022e4e <__cxa_guard_release>
9001bb66:	4a0f      	ldr	r2, [pc, #60]	; (9001bba4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb68:	490f      	ldr	r1, [pc, #60]	; (9001bba8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001bb6a:	4810      	ldr	r0, [pc, #64]	; (9001bbac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb6c:	f007 f95c 	bl	90022e28 <__aeabi_atexit>
9001bb70:	4c0f      	ldr	r4, [pc, #60]	; (9001bbb0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001bb72:	7823      	ldrb	r3, [r4, #0]
9001bb74:	f3bf 8f5b 	dmb	ish
9001bb78:	07db      	lsls	r3, r3, #31
9001bb7a:	d40b      	bmi.n	9001bb94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb7c:	4620      	mov	r0, r4
9001bb7e:	f007 f95a 	bl	90022e36 <__cxa_guard_acquire>
9001bb82:	b138      	cbz	r0, 9001bb94 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001bb84:	4620      	mov	r0, r4
9001bb86:	f007 f962 	bl	90022e4e <__cxa_guard_release>
9001bb8a:	4a06      	ldr	r2, [pc, #24]	; (9001bba4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001bb8c:	4909      	ldr	r1, [pc, #36]	; (9001bbb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001bb8e:	480a      	ldr	r0, [pc, #40]	; (9001bbb8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb90:	f007 f94a 	bl	90022e28 <__aeabi_atexit>
9001bb94:	4b05      	ldr	r3, [pc, #20]	; (9001bbac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001bb96:	632b      	str	r3, [r5, #48]	; 0x30
9001bb98:	4b07      	ldr	r3, [pc, #28]	; (9001bbb8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001bb9a:	636b      	str	r3, [r5, #52]	; 0x34
9001bb9c:	bd38      	pop	{r3, r4, r5, pc}
9001bb9e:	bf00      	nop
9001bba0:	24026348 	.word	0x24026348
9001bba4:	24000000 	.word	0x24000000
9001bba8:	90019b4d 	.word	0x90019b4d
9001bbac:	240000c4 	.word	0x240000c4
9001bbb0:	2402634c 	.word	0x2402634c
9001bbb4:	90019b4b 	.word	0x90019b4b
9001bbb8:	240000c8 	.word	0x240000c8

9001bbbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001bbbc:	b538      	push	{r3, r4, r5, lr}
9001bbbe:	4c15      	ldr	r4, [pc, #84]	; (9001bc14 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001bbc0:	4605      	mov	r5, r0
9001bbc2:	7823      	ldrb	r3, [r4, #0]
9001bbc4:	f3bf 8f5b 	dmb	ish
9001bbc8:	07da      	lsls	r2, r3, #31
9001bbca:	d40b      	bmi.n	9001bbe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bbcc:	4620      	mov	r0, r4
9001bbce:	f007 f932 	bl	90022e36 <__cxa_guard_acquire>
9001bbd2:	b138      	cbz	r0, 9001bbe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001bbd4:	4620      	mov	r0, r4
9001bbd6:	f007 f93a 	bl	90022e4e <__cxa_guard_release>
9001bbda:	4a0f      	ldr	r2, [pc, #60]	; (9001bc18 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bbdc:	490f      	ldr	r1, [pc, #60]	; (9001bc1c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001bbde:	4810      	ldr	r0, [pc, #64]	; (9001bc20 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bbe0:	f007 f922 	bl	90022e28 <__aeabi_atexit>
9001bbe4:	4c0f      	ldr	r4, [pc, #60]	; (9001bc24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001bbe6:	7823      	ldrb	r3, [r4, #0]
9001bbe8:	f3bf 8f5b 	dmb	ish
9001bbec:	07db      	lsls	r3, r3, #31
9001bbee:	d40b      	bmi.n	9001bc08 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bbf0:	4620      	mov	r0, r4
9001bbf2:	f007 f920 	bl	90022e36 <__cxa_guard_acquire>
9001bbf6:	b138      	cbz	r0, 9001bc08 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001bbf8:	4620      	mov	r0, r4
9001bbfa:	f007 f928 	bl	90022e4e <__cxa_guard_release>
9001bbfe:	4a06      	ldr	r2, [pc, #24]	; (9001bc18 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001bc00:	4909      	ldr	r1, [pc, #36]	; (9001bc28 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001bc02:	480a      	ldr	r0, [pc, #40]	; (9001bc2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bc04:	f007 f910 	bl	90022e28 <__aeabi_atexit>
9001bc08:	4b05      	ldr	r3, [pc, #20]	; (9001bc20 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001bc0a:	62ab      	str	r3, [r5, #40]	; 0x28
9001bc0c:	4b07      	ldr	r3, [pc, #28]	; (9001bc2c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001bc0e:	62eb      	str	r3, [r5, #44]	; 0x2c
9001bc10:	bd38      	pop	{r3, r4, r5, pc}
9001bc12:	bf00      	nop
9001bc14:	24026318 	.word	0x24026318
9001bc18:	24000000 	.word	0x24000000
9001bc1c:	90019b51 	.word	0x90019b51
9001bc20:	24000094 	.word	0x24000094
9001bc24:	2402631c 	.word	0x2402631c
9001bc28:	90019b4f 	.word	0x90019b4f
9001bc2c:	24000098 	.word	0x24000098

9001bc30 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001bc30:	b510      	push	{r4, lr}
9001bc32:	4604      	mov	r4, r0
9001bc34:	f7ff ff88 	bl	9001bb48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001bc38:	4620      	mov	r0, r4
9001bc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bc3e:	f7ff bfbd 	b.w	9001bbbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001bc44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001bc44:	b538      	push	{r3, r4, r5, lr}
9001bc46:	4c15      	ldr	r4, [pc, #84]	; (9001bc9c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001bc48:	4605      	mov	r5, r0
9001bc4a:	7823      	ldrb	r3, [r4, #0]
9001bc4c:	f3bf 8f5b 	dmb	ish
9001bc50:	07da      	lsls	r2, r3, #31
9001bc52:	d40b      	bmi.n	9001bc6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc54:	4620      	mov	r0, r4
9001bc56:	f007 f8ee 	bl	90022e36 <__cxa_guard_acquire>
9001bc5a:	b138      	cbz	r0, 9001bc6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bc5c:	4620      	mov	r0, r4
9001bc5e:	f007 f8f6 	bl	90022e4e <__cxa_guard_release>
9001bc62:	4a0f      	ldr	r2, [pc, #60]	; (9001bca0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc64:	490f      	ldr	r1, [pc, #60]	; (9001bca4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001bc66:	4810      	ldr	r0, [pc, #64]	; (9001bca8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc68:	f007 f8de 	bl	90022e28 <__aeabi_atexit>
9001bc6c:	4c0f      	ldr	r4, [pc, #60]	; (9001bcac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001bc6e:	7823      	ldrb	r3, [r4, #0]
9001bc70:	f3bf 8f5b 	dmb	ish
9001bc74:	07db      	lsls	r3, r3, #31
9001bc76:	d40b      	bmi.n	9001bc90 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc78:	4620      	mov	r0, r4
9001bc7a:	f007 f8dc 	bl	90022e36 <__cxa_guard_acquire>
9001bc7e:	b138      	cbz	r0, 9001bc90 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bc80:	4620      	mov	r0, r4
9001bc82:	f007 f8e4 	bl	90022e4e <__cxa_guard_release>
9001bc86:	4a06      	ldr	r2, [pc, #24]	; (9001bca0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bc88:	4909      	ldr	r1, [pc, #36]	; (9001bcb0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001bc8a:	480a      	ldr	r0, [pc, #40]	; (9001bcb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc8c:	f007 f8cc 	bl	90022e28 <__aeabi_atexit>
9001bc90:	4b05      	ldr	r3, [pc, #20]	; (9001bca8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bc92:	652b      	str	r3, [r5, #80]	; 0x50
9001bc94:	4b07      	ldr	r3, [pc, #28]	; (9001bcb4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bc96:	656b      	str	r3, [r5, #84]	; 0x54
9001bc98:	bd38      	pop	{r3, r4, r5, pc}
9001bc9a:	bf00      	nop
9001bc9c:	24026350 	.word	0x24026350
9001bca0:	24000000 	.word	0x24000000
9001bca4:	90019b3d 	.word	0x90019b3d
9001bca8:	240000cc 	.word	0x240000cc
9001bcac:	24026354 	.word	0x24026354
9001bcb0:	90019b3b 	.word	0x90019b3b
9001bcb4:	240000d0 	.word	0x240000d0

9001bcb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001bcb8:	b538      	push	{r3, r4, r5, lr}
9001bcba:	4c15      	ldr	r4, [pc, #84]	; (9001bd10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001bcbc:	4605      	mov	r5, r0
9001bcbe:	7823      	ldrb	r3, [r4, #0]
9001bcc0:	f3bf 8f5b 	dmb	ish
9001bcc4:	07da      	lsls	r2, r3, #31
9001bcc6:	d40b      	bmi.n	9001bce0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bcc8:	4620      	mov	r0, r4
9001bcca:	f007 f8b4 	bl	90022e36 <__cxa_guard_acquire>
9001bcce:	b138      	cbz	r0, 9001bce0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bcd0:	4620      	mov	r0, r4
9001bcd2:	f007 f8bc 	bl	90022e4e <__cxa_guard_release>
9001bcd6:	4a0f      	ldr	r2, [pc, #60]	; (9001bd14 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bcd8:	490f      	ldr	r1, [pc, #60]	; (9001bd18 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001bcda:	4810      	ldr	r0, [pc, #64]	; (9001bd1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bcdc:	f007 f8a4 	bl	90022e28 <__aeabi_atexit>
9001bce0:	4c0f      	ldr	r4, [pc, #60]	; (9001bd20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001bce2:	7823      	ldrb	r3, [r4, #0]
9001bce4:	f3bf 8f5b 	dmb	ish
9001bce8:	07db      	lsls	r3, r3, #31
9001bcea:	d40b      	bmi.n	9001bd04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bcec:	4620      	mov	r0, r4
9001bcee:	f007 f8a2 	bl	90022e36 <__cxa_guard_acquire>
9001bcf2:	b138      	cbz	r0, 9001bd04 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bcf4:	4620      	mov	r0, r4
9001bcf6:	f007 f8aa 	bl	90022e4e <__cxa_guard_release>
9001bcfa:	4a06      	ldr	r2, [pc, #24]	; (9001bd14 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bcfc:	4909      	ldr	r1, [pc, #36]	; (9001bd24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001bcfe:	480a      	ldr	r0, [pc, #40]	; (9001bd28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bd00:	f007 f892 	bl	90022e28 <__aeabi_atexit>
9001bd04:	4b05      	ldr	r3, [pc, #20]	; (9001bd1c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bd06:	64ab      	str	r3, [r5, #72]	; 0x48
9001bd08:	4b07      	ldr	r3, [pc, #28]	; (9001bd28 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bd0a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001bd0c:	bd38      	pop	{r3, r4, r5, pc}
9001bd0e:	bf00      	nop
9001bd10:	24026358 	.word	0x24026358
9001bd14:	24000000 	.word	0x24000000
9001bd18:	90019b41 	.word	0x90019b41
9001bd1c:	240000d4 	.word	0x240000d4
9001bd20:	2402635c 	.word	0x2402635c
9001bd24:	90019b3f 	.word	0x90019b3f
9001bd28:	240000d8 	.word	0x240000d8

9001bd2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001bd2c:	b538      	push	{r3, r4, r5, lr}
9001bd2e:	4c15      	ldr	r4, [pc, #84]	; (9001bd84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001bd30:	4605      	mov	r5, r0
9001bd32:	7823      	ldrb	r3, [r4, #0]
9001bd34:	f3bf 8f5b 	dmb	ish
9001bd38:	07da      	lsls	r2, r3, #31
9001bd3a:	d40b      	bmi.n	9001bd54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bd3c:	4620      	mov	r0, r4
9001bd3e:	f007 f87a 	bl	90022e36 <__cxa_guard_acquire>
9001bd42:	b138      	cbz	r0, 9001bd54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bd44:	4620      	mov	r0, r4
9001bd46:	f007 f882 	bl	90022e4e <__cxa_guard_release>
9001bd4a:	4a0f      	ldr	r2, [pc, #60]	; (9001bd88 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bd4c:	490f      	ldr	r1, [pc, #60]	; (9001bd8c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001bd4e:	4810      	ldr	r0, [pc, #64]	; (9001bd90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd50:	f007 f86a 	bl	90022e28 <__aeabi_atexit>
9001bd54:	4c0f      	ldr	r4, [pc, #60]	; (9001bd94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001bd56:	7823      	ldrb	r3, [r4, #0]
9001bd58:	f3bf 8f5b 	dmb	ish
9001bd5c:	07db      	lsls	r3, r3, #31
9001bd5e:	d40b      	bmi.n	9001bd78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd60:	4620      	mov	r0, r4
9001bd62:	f007 f868 	bl	90022e36 <__cxa_guard_acquire>
9001bd66:	b138      	cbz	r0, 9001bd78 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bd68:	4620      	mov	r0, r4
9001bd6a:	f007 f870 	bl	90022e4e <__cxa_guard_release>
9001bd6e:	4a06      	ldr	r2, [pc, #24]	; (9001bd88 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bd70:	4909      	ldr	r1, [pc, #36]	; (9001bd98 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001bd72:	480a      	ldr	r0, [pc, #40]	; (9001bd9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd74:	f007 f858 	bl	90022e28 <__aeabi_atexit>
9001bd78:	4b05      	ldr	r3, [pc, #20]	; (9001bd90 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bd7a:	642b      	str	r3, [r5, #64]	; 0x40
9001bd7c:	4b07      	ldr	r3, [pc, #28]	; (9001bd9c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bd7e:	646b      	str	r3, [r5, #68]	; 0x44
9001bd80:	bd38      	pop	{r3, r4, r5, pc}
9001bd82:	bf00      	nop
9001bd84:	24026320 	.word	0x24026320
9001bd88:	24000000 	.word	0x24000000
9001bd8c:	90019b45 	.word	0x90019b45
9001bd90:	2400009c 	.word	0x2400009c
9001bd94:	24026324 	.word	0x24026324
9001bd98:	90019b43 	.word	0x90019b43
9001bd9c:	240000a0 	.word	0x240000a0

9001bda0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001bda0:	b538      	push	{r3, r4, r5, lr}
9001bda2:	4c15      	ldr	r4, [pc, #84]	; (9001bdf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001bda4:	4605      	mov	r5, r0
9001bda6:	7823      	ldrb	r3, [r4, #0]
9001bda8:	f3bf 8f5b 	dmb	ish
9001bdac:	07da      	lsls	r2, r3, #31
9001bdae:	d40b      	bmi.n	9001bdc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bdb0:	4620      	mov	r0, r4
9001bdb2:	f007 f840 	bl	90022e36 <__cxa_guard_acquire>
9001bdb6:	b138      	cbz	r0, 9001bdc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bdb8:	4620      	mov	r0, r4
9001bdba:	f007 f848 	bl	90022e4e <__cxa_guard_release>
9001bdbe:	4a0f      	ldr	r2, [pc, #60]	; (9001bdfc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bdc0:	490f      	ldr	r1, [pc, #60]	; (9001be00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001bdc2:	4810      	ldr	r0, [pc, #64]	; (9001be04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bdc4:	f007 f830 	bl	90022e28 <__aeabi_atexit>
9001bdc8:	4c0f      	ldr	r4, [pc, #60]	; (9001be08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001bdca:	7823      	ldrb	r3, [r4, #0]
9001bdcc:	f3bf 8f5b 	dmb	ish
9001bdd0:	07db      	lsls	r3, r3, #31
9001bdd2:	d40b      	bmi.n	9001bdec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bdd4:	4620      	mov	r0, r4
9001bdd6:	f007 f82e 	bl	90022e36 <__cxa_guard_acquire>
9001bdda:	b138      	cbz	r0, 9001bdec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bddc:	4620      	mov	r0, r4
9001bdde:	f007 f836 	bl	90022e4e <__cxa_guard_release>
9001bde2:	4a06      	ldr	r2, [pc, #24]	; (9001bdfc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bde4:	4909      	ldr	r1, [pc, #36]	; (9001be0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001bde6:	480a      	ldr	r0, [pc, #40]	; (9001be10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bde8:	f007 f81e 	bl	90022e28 <__aeabi_atexit>
9001bdec:	4b05      	ldr	r3, [pc, #20]	; (9001be04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bdee:	63ab      	str	r3, [r5, #56]	; 0x38
9001bdf0:	4b07      	ldr	r3, [pc, #28]	; (9001be10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bdf2:	63eb      	str	r3, [r5, #60]	; 0x3c
9001bdf4:	bd38      	pop	{r3, r4, r5, pc}
9001bdf6:	bf00      	nop
9001bdf8:	24026340 	.word	0x24026340
9001bdfc:	24000000 	.word	0x24000000
9001be00:	90019b49 	.word	0x90019b49
9001be04:	240000bc 	.word	0x240000bc
9001be08:	24026344 	.word	0x24026344
9001be0c:	90019b47 	.word	0x90019b47
9001be10:	240000c0 	.word	0x240000c0

9001be14 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001be14:	b510      	push	{r4, lr}
9001be16:	4604      	mov	r4, r0
9001be18:	f7ff ff14 	bl	9001bc44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001be1c:	4620      	mov	r0, r4
9001be1e:	f7ff ff85 	bl	9001bd2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001be22:	4620      	mov	r0, r4
9001be24:	f7ff ff48 	bl	9001bcb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001be28:	4620      	mov	r0, r4
9001be2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001be2e:	f7ff bfb7 	b.w	9001bda0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001be34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001be34:	b538      	push	{r3, r4, r5, lr}
9001be36:	4c15      	ldr	r4, [pc, #84]	; (9001be8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001be38:	4605      	mov	r5, r0
9001be3a:	7823      	ldrb	r3, [r4, #0]
9001be3c:	f3bf 8f5b 	dmb	ish
9001be40:	07da      	lsls	r2, r3, #31
9001be42:	d40b      	bmi.n	9001be5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001be44:	4620      	mov	r0, r4
9001be46:	f006 fff6 	bl	90022e36 <__cxa_guard_acquire>
9001be4a:	b138      	cbz	r0, 9001be5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001be4c:	4620      	mov	r0, r4
9001be4e:	f006 fffe 	bl	90022e4e <__cxa_guard_release>
9001be52:	4a0f      	ldr	r2, [pc, #60]	; (9001be90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be54:	490f      	ldr	r1, [pc, #60]	; (9001be94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001be56:	4810      	ldr	r0, [pc, #64]	; (9001be98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be58:	f006 ffe6 	bl	90022e28 <__aeabi_atexit>
9001be5c:	4c0f      	ldr	r4, [pc, #60]	; (9001be9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001be5e:	7823      	ldrb	r3, [r4, #0]
9001be60:	f3bf 8f5b 	dmb	ish
9001be64:	07db      	lsls	r3, r3, #31
9001be66:	d40b      	bmi.n	9001be80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be68:	4620      	mov	r0, r4
9001be6a:	f006 ffe4 	bl	90022e36 <__cxa_guard_acquire>
9001be6e:	b138      	cbz	r0, 9001be80 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001be70:	4620      	mov	r0, r4
9001be72:	f006 ffec 	bl	90022e4e <__cxa_guard_release>
9001be76:	4a06      	ldr	r2, [pc, #24]	; (9001be90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001be78:	4909      	ldr	r1, [pc, #36]	; (9001bea0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001be7a:	480a      	ldr	r0, [pc, #40]	; (9001bea4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be7c:	f006 ffd4 	bl	90022e28 <__aeabi_atexit>
9001be80:	4b05      	ldr	r3, [pc, #20]	; (9001be98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001be82:	662b      	str	r3, [r5, #96]	; 0x60
9001be84:	4b07      	ldr	r3, [pc, #28]	; (9001bea4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001be86:	666b      	str	r3, [r5, #100]	; 0x64
9001be88:	bd38      	pop	{r3, r4, r5, pc}
9001be8a:	bf00      	nop
9001be8c:	24026328 	.word	0x24026328
9001be90:	24000000 	.word	0x24000000
9001be94:	90019b35 	.word	0x90019b35
9001be98:	240000a4 	.word	0x240000a4
9001be9c:	2402632c 	.word	0x2402632c
9001bea0:	90019b33 	.word	0x90019b33
9001bea4:	240000a8 	.word	0x240000a8

9001bea8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001bea8:	b538      	push	{r3, r4, r5, lr}
9001beaa:	4c15      	ldr	r4, [pc, #84]	; (9001bf00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001beac:	4605      	mov	r5, r0
9001beae:	7823      	ldrb	r3, [r4, #0]
9001beb0:	f3bf 8f5b 	dmb	ish
9001beb4:	07da      	lsls	r2, r3, #31
9001beb6:	d40b      	bmi.n	9001bed0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001beb8:	4620      	mov	r0, r4
9001beba:	f006 ffbc 	bl	90022e36 <__cxa_guard_acquire>
9001bebe:	b138      	cbz	r0, 9001bed0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bec0:	4620      	mov	r0, r4
9001bec2:	f006 ffc4 	bl	90022e4e <__cxa_guard_release>
9001bec6:	4a0f      	ldr	r2, [pc, #60]	; (9001bf04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bec8:	490f      	ldr	r1, [pc, #60]	; (9001bf08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001beca:	4810      	ldr	r0, [pc, #64]	; (9001bf0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001becc:	f006 ffac 	bl	90022e28 <__aeabi_atexit>
9001bed0:	4c0f      	ldr	r4, [pc, #60]	; (9001bf10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001bed2:	7823      	ldrb	r3, [r4, #0]
9001bed4:	f3bf 8f5b 	dmb	ish
9001bed8:	07db      	lsls	r3, r3, #31
9001beda:	d40b      	bmi.n	9001bef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bedc:	4620      	mov	r0, r4
9001bede:	f006 ffaa 	bl	90022e36 <__cxa_guard_acquire>
9001bee2:	b138      	cbz	r0, 9001bef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bee4:	4620      	mov	r0, r4
9001bee6:	f006 ffb2 	bl	90022e4e <__cxa_guard_release>
9001beea:	4a06      	ldr	r2, [pc, #24]	; (9001bf04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001beec:	4909      	ldr	r1, [pc, #36]	; (9001bf14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001beee:	480a      	ldr	r0, [pc, #40]	; (9001bf18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bef0:	f006 ff9a 	bl	90022e28 <__aeabi_atexit>
9001bef4:	4b05      	ldr	r3, [pc, #20]	; (9001bf0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bef6:	65ab      	str	r3, [r5, #88]	; 0x58
9001bef8:	4b07      	ldr	r3, [pc, #28]	; (9001bf18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001befa:	65eb      	str	r3, [r5, #92]	; 0x5c
9001befc:	bd38      	pop	{r3, r4, r5, pc}
9001befe:	bf00      	nop
9001bf00:	24026300 	.word	0x24026300
9001bf04:	24000000 	.word	0x24000000
9001bf08:	90019b39 	.word	0x90019b39
9001bf0c:	2400007c 	.word	0x2400007c
9001bf10:	24026304 	.word	0x24026304
9001bf14:	90019b37 	.word	0x90019b37
9001bf18:	24000080 	.word	0x24000080

9001bf1c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001bf1c:	b510      	push	{r4, lr}
9001bf1e:	4604      	mov	r4, r0
9001bf20:	f7ff ff88 	bl	9001be34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001bf24:	4620      	mov	r0, r4
9001bf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bf2a:	f7ff bfbd 	b.w	9001bea8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001bf30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001bf30:	b538      	push	{r3, r4, r5, lr}
9001bf32:	4c15      	ldr	r4, [pc, #84]	; (9001bf88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001bf34:	4605      	mov	r5, r0
9001bf36:	7823      	ldrb	r3, [r4, #0]
9001bf38:	f3bf 8f5b 	dmb	ish
9001bf3c:	07da      	lsls	r2, r3, #31
9001bf3e:	d40b      	bmi.n	9001bf58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bf40:	4620      	mov	r0, r4
9001bf42:	f006 ff78 	bl	90022e36 <__cxa_guard_acquire>
9001bf46:	b138      	cbz	r0, 9001bf58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bf48:	4620      	mov	r0, r4
9001bf4a:	f006 ff80 	bl	90022e4e <__cxa_guard_release>
9001bf4e:	4a0f      	ldr	r2, [pc, #60]	; (9001bf8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf50:	490f      	ldr	r1, [pc, #60]	; (9001bf90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001bf52:	4810      	ldr	r0, [pc, #64]	; (9001bf94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf54:	f006 ff68 	bl	90022e28 <__aeabi_atexit>
9001bf58:	4c0f      	ldr	r4, [pc, #60]	; (9001bf98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001bf5a:	7823      	ldrb	r3, [r4, #0]
9001bf5c:	f3bf 8f5b 	dmb	ish
9001bf60:	07db      	lsls	r3, r3, #31
9001bf62:	d40b      	bmi.n	9001bf7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf64:	4620      	mov	r0, r4
9001bf66:	f006 ff66 	bl	90022e36 <__cxa_guard_acquire>
9001bf6a:	b138      	cbz	r0, 9001bf7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bf6c:	4620      	mov	r0, r4
9001bf6e:	f006 ff6e 	bl	90022e4e <__cxa_guard_release>
9001bf72:	4a06      	ldr	r2, [pc, #24]	; (9001bf8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bf74:	4909      	ldr	r1, [pc, #36]	; (9001bf9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001bf76:	480a      	ldr	r0, [pc, #40]	; (9001bfa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf78:	f006 ff56 	bl	90022e28 <__aeabi_atexit>
9001bf7c:	4b05      	ldr	r3, [pc, #20]	; (9001bf94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bf7e:	672b      	str	r3, [r5, #112]	; 0x70
9001bf80:	4b07      	ldr	r3, [pc, #28]	; (9001bfa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001bf82:	676b      	str	r3, [r5, #116]	; 0x74
9001bf84:	bd38      	pop	{r3, r4, r5, pc}
9001bf86:	bf00      	nop
9001bf88:	240262f8 	.word	0x240262f8
9001bf8c:	24000000 	.word	0x24000000
9001bf90:	90019b2d 	.word	0x90019b2d
9001bf94:	24000074 	.word	0x24000074
9001bf98:	240262fc 	.word	0x240262fc
9001bf9c:	90019b2b 	.word	0x90019b2b
9001bfa0:	24000078 	.word	0x24000078

9001bfa4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001bfa4:	b538      	push	{r3, r4, r5, lr}
9001bfa6:	4c15      	ldr	r4, [pc, #84]	; (9001bffc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001bfa8:	4605      	mov	r5, r0
9001bfaa:	7823      	ldrb	r3, [r4, #0]
9001bfac:	f3bf 8f5b 	dmb	ish
9001bfb0:	07da      	lsls	r2, r3, #31
9001bfb2:	d40b      	bmi.n	9001bfcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bfb4:	4620      	mov	r0, r4
9001bfb6:	f006 ff3e 	bl	90022e36 <__cxa_guard_acquire>
9001bfba:	b138      	cbz	r0, 9001bfcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001bfbc:	4620      	mov	r0, r4
9001bfbe:	f006 ff46 	bl	90022e4e <__cxa_guard_release>
9001bfc2:	4a0f      	ldr	r2, [pc, #60]	; (9001c000 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bfc4:	490f      	ldr	r1, [pc, #60]	; (9001c004 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001bfc6:	4810      	ldr	r0, [pc, #64]	; (9001c008 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bfc8:	f006 ff2e 	bl	90022e28 <__aeabi_atexit>
9001bfcc:	4c0f      	ldr	r4, [pc, #60]	; (9001c00c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001bfce:	7823      	ldrb	r3, [r4, #0]
9001bfd0:	f3bf 8f5b 	dmb	ish
9001bfd4:	07db      	lsls	r3, r3, #31
9001bfd6:	d40b      	bmi.n	9001bff0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bfd8:	4620      	mov	r0, r4
9001bfda:	f006 ff2c 	bl	90022e36 <__cxa_guard_acquire>
9001bfde:	b138      	cbz	r0, 9001bff0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001bfe0:	4620      	mov	r0, r4
9001bfe2:	f006 ff34 	bl	90022e4e <__cxa_guard_release>
9001bfe6:	4a06      	ldr	r2, [pc, #24]	; (9001c000 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001bfe8:	4909      	ldr	r1, [pc, #36]	; (9001c010 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001bfea:	480a      	ldr	r0, [pc, #40]	; (9001c014 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bfec:	f006 ff1c 	bl	90022e28 <__aeabi_atexit>
9001bff0:	4b05      	ldr	r3, [pc, #20]	; (9001c008 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001bff2:	66ab      	str	r3, [r5, #104]	; 0x68
9001bff4:	4b07      	ldr	r3, [pc, #28]	; (9001c014 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001bff6:	66eb      	str	r3, [r5, #108]	; 0x6c
9001bff8:	bd38      	pop	{r3, r4, r5, pc}
9001bffa:	bf00      	nop
9001bffc:	240262f0 	.word	0x240262f0
9001c000:	24000000 	.word	0x24000000
9001c004:	90019b31 	.word	0x90019b31
9001c008:	2400006c 	.word	0x2400006c
9001c00c:	240262f4 	.word	0x240262f4
9001c010:	90019b2f 	.word	0x90019b2f
9001c014:	24000070 	.word	0x24000070

9001c018 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001c018:	b510      	push	{r4, lr}
9001c01a:	4604      	mov	r4, r0
9001c01c:	f7ff ff88 	bl	9001bf30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001c020:	4620      	mov	r0, r4
9001c022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c026:	f7ff bfbd 	b.w	9001bfa4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001c02a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001c02a:	b510      	push	{r4, lr}
9001c02c:	4604      	mov	r4, r0
9001c02e:	f7ff fff3 	bl	9001c018 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001c032:	4620      	mov	r0, r4
9001c034:	f7ff ff72 	bl	9001bf1c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001c038:	4620      	mov	r0, r4
9001c03a:	f7ff fdf9 	bl	9001bc30 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001c03e:	4620      	mov	r0, r4
9001c040:	f7ff fcfa 	bl	9001ba38 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001c044:	4620      	mov	r0, r4
9001c046:	f7ff fd75 	bl	9001bb34 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001c04a:	4620      	mov	r0, r4
9001c04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c050:	f7ff bee0 	b.w	9001be14 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001c054 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c058:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001c05c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001c060:	2d00      	cmp	r5, #0
9001c062:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001c066:	fb05 4c0e 	mla	ip, r5, lr, r4
9001c06a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001c06e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001c072:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001c076:	eb02 0a0c 	add.w	sl, r2, ip
9001c07a:	8808      	ldrh	r0, [r1, #0]
9001c07c:	f2c0 80b0 	blt.w	9001c1e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c080:	45ab      	cmp	fp, r5
9001c082:	f340 80ad 	ble.w	9001c1e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c086:	2c00      	cmp	r4, #0
9001c088:	f2c0 80a8 	blt.w	9001c1dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c08c:	45a6      	cmp	lr, r4
9001c08e:	f340 80a5 	ble.w	9001c1dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c092:	f812 200c 	ldrb.w	r2, [r2, ip]
9001c096:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001c09a:	1c62      	adds	r2, r4, #1
9001c09c:	f100 80a3 	bmi.w	9001c1e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c0a0:	4596      	cmp	lr, r2
9001c0a2:	f340 80a0 	ble.w	9001c1e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c0a6:	f1b9 0f00 	cmp.w	r9, #0
9001c0aa:	f000 809c 	beq.w	9001c1e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c0ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c0b2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c0b6:	3501      	adds	r5, #1
9001c0b8:	f100 8099 	bmi.w	9001c1ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c0bc:	45ab      	cmp	fp, r5
9001c0be:	f340 8096 	ble.w	9001c1ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c0c2:	2f00      	cmp	r7, #0
9001c0c4:	f000 8093 	beq.w	9001c1ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c0c8:	2c00      	cmp	r4, #0
9001c0ca:	f2c0 808e 	blt.w	9001c1ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c0ce:	45a6      	cmp	lr, r4
9001c0d0:	f340 808b 	ble.w	9001c1ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c0d4:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001c0d8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001c0dc:	3401      	adds	r4, #1
9001c0de:	f100 8089 	bmi.w	9001c1f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c0e2:	45a6      	cmp	lr, r4
9001c0e4:	f340 8086 	ble.w	9001c1f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c0e8:	f1b9 0f00 	cmp.w	r9, #0
9001c0ec:	f000 8082 	beq.w	9001c1f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c0f0:	44d6      	add	lr, sl
9001c0f2:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c0f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001c0fa:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001c0fe:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001c102:	fb19 fe07 	smulbb	lr, r9, r7
9001c106:	f1c7 0210 	rsb	r2, r7, #16
9001c10a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c10e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001c112:	eba2 0209 	sub.w	r2, r2, r9
9001c116:	ea44 0808 	orr.w	r8, r4, r8
9001c11a:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001c11e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c122:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001c126:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c12a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001c12e:	ea44 0c0c 	orr.w	ip, r4, ip
9001c132:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001c136:	fb04 f40c 	mul.w	r4, r4, ip
9001c13a:	fb02 4808 	mla	r8, r2, r8, r4
9001c13e:	041a      	lsls	r2, r3, #16
9001c140:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c144:	b2b4      	uxth	r4, r6
9001c146:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c14a:	43f6      	mvns	r6, r6
9001c14c:	4313      	orrs	r3, r2
9001c14e:	042a      	lsls	r2, r5, #16
9001c150:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c154:	b2f6      	uxtb	r6, r6
9001c156:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c15a:	fb0e 8303 	mla	r3, lr, r3, r8
9001c15e:	432a      	orrs	r2, r5
9001c160:	fb07 3202 	mla	r2, r7, r2, r3
9001c164:	10c7      	asrs	r7, r0, #3
9001c166:	0d53      	lsrs	r3, r2, #21
9001c168:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c16c:	0952      	lsrs	r2, r2, #5
9001c16e:	fb17 f706 	smulbb	r7, r7, r6
9001c172:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c176:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c17a:	431a      	orrs	r2, r3
9001c17c:	b293      	uxth	r3, r2
9001c17e:	1202      	asrs	r2, r0, #8
9001c180:	121d      	asrs	r5, r3, #8
9001c182:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c186:	00c0      	lsls	r0, r0, #3
9001c188:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c18c:	fb12 f206 	smulbb	r2, r2, r6
9001c190:	b2c0      	uxtb	r0, r0
9001c192:	fb05 2504 	mla	r5, r5, r4, r2
9001c196:	10da      	asrs	r2, r3, #3
9001c198:	fb10 f006 	smulbb	r0, r0, r6
9001c19c:	00db      	lsls	r3, r3, #3
9001c19e:	b2ad      	uxth	r5, r5
9001c1a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c1a4:	b2db      	uxtb	r3, r3
9001c1a6:	fb02 7204 	mla	r2, r2, r4, r7
9001c1aa:	fb03 0004 	mla	r0, r3, r4, r0
9001c1ae:	1c6b      	adds	r3, r5, #1
9001c1b0:	b292      	uxth	r2, r2
9001c1b2:	b280      	uxth	r0, r0
9001c1b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c1b8:	1c43      	adds	r3, r0, #1
9001c1ba:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c1be:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c1c2:	1c50      	adds	r0, r2, #1
9001c1c4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001c1c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c1cc:	0952      	lsrs	r2, r2, #5
9001c1ce:	432b      	orrs	r3, r5
9001c1d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c1d4:	4313      	orrs	r3, r2
9001c1d6:	800b      	strh	r3, [r1, #0]
9001c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c1dc:	4680      	mov	r8, r0
9001c1de:	e75c      	b.n	9001c09a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001c1e0:	4684      	mov	ip, r0
9001c1e2:	4680      	mov	r8, r0
9001c1e4:	e767      	b.n	9001c0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c1e6:	4684      	mov	ip, r0
9001c1e8:	e765      	b.n	9001c0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c1ea:	4605      	mov	r5, r0
9001c1ec:	e776      	b.n	9001c0dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001c1ee:	4603      	mov	r3, r0
9001c1f0:	4605      	mov	r5, r0
9001c1f2:	e782      	b.n	9001c0fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001c1f4:	4603      	mov	r3, r0
9001c1f6:	e780      	b.n	9001c0fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001c1f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c1fc:	b099      	sub	sp, #100	; 0x64
9001c1fe:	9215      	str	r2, [sp, #84]	; 0x54
9001c200:	9309      	str	r3, [sp, #36]	; 0x24
9001c202:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001c204:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001c208:	9016      	str	r0, [sp, #88]	; 0x58
9001c20a:	930d      	str	r3, [sp, #52]	; 0x34
9001c20c:	6850      	ldr	r0, [r2, #4]
9001c20e:	910c      	str	r1, [sp, #48]	; 0x30
9001c210:	6812      	ldr	r2, [r2, #0]
9001c212:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001c216:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001c21a:	fb00 1303 	mla	r3, r0, r3, r1
9001c21e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001c222:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c224:	681b      	ldr	r3, [r3, #0]
9001c226:	930b      	str	r3, [sp, #44]	; 0x2c
9001c228:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c22a:	685e      	ldr	r6, [r3, #4]
9001c22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c22e:	3604      	adds	r6, #4
9001c230:	43db      	mvns	r3, r3
9001c232:	b2db      	uxtb	r3, r3
9001c234:	930a      	str	r3, [sp, #40]	; 0x28
9001c236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c238:	2b00      	cmp	r3, #0
9001c23a:	dc03      	bgt.n	9001c244 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001c23c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001c23e:	2b00      	cmp	r3, #0
9001c240:	f340 8225 	ble.w	9001c68e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c244:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c246:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c24a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c24e:	1e48      	subs	r0, r1, #1
9001c250:	1e57      	subs	r7, r2, #1
9001c252:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c254:	2b00      	cmp	r3, #0
9001c256:	f340 80e3 	ble.w	9001c420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c25a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001c25e:	ea4f 4325 	mov.w	r3, r5, asr #16
9001c262:	d406      	bmi.n	9001c272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c264:	4584      	cmp	ip, r0
9001c266:	da04      	bge.n	9001c272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c268:	2b00      	cmp	r3, #0
9001c26a:	db02      	blt.n	9001c272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c26c:	42bb      	cmp	r3, r7
9001c26e:	f2c0 80d8 	blt.w	9001c422 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001c272:	f11c 0c01 	adds.w	ip, ip, #1
9001c276:	f100 80c9 	bmi.w	9001c40c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c27a:	4561      	cmp	r1, ip
9001c27c:	f2c0 80c6 	blt.w	9001c40c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c280:	3301      	adds	r3, #1
9001c282:	f100 80c3 	bmi.w	9001c40c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c286:	429a      	cmp	r2, r3
9001c288:	f2c0 80c0 	blt.w	9001c40c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c28c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c290:	4647      	mov	r7, r8
9001c292:	f1bb 0f00 	cmp.w	fp, #0
9001c296:	f340 80e3 	ble.w	9001c460 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001c29a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001c29c:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c2a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c2a2:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001c2a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c2aa:	ea5f 422a 	movs.w	r2, sl, asr #16
9001c2ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c2b2:	689b      	ldr	r3, [r3, #8]
9001c2b4:	f100 8121 	bmi.w	9001c4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c2b8:	f103 39ff 	add.w	r9, r3, #4294967295
9001c2bc:	454a      	cmp	r2, r9
9001c2be:	f280 811c 	bge.w	9001c4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c2c2:	f1bc 0f00 	cmp.w	ip, #0
9001c2c6:	f2c0 8118 	blt.w	9001c4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c2ca:	f10e 39ff 	add.w	r9, lr, #4294967295
9001c2ce:	45cc      	cmp	ip, r9
9001c2d0:	f280 8113 	bge.w	9001c4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c2d4:	b21b      	sxth	r3, r3
9001c2d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c2d8:	fb0c 2203 	mla	r2, ip, r3, r2
9001c2dc:	eb04 0902 	add.w	r9, r4, r2
9001c2e0:	5ca2      	ldrb	r2, [r4, r2]
9001c2e2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001c2e6:	2800      	cmp	r0, #0
9001c2e8:	f000 80fe 	beq.w	9001c4e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001c2ec:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c2f0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001c2f4:	9211      	str	r2, [sp, #68]	; 0x44
9001c2f6:	b151      	cbz	r1, 9001c30e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c2f8:	eb09 0203 	add.w	r2, r9, r3
9001c2fc:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c300:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c304:	930f      	str	r3, [sp, #60]	; 0x3c
9001c306:	7853      	ldrb	r3, [r2, #1]
9001c308:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c30c:	9312      	str	r3, [sp, #72]	; 0x48
9001c30e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001c310:	fb10 f201 	smulbb	r2, r0, r1
9001c314:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c316:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c31a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c31e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001c322:	10d2      	asrs	r2, r2, #3
9001c324:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c328:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001c32c:	ea4c 0c03 	orr.w	ip, ip, r3
9001c330:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001c332:	041b      	lsls	r3, r3, #16
9001c334:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c338:	4323      	orrs	r3, r4
9001c33a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c33c:	4353      	muls	r3, r2
9001c33e:	fb09 330c 	mla	r3, r9, ip, r3
9001c342:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c346:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c34a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c34e:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c352:	f1c1 0c10 	rsb	ip, r1, #16
9001c356:	ebac 0c00 	sub.w	ip, ip, r0
9001c35a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c35e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c362:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c368:	0418      	lsls	r0, r3, #16
9001c36a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c36e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c372:	4318      	orrs	r0, r3
9001c374:	fb02 c200 	mla	r2, r2, r0, ip
9001c378:	8838      	ldrh	r0, [r7, #0]
9001c37a:	0d53      	lsrs	r3, r2, #21
9001c37c:	0952      	lsrs	r2, r2, #5
9001c37e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c382:	1201      	asrs	r1, r0, #8
9001c384:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c388:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001c38c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c390:	00c0      	lsls	r0, r0, #3
9001c392:	431a      	orrs	r2, r3
9001c394:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001c398:	fb11 f104 	smulbb	r1, r1, r4
9001c39c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001c3a0:	b292      	uxth	r2, r2
9001c3a2:	fb1e fe04 	smulbb	lr, lr, r4
9001c3a6:	b2c0      	uxtb	r0, r0
9001c3a8:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001c3ac:	fb10 f004 	smulbb	r0, r0, r4
9001c3b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c3b4:	fb0c 1c03 	mla	ip, ip, r3, r1
9001c3b8:	10d1      	asrs	r1, r2, #3
9001c3ba:	00d2      	lsls	r2, r2, #3
9001c3bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c3c0:	fa1f fc8c 	uxth.w	ip, ip
9001c3c4:	b2d2      	uxtb	r2, r2
9001c3c6:	fb01 e103 	mla	r1, r1, r3, lr
9001c3ca:	fb02 0303 	mla	r3, r2, r3, r0
9001c3ce:	b289      	uxth	r1, r1
9001c3d0:	b29a      	uxth	r2, r3
9001c3d2:	f10c 0301 	add.w	r3, ip, #1
9001c3d6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001c3da:	1c53      	adds	r3, r2, #1
9001c3dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c3e0:	1c4a      	adds	r2, r1, #1
9001c3e2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c3e6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c3ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c3ee:	0949      	lsrs	r1, r1, #5
9001c3f0:	ea43 030c 	orr.w	r3, r3, ip
9001c3f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c3f8:	430b      	orrs	r3, r1
9001c3fa:	803b      	strh	r3, [r7, #0]
9001c3fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c3fe:	3702      	adds	r7, #2
9001c400:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c404:	449a      	add	sl, r3
9001c406:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c408:	441d      	add	r5, r3
9001c40a:	e742      	b.n	9001c292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c40c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c40e:	f108 0802 	add.w	r8, r8, #2
9001c412:	449a      	add	sl, r3
9001c414:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c416:	441d      	add	r5, r3
9001c418:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c41a:	3b01      	subs	r3, #1
9001c41c:	9309      	str	r3, [sp, #36]	; 0x24
9001c41e:	e718      	b.n	9001c252 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c420:	d023      	beq.n	9001c46a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001c422:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c424:	9825      	ldr	r0, [sp, #148]	; 0x94
9001c426:	3b01      	subs	r3, #1
9001c428:	fb00 a003 	mla	r0, r0, r3, sl
9001c42c:	1400      	asrs	r0, r0, #16
9001c42e:	f53f af2d 	bmi.w	9001c28c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c432:	3901      	subs	r1, #1
9001c434:	4288      	cmp	r0, r1
9001c436:	f6bf af29 	bge.w	9001c28c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c43a:	9926      	ldr	r1, [sp, #152]	; 0x98
9001c43c:	fb01 5303 	mla	r3, r1, r3, r5
9001c440:	141b      	asrs	r3, r3, #16
9001c442:	f53f af23 	bmi.w	9001c28c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c446:	3a01      	subs	r2, #1
9001c448:	4293      	cmp	r3, r2
9001c44a:	f6bf af1f 	bge.w	9001c28c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c44e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001c452:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001c456:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001c45a:	f1be 0f00 	cmp.w	lr, #0
9001c45e:	dc6c      	bgt.n	9001c53a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c460:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c462:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c466:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001c46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c46c:	2b00      	cmp	r3, #0
9001c46e:	f340 810e 	ble.w	9001c68e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c476:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c478:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c47c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c480:	eef0 6a62 	vmov.f32	s13, s5
9001c484:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c488:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c48c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c490:	ee16 aa90 	vmov	sl, s13
9001c494:	eef0 6a43 	vmov.f32	s13, s6
9001c498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c49c:	ee16 5a90 	vmov	r5, s13
9001c4a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c4a4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c4a8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c4ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c4b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c4b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c4b8:	ee12 2a90 	vmov	r2, s5
9001c4bc:	eef0 2a47 	vmov.f32	s5, s14
9001c4c0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c4c4:	ee13 2a10 	vmov	r2, s6
9001c4c8:	9325      	str	r3, [sp, #148]	; 0x94
9001c4ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c4cc:	eeb0 3a67 	vmov.f32	s6, s15
9001c4d0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c4d4:	9326      	str	r3, [sp, #152]	; 0x98
9001c4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c4d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001c4da:	3b01      	subs	r3, #1
9001c4dc:	930c      	str	r3, [sp, #48]	; 0x30
9001c4de:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c4e0:	bf08      	it	eq
9001c4e2:	4613      	moveq	r3, r2
9001c4e4:	9309      	str	r3, [sp, #36]	; 0x24
9001c4e6:	e6a6      	b.n	9001c236 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c4e8:	2900      	cmp	r1, #0
9001c4ea:	f43f af10 	beq.w	9001c30e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c4ee:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c4f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c4f6:	930f      	str	r3, [sp, #60]	; 0x3c
9001c4f8:	e709      	b.n	9001c30e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c4fa:	f112 0901 	adds.w	r9, r2, #1
9001c4fe:	f53f af7d 	bmi.w	9001c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c502:	454b      	cmp	r3, r9
9001c504:	f6ff af7a 	blt.w	9001c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c508:	f11c 0901 	adds.w	r9, ip, #1
9001c50c:	f53f af76 	bmi.w	9001c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c510:	45ce      	cmp	lr, r9
9001c512:	f6ff af73 	blt.w	9001c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c516:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c518:	b21b      	sxth	r3, r3
9001c51a:	9202      	str	r2, [sp, #8]
9001c51c:	fa0f f28e 	sxth.w	r2, lr
9001c520:	9300      	str	r3, [sp, #0]
9001c522:	4633      	mov	r3, r6
9001c524:	9201      	str	r2, [sp, #4]
9001c526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c528:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c52c:	e9cd c003 	strd	ip, r0, [sp, #12]
9001c530:	4639      	mov	r1, r7
9001c532:	9816      	ldr	r0, [sp, #88]	; 0x58
9001c534:	f7ff fd8e 	bl	9001c054 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001c538:	e760      	b.n	9001c3fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c53a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c53c:	ea4f 422a 	mov.w	r2, sl, asr #16
9001c540:	1429      	asrs	r1, r5, #16
9001c542:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c548:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001c54c:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c550:	fb03 2101 	mla	r1, r3, r1, r2
9001c554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c556:	440a      	add	r2, r1
9001c558:	5c61      	ldrb	r1, [r4, r1]
9001c55a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001c55e:	f1bc 0f00 	cmp.w	ip, #0
9001c562:	f000 808c 	beq.w	9001c67e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001c566:	7857      	ldrb	r7, [r2, #1]
9001c568:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001c56c:	9413      	str	r4, [sp, #76]	; 0x4c
9001c56e:	b140      	cbz	r0, 9001c582 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c570:	18d7      	adds	r7, r2, r3
9001c572:	5cd3      	ldrb	r3, [r2, r3]
9001c574:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c578:	9310      	str	r3, [sp, #64]	; 0x40
9001c57a:	787b      	ldrb	r3, [r7, #1]
9001c57c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c580:	9314      	str	r3, [sp, #80]	; 0x50
9001c582:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001c584:	fb1c f200 	smulbb	r2, ip, r0
9001c588:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c58a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c58e:	041f      	lsls	r7, r3, #16
9001c590:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c594:	10d2      	asrs	r2, r2, #3
9001c596:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001c59a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001c59e:	431f      	orrs	r7, r3
9001c5a0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001c5a4:	9317      	str	r3, [sp, #92]	; 0x5c
9001c5a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001c5a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c5aa:	041b      	lsls	r3, r3, #16
9001c5ac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c5b0:	ea43 030b 	orr.w	r3, r3, fp
9001c5b4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c5b8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001c5bc:	4353      	muls	r3, r2
9001c5be:	fb04 3707 	mla	r7, r4, r7, r3
9001c5c2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001c5c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c5c8:	ea43 0b01 	orr.w	fp, r3, r1
9001c5cc:	f1c0 0110 	rsb	r1, r0, #16
9001c5d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c5d2:	eba1 0c0c 	sub.w	ip, r1, ip
9001c5d6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c5da:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c5de:	fb0c 770b 	mla	r7, ip, fp, r7
9001c5e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c5e6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001c5ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c5ee:	ea4c 0c0b 	orr.w	ip, ip, fp
9001c5f2:	fb02 770c 	mla	r7, r2, ip, r7
9001c5f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001c5f8:	0d79      	lsrs	r1, r7, #21
9001c5fa:	8812      	ldrh	r2, [r2, #0]
9001c5fc:	097f      	lsrs	r7, r7, #5
9001c5fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c602:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c606:	430f      	orrs	r7, r1
9001c608:	1211      	asrs	r1, r2, #8
9001c60a:	b2bb      	uxth	r3, r7
9001c60c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c610:	10d7      	asrs	r7, r2, #3
9001c612:	fb11 f104 	smulbb	r1, r1, r4
9001c616:	1218      	asrs	r0, r3, #8
9001c618:	00d2      	lsls	r2, r2, #3
9001c61a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c61e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001c622:	fb17 f704 	smulbb	r7, r7, r4
9001c626:	b2d2      	uxtb	r2, r2
9001c628:	fb00 1009 	mla	r0, r0, r9, r1
9001c62c:	10d9      	asrs	r1, r3, #3
9001c62e:	fb12 f204 	smulbb	r2, r2, r4
9001c632:	00db      	lsls	r3, r3, #3
9001c634:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c638:	b280      	uxth	r0, r0
9001c63a:	b2db      	uxtb	r3, r3
9001c63c:	fb01 7109 	mla	r1, r1, r9, r7
9001c640:	fb03 2309 	mla	r3, r3, r9, r2
9001c644:	1c42      	adds	r2, r0, #1
9001c646:	b289      	uxth	r1, r1
9001c648:	b29b      	uxth	r3, r3
9001c64a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001c64e:	1c4f      	adds	r7, r1, #1
9001c650:	1c5a      	adds	r2, r3, #1
9001c652:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c656:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001c65a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001c65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c660:	0949      	lsrs	r1, r1, #5
9001c662:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c666:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c66a:	4310      	orrs	r0, r2
9001c66c:	4308      	orrs	r0, r1
9001c66e:	f823 0b02 	strh.w	r0, [r3], #2
9001c672:	930e      	str	r3, [sp, #56]	; 0x38
9001c674:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c676:	449a      	add	sl, r3
9001c678:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c67a:	441d      	add	r5, r3
9001c67c:	e6ed      	b.n	9001c45a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001c67e:	2800      	cmp	r0, #0
9001c680:	f43f af7f 	beq.w	9001c582 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c684:	5cd3      	ldrb	r3, [r2, r3]
9001c686:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c68a:	9310      	str	r3, [sp, #64]	; 0x40
9001c68c:	e779      	b.n	9001c582 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c68e:	b019      	add	sp, #100	; 0x64
9001c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c694 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001c698:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001c69c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001c6a0:	f1b8 0f00 	cmp.w	r8, #0
9001c6a4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001c6a8:	fb08 470e 	mla	r7, r8, lr, r4
9001c6ac:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001c6b0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001c6b4:	eb02 0907 	add.w	r9, r2, r7
9001c6b8:	8808      	ldrh	r0, [r1, #0]
9001c6ba:	db67      	blt.n	9001c78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c6bc:	45c2      	cmp	sl, r8
9001c6be:	dd65      	ble.n	9001c78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c6c0:	2c00      	cmp	r4, #0
9001c6c2:	db61      	blt.n	9001c788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c6c4:	45a6      	cmp	lr, r4
9001c6c6:	dd5f      	ble.n	9001c788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c6c8:	5dd2      	ldrb	r2, [r2, r7]
9001c6ca:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c6ce:	1c62      	adds	r2, r4, #1
9001c6d0:	d45f      	bmi.n	9001c792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c6d2:	4596      	cmp	lr, r2
9001c6d4:	dd5d      	ble.n	9001c792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c6d6:	2d00      	cmp	r5, #0
9001c6d8:	d05b      	beq.n	9001c792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c6da:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c6de:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001c6e2:	f118 0801 	adds.w	r8, r8, #1
9001c6e6:	d458      	bmi.n	9001c79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c6e8:	45c2      	cmp	sl, r8
9001c6ea:	dd56      	ble.n	9001c79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c6ec:	2e00      	cmp	r6, #0
9001c6ee:	d054      	beq.n	9001c79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c6f0:	2c00      	cmp	r4, #0
9001c6f2:	db50      	blt.n	9001c796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c6f4:	45a6      	cmp	lr, r4
9001c6f6:	dd4e      	ble.n	9001c796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c6f8:	f819 200e 	ldrb.w	r2, [r9, lr]
9001c6fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001c700:	3401      	adds	r4, #1
9001c702:	d407      	bmi.n	9001c714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c704:	45a6      	cmp	lr, r4
9001c706:	dd05      	ble.n	9001c714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c708:	b125      	cbz	r5, 9001c714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c70a:	44ce      	add	lr, r9
9001c70c:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001c710:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001c714:	fb15 f406 	smulbb	r4, r5, r6
9001c718:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001c71c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001c720:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c724:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c728:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001c72c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001c730:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c734:	ea43 0c0c 	orr.w	ip, r3, ip
9001c738:	f1c6 0310 	rsb	r3, r6, #16
9001c73c:	ea4e 0707 	orr.w	r7, lr, r7
9001c740:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001c744:	1b5b      	subs	r3, r3, r5
9001c746:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001c74a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001c74e:	437d      	muls	r5, r7
9001c750:	fb03 5c0c 	mla	ip, r3, ip, r5
9001c754:	0403      	lsls	r3, r0, #16
9001c756:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c75a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c75e:	4318      	orrs	r0, r3
9001c760:	0413      	lsls	r3, r2, #16
9001c762:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c766:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c76a:	fb04 c000 	mla	r0, r4, r0, ip
9001c76e:	4313      	orrs	r3, r2
9001c770:	fb06 0003 	mla	r0, r6, r3, r0
9001c774:	0d43      	lsrs	r3, r0, #21
9001c776:	0940      	lsrs	r0, r0, #5
9001c778:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c77c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c780:	4318      	orrs	r0, r3
9001c782:	8008      	strh	r0, [r1, #0]
9001c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001c788:	4684      	mov	ip, r0
9001c78a:	e7a0      	b.n	9001c6ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001c78c:	4607      	mov	r7, r0
9001c78e:	4684      	mov	ip, r0
9001c790:	e7a7      	b.n	9001c6e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c792:	4607      	mov	r7, r0
9001c794:	e7a5      	b.n	9001c6e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c796:	4602      	mov	r2, r0
9001c798:	e7b2      	b.n	9001c700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001c79a:	4602      	mov	r2, r0
9001c79c:	e7ba      	b.n	9001c714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001c79e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c79e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c7a2:	b093      	sub	sp, #76	; 0x4c
9001c7a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c7a8:	920f      	str	r2, [sp, #60]	; 0x3c
9001c7aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001c7ac:	9010      	str	r0, [sp, #64]	; 0x40
9001c7ae:	9108      	str	r1, [sp, #32]
9001c7b0:	6850      	ldr	r0, [r2, #4]
9001c7b2:	9306      	str	r3, [sp, #24]
9001c7b4:	6812      	ldr	r2, [r2, #0]
9001c7b6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001c7ba:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001c7be:	fb00 1303 	mla	r3, r0, r3, r1
9001c7c2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001c7c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c7c8:	681b      	ldr	r3, [r3, #0]
9001c7ca:	9307      	str	r3, [sp, #28]
9001c7cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c7ce:	685f      	ldr	r7, [r3, #4]
9001c7d0:	3704      	adds	r7, #4
9001c7d2:	9b08      	ldr	r3, [sp, #32]
9001c7d4:	2b00      	cmp	r3, #0
9001c7d6:	dc03      	bgt.n	9001c7e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001c7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c7da:	2b00      	cmp	r3, #0
9001c7dc:	f340 81b2 	ble.w	9001cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c7e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c7e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c7e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c7ea:	1e48      	subs	r0, r1, #1
9001c7ec:	f102 3cff 	add.w	ip, r2, #4294967295
9001c7f0:	9b06      	ldr	r3, [sp, #24]
9001c7f2:	2b00      	cmp	r3, #0
9001c7f4:	f340 80a9 	ble.w	9001c94a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001c7f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001c7fc:	ea4f 4326 	mov.w	r3, r6, asr #16
9001c800:	d406      	bmi.n	9001c810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c802:	4586      	cmp	lr, r0
9001c804:	da04      	bge.n	9001c810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c806:	2b00      	cmp	r3, #0
9001c808:	db02      	blt.n	9001c810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c80a:	4563      	cmp	r3, ip
9001c80c:	f2c0 809e 	blt.w	9001c94c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001c810:	f11e 0e01 	adds.w	lr, lr, #1
9001c814:	f100 808f 	bmi.w	9001c936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c818:	4571      	cmp	r1, lr
9001c81a:	f2c0 808c 	blt.w	9001c936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c81e:	3301      	adds	r3, #1
9001c820:	f100 8089 	bmi.w	9001c936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c824:	429a      	cmp	r2, r3
9001c826:	f2c0 8086 	blt.w	9001c936 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c82a:	f8dd b018 	ldr.w	fp, [sp, #24]
9001c82e:	46c8      	mov	r8, r9
9001c830:	f1bb 0f00 	cmp.w	fp, #0
9001c834:	f340 80a6 	ble.w	9001c984 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001c838:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001c83a:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001c83e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c840:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001c844:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c848:	1422      	asrs	r2, r4, #16
9001c84a:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001c84e:	689b      	ldr	r3, [r3, #8]
9001c850:	f100 80e3 	bmi.w	9001ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c854:	f103 3aff 	add.w	sl, r3, #4294967295
9001c858:	4552      	cmp	r2, sl
9001c85a:	f280 80de 	bge.w	9001ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c85e:	f1bc 0f00 	cmp.w	ip, #0
9001c862:	f2c0 80da 	blt.w	9001ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c866:	f10e 3aff 	add.w	sl, lr, #4294967295
9001c86a:	45d4      	cmp	ip, sl
9001c86c:	f280 80d5 	bge.w	9001ca1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c870:	b21b      	sxth	r3, r3
9001c872:	9d07      	ldr	r5, [sp, #28]
9001c874:	fb0c 2203 	mla	r2, ip, r3, r2
9001c878:	eb05 0a02 	add.w	sl, r5, r2
9001c87c:	5caa      	ldrb	r2, [r5, r2]
9001c87e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001c882:	2800      	cmp	r0, #0
9001c884:	f000 80c0 	beq.w	9001ca08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001c888:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c88c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001c890:	920b      	str	r2, [sp, #44]	; 0x2c
9001c892:	b151      	cbz	r1, 9001c8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c894:	eb0a 0203 	add.w	r2, sl, r3
9001c898:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c89c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c8a0:	9309      	str	r3, [sp, #36]	; 0x24
9001c8a2:	7853      	ldrb	r3, [r2, #1]
9001c8a4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c8a8:	930c      	str	r3, [sp, #48]	; 0x30
9001c8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c8ac:	fb10 f201 	smulbb	r2, r0, r1
9001c8b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001c8b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c8b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c8ba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c8be:	10d2      	asrs	r2, r2, #3
9001c8c0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c8c4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001c8c8:	ea4c 0c03 	orr.w	ip, ip, r3
9001c8cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c8ce:	041b      	lsls	r3, r3, #16
9001c8d0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c8d4:	432b      	orrs	r3, r5
9001c8d6:	4353      	muls	r3, r2
9001c8d8:	fb0a 330c 	mla	r3, sl, ip, r3
9001c8dc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c8e0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c8e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c8e8:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c8ec:	f1c1 0c10 	rsb	ip, r1, #16
9001c8f0:	ebac 0c00 	sub.w	ip, ip, r0
9001c8f4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c8f8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c8fc:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c900:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c902:	0418      	lsls	r0, r3, #16
9001c904:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c908:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c90c:	4318      	orrs	r0, r3
9001c90e:	fb02 c200 	mla	r2, r2, r0, ip
9001c912:	0d53      	lsrs	r3, r2, #21
9001c914:	0952      	lsrs	r2, r2, #5
9001c916:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c91a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c91e:	431a      	orrs	r2, r3
9001c920:	f8a8 2000 	strh.w	r2, [r8]
9001c924:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c926:	f108 0802 	add.w	r8, r8, #2
9001c92a:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c92e:	441c      	add	r4, r3
9001c930:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c932:	441e      	add	r6, r3
9001c934:	e77c      	b.n	9001c830 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c936:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c938:	f109 0902 	add.w	r9, r9, #2
9001c93c:	441c      	add	r4, r3
9001c93e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c940:	441e      	add	r6, r3
9001c942:	9b06      	ldr	r3, [sp, #24]
9001c944:	3b01      	subs	r3, #1
9001c946:	9306      	str	r3, [sp, #24]
9001c948:	e752      	b.n	9001c7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c94a:	d020      	beq.n	9001c98e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c94c:	9b06      	ldr	r3, [sp, #24]
9001c94e:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001c950:	3b01      	subs	r3, #1
9001c952:	fb00 4003 	mla	r0, r0, r3, r4
9001c956:	1400      	asrs	r0, r0, #16
9001c958:	f53f af67 	bmi.w	9001c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c95c:	3901      	subs	r1, #1
9001c95e:	4288      	cmp	r0, r1
9001c960:	f6bf af63 	bge.w	9001c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c964:	9920      	ldr	r1, [sp, #128]	; 0x80
9001c966:	fb01 6303 	mla	r3, r1, r3, r6
9001c96a:	141b      	asrs	r3, r3, #16
9001c96c:	f53f af5d 	bmi.w	9001c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c970:	3a01      	subs	r2, #1
9001c972:	4293      	cmp	r3, r2
9001c974:	f6bf af59 	bge.w	9001c82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c978:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001c97c:	46ca      	mov	sl, r9
9001c97e:	f1b8 0f00 	cmp.w	r8, #0
9001c982:	dc67      	bgt.n	9001ca54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c984:	9b06      	ldr	r3, [sp, #24]
9001c986:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001c98a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001c98e:	9b08      	ldr	r3, [sp, #32]
9001c990:	2b00      	cmp	r3, #0
9001c992:	f340 80d7 	ble.w	9001cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c996:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c99a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c99c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c9a0:	eeb0 6a62 	vmov.f32	s12, s5
9001c9a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c9a8:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c9ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c9b0:	ee16 4a10 	vmov	r4, s12
9001c9b4:	eeb0 6a43 	vmov.f32	s12, s6
9001c9b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c9bc:	ee16 6a10 	vmov	r6, s12
9001c9c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c9c4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c9c8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c9cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c9d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c9d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c9d8:	ee12 2a90 	vmov	r2, s5
9001c9dc:	eef0 2a47 	vmov.f32	s5, s14
9001c9e0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c9e4:	ee13 2a10 	vmov	r2, s6
9001c9e8:	931f      	str	r3, [sp, #124]	; 0x7c
9001c9ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c9ec:	eeb0 3a67 	vmov.f32	s6, s15
9001c9f0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c9f4:	9320      	str	r3, [sp, #128]	; 0x80
9001c9f6:	9b08      	ldr	r3, [sp, #32]
9001c9f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c9fa:	3b01      	subs	r3, #1
9001c9fc:	9308      	str	r3, [sp, #32]
9001c9fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001ca00:	bf08      	it	eq
9001ca02:	4613      	moveq	r3, r2
9001ca04:	9306      	str	r3, [sp, #24]
9001ca06:	e6e4      	b.n	9001c7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001ca08:	2900      	cmp	r1, #0
9001ca0a:	f43f af4e 	beq.w	9001c8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001ca0e:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001ca12:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ca16:	9309      	str	r3, [sp, #36]	; 0x24
9001ca18:	e747      	b.n	9001c8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001ca1a:	f112 0a01 	adds.w	sl, r2, #1
9001ca1e:	d481      	bmi.n	9001c924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca20:	4553      	cmp	r3, sl
9001ca22:	f6ff af7f 	blt.w	9001c924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca26:	f11c 0a01 	adds.w	sl, ip, #1
9001ca2a:	f53f af7b 	bmi.w	9001c924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca2e:	45d6      	cmp	lr, sl
9001ca30:	f6ff af78 	blt.w	9001c924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca34:	b21b      	sxth	r3, r3
9001ca36:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001ca3a:	fa0f f28e 	sxth.w	r2, lr
9001ca3e:	9300      	str	r3, [sp, #0]
9001ca40:	463b      	mov	r3, r7
9001ca42:	9201      	str	r2, [sp, #4]
9001ca44:	9a07      	ldr	r2, [sp, #28]
9001ca46:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001ca4a:	4641      	mov	r1, r8
9001ca4c:	9810      	ldr	r0, [sp, #64]	; 0x40
9001ca4e:	f7ff fe21 	bl	9001c694 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001ca52:	e767      	b.n	9001c924 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001ca54:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ca56:	1422      	asrs	r2, r4, #16
9001ca58:	1431      	asrs	r1, r6, #16
9001ca5a:	9d07      	ldr	r5, [sp, #28]
9001ca5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001ca60:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001ca64:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001ca68:	fb03 2101 	mla	r1, r3, r1, r2
9001ca6c:	9a07      	ldr	r2, [sp, #28]
9001ca6e:	440a      	add	r2, r1
9001ca70:	5c69      	ldrb	r1, [r5, r1]
9001ca72:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001ca76:	f1be 0f00 	cmp.w	lr, #0
9001ca7a:	d05c      	beq.n	9001cb36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001ca7c:	f892 c001 	ldrb.w	ip, [r2, #1]
9001ca80:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001ca84:	950d      	str	r5, [sp, #52]	; 0x34
9001ca86:	b150      	cbz	r0, 9001ca9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001ca88:	eb02 0c03 	add.w	ip, r2, r3
9001ca8c:	5cd3      	ldrb	r3, [r2, r3]
9001ca8e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ca92:	930a      	str	r3, [sp, #40]	; 0x28
9001ca94:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001ca98:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001ca9c:	930e      	str	r3, [sp, #56]	; 0x38
9001ca9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001caa0:	fb1e f200 	smulbb	r2, lr, r0
9001caa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001caa6:	f108 38ff 	add.w	r8, r8, #4294967295
9001caaa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001caae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001cab2:	10d2      	asrs	r2, r2, #3
9001cab4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001cab8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001cabc:	ea4c 0c03 	orr.w	ip, ip, r3
9001cac0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001cac4:	9311      	str	r3, [sp, #68]	; 0x44
9001cac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cac8:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001caca:	041b      	lsls	r3, r3, #16
9001cacc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cad0:	ea43 030b 	orr.w	r3, r3, fp
9001cad4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001cad8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001cadc:	4353      	muls	r3, r2
9001cade:	fb05 3c0c 	mla	ip, r5, ip, r3
9001cae2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001cae6:	ea43 0b01 	orr.w	fp, r3, r1
9001caea:	f1c0 0110 	rsb	r1, r0, #16
9001caee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001caf0:	eba1 0e0e 	sub.w	lr, r1, lr
9001caf4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001caf8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001cafc:	fb0e cc0b 	mla	ip, lr, fp, ip
9001cb00:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001cb04:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001cb08:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001cb0c:	ea4b 0e0e 	orr.w	lr, fp, lr
9001cb10:	fb02 cc0e 	mla	ip, r2, lr, ip
9001cb14:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001cb18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001cb1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cb20:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001cb24:	ea43 0c0c 	orr.w	ip, r3, ip
9001cb28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cb2a:	441c      	add	r4, r3
9001cb2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cb2e:	f82a cb02 	strh.w	ip, [sl], #2
9001cb32:	441e      	add	r6, r3
9001cb34:	e723      	b.n	9001c97e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001cb36:	2800      	cmp	r0, #0
9001cb38:	d0b1      	beq.n	9001ca9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001cb3a:	5cd3      	ldrb	r3, [r2, r3]
9001cb3c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001cb40:	930a      	str	r3, [sp, #40]	; 0x28
9001cb42:	e7ac      	b.n	9001ca9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001cb44:	b013      	add	sp, #76	; 0x4c
9001cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cb4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001cb4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cb4e:	880d      	ldrh	r5, [r1, #0]
9001cb50:	b087      	sub	sp, #28
9001cb52:	10ef      	asrs	r7, r5, #3
9001cb54:	9103      	str	r1, [sp, #12]
9001cb56:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001cb5a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001cb5e:	00ed      	lsls	r5, r5, #3
9001cb60:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cb64:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001cb68:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001cb6c:	b2ed      	uxtb	r5, r5
9001cb6e:	9701      	str	r7, [sp, #4]
9001cb70:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001cb74:	9502      	str	r5, [sp, #8]
9001cb76:	9d01      	ldr	r5, [sp, #4]
9001cb78:	9902      	ldr	r1, [sp, #8]
9001cb7a:	022d      	lsls	r5, r5, #8
9001cb7c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001cb80:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001cb84:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001cb88:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001cb8c:	430d      	orrs	r5, r1
9001cb8e:	fb06 0709 	mla	r7, r6, r9, r0
9001cb92:	2e00      	cmp	r6, #0
9001cb94:	9505      	str	r5, [sp, #20]
9001cb96:	eb02 0c07 	add.w	ip, r2, r7
9001cb9a:	f2c0 80b6 	blt.w	9001cd0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cb9e:	45b3      	cmp	fp, r6
9001cba0:	f340 80b3 	ble.w	9001cd0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001cba4:	2800      	cmp	r0, #0
9001cba6:	f2c0 80ae 	blt.w	9001cd06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cbaa:	4581      	cmp	r9, r0
9001cbac:	f340 80ab 	ble.w	9001cd06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001cbb0:	5dd7      	ldrb	r7, [r2, r7]
9001cbb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001cbb6:	441f      	add	r7, r3
9001cbb8:	1c42      	adds	r2, r0, #1
9001cbba:	f100 80a9 	bmi.w	9001cd10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cbbe:	4591      	cmp	r9, r2
9001cbc0:	f340 80a6 	ble.w	9001cd10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cbc4:	2c00      	cmp	r4, #0
9001cbc6:	f000 80a3 	beq.w	9001cd10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001cbca:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cbce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001cbd2:	441d      	add	r5, r3
9001cbd4:	3601      	adds	r6, #1
9001cbd6:	f100 809f 	bmi.w	9001cd18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cbda:	45b3      	cmp	fp, r6
9001cbdc:	f340 809c 	ble.w	9001cd18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cbe0:	f1be 0f00 	cmp.w	lr, #0
9001cbe4:	f000 8098 	beq.w	9001cd18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001cbe8:	2800      	cmp	r0, #0
9001cbea:	f2c0 8093 	blt.w	9001cd14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001cbee:	4581      	cmp	r9, r0
9001cbf0:	f340 8090 	ble.w	9001cd14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001cbf4:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001cbf8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001cbfc:	441e      	add	r6, r3
9001cbfe:	3001      	adds	r0, #1
9001cc00:	f100 808d 	bmi.w	9001cd1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cc04:	4581      	cmp	r9, r0
9001cc06:	f340 808a 	ble.w	9001cd1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cc0a:	2c00      	cmp	r4, #0
9001cc0c:	f000 8087 	beq.w	9001cd1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001cc10:	44e1      	add	r9, ip
9001cc12:	f899 2001 	ldrb.w	r2, [r9, #1]
9001cc16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cc1a:	4413      	add	r3, r2
9001cc1c:	b2a4      	uxth	r4, r4
9001cc1e:	f897 c002 	ldrb.w	ip, [r7, #2]
9001cc22:	fa1f fe8e 	uxth.w	lr, lr
9001cc26:	9901      	ldr	r1, [sp, #4]
9001cc28:	fb04 fb0e 	mul.w	fp, r4, lr
9001cc2c:	0124      	lsls	r4, r4, #4
9001cc2e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001cc32:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001cc36:	eba4 040b 	sub.w	r4, r4, fp
9001cc3a:	fa1f f08e 	uxth.w	r0, lr
9001cc3e:	b2a2      	uxth	r2, r4
9001cc40:	78ac      	ldrb	r4, [r5, #2]
9001cc42:	eba9 0900 	sub.w	r9, r9, r0
9001cc46:	fa1f fe88 	uxth.w	lr, r8
9001cc4a:	4354      	muls	r4, r2
9001cc4c:	ea6f 0808 	mvn.w	r8, r8
9001cc50:	fa1f f989 	uxth.w	r9, r9
9001cc54:	fa5f f888 	uxtb.w	r8, r8
9001cc58:	fb09 440c 	mla	r4, r9, ip, r4
9001cc5c:	f896 c002 	ldrb.w	ip, [r6, #2]
9001cc60:	fb1a fa08 	smulbb	sl, sl, r8
9001cc64:	fb00 440c 	mla	r4, r0, ip, r4
9001cc68:	f893 c002 	ldrb.w	ip, [r3, #2]
9001cc6c:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001cc70:	787c      	ldrb	r4, [r7, #1]
9001cc72:	783f      	ldrb	r7, [r7, #0]
9001cc74:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cc78:	fb0c ac0e 	mla	ip, ip, lr, sl
9001cc7c:	f895 a001 	ldrb.w	sl, [r5, #1]
9001cc80:	782d      	ldrb	r5, [r5, #0]
9001cc82:	fb02 fa0a 	mul.w	sl, r2, sl
9001cc86:	fa1f fc8c 	uxth.w	ip, ip
9001cc8a:	436a      	muls	r2, r5
9001cc8c:	7835      	ldrb	r5, [r6, #0]
9001cc8e:	fb09 aa04 	mla	sl, r9, r4, sl
9001cc92:	7874      	ldrb	r4, [r6, #1]
9001cc94:	fb09 2207 	mla	r2, r9, r7, r2
9001cc98:	fb00 aa04 	mla	sl, r0, r4, sl
9001cc9c:	785c      	ldrb	r4, [r3, #1]
9001cc9e:	fb00 2005 	mla	r0, r0, r5, r2
9001cca2:	781b      	ldrb	r3, [r3, #0]
9001cca4:	fb0b a404 	mla	r4, fp, r4, sl
9001cca8:	fb11 fa08 	smulbb	sl, r1, r8
9001ccac:	fb0b 0b03 	mla	fp, fp, r3, r0
9001ccb0:	9b02      	ldr	r3, [sp, #8]
9001ccb2:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001ccb6:	fb13 f808 	smulbb	r8, r3, r8
9001ccba:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001ccbe:	fb04 a40e 	mla	r4, r4, lr, sl
9001ccc2:	f10c 0301 	add.w	r3, ip, #1
9001ccc6:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001ccca:	b2a4      	uxth	r4, r4
9001cccc:	fa1f fe8e 	uxth.w	lr, lr
9001ccd0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001ccd4:	f104 0a01 	add.w	sl, r4, #1
9001ccd8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001ccdc:	f10e 0c01 	add.w	ip, lr, #1
9001cce0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001cce4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001cce8:	0964      	lsrs	r4, r4, #5
9001ccea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ccee:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ccf2:	ea4c 0c03 	orr.w	ip, ip, r3
9001ccf6:	9b03      	ldr	r3, [sp, #12]
9001ccf8:	ea4c 0c04 	orr.w	ip, ip, r4
9001ccfc:	f8a3 c000 	strh.w	ip, [r3]
9001cd00:	b007      	add	sp, #28
9001cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001cd06:	af05      	add	r7, sp, #20
9001cd08:	e756      	b.n	9001cbb8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001cd0a:	ad05      	add	r5, sp, #20
9001cd0c:	462f      	mov	r7, r5
9001cd0e:	e761      	b.n	9001cbd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cd10:	ad05      	add	r5, sp, #20
9001cd12:	e75f      	b.n	9001cbd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cd14:	ae05      	add	r6, sp, #20
9001cd16:	e772      	b.n	9001cbfe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001cd18:	ab05      	add	r3, sp, #20
9001cd1a:	461e      	mov	r6, r3
9001cd1c:	e77e      	b.n	9001cc1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001cd1e:	ab05      	add	r3, sp, #20
9001cd20:	e77c      	b.n	9001cc1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001cd22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cd22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cd26:	b095      	sub	sp, #84	; 0x54
9001cd28:	9212      	str	r2, [sp, #72]	; 0x48
9001cd2a:	9309      	str	r3, [sp, #36]	; 0x24
9001cd2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001cd2e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001cd32:	9013      	str	r0, [sp, #76]	; 0x4c
9001cd34:	930f      	str	r3, [sp, #60]	; 0x3c
9001cd36:	6850      	ldr	r0, [r2, #4]
9001cd38:	910e      	str	r1, [sp, #56]	; 0x38
9001cd3a:	6812      	ldr	r2, [r2, #0]
9001cd3c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001cd40:	fb00 1303 	mla	r3, r0, r3, r1
9001cd44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cd48:	930a      	str	r3, [sp, #40]	; 0x28
9001cd4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cd4c:	681b      	ldr	r3, [r3, #0]
9001cd4e:	930d      	str	r3, [sp, #52]	; 0x34
9001cd50:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cd52:	685c      	ldr	r4, [r3, #4]
9001cd54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001cd56:	3404      	adds	r4, #4
9001cd58:	43db      	mvns	r3, r3
9001cd5a:	b2db      	uxtb	r3, r3
9001cd5c:	930b      	str	r3, [sp, #44]	; 0x2c
9001cd5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cd60:	2b00      	cmp	r3, #0
9001cd62:	dc03      	bgt.n	9001cd6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001cd64:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001cd66:	2b00      	cmp	r3, #0
9001cd68:	f340 8255 	ble.w	9001d216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cd6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cd6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cd72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cd76:	1e48      	subs	r0, r1, #1
9001cd78:	1e55      	subs	r5, r2, #1
9001cd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cd7c:	2b00      	cmp	r3, #0
9001cd7e:	f340 80f9 	ble.w	9001cf74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001cd82:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001cd84:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cd86:	1436      	asrs	r6, r6, #16
9001cd88:	ea4f 4323 	mov.w	r3, r3, asr #16
9001cd8c:	d406      	bmi.n	9001cd9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd8e:	4286      	cmp	r6, r0
9001cd90:	da04      	bge.n	9001cd9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd92:	2b00      	cmp	r3, #0
9001cd94:	db02      	blt.n	9001cd9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cd96:	42ab      	cmp	r3, r5
9001cd98:	f2c0 80ed 	blt.w	9001cf76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001cd9c:	3601      	adds	r6, #1
9001cd9e:	f100 80da 	bmi.w	9001cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cda2:	42b1      	cmp	r1, r6
9001cda4:	f2c0 80d7 	blt.w	9001cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cda8:	3301      	adds	r3, #1
9001cdaa:	f100 80d4 	bmi.w	9001cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cdae:	429a      	cmp	r2, r3
9001cdb0:	f2c0 80d1 	blt.w	9001cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cdb6:	9311      	str	r3, [sp, #68]	; 0x44
9001cdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cdba:	930c      	str	r3, [sp, #48]	; 0x30
9001cdbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cdbe:	2b00      	cmp	r3, #0
9001cdc0:	f340 80fa 	ble.w	9001cfb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001cdc4:	9826      	ldr	r0, [sp, #152]	; 0x98
9001cdc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cdc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001cdca:	68c6      	ldr	r6, [r0, #12]
9001cdcc:	141d      	asrs	r5, r3, #16
9001cdce:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001cdd0:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001cdd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cdd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001cdd8:	1400      	asrs	r0, r0, #16
9001cdda:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cdde:	6892      	ldr	r2, [r2, #8]
9001cde0:	f100 813e 	bmi.w	9001d060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cde4:	1e57      	subs	r7, r2, #1
9001cde6:	42b8      	cmp	r0, r7
9001cde8:	f280 813a 	bge.w	9001d060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cdec:	2d00      	cmp	r5, #0
9001cdee:	f2c0 8137 	blt.w	9001d060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cdf2:	1e77      	subs	r7, r6, #1
9001cdf4:	42bd      	cmp	r5, r7
9001cdf6:	f280 8133 	bge.w	9001d060 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cdfa:	b212      	sxth	r2, r2
9001cdfc:	fb05 0002 	mla	r0, r5, r2, r0
9001ce00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001ce02:	f815 a000 	ldrb.w	sl, [r5, r0]
9001ce06:	182e      	adds	r6, r5, r0
9001ce08:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001ce0c:	eb04 050a 	add.w	r5, r4, sl
9001ce10:	2b00      	cmp	r3, #0
9001ce12:	f000 8117 	beq.w	9001d044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001ce16:	f896 c001 	ldrb.w	ip, [r6, #1]
9001ce1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001ce1e:	44a4      	add	ip, r4
9001ce20:	2900      	cmp	r1, #0
9001ce22:	f000 8117 	beq.w	9001d054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001ce26:	18b0      	adds	r0, r6, r2
9001ce28:	5cb2      	ldrb	r2, [r6, r2]
9001ce2a:	7840      	ldrb	r0, [r0, #1]
9001ce2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001ce30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001ce34:	4422      	add	r2, r4
9001ce36:	4420      	add	r0, r4
9001ce38:	b29b      	uxth	r3, r3
9001ce3a:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001ce3e:	b289      	uxth	r1, r1
9001ce40:	f895 b002 	ldrb.w	fp, [r5, #2]
9001ce44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001ce46:	fb03 f901 	mul.w	r9, r3, r1
9001ce4a:	011b      	lsls	r3, r3, #4
9001ce4c:	f8b6 e000 	ldrh.w	lr, [r6]
9001ce50:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001ce54:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001ce58:	eba3 0309 	sub.w	r3, r3, r9
9001ce5c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001ce60:	b289      	uxth	r1, r1
9001ce62:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001ce66:	b29b      	uxth	r3, r3
9001ce68:	eba8 0801 	sub.w	r8, r8, r1
9001ce6c:	435f      	muls	r7, r3
9001ce6e:	fa1f f888 	uxth.w	r8, r8
9001ce72:	9310      	str	r3, [sp, #64]	; 0x40
9001ce74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ce76:	fb08 770b 	mla	r7, r8, fp, r7
9001ce7a:	f892 b002 	ldrb.w	fp, [r2, #2]
9001ce7e:	fb01 770b 	mla	r7, r1, fp, r7
9001ce82:	f890 b002 	ldrb.w	fp, [r0, #2]
9001ce86:	fb09 770b 	mla	r7, r9, fp, r7
9001ce8a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001ce8e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001ce92:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ce96:	fb1b fb03 	smulbb	fp, fp, r3
9001ce9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ce9c:	fb07 b706 	mla	r7, r7, r6, fp
9001cea0:	f895 b001 	ldrb.w	fp, [r5, #1]
9001cea4:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cea8:	f89c c000 	ldrb.w	ip, [ip]
9001ceac:	b2bf      	uxth	r7, r7
9001ceae:	435d      	muls	r5, r3
9001ceb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ceb2:	fb08 550b 	mla	r5, r8, fp, r5
9001ceb6:	f892 b001 	ldrb.w	fp, [r2, #1]
9001ceba:	fb01 550b 	mla	r5, r1, fp, r5
9001cebe:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cec2:	fb09 550b 	mla	r5, r9, fp, r5
9001cec6:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001ceca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cece:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001ced2:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001ced6:	fa5f fe8e 	uxtb.w	lr, lr
9001ceda:	fb1b fb03 	smulbb	fp, fp, r3
9001cede:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cee0:	fb03 f30c 	mul.w	r3, r3, ip
9001cee4:	f892 c000 	ldrb.w	ip, [r2]
9001cee8:	fb05 b506 	mla	r5, r5, r6, fp
9001ceec:	fb08 330a 	mla	r3, r8, sl, r3
9001cef0:	b2ad      	uxth	r5, r5
9001cef2:	fb01 330c 	mla	r3, r1, ip, r3
9001cef6:	f890 c000 	ldrb.w	ip, [r0]
9001cefa:	f105 0b01 	add.w	fp, r5, #1
9001cefe:	fb09 3c0c 	mla	ip, r9, ip, r3
9001cf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cf04:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001cf08:	fb1e fe03 	smulbb	lr, lr, r3
9001cf0c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cf10:	1c7b      	adds	r3, r7, #1
9001cf12:	096d      	lsrs	r5, r5, #5
9001cf14:	fb0c e606 	mla	r6, ip, r6, lr
9001cf18:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001cf1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cf20:	b2b6      	uxth	r6, r6
9001cf22:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001cf26:	1c77      	adds	r7, r6, #1
9001cf28:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001cf2c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001cf30:	431f      	orrs	r7, r3
9001cf32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cf34:	433d      	orrs	r5, r7
9001cf36:	801d      	strh	r5, [r3, #0]
9001cf38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cf3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001cf3c:	3302      	adds	r3, #2
9001cf3e:	930c      	str	r3, [sp, #48]	; 0x30
9001cf40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cf42:	4413      	add	r3, r2
9001cf44:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001cf46:	931f      	str	r3, [sp, #124]	; 0x7c
9001cf48:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cf4a:	4413      	add	r3, r2
9001cf4c:	9320      	str	r3, [sp, #128]	; 0x80
9001cf4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cf50:	3b01      	subs	r3, #1
9001cf52:	9311      	str	r3, [sp, #68]	; 0x44
9001cf54:	e732      	b.n	9001cdbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001cf56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cf58:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001cf5a:	4433      	add	r3, r6
9001cf5c:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001cf5e:	931f      	str	r3, [sp, #124]	; 0x7c
9001cf60:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cf62:	4433      	add	r3, r6
9001cf64:	9320      	str	r3, [sp, #128]	; 0x80
9001cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf68:	3b01      	subs	r3, #1
9001cf6a:	9309      	str	r3, [sp, #36]	; 0x24
9001cf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cf6e:	3302      	adds	r3, #2
9001cf70:	930a      	str	r3, [sp, #40]	; 0x28
9001cf72:	e702      	b.n	9001cd7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001cf74:	d027      	beq.n	9001cfc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001cf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cf78:	9821      	ldr	r0, [sp, #132]	; 0x84
9001cf7a:	3b01      	subs	r3, #1
9001cf7c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001cf7e:	fb00 5003 	mla	r0, r0, r3, r5
9001cf82:	1400      	asrs	r0, r0, #16
9001cf84:	f53f af16 	bmi.w	9001cdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf88:	3901      	subs	r1, #1
9001cf8a:	4288      	cmp	r0, r1
9001cf8c:	f6bf af12 	bge.w	9001cdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf90:	9922      	ldr	r1, [sp, #136]	; 0x88
9001cf92:	9820      	ldr	r0, [sp, #128]	; 0x80
9001cf94:	fb01 0303 	mla	r3, r1, r3, r0
9001cf98:	141b      	asrs	r3, r3, #16
9001cf9a:	f53f af0b 	bmi.w	9001cdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cf9e:	3a01      	subs	r2, #1
9001cfa0:	4293      	cmp	r3, r2
9001cfa2:	f6bf af07 	bge.w	9001cdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cfa8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001cfac:	9311      	str	r3, [sp, #68]	; 0x44
9001cfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cfb0:	930c      	str	r3, [sp, #48]	; 0x30
9001cfb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cfb4:	2b00      	cmp	r3, #0
9001cfb6:	dc70      	bgt.n	9001d09a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001cfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cfba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001cfbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cfc0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cfc4:	930a      	str	r3, [sp, #40]	; 0x28
9001cfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cfc8:	2b00      	cmp	r3, #0
9001cfca:	f340 8124 	ble.w	9001d216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cfce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cfd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001cfd4:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cfd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cfdc:	eef0 6a62 	vmov.f32	s13, s5
9001cfe0:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cfe4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cfe8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cfec:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001cff0:	eef0 6a43 	vmov.f32	s13, s6
9001cff4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cff8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001cffc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d000:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d004:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d008:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d00c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d010:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d014:	ee12 2a90 	vmov	r2, s5
9001d018:	eef0 2a47 	vmov.f32	s5, s14
9001d01c:	fb92 f3f3 	sdiv	r3, r2, r3
9001d020:	ee13 2a10 	vmov	r2, s6
9001d024:	9321      	str	r3, [sp, #132]	; 0x84
9001d026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d028:	eeb0 3a67 	vmov.f32	s6, s15
9001d02c:	fb92 f3f3 	sdiv	r3, r2, r3
9001d030:	9322      	str	r3, [sp, #136]	; 0x88
9001d032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d034:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d036:	3b01      	subs	r3, #1
9001d038:	930e      	str	r3, [sp, #56]	; 0x38
9001d03a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d03c:	bf08      	it	eq
9001d03e:	4613      	moveq	r3, r2
9001d040:	9309      	str	r3, [sp, #36]	; 0x24
9001d042:	e68c      	b.n	9001cd5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d044:	b149      	cbz	r1, 9001d05a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001d046:	5cb2      	ldrb	r2, [r6, r2]
9001d048:	4628      	mov	r0, r5
9001d04a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d04e:	4422      	add	r2, r4
9001d050:	46ac      	mov	ip, r5
9001d052:	e6f1      	b.n	9001ce38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d054:	4628      	mov	r0, r5
9001d056:	462a      	mov	r2, r5
9001d058:	e6ee      	b.n	9001ce38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d05a:	4628      	mov	r0, r5
9001d05c:	462a      	mov	r2, r5
9001d05e:	e7f7      	b.n	9001d050 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001d060:	1c47      	adds	r7, r0, #1
9001d062:	f53f af69 	bmi.w	9001cf38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d066:	42ba      	cmp	r2, r7
9001d068:	f6ff af66 	blt.w	9001cf38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d06c:	1c6f      	adds	r7, r5, #1
9001d06e:	f53f af63 	bmi.w	9001cf38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d072:	42be      	cmp	r6, r7
9001d074:	f6ff af60 	blt.w	9001cf38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d078:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001d07a:	b236      	sxth	r6, r6
9001d07c:	b212      	sxth	r2, r2
9001d07e:	9002      	str	r0, [sp, #8]
9001d080:	9601      	str	r6, [sp, #4]
9001d082:	9200      	str	r2, [sp, #0]
9001d084:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d086:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001d08a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001d08e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001d092:	4623      	mov	r3, r4
9001d094:	f7ff fd59 	bl	9001cb4a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001d098:	e74e      	b.n	9001cf38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d09a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d09c:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d09e:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001d0a2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d0a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001d0a6:	1400      	asrs	r0, r0, #16
9001d0a8:	142d      	asrs	r5, r5, #16
9001d0aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d0ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d0b0:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001d0b4:	fb02 5000 	mla	r0, r2, r0, r5
9001d0b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001d0ba:	f815 9000 	ldrb.w	r9, [r5, r0]
9001d0be:	182e      	adds	r6, r5, r0
9001d0c0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001d0c4:	eb04 0509 	add.w	r5, r4, r9
9001d0c8:	2b00      	cmp	r3, #0
9001d0ca:	f000 8096 	beq.w	9001d1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001d0ce:	7877      	ldrb	r7, [r6, #1]
9001d0d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d0d4:	4427      	add	r7, r4
9001d0d6:	2900      	cmp	r1, #0
9001d0d8:	f000 8097 	beq.w	9001d20a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001d0dc:	18b0      	adds	r0, r6, r2
9001d0de:	5cb2      	ldrb	r2, [r6, r2]
9001d0e0:	7840      	ldrb	r0, [r0, #1]
9001d0e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d0e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d0ea:	4422      	add	r2, r4
9001d0ec:	4420      	add	r0, r4
9001d0ee:	b29b      	uxth	r3, r3
9001d0f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001d0f2:	b289      	uxth	r1, r1
9001d0f4:	f895 b002 	ldrb.w	fp, [r5, #2]
9001d0f8:	f8b6 c000 	ldrh.w	ip, [r6]
9001d0fc:	fb03 f801 	mul.w	r8, r3, r1
9001d100:	011b      	lsls	r3, r3, #4
9001d102:	78be      	ldrb	r6, [r7, #2]
9001d104:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001d108:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d10c:	eba3 0308 	sub.w	r3, r3, r8
9001d110:	f814 9009 	ldrb.w	r9, [r4, r9]
9001d114:	b289      	uxth	r1, r1
9001d116:	b29b      	uxth	r3, r3
9001d118:	ebae 0e01 	sub.w	lr, lr, r1
9001d11c:	435e      	muls	r6, r3
9001d11e:	fa1f fe8e 	uxth.w	lr, lr
9001d122:	9310      	str	r3, [sp, #64]	; 0x40
9001d124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d126:	fb0e 660b 	mla	r6, lr, fp, r6
9001d12a:	f892 b002 	ldrb.w	fp, [r2, #2]
9001d12e:	fb01 660b 	mla	r6, r1, fp, r6
9001d132:	f890 b002 	ldrb.w	fp, [r0, #2]
9001d136:	fb08 660b 	mla	r6, r8, fp, r6
9001d13a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001d13e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001d142:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d146:	fb1b fb03 	smulbb	fp, fp, r3
9001d14a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d14c:	fb06 b60a 	mla	r6, r6, sl, fp
9001d150:	f895 b001 	ldrb.w	fp, [r5, #1]
9001d154:	787d      	ldrb	r5, [r7, #1]
9001d156:	783f      	ldrb	r7, [r7, #0]
9001d158:	b2b6      	uxth	r6, r6
9001d15a:	435d      	muls	r5, r3
9001d15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d15e:	fb0e 550b 	mla	r5, lr, fp, r5
9001d162:	f892 b001 	ldrb.w	fp, [r2, #1]
9001d166:	fb01 550b 	mla	r5, r1, fp, r5
9001d16a:	f890 b001 	ldrb.w	fp, [r0, #1]
9001d16e:	fb08 550b 	mla	r5, r8, fp, r5
9001d172:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001d176:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d17a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d17e:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d182:	fa5f fc8c 	uxtb.w	ip, ip
9001d186:	fb1b fb03 	smulbb	fp, fp, r3
9001d18a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d18c:	437b      	muls	r3, r7
9001d18e:	7817      	ldrb	r7, [r2, #0]
9001d190:	fb05 b50a 	mla	r5, r5, sl, fp
9001d194:	fb0e 3309 	mla	r3, lr, r9, r3
9001d198:	b2ad      	uxth	r5, r5
9001d19a:	fb01 3307 	mla	r3, r1, r7, r3
9001d19e:	7807      	ldrb	r7, [r0, #0]
9001d1a0:	f105 0b01 	add.w	fp, r5, #1
9001d1a4:	fb08 3707 	mla	r7, r8, r7, r3
9001d1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d1aa:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d1ae:	fb1c fc03 	smulbb	ip, ip, r3
9001d1b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d1b6:	1c73      	adds	r3, r6, #1
9001d1b8:	096d      	lsrs	r5, r5, #5
9001d1ba:	fb07 c70a 	mla	r7, r7, sl, ip
9001d1be:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001d1c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d1c6:	b2bf      	uxth	r7, r7
9001d1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d1ca:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d1ce:	1c7a      	adds	r2, r7, #1
9001d1d0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001d1d4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001d1d8:	4316      	orrs	r6, r2
9001d1da:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d1dc:	432e      	orrs	r6, r5
9001d1de:	f823 6b02 	strh.w	r6, [r3], #2
9001d1e2:	930c      	str	r3, [sp, #48]	; 0x30
9001d1e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d1e6:	4413      	add	r3, r2
9001d1e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d1ea:	931f      	str	r3, [sp, #124]	; 0x7c
9001d1ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d1ee:	4413      	add	r3, r2
9001d1f0:	9320      	str	r3, [sp, #128]	; 0x80
9001d1f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d1f4:	3b01      	subs	r3, #1
9001d1f6:	9311      	str	r3, [sp, #68]	; 0x44
9001d1f8:	e6db      	b.n	9001cfb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001d1fa:	b149      	cbz	r1, 9001d210 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001d1fc:	5cb2      	ldrb	r2, [r6, r2]
9001d1fe:	4628      	mov	r0, r5
9001d200:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d204:	4422      	add	r2, r4
9001d206:	462f      	mov	r7, r5
9001d208:	e771      	b.n	9001d0ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d20a:	4628      	mov	r0, r5
9001d20c:	462a      	mov	r2, r5
9001d20e:	e76e      	b.n	9001d0ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d210:	4628      	mov	r0, r5
9001d212:	462a      	mov	r2, r5
9001d214:	e7f7      	b.n	9001d206 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001d216:	b015      	add	sp, #84	; 0x54
9001d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d21c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001d21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d220:	880f      	ldrh	r7, [r1, #0]
9001d222:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001d226:	023c      	lsls	r4, r7, #8
9001d228:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001d22c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001d230:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001d234:	017c      	lsls	r4, r7, #5
9001d236:	00ff      	lsls	r7, r7, #3
9001d238:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001d23c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001d240:	b2ff      	uxtb	r7, r7
9001d242:	ea4b 0404 	orr.w	r4, fp, r4
9001d246:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001d24a:	4327      	orrs	r7, r4
9001d24c:	fb05 ca0e 	mla	sl, r5, lr, ip
9001d250:	2d00      	cmp	r5, #0
9001d252:	9701      	str	r7, [sp, #4]
9001d254:	eb02 080a 	add.w	r8, r2, sl
9001d258:	db7e      	blt.n	9001d358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d25a:	45a9      	cmp	r9, r5
9001d25c:	dd7c      	ble.n	9001d358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d25e:	f1bc 0f00 	cmp.w	ip, #0
9001d262:	db77      	blt.n	9001d354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d264:	45e6      	cmp	lr, ip
9001d266:	dd75      	ble.n	9001d354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d268:	f812 700a 	ldrb.w	r7, [r2, sl]
9001d26c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d270:	441f      	add	r7, r3
9001d272:	f11c 0201 	adds.w	r2, ip, #1
9001d276:	d472      	bmi.n	9001d35e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d278:	4596      	cmp	lr, r2
9001d27a:	dd70      	ble.n	9001d35e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d27c:	2800      	cmp	r0, #0
9001d27e:	d06e      	beq.n	9001d35e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d280:	f898 4001 	ldrb.w	r4, [r8, #1]
9001d284:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001d288:	441c      	add	r4, r3
9001d28a:	3501      	adds	r5, #1
9001d28c:	d46b      	bmi.n	9001d366 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d28e:	45a9      	cmp	r9, r5
9001d290:	dd69      	ble.n	9001d366 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d292:	2e00      	cmp	r6, #0
9001d294:	d067      	beq.n	9001d366 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d296:	f1bc 0f00 	cmp.w	ip, #0
9001d29a:	db62      	blt.n	9001d362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d29c:	45e6      	cmp	lr, ip
9001d29e:	dd60      	ble.n	9001d362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d2a0:	f818 500e 	ldrb.w	r5, [r8, lr]
9001d2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d2a8:	441d      	add	r5, r3
9001d2aa:	f11c 0201 	adds.w	r2, ip, #1
9001d2ae:	d45d      	bmi.n	9001d36c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d2b0:	4596      	cmp	lr, r2
9001d2b2:	dd5b      	ble.n	9001d36c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d2b4:	2800      	cmp	r0, #0
9001d2b6:	d059      	beq.n	9001d36c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d2b8:	44c6      	add	lr, r8
9001d2ba:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d2be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d2c2:	4413      	add	r3, r2
9001d2c4:	b280      	uxth	r0, r0
9001d2c6:	f897 e002 	ldrb.w	lr, [r7, #2]
9001d2ca:	b2b2      	uxth	r2, r6
9001d2cc:	f897 9000 	ldrb.w	r9, [r7]
9001d2d0:	787f      	ldrb	r7, [r7, #1]
9001d2d2:	fb00 f602 	mul.w	r6, r0, r2
9001d2d6:	0100      	lsls	r0, r0, #4
9001d2d8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001d2dc:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001d2e0:	1b80      	subs	r0, r0, r6
9001d2e2:	fa1f fc82 	uxth.w	ip, r2
9001d2e6:	b282      	uxth	r2, r0
9001d2e8:	78a0      	ldrb	r0, [r4, #2]
9001d2ea:	eba8 080c 	sub.w	r8, r8, ip
9001d2ee:	4350      	muls	r0, r2
9001d2f0:	fa1f f888 	uxth.w	r8, r8
9001d2f4:	fb08 0e0e 	mla	lr, r8, lr, r0
9001d2f8:	78a8      	ldrb	r0, [r5, #2]
9001d2fa:	fb0c e000 	mla	r0, ip, r0, lr
9001d2fe:	f893 e002 	ldrb.w	lr, [r3, #2]
9001d302:	fb06 0e0e 	mla	lr, r6, lr, r0
9001d306:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001d30a:	f894 e000 	ldrb.w	lr, [r4]
9001d30e:	fb02 fe0e 	mul.w	lr, r2, lr
9001d312:	fb08 e909 	mla	r9, r8, r9, lr
9001d316:	f895 e000 	ldrb.w	lr, [r5]
9001d31a:	fb0c 990e 	mla	r9, ip, lr, r9
9001d31e:	f893 e000 	ldrb.w	lr, [r3]
9001d322:	785b      	ldrb	r3, [r3, #1]
9001d324:	fb06 9e0e 	mla	lr, r6, lr, r9
9001d328:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001d32c:	ea4e 0e00 	orr.w	lr, lr, r0
9001d330:	7860      	ldrb	r0, [r4, #1]
9001d332:	4350      	muls	r0, r2
9001d334:	786a      	ldrb	r2, [r5, #1]
9001d336:	fb08 0007 	mla	r0, r8, r7, r0
9001d33a:	fb0c 0202 	mla	r2, ip, r2, r0
9001d33e:	fb06 2303 	mla	r3, r6, r3, r2
9001d342:	095b      	lsrs	r3, r3, #5
9001d344:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d348:	ea4e 0303 	orr.w	r3, lr, r3
9001d34c:	800b      	strh	r3, [r1, #0]
9001d34e:	b003      	add	sp, #12
9001d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d354:	af01      	add	r7, sp, #4
9001d356:	e78c      	b.n	9001d272 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001d358:	ac01      	add	r4, sp, #4
9001d35a:	4627      	mov	r7, r4
9001d35c:	e795      	b.n	9001d28a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d35e:	ac01      	add	r4, sp, #4
9001d360:	e793      	b.n	9001d28a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d362:	ad01      	add	r5, sp, #4
9001d364:	e7a1      	b.n	9001d2aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001d366:	ab01      	add	r3, sp, #4
9001d368:	461d      	mov	r5, r3
9001d36a:	e7ab      	b.n	9001d2c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001d36c:	ab01      	add	r3, sp, #4
9001d36e:	e7a9      	b.n	9001d2c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001d370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d374:	b08f      	sub	sp, #60	; 0x3c
9001d376:	920c      	str	r2, [sp, #48]	; 0x30
9001d378:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001d37a:	900d      	str	r0, [sp, #52]	; 0x34
9001d37c:	910a      	str	r1, [sp, #40]	; 0x28
9001d37e:	6850      	ldr	r0, [r2, #4]
9001d380:	9306      	str	r3, [sp, #24]
9001d382:	6812      	ldr	r2, [r2, #0]
9001d384:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001d388:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001d38c:	fb00 1303 	mla	r3, r0, r3, r1
9001d390:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d394:	9307      	str	r3, [sp, #28]
9001d396:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d398:	681b      	ldr	r3, [r3, #0]
9001d39a:	9308      	str	r3, [sp, #32]
9001d39c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d39e:	685c      	ldr	r4, [r3, #4]
9001d3a0:	3404      	adds	r4, #4
9001d3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d3a4:	2b00      	cmp	r3, #0
9001d3a6:	dc03      	bgt.n	9001d3b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d3aa:	2b00      	cmp	r3, #0
9001d3ac:	f340 81d5 	ble.w	9001d75a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d3b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d3b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d3b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d3ba:	1e48      	subs	r0, r1, #1
9001d3bc:	1e56      	subs	r6, r2, #1
9001d3be:	9b06      	ldr	r3, [sp, #24]
9001d3c0:	2b00      	cmp	r3, #0
9001d3c2:	f340 80b6 	ble.w	9001d532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001d3c6:	ea5f 472b 	movs.w	r7, fp, asr #16
9001d3ca:	ea4f 4325 	mov.w	r3, r5, asr #16
9001d3ce:	d406      	bmi.n	9001d3de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d3d0:	4287      	cmp	r7, r0
9001d3d2:	da04      	bge.n	9001d3de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d3d4:	2b00      	cmp	r3, #0
9001d3d6:	db02      	blt.n	9001d3de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d3d8:	42b3      	cmp	r3, r6
9001d3da:	f2c0 80ab 	blt.w	9001d534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001d3de:	3701      	adds	r7, #1
9001d3e0:	f100 809c 	bmi.w	9001d51c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3e4:	42b9      	cmp	r1, r7
9001d3e6:	f2c0 8099 	blt.w	9001d51c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3ea:	3301      	adds	r3, #1
9001d3ec:	f100 8096 	bmi.w	9001d51c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3f0:	429a      	cmp	r2, r3
9001d3f2:	f2c0 8093 	blt.w	9001d51c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d3f6:	9b06      	ldr	r3, [sp, #24]
9001d3f8:	930b      	str	r3, [sp, #44]	; 0x2c
9001d3fa:	9b07      	ldr	r3, [sp, #28]
9001d3fc:	9309      	str	r3, [sp, #36]	; 0x24
9001d3fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d400:	2b00      	cmp	r3, #0
9001d402:	f340 80b4 	ble.w	9001d56e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d406:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d408:	142e      	asrs	r6, r5, #16
9001d40a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d40c:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d410:	68c7      	ldr	r7, [r0, #12]
9001d412:	ea5f 402b 	movs.w	r0, fp, asr #16
9001d416:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d41a:	6892      	ldr	r2, [r2, #8]
9001d41c:	f100 80fb 	bmi.w	9001d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d420:	f102 3cff 	add.w	ip, r2, #4294967295
9001d424:	4560      	cmp	r0, ip
9001d426:	f280 80f6 	bge.w	9001d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d42a:	2e00      	cmp	r6, #0
9001d42c:	f2c0 80f3 	blt.w	9001d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d430:	f107 3cff 	add.w	ip, r7, #4294967295
9001d434:	4566      	cmp	r6, ip
9001d436:	f280 80ee 	bge.w	9001d616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d43a:	b212      	sxth	r2, r2
9001d43c:	fb06 0002 	mla	r0, r6, r2, r0
9001d440:	9e08      	ldr	r6, [sp, #32]
9001d442:	1837      	adds	r7, r6, r0
9001d444:	5c30      	ldrb	r0, [r6, r0]
9001d446:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001d44a:	eb04 0c08 	add.w	ip, r4, r8
9001d44e:	2b00      	cmp	r3, #0
9001d450:	f000 80d3 	beq.w	9001d5fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001d454:	787e      	ldrb	r6, [r7, #1]
9001d456:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d45a:	4426      	add	r6, r4
9001d45c:	2900      	cmp	r1, #0
9001d45e:	f000 80d4 	beq.w	9001d60a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001d462:	18b8      	adds	r0, r7, r2
9001d464:	5cba      	ldrb	r2, [r7, r2]
9001d466:	7840      	ldrb	r0, [r0, #1]
9001d468:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d46c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d470:	4422      	add	r2, r4
9001d472:	4420      	add	r0, r4
9001d474:	b29b      	uxth	r3, r3
9001d476:	78b7      	ldrb	r7, [r6, #2]
9001d478:	b289      	uxth	r1, r1
9001d47a:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d47e:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d482:	fb03 f901 	mul.w	r9, r3, r1
9001d486:	011b      	lsls	r3, r3, #4
9001d488:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d48c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d490:	eba3 0309 	sub.w	r3, r3, r9
9001d494:	b289      	uxth	r1, r1
9001d496:	b29b      	uxth	r3, r3
9001d498:	ebae 0e01 	sub.w	lr, lr, r1
9001d49c:	435f      	muls	r7, r3
9001d49e:	fa1f fe8e 	uxth.w	lr, lr
9001d4a2:	fb0e 770a 	mla	r7, lr, sl, r7
9001d4a6:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d4aa:	fb01 770a 	mla	r7, r1, sl, r7
9001d4ae:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d4b2:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d4b6:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d4ba:	f896 8000 	ldrb.w	r8, [r6]
9001d4be:	7876      	ldrb	r6, [r6, #1]
9001d4c0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d4c4:	fb03 f808 	mul.w	r8, r3, r8
9001d4c8:	4373      	muls	r3, r6
9001d4ca:	fb0e 8807 	mla	r8, lr, r7, r8
9001d4ce:	7817      	ldrb	r7, [r2, #0]
9001d4d0:	fb0e 330c 	mla	r3, lr, ip, r3
9001d4d4:	fb01 8807 	mla	r8, r1, r7, r8
9001d4d8:	7807      	ldrb	r7, [r0, #0]
9001d4da:	fb09 8707 	mla	r7, r9, r7, r8
9001d4de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d4e2:	ea47 070a 	orr.w	r7, r7, sl
9001d4e6:	f892 a001 	ldrb.w	sl, [r2, #1]
9001d4ea:	fb01 310a 	mla	r1, r1, sl, r3
9001d4ee:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d4f4:	fb09 1a0a 	mla	sl, r9, sl, r1
9001d4f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d4fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d500:	ea47 070a 	orr.w	r7, r7, sl
9001d504:	801f      	strh	r7, [r3, #0]
9001d506:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d508:	3302      	adds	r3, #2
9001d50a:	9309      	str	r3, [sp, #36]	; 0x24
9001d50c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d50e:	449b      	add	fp, r3
9001d510:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d512:	441d      	add	r5, r3
9001d514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d516:	3b01      	subs	r3, #1
9001d518:	930b      	str	r3, [sp, #44]	; 0x2c
9001d51a:	e770      	b.n	9001d3fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001d51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d51e:	449b      	add	fp, r3
9001d520:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d522:	441d      	add	r5, r3
9001d524:	9b06      	ldr	r3, [sp, #24]
9001d526:	3b01      	subs	r3, #1
9001d528:	9306      	str	r3, [sp, #24]
9001d52a:	9b07      	ldr	r3, [sp, #28]
9001d52c:	3302      	adds	r3, #2
9001d52e:	9307      	str	r3, [sp, #28]
9001d530:	e745      	b.n	9001d3be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001d532:	d023      	beq.n	9001d57c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001d534:	9b06      	ldr	r3, [sp, #24]
9001d536:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001d538:	3b01      	subs	r3, #1
9001d53a:	fb00 b003 	mla	r0, r0, r3, fp
9001d53e:	1400      	asrs	r0, r0, #16
9001d540:	f53f af59 	bmi.w	9001d3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d544:	3901      	subs	r1, #1
9001d546:	4288      	cmp	r0, r1
9001d548:	f6bf af55 	bge.w	9001d3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d54c:	991c      	ldr	r1, [sp, #112]	; 0x70
9001d54e:	fb01 5303 	mla	r3, r1, r3, r5
9001d552:	141b      	asrs	r3, r3, #16
9001d554:	f53f af4f 	bmi.w	9001d3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d558:	3a01      	subs	r2, #1
9001d55a:	4293      	cmp	r3, r2
9001d55c:	f6bf af4b 	bge.w	9001d3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d560:	9b06      	ldr	r3, [sp, #24]
9001d562:	9309      	str	r3, [sp, #36]	; 0x24
9001d564:	9b07      	ldr	r3, [sp, #28]
9001d566:	930b      	str	r3, [sp, #44]	; 0x2c
9001d568:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d56a:	2b00      	cmp	r3, #0
9001d56c:	dc70      	bgt.n	9001d650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001d56e:	9b06      	ldr	r3, [sp, #24]
9001d570:	9a07      	ldr	r2, [sp, #28]
9001d572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d576:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d57a:	9307      	str	r3, [sp, #28]
9001d57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d57e:	2b00      	cmp	r3, #0
9001d580:	f340 80eb 	ble.w	9001d75a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d588:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d58a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d58e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d592:	eef0 6a62 	vmov.f32	s13, s5
9001d596:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d59a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d59e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d5a2:	ee16 ba90 	vmov	fp, s13
9001d5a6:	eef0 6a43 	vmov.f32	s13, s6
9001d5aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d5ae:	ee16 5a90 	vmov	r5, s13
9001d5b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d5b6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d5ba:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d5be:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d5c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d5c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d5ca:	ee12 2a90 	vmov	r2, s5
9001d5ce:	eef0 2a47 	vmov.f32	s5, s14
9001d5d2:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5d6:	ee13 2a10 	vmov	r2, s6
9001d5da:	931b      	str	r3, [sp, #108]	; 0x6c
9001d5dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d5de:	eeb0 3a67 	vmov.f32	s6, s15
9001d5e2:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5e6:	931c      	str	r3, [sp, #112]	; 0x70
9001d5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d5ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001d5ec:	3b01      	subs	r3, #1
9001d5ee:	930a      	str	r3, [sp, #40]	; 0x28
9001d5f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d5f2:	bf08      	it	eq
9001d5f4:	4613      	moveq	r3, r2
9001d5f6:	9306      	str	r3, [sp, #24]
9001d5f8:	e6d3      	b.n	9001d3a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d5fa:	b149      	cbz	r1, 9001d610 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001d5fc:	5cba      	ldrb	r2, [r7, r2]
9001d5fe:	4660      	mov	r0, ip
9001d600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d604:	4422      	add	r2, r4
9001d606:	4666      	mov	r6, ip
9001d608:	e734      	b.n	9001d474 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d60a:	4660      	mov	r0, ip
9001d60c:	4662      	mov	r2, ip
9001d60e:	e731      	b.n	9001d474 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d610:	4660      	mov	r0, ip
9001d612:	4662      	mov	r2, ip
9001d614:	e7f7      	b.n	9001d606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d616:	f110 0c01 	adds.w	ip, r0, #1
9001d61a:	f53f af74 	bmi.w	9001d506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d61e:	4562      	cmp	r2, ip
9001d620:	f6ff af71 	blt.w	9001d506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d624:	f116 0c01 	adds.w	ip, r6, #1
9001d628:	f53f af6d 	bmi.w	9001d506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d62c:	4567      	cmp	r7, ip
9001d62e:	f6ff af6a 	blt.w	9001d506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d632:	b23f      	sxth	r7, r7
9001d634:	b212      	sxth	r2, r2
9001d636:	9701      	str	r7, [sp, #4]
9001d638:	9200      	str	r2, [sp, #0]
9001d63a:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001d63e:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001d642:	4623      	mov	r3, r4
9001d644:	980d      	ldr	r0, [sp, #52]	; 0x34
9001d646:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001d64a:	f7ff fde7 	bl	9001d21c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001d64e:	e75a      	b.n	9001d506 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d650:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d652:	ea4f 462b 	mov.w	r6, fp, asr #16
9001d656:	1428      	asrs	r0, r5, #16
9001d658:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d65c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d660:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d664:	fb02 6000 	mla	r0, r2, r0, r6
9001d668:	9e08      	ldr	r6, [sp, #32]
9001d66a:	f816 8000 	ldrb.w	r8, [r6, r0]
9001d66e:	1837      	adds	r7, r6, r0
9001d670:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001d674:	eb04 0c08 	add.w	ip, r4, r8
9001d678:	2b00      	cmp	r3, #0
9001d67a:	d060      	beq.n	9001d73e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001d67c:	787e      	ldrb	r6, [r7, #1]
9001d67e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d682:	4426      	add	r6, r4
9001d684:	2900      	cmp	r1, #0
9001d686:	d062      	beq.n	9001d74e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001d688:	18b8      	adds	r0, r7, r2
9001d68a:	5cba      	ldrb	r2, [r7, r2]
9001d68c:	7840      	ldrb	r0, [r0, #1]
9001d68e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d692:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d696:	4422      	add	r2, r4
9001d698:	4420      	add	r0, r4
9001d69a:	b29b      	uxth	r3, r3
9001d69c:	78b7      	ldrb	r7, [r6, #2]
9001d69e:	b289      	uxth	r1, r1
9001d6a0:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d6a4:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d6a8:	fb03 f901 	mul.w	r9, r3, r1
9001d6ac:	011b      	lsls	r3, r3, #4
9001d6ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d6b2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d6b6:	eba3 0309 	sub.w	r3, r3, r9
9001d6ba:	b289      	uxth	r1, r1
9001d6bc:	b29b      	uxth	r3, r3
9001d6be:	ebae 0e01 	sub.w	lr, lr, r1
9001d6c2:	435f      	muls	r7, r3
9001d6c4:	fa1f fe8e 	uxth.w	lr, lr
9001d6c8:	fb0e 770a 	mla	r7, lr, sl, r7
9001d6cc:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d6d0:	fb01 770a 	mla	r7, r1, sl, r7
9001d6d4:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d6d8:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d6dc:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d6e0:	f896 8000 	ldrb.w	r8, [r6]
9001d6e4:	7876      	ldrb	r6, [r6, #1]
9001d6e6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d6ea:	fb03 f808 	mul.w	r8, r3, r8
9001d6ee:	4373      	muls	r3, r6
9001d6f0:	7856      	ldrb	r6, [r2, #1]
9001d6f2:	fb0e 8807 	mla	r8, lr, r7, r8
9001d6f6:	7817      	ldrb	r7, [r2, #0]
9001d6f8:	fb0e 330c 	mla	r3, lr, ip, r3
9001d6fc:	fb01 8807 	mla	r8, r1, r7, r8
9001d700:	7807      	ldrb	r7, [r0, #0]
9001d702:	fb01 3306 	mla	r3, r1, r6, r3
9001d706:	fb09 8707 	mla	r7, r9, r7, r8
9001d70a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d70e:	ea47 070a 	orr.w	r7, r7, sl
9001d712:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d716:	fb09 3a0a 	mla	sl, r9, sl, r3
9001d71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d71c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d720:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d724:	ea47 070a 	orr.w	r7, r7, sl
9001d728:	f823 7b02 	strh.w	r7, [r3], #2
9001d72c:	930b      	str	r3, [sp, #44]	; 0x2c
9001d72e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d730:	449b      	add	fp, r3
9001d732:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d734:	441d      	add	r5, r3
9001d736:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d738:	3b01      	subs	r3, #1
9001d73a:	9309      	str	r3, [sp, #36]	; 0x24
9001d73c:	e714      	b.n	9001d568 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001d73e:	b149      	cbz	r1, 9001d754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001d740:	5cba      	ldrb	r2, [r7, r2]
9001d742:	4660      	mov	r0, ip
9001d744:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d748:	4422      	add	r2, r4
9001d74a:	4666      	mov	r6, ip
9001d74c:	e7a5      	b.n	9001d69a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d74e:	4660      	mov	r0, ip
9001d750:	4662      	mov	r2, ip
9001d752:	e7a2      	b.n	9001d69a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d754:	4660      	mov	r0, ip
9001d756:	4662      	mov	r2, ip
9001d758:	e7f7      	b.n	9001d74a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001d75a:	b00f      	add	sp, #60	; 0x3c
9001d75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d760 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d764:	b085      	sub	sp, #20
9001d766:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001d76a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001d76e:	9102      	str	r1, [sp, #8]
9001d770:	2c00      	cmp	r4, #0
9001d772:	fb04 710c 	mla	r1, r4, ip, r7
9001d776:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001d77a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001d77e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001d782:	eb02 0e01 	add.w	lr, r2, r1
9001d786:	f2c0 8122 	blt.w	9001d9ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d78a:	45a0      	cmp	r8, r4
9001d78c:	f340 811f 	ble.w	9001d9ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d790:	2f00      	cmp	r7, #0
9001d792:	f2c0 811a 	blt.w	9001d9ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d796:	45bc      	cmp	ip, r7
9001d798:	f340 8117 	ble.w	9001d9ca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d79c:	5c52      	ldrb	r2, [r2, r1]
9001d79e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001d7a2:	1c7a      	adds	r2, r7, #1
9001d7a4:	f100 8116 	bmi.w	9001d9d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d7a8:	4594      	cmp	ip, r2
9001d7aa:	f340 8113 	ble.w	9001d9d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d7ae:	2e00      	cmp	r6, #0
9001d7b0:	f000 8112 	beq.w	9001d9d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001d7b4:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d7b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001d7bc:	3401      	adds	r4, #1
9001d7be:	f100 810f 	bmi.w	9001d9e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d7c2:	45a0      	cmp	r8, r4
9001d7c4:	f340 810c 	ble.w	9001d9e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d7c8:	2800      	cmp	r0, #0
9001d7ca:	f000 810c 	beq.w	9001d9e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001d7ce:	2f00      	cmp	r7, #0
9001d7d0:	f2c0 8104 	blt.w	9001d9dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d7d4:	45bc      	cmp	ip, r7
9001d7d6:	f340 8101 	ble.w	9001d9dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d7da:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001d7de:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001d7e2:	3701      	adds	r7, #1
9001d7e4:	f100 8102 	bmi.w	9001d9ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d7e8:	45bc      	cmp	ip, r7
9001d7ea:	f340 80ff 	ble.w	9001d9ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d7ee:	2e00      	cmp	r6, #0
9001d7f0:	f000 80fe 	beq.w	9001d9f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001d7f4:	44f4      	add	ip, lr
9001d7f6:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001d7fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001d7fe:	b2b6      	uxth	r6, r6
9001d800:	b280      	uxth	r0, r0
9001d802:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001d806:	fb00 fe06 	mul.w	lr, r0, r6
9001d80a:	0136      	lsls	r6, r6, #4
9001d80c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001d810:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001d814:	eba6 070e 	sub.w	r7, r6, lr
9001d818:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001d81c:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001d820:	b280      	uxth	r0, r0
9001d822:	b2bf      	uxth	r7, r7
9001d824:	1a1b      	subs	r3, r3, r0
9001d826:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001d82a:	fb0a f607 	mul.w	r6, sl, r7
9001d82e:	b29b      	uxth	r3, r3
9001d830:	fb0b 6603 	mla	r6, fp, r3, r6
9001d834:	fb00 6609 	mla	r6, r0, r9, r6
9001d838:	fb0e 6608 	mla	r6, lr, r8, r6
9001d83c:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d840:	9600      	str	r6, [sp, #0]
9001d842:	2e00      	cmp	r6, #0
9001d844:	f000 80be 	beq.w	9001d9c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001d848:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001d84c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001d850:	9e02      	ldr	r6, [sp, #8]
9001d852:	fb0b fc0c 	mul.w	ip, fp, ip
9001d856:	fb0b f505 	mul.w	r5, fp, r5
9001d85a:	8836      	ldrh	r6, [r6, #0]
9001d85c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001d860:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d864:	9501      	str	r5, [sp, #4]
9001d866:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001d86a:	44dc      	add	ip, fp
9001d86c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d870:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001d874:	9503      	str	r5, [sp, #12]
9001d876:	9d01      	ldr	r5, [sp, #4]
9001d878:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001d87c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001d880:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001d884:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d888:	fb0a fc0c 	mul.w	ip, sl, ip
9001d88c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001d890:	fb0a fa01 	mul.w	sl, sl, r1
9001d894:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001d898:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d89c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001d8a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d8a4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001d8a8:	4465      	add	r5, ip
9001d8aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d8ae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001d8b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d8b6:	fb09 fc0c 	mul.w	ip, r9, ip
9001d8ba:	0a2d      	lsrs	r5, r5, #8
9001d8bc:	fb09 f904 	mul.w	r9, r9, r4
9001d8c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d8c4:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001d8c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d8cc:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001d8d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d8d4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d8d8:	437d      	muls	r5, r7
9001d8da:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001d8de:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001d8e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001d8e6:	4461      	add	r1, ip
9001d8e8:	fb08 f404 	mul.w	r4, r8, r4
9001d8ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d8f0:	fb08 f802 	mul.w	r8, r8, r2
9001d8f4:	0a09      	lsrs	r1, r1, #8
9001d8f6:	0a22      	lsrs	r2, r4, #8
9001d8f8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001d8fc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d900:	fb07 f70a 	mul.w	r7, r7, sl
9001d904:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001d908:	4414      	add	r4, r2
9001d90a:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001d90e:	0a24      	lsrs	r4, r4, #8
9001d910:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001d914:	9a03      	ldr	r2, [sp, #12]
9001d916:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001d91a:	fb02 5503 	mla	r5, r2, r3, r5
9001d91e:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001d922:	9a00      	ldr	r2, [sp, #0]
9001d924:	fb04 540e 	mla	r4, r4, lr, r5
9001d928:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001d92c:	1235      	asrs	r5, r6, #8
9001d92e:	fb01 4100 	mla	r1, r1, r0, r4
9001d932:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d936:	0a09      	lsrs	r1, r1, #8
9001d938:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001d93c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001d940:	fb03 7101 	mla	r1, r3, r1, r7
9001d944:	fb0e 1e08 	mla	lr, lr, r8, r1
9001d948:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001d94c:	fb00 e101 	mla	r1, r0, r1, lr
9001d950:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001d954:	b287      	uxth	r7, r0
9001d956:	0a09      	lsrs	r1, r1, #8
9001d958:	437a      	muls	r2, r7
9001d95a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d95e:	1c53      	adds	r3, r2, #1
9001d960:	4321      	orrs	r1, r4
9001d962:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d966:	0c0a      	lsrs	r2, r1, #16
9001d968:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001d96c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001d970:	b2c8      	uxtb	r0, r1
9001d972:	fb12 f207 	smulbb	r2, r2, r7
9001d976:	fb14 f407 	smulbb	r4, r4, r7
9001d97a:	b2db      	uxtb	r3, r3
9001d97c:	fb10 f007 	smulbb	r0, r0, r7
9001d980:	fb05 2503 	mla	r5, r5, r3, r2
9001d984:	10f2      	asrs	r2, r6, #3
9001d986:	00f6      	lsls	r6, r6, #3
9001d988:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001d98c:	b2ad      	uxth	r5, r5
9001d98e:	b2f6      	uxtb	r6, r6
9001d990:	fb02 4203 	mla	r2, r2, r3, r4
9001d994:	fb06 0303 	mla	r3, r6, r3, r0
9001d998:	b294      	uxth	r4, r2
9001d99a:	b299      	uxth	r1, r3
9001d99c:	1c6b      	adds	r3, r5, #1
9001d99e:	1c62      	adds	r2, r4, #1
9001d9a0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d9a4:	1c4b      	adds	r3, r1, #1
9001d9a6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001d9aa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d9ae:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d9b2:	0952      	lsrs	r2, r2, #5
9001d9b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d9b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d9bc:	432b      	orrs	r3, r5
9001d9be:	4313      	orrs	r3, r2
9001d9c0:	9a02      	ldr	r2, [sp, #8]
9001d9c2:	8013      	strh	r3, [r2, #0]
9001d9c4:	b005      	add	sp, #20
9001d9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d9ca:	2500      	movs	r5, #0
9001d9cc:	e6e9      	b.n	9001d7a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001d9ce:	2100      	movs	r1, #0
9001d9d0:	460d      	mov	r5, r1
9001d9d2:	e6f3      	b.n	9001d7bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d9d4:	2100      	movs	r1, #0
9001d9d6:	e6f1      	b.n	9001d7bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d9d8:	4631      	mov	r1, r6
9001d9da:	e6ef      	b.n	9001d7bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d9dc:	2400      	movs	r4, #0
9001d9de:	e700      	b.n	9001d7e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001d9e0:	2200      	movs	r2, #0
9001d9e2:	4614      	mov	r4, r2
9001d9e4:	e70b      	b.n	9001d7fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d9e6:	4602      	mov	r2, r0
9001d9e8:	4604      	mov	r4, r0
9001d9ea:	e708      	b.n	9001d7fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d9ec:	2200      	movs	r2, #0
9001d9ee:	e706      	b.n	9001d7fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d9f0:	4632      	mov	r2, r6
9001d9f2:	e704      	b.n	9001d7fe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001d9f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d9f8:	b09f      	sub	sp, #124	; 0x7c
9001d9fa:	921b      	str	r2, [sp, #108]	; 0x6c
9001d9fc:	9309      	str	r3, [sp, #36]	; 0x24
9001d9fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001da00:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001da04:	901d      	str	r0, [sp, #116]	; 0x74
9001da06:	931c      	str	r3, [sp, #112]	; 0x70
9001da08:	6850      	ldr	r0, [r2, #4]
9001da0a:	9119      	str	r1, [sp, #100]	; 0x64
9001da0c:	6812      	ldr	r2, [r2, #0]
9001da0e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001da10:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001da14:	fb00 1303 	mla	r3, r0, r3, r1
9001da18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001da1c:	930c      	str	r3, [sp, #48]	; 0x30
9001da1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001da20:	681b      	ldr	r3, [r3, #0]
9001da22:	9312      	str	r3, [sp, #72]	; 0x48
9001da24:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001da26:	685e      	ldr	r6, [r3, #4]
9001da28:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001da2c:	3604      	adds	r6, #4
9001da2e:	930d      	str	r3, [sp, #52]	; 0x34
9001da30:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001da32:	2b00      	cmp	r3, #0
9001da34:	dc03      	bgt.n	9001da3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001da36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001da38:	2b00      	cmp	r3, #0
9001da3a:	f340 8387 	ble.w	9001e14c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001da3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001da40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001da44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001da48:	1e48      	subs	r0, r1, #1
9001da4a:	1e57      	subs	r7, r2, #1
9001da4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001da4e:	2b00      	cmp	r3, #0
9001da50:	f340 8194 	ble.w	9001dd7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001da54:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001da56:	142b      	asrs	r3, r5, #16
9001da58:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001da5c:	d406      	bmi.n	9001da6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da5e:	4584      	cmp	ip, r0
9001da60:	da04      	bge.n	9001da6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da62:	2b00      	cmp	r3, #0
9001da64:	db02      	blt.n	9001da6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001da66:	42bb      	cmp	r3, r7
9001da68:	f2c0 8189 	blt.w	9001dd7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001da6c:	f11c 0c01 	adds.w	ip, ip, #1
9001da70:	f100 8177 	bmi.w	9001dd62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da74:	4561      	cmp	r1, ip
9001da76:	f2c0 8174 	blt.w	9001dd62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da7a:	3301      	adds	r3, #1
9001da7c:	f100 8171 	bmi.w	9001dd62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da80:	429a      	cmp	r2, r3
9001da82:	f2c0 816e 	blt.w	9001dd62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001da86:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001da88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001da8a:	931a      	str	r3, [sp, #104]	; 0x68
9001da8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001da8e:	2b00      	cmp	r3, #0
9001da90:	f340 8193 	ble.w	9001ddba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001da94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001da96:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001da9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001da9e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001daa2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001daa4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001daa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001daaa:	141b      	asrs	r3, r3, #16
9001daac:	f100 81d6 	bmi.w	9001de5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001dab0:	f100 38ff 	add.w	r8, r0, #4294967295
9001dab4:	4543      	cmp	r3, r8
9001dab6:	f280 81d1 	bge.w	9001de5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001daba:	f1bc 0f00 	cmp.w	ip, #0
9001dabe:	f2c0 81cd 	blt.w	9001de5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001dac2:	f10e 38ff 	add.w	r8, lr, #4294967295
9001dac6:	45c4      	cmp	ip, r8
9001dac8:	f280 81c8 	bge.w	9001de5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001dacc:	b200      	sxth	r0, r0
9001dace:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001dad0:	fb0c 3300 	mla	r3, ip, r0, r3
9001dad4:	eb04 0803 	add.w	r8, r4, r3
9001dad8:	5ce3      	ldrb	r3, [r4, r3]
9001dada:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001dade:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001dae2:	2a00      	cmp	r2, #0
9001dae4:	f000 81af 	beq.w	9001de46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001dae8:	f898 c001 	ldrb.w	ip, [r8, #1]
9001daec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001daf0:	940e      	str	r4, [sp, #56]	; 0x38
9001daf2:	0e24      	lsrs	r4, r4, #24
9001daf4:	9415      	str	r4, [sp, #84]	; 0x54
9001daf6:	b179      	cbz	r1, 9001db18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001daf8:	eb08 0c00 	add.w	ip, r8, r0
9001dafc:	f818 0000 	ldrb.w	r0, [r8, r0]
9001db00:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001db04:	900a      	str	r0, [sp, #40]	; 0x28
9001db06:	0e00      	lsrs	r0, r0, #24
9001db08:	9013      	str	r0, [sp, #76]	; 0x4c
9001db0a:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001db0e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001db12:	900f      	str	r0, [sp, #60]	; 0x3c
9001db14:	0e00      	lsrs	r0, r0, #24
9001db16:	9016      	str	r0, [sp, #88]	; 0x58
9001db18:	b292      	uxth	r2, r2
9001db1a:	9815      	ldr	r0, [sp, #84]	; 0x54
9001db1c:	b289      	uxth	r1, r1
9001db1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001db20:	fb02 f901 	mul.w	r9, r2, r1
9001db24:	0112      	lsls	r2, r2, #4
9001db26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001db2a:	eba2 0809 	sub.w	r8, r2, r9
9001db2e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001db32:	b289      	uxth	r1, r1
9001db34:	fa1f f888 	uxth.w	r8, r8
9001db38:	1a52      	subs	r2, r2, r1
9001db3a:	fb08 f000 	mul.w	r0, r8, r0
9001db3e:	b292      	uxth	r2, r2
9001db40:	fb02 000e 	mla	r0, r2, lr, r0
9001db44:	fb01 0004 	mla	r0, r1, r4, r0
9001db48:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001db4a:	fb09 0004 	mla	r0, r9, r4, r0
9001db4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001db52:	2800      	cmp	r0, #0
9001db54:	f000 80fa 	beq.w	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001db58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001db5c:	d01b      	beq.n	9001db96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001db5e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001db62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001db66:	fb0e fa0a 	mul.w	sl, lr, sl
9001db6a:	fb0e fe03 	mul.w	lr, lr, r3
9001db6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001db72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001db76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001db7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001db7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001db82:	4453      	add	r3, sl
9001db84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001db88:	0a1b      	lsrs	r3, r3, #8
9001db8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001db8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001db92:	ea43 030c 	orr.w	r3, r3, ip
9001db96:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001db98:	2cff      	cmp	r4, #255	; 0xff
9001db9a:	d021      	beq.n	9001dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001db9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001db9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dba2:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001dba4:	fb04 fb0b 	mul.w	fp, r4, fp
9001dba8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dbaa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dbae:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001dbb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dbb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dbb8:	fb04 fa0a 	mul.w	sl, r4, sl
9001dbbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dbc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dbc4:	44de      	add	lr, fp
9001dbc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dbca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dbce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dbd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dbd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dbda:	ea4e 040a 	orr.w	r4, lr, sl
9001dbde:	940e      	str	r4, [sp, #56]	; 0x38
9001dbe0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dbe2:	2cff      	cmp	r4, #255	; 0xff
9001dbe4:	d021      	beq.n	9001dc2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001dbe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dbe8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dbec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dbee:	fb04 fb0b 	mul.w	fp, r4, fp
9001dbf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dbf4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dbf8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001dbfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dbfe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dc02:	fb04 fa0a 	mul.w	sl, r4, sl
9001dc06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dc0e:	44de      	add	lr, fp
9001dc10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dc14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dc18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dc1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dc24:	ea4e 040a 	orr.w	r4, lr, sl
9001dc28:	940a      	str	r4, [sp, #40]	; 0x28
9001dc2a:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dc2c:	2cff      	cmp	r4, #255	; 0xff
9001dc2e:	d021      	beq.n	9001dc74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001dc30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dc32:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dc36:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dc38:	fb04 fb0b 	mul.w	fp, r4, fp
9001dc3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dc3e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dc42:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dc44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dc48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dc4c:	fb04 fa0a 	mul.w	sl, r4, sl
9001dc50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dc58:	44de      	add	lr, fp
9001dc5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dc5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001dc62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dc66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dc6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dc6e:	ea4e 040a 	orr.w	r4, lr, sl
9001dc72:	940f      	str	r4, [sp, #60]	; 0x3c
9001dc74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc76:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001dc7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001dc7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001dc82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001dc84:	fb08 fc0c 	mul.w	ip, r8, ip
9001dc88:	fb02 cc0e 	mla	ip, r2, lr, ip
9001dc8c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dc90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dc92:	fb01 cc0e 	mla	ip, r1, lr, ip
9001dc96:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001dc9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dc9c:	fb09 cc0e 	mla	ip, r9, lr, ip
9001dca0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001dca4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001dca6:	fb08 f80e 	mul.w	r8, r8, lr
9001dcaa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dcae:	fb02 8303 	mla	r3, r2, r3, r8
9001dcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001dcb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dcb8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001dcbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001dcbe:	fb01 330a 	mla	r3, r1, sl, r3
9001dcc2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001dcc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001dcc8:	fb09 3901 	mla	r9, r9, r1, r3
9001dccc:	883b      	ldrh	r3, [r7, #0]
9001dcce:	4342      	muls	r2, r0
9001dcd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001dcd4:	1c50      	adds	r0, r2, #1
9001dcd6:	1219      	asrs	r1, r3, #8
9001dcd8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001dcdc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001dce0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001dce4:	ea4c 0c09 	orr.w	ip, ip, r9
9001dce8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001dcec:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001dcf0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001dcf4:	b2c0      	uxtb	r0, r0
9001dcf6:	fb12 f204 	smulbb	r2, r2, r4
9001dcfa:	fa5f fc8c 	uxtb.w	ip, ip
9001dcfe:	fb1e fe04 	smulbb	lr, lr, r4
9001dd02:	fb01 2100 	mla	r1, r1, r0, r2
9001dd06:	10da      	asrs	r2, r3, #3
9001dd08:	fb1c fc04 	smulbb	ip, ip, r4
9001dd0c:	00db      	lsls	r3, r3, #3
9001dd0e:	b289      	uxth	r1, r1
9001dd10:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001dd14:	b2db      	uxtb	r3, r3
9001dd16:	fb02 e200 	mla	r2, r2, r0, lr
9001dd1a:	fb03 c300 	mla	r3, r3, r0, ip
9001dd1e:	b292      	uxth	r2, r2
9001dd20:	fa1f fc83 	uxth.w	ip, r3
9001dd24:	1c4b      	adds	r3, r1, #1
9001dd26:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001dd2a:	f10c 0301 	add.w	r3, ip, #1
9001dd2e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001dd32:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001dd36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001dd3a:	430b      	orrs	r3, r1
9001dd3c:	1c51      	adds	r1, r2, #1
9001dd3e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001dd42:	0952      	lsrs	r2, r2, #5
9001dd44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dd48:	4313      	orrs	r3, r2
9001dd4a:	803b      	strh	r3, [r7, #0]
9001dd4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dd4e:	3702      	adds	r7, #2
9001dd50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001dd52:	441a      	add	r2, r3
9001dd54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dd56:	441d      	add	r5, r3
9001dd58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001dd5a:	9229      	str	r2, [sp, #164]	; 0xa4
9001dd5c:	3b01      	subs	r3, #1
9001dd5e:	931a      	str	r3, [sp, #104]	; 0x68
9001dd60:	e694      	b.n	9001da8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001dd62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dd64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dd66:	441c      	add	r4, r3
9001dd68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dd6a:	441d      	add	r5, r3
9001dd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd6e:	9429      	str	r4, [sp, #164]	; 0xa4
9001dd70:	3b01      	subs	r3, #1
9001dd72:	9309      	str	r3, [sp, #36]	; 0x24
9001dd74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001dd76:	3302      	adds	r3, #2
9001dd78:	930c      	str	r3, [sp, #48]	; 0x30
9001dd7a:	e667      	b.n	9001da4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001dd7c:	d024      	beq.n	9001ddc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001dd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd80:	982b      	ldr	r0, [sp, #172]	; 0xac
9001dd82:	3b01      	subs	r3, #1
9001dd84:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dd86:	fb00 4003 	mla	r0, r0, r3, r4
9001dd8a:	1400      	asrs	r0, r0, #16
9001dd8c:	f53f ae7b 	bmi.w	9001da86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd90:	3901      	subs	r1, #1
9001dd92:	4288      	cmp	r0, r1
9001dd94:	f6bf ae77 	bge.w	9001da86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dd98:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001dd9a:	fb01 5303 	mla	r3, r1, r3, r5
9001dd9e:	141b      	asrs	r3, r3, #16
9001dda0:	f53f ae71 	bmi.w	9001da86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dda4:	3a01      	subs	r2, #1
9001dda6:	4293      	cmp	r3, r2
9001dda8:	f6bf ae6d 	bge.w	9001da86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ddac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001ddb0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001ddb4:	f1bb 0f00 	cmp.w	fp, #0
9001ddb8:	dc70      	bgt.n	9001de9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001ddba:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ddbc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001ddc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ddc2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001ddc6:	930c      	str	r3, [sp, #48]	; 0x30
9001ddc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001ddca:	2b00      	cmp	r3, #0
9001ddcc:	f340 81be 	ble.w	9001e14c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001ddd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ddd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ddd6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ddda:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ddde:	eef0 6a62 	vmov.f32	s13, s5
9001dde2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001dde6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ddea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ddee:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001ddf2:	eef0 6a43 	vmov.f32	s13, s6
9001ddf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ddfa:	ee16 5a90 	vmov	r5, s13
9001ddfe:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001de02:	ee61 7a27 	vmul.f32	s15, s2, s15
9001de06:	ee77 2a62 	vsub.f32	s5, s14, s5
9001de0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001de0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001de12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001de16:	ee12 2a90 	vmov	r2, s5
9001de1a:	eef0 2a47 	vmov.f32	s5, s14
9001de1e:	fb92 f3f3 	sdiv	r3, r2, r3
9001de22:	ee13 2a10 	vmov	r2, s6
9001de26:	932b      	str	r3, [sp, #172]	; 0xac
9001de28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001de2a:	eeb0 3a67 	vmov.f32	s6, s15
9001de2e:	fb92 f3f3 	sdiv	r3, r2, r3
9001de32:	932c      	str	r3, [sp, #176]	; 0xb0
9001de34:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001de36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001de38:	3b01      	subs	r3, #1
9001de3a:	9319      	str	r3, [sp, #100]	; 0x64
9001de3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001de3e:	bf08      	it	eq
9001de40:	4613      	moveq	r3, r2
9001de42:	9309      	str	r3, [sp, #36]	; 0x24
9001de44:	e5f4      	b.n	9001da30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001de46:	2900      	cmp	r1, #0
9001de48:	f43f ae66 	beq.w	9001db18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001de4c:	f818 0000 	ldrb.w	r0, [r8, r0]
9001de50:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001de54:	900a      	str	r0, [sp, #40]	; 0x28
9001de56:	0e00      	lsrs	r0, r0, #24
9001de58:	9013      	str	r0, [sp, #76]	; 0x4c
9001de5a:	e65d      	b.n	9001db18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001de5c:	f113 0801 	adds.w	r8, r3, #1
9001de60:	f53f af74 	bmi.w	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de64:	4540      	cmp	r0, r8
9001de66:	f6ff af71 	blt.w	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de6a:	f11c 0801 	adds.w	r8, ip, #1
9001de6e:	f53f af6d 	bmi.w	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de72:	45c6      	cmp	lr, r8
9001de74:	f6ff af6a 	blt.w	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de78:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001de7a:	b200      	sxth	r0, r0
9001de7c:	9302      	str	r3, [sp, #8]
9001de7e:	fa0f f38e 	sxth.w	r3, lr
9001de82:	9000      	str	r0, [sp, #0]
9001de84:	9301      	str	r3, [sp, #4]
9001de86:	4633      	mov	r3, r6
9001de88:	981d      	ldr	r0, [sp, #116]	; 0x74
9001de8a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001de8e:	e9cd c203 	strd	ip, r2, [sp, #12]
9001de92:	4639      	mov	r1, r7
9001de94:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001de96:	f7ff fc63 	bl	9001d760 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001de9a:	e757      	b.n	9001dd4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001de9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001de9e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001dea2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dea4:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001dea8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001deaa:	1427      	asrs	r7, r4, #16
9001deac:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001deae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001deb2:	142b      	asrs	r3, r5, #16
9001deb4:	fb01 7303 	mla	r3, r1, r3, r7
9001deb8:	18e7      	adds	r7, r4, r3
9001deba:	5ce3      	ldrb	r3, [r4, r3]
9001debc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001dec0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001dec4:	2a00      	cmp	r2, #0
9001dec6:	f000 8137 	beq.w	9001e138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001deca:	f897 e001 	ldrb.w	lr, [r7, #1]
9001dece:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001ded2:	9410      	str	r4, [sp, #64]	; 0x40
9001ded4:	0e24      	lsrs	r4, r4, #24
9001ded6:	9417      	str	r4, [sp, #92]	; 0x5c
9001ded8:	b170      	cbz	r0, 9001def8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001deda:	eb07 0e01 	add.w	lr, r7, r1
9001dede:	5c79      	ldrb	r1, [r7, r1]
9001dee0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dee4:	910b      	str	r1, [sp, #44]	; 0x2c
9001dee6:	0e09      	lsrs	r1, r1, #24
9001dee8:	9114      	str	r1, [sp, #80]	; 0x50
9001deea:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001deee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001def2:	9111      	str	r1, [sp, #68]	; 0x44
9001def4:	0e09      	lsrs	r1, r1, #24
9001def6:	9118      	str	r1, [sp, #96]	; 0x60
9001def8:	b292      	uxth	r2, r2
9001defa:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001defc:	b280      	uxth	r0, r0
9001defe:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001df00:	fb02 f800 	mul.w	r8, r2, r0
9001df04:	0112      	lsls	r2, r2, #4
9001df06:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001df0a:	eba2 0e08 	sub.w	lr, r2, r8
9001df0e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001df12:	b280      	uxth	r0, r0
9001df14:	fa1f fe8e 	uxth.w	lr, lr
9001df18:	1a12      	subs	r2, r2, r0
9001df1a:	fb0e f101 	mul.w	r1, lr, r1
9001df1e:	b292      	uxth	r2, r2
9001df20:	fb02 110c 	mla	r1, r2, ip, r1
9001df24:	fb00 1104 	mla	r1, r0, r4, r1
9001df28:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001df2a:	fb08 1104 	mla	r1, r8, r4, r1
9001df2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001df32:	2900      	cmp	r1, #0
9001df34:	f000 80f5 	beq.w	9001e122 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001df38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001df3c:	d019      	beq.n	9001df72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001df3e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001df42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001df46:	fb0c fa0a 	mul.w	sl, ip, sl
9001df4a:	fb0c fc03 	mul.w	ip, ip, r3
9001df4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001df52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001df56:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001df5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001df5e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001df62:	4453      	add	r3, sl
9001df64:	0a3f      	lsrs	r7, r7, #8
9001df66:	0a1b      	lsrs	r3, r3, #8
9001df68:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001df6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001df70:	433b      	orrs	r3, r7
9001df72:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df74:	2cff      	cmp	r4, #255	; 0xff
9001df76:	d020      	beq.n	9001dfba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001df78:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001df7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001df7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df80:	4367      	muls	r7, r4
9001df82:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001df84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001df88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001df8c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001df8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001df92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001df96:	fb04 fa0a 	mul.w	sl, r4, sl
9001df9a:	44bc      	add	ip, r7
9001df9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001dfa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dfa4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dfa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dfac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dfb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dfb4:	ea4c 040a 	orr.w	r4, ip, sl
9001dfb8:	9410      	str	r4, [sp, #64]	; 0x40
9001dfba:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001dfbc:	2cff      	cmp	r4, #255	; 0xff
9001dfbe:	d020      	beq.n	9001e002 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001dfc0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001dfc2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001dfc6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001dfc8:	4367      	muls	r7, r4
9001dfca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001dfcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dfd0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dfd4:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001dfd6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001dfda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dfde:	fb04 fa0a 	mul.w	sl, r4, sl
9001dfe2:	44bc      	add	ip, r7
9001dfe4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001dfe8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001dfec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dff0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dff4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dff8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001dffc:	ea4c 040a 	orr.w	r4, ip, sl
9001e000:	940b      	str	r4, [sp, #44]	; 0x2c
9001e002:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e004:	2cff      	cmp	r4, #255	; 0xff
9001e006:	d020      	beq.n	9001e04a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001e008:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e00a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e00e:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e010:	4367      	muls	r7, r4
9001e012:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e014:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e018:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e01c:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e01e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e022:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e026:	fb04 fa0a 	mul.w	sl, r4, sl
9001e02a:	44bc      	add	ip, r7
9001e02c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e030:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e034:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e038:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e03c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e040:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e044:	ea4c 040a 	orr.w	r4, ip, sl
9001e048:	9411      	str	r4, [sp, #68]	; 0x44
9001e04a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e04c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e050:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e054:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e058:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e05a:	fb0e f707 	mul.w	r7, lr, r7
9001e05e:	fb02 770c 	mla	r7, r2, ip, r7
9001e062:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e066:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e068:	fb00 770c 	mla	r7, r0, ip, r7
9001e06c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e070:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e072:	fb08 770c 	mla	r7, r8, ip, r7
9001e076:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e07a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e07c:	fb0e fe0c 	mul.w	lr, lr, ip
9001e080:	0a3f      	lsrs	r7, r7, #8
9001e082:	fb02 e303 	mla	r3, r2, r3, lr
9001e086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001e088:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001e08c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e090:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e092:	fb00 330a 	mla	r3, r0, sl, r3
9001e096:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001e09a:	f8b9 0000 	ldrh.w	r0, [r9]
9001e09e:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e0a4:	1202      	asrs	r2, r0, #8
9001e0a6:	434b      	muls	r3, r1
9001e0a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e0ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e0b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e0b4:	1c59      	adds	r1, r3, #1
9001e0b6:	ea47 070c 	orr.w	r7, r7, ip
9001e0ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001e0be:	0c3b      	lsrs	r3, r7, #16
9001e0c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001e0c4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001e0c8:	b2ff      	uxtb	r7, r7
9001e0ca:	fb13 f304 	smulbb	r3, r3, r4
9001e0ce:	b2c9      	uxtb	r1, r1
9001e0d0:	fb1c fc04 	smulbb	ip, ip, r4
9001e0d4:	fb02 3201 	mla	r2, r2, r1, r3
9001e0d8:	10c3      	asrs	r3, r0, #3
9001e0da:	fb17 f704 	smulbb	r7, r7, r4
9001e0de:	00c0      	lsls	r0, r0, #3
9001e0e0:	b292      	uxth	r2, r2
9001e0e2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001e0e6:	b2c0      	uxtb	r0, r0
9001e0e8:	fb03 c301 	mla	r3, r3, r1, ip
9001e0ec:	f102 0c01 	add.w	ip, r2, #1
9001e0f0:	fb00 7001 	mla	r0, r0, r1, r7
9001e0f4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001e0f8:	b280      	uxth	r0, r0
9001e0fa:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001e0fe:	b29b      	uxth	r3, r3
9001e100:	1c42      	adds	r2, r0, #1
9001e102:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001e106:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e10a:	ea42 020c 	orr.w	r2, r2, ip
9001e10e:	f103 0c01 	add.w	ip, r3, #1
9001e112:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001e116:	095b      	lsrs	r3, r3, #5
9001e118:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e11c:	431a      	orrs	r2, r3
9001e11e:	f8a9 2000 	strh.w	r2, [r9]
9001e122:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e124:	f109 0902 	add.w	r9, r9, #2
9001e128:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e12a:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e12e:	441a      	add	r2, r3
9001e130:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e132:	9229      	str	r2, [sp, #164]	; 0xa4
9001e134:	441d      	add	r5, r3
9001e136:	e63d      	b.n	9001ddb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001e138:	2800      	cmp	r0, #0
9001e13a:	f43f aedd 	beq.w	9001def8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e13e:	5c79      	ldrb	r1, [r7, r1]
9001e140:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e144:	910b      	str	r1, [sp, #44]	; 0x2c
9001e146:	0e09      	lsrs	r1, r1, #24
9001e148:	9114      	str	r1, [sp, #80]	; 0x50
9001e14a:	e6d5      	b.n	9001def8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e14c:	b01f      	add	sp, #124	; 0x7c
9001e14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e152 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001e152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e156:	b089      	sub	sp, #36	; 0x24
9001e158:	9101      	str	r1, [sp, #4]
9001e15a:	9801      	ldr	r0, [sp, #4]
9001e15c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001e160:	8800      	ldrh	r0, [r0, #0]
9001e162:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001e166:	1206      	asrs	r6, r0, #8
9001e168:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001e16c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001e170:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e174:	9602      	str	r6, [sp, #8]
9001e176:	10c6      	asrs	r6, r0, #3
9001e178:	00c0      	lsls	r0, r0, #3
9001e17a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e17e:	b2c0      	uxtb	r0, r0
9001e180:	9603      	str	r6, [sp, #12]
9001e182:	9004      	str	r0, [sp, #16]
9001e184:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001e188:	fb07 100c 	mla	r0, r7, ip, r1
9001e18c:	2f00      	cmp	r7, #0
9001e18e:	eb02 0e00 	add.w	lr, r2, r0
9001e192:	f2c0 810a 	blt.w	9001e3aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e196:	45b8      	cmp	r8, r7
9001e198:	f340 8107 	ble.w	9001e3aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e19c:	2900      	cmp	r1, #0
9001e19e:	f2c0 8102 	blt.w	9001e3a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e1a2:	458c      	cmp	ip, r1
9001e1a4:	f340 80ff 	ble.w	9001e3a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e1a8:	5c12      	ldrb	r2, [r2, r0]
9001e1aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001e1ae:	1c4a      	adds	r2, r1, #1
9001e1b0:	f100 80fe 	bmi.w	9001e3b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e1b4:	4594      	cmp	ip, r2
9001e1b6:	f340 80fb 	ble.w	9001e3b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e1ba:	2d00      	cmp	r5, #0
9001e1bc:	f000 80fa 	beq.w	9001e3b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001e1c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001e1c4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001e1c8:	3701      	adds	r7, #1
9001e1ca:	f100 80f7 	bmi.w	9001e3bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e1ce:	45b8      	cmp	r8, r7
9001e1d0:	f340 80f4 	ble.w	9001e3bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e1d4:	2c00      	cmp	r4, #0
9001e1d6:	f000 80f4 	beq.w	9001e3c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001e1da:	2900      	cmp	r1, #0
9001e1dc:	eb0e 020c 	add.w	r2, lr, ip
9001e1e0:	f2c0 80ea 	blt.w	9001e3b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e1e4:	458c      	cmp	ip, r1
9001e1e6:	f340 80e7 	ble.w	9001e3b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e1ea:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001e1ee:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001e1f2:	3101      	adds	r1, #1
9001e1f4:	f100 80e8 	bmi.w	9001e3c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e1f8:	458c      	cmp	ip, r1
9001e1fa:	f340 80e5 	ble.w	9001e3c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e1fe:	2d00      	cmp	r5, #0
9001e200:	f000 80e4 	beq.w	9001e3cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001e204:	7852      	ldrb	r2, [r2, #1]
9001e206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001e20a:	0e0b      	lsrs	r3, r1, #24
9001e20c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001e210:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001e214:	9300      	str	r3, [sp, #0]
9001e216:	b2a4      	uxth	r4, r4
9001e218:	b2ab      	uxth	r3, r5
9001e21a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001e21e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001e222:	fb03 f904 	mul.w	r9, r3, r4
9001e226:	011b      	lsls	r3, r3, #4
9001e228:	fb0a f505 	mul.w	r5, sl, r5
9001e22c:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001e230:	eba3 0e09 	sub.w	lr, r3, r9
9001e234:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001e238:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001e23c:	0a28      	lsrs	r0, r5, #8
9001e23e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001e242:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e246:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e24a:	fb0a f303 	mul.w	r3, sl, r3
9001e24e:	fb08 f707 	mul.w	r7, r8, r7
9001e252:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001e256:	4405      	add	r5, r0
9001e258:	fb08 fc0c 	mul.w	ip, r8, ip
9001e25c:	b2a4      	uxth	r4, r4
9001e25e:	0a2d      	lsrs	r5, r5, #8
9001e260:	fa1f fe8e 	uxth.w	lr, lr
9001e264:	1b12      	subs	r2, r2, r4
9001e266:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001e26a:	b292      	uxth	r2, r2
9001e26c:	9005      	str	r0, [sp, #20]
9001e26e:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001e272:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e276:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001e27a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e27e:	0a1b      	lsrs	r3, r3, #8
9001e280:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e284:	9306      	str	r3, [sp, #24]
9001e286:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001e28a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e28e:	4460      	add	r0, ip
9001e290:	fb0b f303 	mul.w	r3, fp, r3
9001e294:	fb0b f606 	mul.w	r6, fp, r6
9001e298:	0a00      	lsrs	r0, r0, #8
9001e29a:	0a1d      	lsrs	r5, r3, #8
9001e29c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001e2a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e2a4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e2a8:	441d      	add	r5, r3
9001e2aa:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001e2ae:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001e2b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001e2b6:	0a2d      	lsrs	r5, r5, #8
9001e2b8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001e2bc:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001e2c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e2c4:	0a36      	lsrs	r6, r6, #8
9001e2c6:	0a1b      	lsrs	r3, r3, #8
9001e2c8:	fb05 f50e 	mul.w	r5, r5, lr
9001e2cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e2d0:	9307      	str	r3, [sp, #28]
9001e2d2:	0e0b      	lsrs	r3, r1, #24
9001e2d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e2d8:	fb0e f606 	mul.w	r6, lr, r6
9001e2dc:	435f      	muls	r7, r3
9001e2de:	4359      	muls	r1, r3
9001e2e0:	9b05      	ldr	r3, [sp, #20]
9001e2e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e2e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e2ea:	fb03 5502 	mla	r5, r3, r2, r5
9001e2ee:	9b06      	ldr	r3, [sp, #24]
9001e2f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e2f4:	fb0e fe0b 	mul.w	lr, lr, fp
9001e2f8:	44bc      	add	ip, r7
9001e2fa:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001e2fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e302:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001e306:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e30a:	0a09      	lsrs	r1, r1, #8
9001e30c:	fb0c 5509 	mla	r5, ip, r9, r5
9001e310:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e314:	fb00 5504 	mla	r5, r0, r4, r5
9001e318:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001e31c:	9b07      	ldr	r3, [sp, #28]
9001e31e:	fb02 6000 	mla	r0, r2, r0, r6
9001e322:	0a2d      	lsrs	r5, r5, #8
9001e324:	fb02 e20a 	mla	r2, r2, sl, lr
9001e328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e32c:	fb09 0001 	mla	r0, r9, r1, r0
9001e330:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e334:	fb04 0003 	mla	r0, r4, r3, r0
9001e338:	9b00      	ldr	r3, [sp, #0]
9001e33a:	fb04 2408 	mla	r4, r4, r8, r2
9001e33e:	9a04      	ldr	r2, [sp, #16]
9001e340:	0a00      	lsrs	r0, r0, #8
9001e342:	fb09 4903 	mla	r9, r9, r3, r4
9001e346:	9b02      	ldr	r3, [sp, #8]
9001e348:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001e34c:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001e350:	4305      	orrs	r5, r0
9001e352:	fa5f f989 	uxtb.w	r9, r9
9001e356:	fb03 f109 	mul.w	r1, r3, r9
9001e35a:	9b03      	ldr	r3, [sp, #12]
9001e35c:	fb03 f309 	mul.w	r3, r3, r9
9001e360:	fb02 f909 	mul.w	r9, r2, r9
9001e364:	1c4a      	adds	r2, r1, #1
9001e366:	1c58      	adds	r0, r3, #1
9001e368:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e36c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e370:	0c2a      	lsrs	r2, r5, #16
9001e372:	0a2b      	lsrs	r3, r5, #8
9001e374:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001e378:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e37c:	0212      	lsls	r2, r2, #8
9001e37e:	00db      	lsls	r3, r3, #3
9001e380:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001e384:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e388:	4313      	orrs	r3, r2
9001e38a:	f109 0201 	add.w	r2, r9, #1
9001e38e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001e392:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001e396:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001e39a:	431d      	orrs	r5, r3
9001e39c:	9b01      	ldr	r3, [sp, #4]
9001e39e:	801d      	strh	r5, [r3, #0]
9001e3a0:	b009      	add	sp, #36	; 0x24
9001e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e3a6:	2000      	movs	r0, #0
9001e3a8:	e701      	b.n	9001e1ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001e3aa:	2600      	movs	r6, #0
9001e3ac:	4630      	mov	r0, r6
9001e3ae:	e70b      	b.n	9001e1c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e3b0:	2600      	movs	r6, #0
9001e3b2:	e709      	b.n	9001e1c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e3b4:	462e      	mov	r6, r5
9001e3b6:	e707      	b.n	9001e1c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e3b8:	2700      	movs	r7, #0
9001e3ba:	e71a      	b.n	9001e1f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001e3bc:	2100      	movs	r1, #0
9001e3be:	460f      	mov	r7, r1
9001e3c0:	e723      	b.n	9001e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e3c2:	4621      	mov	r1, r4
9001e3c4:	4627      	mov	r7, r4
9001e3c6:	e720      	b.n	9001e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e3c8:	2100      	movs	r1, #0
9001e3ca:	e71e      	b.n	9001e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e3cc:	4629      	mov	r1, r5
9001e3ce:	e71c      	b.n	9001e20a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001e3d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e3d4:	b09b      	sub	sp, #108	; 0x6c
9001e3d6:	9218      	str	r2, [sp, #96]	; 0x60
9001e3d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e3da:	9019      	str	r0, [sp, #100]	; 0x64
9001e3dc:	9116      	str	r1, [sp, #88]	; 0x58
9001e3de:	6850      	ldr	r0, [r2, #4]
9001e3e0:	9307      	str	r3, [sp, #28]
9001e3e2:	6812      	ldr	r2, [r2, #0]
9001e3e4:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001e3e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001e3ea:	fb00 1303 	mla	r3, r0, r3, r1
9001e3ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e3f2:	930a      	str	r3, [sp, #40]	; 0x28
9001e3f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e3f6:	681b      	ldr	r3, [r3, #0]
9001e3f8:	930f      	str	r3, [sp, #60]	; 0x3c
9001e3fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e3fc:	685e      	ldr	r6, [r3, #4]
9001e3fe:	3604      	adds	r6, #4
9001e400:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e402:	2b00      	cmp	r3, #0
9001e404:	dc03      	bgt.n	9001e40e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e406:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001e408:	2b00      	cmp	r3, #0
9001e40a:	f340 8373 	ble.w	9001eaf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e40e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e410:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e414:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e418:	1e48      	subs	r0, r1, #1
9001e41a:	1e57      	subs	r7, r2, #1
9001e41c:	9b07      	ldr	r3, [sp, #28]
9001e41e:	2b00      	cmp	r3, #0
9001e420:	f340 818f 	ble.w	9001e742 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001e424:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e426:	142b      	asrs	r3, r5, #16
9001e428:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e42c:	d406      	bmi.n	9001e43c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e42e:	4584      	cmp	ip, r0
9001e430:	da04      	bge.n	9001e43c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e432:	2b00      	cmp	r3, #0
9001e434:	db02      	blt.n	9001e43c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e436:	42bb      	cmp	r3, r7
9001e438:	f2c0 8184 	blt.w	9001e744 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001e43c:	f11c 0c01 	adds.w	ip, ip, #1
9001e440:	f100 8172 	bmi.w	9001e728 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e444:	4561      	cmp	r1, ip
9001e446:	f2c0 816f 	blt.w	9001e728 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e44a:	3301      	adds	r3, #1
9001e44c:	f100 816c 	bmi.w	9001e728 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e450:	429a      	cmp	r2, r3
9001e452:	f2c0 8169 	blt.w	9001e728 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e456:	9b07      	ldr	r3, [sp, #28]
9001e458:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001e45a:	9317      	str	r3, [sp, #92]	; 0x5c
9001e45c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e45e:	2b00      	cmp	r3, #0
9001e460:	f340 818e 	ble.w	9001e780 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001e464:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e466:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e46a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e46e:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e472:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e474:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001e478:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e47a:	141b      	asrs	r3, r3, #16
9001e47c:	f100 81d1 	bmi.w	9001e822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e480:	f101 38ff 	add.w	r8, r1, #4294967295
9001e484:	4543      	cmp	r3, r8
9001e486:	f280 81cc 	bge.w	9001e822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e48a:	f1bc 0f00 	cmp.w	ip, #0
9001e48e:	f2c0 81c8 	blt.w	9001e822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e492:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e496:	45c4      	cmp	ip, r8
9001e498:	f280 81c3 	bge.w	9001e822 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e49c:	b209      	sxth	r1, r1
9001e49e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e4a0:	fb0c 3301 	mla	r3, ip, r1, r3
9001e4a4:	eb04 0803 	add.w	r8, r4, r3
9001e4a8:	5ce3      	ldrb	r3, [r4, r3]
9001e4aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e4ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e4b2:	2a00      	cmp	r2, #0
9001e4b4:	f000 81aa 	beq.w	9001e80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001e4b8:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e4bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e4c0:	940b      	str	r4, [sp, #44]	; 0x2c
9001e4c2:	0e24      	lsrs	r4, r4, #24
9001e4c4:	9412      	str	r4, [sp, #72]	; 0x48
9001e4c6:	b178      	cbz	r0, 9001e4e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e4c8:	eb08 0c01 	add.w	ip, r8, r1
9001e4cc:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e4d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e4d4:	9108      	str	r1, [sp, #32]
9001e4d6:	0e09      	lsrs	r1, r1, #24
9001e4d8:	9110      	str	r1, [sp, #64]	; 0x40
9001e4da:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001e4de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e4e2:	910c      	str	r1, [sp, #48]	; 0x30
9001e4e4:	0e09      	lsrs	r1, r1, #24
9001e4e6:	9113      	str	r1, [sp, #76]	; 0x4c
9001e4e8:	b292      	uxth	r2, r2
9001e4ea:	9912      	ldr	r1, [sp, #72]	; 0x48
9001e4ec:	b280      	uxth	r0, r0
9001e4ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e4f0:	fb02 f900 	mul.w	r9, r2, r0
9001e4f4:	0112      	lsls	r2, r2, #4
9001e4f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001e4fa:	eba2 0809 	sub.w	r8, r2, r9
9001e4fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e502:	b280      	uxth	r0, r0
9001e504:	fa1f f888 	uxth.w	r8, r8
9001e508:	1a12      	subs	r2, r2, r0
9001e50a:	fb08 f101 	mul.w	r1, r8, r1
9001e50e:	b292      	uxth	r2, r2
9001e510:	fb02 110e 	mla	r1, r2, lr, r1
9001e514:	fb00 1104 	mla	r1, r0, r4, r1
9001e518:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e51a:	fb09 1104 	mla	r1, r9, r4, r1
9001e51e:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e522:	2900      	cmp	r1, #0
9001e524:	f000 80f5 	beq.w	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e528:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e52c:	d01b      	beq.n	9001e566 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001e52e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e536:	fb0e fa0a 	mul.w	sl, lr, sl
9001e53a:	fb0e fe03 	mul.w	lr, lr, r3
9001e53e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e542:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e546:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001e54a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e54e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e552:	4453      	add	r3, sl
9001e554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e558:	0a1b      	lsrs	r3, r3, #8
9001e55a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e55e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e562:	ea43 030c 	orr.w	r3, r3, ip
9001e566:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e568:	2cff      	cmp	r4, #255	; 0xff
9001e56a:	d021      	beq.n	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001e56c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e56e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e572:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e574:	fb04 fb0b 	mul.w	fp, r4, fp
9001e578:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e57a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e57e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e580:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e584:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e588:	fb04 fa0a 	mul.w	sl, r4, sl
9001e58c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e590:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e594:	44de      	add	lr, fp
9001e596:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e59a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e59e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e5a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e5aa:	ea4e 040a 	orr.w	r4, lr, sl
9001e5ae:	940b      	str	r4, [sp, #44]	; 0x2c
9001e5b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e5b2:	2cff      	cmp	r4, #255	; 0xff
9001e5b4:	d021      	beq.n	9001e5fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001e5b6:	9c08      	ldr	r4, [sp, #32]
9001e5b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e5bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e5be:	fb04 fb0b 	mul.w	fp, r4, fp
9001e5c2:	9c08      	ldr	r4, [sp, #32]
9001e5c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e5c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e5ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e5ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e5d2:	fb04 fa0a 	mul.w	sl, r4, sl
9001e5d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e5de:	44de      	add	lr, fp
9001e5e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e5e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e5e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e5ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e5f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e5f4:	ea4e 040a 	orr.w	r4, lr, sl
9001e5f8:	9408      	str	r4, [sp, #32]
9001e5fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e5fc:	2cff      	cmp	r4, #255	; 0xff
9001e5fe:	d021      	beq.n	9001e644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001e600:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e602:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e606:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e608:	fb04 fb0b 	mul.w	fp, r4, fp
9001e60c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e60e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e612:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e614:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e618:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e61c:	fb04 fa0a 	mul.w	sl, r4, sl
9001e620:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e624:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e628:	44de      	add	lr, fp
9001e62a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e62e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e632:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e636:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e63a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e63e:	ea4e 040a 	orr.w	r4, lr, sl
9001e642:	940c      	str	r4, [sp, #48]	; 0x30
9001e644:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e646:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001e64a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e64e:	43c9      	mvns	r1, r1
9001e650:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e654:	9c08      	ldr	r4, [sp, #32]
9001e656:	fb08 fc0c 	mul.w	ip, r8, ip
9001e65a:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e65e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e662:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e664:	fb00 cc0e 	mla	ip, r0, lr, ip
9001e668:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e66c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e66e:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e672:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001e676:	fb08 f80e 	mul.w	r8, r8, lr
9001e67a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e67e:	fa5f fe81 	uxtb.w	lr, r1
9001e682:	fb02 8303 	mla	r3, r2, r3, r8
9001e686:	9a08      	ldr	r2, [sp, #32]
9001e688:	f8b7 8000 	ldrh.w	r8, [r7]
9001e68c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e690:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001e696:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001e69a:	fb00 330a 	mla	r3, r0, sl, r3
9001e69e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001e6a2:	ea4f 2228 	mov.w	r2, r8, asr #8
9001e6a6:	fb09 3900 	mla	r9, r9, r0, r3
9001e6aa:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001e6ae:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e6b2:	b2c9      	uxtb	r1, r1
9001e6b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e6b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e6bc:	fb02 f20e 	mul.w	r2, r2, lr
9001e6c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001e6c4:	fb00 f00e 	mul.w	r0, r0, lr
9001e6c8:	1c53      	adds	r3, r2, #1
9001e6ca:	fb01 f10e 	mul.w	r1, r1, lr
9001e6ce:	ea4c 0c09 	orr.w	ip, ip, r9
9001e6d2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001e6d6:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001e6da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e6de:	4a60      	ldr	r2, [pc, #384]	; (9001e860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001e6e0:	b2db      	uxtb	r3, r3
9001e6e2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001e6e6:	1c43      	adds	r3, r0, #1
9001e6e8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e6ec:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001e6f0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e6f4:	00db      	lsls	r3, r3, #3
9001e6f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e6fa:	4313      	orrs	r3, r2
9001e6fc:	1c4a      	adds	r2, r1, #1
9001e6fe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e702:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e706:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001e70a:	ea4c 0c03 	orr.w	ip, ip, r3
9001e70e:	f8a7 c000 	strh.w	ip, [r7]
9001e712:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e714:	3702      	adds	r7, #2
9001e716:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001e718:	441a      	add	r2, r3
9001e71a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e71c:	441d      	add	r5, r3
9001e71e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e720:	9225      	str	r2, [sp, #148]	; 0x94
9001e722:	3b01      	subs	r3, #1
9001e724:	9317      	str	r3, [sp, #92]	; 0x5c
9001e726:	e699      	b.n	9001e45c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e728:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e72a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e72c:	441c      	add	r4, r3
9001e72e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e730:	441d      	add	r5, r3
9001e732:	9b07      	ldr	r3, [sp, #28]
9001e734:	9425      	str	r4, [sp, #148]	; 0x94
9001e736:	3b01      	subs	r3, #1
9001e738:	9307      	str	r3, [sp, #28]
9001e73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e73c:	3302      	adds	r3, #2
9001e73e:	930a      	str	r3, [sp, #40]	; 0x28
9001e740:	e66c      	b.n	9001e41c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e742:	d024      	beq.n	9001e78e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001e744:	9b07      	ldr	r3, [sp, #28]
9001e746:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001e748:	3b01      	subs	r3, #1
9001e74a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e74c:	fb00 4003 	mla	r0, r0, r3, r4
9001e750:	1400      	asrs	r0, r0, #16
9001e752:	f53f ae80 	bmi.w	9001e456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e756:	3901      	subs	r1, #1
9001e758:	4288      	cmp	r0, r1
9001e75a:	f6bf ae7c 	bge.w	9001e456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e75e:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001e760:	fb01 5303 	mla	r3, r1, r3, r5
9001e764:	141b      	asrs	r3, r3, #16
9001e766:	f53f ae76 	bmi.w	9001e456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e76a:	3a01      	subs	r2, #1
9001e76c:	4293      	cmp	r3, r2
9001e76e:	f6bf ae72 	bge.w	9001e456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e772:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001e776:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001e77a:	f1bb 0f00 	cmp.w	fp, #0
9001e77e:	dc71      	bgt.n	9001e864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e780:	9b07      	ldr	r3, [sp, #28]
9001e782:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e788:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e78c:	930a      	str	r3, [sp, #40]	; 0x28
9001e78e:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e790:	2b00      	cmp	r3, #0
9001e792:	f340 81af 	ble.w	9001eaf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e79a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e79c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e7a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e7a4:	eef0 6a62 	vmov.f32	s13, s5
9001e7a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e7ac:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e7b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e7b4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001e7b8:	eef0 6a43 	vmov.f32	s13, s6
9001e7bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e7c0:	ee16 5a90 	vmov	r5, s13
9001e7c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e7c8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e7cc:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e7d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e7d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e7d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e7dc:	ee12 2a90 	vmov	r2, s5
9001e7e0:	eef0 2a47 	vmov.f32	s5, s14
9001e7e4:	fb92 f3f3 	sdiv	r3, r2, r3
9001e7e8:	ee13 2a10 	vmov	r2, s6
9001e7ec:	9327      	str	r3, [sp, #156]	; 0x9c
9001e7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e7f0:	eeb0 3a67 	vmov.f32	s6, s15
9001e7f4:	fb92 f3f3 	sdiv	r3, r2, r3
9001e7f8:	9328      	str	r3, [sp, #160]	; 0xa0
9001e7fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e7fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001e7fe:	3b01      	subs	r3, #1
9001e800:	9316      	str	r3, [sp, #88]	; 0x58
9001e802:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e804:	bf08      	it	eq
9001e806:	4613      	moveq	r3, r2
9001e808:	9307      	str	r3, [sp, #28]
9001e80a:	e5f9      	b.n	9001e400 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e80c:	2800      	cmp	r0, #0
9001e80e:	f43f ae6b 	beq.w	9001e4e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e812:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e816:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e81a:	9108      	str	r1, [sp, #32]
9001e81c:	0e09      	lsrs	r1, r1, #24
9001e81e:	9110      	str	r1, [sp, #64]	; 0x40
9001e820:	e662      	b.n	9001e4e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e822:	f113 0801 	adds.w	r8, r3, #1
9001e826:	f53f af74 	bmi.w	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e82a:	4541      	cmp	r1, r8
9001e82c:	f6ff af71 	blt.w	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e830:	f11c 0801 	adds.w	r8, ip, #1
9001e834:	f53f af6d 	bmi.w	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e838:	45c6      	cmp	lr, r8
9001e83a:	f6ff af6a 	blt.w	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e83e:	b209      	sxth	r1, r1
9001e840:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001e844:	fa0f f38e 	sxth.w	r3, lr
9001e848:	9100      	str	r1, [sp, #0]
9001e84a:	4639      	mov	r1, r7
9001e84c:	9301      	str	r3, [sp, #4]
9001e84e:	4633      	mov	r3, r6
9001e850:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001e854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e856:	9819      	ldr	r0, [sp, #100]	; 0x64
9001e858:	f7ff fc7b 	bl	9001e152 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001e85c:	e759      	b.n	9001e712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e85e:	bf00      	nop
9001e860:	fffff800 	.word	0xfffff800
9001e864:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e866:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e86a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e86c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e870:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e872:	1427      	asrs	r7, r4, #16
9001e874:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e876:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e87a:	142b      	asrs	r3, r5, #16
9001e87c:	fb01 7303 	mla	r3, r1, r3, r7
9001e880:	18e7      	adds	r7, r4, r3
9001e882:	5ce3      	ldrb	r3, [r4, r3]
9001e884:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e888:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e88c:	2a00      	cmp	r2, #0
9001e88e:	f000 8127 	beq.w	9001eae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001e892:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e896:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e89a:	940d      	str	r4, [sp, #52]	; 0x34
9001e89c:	0e24      	lsrs	r4, r4, #24
9001e89e:	9414      	str	r4, [sp, #80]	; 0x50
9001e8a0:	b170      	cbz	r0, 9001e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e8a2:	eb07 0e01 	add.w	lr, r7, r1
9001e8a6:	5c79      	ldrb	r1, [r7, r1]
9001e8a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e8ac:	9109      	str	r1, [sp, #36]	; 0x24
9001e8ae:	0e09      	lsrs	r1, r1, #24
9001e8b0:	9111      	str	r1, [sp, #68]	; 0x44
9001e8b2:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e8b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e8ba:	910e      	str	r1, [sp, #56]	; 0x38
9001e8bc:	0e09      	lsrs	r1, r1, #24
9001e8be:	9115      	str	r1, [sp, #84]	; 0x54
9001e8c0:	b292      	uxth	r2, r2
9001e8c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e8c4:	b280      	uxth	r0, r0
9001e8c6:	fb02 f800 	mul.w	r8, r2, r0
9001e8ca:	0112      	lsls	r2, r2, #4
9001e8cc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e8d0:	eba2 0e08 	sub.w	lr, r2, r8
9001e8d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001e8d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e8da:	b280      	uxth	r0, r0
9001e8dc:	fa1f fe8e 	uxth.w	lr, lr
9001e8e0:	1a09      	subs	r1, r1, r0
9001e8e2:	fb0e f202 	mul.w	r2, lr, r2
9001e8e6:	b289      	uxth	r1, r1
9001e8e8:	fb01 220c 	mla	r2, r1, ip, r2
9001e8ec:	fb00 2204 	mla	r2, r0, r4, r2
9001e8f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e8f2:	fb08 2204 	mla	r2, r8, r4, r2
9001e8f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001e8fa:	2a00      	cmp	r2, #0
9001e8fc:	f000 80e5 	beq.w	9001eaca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001e900:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e904:	d019      	beq.n	9001e93a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001e906:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e90a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e90e:	fb0c fa0a 	mul.w	sl, ip, sl
9001e912:	fb0c fc03 	mul.w	ip, ip, r3
9001e916:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e91a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e91e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e922:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e926:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e92a:	4453      	add	r3, sl
9001e92c:	0a3f      	lsrs	r7, r7, #8
9001e92e:	0a1b      	lsrs	r3, r3, #8
9001e930:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e934:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e938:	433b      	orrs	r3, r7
9001e93a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e93c:	2cff      	cmp	r4, #255	; 0xff
9001e93e:	d020      	beq.n	9001e982 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001e940:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e942:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e946:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e948:	4367      	muls	r7, r4
9001e94a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e94c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e950:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e954:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e956:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e95a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e95e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e962:	44bc      	add	ip, r7
9001e964:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e968:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e96c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e970:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e974:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e97c:	ea4c 040a 	orr.w	r4, ip, sl
9001e980:	940d      	str	r4, [sp, #52]	; 0x34
9001e982:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e984:	2cff      	cmp	r4, #255	; 0xff
9001e986:	d020      	beq.n	9001e9ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001e988:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e98a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e98e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e990:	4367      	muls	r7, r4
9001e992:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e994:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e998:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e99c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e99e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e9a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e9a6:	fb04 fa0a 	mul.w	sl, r4, sl
9001e9aa:	44bc      	add	ip, r7
9001e9ac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e9b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e9b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e9b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e9bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e9c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e9c4:	ea4c 040a 	orr.w	r4, ip, sl
9001e9c8:	9409      	str	r4, [sp, #36]	; 0x24
9001e9ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e9cc:	2cff      	cmp	r4, #255	; 0xff
9001e9ce:	d020      	beq.n	9001ea12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001e9d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e9d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e9d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e9d8:	4367      	muls	r7, r4
9001e9da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e9dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e9e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e9e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e9e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e9ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e9ee:	fb04 fa0a 	mul.w	sl, r4, sl
9001e9f2:	44bc      	add	ip, r7
9001e9f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e9f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e9fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001ea00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ea04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ea08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ea0c:	ea4c 040a 	orr.w	r4, ip, sl
9001ea10:	940e      	str	r4, [sp, #56]	; 0x38
9001ea12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ea14:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001ea18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ea1c:	43d2      	mvns	r2, r2
9001ea1e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001ea22:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001ea24:	b2d2      	uxtb	r2, r2
9001ea26:	fb0e f707 	mul.w	r7, lr, r7
9001ea2a:	fb01 770c 	mla	r7, r1, ip, r7
9001ea2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001ea32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001ea34:	fb00 770c 	mla	r7, r0, ip, r7
9001ea38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001ea3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ea3e:	fb08 770c 	mla	r7, r8, ip, r7
9001ea42:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001ea46:	fb0e fe0c 	mul.w	lr, lr, ip
9001ea4a:	0a3f      	lsrs	r7, r7, #8
9001ea4c:	fb01 e303 	mla	r3, r1, r3, lr
9001ea50:	9909      	ldr	r1, [sp, #36]	; 0x24
9001ea52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001ea56:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001ea5a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001ea5c:	fb00 330a 	mla	r3, r0, sl, r3
9001ea60:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001ea64:	fb08 3c0c 	mla	ip, r8, ip, r3
9001ea68:	f8b9 3000 	ldrh.w	r3, [r9]
9001ea6c:	1218      	asrs	r0, r3, #8
9001ea6e:	10d9      	asrs	r1, r3, #3
9001ea70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ea74:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001ea78:	00db      	lsls	r3, r3, #3
9001ea7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ea7e:	4350      	muls	r0, r2
9001ea80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001ea84:	b2db      	uxtb	r3, r3
9001ea86:	4351      	muls	r1, r2
9001ea88:	ea47 070c 	orr.w	r7, r7, ip
9001ea8c:	4353      	muls	r3, r2
9001ea8e:	1c42      	adds	r2, r0, #1
9001ea90:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ea94:	0c3a      	lsrs	r2, r7, #16
9001ea96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ea9a:	4a18      	ldr	r2, [pc, #96]	; (9001eafc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001ea9c:	b2c0      	uxtb	r0, r0
9001ea9e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001eaa2:	1c4a      	adds	r2, r1, #1
9001eaa4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eaa8:	0a3a      	lsrs	r2, r7, #8
9001eaaa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eaae:	00c9      	lsls	r1, r1, #3
9001eab0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001eab4:	4301      	orrs	r1, r0
9001eab6:	1c58      	adds	r0, r3, #1
9001eab8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001eabc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001eac0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001eac4:	4308      	orrs	r0, r1
9001eac6:	f8a9 0000 	strh.w	r0, [r9]
9001eaca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001eacc:	f109 0902 	add.w	r9, r9, #2
9001ead0:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001ead2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001ead6:	441a      	add	r2, r3
9001ead8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001eada:	9225      	str	r2, [sp, #148]	; 0x94
9001eadc:	441d      	add	r5, r3
9001eade:	e64c      	b.n	9001e77a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001eae0:	2800      	cmp	r0, #0
9001eae2:	f43f aeed 	beq.w	9001e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001eae6:	5c79      	ldrb	r1, [r7, r1]
9001eae8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001eaec:	9109      	str	r1, [sp, #36]	; 0x24
9001eaee:	0e09      	lsrs	r1, r1, #24
9001eaf0:	9111      	str	r1, [sp, #68]	; 0x44
9001eaf2:	e6e5      	b.n	9001e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001eaf4:	b01b      	add	sp, #108	; 0x6c
9001eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eafa:	bf00      	nop
9001eafc:	fffff800 	.word	0xfffff800

9001eb00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001eb04:	b085      	sub	sp, #20
9001eb06:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001eb0a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001eb0e:	2800      	cmp	r0, #0
9001eb10:	9103      	str	r1, [sp, #12]
9001eb12:	fb00 7406 	mla	r4, r0, r6, r7
9001eb16:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001eb1a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001eb1e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001eb22:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001eb26:	eb03 0904 	add.w	r9, r3, r4
9001eb2a:	9501      	str	r5, [sp, #4]
9001eb2c:	f2c0 8150 	blt.w	9001edd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001eb30:	4583      	cmp	fp, r0
9001eb32:	f340 814d 	ble.w	9001edd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001eb36:	2f00      	cmp	r7, #0
9001eb38:	f2c0 8146 	blt.w	9001edc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001eb3c:	42be      	cmp	r6, r7
9001eb3e:	f340 8143 	ble.w	9001edc8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001eb42:	f813 c004 	ldrb.w	ip, [r3, r4]
9001eb46:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001eb4a:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001eb4e:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001eb52:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001eb56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb5a:	4355      	muls	r5, r2
9001eb5c:	fb0c f203 	mul.w	r2, ip, r3
9001eb60:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001eb64:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001eb68:	441d      	add	r5, r3
9001eb6a:	f102 0320 	add.w	r3, r2, #32
9001eb6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001eb72:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001eb76:	0a1b      	lsrs	r3, r3, #8
9001eb78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb7c:	431c      	orrs	r4, r3
9001eb7e:	1c7b      	adds	r3, r7, #1
9001eb80:	f100 812b 	bmi.w	9001edda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001eb84:	429e      	cmp	r6, r3
9001eb86:	f340 8128 	ble.w	9001edda <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001eb8a:	2900      	cmp	r1, #0
9001eb8c:	f000 8128 	beq.w	9001ede0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001eb90:	9a01      	ldr	r2, [sp, #4]
9001eb92:	f899 3001 	ldrb.w	r3, [r9, #1]
9001eb96:	8855      	ldrh	r5, [r2, #2]
9001eb98:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001eb9c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001eba0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eba4:	fb08 f802 	mul.w	r8, r8, r2
9001eba8:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001ebac:	435d      	muls	r5, r3
9001ebae:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001ebb2:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ebb6:	44d0      	add	r8, sl
9001ebb8:	f105 0a20 	add.w	sl, r5, #32
9001ebbc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001ebc0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001ebc4:	0a2d      	lsrs	r5, r5, #8
9001ebc6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ebca:	432a      	orrs	r2, r5
9001ebcc:	3001      	adds	r0, #1
9001ebce:	f100 810d 	bmi.w	9001edec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001ebd2:	4583      	cmp	fp, r0
9001ebd4:	f340 810a 	ble.w	9001edec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001ebd8:	f1be 0f00 	cmp.w	lr, #0
9001ebdc:	f000 810b 	beq.w	9001edf6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001ebe0:	2f00      	cmp	r7, #0
9001ebe2:	f2c0 8100 	blt.w	9001ede6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ebe6:	42be      	cmp	r6, r7
9001ebe8:	f340 80fd 	ble.w	9001ede6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ebec:	9801      	ldr	r0, [sp, #4]
9001ebee:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001ebf2:	f819 5006 	ldrb.w	r5, [r9, r6]
9001ebf6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001ebfa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ebfe:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001ec02:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ec06:	fb0a fa00 	mul.w	sl, sl, r0
9001ec0a:	fb05 f808 	mul.w	r8, r5, r8
9001ec0e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001ec12:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001ec16:	4482      	add	sl, r0
9001ec18:	f108 0020 	add.w	r0, r8, #32
9001ec1c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ec20:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001ec24:	0a00      	lsrs	r0, r0, #8
9001ec26:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ec2a:	ea4b 0b00 	orr.w	fp, fp, r0
9001ec2e:	3701      	adds	r7, #1
9001ec30:	f100 80e6 	bmi.w	9001ee00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ec34:	42be      	cmp	r6, r7
9001ec36:	f340 80e3 	ble.w	9001ee00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001ec3a:	2900      	cmp	r1, #0
9001ec3c:	f000 80e3 	beq.w	9001ee06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001ec40:	3601      	adds	r6, #1
9001ec42:	9801      	ldr	r0, [sp, #4]
9001ec44:	f819 7006 	ldrb.w	r7, [r9, r6]
9001ec48:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001ec4c:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001ec50:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001ec54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ec58:	fb09 f906 	mul.w	r9, r9, r6
9001ec5c:	fb07 f800 	mul.w	r8, r7, r0
9001ec60:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001ec64:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001ec68:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001ec6c:	44d1      	add	r9, sl
9001ec6e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001ec72:	f108 0020 	add.w	r0, r8, #32
9001ec76:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ec7a:	0a00      	lsrs	r0, r0, #8
9001ec7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ec80:	4330      	orrs	r0, r6
9001ec82:	b28e      	uxth	r6, r1
9001ec84:	fa1f f98e 	uxth.w	r9, lr
9001ec88:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001ec8c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ec90:	fb06 f809 	mul.w	r8, r6, r9
9001ec94:	0136      	lsls	r6, r6, #4
9001ec96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ec9a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001ec9e:	9601      	str	r6, [sp, #4]
9001eca0:	ea4a 0404 	orr.w	r4, sl, r4
9001eca4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001eca8:	fa1f f689 	uxth.w	r6, r9
9001ecac:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ecb0:	fb11 f90e 	smulbb	r9, r1, lr
9001ecb4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ecb8:	9602      	str	r6, [sp, #8]
9001ecba:	4626      	mov	r6, r4
9001ecbc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001ecc0:	f1ce 0410 	rsb	r4, lr, #16
9001ecc4:	ea4a 0202 	orr.w	r2, sl, r2
9001ecc8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001eccc:	1a64      	subs	r4, r4, r1
9001ecce:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001ecd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ecd6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ecda:	434a      	muls	r2, r1
9001ecdc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001ece0:	ea4a 0000 	orr.w	r0, sl, r0
9001ece4:	9903      	ldr	r1, [sp, #12]
9001ece6:	fb04 2406 	mla	r4, r4, r6, r2
9001ecea:	9e02      	ldr	r6, [sp, #8]
9001ecec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001ecf0:	fb09 4200 	mla	r2, r9, r0, r4
9001ecf4:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001ecf8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001ecfc:	8808      	ldrh	r0, [r1, #0]
9001ecfe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ed02:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001ed06:	ea44 0b0b 	orr.w	fp, r4, fp
9001ed0a:	9c01      	ldr	r4, [sp, #4]
9001ed0c:	b289      	uxth	r1, r1
9001ed0e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001ed12:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001ed16:	1ba4      	subs	r4, r4, r6
9001ed18:	9e01      	ldr	r6, [sp, #4]
9001ed1a:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ed1e:	eba6 0608 	sub.w	r6, r6, r8
9001ed22:	b2a4      	uxth	r4, r4
9001ed24:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001ed28:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ed2c:	b2b6      	uxth	r6, r6
9001ed2e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ed32:	4373      	muls	r3, r6
9001ed34:	ea42 0e0e 	orr.w	lr, r2, lr
9001ed38:	fb0c 3304 	mla	r3, ip, r4, r3
9001ed3c:	9c02      	ldr	r4, [sp, #8]
9001ed3e:	fa1f f28e 	uxth.w	r2, lr
9001ed42:	fb04 3505 	mla	r5, r4, r5, r3
9001ed46:	10d4      	asrs	r4, r2, #3
9001ed48:	fb08 5707 	mla	r7, r8, r7, r5
9001ed4c:	1215      	asrs	r5, r2, #8
9001ed4e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ed52:	00d2      	lsls	r2, r2, #3
9001ed54:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ed58:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ed5c:	b2d2      	uxtb	r2, r2
9001ed5e:	434f      	muls	r7, r1
9001ed60:	1c7b      	adds	r3, r7, #1
9001ed62:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001ed66:	1203      	asrs	r3, r0, #8
9001ed68:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001ed6c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001ed70:	b2ff      	uxtb	r7, r7
9001ed72:	fb13 f307 	smulbb	r3, r3, r7
9001ed76:	fb05 3501 	mla	r5, r5, r1, r3
9001ed7a:	10c3      	asrs	r3, r0, #3
9001ed7c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001ed80:	b2ad      	uxth	r5, r5
9001ed82:	fb13 f307 	smulbb	r3, r3, r7
9001ed86:	fb04 3401 	mla	r4, r4, r1, r3
9001ed8a:	00c3      	lsls	r3, r0, #3
9001ed8c:	b2db      	uxtb	r3, r3
9001ed8e:	b2a4      	uxth	r4, r4
9001ed90:	fb13 f307 	smulbb	r3, r3, r7
9001ed94:	fb02 3101 	mla	r1, r2, r1, r3
9001ed98:	1c6b      	adds	r3, r5, #1
9001ed9a:	1c62      	adds	r2, r4, #1
9001ed9c:	b289      	uxth	r1, r1
9001ed9e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001eda2:	1c4b      	adds	r3, r1, #1
9001eda4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001eda8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001edac:	9a03      	ldr	r2, [sp, #12]
9001edae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001edb2:	0964      	lsrs	r4, r4, #5
9001edb4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001edb8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001edbc:	432b      	orrs	r3, r5
9001edbe:	4323      	orrs	r3, r4
9001edc0:	8013      	strh	r3, [r2, #0]
9001edc2:	b005      	add	sp, #20
9001edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001edc8:	f04f 0c00 	mov.w	ip, #0
9001edcc:	4664      	mov	r4, ip
9001edce:	e6d6      	b.n	9001eb7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001edd0:	2300      	movs	r3, #0
9001edd2:	469c      	mov	ip, r3
9001edd4:	461a      	mov	r2, r3
9001edd6:	461c      	mov	r4, r3
9001edd8:	e6f8      	b.n	9001ebcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001edda:	2300      	movs	r3, #0
9001eddc:	461a      	mov	r2, r3
9001edde:	e6f5      	b.n	9001ebcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ede0:	460b      	mov	r3, r1
9001ede2:	460a      	mov	r2, r1
9001ede4:	e6f2      	b.n	9001ebcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ede6:	2500      	movs	r5, #0
9001ede8:	46ab      	mov	fp, r5
9001edea:	e720      	b.n	9001ec2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001edec:	2700      	movs	r7, #0
9001edee:	463d      	mov	r5, r7
9001edf0:	4638      	mov	r0, r7
9001edf2:	46bb      	mov	fp, r7
9001edf4:	e745      	b.n	9001ec82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001edf6:	4677      	mov	r7, lr
9001edf8:	4675      	mov	r5, lr
9001edfa:	4670      	mov	r0, lr
9001edfc:	46f3      	mov	fp, lr
9001edfe:	e740      	b.n	9001ec82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001ee00:	2700      	movs	r7, #0
9001ee02:	4638      	mov	r0, r7
9001ee04:	e73d      	b.n	9001ec82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001ee06:	460f      	mov	r7, r1
9001ee08:	4608      	mov	r0, r1
9001ee0a:	e73a      	b.n	9001ec82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001ee0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ee10:	b097      	sub	sp, #92	; 0x5c
9001ee12:	9214      	str	r2, [sp, #80]	; 0x50
9001ee14:	9308      	str	r3, [sp, #32]
9001ee16:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001ee18:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001ee1c:	9015      	str	r0, [sp, #84]	; 0x54
9001ee1e:	9312      	str	r3, [sp, #72]	; 0x48
9001ee20:	6850      	ldr	r0, [r2, #4]
9001ee22:	9111      	str	r1, [sp, #68]	; 0x44
9001ee24:	6812      	ldr	r2, [r2, #0]
9001ee26:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001ee2a:	fb00 1303 	mla	r3, r0, r3, r1
9001ee2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ee32:	9309      	str	r3, [sp, #36]	; 0x24
9001ee34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ee36:	681b      	ldr	r3, [r3, #0]
9001ee38:	930b      	str	r3, [sp, #44]	; 0x2c
9001ee3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ee3c:	685b      	ldr	r3, [r3, #4]
9001ee3e:	930c      	str	r3, [sp, #48]	; 0x30
9001ee40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001ee44:	930a      	str	r3, [sp, #40]	; 0x28
9001ee46:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ee48:	2b00      	cmp	r3, #0
9001ee4a:	dc03      	bgt.n	9001ee54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ee4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001ee4e:	2b00      	cmp	r3, #0
9001ee50:	f340 83cd 	ble.w	9001f5ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ee54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ee56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ee5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ee5e:	1e48      	subs	r0, r1, #1
9001ee60:	1e55      	subs	r5, r2, #1
9001ee62:	9b08      	ldr	r3, [sp, #32]
9001ee64:	2b00      	cmp	r3, #0
9001ee66:	f340 81a5 	ble.w	9001f1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001ee6a:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001ee6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ee6e:	1436      	asrs	r6, r6, #16
9001ee70:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ee74:	d406      	bmi.n	9001ee84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee76:	4286      	cmp	r6, r0
9001ee78:	da04      	bge.n	9001ee84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee7a:	2b00      	cmp	r3, #0
9001ee7c:	db02      	blt.n	9001ee84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ee7e:	42ab      	cmp	r3, r5
9001ee80:	f2c0 8199 	blt.w	9001f1b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ee84:	3601      	adds	r6, #1
9001ee86:	f100 8186 	bmi.w	9001f196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee8a:	42b1      	cmp	r1, r6
9001ee8c:	f2c0 8183 	blt.w	9001f196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee90:	3301      	adds	r3, #1
9001ee92:	f100 8180 	bmi.w	9001f196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee96:	429a      	cmp	r2, r3
9001ee98:	f2c0 817d 	blt.w	9001f196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ee9c:	9b08      	ldr	r3, [sp, #32]
9001ee9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001eea2:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001eea4:	9313      	str	r3, [sp, #76]	; 0x4c
9001eea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001eea8:	2b00      	cmp	r3, #0
9001eeaa:	f340 81a6 	ble.w	9001f1fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001eeae:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001eeb0:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001eeb2:	1418      	asrs	r0, r3, #16
9001eeb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001eeb6:	142d      	asrs	r5, r5, #16
9001eeb8:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001eebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001eebe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001eec2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001eec4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001eec8:	f100 81fa 	bmi.w	9001f2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001eecc:	f102 3eff 	add.w	lr, r2, #4294967295
9001eed0:	4575      	cmp	r5, lr
9001eed2:	f280 81f5 	bge.w	9001f2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001eed6:	2800      	cmp	r0, #0
9001eed8:	f2c0 81f2 	blt.w	9001f2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001eedc:	f103 3eff 	add.w	lr, r3, #4294967295
9001eee0:	4570      	cmp	r0, lr
9001eee2:	f280 81ed 	bge.w	9001f2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001eee6:	b212      	sxth	r2, r2
9001eee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001eeea:	fa1f fe81 	uxth.w	lr, r1
9001eeee:	fb00 5002 	mla	r0, r0, r2, r5
9001eef2:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001eef6:	eb03 0a00 	add.w	sl, r3, r0
9001eefa:	f813 9000 	ldrb.w	r9, [r3, r0]
9001eefe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001ef02:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ef06:	b29b      	uxth	r3, r3
9001ef08:	f1bc 0f00 	cmp.w	ip, #0
9001ef0c:	f000 81bb 	beq.w	9001f286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001ef10:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001ef14:	eb0a 0b02 	add.w	fp, sl, r2
9001ef18:	fa1f fa8c 	uxth.w	sl, ip
9001ef1c:	940d      	str	r4, [sp, #52]	; 0x34
9001ef1e:	fb0a fe0e 	mul.w	lr, sl, lr
9001ef22:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001ef26:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001ef2a:	eba5 050e 	sub.w	r5, r5, lr
9001ef2e:	940e      	str	r4, [sp, #56]	; 0x38
9001ef30:	fa1f fa8a 	uxth.w	sl, sl
9001ef34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ef36:	b2ad      	uxth	r5, r5
9001ef38:	eba3 030a 	sub.w	r3, r3, sl
9001ef3c:	fb08 f505 	mul.w	r5, r8, r5
9001ef40:	b29b      	uxth	r3, r3
9001ef42:	fb09 5303 	mla	r3, r9, r3, r5
9001ef46:	fb0a 3304 	mla	r3, sl, r4, r3
9001ef4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001ef4c:	fb0e 3304 	mla	r3, lr, r4, r3
9001ef50:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001ef54:	2b00      	cmp	r3, #0
9001ef56:	f000 8111 	beq.w	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ef5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ef5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ef60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001ef64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001ef68:	f000 8192 	beq.w	9001f290 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001ef6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001ef70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001ef74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ef78:	fb0a fe0e 	mul.w	lr, sl, lr
9001ef7c:	fb09 f000 	mul.w	r0, r9, r0
9001ef80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001ef84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001ef88:	f100 0b20 	add.w	fp, r0, #32
9001ef8c:	44ce      	add	lr, r9
9001ef8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001ef92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ef96:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ef9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ef9e:	ea4e 0909 	orr.w	r9, lr, r9
9001efa2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001efa6:	8868      	ldrh	r0, [r5, #2]
9001efa8:	d019      	beq.n	9001efde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001efaa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001efae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001efb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001efb6:	fb0a fe0e 	mul.w	lr, sl, lr
9001efba:	fb08 f800 	mul.w	r8, r8, r0
9001efbe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001efc2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001efc6:	f108 0b20 	add.w	fp, r8, #32
9001efca:	4486      	add	lr, r0
9001efcc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001efd0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001efd4:	0a00      	lsrs	r0, r0, #8
9001efd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001efda:	ea4e 0000 	orr.w	r0, lr, r0
9001efde:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001efe2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001efe6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001efea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001efee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001eff2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001eff6:	ea4e 0909 	orr.w	r9, lr, r9
9001effa:	ea4a 0000 	orr.w	r0, sl, r0
9001effe:	f1bc 0f00 	cmp.w	ip, #0
9001f002:	f000 8147 	beq.w	9001f294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001f006:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001f00a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f00c:	3a01      	subs	r2, #1
9001f00e:	2cff      	cmp	r4, #255	; 0xff
9001f010:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001f014:	f102 0202 	add.w	r2, r2, #2
9001f018:	eb05 0e02 	add.w	lr, r5, r2
9001f01c:	5aaa      	ldrh	r2, [r5, r2]
9001f01e:	d018      	beq.n	9001f052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001f020:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001f024:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f028:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f02c:	fb04 fa02 	mul.w	sl, r4, r2
9001f030:	fb08 f805 	mul.w	r8, r8, r5
9001f034:	f10a 0520 	add.w	r5, sl, #32
9001f038:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001f03c:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f040:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001f044:	4442      	add	r2, r8
9001f046:	0a2d      	lsrs	r5, r5, #8
9001f048:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001f04c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f050:	432a      	orrs	r2, r5
9001f052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f054:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f058:	2cff      	cmp	r4, #255	; 0xff
9001f05a:	d01a      	beq.n	9001f092 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001f05c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001f060:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f064:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f068:	fb04 fa05 	mul.w	sl, r4, r5
9001f06c:	fb08 f80e 	mul.w	r8, r8, lr
9001f070:	f10a 0e20 	add.w	lr, sl, #32
9001f074:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f078:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f07c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f080:	4445      	add	r5, r8
9001f082:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f086:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f08a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001f08e:	ea45 050e 	orr.w	r5, r5, lr
9001f092:	fb1c fe01 	smulbb	lr, ip, r1
9001f096:	f1cc 0810 	rsb	r8, ip, #16
9001f09a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f09e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f0a2:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f0a6:	eba8 0801 	sub.w	r8, r8, r1
9001f0aa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001f0ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f0b2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001f0b6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001f0ba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001f0be:	ea4a 0202 	orr.w	r2, sl, r2
9001f0c2:	4341      	muls	r1, r0
9001f0c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001f0c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f0cc:	fb09 1108 	mla	r1, r9, r8, r1
9001f0d0:	ea4b 0505 	orr.w	r5, fp, r5
9001f0d4:	fb0c 1102 	mla	r1, ip, r2, r1
9001f0d8:	fb0e 1e05 	mla	lr, lr, r5, r1
9001f0dc:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f0e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f0e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f0e8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f0ec:	ea42 0e0e 	orr.w	lr, r2, lr
9001f0f0:	fa1f f28e 	uxth.w	r2, lr
9001f0f4:	2bff      	cmp	r3, #255	; 0xff
9001f0f6:	d103      	bne.n	9001f100 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001f0f8:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f0fa:	29ff      	cmp	r1, #255	; 0xff
9001f0fc:	f000 80de 	beq.w	9001f2bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001f100:	990a      	ldr	r1, [sp, #40]	; 0x28
9001f102:	1215      	asrs	r5, r2, #8
9001f104:	8838      	ldrh	r0, [r7, #0]
9001f106:	434b      	muls	r3, r1
9001f108:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f10c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f10e:	f103 0c01 	add.w	ip, r3, #1
9001f112:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001f116:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f11a:	fa5f fc83 	uxtb.w	ip, r3
9001f11e:	1203      	asrs	r3, r0, #8
9001f120:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f124:	fb13 f30c 	smulbb	r3, r3, ip
9001f128:	fb05 3501 	mla	r5, r5, r1, r3
9001f12c:	10c3      	asrs	r3, r0, #3
9001f12e:	10d1      	asrs	r1, r2, #3
9001f130:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f134:	00d2      	lsls	r2, r2, #3
9001f136:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f13a:	b2ad      	uxth	r5, r5
9001f13c:	fb13 f30c 	smulbb	r3, r3, ip
9001f140:	b2d2      	uxtb	r2, r2
9001f142:	fb01 3104 	mla	r1, r1, r4, r3
9001f146:	00c3      	lsls	r3, r0, #3
9001f148:	b2db      	uxtb	r3, r3
9001f14a:	b289      	uxth	r1, r1
9001f14c:	fb13 f30c 	smulbb	r3, r3, ip
9001f150:	fb02 3304 	mla	r3, r2, r4, r3
9001f154:	b29a      	uxth	r2, r3
9001f156:	1c6b      	adds	r3, r5, #1
9001f158:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f15c:	1c53      	adds	r3, r2, #1
9001f15e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f162:	1c4a      	adds	r2, r1, #1
9001f164:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f168:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f16c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f170:	0949      	lsrs	r1, r1, #5
9001f172:	432b      	orrs	r3, r5
9001f174:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f178:	430b      	orrs	r3, r1
9001f17a:	803b      	strh	r3, [r7, #0]
9001f17c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f17e:	3702      	adds	r7, #2
9001f180:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f182:	4413      	add	r3, r2
9001f184:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f186:	9321      	str	r3, [sp, #132]	; 0x84
9001f188:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f18a:	441a      	add	r2, r3
9001f18c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f18e:	3b01      	subs	r3, #1
9001f190:	9222      	str	r2, [sp, #136]	; 0x88
9001f192:	9313      	str	r3, [sp, #76]	; 0x4c
9001f194:	e687      	b.n	9001eea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001f196:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f198:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001f19a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001f19c:	4433      	add	r3, r6
9001f19e:	9321      	str	r3, [sp, #132]	; 0x84
9001f1a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f1a2:	441c      	add	r4, r3
9001f1a4:	9b08      	ldr	r3, [sp, #32]
9001f1a6:	3b01      	subs	r3, #1
9001f1a8:	9422      	str	r4, [sp, #136]	; 0x88
9001f1aa:	9308      	str	r3, [sp, #32]
9001f1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f1ae:	3302      	adds	r3, #2
9001f1b0:	9309      	str	r3, [sp, #36]	; 0x24
9001f1b2:	e656      	b.n	9001ee62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001f1b4:	d028      	beq.n	9001f208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f1b6:	9b08      	ldr	r3, [sp, #32]
9001f1b8:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001f1ba:	3b01      	subs	r3, #1
9001f1bc:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f1be:	fb00 5003 	mla	r0, r0, r3, r5
9001f1c2:	1400      	asrs	r0, r0, #16
9001f1c4:	f53f ae6a 	bmi.w	9001ee9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f1c8:	3901      	subs	r1, #1
9001f1ca:	4288      	cmp	r0, r1
9001f1cc:	f6bf ae66 	bge.w	9001ee9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f1d0:	9924      	ldr	r1, [sp, #144]	; 0x90
9001f1d2:	9822      	ldr	r0, [sp, #136]	; 0x88
9001f1d4:	fb01 0303 	mla	r3, r1, r3, r0
9001f1d8:	141b      	asrs	r3, r3, #16
9001f1da:	f53f ae5f 	bmi.w	9001ee9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f1de:	3a01      	subs	r2, #1
9001f1e0:	4293      	cmp	r3, r2
9001f1e2:	f6bf ae5b 	bge.w	9001ee9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f1e6:	9b08      	ldr	r3, [sp, #32]
9001f1e8:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f1ec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001f1f0:	9313      	str	r3, [sp, #76]	; 0x4c
9001f1f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f1f4:	2b00      	cmp	r3, #0
9001f1f6:	f300 8082 	bgt.w	9001f2fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001f1fa:	9b08      	ldr	r3, [sp, #32]
9001f1fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f200:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f202:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f206:	9309      	str	r3, [sp, #36]	; 0x24
9001f208:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f20a:	2b00      	cmp	r3, #0
9001f20c:	f340 81ef 	ble.w	9001f5ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f214:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f216:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f21a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f21e:	eef0 6a62 	vmov.f32	s13, s5
9001f222:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f226:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f22a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f22e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001f232:	eef0 6a43 	vmov.f32	s13, s6
9001f236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f23a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001f23e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f242:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f246:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f24a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f24e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f256:	ee12 2a90 	vmov	r2, s5
9001f25a:	eef0 2a47 	vmov.f32	s5, s14
9001f25e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f262:	ee13 2a10 	vmov	r2, s6
9001f266:	9323      	str	r3, [sp, #140]	; 0x8c
9001f268:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f26a:	eeb0 3a67 	vmov.f32	s6, s15
9001f26e:	fb92 f3f3 	sdiv	r3, r2, r3
9001f272:	9324      	str	r3, [sp, #144]	; 0x90
9001f274:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f276:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001f278:	3b01      	subs	r3, #1
9001f27a:	9311      	str	r3, [sp, #68]	; 0x44
9001f27c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f27e:	bf08      	it	eq
9001f280:	4613      	moveq	r3, r2
9001f282:	9308      	str	r3, [sp, #32]
9001f284:	e5df      	b.n	9001ee46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001f286:	fb08 f505 	mul.w	r5, r8, r5
9001f28a:	fb09 5303 	mla	r3, r9, r3, r5
9001f28e:	e65f      	b.n	9001ef50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001f290:	4681      	mov	r9, r0
9001f292:	e686      	b.n	9001efa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001f294:	f1c1 0210 	rsb	r2, r1, #16
9001f298:	4341      	muls	r1, r0
9001f29a:	fb09 1902 	mla	r9, r9, r2, r1
9001f29e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f2a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001f2a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f2aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f2ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f2b2:	ea42 0909 	orr.w	r9, r2, r9
9001f2b6:	fa1f f289 	uxth.w	r2, r9
9001f2ba:	e71b      	b.n	9001f0f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001f2bc:	803a      	strh	r2, [r7, #0]
9001f2be:	e75d      	b.n	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2c0:	f115 0e01 	adds.w	lr, r5, #1
9001f2c4:	f53f af5a 	bmi.w	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2c8:	4572      	cmp	r2, lr
9001f2ca:	f6ff af57 	blt.w	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2ce:	f110 0e01 	adds.w	lr, r0, #1
9001f2d2:	f53f af53 	bmi.w	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2d6:	4573      	cmp	r3, lr
9001f2d8:	f6ff af50 	blt.w	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f2de:	b21b      	sxth	r3, r3
9001f2e0:	b212      	sxth	r2, r2
9001f2e2:	9502      	str	r5, [sp, #8]
9001f2e4:	9301      	str	r3, [sp, #4]
9001f2e6:	9200      	str	r2, [sp, #0]
9001f2e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001f2ec:	e9cd c405 	strd	ip, r4, [sp, #20]
9001f2f0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001f2f4:	4639      	mov	r1, r7
9001f2f6:	9815      	ldr	r0, [sp, #84]	; 0x54
9001f2f8:	f7ff fc02 	bl	9001eb00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001f2fc:	e73e      	b.n	9001f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f300:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f304:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f306:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001f30a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f30c:	fa1f fc82 	uxth.w	ip, r2
9001f310:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f314:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f316:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001f31a:	141f      	asrs	r7, r3, #16
9001f31c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f31e:	141b      	asrs	r3, r3, #16
9001f320:	fb01 3707 	mla	r7, r1, r7, r3
9001f324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f326:	eb03 0a07 	add.w	sl, r3, r7
9001f32a:	f813 9007 	ldrb.w	r9, [r3, r7]
9001f32e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f332:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f336:	b29b      	uxth	r3, r3
9001f338:	2d00      	cmp	r5, #0
9001f33a:	f000 813d 	beq.w	9001f5b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001f33e:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001f342:	eb0a 0b01 	add.w	fp, sl, r1
9001f346:	fa1f fa85 	uxth.w	sl, r5
9001f34a:	940f      	str	r4, [sp, #60]	; 0x3c
9001f34c:	fb0a fc0c 	mul.w	ip, sl, ip
9001f350:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f354:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001f358:	eba0 000c 	sub.w	r0, r0, ip
9001f35c:	9410      	str	r4, [sp, #64]	; 0x40
9001f35e:	fa1f fa8a 	uxth.w	sl, sl
9001f362:	b280      	uxth	r0, r0
9001f364:	eba3 030a 	sub.w	r3, r3, sl
9001f368:	fb08 f000 	mul.w	r0, r8, r0
9001f36c:	b29b      	uxth	r3, r3
9001f36e:	fb09 0303 	mla	r3, r9, r3, r0
9001f372:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f374:	fb0a 3300 	mla	r3, sl, r0, r3
9001f378:	fb0c 3304 	mla	r3, ip, r4, r3
9001f37c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f380:	2b00      	cmp	r3, #0
9001f382:	f000 810b 	beq.w	9001f59c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f386:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f388:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f38c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f38e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001f392:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001f396:	f000 8114 	beq.w	9001f5c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001f39a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f39e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f3a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f3a6:	fb0a fc0c 	mul.w	ip, sl, ip
9001f3aa:	fb09 f707 	mul.w	r7, r9, r7
9001f3ae:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001f3b2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f3b6:	f107 0b20 	add.w	fp, r7, #32
9001f3ba:	44cc      	add	ip, r9
9001f3bc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001f3c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f3c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f3c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f3cc:	ea4c 0909 	orr.w	r9, ip, r9
9001f3d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f3d4:	8847      	ldrh	r7, [r0, #2]
9001f3d6:	d019      	beq.n	9001f40c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001f3d8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f3dc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f3e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f3e4:	fb0a fc0c 	mul.w	ip, sl, ip
9001f3e8:	fb08 f807 	mul.w	r8, r8, r7
9001f3ec:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001f3f0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f3f4:	f108 0b20 	add.w	fp, r8, #32
9001f3f8:	44bc      	add	ip, r7
9001f3fa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001f3fe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f402:	0a3f      	lsrs	r7, r7, #8
9001f404:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f408:	ea4c 0707 	orr.w	r7, ip, r7
9001f40c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001f410:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f414:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001f418:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001f41c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001f420:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f424:	ea4c 0909 	orr.w	r9, ip, r9
9001f428:	ea4a 0707 	orr.w	r7, sl, r7
9001f42c:	2d00      	cmp	r5, #0
9001f42e:	f000 80ca 	beq.w	9001f5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001f432:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001f436:	3901      	subs	r1, #1
9001f438:	0049      	lsls	r1, r1, #1
9001f43a:	3102      	adds	r1, #2
9001f43c:	eb00 0c01 	add.w	ip, r0, r1
9001f440:	5a41      	ldrh	r1, [r0, r1]
9001f442:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f444:	28ff      	cmp	r0, #255	; 0xff
9001f446:	d019      	beq.n	9001f47c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001f448:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001f44c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001f44e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f452:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f456:	fb04 fa01 	mul.w	sl, r4, r1
9001f45a:	fb08 f800 	mul.w	r8, r8, r0
9001f45e:	f10a 0020 	add.w	r0, sl, #32
9001f462:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001f466:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f46a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001f46e:	4441      	add	r1, r8
9001f470:	0a00      	lsrs	r0, r0, #8
9001f472:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001f476:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f47a:	4301      	orrs	r1, r0
9001f47c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001f47e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001f482:	2cff      	cmp	r4, #255	; 0xff
9001f484:	d01a      	beq.n	9001f4bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001f486:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001f48a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f48e:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f492:	fb04 fa00 	mul.w	sl, r4, r0
9001f496:	fb08 f80c 	mul.w	r8, r8, ip
9001f49a:	f10a 0c20 	add.w	ip, sl, #32
9001f49e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001f4a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f4a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001f4aa:	4440      	add	r0, r8
9001f4ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f4b0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001f4b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001f4b8:	ea40 000c 	orr.w	r0, r0, ip
9001f4bc:	fb15 fc02 	smulbb	ip, r5, r2
9001f4c0:	f1c5 0810 	rsb	r8, r5, #16
9001f4c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001f4c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f4cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001f4d0:	eba8 0802 	sub.w	r8, r8, r2
9001f4d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f4d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f4dc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001f4e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f4e4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001f4e8:	ea4a 0101 	orr.w	r1, sl, r1
9001f4ec:	437a      	muls	r2, r7
9001f4ee:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001f4f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f4f6:	fb09 2208 	mla	r2, r9, r8, r2
9001f4fa:	ea4b 0000 	orr.w	r0, fp, r0
9001f4fe:	fb05 2201 	mla	r2, r5, r1, r2
9001f502:	fb0c 2200 	mla	r2, ip, r0, r2
9001f506:	0d57      	lsrs	r7, r2, #21
9001f508:	0952      	lsrs	r2, r2, #5
9001f50a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f50e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f512:	433a      	orrs	r2, r7
9001f514:	2bff      	cmp	r3, #255	; 0xff
9001f516:	b292      	uxth	r2, r2
9001f518:	d102      	bne.n	9001f520 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001f51a:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f51c:	29ff      	cmp	r1, #255	; 0xff
9001f51e:	d063      	beq.n	9001f5e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001f520:	980a      	ldr	r0, [sp, #40]	; 0x28
9001f522:	1215      	asrs	r5, r2, #8
9001f524:	f8be 1000 	ldrh.w	r1, [lr]
9001f528:	4343      	muls	r3, r0
9001f52a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f52c:	10cf      	asrs	r7, r1, #3
9001f52e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f532:	1c58      	adds	r0, r3, #1
9001f534:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001f538:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001f53c:	1208      	asrs	r0, r1, #8
9001f53e:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f542:	00c9      	lsls	r1, r1, #3
9001f544:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f548:	b2db      	uxtb	r3, r3
9001f54a:	b2c9      	uxtb	r1, r1
9001f54c:	fb10 f003 	smulbb	r0, r0, r3
9001f550:	fb11 f103 	smulbb	r1, r1, r3
9001f554:	fb05 0504 	mla	r5, r5, r4, r0
9001f558:	10d0      	asrs	r0, r2, #3
9001f55a:	fb17 f703 	smulbb	r7, r7, r3
9001f55e:	00d2      	lsls	r2, r2, #3
9001f560:	b2ad      	uxth	r5, r5
9001f562:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f566:	b2d2      	uxtb	r2, r2
9001f568:	fb00 7004 	mla	r0, r0, r4, r7
9001f56c:	1c6b      	adds	r3, r5, #1
9001f56e:	fb02 1204 	mla	r2, r2, r4, r1
9001f572:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f576:	b292      	uxth	r2, r2
9001f578:	b280      	uxth	r0, r0
9001f57a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f57e:	1c57      	adds	r7, r2, #1
9001f580:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001f584:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f588:	433d      	orrs	r5, r7
9001f58a:	1c47      	adds	r7, r0, #1
9001f58c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f590:	097f      	lsrs	r7, r7, #5
9001f592:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f596:	433d      	orrs	r5, r7
9001f598:	f8ae 5000 	strh.w	r5, [lr]
9001f59c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f59e:	f10e 0e02 	add.w	lr, lr, #2
9001f5a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f5a4:	4413      	add	r3, r2
9001f5a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f5a8:	9321      	str	r3, [sp, #132]	; 0x84
9001f5aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f5ac:	441a      	add	r2, r3
9001f5ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f5b0:	3b01      	subs	r3, #1
9001f5b2:	9222      	str	r2, [sp, #136]	; 0x88
9001f5b4:	9313      	str	r3, [sp, #76]	; 0x4c
9001f5b6:	e61c      	b.n	9001f1f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001f5b8:	fb08 f000 	mul.w	r0, r8, r0
9001f5bc:	fb09 0303 	mla	r3, r9, r3, r0
9001f5c0:	e6dc      	b.n	9001f37c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001f5c2:	46b9      	mov	r9, r7
9001f5c4:	e704      	b.n	9001f3d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001f5c6:	f1c2 0110 	rsb	r1, r2, #16
9001f5ca:	437a      	muls	r2, r7
9001f5cc:	fb09 2901 	mla	r9, r9, r1, r2
9001f5d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f5d4:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001f5d8:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001f5dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f5e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f5e4:	4302      	orrs	r2, r0
9001f5e6:	e795      	b.n	9001f514 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001f5e8:	f8ae 2000 	strh.w	r2, [lr]
9001f5ec:	e7d6      	b.n	9001f59c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f5ee:	b017      	add	sp, #92	; 0x5c
9001f5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f5f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f5f8:	b085      	sub	sp, #20
9001f5fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001f5fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001f602:	2800      	cmp	r0, #0
9001f604:	9103      	str	r1, [sp, #12]
9001f606:	fb00 7406 	mla	r4, r0, r6, r7
9001f60a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001f60e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001f612:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001f616:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001f61a:	eb02 0904 	add.w	r9, r2, r4
9001f61e:	9501      	str	r5, [sp, #4]
9001f620:	f2c0 8141 	blt.w	9001f8a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f624:	4583      	cmp	fp, r0
9001f626:	f340 813e 	ble.w	9001f8a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f62a:	2f00      	cmp	r7, #0
9001f62c:	f2c0 8137 	blt.w	9001f89e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f630:	42be      	cmp	r6, r7
9001f632:	f340 8134 	ble.w	9001f89e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f636:	f812 c004 	ldrb.w	ip, [r2, r4]
9001f63a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001f63e:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001f642:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f646:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001f64a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f64e:	4355      	muls	r5, r2
9001f650:	fb0c f203 	mul.w	r2, ip, r3
9001f654:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f658:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001f65c:	441d      	add	r5, r3
9001f65e:	f102 0320 	add.w	r3, r2, #32
9001f662:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f666:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f66a:	0a1b      	lsrs	r3, r3, #8
9001f66c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f670:	431c      	orrs	r4, r3
9001f672:	1c7b      	adds	r3, r7, #1
9001f674:	f100 811c 	bmi.w	9001f8b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f678:	429e      	cmp	r6, r3
9001f67a:	f340 8119 	ble.w	9001f8b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f67e:	2900      	cmp	r1, #0
9001f680:	f000 8119 	beq.w	9001f8b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001f684:	9a01      	ldr	r2, [sp, #4]
9001f686:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f68a:	8855      	ldrh	r5, [r2, #2]
9001f68c:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f690:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001f694:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f698:	fb08 f802 	mul.w	r8, r8, r2
9001f69c:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001f6a0:	435d      	muls	r5, r3
9001f6a2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f6a6:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f6aa:	44d0      	add	r8, sl
9001f6ac:	f105 0a20 	add.w	sl, r5, #32
9001f6b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f6b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f6b8:	0a2d      	lsrs	r5, r5, #8
9001f6ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f6be:	432a      	orrs	r2, r5
9001f6c0:	3001      	adds	r0, #1
9001f6c2:	f100 80fe 	bmi.w	9001f8c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f6c6:	4583      	cmp	fp, r0
9001f6c8:	f340 80fb 	ble.w	9001f8c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f6cc:	f1be 0f00 	cmp.w	lr, #0
9001f6d0:	f000 80fc 	beq.w	9001f8cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001f6d4:	2f00      	cmp	r7, #0
9001f6d6:	f2c0 80f1 	blt.w	9001f8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f6da:	42be      	cmp	r6, r7
9001f6dc:	f340 80ee 	ble.w	9001f8bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f6e0:	9801      	ldr	r0, [sp, #4]
9001f6e2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001f6e6:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f6ea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f6ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f6f2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001f6f6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f6fa:	fb0a fa00 	mul.w	sl, sl, r0
9001f6fe:	fb05 f808 	mul.w	r8, r5, r8
9001f702:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f706:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001f70a:	4482      	add	sl, r0
9001f70c:	f108 0020 	add.w	r0, r8, #32
9001f710:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f714:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f718:	0a00      	lsrs	r0, r0, #8
9001f71a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f71e:	ea4b 0b00 	orr.w	fp, fp, r0
9001f722:	3701      	adds	r7, #1
9001f724:	f100 80d7 	bmi.w	9001f8d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f728:	42be      	cmp	r6, r7
9001f72a:	f340 80d4 	ble.w	9001f8d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f72e:	2900      	cmp	r1, #0
9001f730:	f000 80d4 	beq.w	9001f8dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001f734:	3601      	adds	r6, #1
9001f736:	9801      	ldr	r0, [sp, #4]
9001f738:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f73c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f740:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f744:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001f748:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f74c:	fb09 f906 	mul.w	r9, r9, r6
9001f750:	fb07 f800 	mul.w	r8, r7, r0
9001f754:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001f758:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f75c:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001f760:	44d1      	add	r9, sl
9001f762:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f766:	f108 0020 	add.w	r0, r8, #32
9001f76a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f76e:	0a00      	lsrs	r0, r0, #8
9001f770:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f774:	4330      	orrs	r0, r6
9001f776:	b28e      	uxth	r6, r1
9001f778:	fa1f f98e 	uxth.w	r9, lr
9001f77c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f780:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001f784:	fb06 f809 	mul.w	r8, r6, r9
9001f788:	0136      	lsls	r6, r6, #4
9001f78a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f78e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f792:	9601      	str	r6, [sp, #4]
9001f794:	ea4a 0404 	orr.w	r4, sl, r4
9001f798:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f79c:	fa1f f689 	uxth.w	r6, r9
9001f7a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f7a4:	fb11 f90e 	smulbb	r9, r1, lr
9001f7a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f7ac:	9602      	str	r6, [sp, #8]
9001f7ae:	4626      	mov	r6, r4
9001f7b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f7b4:	f1ce 0410 	rsb	r4, lr, #16
9001f7b8:	ea4a 0202 	orr.w	r2, sl, r2
9001f7bc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f7c0:	1a64      	subs	r4, r4, r1
9001f7c2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f7c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f7ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f7ce:	434a      	muls	r2, r1
9001f7d0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f7d4:	ea4a 0000 	orr.w	r0, sl, r0
9001f7d8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f7dc:	fb04 2406 	mla	r4, r4, r6, r2
9001f7e0:	9903      	ldr	r1, [sp, #12]
9001f7e2:	fb09 4200 	mla	r2, r9, r0, r4
9001f7e6:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f7ea:	9801      	ldr	r0, [sp, #4]
9001f7ec:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f7f0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001f7f4:	8809      	ldrh	r1, [r1, #0]
9001f7f6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001f7fa:	ea44 0b0b 	orr.w	fp, r4, fp
9001f7fe:	9c02      	ldr	r4, [sp, #8]
9001f800:	1b00      	subs	r0, r0, r4
9001f802:	9c01      	ldr	r4, [sp, #4]
9001f804:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f808:	eba4 0608 	sub.w	r6, r4, r8
9001f80c:	b280      	uxth	r0, r0
9001f80e:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f812:	b2b6      	uxth	r6, r6
9001f814:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f818:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f81c:	4373      	muls	r3, r6
9001f81e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f822:	fb0c 3300 	mla	r3, ip, r0, r3
9001f826:	9802      	ldr	r0, [sp, #8]
9001f828:	ea42 0e0e 	orr.w	lr, r2, lr
9001f82c:	fb00 3505 	mla	r5, r0, r5, r3
9001f830:	120b      	asrs	r3, r1, #8
9001f832:	10c8      	asrs	r0, r1, #3
9001f834:	fb08 5707 	mla	r7, r8, r7, r5
9001f838:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f83c:	00c9      	lsls	r1, r1, #3
9001f83e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f842:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001f846:	fa1f f28e 	uxth.w	r2, lr
9001f84a:	b2c9      	uxtb	r1, r1
9001f84c:	b2ff      	uxtb	r7, r7
9001f84e:	437b      	muls	r3, r7
9001f850:	4378      	muls	r0, r7
9001f852:	434f      	muls	r7, r1
9001f854:	1c59      	adds	r1, r3, #1
9001f856:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001f85a:	1213      	asrs	r3, r2, #8
9001f85c:	f023 0307 	bic.w	r3, r3, #7
9001f860:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f864:	1c41      	adds	r1, r0, #1
9001f866:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001f86a:	10d1      	asrs	r1, r2, #3
9001f86c:	021b      	lsls	r3, r3, #8
9001f86e:	f021 0103 	bic.w	r1, r1, #3
9001f872:	00d2      	lsls	r2, r2, #3
9001f874:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001f878:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001f87c:	00c9      	lsls	r1, r1, #3
9001f87e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f882:	430b      	orrs	r3, r1
9001f884:	1c79      	adds	r1, r7, #1
9001f886:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001f88a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001f88e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f892:	431a      	orrs	r2, r3
9001f894:	9b03      	ldr	r3, [sp, #12]
9001f896:	801a      	strh	r2, [r3, #0]
9001f898:	b005      	add	sp, #20
9001f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f89e:	f04f 0c00 	mov.w	ip, #0
9001f8a2:	4664      	mov	r4, ip
9001f8a4:	e6e5      	b.n	9001f672 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001f8a6:	2300      	movs	r3, #0
9001f8a8:	469c      	mov	ip, r3
9001f8aa:	461a      	mov	r2, r3
9001f8ac:	461c      	mov	r4, r3
9001f8ae:	e707      	b.n	9001f6c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f8b0:	2300      	movs	r3, #0
9001f8b2:	461a      	mov	r2, r3
9001f8b4:	e704      	b.n	9001f6c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f8b6:	460b      	mov	r3, r1
9001f8b8:	460a      	mov	r2, r1
9001f8ba:	e701      	b.n	9001f6c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f8bc:	2500      	movs	r5, #0
9001f8be:	46ab      	mov	fp, r5
9001f8c0:	e72f      	b.n	9001f722 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001f8c2:	2700      	movs	r7, #0
9001f8c4:	463d      	mov	r5, r7
9001f8c6:	4638      	mov	r0, r7
9001f8c8:	46bb      	mov	fp, r7
9001f8ca:	e754      	b.n	9001f776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f8cc:	4677      	mov	r7, lr
9001f8ce:	4675      	mov	r5, lr
9001f8d0:	4670      	mov	r0, lr
9001f8d2:	46f3      	mov	fp, lr
9001f8d4:	e74f      	b.n	9001f776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f8d6:	2700      	movs	r7, #0
9001f8d8:	4638      	mov	r0, r7
9001f8da:	e74c      	b.n	9001f776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f8dc:	460f      	mov	r7, r1
9001f8de:	4608      	mov	r0, r1
9001f8e0:	e749      	b.n	9001f776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001f8e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f8e8:	b093      	sub	sp, #76	; 0x4c
9001f8ea:	9210      	str	r2, [sp, #64]	; 0x40
9001f8ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001f8ee:	9011      	str	r0, [sp, #68]	; 0x44
9001f8f0:	910e      	str	r1, [sp, #56]	; 0x38
9001f8f2:	6850      	ldr	r0, [r2, #4]
9001f8f4:	9306      	str	r3, [sp, #24]
9001f8f6:	6812      	ldr	r2, [r2, #0]
9001f8f8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001f8fc:	fb00 1303 	mla	r3, r0, r3, r1
9001f900:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f904:	9307      	str	r3, [sp, #28]
9001f906:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f908:	681b      	ldr	r3, [r3, #0]
9001f90a:	9308      	str	r3, [sp, #32]
9001f90c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f90e:	685b      	ldr	r3, [r3, #4]
9001f910:	9309      	str	r3, [sp, #36]	; 0x24
9001f912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f914:	2b00      	cmp	r3, #0
9001f916:	dc03      	bgt.n	9001f920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001f918:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f91a:	2b00      	cmp	r3, #0
9001f91c:	f340 83b6 	ble.w	9002008c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f920:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f922:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f926:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f92a:	1e48      	subs	r0, r1, #1
9001f92c:	1e55      	subs	r5, r2, #1
9001f92e:	9b06      	ldr	r3, [sp, #24]
9001f930:	2b00      	cmp	r3, #0
9001f932:	f340 8165 	ble.w	9001fc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001f936:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001f938:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f93a:	1436      	asrs	r6, r6, #16
9001f93c:	ea4f 4323 	mov.w	r3, r3, asr #16
9001f940:	d406      	bmi.n	9001f950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f942:	4286      	cmp	r6, r0
9001f944:	da04      	bge.n	9001f950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f946:	2b00      	cmp	r3, #0
9001f948:	db02      	blt.n	9001f950 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f94a:	42ab      	cmp	r3, r5
9001f94c:	f2c0 8159 	blt.w	9001fc02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001f950:	3601      	adds	r6, #1
9001f952:	f100 8146 	bmi.w	9001fbe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f956:	42b1      	cmp	r1, r6
9001f958:	f2c0 8143 	blt.w	9001fbe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f95c:	3301      	adds	r3, #1
9001f95e:	f100 8140 	bmi.w	9001fbe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f962:	429a      	cmp	r2, r3
9001f964:	f2c0 813d 	blt.w	9001fbe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f968:	9b06      	ldr	r3, [sp, #24]
9001f96a:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f96e:	9f07      	ldr	r7, [sp, #28]
9001f970:	930f      	str	r3, [sp, #60]	; 0x3c
9001f972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f974:	2b00      	cmp	r3, #0
9001f976:	f340 8166 	ble.w	9001fc46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f97a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f97c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001f97e:	1418      	asrs	r0, r3, #16
9001f980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001f982:	142d      	asrs	r5, r5, #16
9001f984:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001f988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f98a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001f98e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f990:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001f994:	f100 81f0 	bmi.w	9001fd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f998:	f102 3eff 	add.w	lr, r2, #4294967295
9001f99c:	4575      	cmp	r5, lr
9001f99e:	f280 81eb 	bge.w	9001fd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f9a2:	2800      	cmp	r0, #0
9001f9a4:	f2c0 81e8 	blt.w	9001fd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f9a8:	f103 3eff 	add.w	lr, r3, #4294967295
9001f9ac:	4570      	cmp	r0, lr
9001f9ae:	f280 81e3 	bge.w	9001fd78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f9b2:	b212      	sxth	r2, r2
9001f9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f9b6:	fa1f fe81 	uxth.w	lr, r1
9001f9ba:	fb00 5002 	mla	r0, r0, r2, r5
9001f9be:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001f9c2:	eb03 0a00 	add.w	sl, r3, r0
9001f9c6:	f813 9000 	ldrb.w	r9, [r3, r0]
9001f9ca:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001f9ce:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f9d2:	b29b      	uxth	r3, r3
9001f9d4:	f1bc 0f00 	cmp.w	ip, #0
9001f9d8:	f000 817b 	beq.w	9001fcd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001f9dc:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001f9e0:	eb0a 0b02 	add.w	fp, sl, r2
9001f9e4:	fa1f fa8c 	uxth.w	sl, ip
9001f9e8:	940a      	str	r4, [sp, #40]	; 0x28
9001f9ea:	fb0a fe0e 	mul.w	lr, sl, lr
9001f9ee:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f9f2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001f9f6:	eba5 050e 	sub.w	r5, r5, lr
9001f9fa:	940b      	str	r4, [sp, #44]	; 0x2c
9001f9fc:	fa1f fa8a 	uxth.w	sl, sl
9001fa00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001fa02:	b2ad      	uxth	r5, r5
9001fa04:	eba3 030a 	sub.w	r3, r3, sl
9001fa08:	fb08 f505 	mul.w	r5, r8, r5
9001fa0c:	b29b      	uxth	r3, r3
9001fa0e:	fb09 5303 	mla	r3, r9, r3, r5
9001fa12:	fb0a 3304 	mla	r3, sl, r4, r3
9001fa16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fa18:	fb0e 3304 	mla	r3, lr, r4, r3
9001fa1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fa20:	2b00      	cmp	r3, #0
9001fa22:	f000 80d1 	beq.w	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fa26:	9c08      	ldr	r4, [sp, #32]
9001fa28:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001fa2c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001fa30:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001fa34:	f000 8152 	beq.w	9001fcdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001fa38:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001fa3c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fa40:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fa44:	fb0a fe0e 	mul.w	lr, sl, lr
9001fa48:	fb09 f000 	mul.w	r0, r9, r0
9001fa4c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001fa50:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fa54:	f100 0b20 	add.w	fp, r0, #32
9001fa58:	44ce      	add	lr, r9
9001fa5a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001fa5e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001fa62:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fa66:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fa6a:	ea4e 0909 	orr.w	r9, lr, r9
9001fa6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fa72:	8868      	ldrh	r0, [r5, #2]
9001fa74:	d019      	beq.n	9001faaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001fa76:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001fa7a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fa7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fa82:	fb0a fe0e 	mul.w	lr, sl, lr
9001fa86:	fb08 f800 	mul.w	r8, r8, r0
9001fa8a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001fa8e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001fa92:	f108 0b20 	add.w	fp, r8, #32
9001fa96:	4486      	add	lr, r0
9001fa98:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001fa9c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001faa0:	0a00      	lsrs	r0, r0, #8
9001faa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001faa6:	ea4e 0000 	orr.w	r0, lr, r0
9001faaa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001faae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fab2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001fab6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001faba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001fabe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fac2:	ea4e 0909 	orr.w	r9, lr, r9
9001fac6:	ea4a 0000 	orr.w	r0, sl, r0
9001faca:	f1bc 0f00 	cmp.w	ip, #0
9001face:	f000 8107 	beq.w	9001fce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001fad2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001fad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001fad8:	3a01      	subs	r2, #1
9001fada:	2cff      	cmp	r4, #255	; 0xff
9001fadc:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001fae0:	f102 0202 	add.w	r2, r2, #2
9001fae4:	eb05 0e02 	add.w	lr, r5, r2
9001fae8:	5aaa      	ldrh	r2, [r5, r2]
9001faea:	d018      	beq.n	9001fb1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001faec:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001faf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001faf4:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001faf8:	fb04 fa02 	mul.w	sl, r4, r2
9001fafc:	fb08 f805 	mul.w	r8, r8, r5
9001fb00:	f10a 0520 	add.w	r5, sl, #32
9001fb04:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001fb08:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fb0c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001fb10:	4442      	add	r2, r8
9001fb12:	0a2d      	lsrs	r5, r5, #8
9001fb14:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001fb18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fb1c:	432a      	orrs	r2, r5
9001fb1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fb20:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001fb24:	2cff      	cmp	r4, #255	; 0xff
9001fb26:	d01a      	beq.n	9001fb5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001fb28:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001fb2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fb30:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fb34:	fb04 fa05 	mul.w	sl, r4, r5
9001fb38:	fb08 f80e 	mul.w	r8, r8, lr
9001fb3c:	f10a 0e20 	add.w	lr, sl, #32
9001fb40:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001fb44:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fb48:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001fb4c:	4445      	add	r5, r8
9001fb4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001fb52:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001fb56:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001fb5a:	ea45 050e 	orr.w	r5, r5, lr
9001fb5e:	fb1c fe01 	smulbb	lr, ip, r1
9001fb62:	f1cc 0810 	rsb	r8, ip, #16
9001fb66:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001fb6a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fb6e:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001fb72:	eba8 0801 	sub.w	r8, r8, r1
9001fb76:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001fb7a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fb7e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001fb82:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fb86:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001fb8a:	ea4a 0202 	orr.w	r2, sl, r2
9001fb8e:	4341      	muls	r1, r0
9001fb90:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001fb94:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fb98:	fb09 1108 	mla	r1, r9, r8, r1
9001fb9c:	ea4b 0505 	orr.w	r5, fp, r5
9001fba0:	fb0c 1102 	mla	r1, ip, r2, r1
9001fba4:	fb0e 1e05 	mla	lr, lr, r5, r1
9001fba8:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001fbac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001fbb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fbb4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001fbb8:	ea42 0e0e 	orr.w	lr, r2, lr
9001fbbc:	fa1f f28e 	uxth.w	r2, lr
9001fbc0:	2bff      	cmp	r3, #255	; 0xff
9001fbc2:	f040 80a1 	bne.w	9001fd08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001fbc6:	803a      	strh	r2, [r7, #0]
9001fbc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fbca:	3702      	adds	r7, #2
9001fbcc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001fbce:	4413      	add	r3, r2
9001fbd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001fbd2:	931d      	str	r3, [sp, #116]	; 0x74
9001fbd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fbd6:	441a      	add	r2, r3
9001fbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fbda:	3b01      	subs	r3, #1
9001fbdc:	921e      	str	r2, [sp, #120]	; 0x78
9001fbde:	930f      	str	r3, [sp, #60]	; 0x3c
9001fbe0:	e6c7      	b.n	9001f972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fbe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fbe4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001fbe6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001fbe8:	4433      	add	r3, r6
9001fbea:	931d      	str	r3, [sp, #116]	; 0x74
9001fbec:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fbee:	441c      	add	r4, r3
9001fbf0:	9b06      	ldr	r3, [sp, #24]
9001fbf2:	3b01      	subs	r3, #1
9001fbf4:	941e      	str	r4, [sp, #120]	; 0x78
9001fbf6:	9306      	str	r3, [sp, #24]
9001fbf8:	9b07      	ldr	r3, [sp, #28]
9001fbfa:	3302      	adds	r3, #2
9001fbfc:	9307      	str	r3, [sp, #28]
9001fbfe:	e696      	b.n	9001f92e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001fc00:	d028      	beq.n	9001fc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fc02:	9b06      	ldr	r3, [sp, #24]
9001fc04:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001fc06:	3b01      	subs	r3, #1
9001fc08:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001fc0a:	fb00 5003 	mla	r0, r0, r3, r5
9001fc0e:	1400      	asrs	r0, r0, #16
9001fc10:	f53f aeaa 	bmi.w	9001f968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fc14:	3901      	subs	r1, #1
9001fc16:	4288      	cmp	r0, r1
9001fc18:	f6bf aea6 	bge.w	9001f968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fc1c:	9920      	ldr	r1, [sp, #128]	; 0x80
9001fc1e:	981e      	ldr	r0, [sp, #120]	; 0x78
9001fc20:	fb01 0303 	mla	r3, r1, r3, r0
9001fc24:	141b      	asrs	r3, r3, #16
9001fc26:	f53f ae9f 	bmi.w	9001f968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fc2a:	3a01      	subs	r2, #1
9001fc2c:	4293      	cmp	r3, r2
9001fc2e:	f6bf ae9b 	bge.w	9001f968 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fc32:	9b06      	ldr	r3, [sp, #24]
9001fc34:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001fc38:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001fc3c:	930f      	str	r3, [sp, #60]	; 0x3c
9001fc3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fc40:	2b00      	cmp	r3, #0
9001fc42:	f300 80b6 	bgt.w	9001fdb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001fc46:	9b06      	ldr	r3, [sp, #24]
9001fc48:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001fc4c:	9b07      	ldr	r3, [sp, #28]
9001fc4e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001fc52:	9307      	str	r3, [sp, #28]
9001fc54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fc56:	2b00      	cmp	r3, #0
9001fc58:	f340 8218 	ble.w	9002008c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001fc5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fc60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fc62:	ee30 0a04 	vadd.f32	s0, s0, s8
9001fc66:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001fc6a:	eef0 6a62 	vmov.f32	s13, s5
9001fc6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fc72:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fc76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fc7a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001fc7e:	eef0 6a43 	vmov.f32	s13, s6
9001fc82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fc86:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001fc8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fc8e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fc92:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fc96:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fc9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fc9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fca2:	ee12 2a90 	vmov	r2, s5
9001fca6:	eef0 2a47 	vmov.f32	s5, s14
9001fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
9001fcae:	ee13 2a10 	vmov	r2, s6
9001fcb2:	931f      	str	r3, [sp, #124]	; 0x7c
9001fcb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fcb6:	eeb0 3a67 	vmov.f32	s6, s15
9001fcba:	fb92 f3f3 	sdiv	r3, r2, r3
9001fcbe:	9320      	str	r3, [sp, #128]	; 0x80
9001fcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fcc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001fcc4:	3b01      	subs	r3, #1
9001fcc6:	930e      	str	r3, [sp, #56]	; 0x38
9001fcc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fcca:	bf08      	it	eq
9001fccc:	4613      	moveq	r3, r2
9001fcce:	9306      	str	r3, [sp, #24]
9001fcd0:	e61f      	b.n	9001f912 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001fcd2:	fb08 f505 	mul.w	r5, r8, r5
9001fcd6:	fb09 5303 	mla	r3, r9, r3, r5
9001fcda:	e69f      	b.n	9001fa1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001fcdc:	4681      	mov	r9, r0
9001fcde:	e6c6      	b.n	9001fa6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001fce0:	f1c1 0210 	rsb	r2, r1, #16
9001fce4:	4341      	muls	r1, r0
9001fce6:	fb09 1902 	mla	r9, r9, r2, r1
9001fcea:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fcee:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fcf2:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fcf6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fcfa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fcfe:	ea42 0909 	orr.w	r9, r2, r9
9001fd02:	fa1f f289 	uxth.w	r2, r9
9001fd06:	e75b      	b.n	9001fbc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001fd08:	f8b7 c000 	ldrh.w	ip, [r7]
9001fd0c:	43db      	mvns	r3, r3
9001fd0e:	ea4f 202c 	mov.w	r0, ip, asr #8
9001fd12:	fa5f fe83 	uxtb.w	lr, r3
9001fd16:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001fd1a:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001fd1e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001fd22:	fb00 f00e 	mul.w	r0, r0, lr
9001fd26:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001fd2a:	b2db      	uxtb	r3, r3
9001fd2c:	1c41      	adds	r1, r0, #1
9001fd2e:	fb05 f50e 	mul.w	r5, r5, lr
9001fd32:	fb03 f30e 	mul.w	r3, r3, lr
9001fd36:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001fd3a:	1211      	asrs	r1, r2, #8
9001fd3c:	f021 0107 	bic.w	r1, r1, #7
9001fd40:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001fd44:	48d3      	ldr	r0, [pc, #844]	; (90020094 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001fd46:	b2c9      	uxtb	r1, r1
9001fd48:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001fd4c:	1c69      	adds	r1, r5, #1
9001fd4e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001fd52:	10d1      	asrs	r1, r2, #3
9001fd54:	00d2      	lsls	r2, r2, #3
9001fd56:	f021 0103 	bic.w	r1, r1, #3
9001fd5a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fd5e:	00c9      	lsls	r1, r1, #3
9001fd60:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fd64:	4301      	orrs	r1, r0
9001fd66:	1c58      	adds	r0, r3, #1
9001fd68:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001fd6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001fd70:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001fd74:	430a      	orrs	r2, r1
9001fd76:	e726      	b.n	9001fbc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001fd78:	f115 0e01 	adds.w	lr, r5, #1
9001fd7c:	f53f af24 	bmi.w	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd80:	4572      	cmp	r2, lr
9001fd82:	f6ff af21 	blt.w	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd86:	f110 0e01 	adds.w	lr, r0, #1
9001fd8a:	f53f af1d 	bmi.w	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd8e:	4573      	cmp	r3, lr
9001fd90:	f6ff af1a 	blt.w	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fd94:	b21b      	sxth	r3, r3
9001fd96:	b212      	sxth	r2, r2
9001fd98:	9301      	str	r3, [sp, #4]
9001fd9a:	9200      	str	r2, [sp, #0]
9001fd9c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001fda0:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001fda4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001fda8:	4639      	mov	r1, r7
9001fdaa:	9811      	ldr	r0, [sp, #68]	; 0x44
9001fdac:	f7ff fc22 	bl	9001f5f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001fdb0:	e70a      	b.n	9001fbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fdb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fdb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fdb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fdba:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fdbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fdc0:	fa1f fc82 	uxth.w	ip, r2
9001fdc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fdc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fdca:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001fdce:	141f      	asrs	r7, r3, #16
9001fdd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fdd2:	141b      	asrs	r3, r3, #16
9001fdd4:	fb01 3707 	mla	r7, r1, r7, r3
9001fdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fdda:	eb03 0a07 	add.w	sl, r3, r7
9001fdde:	f813 9007 	ldrb.w	r9, [r3, r7]
9001fde2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001fde6:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fdea:	b29b      	uxth	r3, r3
9001fdec:	2d00      	cmp	r5, #0
9001fdee:	f000 80fe 	beq.w	9001ffee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001fdf2:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001fdf6:	eb0a 0b01 	add.w	fp, sl, r1
9001fdfa:	fa1f fa85 	uxth.w	sl, r5
9001fdfe:	940c      	str	r4, [sp, #48]	; 0x30
9001fe00:	fb0a fc0c 	mul.w	ip, sl, ip
9001fe04:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fe08:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fe0c:	eba0 000c 	sub.w	r0, r0, ip
9001fe10:	940d      	str	r4, [sp, #52]	; 0x34
9001fe12:	fa1f fa8a 	uxth.w	sl, sl
9001fe16:	b280      	uxth	r0, r0
9001fe18:	eba3 030a 	sub.w	r3, r3, sl
9001fe1c:	fb08 f000 	mul.w	r0, r8, r0
9001fe20:	b29b      	uxth	r3, r3
9001fe22:	fb09 0303 	mla	r3, r9, r3, r0
9001fe26:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fe28:	fb0a 3300 	mla	r3, sl, r0, r3
9001fe2c:	fb0c 3304 	mla	r3, ip, r4, r3
9001fe30:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fe34:	2b00      	cmp	r3, #0
9001fe36:	f000 80cc 	beq.w	9001ffd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001fe3a:	9808      	ldr	r0, [sp, #32]
9001fe3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001fe40:	9c08      	ldr	r4, [sp, #32]
9001fe42:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001fe46:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001fe4a:	f000 80d5 	beq.w	9001fff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001fe4e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fe52:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fe56:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe5a:	fb0a fc0c 	mul.w	ip, sl, ip
9001fe5e:	fb09 f707 	mul.w	r7, r9, r7
9001fe62:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001fe66:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fe6a:	f107 0b20 	add.w	fp, r7, #32
9001fe6e:	44cc      	add	ip, r9
9001fe70:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001fe74:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fe78:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fe7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fe80:	ea4c 0909 	orr.w	r9, ip, r9
9001fe84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fe88:	8847      	ldrh	r7, [r0, #2]
9001fe8a:	d019      	beq.n	9001fec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001fe8c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fe90:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fe94:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe98:	fb0a fc0c 	mul.w	ip, sl, ip
9001fe9c:	fb08 f807 	mul.w	r8, r8, r7
9001fea0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001fea4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fea8:	f108 0b20 	add.w	fp, r8, #32
9001feac:	44bc      	add	ip, r7
9001feae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001feb2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001feb6:	0a3f      	lsrs	r7, r7, #8
9001feb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001febc:	ea4c 0707 	orr.w	r7, ip, r7
9001fec0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001fec4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fec8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001fecc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001fed0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001fed4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fed8:	ea4c 0909 	orr.w	r9, ip, r9
9001fedc:	ea4a 0707 	orr.w	r7, sl, r7
9001fee0:	2d00      	cmp	r5, #0
9001fee2:	f000 808b 	beq.w	9001fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001fee6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001feea:	3901      	subs	r1, #1
9001feec:	0049      	lsls	r1, r1, #1
9001feee:	3102      	adds	r1, #2
9001fef0:	eb00 0c01 	add.w	ip, r0, r1
9001fef4:	5a41      	ldrh	r1, [r0, r1]
9001fef6:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fef8:	28ff      	cmp	r0, #255	; 0xff
9001fefa:	d019      	beq.n	9001ff30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001fefc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001ff00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001ff02:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001ff06:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001ff0a:	fb04 fa01 	mul.w	sl, r4, r1
9001ff0e:	fb08 f800 	mul.w	r8, r8, r0
9001ff12:	f10a 0020 	add.w	r0, sl, #32
9001ff16:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001ff1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ff1e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001ff22:	4441      	add	r1, r8
9001ff24:	0a00      	lsrs	r0, r0, #8
9001ff26:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001ff2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ff2e:	4301      	orrs	r1, r0
9001ff30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ff32:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001ff36:	2cff      	cmp	r4, #255	; 0xff
9001ff38:	d01a      	beq.n	9001ff70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001ff3a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001ff3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ff42:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001ff46:	fb04 fa00 	mul.w	sl, r4, r0
9001ff4a:	fb08 f80c 	mul.w	r8, r8, ip
9001ff4e:	f10a 0c20 	add.w	ip, sl, #32
9001ff52:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001ff56:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ff5a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001ff5e:	4440      	add	r0, r8
9001ff60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ff64:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001ff68:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001ff6c:	ea40 000c 	orr.w	r0, r0, ip
9001ff70:	fb15 fc02 	smulbb	ip, r5, r2
9001ff74:	f1c5 0810 	rsb	r8, r5, #16
9001ff78:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001ff7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001ff80:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001ff84:	eba8 0802 	sub.w	r8, r8, r2
9001ff88:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001ff8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ff90:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001ff94:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ff98:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001ff9c:	ea4a 0101 	orr.w	r1, sl, r1
9001ffa0:	437a      	muls	r2, r7
9001ffa2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001ffa6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ffaa:	fb09 2208 	mla	r2, r9, r8, r2
9001ffae:	ea4b 0000 	orr.w	r0, fp, r0
9001ffb2:	fb05 2201 	mla	r2, r5, r1, r2
9001ffb6:	fb0c 2200 	mla	r2, ip, r0, r2
9001ffba:	0d57      	lsrs	r7, r2, #21
9001ffbc:	0952      	lsrs	r2, r2, #5
9001ffbe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ffc2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ffc6:	433a      	orrs	r2, r7
9001ffc8:	2bff      	cmp	r3, #255	; 0xff
9001ffca:	b292      	uxth	r2, r2
9001ffcc:	d127      	bne.n	9002001e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001ffce:	f8ae 2000 	strh.w	r2, [lr]
9001ffd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001ffd4:	f10e 0e02 	add.w	lr, lr, #2
9001ffd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001ffda:	4413      	add	r3, r2
9001ffdc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001ffde:	931d      	str	r3, [sp, #116]	; 0x74
9001ffe0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001ffe2:	441a      	add	r2, r3
9001ffe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001ffe6:	3b01      	subs	r3, #1
9001ffe8:	921e      	str	r2, [sp, #120]	; 0x78
9001ffea:	930f      	str	r3, [sp, #60]	; 0x3c
9001ffec:	e627      	b.n	9001fc3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001ffee:	fb08 f000 	mul.w	r0, r8, r0
9001fff2:	fb09 0303 	mla	r3, r9, r3, r0
9001fff6:	e71b      	b.n	9001fe30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001fff8:	46b9      	mov	r9, r7
9001fffa:	e743      	b.n	9001fe84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001fffc:	f1c2 0110 	rsb	r1, r2, #16
90020000:	437a      	muls	r2, r7
90020002:	fb09 2901 	mla	r9, r9, r1, r2
90020006:	ea4f 0949 	mov.w	r9, r9, lsl #1
9002000a:	ea4f 5059 	mov.w	r0, r9, lsr #21
9002000e:	ea4f 1259 	mov.w	r2, r9, lsr #5
90020012:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020016:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002001a:	4302      	orrs	r2, r0
9002001c:	e7d4      	b.n	9001ffc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9002001e:	f8be 7000 	ldrh.w	r7, [lr]
90020022:	43db      	mvns	r3, r3
90020024:	4c1b      	ldr	r4, [pc, #108]	; (90020094 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90020026:	1238      	asrs	r0, r7, #8
90020028:	fa5f fc83 	uxtb.w	ip, r3
9002002c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020030:	10fd      	asrs	r5, r7, #3
90020032:	00fb      	lsls	r3, r7, #3
90020034:	fb00 f00c 	mul.w	r0, r0, ip
90020038:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9002003c:	b2db      	uxtb	r3, r3
9002003e:	fb05 f10c 	mul.w	r1, r5, ip
90020042:	1c45      	adds	r5, r0, #1
90020044:	fb03 f30c 	mul.w	r3, r3, ip
90020048:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002004c:	1215      	asrs	r5, r2, #8
9002004e:	f025 0507 	bic.w	r5, r5, #7
90020052:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90020056:	1c4d      	adds	r5, r1, #1
90020058:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9002005c:	10d1      	asrs	r1, r2, #3
9002005e:	b2c0      	uxtb	r0, r0
90020060:	f021 0103 	bic.w	r1, r1, #3
90020064:	00d2      	lsls	r2, r2, #3
90020066:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9002006a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002006e:	00c9      	lsls	r1, r1, #3
90020070:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020074:	4308      	orrs	r0, r1
90020076:	1c59      	adds	r1, r3, #1
90020078:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9002007c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020080:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90020084:	4318      	orrs	r0, r3
90020086:	f8ae 0000 	strh.w	r0, [lr]
9002008a:	e7a2      	b.n	9001ffd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9002008c:	b013      	add	sp, #76	; 0x4c
9002008e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020092:	bf00      	nop
90020094:	fffff800 	.word	0xfffff800

90020098 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90020098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002009c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
900200a0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
900200a4:	fb05 4c03 	mla	ip, r5, r3, r4
900200a8:	2d00      	cmp	r5, #0
900200aa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
900200ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900200b2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
900200b6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
900200ba:	8808      	ldrh	r0, [r1, #0]
900200bc:	f2c0 80a7 	blt.w	9002020e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
900200c0:	45aa      	cmp	sl, r5
900200c2:	f340 80a4 	ble.w	9002020e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
900200c6:	2c00      	cmp	r4, #0
900200c8:	f2c0 809f 	blt.w	9002020a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900200cc:	42a3      	cmp	r3, r4
900200ce:	f340 809c 	ble.w	9002020a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900200d2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
900200d6:	1c62      	adds	r2, r4, #1
900200d8:	f100 809c 	bmi.w	90020214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900200dc:	4293      	cmp	r3, r2
900200de:	f340 8099 	ble.w	90020214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900200e2:	f1b9 0f00 	cmp.w	r9, #0
900200e6:	f000 8095 	beq.w	90020214 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900200ea:	f8be c002 	ldrh.w	ip, [lr, #2]
900200ee:	3501      	adds	r5, #1
900200f0:	f100 8094 	bmi.w	9002021c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900200f4:	45aa      	cmp	sl, r5
900200f6:	f340 8091 	ble.w	9002021c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900200fa:	2f00      	cmp	r7, #0
900200fc:	f000 808e 	beq.w	9002021c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90020100:	2c00      	cmp	r4, #0
90020102:	f2c0 8089 	blt.w	90020218 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90020106:	42a3      	cmp	r3, r4
90020108:	f340 8086 	ble.w	90020218 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9002010c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
90020110:	3401      	adds	r4, #1
90020112:	f100 8086 	bmi.w	90020222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90020116:	42a3      	cmp	r3, r4
90020118:	f340 8083 	ble.w	90020222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9002011c:	f1b9 0f00 	cmp.w	r9, #0
90020120:	d07f      	beq.n	90020222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90020122:	3301      	adds	r3, #1
90020124:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
90020128:	ea4f 4408 	mov.w	r4, r8, lsl #16
9002012c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90020130:	fb19 fe07 	smulbb	lr, r9, r7
90020134:	f1c7 0210 	rsb	r2, r7, #16
90020138:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002013c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90020140:	eba2 0209 	sub.w	r2, r2, r9
90020144:	ea44 0808 	orr.w	r8, r4, r8
90020148:	ea4f 440c 	mov.w	r4, ip, lsl #16
9002014c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020150:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90020154:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020158:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9002015c:	ea44 0c0c 	orr.w	ip, r4, ip
90020160:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90020164:	fb04 f40c 	mul.w	r4, r4, ip
90020168:	fb02 4808 	mla	r8, r2, r8, r4
9002016c:	041a      	lsls	r2, r3, #16
9002016e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020172:	b2b4      	uxth	r4, r6
90020174:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020178:	43f6      	mvns	r6, r6
9002017a:	4313      	orrs	r3, r2
9002017c:	042a      	lsls	r2, r5, #16
9002017e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020182:	b2f6      	uxtb	r6, r6
90020184:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020188:	fb0e 8303 	mla	r3, lr, r3, r8
9002018c:	432a      	orrs	r2, r5
9002018e:	fb07 3202 	mla	r2, r7, r2, r3
90020192:	10c7      	asrs	r7, r0, #3
90020194:	0d53      	lsrs	r3, r2, #21
90020196:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002019a:	0952      	lsrs	r2, r2, #5
9002019c:	fb17 f706 	smulbb	r7, r7, r6
900201a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900201a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900201a8:	431a      	orrs	r2, r3
900201aa:	b293      	uxth	r3, r2
900201ac:	1202      	asrs	r2, r0, #8
900201ae:	121d      	asrs	r5, r3, #8
900201b0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900201b4:	00c0      	lsls	r0, r0, #3
900201b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900201ba:	fb12 f206 	smulbb	r2, r2, r6
900201be:	b2c0      	uxtb	r0, r0
900201c0:	fb05 2504 	mla	r5, r5, r4, r2
900201c4:	10da      	asrs	r2, r3, #3
900201c6:	fb10 f006 	smulbb	r0, r0, r6
900201ca:	00db      	lsls	r3, r3, #3
900201cc:	b2ad      	uxth	r5, r5
900201ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900201d2:	b2db      	uxtb	r3, r3
900201d4:	fb02 7204 	mla	r2, r2, r4, r7
900201d8:	fb03 0004 	mla	r0, r3, r4, r0
900201dc:	1c6b      	adds	r3, r5, #1
900201de:	b292      	uxth	r2, r2
900201e0:	b280      	uxth	r0, r0
900201e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900201e6:	1c43      	adds	r3, r0, #1
900201e8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900201ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900201f0:	1c50      	adds	r0, r2, #1
900201f2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900201f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900201fa:	0952      	lsrs	r2, r2, #5
900201fc:	432b      	orrs	r3, r5
900201fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020202:	4313      	orrs	r3, r2
90020204:	800b      	strh	r3, [r1, #0]
90020206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002020a:	4680      	mov	r8, r0
9002020c:	e763      	b.n	900200d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9002020e:	4684      	mov	ip, r0
90020210:	4680      	mov	r8, r0
90020212:	e76c      	b.n	900200ee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90020214:	4684      	mov	ip, r0
90020216:	e76a      	b.n	900200ee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90020218:	4605      	mov	r5, r0
9002021a:	e779      	b.n	90020110 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9002021c:	4603      	mov	r3, r0
9002021e:	4605      	mov	r5, r0
90020220:	e782      	b.n	90020128 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
90020222:	4603      	mov	r3, r0
90020224:	e780      	b.n	90020128 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

90020226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020226:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002022a:	b093      	sub	sp, #76	; 0x4c
9002022c:	461d      	mov	r5, r3
9002022e:	9210      	str	r2, [sp, #64]	; 0x40
90020230:	9b21      	ldr	r3, [sp, #132]	; 0x84
90020232:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
90020236:	910a      	str	r1, [sp, #40]	; 0x28
90020238:	920b      	str	r2, [sp, #44]	; 0x2c
9002023a:	6859      	ldr	r1, [r3, #4]
9002023c:	681b      	ldr	r3, [r3, #0]
9002023e:	9011      	str	r0, [sp, #68]	; 0x44
90020240:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90020244:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90020248:	fb01 2707 	mla	r7, r1, r7, r2
9002024c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90020250:	9307      	str	r3, [sp, #28]
90020252:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020254:	681b      	ldr	r3, [r3, #0]
90020256:	9309      	str	r3, [sp, #36]	; 0x24
90020258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002025a:	43db      	mvns	r3, r3
9002025c:	b2db      	uxtb	r3, r3
9002025e:	9308      	str	r3, [sp, #32]
90020260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020262:	2b00      	cmp	r3, #0
90020264:	dc03      	bgt.n	9002026e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90020266:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020268:	2b00      	cmp	r3, #0
9002026a:	f340 8205 	ble.w	90020678 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002026e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020270:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020274:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020278:	1e48      	subs	r0, r1, #1
9002027a:	f102 3cff 	add.w	ip, r2, #4294967295
9002027e:	2d00      	cmp	r5, #0
90020280:	f340 80da 	ble.w	90020438 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90020284:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020288:	ea4f 4326 	mov.w	r3, r6, asr #16
9002028c:	d406      	bmi.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002028e:	4586      	cmp	lr, r0
90020290:	da04      	bge.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020292:	2b00      	cmp	r3, #0
90020294:	db02      	blt.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020296:	4563      	cmp	r3, ip
90020298:	f2c0 80cf 	blt.w	9002043a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002029c:	f11e 0e01 	adds.w	lr, lr, #1
900202a0:	f100 80c1 	bmi.w	90020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900202a4:	4571      	cmp	r1, lr
900202a6:	f2c0 80be 	blt.w	90020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900202aa:	3301      	adds	r3, #1
900202ac:	f100 80bb 	bmi.w	90020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900202b0:	429a      	cmp	r2, r3
900202b2:	f2c0 80b8 	blt.w	90020426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900202b6:	46a9      	mov	r9, r5
900202b8:	f8dd 801c 	ldr.w	r8, [sp, #28]
900202bc:	f1b9 0f00 	cmp.w	r9, #0
900202c0:	f340 80d8 	ble.w	90020474 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
900202c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900202c6:	1421      	asrs	r1, r4, #16
900202c8:	ea4f 4026 	mov.w	r0, r6, asr #16
900202cc:	f3c4 3203 	ubfx	r2, r4, #12, #4
900202d0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
900202d4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900202d8:	f100 8112 	bmi.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900202dc:	f10e 3aff 	add.w	sl, lr, #4294967295
900202e0:	4551      	cmp	r1, sl
900202e2:	f280 810d 	bge.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900202e6:	2800      	cmp	r0, #0
900202e8:	f2c0 810a 	blt.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900202ec:	f103 3aff 	add.w	sl, r3, #4294967295
900202f0:	4550      	cmp	r0, sl
900202f2:	f280 8105 	bge.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900202f6:	fa0f f38e 	sxth.w	r3, lr
900202fa:	fb00 1103 	mla	r1, r0, r3, r1
900202fe:	9809      	ldr	r0, [sp, #36]	; 0x24
90020300:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90020304:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90020308:	f8ba 1002 	ldrh.w	r1, [sl, #2]
9002030c:	f1bc 0f00 	cmp.w	ip, #0
90020310:	d007      	beq.n	90020322 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90020312:	005b      	lsls	r3, r3, #1
90020314:	eb0a 0003 	add.w	r0, sl, r3
90020318:	f83a 3003 	ldrh.w	r3, [sl, r3]
9002031c:	930c      	str	r3, [sp, #48]	; 0x30
9002031e:	8843      	ldrh	r3, [r0, #2]
90020320:	930d      	str	r3, [sp, #52]	; 0x34
90020322:	ea4f 400e 	mov.w	r0, lr, lsl #16
90020326:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002032a:	fb12 f30c 	smulbb	r3, r2, ip
9002032e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90020332:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020336:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002033a:	10db      	asrs	r3, r3, #3
9002033c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020340:	ea40 000e 	orr.w	r0, r0, lr
90020344:	f1cc 0e10 	rsb	lr, ip, #16
90020348:	ea4a 0101 	orr.w	r1, sl, r1
9002034c:	9f08      	ldr	r7, [sp, #32]
9002034e:	ebae 0e02 	sub.w	lr, lr, r2
90020352:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020356:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002035a:	4351      	muls	r1, r2
9002035c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9002035e:	fb0e 1e00 	mla	lr, lr, r0, r1
90020362:	990c      	ldr	r1, [sp, #48]	; 0x30
90020364:	0410      	lsls	r0, r2, #16
90020366:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002036a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002036e:	4310      	orrs	r0, r2
90020370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020372:	0412      	lsls	r2, r2, #16
90020374:	fb03 e000 	mla	r0, r3, r0, lr
90020378:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9002037c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020380:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020384:	ea42 020e 	orr.w	r2, r2, lr
90020388:	fb03 0302 	mla	r3, r3, r2, r0
9002038c:	f8b8 0000 	ldrh.w	r0, [r8]
90020390:	0d5a      	lsrs	r2, r3, #21
90020392:	095b      	lsrs	r3, r3, #5
90020394:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020398:	1201      	asrs	r1, r0, #8
9002039a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002039e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
900203a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900203a6:	00c0      	lsls	r0, r0, #3
900203a8:	4313      	orrs	r3, r2
900203aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900203ae:	fb11 f107 	smulbb	r1, r1, r7
900203b2:	b2c0      	uxtb	r0, r0
900203b4:	b29b      	uxth	r3, r3
900203b6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900203ba:	fb10 f007 	smulbb	r0, r0, r7
900203be:	fb1e fe07 	smulbb	lr, lr, r7
900203c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
900203c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900203ca:	fb0c 1c02 	mla	ip, ip, r2, r1
900203ce:	10d9      	asrs	r1, r3, #3
900203d0:	00db      	lsls	r3, r3, #3
900203d2:	fa1f fc8c 	uxth.w	ip, ip
900203d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900203da:	b2db      	uxtb	r3, r3
900203dc:	fb01 e102 	mla	r1, r1, r2, lr
900203e0:	fb03 0302 	mla	r3, r3, r2, r0
900203e4:	b289      	uxth	r1, r1
900203e6:	b29a      	uxth	r2, r3
900203e8:	f10c 0301 	add.w	r3, ip, #1
900203ec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900203f0:	1c53      	adds	r3, r2, #1
900203f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900203f6:	1c4a      	adds	r2, r1, #1
900203f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900203fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90020400:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020404:	0949      	lsrs	r1, r1, #5
90020406:	ea43 030c 	orr.w	r3, r3, ip
9002040a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002040e:	430b      	orrs	r3, r1
90020410:	f8a8 3000 	strh.w	r3, [r8]
90020414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020416:	f108 0802 	add.w	r8, r8, #2
9002041a:	f109 39ff 	add.w	r9, r9, #4294967295
9002041e:	441c      	add	r4, r3
90020420:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020422:	441e      	add	r6, r3
90020424:	e74a      	b.n	900202bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90020426:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020428:	3d01      	subs	r5, #1
9002042a:	441c      	add	r4, r3
9002042c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002042e:	441e      	add	r6, r3
90020430:	9b07      	ldr	r3, [sp, #28]
90020432:	3302      	adds	r3, #2
90020434:	9307      	str	r3, [sp, #28]
90020436:	e722      	b.n	9002027e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020438:	d022      	beq.n	90020480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9002043a:	1e6b      	subs	r3, r5, #1
9002043c:	981f      	ldr	r0, [sp, #124]	; 0x7c
9002043e:	fb00 4003 	mla	r0, r0, r3, r4
90020442:	1400      	asrs	r0, r0, #16
90020444:	f53f af37 	bmi.w	900202b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020448:	3901      	subs	r1, #1
9002044a:	4288      	cmp	r0, r1
9002044c:	f6bf af33 	bge.w	900202b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020450:	9920      	ldr	r1, [sp, #128]	; 0x80
90020452:	fb01 6303 	mla	r3, r1, r3, r6
90020456:	141b      	asrs	r3, r3, #16
90020458:	f53f af2d 	bmi.w	900202b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002045c:	3a01      	subs	r2, #1
9002045e:	4293      	cmp	r3, r2
90020460:	f6bf af29 	bge.w	900202b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020464:	46a8      	mov	r8, r5
90020466:	f8dd 901c 	ldr.w	r9, [sp, #28]
9002046a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002046e:	f1b8 0f00 	cmp.w	r8, #0
90020472:	dc60      	bgt.n	90020536 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90020474:	9b07      	ldr	r3, [sp, #28]
90020476:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002047a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002047e:	9307      	str	r3, [sp, #28]
90020480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020482:	2b00      	cmp	r3, #0
90020484:	f340 80f8 	ble.w	90020678 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002048c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002048e:	ee30 0a04 	vadd.f32	s0, s0, s8
90020492:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020496:	eef0 6a62 	vmov.f32	s13, s5
9002049a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002049e:	ee31 1a05 	vadd.f32	s2, s2, s10
900204a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900204a6:	ee16 4a90 	vmov	r4, s13
900204aa:	eef0 6a43 	vmov.f32	s13, s6
900204ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900204b2:	ee16 6a90 	vmov	r6, s13
900204b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900204ba:	ee61 7a27 	vmul.f32	s15, s2, s15
900204be:	ee77 2a62 	vsub.f32	s5, s14, s5
900204c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900204c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900204ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900204ce:	ee12 2a90 	vmov	r2, s5
900204d2:	eef0 2a47 	vmov.f32	s5, s14
900204d6:	fb92 f3f3 	sdiv	r3, r2, r3
900204da:	ee13 2a10 	vmov	r2, s6
900204de:	931f      	str	r3, [sp, #124]	; 0x7c
900204e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900204e2:	eeb0 3a67 	vmov.f32	s6, s15
900204e6:	fb92 f3f3 	sdiv	r3, r2, r3
900204ea:	9320      	str	r3, [sp, #128]	; 0x80
900204ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900204ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
900204f0:	3b01      	subs	r3, #1
900204f2:	930a      	str	r3, [sp, #40]	; 0x28
900204f4:	bf08      	it	eq
900204f6:	4615      	moveq	r5, r2
900204f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900204fa:	bf18      	it	ne
900204fc:	461d      	movne	r5, r3
900204fe:	e6af      	b.n	90020260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90020500:	f111 0a01 	adds.w	sl, r1, #1
90020504:	d486      	bmi.n	90020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020506:	45d6      	cmp	lr, sl
90020508:	db84      	blt.n	90020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002050a:	f110 0a01 	adds.w	sl, r0, #1
9002050e:	d481      	bmi.n	90020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020510:	4553      	cmp	r3, sl
90020512:	f6ff af7f 	blt.w	90020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020516:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90020518:	b21b      	sxth	r3, r3
9002051a:	9101      	str	r1, [sp, #4]
9002051c:	4641      	mov	r1, r8
9002051e:	9300      	str	r3, [sp, #0]
90020520:	fa0f f38e 	sxth.w	r3, lr
90020524:	e9cd 0202 	strd	r0, r2, [sp, #8]
90020528:	e9cd c704 	strd	ip, r7, [sp, #16]
9002052c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002052e:	9811      	ldr	r0, [sp, #68]	; 0x44
90020530:	f7ff fdb2 	bl	90020098 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
90020534:	e76e      	b.n	90020414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020536:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020538:	1430      	asrs	r0, r6, #16
9002053a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9002053c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90020540:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020544:	1423      	asrs	r3, r4, #16
90020546:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002054a:	fb01 3000 	mla	r0, r1, r0, r3
9002054e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020550:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90020554:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90020558:	8858      	ldrh	r0, [r3, #2]
9002055a:	f1be 0f00 	cmp.w	lr, #0
9002055e:	d00b      	beq.n	90020578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90020560:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90020564:	3901      	subs	r1, #1
90020566:	0049      	lsls	r1, r1, #1
90020568:	3102      	adds	r1, #2
9002056a:	eb03 0b01 	add.w	fp, r3, r1
9002056e:	5a5b      	ldrh	r3, [r3, r1]
90020570:	930e      	str	r3, [sp, #56]	; 0x38
90020572:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90020576:	930f      	str	r3, [sp, #60]	; 0x3c
90020578:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002057c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020580:	fb12 f30e 	smulbb	r3, r2, lr
90020584:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020588:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002058c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020590:	10db      	asrs	r3, r3, #3
90020592:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020596:	ea41 010c 	orr.w	r1, r1, ip
9002059a:	f1ce 0c10 	rsb	ip, lr, #16
9002059e:	ea4b 0000 	orr.w	r0, fp, r0
900205a2:	9f08      	ldr	r7, [sp, #32]
900205a4:	ebac 0c02 	sub.w	ip, ip, r2
900205a8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900205ac:	f108 38ff 	add.w	r8, r8, #4294967295
900205b0:	4350      	muls	r0, r2
900205b2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900205b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900205b8:	fb0c 0c01 	mla	ip, ip, r1, r0
900205bc:	980e      	ldr	r0, [sp, #56]	; 0x38
900205be:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900205c2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
900205c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900205c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900205cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900205d0:	0412      	lsls	r2, r2, #16
900205d2:	ea4b 0101 	orr.w	r1, fp, r1
900205d6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900205da:	fb03 c101 	mla	r1, r3, r1, ip
900205de:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
900205e2:	4302      	orrs	r2, r0
900205e4:	fb03 1202 	mla	r2, r3, r2, r1
900205e8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
900205ec:	0952      	lsrs	r2, r2, #5
900205ee:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900205f2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900205f6:	f8b9 2000 	ldrh.w	r2, [r9]
900205fa:	ea4b 0303 	orr.w	r3, fp, r3
900205fe:	1211      	asrs	r1, r2, #8
90020600:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90020604:	b29b      	uxth	r3, r3
90020606:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002060a:	00d2      	lsls	r2, r2, #3
9002060c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90020610:	fb11 f107 	smulbb	r1, r1, r7
90020614:	1218      	asrs	r0, r3, #8
90020616:	fb1c fc07 	smulbb	ip, ip, r7
9002061a:	b2d2      	uxtb	r2, r2
9002061c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020620:	fb12 f207 	smulbb	r2, r2, r7
90020624:	fb00 100a 	mla	r0, r0, sl, r1
90020628:	10d9      	asrs	r1, r3, #3
9002062a:	00db      	lsls	r3, r3, #3
9002062c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020630:	b280      	uxth	r0, r0
90020632:	b2db      	uxtb	r3, r3
90020634:	fb01 c10a 	mla	r1, r1, sl, ip
90020638:	fb03 230a 	mla	r3, r3, sl, r2
9002063c:	1c42      	adds	r2, r0, #1
9002063e:	b289      	uxth	r1, r1
90020640:	b29b      	uxth	r3, r3
90020642:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90020646:	f101 0c01 	add.w	ip, r1, #1
9002064a:	1c5a      	adds	r2, r3, #1
9002064c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90020650:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90020654:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020658:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002065a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002065e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020662:	441c      	add	r4, r3
90020664:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020668:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002066a:	4310      	orrs	r0, r2
9002066c:	441e      	add	r6, r3
9002066e:	ea40 000c 	orr.w	r0, r0, ip
90020672:	f829 0b02 	strh.w	r0, [r9], #2
90020676:	e6fa      	b.n	9002046e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90020678:	b013      	add	sp, #76	; 0x4c
9002067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002067e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9002067e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90020682:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90020686:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002068a:	fb0e 4703 	mla	r7, lr, r3, r4
9002068e:	f1be 0f00 	cmp.w	lr, #0
90020692:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90020696:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002069a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002069e:	8808      	ldrh	r0, [r1, #0]
900206a0:	db60      	blt.n	90020764 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900206a2:	45f1      	cmp	r9, lr
900206a4:	dd5e      	ble.n	90020764 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900206a6:	2c00      	cmp	r4, #0
900206a8:	db5a      	blt.n	90020760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900206aa:	42a3      	cmp	r3, r4
900206ac:	dd58      	ble.n	90020760 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900206ae:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
900206b2:	1c62      	adds	r2, r4, #1
900206b4:	d459      	bmi.n	9002076a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900206b6:	4293      	cmp	r3, r2
900206b8:	dd57      	ble.n	9002076a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900206ba:	2d00      	cmp	r5, #0
900206bc:	d055      	beq.n	9002076a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900206be:	f8b8 7002 	ldrh.w	r7, [r8, #2]
900206c2:	f11e 0e01 	adds.w	lr, lr, #1
900206c6:	d454      	bmi.n	90020772 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900206c8:	45f1      	cmp	r9, lr
900206ca:	dd52      	ble.n	90020772 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900206cc:	2e00      	cmp	r6, #0
900206ce:	d050      	beq.n	90020772 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900206d0:	2c00      	cmp	r4, #0
900206d2:	db4c      	blt.n	9002076e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900206d4:	42a3      	cmp	r3, r4
900206d6:	dd4a      	ble.n	9002076e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900206d8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
900206dc:	3401      	adds	r4, #1
900206de:	d405      	bmi.n	900206ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900206e0:	42a3      	cmp	r3, r4
900206e2:	dd03      	ble.n	900206ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900206e4:	b115      	cbz	r5, 900206ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900206e6:	3301      	adds	r3, #1
900206e8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
900206ec:	fb15 f406 	smulbb	r4, r5, r6
900206f0:	ea4f 430c 	mov.w	r3, ip, lsl #16
900206f4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900206f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900206fc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020700:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90020704:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020708:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002070c:	ea43 0c0c 	orr.w	ip, r3, ip
90020710:	f1c6 0310 	rsb	r3, r6, #16
90020714:	ea4e 0707 	orr.w	r7, lr, r7
90020718:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9002071c:	1b5b      	subs	r3, r3, r5
9002071e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
90020722:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90020726:	437d      	muls	r5, r7
90020728:	fb03 5c0c 	mla	ip, r3, ip, r5
9002072c:	0403      	lsls	r3, r0, #16
9002072e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020732:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020736:	4318      	orrs	r0, r3
90020738:	0413      	lsls	r3, r2, #16
9002073a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002073e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020742:	fb04 c000 	mla	r0, r4, r0, ip
90020746:	4313      	orrs	r3, r2
90020748:	fb06 0003 	mla	r0, r6, r3, r0
9002074c:	0d43      	lsrs	r3, r0, #21
9002074e:	0940      	lsrs	r0, r0, #5
90020750:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020754:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020758:	4318      	orrs	r0, r3
9002075a:	8008      	strh	r0, [r1, #0]
9002075c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90020760:	4684      	mov	ip, r0
90020762:	e7a6      	b.n	900206b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90020764:	4607      	mov	r7, r0
90020766:	4684      	mov	ip, r0
90020768:	e7ab      	b.n	900206c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002076a:	4607      	mov	r7, r0
9002076c:	e7a9      	b.n	900206c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002076e:	4602      	mov	r2, r0
90020770:	e7b4      	b.n	900206dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90020772:	4602      	mov	r2, r0
90020774:	e7ba      	b.n	900206ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90020776 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002077a:	b08f      	sub	sp, #60	; 0x3c
9002077c:	461d      	mov	r5, r3
9002077e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90020780:	9107      	str	r1, [sp, #28]
90020782:	920c      	str	r2, [sp, #48]	; 0x30
90020784:	6859      	ldr	r1, [r3, #4]
90020786:	681b      	ldr	r3, [r3, #0]
90020788:	900d      	str	r0, [sp, #52]	; 0x34
9002078a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002078e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90020792:	fb01 2707 	mla	r7, r1, r7, r2
90020796:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002079a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002079c:	f8d3 8000 	ldr.w	r8, [r3]
900207a0:	9b07      	ldr	r3, [sp, #28]
900207a2:	2b00      	cmp	r3, #0
900207a4:	dc03      	bgt.n	900207ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900207a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900207a8:	2b00      	cmp	r3, #0
900207aa:	f340 8182 	ble.w	90020ab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900207ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900207b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900207b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900207b8:	1e48      	subs	r0, r1, #1
900207ba:	f102 3cff 	add.w	ip, r2, #4294967295
900207be:	2d00      	cmp	r5, #0
900207c0:	f340 809b 	ble.w	900208fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
900207c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
900207c8:	ea4f 4326 	mov.w	r3, r6, asr #16
900207cc:	d406      	bmi.n	900207dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900207ce:	4586      	cmp	lr, r0
900207d0:	da04      	bge.n	900207dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900207d2:	2b00      	cmp	r3, #0
900207d4:	db02      	blt.n	900207dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900207d6:	4563      	cmp	r3, ip
900207d8:	f2c0 8090 	blt.w	900208fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900207dc:	f11e 0e01 	adds.w	lr, lr, #1
900207e0:	f100 8084 	bmi.w	900208ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900207e4:	4571      	cmp	r1, lr
900207e6:	f2c0 8081 	blt.w	900208ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900207ea:	3301      	adds	r3, #1
900207ec:	d47e      	bmi.n	900208ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900207ee:	429a      	cmp	r2, r3
900207f0:	db7c      	blt.n	900208ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900207f2:	46aa      	mov	sl, r5
900207f4:	46b9      	mov	r9, r7
900207f6:	f1ba 0f00 	cmp.w	sl, #0
900207fa:	f340 8099 	ble.w	90020930 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900207fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020800:	1421      	asrs	r1, r4, #16
90020802:	ea4f 4026 	mov.w	r0, r6, asr #16
90020806:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002080a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002080e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020812:	f100 80d1 	bmi.w	900209b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020816:	f10e 3bff 	add.w	fp, lr, #4294967295
9002081a:	4559      	cmp	r1, fp
9002081c:	f280 80cc 	bge.w	900209b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020820:	2800      	cmp	r0, #0
90020822:	f2c0 80c9 	blt.w	900209b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020826:	f103 3bff 	add.w	fp, r3, #4294967295
9002082a:	4558      	cmp	r0, fp
9002082c:	f280 80c4 	bge.w	900209b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020830:	fa0f fe8e 	sxth.w	lr, lr
90020834:	fb00 110e 	mla	r1, r0, lr, r1
90020838:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9002083c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90020840:	8841      	ldrh	r1, [r0, #2]
90020842:	f1bc 0f00 	cmp.w	ip, #0
90020846:	d00b      	beq.n	90020860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90020848:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
9002084c:	3b01      	subs	r3, #1
9002084e:	005b      	lsls	r3, r3, #1
90020850:	3302      	adds	r3, #2
90020852:	eb00 0e03 	add.w	lr, r0, r3
90020856:	5ac3      	ldrh	r3, [r0, r3]
90020858:	9308      	str	r3, [sp, #32]
9002085a:	f8be 3002 	ldrh.w	r3, [lr, #2]
9002085e:	9309      	str	r3, [sp, #36]	; 0x24
90020860:	ea4f 400b 	mov.w	r0, fp, lsl #16
90020864:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90020868:	fb12 f30c 	smulbb	r3, r2, ip
9002086c:	f1cc 0e10 	rsb	lr, ip, #16
90020870:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020874:	10db      	asrs	r3, r3, #3
90020876:	ebae 0e02 	sub.w	lr, lr, r2
9002087a:	ea40 000b 	orr.w	r0, r0, fp
9002087e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020882:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020886:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002088a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002088e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90020892:	ea4b 0101 	orr.w	r1, fp, r1
90020896:	4351      	muls	r1, r2
90020898:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002089a:	fb0e 1e00 	mla	lr, lr, r0, r1
9002089e:	0410      	lsls	r0, r2, #16
900208a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900208a4:	9908      	ldr	r1, [sp, #32]
900208a6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900208aa:	4310      	orrs	r0, r2
900208ac:	9a08      	ldr	r2, [sp, #32]
900208ae:	0412      	lsls	r2, r2, #16
900208b0:	fb03 e000 	mla	r0, r3, r0, lr
900208b4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
900208b8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
900208bc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900208c0:	ea42 020e 	orr.w	r2, r2, lr
900208c4:	fb03 0302 	mla	r3, r3, r2, r0
900208c8:	0d5a      	lsrs	r2, r3, #21
900208ca:	095b      	lsrs	r3, r3, #5
900208cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900208d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900208d4:	4313      	orrs	r3, r2
900208d6:	f8a9 3000 	strh.w	r3, [r9]
900208da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900208dc:	f109 0902 	add.w	r9, r9, #2
900208e0:	f10a 3aff 	add.w	sl, sl, #4294967295
900208e4:	441c      	add	r4, r3
900208e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900208e8:	441e      	add	r6, r3
900208ea:	e784      	b.n	900207f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900208ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900208ee:	3d01      	subs	r5, #1
900208f0:	3702      	adds	r7, #2
900208f2:	441c      	add	r4, r3
900208f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900208f6:	441e      	add	r6, r3
900208f8:	e761      	b.n	900207be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900208fa:	d01d      	beq.n	90020938 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900208fc:	1e6b      	subs	r3, r5, #1
900208fe:	981b      	ldr	r0, [sp, #108]	; 0x6c
90020900:	fb00 4003 	mla	r0, r0, r3, r4
90020904:	1400      	asrs	r0, r0, #16
90020906:	f53f af74 	bmi.w	900207f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002090a:	3901      	subs	r1, #1
9002090c:	4288      	cmp	r0, r1
9002090e:	f6bf af70 	bge.w	900207f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90020912:	991c      	ldr	r1, [sp, #112]	; 0x70
90020914:	fb01 6303 	mla	r3, r1, r3, r6
90020918:	141b      	asrs	r3, r3, #16
9002091a:	f53f af6a 	bmi.w	900207f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002091e:	3a01      	subs	r2, #1
90020920:	4293      	cmp	r3, r2
90020922:	f6bf af66 	bge.w	900207f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90020926:	46a9      	mov	r9, r5
90020928:	46ba      	mov	sl, r7
9002092a:	f1b9 0f00 	cmp.w	r9, #0
9002092e:	dc5b      	bgt.n	900209e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90020930:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90020934:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90020938:	9b07      	ldr	r3, [sp, #28]
9002093a:	2b00      	cmp	r3, #0
9002093c:	f340 80b9 	ble.w	90020ab2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020944:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020946:	ee30 0a04 	vadd.f32	s0, s0, s8
9002094a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002094e:	eef0 6a62 	vmov.f32	s13, s5
90020952:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020956:	ee31 1a05 	vadd.f32	s2, s2, s10
9002095a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002095e:	ee16 4a90 	vmov	r4, s13
90020962:	eef0 6a43 	vmov.f32	s13, s6
90020966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002096a:	ee16 6a90 	vmov	r6, s13
9002096e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020972:	ee61 7a27 	vmul.f32	s15, s2, s15
90020976:	ee77 2a62 	vsub.f32	s5, s14, s5
9002097a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002097e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020982:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020986:	ee12 2a90 	vmov	r2, s5
9002098a:	eef0 2a47 	vmov.f32	s5, s14
9002098e:	fb92 f3f3 	sdiv	r3, r2, r3
90020992:	ee13 2a10 	vmov	r2, s6
90020996:	931b      	str	r3, [sp, #108]	; 0x6c
90020998:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002099a:	eeb0 3a67 	vmov.f32	s6, s15
9002099e:	fb92 f3f3 	sdiv	r3, r2, r3
900209a2:	931c      	str	r3, [sp, #112]	; 0x70
900209a4:	9b07      	ldr	r3, [sp, #28]
900209a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900209a8:	3b01      	subs	r3, #1
900209aa:	9307      	str	r3, [sp, #28]
900209ac:	bf08      	it	eq
900209ae:	4615      	moveq	r5, r2
900209b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
900209b2:	bf18      	it	ne
900209b4:	461d      	movne	r5, r3
900209b6:	e6f3      	b.n	900207a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900209b8:	f111 0b01 	adds.w	fp, r1, #1
900209bc:	d48d      	bmi.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900209be:	45de      	cmp	lr, fp
900209c0:	db8b      	blt.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900209c2:	f110 0b01 	adds.w	fp, r0, #1
900209c6:	d488      	bmi.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900209c8:	455b      	cmp	r3, fp
900209ca:	db86      	blt.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900209cc:	b21b      	sxth	r3, r3
900209ce:	e9cd 1001 	strd	r1, r0, [sp, #4]
900209d2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
900209d6:	9300      	str	r3, [sp, #0]
900209d8:	4642      	mov	r2, r8
900209da:	fa0f f38e 	sxth.w	r3, lr
900209de:	4649      	mov	r1, r9
900209e0:	980d      	ldr	r0, [sp, #52]	; 0x34
900209e2:	f7ff fe4c 	bl	9002067e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
900209e6:	e778      	b.n	900208da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900209e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900209ea:	1420      	asrs	r0, r4, #16
900209ec:	1431      	asrs	r1, r6, #16
900209ee:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900209f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900209f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900209fa:	fb03 0101 	mla	r1, r3, r1, r0
900209fe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90020a02:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90020a06:	8841      	ldrh	r1, [r0, #2]
90020a08:	f1be 0f00 	cmp.w	lr, #0
90020a0c:	d00b      	beq.n	90020a26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90020a0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90020a12:	3b01      	subs	r3, #1
90020a14:	005b      	lsls	r3, r3, #1
90020a16:	3302      	adds	r3, #2
90020a18:	eb00 0b03 	add.w	fp, r0, r3
90020a1c:	5ac3      	ldrh	r3, [r0, r3]
90020a1e:	930a      	str	r3, [sp, #40]	; 0x28
90020a20:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90020a24:	930b      	str	r3, [sp, #44]	; 0x2c
90020a26:	ea4f 400c 	mov.w	r0, ip, lsl #16
90020a2a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020a2e:	fb12 f30e 	smulbb	r3, r2, lr
90020a32:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020a36:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020a3a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020a3e:	10db      	asrs	r3, r3, #3
90020a40:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020a44:	ea40 000c 	orr.w	r0, r0, ip
90020a48:	f1ce 0c10 	rsb	ip, lr, #16
90020a4c:	ea4b 0101 	orr.w	r1, fp, r1
90020a50:	f109 39ff 	add.w	r9, r9, #4294967295
90020a54:	ebac 0c02 	sub.w	ip, ip, r2
90020a58:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020a5c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90020a60:	4351      	muls	r1, r2
90020a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020a64:	fb0c 1c00 	mla	ip, ip, r0, r1
90020a68:	990a      	ldr	r1, [sp, #40]	; 0x28
90020a6a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020a6e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90020a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90020a74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020a78:	0412      	lsls	r2, r2, #16
90020a7a:	ea4b 0000 	orr.w	r0, fp, r0
90020a7e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90020a82:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020a86:	fb03 c000 	mla	r0, r3, r0, ip
90020a8a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020a8e:	ea42 0b0b 	orr.w	fp, r2, fp
90020a92:	fb03 000b 	mla	r0, r3, fp, r0
90020a96:	0d43      	lsrs	r3, r0, #21
90020a98:	0940      	lsrs	r0, r0, #5
90020a9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020a9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020aa2:	4318      	orrs	r0, r3
90020aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90020aa6:	441c      	add	r4, r3
90020aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020aaa:	f82a 0b02 	strh.w	r0, [sl], #2
90020aae:	441e      	add	r6, r3
90020ab0:	e73b      	b.n	9002092a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90020ab2:	b00f      	add	sp, #60	; 0x3c
90020ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020ab8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020abc:	b085      	sub	sp, #20
90020abe:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90020ac2:	9102      	str	r1, [sp, #8]
90020ac4:	2c00      	cmp	r4, #0
90020ac6:	fb04 7103 	mla	r1, r4, r3, r7
90020aca:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90020ace:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90020ad2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90020ad6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90020ada:	f2c0 811b 	blt.w	90020d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020ade:	45a6      	cmp	lr, r4
90020ae0:	f340 8118 	ble.w	90020d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020ae4:	2f00      	cmp	r7, #0
90020ae6:	f2c0 8113 	blt.w	90020d10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020aea:	42bb      	cmp	r3, r7
90020aec:	f340 8110 	ble.w	90020d10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020af0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90020af4:	1c7a      	adds	r2, r7, #1
90020af6:	f100 8110 	bmi.w	90020d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020afa:	4293      	cmp	r3, r2
90020afc:	f340 810d 	ble.w	90020d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020b00:	2e00      	cmp	r6, #0
90020b02:	f000 810c 	beq.w	90020d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90020b06:	f8dc 1004 	ldr.w	r1, [ip, #4]
90020b0a:	3401      	adds	r4, #1
90020b0c:	f100 810b 	bmi.w	90020d26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020b10:	45a6      	cmp	lr, r4
90020b12:	f340 8108 	ble.w	90020d26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020b16:	2800      	cmp	r0, #0
90020b18:	f000 8108 	beq.w	90020d2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90020b1c:	2f00      	cmp	r7, #0
90020b1e:	f2c0 8100 	blt.w	90020d22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020b22:	42bb      	cmp	r3, r7
90020b24:	f340 80fd 	ble.w	90020d22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90020b28:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90020b2c:	3701      	adds	r7, #1
90020b2e:	f100 8100 	bmi.w	90020d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020b32:	42bb      	cmp	r3, r7
90020b34:	f340 80fd 	ble.w	90020d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90020b38:	2e00      	cmp	r6, #0
90020b3a:	f000 80fc 	beq.w	90020d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90020b3e:	3301      	adds	r3, #1
90020b40:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90020b44:	b2b6      	uxth	r6, r6
90020b46:	b280      	uxth	r0, r0
90020b48:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90020b4c:	fb00 fe06 	mul.w	lr, r0, r6
90020b50:	0136      	lsls	r6, r6, #4
90020b52:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90020b56:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90020b5a:	eba6 070e 	sub.w	r7, r6, lr
90020b5e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90020b62:	ea4f 6914 	mov.w	r9, r4, lsr #24
90020b66:	b280      	uxth	r0, r0
90020b68:	b2bf      	uxth	r7, r7
90020b6a:	1a1b      	subs	r3, r3, r0
90020b6c:	ea4f 6812 	mov.w	r8, r2, lsr #24
90020b70:	fb0a f607 	mul.w	r6, sl, r7
90020b74:	b29b      	uxth	r3, r3
90020b76:	fb0b 6603 	mla	r6, fp, r3, r6
90020b7a:	fb00 6609 	mla	r6, r0, r9, r6
90020b7e:	fb0e 6608 	mla	r6, lr, r8, r6
90020b82:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020b86:	9600      	str	r6, [sp, #0]
90020b88:	2e00      	cmp	r6, #0
90020b8a:	f000 80be 	beq.w	90020d0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90020b8e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020b92:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90020b96:	9e02      	ldr	r6, [sp, #8]
90020b98:	fb0b fc0c 	mul.w	ip, fp, ip
90020b9c:	fb0b f505 	mul.w	r5, fp, r5
90020ba0:	8836      	ldrh	r6, [r6, #0]
90020ba2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90020ba6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020baa:	9501      	str	r5, [sp, #4]
90020bac:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90020bb0:	44dc      	add	ip, fp
90020bb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020bb6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90020bba:	9503      	str	r5, [sp, #12]
90020bbc:	9d01      	ldr	r5, [sp, #4]
90020bbe:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90020bc2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90020bc6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90020bca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020bce:	fb0a fc0c 	mul.w	ip, sl, ip
90020bd2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90020bd6:	fb0a fa01 	mul.w	sl, sl, r1
90020bda:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020bde:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020be2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90020be6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020bea:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020bee:	4465      	add	r5, ip
90020bf0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90020bf4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90020bf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020bfc:	fb09 fc0c 	mul.w	ip, r9, ip
90020c00:	0a2d      	lsrs	r5, r5, #8
90020c02:	fb09 f904 	mul.w	r9, r9, r4
90020c06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020c0a:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020c0e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020c12:	f509 7480 	add.w	r4, r9, #256	; 0x100
90020c16:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020c1a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020c1e:	437d      	muls	r5, r7
90020c20:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90020c24:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90020c28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020c2c:	4461      	add	r1, ip
90020c2e:	fb08 f404 	mul.w	r4, r8, r4
90020c32:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020c36:	fb08 f802 	mul.w	r8, r8, r2
90020c3a:	0a09      	lsrs	r1, r1, #8
90020c3c:	0a22      	lsrs	r2, r4, #8
90020c3e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90020c42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020c46:	fb07 f70a 	mul.w	r7, r7, sl
90020c4a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020c4e:	4414      	add	r4, r2
90020c50:	f508 7280 	add.w	r2, r8, #256	; 0x100
90020c54:	0a24      	lsrs	r4, r4, #8
90020c56:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90020c5a:	9a03      	ldr	r2, [sp, #12]
90020c5c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90020c60:	fb02 5503 	mla	r5, r2, r3, r5
90020c64:	ea4f 2818 	mov.w	r8, r8, lsr #8
90020c68:	9a00      	ldr	r2, [sp, #0]
90020c6a:	fb04 540e 	mla	r4, r4, lr, r5
90020c6e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90020c72:	1235      	asrs	r5, r6, #8
90020c74:	fb01 4100 	mla	r1, r1, r0, r4
90020c78:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020c7c:	0a09      	lsrs	r1, r1, #8
90020c7e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90020c82:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90020c86:	fb03 7101 	mla	r1, r3, r1, r7
90020c8a:	fb0e 1e08 	mla	lr, lr, r8, r1
90020c8e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90020c92:	fb00 e101 	mla	r1, r0, r1, lr
90020c96:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90020c9a:	b287      	uxth	r7, r0
90020c9c:	0a09      	lsrs	r1, r1, #8
90020c9e:	437a      	muls	r2, r7
90020ca0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020ca4:	1c53      	adds	r3, r2, #1
90020ca6:	4321      	orrs	r1, r4
90020ca8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020cac:	0c0a      	lsrs	r2, r1, #16
90020cae:	f3c1 2407 	ubfx	r4, r1, #8, #8
90020cb2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90020cb6:	b2c8      	uxtb	r0, r1
90020cb8:	fb12 f207 	smulbb	r2, r2, r7
90020cbc:	fb14 f407 	smulbb	r4, r4, r7
90020cc0:	b2db      	uxtb	r3, r3
90020cc2:	fb10 f007 	smulbb	r0, r0, r7
90020cc6:	fb05 2503 	mla	r5, r5, r3, r2
90020cca:	10f2      	asrs	r2, r6, #3
90020ccc:	00f6      	lsls	r6, r6, #3
90020cce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020cd2:	b2ad      	uxth	r5, r5
90020cd4:	b2f6      	uxtb	r6, r6
90020cd6:	fb02 4203 	mla	r2, r2, r3, r4
90020cda:	fb06 0303 	mla	r3, r6, r3, r0
90020cde:	b294      	uxth	r4, r2
90020ce0:	b299      	uxth	r1, r3
90020ce2:	1c6b      	adds	r3, r5, #1
90020ce4:	1c62      	adds	r2, r4, #1
90020ce6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020cea:	1c4b      	adds	r3, r1, #1
90020cec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90020cf0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90020cf4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90020cf8:	0952      	lsrs	r2, r2, #5
90020cfa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020cfe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020d02:	432b      	orrs	r3, r5
90020d04:	4313      	orrs	r3, r2
90020d06:	9a02      	ldr	r2, [sp, #8]
90020d08:	8013      	strh	r3, [r2, #0]
90020d0a:	b005      	add	sp, #20
90020d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020d10:	2500      	movs	r5, #0
90020d12:	e6ef      	b.n	90020af4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90020d14:	2100      	movs	r1, #0
90020d16:	460d      	mov	r5, r1
90020d18:	e6f7      	b.n	90020b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020d1a:	2100      	movs	r1, #0
90020d1c:	e6f5      	b.n	90020b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020d1e:	4631      	mov	r1, r6
90020d20:	e6f3      	b.n	90020b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020d22:	2400      	movs	r4, #0
90020d24:	e702      	b.n	90020b2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90020d26:	2200      	movs	r2, #0
90020d28:	4614      	mov	r4, r2
90020d2a:	e70b      	b.n	90020b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020d2c:	4602      	mov	r2, r0
90020d2e:	4604      	mov	r4, r0
90020d30:	e708      	b.n	90020b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020d32:	2200      	movs	r2, #0
90020d34:	e706      	b.n	90020b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020d36:	4632      	mov	r2, r6
90020d38:	e704      	b.n	90020b44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90020d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020d3e:	b09d      	sub	sp, #116	; 0x74
90020d40:	9219      	str	r2, [sp, #100]	; 0x64
90020d42:	9307      	str	r3, [sp, #28]
90020d44:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90020d46:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90020d4a:	901b      	str	r0, [sp, #108]	; 0x6c
90020d4c:	931a      	str	r3, [sp, #104]	; 0x68
90020d4e:	6850      	ldr	r0, [r2, #4]
90020d50:	9117      	str	r1, [sp, #92]	; 0x5c
90020d52:	6812      	ldr	r2, [r2, #0]
90020d54:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90020d58:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90020d5c:	fb00 1303 	mla	r3, r0, r3, r1
90020d60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020d64:	930a      	str	r3, [sp, #40]	; 0x28
90020d66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020d68:	681b      	ldr	r3, [r3, #0]
90020d6a:	9310      	str	r3, [sp, #64]	; 0x40
90020d6c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90020d70:	930b      	str	r3, [sp, #44]	; 0x2c
90020d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020d74:	2b00      	cmp	r3, #0
90020d76:	dc03      	bgt.n	90020d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90020d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
90020d7a:	2b00      	cmp	r3, #0
90020d7c:	f340 8375 	ble.w	9002146a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020d80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020d82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020d86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020d8a:	1e48      	subs	r0, r1, #1
90020d8c:	1e57      	subs	r7, r2, #1
90020d8e:	9b07      	ldr	r3, [sp, #28]
90020d90:	2b00      	cmp	r3, #0
90020d92:	f340 818e 	ble.w	900210b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020d96:	ea5f 4c24 	movs.w	ip, r4, asr #16
90020d9a:	ea4f 4326 	mov.w	r3, r6, asr #16
90020d9e:	d406      	bmi.n	90020dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020da0:	4584      	cmp	ip, r0
90020da2:	da04      	bge.n	90020dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020da4:	2b00      	cmp	r3, #0
90020da6:	db02      	blt.n	90020dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020da8:	42bb      	cmp	r3, r7
90020daa:	f2c0 8183 	blt.w	900210b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90020dae:	f11c 0c01 	adds.w	ip, ip, #1
90020db2:	f100 8173 	bmi.w	9002109c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020db6:	4561      	cmp	r1, ip
90020db8:	f2c0 8170 	blt.w	9002109c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020dbc:	3301      	adds	r3, #1
90020dbe:	f100 816d 	bmi.w	9002109c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020dc2:	429a      	cmp	r2, r3
90020dc4:	f2c0 816a 	blt.w	9002109c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020dc8:	9b07      	ldr	r3, [sp, #28]
90020dca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90020dcc:	9318      	str	r3, [sp, #96]	; 0x60
90020dce:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020dd0:	2b00      	cmp	r3, #0
90020dd2:	f340 818c 	ble.w	900210ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90020dd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90020dd8:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020ddc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020dde:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020de2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020de6:	1422      	asrs	r2, r4, #16
90020de8:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020dec:	689b      	ldr	r3, [r3, #8]
90020dee:	f100 81cd 	bmi.w	9002118c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020df2:	f103 38ff 	add.w	r8, r3, #4294967295
90020df6:	4542      	cmp	r2, r8
90020df8:	f280 81c8 	bge.w	9002118c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020dfc:	f1bc 0f00 	cmp.w	ip, #0
90020e00:	f2c0 81c4 	blt.w	9002118c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020e04:	f10e 38ff 	add.w	r8, lr, #4294967295
90020e08:	45c4      	cmp	ip, r8
90020e0a:	f280 81bf 	bge.w	9002118c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020e0e:	b21b      	sxth	r3, r3
90020e10:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020e12:	fb0c 2203 	mla	r2, ip, r3, r2
90020e16:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020e1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90020e1e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020e22:	2800      	cmp	r0, #0
90020e24:	f000 81a9 	beq.w	9002117a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90020e28:	f8d8 5004 	ldr.w	r5, [r8, #4]
90020e2c:	950c      	str	r5, [sp, #48]	; 0x30
90020e2e:	0e2d      	lsrs	r5, r5, #24
90020e30:	9513      	str	r5, [sp, #76]	; 0x4c
90020e32:	b181      	cbz	r1, 90020e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020e34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90020e38:	3b01      	subs	r3, #1
90020e3a:	009b      	lsls	r3, r3, #2
90020e3c:	3304      	adds	r3, #4
90020e3e:	eb08 0c03 	add.w	ip, r8, r3
90020e42:	f858 3003 	ldr.w	r3, [r8, r3]
90020e46:	9308      	str	r3, [sp, #32]
90020e48:	0e1b      	lsrs	r3, r3, #24
90020e4a:	9311      	str	r3, [sp, #68]	; 0x44
90020e4c:	f8dc 3004 	ldr.w	r3, [ip, #4]
90020e50:	930d      	str	r3, [sp, #52]	; 0x34
90020e52:	0e1b      	lsrs	r3, r3, #24
90020e54:	9314      	str	r3, [sp, #80]	; 0x50
90020e56:	b280      	uxth	r0, r0
90020e58:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020e5a:	b289      	uxth	r1, r1
90020e5c:	fb00 f901 	mul.w	r9, r0, r1
90020e60:	0100      	lsls	r0, r0, #4
90020e62:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020e66:	eba0 0809 	sub.w	r8, r0, r9
90020e6a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90020e6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020e70:	b289      	uxth	r1, r1
90020e72:	fa1f f888 	uxth.w	r8, r8
90020e76:	1a5b      	subs	r3, r3, r1
90020e78:	fb08 f000 	mul.w	r0, r8, r0
90020e7c:	b29b      	uxth	r3, r3
90020e7e:	fb03 000e 	mla	r0, r3, lr, r0
90020e82:	fb01 0005 	mla	r0, r1, r5, r0
90020e86:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020e88:	fb09 0005 	mla	r0, r9, r5, r0
90020e8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90020e90:	2800      	cmp	r0, #0
90020e92:	f000 80fa 	beq.w	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020e96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90020e9a:	d01b      	beq.n	90020ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90020e9c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90020ea0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020ea4:	fb0e fa0a 	mul.w	sl, lr, sl
90020ea8:	fb0e fe02 	mul.w	lr, lr, r2
90020eac:	ea4f 221a 	mov.w	r2, sl, lsr #8
90020eb0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90020eb4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90020eb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020ebc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020ec0:	4452      	add	r2, sl
90020ec2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020ec6:	0a12      	lsrs	r2, r2, #8
90020ec8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90020ecc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020ed0:	ea42 020c 	orr.w	r2, r2, ip
90020ed4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020ed6:	2dff      	cmp	r5, #255	; 0xff
90020ed8:	d021      	beq.n	90020f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90020eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020edc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020ee0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020ee2:	fb05 fb0b 	mul.w	fp, r5, fp
90020ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020ee8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020eec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020eee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020ef2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020ef6:	fb05 fa0a 	mul.w	sl, r5, sl
90020efa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020efe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020f02:	44de      	add	lr, fp
90020f04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020f08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020f0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020f10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020f18:	ea4e 050a 	orr.w	r5, lr, sl
90020f1c:	950c      	str	r5, [sp, #48]	; 0x30
90020f1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020f20:	2dff      	cmp	r5, #255	; 0xff
90020f22:	d021      	beq.n	90020f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90020f24:	9d08      	ldr	r5, [sp, #32]
90020f26:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020f2a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020f2c:	fb05 fb0b 	mul.w	fp, r5, fp
90020f30:	9d08      	ldr	r5, [sp, #32]
90020f32:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020f36:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020f38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020f3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020f40:	fb05 fa0a 	mul.w	sl, r5, sl
90020f44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f48:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020f4c:	44de      	add	lr, fp
90020f4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020f52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020f56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020f5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020f62:	ea4e 050a 	orr.w	r5, lr, sl
90020f66:	9508      	str	r5, [sp, #32]
90020f68:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f6a:	2dff      	cmp	r5, #255	; 0xff
90020f6c:	d021      	beq.n	90020fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90020f6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f70:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020f74:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f76:	fb05 fb0b 	mul.w	fp, r5, fp
90020f7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020f7c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020f80:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020f82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020f86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020f8a:	fb05 fa0a 	mul.w	sl, r5, sl
90020f8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020f92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020f96:	44de      	add	lr, fp
90020f98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020f9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020fa0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020fa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020fa8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020fac:	ea4e 050a 	orr.w	r5, lr, sl
90020fb0:	950d      	str	r5, [sp, #52]	; 0x34
90020fb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020fb4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90020fb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020fbc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020fc0:	9d08      	ldr	r5, [sp, #32]
90020fc2:	fb08 fc0c 	mul.w	ip, r8, ip
90020fc6:	fb03 cc0e 	mla	ip, r3, lr, ip
90020fca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020fce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020fd0:	fb01 cc0e 	mla	ip, r1, lr, ip
90020fd4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020fd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020fda:	fb09 cc0e 	mla	ip, r9, lr, ip
90020fde:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90020fe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90020fe4:	fb08 f80e 	mul.w	r8, r8, lr
90020fe8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020fec:	fb03 8202 	mla	r2, r3, r2, r8
90020ff0:	9b08      	ldr	r3, [sp, #32]
90020ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020ff6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
90020ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020ffc:	fb01 220a 	mla	r2, r1, sl, r2
90021000:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90021004:	883b      	ldrh	r3, [r7, #0]
90021006:	fb09 2901 	mla	r9, r9, r1, r2
9002100a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002100c:	1219      	asrs	r1, r3, #8
9002100e:	4342      	muls	r2, r0
90021010:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021014:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021018:	1c50      	adds	r0, r2, #1
9002101a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002101e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90021022:	ea4c 0c09 	orr.w	ip, ip, r9
90021026:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9002102a:	ea4f 421c 	mov.w	r2, ip, lsr #16
9002102e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90021032:	fa5f fc8c 	uxtb.w	ip, ip
90021036:	fb12 f205 	smulbb	r2, r2, r5
9002103a:	b2c0      	uxtb	r0, r0
9002103c:	fb1c fc05 	smulbb	ip, ip, r5
90021040:	fb01 2100 	mla	r1, r1, r0, r2
90021044:	10da      	asrs	r2, r3, #3
90021046:	fb1e fe05 	smulbb	lr, lr, r5
9002104a:	00db      	lsls	r3, r3, #3
9002104c:	b289      	uxth	r1, r1
9002104e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021052:	b2db      	uxtb	r3, r3
90021054:	fb02 e200 	mla	r2, r2, r0, lr
90021058:	fb03 c300 	mla	r3, r3, r0, ip
9002105c:	b292      	uxth	r2, r2
9002105e:	fa1f fc83 	uxth.w	ip, r3
90021062:	1c4b      	adds	r3, r1, #1
90021064:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021068:	f10c 0301 	add.w	r3, ip, #1
9002106c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021070:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021074:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021078:	430b      	orrs	r3, r1
9002107a:	1c51      	adds	r1, r2, #1
9002107c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021080:	0952      	lsrs	r2, r2, #5
90021082:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021086:	4313      	orrs	r3, r2
90021088:	803b      	strh	r3, [r7, #0]
9002108a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002108c:	3702      	adds	r7, #2
9002108e:	441c      	add	r4, r3
90021090:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021092:	441e      	add	r6, r3
90021094:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021096:	3b01      	subs	r3, #1
90021098:	9318      	str	r3, [sp, #96]	; 0x60
9002109a:	e698      	b.n	90020dce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002109c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002109e:	441c      	add	r4, r3
900210a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900210a2:	441e      	add	r6, r3
900210a4:	9b07      	ldr	r3, [sp, #28]
900210a6:	3b01      	subs	r3, #1
900210a8:	9307      	str	r3, [sp, #28]
900210aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900210ac:	3302      	adds	r3, #2
900210ae:	930a      	str	r3, [sp, #40]	; 0x28
900210b0:	e66d      	b.n	90020d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
900210b2:	d023      	beq.n	900210fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
900210b4:	9b07      	ldr	r3, [sp, #28]
900210b6:	9829      	ldr	r0, [sp, #164]	; 0xa4
900210b8:	3b01      	subs	r3, #1
900210ba:	fb00 4003 	mla	r0, r0, r3, r4
900210be:	1400      	asrs	r0, r0, #16
900210c0:	f53f ae82 	bmi.w	90020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900210c4:	3901      	subs	r1, #1
900210c6:	4288      	cmp	r0, r1
900210c8:	f6bf ae7e 	bge.w	90020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900210cc:	992a      	ldr	r1, [sp, #168]	; 0xa8
900210ce:	fb01 6303 	mla	r3, r1, r3, r6
900210d2:	141b      	asrs	r3, r3, #16
900210d4:	f53f ae78 	bmi.w	90020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900210d8:	3a01      	subs	r2, #1
900210da:	4293      	cmp	r3, r2
900210dc:	f6bf ae74 	bge.w	90020dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900210e0:	f8dd b01c 	ldr.w	fp, [sp, #28]
900210e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900210e8:	f1bb 0f00 	cmp.w	fp, #0
900210ec:	dc6c      	bgt.n	900211c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900210ee:	9b07      	ldr	r3, [sp, #28]
900210f0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900210f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900210f6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900210fa:	930a      	str	r3, [sp, #40]	; 0x28
900210fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900210fe:	2b00      	cmp	r3, #0
90021100:	f340 81b3 	ble.w	9002146a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90021104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021108:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002110a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002110e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021112:	eef0 6a62 	vmov.f32	s13, s5
90021116:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002111a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002111e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021122:	ee16 4a90 	vmov	r4, s13
90021126:	eef0 6a43 	vmov.f32	s13, s6
9002112a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002112e:	ee16 6a90 	vmov	r6, s13
90021132:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021136:	ee61 7a27 	vmul.f32	s15, s2, s15
9002113a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002113e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021142:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021146:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002114a:	ee12 2a90 	vmov	r2, s5
9002114e:	eef0 2a47 	vmov.f32	s5, s14
90021152:	fb92 f3f3 	sdiv	r3, r2, r3
90021156:	ee13 2a10 	vmov	r2, s6
9002115a:	9329      	str	r3, [sp, #164]	; 0xa4
9002115c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002115e:	eeb0 3a67 	vmov.f32	s6, s15
90021162:	fb92 f3f3 	sdiv	r3, r2, r3
90021166:	932a      	str	r3, [sp, #168]	; 0xa8
90021168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002116a:	9a19      	ldr	r2, [sp, #100]	; 0x64
9002116c:	3b01      	subs	r3, #1
9002116e:	9317      	str	r3, [sp, #92]	; 0x5c
90021170:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021172:	bf08      	it	eq
90021174:	4613      	moveq	r3, r2
90021176:	9307      	str	r3, [sp, #28]
90021178:	e5fb      	b.n	90020d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002117a:	2900      	cmp	r1, #0
9002117c:	f43f ae6b 	beq.w	90020e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021180:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021184:	9308      	str	r3, [sp, #32]
90021186:	0e1b      	lsrs	r3, r3, #24
90021188:	9311      	str	r3, [sp, #68]	; 0x44
9002118a:	e664      	b.n	90020e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9002118c:	f112 0801 	adds.w	r8, r2, #1
90021190:	f53f af7b 	bmi.w	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021194:	4543      	cmp	r3, r8
90021196:	f6ff af78 	blt.w	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002119a:	f11c 0801 	adds.w	r8, ip, #1
9002119e:	f53f af74 	bmi.w	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900211a2:	45c6      	cmp	lr, r8
900211a4:	f6ff af71 	blt.w	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900211a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
900211aa:	b21b      	sxth	r3, r3
900211ac:	9201      	str	r2, [sp, #4]
900211ae:	fa0f f28e 	sxth.w	r2, lr
900211b2:	e9cd 1504 	strd	r1, r5, [sp, #16]
900211b6:	e9cd c002 	strd	ip, r0, [sp, #8]
900211ba:	9200      	str	r2, [sp, #0]
900211bc:	4639      	mov	r1, r7
900211be:	9a10      	ldr	r2, [sp, #64]	; 0x40
900211c0:	981b      	ldr	r0, [sp, #108]	; 0x6c
900211c2:	f7ff fc79 	bl	90020ab8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
900211c6:	e760      	b.n	9002108a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900211c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900211ca:	1427      	asrs	r7, r4, #16
900211cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
900211ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
900211d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900211d6:	1433      	asrs	r3, r6, #16
900211d8:	f3c6 3003 	ubfx	r0, r6, #12, #4
900211dc:	fb01 7303 	mla	r3, r1, r3, r7
900211e0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
900211e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
900211e8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
900211ec:	2a00      	cmp	r2, #0
900211ee:	f000 8133 	beq.w	90021458 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
900211f2:	687d      	ldr	r5, [r7, #4]
900211f4:	950e      	str	r5, [sp, #56]	; 0x38
900211f6:	0e2d      	lsrs	r5, r5, #24
900211f8:	9515      	str	r5, [sp, #84]	; 0x54
900211fa:	b178      	cbz	r0, 9002121c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900211fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90021200:	3901      	subs	r1, #1
90021202:	0089      	lsls	r1, r1, #2
90021204:	3104      	adds	r1, #4
90021206:	eb07 0e01 	add.w	lr, r7, r1
9002120a:	5879      	ldr	r1, [r7, r1]
9002120c:	9109      	str	r1, [sp, #36]	; 0x24
9002120e:	0e09      	lsrs	r1, r1, #24
90021210:	9112      	str	r1, [sp, #72]	; 0x48
90021212:	f8de 1004 	ldr.w	r1, [lr, #4]
90021216:	910f      	str	r1, [sp, #60]	; 0x3c
90021218:	0e09      	lsrs	r1, r1, #24
9002121a:	9116      	str	r1, [sp, #88]	; 0x58
9002121c:	b292      	uxth	r2, r2
9002121e:	9915      	ldr	r1, [sp, #84]	; 0x54
90021220:	b280      	uxth	r0, r0
90021222:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021224:	fb02 f800 	mul.w	r8, r2, r0
90021228:	0112      	lsls	r2, r2, #4
9002122a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9002122e:	eba2 0e08 	sub.w	lr, r2, r8
90021232:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021236:	b280      	uxth	r0, r0
90021238:	fa1f fe8e 	uxth.w	lr, lr
9002123c:	1a12      	subs	r2, r2, r0
9002123e:	fb0e f101 	mul.w	r1, lr, r1
90021242:	b292      	uxth	r2, r2
90021244:	fb02 110c 	mla	r1, r2, ip, r1
90021248:	fb00 1105 	mla	r1, r0, r5, r1
9002124c:	9d16      	ldr	r5, [sp, #88]	; 0x58
9002124e:	fb08 1105 	mla	r1, r8, r5, r1
90021252:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021256:	2900      	cmp	r1, #0
90021258:	f000 80f5 	beq.w	90021446 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9002125c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021260:	d019      	beq.n	90021296 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90021262:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002126a:	fb0c fa0a 	mul.w	sl, ip, sl
9002126e:	fb0c fc03 	mul.w	ip, ip, r3
90021272:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021276:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002127a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002127e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021282:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021286:	4453      	add	r3, sl
90021288:	0a3f      	lsrs	r7, r7, #8
9002128a:	0a1b      	lsrs	r3, r3, #8
9002128c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021290:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021294:	433b      	orrs	r3, r7
90021296:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021298:	2dff      	cmp	r5, #255	; 0xff
9002129a:	d020      	beq.n	900212de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9002129c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002129e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900212a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
900212a4:	436f      	muls	r7, r5
900212a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900212a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900212ac:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900212b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
900212b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900212b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900212ba:	fb05 fa0a 	mul.w	sl, r5, sl
900212be:	44bc      	add	ip, r7
900212c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900212c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900212c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900212cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900212d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900212d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900212d8:	ea4c 050a 	orr.w	r5, ip, sl
900212dc:	950e      	str	r5, [sp, #56]	; 0x38
900212de:	9d12      	ldr	r5, [sp, #72]	; 0x48
900212e0:	2dff      	cmp	r5, #255	; 0xff
900212e2:	d020      	beq.n	90021326 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
900212e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
900212e6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900212ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
900212ec:	436f      	muls	r7, r5
900212ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
900212f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900212f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900212f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900212fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900212fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021302:	fb05 fa0a 	mul.w	sl, r5, sl
90021306:	44bc      	add	ip, r7
90021308:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002130c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021310:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021314:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021318:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002131c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021320:	ea4c 050a 	orr.w	r5, ip, sl
90021324:	9509      	str	r5, [sp, #36]	; 0x24
90021326:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021328:	2dff      	cmp	r5, #255	; 0xff
9002132a:	d020      	beq.n	9002136e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
9002132c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002132e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021332:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021334:	436f      	muls	r7, r5
90021336:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021338:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002133c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021340:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021342:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021346:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002134a:	fb05 fa0a 	mul.w	sl, r5, sl
9002134e:	44bc      	add	ip, r7
90021350:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021354:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021358:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002135c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021360:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021364:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021368:	ea4c 050a 	orr.w	r5, ip, sl
9002136c:	950f      	str	r5, [sp, #60]	; 0x3c
9002136e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021370:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021378:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002137c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002137e:	fb0e f707 	mul.w	r7, lr, r7
90021382:	fb02 770c 	mla	r7, r2, ip, r7
90021386:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002138a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002138c:	fb00 770c 	mla	r7, r0, ip, r7
90021390:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021394:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021396:	fb08 770c 	mla	r7, r8, ip, r7
9002139a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002139e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900213a0:	fb0e fe0c 	mul.w	lr, lr, ip
900213a4:	0a3f      	lsrs	r7, r7, #8
900213a6:	fb02 e303 	mla	r3, r2, r3, lr
900213aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
900213ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900213b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
900213b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900213b6:	fb00 330a 	mla	r3, r0, sl, r3
900213ba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
900213be:	f8b9 0000 	ldrh.w	r0, [r9]
900213c2:	fb08 3c0c 	mla	ip, r8, ip, r3
900213c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900213c8:	1202      	asrs	r2, r0, #8
900213ca:	4359      	muls	r1, r3
900213cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900213d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900213d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900213d8:	1c4b      	adds	r3, r1, #1
900213da:	ea47 070c 	orr.w	r7, r7, ip
900213de:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900213e2:	0c3b      	lsrs	r3, r7, #16
900213e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
900213e8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
900213ec:	b2ff      	uxtb	r7, r7
900213ee:	fb13 f305 	smulbb	r3, r3, r5
900213f2:	b2c9      	uxtb	r1, r1
900213f4:	fb17 f705 	smulbb	r7, r7, r5
900213f8:	fb02 3201 	mla	r2, r2, r1, r3
900213fc:	10c3      	asrs	r3, r0, #3
900213fe:	fb1c fc05 	smulbb	ip, ip, r5
90021402:	00c0      	lsls	r0, r0, #3
90021404:	b292      	uxth	r2, r2
90021406:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002140a:	b2c0      	uxtb	r0, r0
9002140c:	fb03 c301 	mla	r3, r3, r1, ip
90021410:	fb00 7001 	mla	r0, r0, r1, r7
90021414:	1c51      	adds	r1, r2, #1
90021416:	b29b      	uxth	r3, r3
90021418:	b280      	uxth	r0, r0
9002141a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002141e:	f100 0c01 	add.w	ip, r0, #1
90021422:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90021426:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
9002142a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9002142e:	ea4c 0202 	orr.w	r2, ip, r2
90021432:	f103 0c01 	add.w	ip, r3, #1
90021436:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9002143a:	095b      	lsrs	r3, r3, #5
9002143c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021440:	431a      	orrs	r2, r3
90021442:	f8a9 2000 	strh.w	r2, [r9]
90021446:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021448:	f109 0902 	add.w	r9, r9, #2
9002144c:	f10b 3bff 	add.w	fp, fp, #4294967295
90021450:	441c      	add	r4, r3
90021452:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021454:	441e      	add	r6, r3
90021456:	e647      	b.n	900210e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90021458:	2800      	cmp	r0, #0
9002145a:	f43f aedf 	beq.w	9002121c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002145e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90021462:	9109      	str	r1, [sp, #36]	; 0x24
90021464:	0e09      	lsrs	r1, r1, #24
90021466:	9112      	str	r1, [sp, #72]	; 0x48
90021468:	e6d8      	b.n	9002121c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002146a:	b01d      	add	sp, #116	; 0x74
9002146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021470 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90021470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021474:	b085      	sub	sp, #20
90021476:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002147a:	9102      	str	r1, [sp, #8]
9002147c:	2c00      	cmp	r4, #0
9002147e:	fb04 7103 	mla	r1, r4, r3, r7
90021482:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90021486:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002148a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002148e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90021492:	f2c0 810c 	blt.w	900216ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021496:	45a6      	cmp	lr, r4
90021498:	f340 8109 	ble.w	900216ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002149c:	2f00      	cmp	r7, #0
9002149e:	f2c0 8104 	blt.w	900216aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900214a2:	42bb      	cmp	r3, r7
900214a4:	f340 8101 	ble.w	900216aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900214a8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
900214ac:	1c7a      	adds	r2, r7, #1
900214ae:	f100 8101 	bmi.w	900216b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900214b2:	4293      	cmp	r3, r2
900214b4:	f340 80fe 	ble.w	900216b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900214b8:	2e00      	cmp	r6, #0
900214ba:	f000 80fd 	beq.w	900216b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
900214be:	f8dc 1004 	ldr.w	r1, [ip, #4]
900214c2:	3401      	adds	r4, #1
900214c4:	f100 80fc 	bmi.w	900216c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900214c8:	45a6      	cmp	lr, r4
900214ca:	f340 80f9 	ble.w	900216c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900214ce:	2800      	cmp	r0, #0
900214d0:	f000 80f9 	beq.w	900216c6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
900214d4:	2f00      	cmp	r7, #0
900214d6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
900214da:	f2c0 80ef 	blt.w	900216bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900214de:	42bb      	cmp	r3, r7
900214e0:	f340 80ec 	ble.w	900216bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900214e4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900214e8:	3701      	adds	r7, #1
900214ea:	f100 80ef 	bmi.w	900216cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900214ee:	42bb      	cmp	r3, r7
900214f0:	f340 80ec 	ble.w	900216cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900214f4:	2e00      	cmp	r6, #0
900214f6:	f000 80eb 	beq.w	900216d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
900214fa:	6852      	ldr	r2, [r2, #4]
900214fc:	b2b6      	uxth	r6, r6
900214fe:	b280      	uxth	r0, r0
90021500:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021504:	fb00 fe06 	mul.w	lr, r0, r6
90021508:	0136      	lsls	r6, r6, #4
9002150a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002150e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021512:	eba6 070e 	sub.w	r7, r6, lr
90021516:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002151a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002151e:	b280      	uxth	r0, r0
90021520:	b2bf      	uxth	r7, r7
90021522:	1a1b      	subs	r3, r3, r0
90021524:	ea4f 6812 	mov.w	r8, r2, lsr #24
90021528:	fb07 f60a 	mul.w	r6, r7, sl
9002152c:	b29b      	uxth	r3, r3
9002152e:	fb0b 6603 	mla	r6, fp, r3, r6
90021532:	fb00 6609 	mla	r6, r0, r9, r6
90021536:	fb0e 6608 	mla	r6, lr, r8, r6
9002153a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002153e:	9600      	str	r6, [sp, #0]
90021540:	2e00      	cmp	r6, #0
90021542:	f000 80af 	beq.w	900216a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90021546:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002154a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002154e:	9e02      	ldr	r6, [sp, #8]
90021550:	fb0b fc0c 	mul.w	ip, fp, ip
90021554:	fb0b f505 	mul.w	r5, fp, r5
90021558:	8836      	ldrh	r6, [r6, #0]
9002155a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002155e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021562:	9501      	str	r5, [sp, #4]
90021564:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021568:	44dc      	add	ip, fp
9002156a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002156e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021572:	9503      	str	r5, [sp, #12]
90021574:	9d01      	ldr	r5, [sp, #4]
90021576:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002157a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002157e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021582:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021586:	fb0a fc0c 	mul.w	ip, sl, ip
9002158a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002158e:	fb0a fa01 	mul.w	sl, sl, r1
90021592:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021596:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002159a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002159e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900215a2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900215a6:	4465      	add	r5, ip
900215a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900215ac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900215b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900215b4:	fb09 fc0c 	mul.w	ip, r9, ip
900215b8:	0a2d      	lsrs	r5, r5, #8
900215ba:	fb09 f904 	mul.w	r9, r9, r4
900215be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900215c2:	ea4f 211c 	mov.w	r1, ip, lsr #8
900215c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900215ca:	f509 7480 	add.w	r4, r9, #256	; 0x100
900215ce:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900215d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900215d6:	437d      	muls	r5, r7
900215d8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900215dc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900215e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900215e4:	4461      	add	r1, ip
900215e6:	fb08 f404 	mul.w	r4, r8, r4
900215ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
900215ee:	fb08 f802 	mul.w	r8, r8, r2
900215f2:	0a09      	lsrs	r1, r1, #8
900215f4:	0a22      	lsrs	r2, r4, #8
900215f6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900215fa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900215fe:	fb07 f70a 	mul.w	r7, r7, sl
90021602:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021606:	4414      	add	r4, r2
90021608:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002160c:	0a24      	lsrs	r4, r4, #8
9002160e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021612:	9a03      	ldr	r2, [sp, #12]
90021614:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90021618:	fb02 5503 	mla	r5, r2, r3, r5
9002161c:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021620:	fb04 540e 	mla	r4, r4, lr, r5
90021624:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90021628:	fb01 4100 	mla	r1, r1, r0, r4
9002162c:	0a09      	lsrs	r1, r1, #8
9002162e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90021632:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021636:	fb03 7101 	mla	r1, r3, r1, r7
9002163a:	9b00      	ldr	r3, [sp, #0]
9002163c:	fb0e 1e08 	mla	lr, lr, r8, r1
90021640:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90021644:	43da      	mvns	r2, r3
90021646:	1233      	asrs	r3, r6, #8
90021648:	fb00 e101 	mla	r1, r0, r1, lr
9002164c:	10f0      	asrs	r0, r6, #3
9002164e:	b2d2      	uxtb	r2, r2
90021650:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90021654:	0a09      	lsrs	r1, r1, #8
90021656:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002165a:	00f6      	lsls	r6, r6, #3
9002165c:	4353      	muls	r3, r2
9002165e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021662:	4350      	muls	r0, r2
90021664:	b2f6      	uxtb	r6, r6
90021666:	4321      	orrs	r1, r4
90021668:	4356      	muls	r6, r2
9002166a:	1c5a      	adds	r2, r3, #1
9002166c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90021670:	0c0b      	lsrs	r3, r1, #16
90021672:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021676:	1c42      	adds	r2, r0, #1
90021678:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002167c:	0a0a      	lsrs	r2, r1, #8
9002167e:	021b      	lsls	r3, r3, #8
90021680:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021684:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90021688:	00d2      	lsls	r2, r2, #3
9002168a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002168e:	4313      	orrs	r3, r2
90021690:	1c72      	adds	r2, r6, #1
90021692:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90021696:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002169a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002169e:	4319      	orrs	r1, r3
900216a0:	9b02      	ldr	r3, [sp, #8]
900216a2:	8019      	strh	r1, [r3, #0]
900216a4:	b005      	add	sp, #20
900216a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900216aa:	2500      	movs	r5, #0
900216ac:	e6fe      	b.n	900214ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
900216ae:	2100      	movs	r1, #0
900216b0:	460d      	mov	r5, r1
900216b2:	e706      	b.n	900214c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900216b4:	2100      	movs	r1, #0
900216b6:	e704      	b.n	900214c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900216b8:	4631      	mov	r1, r6
900216ba:	e702      	b.n	900214c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900216bc:	2400      	movs	r4, #0
900216be:	e713      	b.n	900214e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
900216c0:	2200      	movs	r2, #0
900216c2:	4614      	mov	r4, r2
900216c4:	e71a      	b.n	900214fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900216c6:	4602      	mov	r2, r0
900216c8:	4604      	mov	r4, r0
900216ca:	e717      	b.n	900214fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900216cc:	2200      	movs	r2, #0
900216ce:	e715      	b.n	900214fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900216d0:	4632      	mov	r2, r6
900216d2:	e713      	b.n	900214fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

900216d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900216d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900216d8:	b09b      	sub	sp, #108	; 0x6c
900216da:	9218      	str	r2, [sp, #96]	; 0x60
900216dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900216de:	9019      	str	r0, [sp, #100]	; 0x64
900216e0:	9116      	str	r1, [sp, #88]	; 0x58
900216e2:	6850      	ldr	r0, [r2, #4]
900216e4:	9307      	str	r3, [sp, #28]
900216e6:	6812      	ldr	r2, [r2, #0]
900216e8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900216ec:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900216f0:	fb00 1303 	mla	r3, r0, r3, r1
900216f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900216f8:	930a      	str	r3, [sp, #40]	; 0x28
900216fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900216fc:	681b      	ldr	r3, [r3, #0]
900216fe:	930f      	str	r3, [sp, #60]	; 0x3c
90021700:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021702:	2b00      	cmp	r3, #0
90021704:	dc03      	bgt.n	9002170e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90021706:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021708:	2b00      	cmp	r3, #0
9002170a:	f340 8387 	ble.w	90021e1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002170e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021710:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021714:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021718:	1e48      	subs	r0, r1, #1
9002171a:	1e57      	subs	r7, r2, #1
9002171c:	9b07      	ldr	r3, [sp, #28]
9002171e:	2b00      	cmp	r3, #0
90021720:	f340 8166 	ble.w	900219f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90021724:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021728:	ea4f 4326 	mov.w	r3, r6, asr #16
9002172c:	d406      	bmi.n	9002173c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9002172e:	4584      	cmp	ip, r0
90021730:	da04      	bge.n	9002173c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90021732:	2b00      	cmp	r3, #0
90021734:	db02      	blt.n	9002173c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90021736:	42bb      	cmp	r3, r7
90021738:	f2c0 815b 	blt.w	900219f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9002173c:	f11c 0c01 	adds.w	ip, ip, #1
90021740:	f100 814b 	bmi.w	900219da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021744:	4561      	cmp	r1, ip
90021746:	f2c0 8148 	blt.w	900219da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002174a:	3301      	adds	r3, #1
9002174c:	f100 8145 	bmi.w	900219da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021750:	429a      	cmp	r2, r3
90021752:	f2c0 8142 	blt.w	900219da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021756:	9b07      	ldr	r3, [sp, #28]
90021758:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002175a:	9317      	str	r3, [sp, #92]	; 0x5c
9002175c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002175e:	2b00      	cmp	r3, #0
90021760:	f340 8165 	ble.w	90021a2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90021764:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90021766:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002176a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002176c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90021770:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90021774:	1422      	asrs	r2, r4, #16
90021776:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002177a:	689b      	ldr	r3, [r3, #8]
9002177c:	f100 81d5 	bmi.w	90021b2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021780:	f103 38ff 	add.w	r8, r3, #4294967295
90021784:	4542      	cmp	r2, r8
90021786:	f280 81d0 	bge.w	90021b2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002178a:	f1bc 0f00 	cmp.w	ip, #0
9002178e:	f2c0 81cc 	blt.w	90021b2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021792:	f10e 38ff 	add.w	r8, lr, #4294967295
90021796:	45c4      	cmp	ip, r8
90021798:	f280 81c7 	bge.w	90021b2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002179c:	b21b      	sxth	r3, r3
9002179e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900217a0:	fb0c 2203 	mla	r2, ip, r3, r2
900217a4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
900217a8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
900217ac:	ea4f 6e12 	mov.w	lr, r2, lsr #24
900217b0:	2900      	cmp	r1, #0
900217b2:	f000 8182 	beq.w	90021aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
900217b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
900217ba:	950b      	str	r5, [sp, #44]	; 0x2c
900217bc:	0e2d      	lsrs	r5, r5, #24
900217be:	9512      	str	r5, [sp, #72]	; 0x48
900217c0:	b180      	cbz	r0, 900217e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900217c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
900217c6:	3b01      	subs	r3, #1
900217c8:	009b      	lsls	r3, r3, #2
900217ca:	3304      	adds	r3, #4
900217cc:	eb08 0c03 	add.w	ip, r8, r3
900217d0:	f858 3003 	ldr.w	r3, [r8, r3]
900217d4:	9308      	str	r3, [sp, #32]
900217d6:	0e1b      	lsrs	r3, r3, #24
900217d8:	9310      	str	r3, [sp, #64]	; 0x40
900217da:	f8dc 3004 	ldr.w	r3, [ip, #4]
900217de:	930c      	str	r3, [sp, #48]	; 0x30
900217e0:	0e1b      	lsrs	r3, r3, #24
900217e2:	9313      	str	r3, [sp, #76]	; 0x4c
900217e4:	b289      	uxth	r1, r1
900217e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900217e8:	b280      	uxth	r0, r0
900217ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
900217ec:	fb01 f900 	mul.w	r9, r1, r0
900217f0:	0109      	lsls	r1, r1, #4
900217f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900217f6:	eba1 0809 	sub.w	r8, r1, r9
900217fa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900217fe:	b280      	uxth	r0, r0
90021800:	fa1f f888 	uxth.w	r8, r8
90021804:	1a09      	subs	r1, r1, r0
90021806:	fb08 f303 	mul.w	r3, r8, r3
9002180a:	b289      	uxth	r1, r1
9002180c:	fb01 330e 	mla	r3, r1, lr, r3
90021810:	fb00 3305 	mla	r3, r0, r5, r3
90021814:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021816:	fb09 3305 	mla	r3, r9, r5, r3
9002181a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002181e:	2b00      	cmp	r3, #0
90021820:	f000 80d2 	beq.w	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021824:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90021828:	d01b      	beq.n	90021862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
9002182a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
9002182e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021832:	fb0e fa0a 	mul.w	sl, lr, sl
90021836:	fb0e fe02 	mul.w	lr, lr, r2
9002183a:	ea4f 221a 	mov.w	r2, sl, lsr #8
9002183e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021842:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90021846:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002184a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9002184e:	4452      	add	r2, sl
90021850:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021854:	0a12      	lsrs	r2, r2, #8
90021856:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002185a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002185e:	ea42 020c 	orr.w	r2, r2, ip
90021862:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021864:	2dff      	cmp	r5, #255	; 0xff
90021866:	d021      	beq.n	900218ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90021868:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002186a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002186e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021870:	fb05 fb0b 	mul.w	fp, r5, fp
90021874:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021876:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002187a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002187c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021880:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021884:	fb05 fa0a 	mul.w	sl, r5, sl
90021888:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002188c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021890:	44de      	add	lr, fp
90021892:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021896:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002189a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002189e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218a6:	ea4e 050a 	orr.w	r5, lr, sl
900218aa:	950b      	str	r5, [sp, #44]	; 0x2c
900218ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
900218ae:	2dff      	cmp	r5, #255	; 0xff
900218b0:	d021      	beq.n	900218f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
900218b2:	9d08      	ldr	r5, [sp, #32]
900218b4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900218b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
900218ba:	fb05 fb0b 	mul.w	fp, r5, fp
900218be:	9d08      	ldr	r5, [sp, #32]
900218c0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900218c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
900218c6:	fb05 fa0e 	mul.w	sl, r5, lr
900218ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900218ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900218d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900218da:	44de      	add	lr, fp
900218dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900218e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900218e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900218e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900218ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900218f0:	ea4e 050a 	orr.w	r5, lr, sl
900218f4:	9508      	str	r5, [sp, #32]
900218f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900218f8:	2dff      	cmp	r5, #255	; 0xff
900218fa:	d021      	beq.n	90021940 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900218fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900218fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021902:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021904:	fb05 fb0b 	mul.w	fp, r5, fp
90021908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002190a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002190e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021910:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021914:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021918:	fb05 fa0a 	mul.w	sl, r5, sl
9002191c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021920:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021924:	44de      	add	lr, fp
90021926:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002192a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002192e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021932:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021936:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002193a:	ea4e 050a 	orr.w	r5, lr, sl
9002193e:	950c      	str	r5, [sp, #48]	; 0x30
90021940:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021942:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90021946:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002194a:	2bff      	cmp	r3, #255	; 0xff
9002194c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021950:	9d08      	ldr	r5, [sp, #32]
90021952:	fb08 fc0c 	mul.w	ip, r8, ip
90021956:	fb01 cc0e 	mla	ip, r1, lr, ip
9002195a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002195e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021960:	fb00 cc0e 	mla	ip, r0, lr, ip
90021964:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90021968:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002196a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002196e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90021972:	fb08 f80e 	mul.w	r8, r8, lr
90021976:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002197a:	fb01 8202 	mla	r2, r1, r2, r8
9002197e:	9908      	ldr	r1, [sp, #32]
90021980:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021984:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021988:	990c      	ldr	r1, [sp, #48]	; 0x30
9002198a:	fb00 220a 	mla	r2, r0, sl, r2
9002198e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90021992:	fb09 2900 	mla	r9, r9, r0, r2
90021996:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002199a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002199e:	ea4c 0c09 	orr.w	ip, ip, r9
900219a2:	ea4f 221c 	mov.w	r2, ip, lsr #8
900219a6:	f040 8091 	bne.w	90021acc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
900219aa:	ea4f 135c 	mov.w	r3, ip, lsr #5
900219ae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
900219b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900219b6:	f022 0207 	bic.w	r2, r2, #7
900219ba:	431a      	orrs	r2, r3
900219bc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
900219c0:	ea4c 0c02 	orr.w	ip, ip, r2
900219c4:	f8a7 c000 	strh.w	ip, [r7]
900219c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900219ca:	3702      	adds	r7, #2
900219cc:	441c      	add	r4, r3
900219ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900219d0:	441e      	add	r6, r3
900219d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900219d4:	3b01      	subs	r3, #1
900219d6:	9317      	str	r3, [sp, #92]	; 0x5c
900219d8:	e6c0      	b.n	9002175c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
900219da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900219dc:	441c      	add	r4, r3
900219de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900219e0:	441e      	add	r6, r3
900219e2:	9b07      	ldr	r3, [sp, #28]
900219e4:	3b01      	subs	r3, #1
900219e6:	9307      	str	r3, [sp, #28]
900219e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900219ea:	3302      	adds	r3, #2
900219ec:	930a      	str	r3, [sp, #40]	; 0x28
900219ee:	e695      	b.n	9002171c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900219f0:	d024      	beq.n	90021a3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
900219f2:	9b07      	ldr	r3, [sp, #28]
900219f4:	9827      	ldr	r0, [sp, #156]	; 0x9c
900219f6:	3b01      	subs	r3, #1
900219f8:	fb00 4003 	mla	r0, r0, r3, r4
900219fc:	1400      	asrs	r0, r0, #16
900219fe:	f53f aeaa 	bmi.w	90021756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021a02:	3901      	subs	r1, #1
90021a04:	4288      	cmp	r0, r1
90021a06:	f6bf aea6 	bge.w	90021756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021a0a:	9928      	ldr	r1, [sp, #160]	; 0xa0
90021a0c:	fb01 6303 	mla	r3, r1, r3, r6
90021a10:	141b      	asrs	r3, r3, #16
90021a12:	f53f aea0 	bmi.w	90021756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021a16:	3a01      	subs	r2, #1
90021a18:	4293      	cmp	r3, r2
90021a1a:	f6bf ae9c 	bge.w	90021756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021a1e:	f8dd b01c 	ldr.w	fp, [sp, #28]
90021a22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90021a26:	f1bb 0f00 	cmp.w	fp, #0
90021a2a:	f300 809a 	bgt.w	90021b62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90021a2e:	9b07      	ldr	r3, [sp, #28]
90021a30:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90021a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021a36:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90021a3a:	930a      	str	r3, [sp, #40]	; 0x28
90021a3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021a3e:	2b00      	cmp	r3, #0
90021a40:	f340 81ec 	ble.w	90021e1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90021a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021a4a:	ee30 0a04 	vadd.f32	s0, s0, s8
90021a4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021a52:	eef0 6a62 	vmov.f32	s13, s5
90021a56:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021a5a:	ee31 1a05 	vadd.f32	s2, s2, s10
90021a5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a62:	ee16 4a90 	vmov	r4, s13
90021a66:	eef0 6a43 	vmov.f32	s13, s6
90021a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021a6e:	ee16 6a90 	vmov	r6, s13
90021a72:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021a76:	ee61 7a27 	vmul.f32	s15, s2, s15
90021a7a:	ee77 2a62 	vsub.f32	s5, s14, s5
90021a7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021a82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021a86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021a8a:	ee12 2a90 	vmov	r2, s5
90021a8e:	eef0 2a47 	vmov.f32	s5, s14
90021a92:	fb92 f3f3 	sdiv	r3, r2, r3
90021a96:	ee13 2a10 	vmov	r2, s6
90021a9a:	9327      	str	r3, [sp, #156]	; 0x9c
90021a9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021a9e:	eeb0 3a67 	vmov.f32	s6, s15
90021aa2:	fb92 f3f3 	sdiv	r3, r2, r3
90021aa6:	9328      	str	r3, [sp, #160]	; 0xa0
90021aa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021aaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
90021aac:	3b01      	subs	r3, #1
90021aae:	9316      	str	r3, [sp, #88]	; 0x58
90021ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021ab2:	bf08      	it	eq
90021ab4:	4613      	moveq	r3, r2
90021ab6:	9307      	str	r3, [sp, #28]
90021ab8:	e622      	b.n	90021700 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90021aba:	2800      	cmp	r0, #0
90021abc:	f43f ae92 	beq.w	900217e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021ac0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90021ac4:	9308      	str	r3, [sp, #32]
90021ac6:	0e1b      	lsrs	r3, r3, #24
90021ac8:	9310      	str	r3, [sp, #64]	; 0x40
90021aca:	e68b      	b.n	900217e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021acc:	8839      	ldrh	r1, [r7, #0]
90021ace:	43db      	mvns	r3, r3
90021ad0:	4dd4      	ldr	r5, [pc, #848]	; (90021e24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021ad2:	ea4f 2e21 	mov.w	lr, r1, asr #8
90021ad6:	fa5f f883 	uxtb.w	r8, r3
90021ada:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90021ade:	10c8      	asrs	r0, r1, #3
90021ae0:	00cb      	lsls	r3, r1, #3
90021ae2:	fb0e fe08 	mul.w	lr, lr, r8
90021ae6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021aea:	b2db      	uxtb	r3, r3
90021aec:	f10e 0101 	add.w	r1, lr, #1
90021af0:	fb00 f008 	mul.w	r0, r0, r8
90021af4:	fb03 f308 	mul.w	r3, r3, r8
90021af8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90021afc:	ea4f 411c 	mov.w	r1, ip, lsr #16
90021b00:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90021b04:	f100 0e01 	add.w	lr, r0, #1
90021b08:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90021b0c:	b2c9      	uxtb	r1, r1
90021b0e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021b12:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90021b16:	00d2      	lsls	r2, r2, #3
90021b18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021b1c:	430a      	orrs	r2, r1
90021b1e:	1c59      	adds	r1, r3, #1
90021b20:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90021b24:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90021b28:	e748      	b.n	900219bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90021b2a:	f112 0801 	adds.w	r8, r2, #1
90021b2e:	f53f af4b 	bmi.w	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b32:	4543      	cmp	r3, r8
90021b34:	f6ff af48 	blt.w	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b38:	f11c 0801 	adds.w	r8, ip, #1
90021b3c:	f53f af44 	bmi.w	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b40:	45c6      	cmp	lr, r8
90021b42:	f6ff af41 	blt.w	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b46:	b21b      	sxth	r3, r3
90021b48:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90021b4c:	fa0f f28e 	sxth.w	r2, lr
90021b50:	e9cd 1003 	strd	r1, r0, [sp, #12]
90021b54:	9200      	str	r2, [sp, #0]
90021b56:	4639      	mov	r1, r7
90021b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021b5a:	9819      	ldr	r0, [sp, #100]	; 0x64
90021b5c:	f7ff fc88 	bl	90021470 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90021b60:	e732      	b.n	900219c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021b62:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021b64:	1421      	asrs	r1, r4, #16
90021b66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021b68:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021b6c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90021b70:	1433      	asrs	r3, r6, #16
90021b72:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021b76:	fb07 1303 	mla	r3, r7, r3, r1
90021b7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
90021b7c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90021b80:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021b84:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021b88:	2a00      	cmp	r2, #0
90021b8a:	f000 8108 	beq.w	90021d9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90021b8e:	684d      	ldr	r5, [r1, #4]
90021b90:	950d      	str	r5, [sp, #52]	; 0x34
90021b92:	0e2d      	lsrs	r5, r5, #24
90021b94:	9514      	str	r5, [sp, #80]	; 0x50
90021b96:	b178      	cbz	r0, 90021bb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021b98:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90021b9c:	3f01      	subs	r7, #1
90021b9e:	00bf      	lsls	r7, r7, #2
90021ba0:	3704      	adds	r7, #4
90021ba2:	eb01 0e07 	add.w	lr, r1, r7
90021ba6:	59c9      	ldr	r1, [r1, r7]
90021ba8:	9109      	str	r1, [sp, #36]	; 0x24
90021baa:	0e09      	lsrs	r1, r1, #24
90021bac:	9111      	str	r1, [sp, #68]	; 0x44
90021bae:	f8de 1004 	ldr.w	r1, [lr, #4]
90021bb2:	910e      	str	r1, [sp, #56]	; 0x38
90021bb4:	0e09      	lsrs	r1, r1, #24
90021bb6:	9115      	str	r1, [sp, #84]	; 0x54
90021bb8:	b292      	uxth	r2, r2
90021bba:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021bbc:	b280      	uxth	r0, r0
90021bbe:	fb02 f900 	mul.w	r9, r2, r0
90021bc2:	0112      	lsls	r2, r2, #4
90021bc4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90021bc8:	eba2 0e09 	sub.w	lr, r2, r9
90021bcc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90021bd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
90021bd2:	b280      	uxth	r0, r0
90021bd4:	fa1f fe8e 	uxth.w	lr, lr
90021bd8:	1a09      	subs	r1, r1, r0
90021bda:	fb0e f202 	mul.w	r2, lr, r2
90021bde:	b289      	uxth	r1, r1
90021be0:	fb01 220c 	mla	r2, r1, ip, r2
90021be4:	fb00 2205 	mla	r2, r0, r5, r2
90021be8:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021bea:	fb09 2205 	mla	r2, r9, r5, r2
90021bee:	f3c2 2207 	ubfx	r2, r2, #8, #8
90021bf2:	2a00      	cmp	r2, #0
90021bf4:	f000 80ca 	beq.w	90021d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021bf8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021bfc:	d019      	beq.n	90021c32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90021bfe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021c02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021c06:	fb0c fa0a 	mul.w	sl, ip, sl
90021c0a:	fb0c fc03 	mul.w	ip, ip, r3
90021c0e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021c12:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021c16:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021c1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021c1e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021c22:	4453      	add	r3, sl
90021c24:	0a3f      	lsrs	r7, r7, #8
90021c26:	0a1b      	lsrs	r3, r3, #8
90021c28:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021c2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021c30:	433b      	orrs	r3, r7
90021c32:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021c34:	2dff      	cmp	r5, #255	; 0xff
90021c36:	d020      	beq.n	90021c7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90021c38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021c3a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021c3e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021c40:	436f      	muls	r7, r5
90021c42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021c44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c48:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021c4c:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021c4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c56:	fb05 fa0a 	mul.w	sl, r5, sl
90021c5a:	44bc      	add	ip, r7
90021c5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021c68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021c6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c74:	ea4c 050a 	orr.w	r5, ip, sl
90021c78:	950d      	str	r5, [sp, #52]	; 0x34
90021c7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c7c:	2dff      	cmp	r5, #255	; 0xff
90021c7e:	d020      	beq.n	90021cc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90021c80:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021c82:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021c86:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c88:	436f      	muls	r7, r5
90021c8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021c8c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021c90:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021c92:	fb05 fa0c 	mul.w	sl, r5, ip
90021c96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021c9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021c9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ca2:	44bc      	add	ip, r7
90021ca4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021ca8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021cac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021cb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021cb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021cb8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021cbc:	ea4c 050a 	orr.w	r5, ip, sl
90021cc0:	9509      	str	r5, [sp, #36]	; 0x24
90021cc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021cc4:	2dff      	cmp	r5, #255	; 0xff
90021cc6:	d020      	beq.n	90021d0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90021cc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021cca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021cce:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021cd0:	436f      	muls	r7, r5
90021cd2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021cd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021cd8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021cdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021cde:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021ce2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ce6:	fb05 fa0a 	mul.w	sl, r5, sl
90021cea:	44bc      	add	ip, r7
90021cec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021cf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021cf4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021cf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021cfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d04:	ea4c 050a 	orr.w	r5, ip, sl
90021d08:	950e      	str	r5, [sp, #56]	; 0x38
90021d0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021d0c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021d14:	2aff      	cmp	r2, #255	; 0xff
90021d16:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021d1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021d1c:	fb0e f707 	mul.w	r7, lr, r7
90021d20:	fb01 770c 	mla	r7, r1, ip, r7
90021d24:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021d28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021d2a:	fb00 770c 	mla	r7, r0, ip, r7
90021d2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021d32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021d34:	fb09 770c 	mla	r7, r9, ip, r7
90021d38:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021d3c:	fb0e fe0c 	mul.w	lr, lr, ip
90021d40:	ea4f 2717 	mov.w	r7, r7, lsr #8
90021d44:	fb01 e303 	mla	r3, r1, r3, lr
90021d48:	9909      	ldr	r1, [sp, #36]	; 0x24
90021d4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021d4e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021d52:	990e      	ldr	r1, [sp, #56]	; 0x38
90021d54:	fb00 330a 	mla	r3, r0, sl, r3
90021d58:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90021d5c:	fb09 3c0c 	mla	ip, r9, ip, r3
90021d60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d64:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021d68:	ea47 070c 	orr.w	r7, r7, ip
90021d6c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90021d70:	d11e      	bne.n	90021db0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90021d72:	097a      	lsrs	r2, r7, #5
90021d74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90021d78:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021d7c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021d80:	f023 0307 	bic.w	r3, r3, #7
90021d84:	4313      	orrs	r3, r2
90021d86:	431f      	orrs	r7, r3
90021d88:	f8a8 7000 	strh.w	r7, [r8]
90021d8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021d8e:	f108 0802 	add.w	r8, r8, #2
90021d92:	f10b 3bff 	add.w	fp, fp, #4294967295
90021d96:	441c      	add	r4, r3
90021d98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021d9a:	441e      	add	r6, r3
90021d9c:	e643      	b.n	90021a26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90021d9e:	2800      	cmp	r0, #0
90021da0:	f43f af0a 	beq.w	90021bb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021da4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90021da8:	9109      	str	r1, [sp, #36]	; 0x24
90021daa:	0e09      	lsrs	r1, r1, #24
90021dac:	9111      	str	r1, [sp, #68]	; 0x44
90021dae:	e703      	b.n	90021bb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021db0:	f8b8 1000 	ldrh.w	r1, [r8]
90021db4:	43d2      	mvns	r2, r2
90021db6:	ea4f 2c21 	mov.w	ip, r1, asr #8
90021dba:	fa5f fe82 	uxtb.w	lr, r2
90021dbe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90021dc2:	10c8      	asrs	r0, r1, #3
90021dc4:	00ca      	lsls	r2, r1, #3
90021dc6:	fb0c fc0e 	mul.w	ip, ip, lr
90021dca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021dce:	b2d2      	uxtb	r2, r2
90021dd0:	f10c 0101 	add.w	r1, ip, #1
90021dd4:	fb00 f00e 	mul.w	r0, r0, lr
90021dd8:	fb02 f20e 	mul.w	r2, r2, lr
90021ddc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021de0:	0c39      	lsrs	r1, r7, #16
90021de2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021de6:	490f      	ldr	r1, [pc, #60]	; (90021e24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021de8:	fa5f fc8c 	uxtb.w	ip, ip
90021dec:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90021df0:	1c41      	adds	r1, r0, #1
90021df2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90021df6:	1c51      	adds	r1, r2, #1
90021df8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90021dfc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021e00:	00c0      	lsls	r0, r0, #3
90021e02:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90021e06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021e0a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021e0e:	ea4c 0c00 	orr.w	ip, ip, r0
90021e12:	ea47 0c0c 	orr.w	ip, r7, ip
90021e16:	f8a8 c000 	strh.w	ip, [r8]
90021e1a:	e7b7      	b.n	90021d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021e1c:	b01b      	add	sp, #108	; 0x6c
90021e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021e22:	bf00      	nop
90021e24:	fffff800 	.word	0xfffff800

90021e28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90021e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90021e2c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90021e30:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021e34:	2d00      	cmp	r5, #0
90021e36:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90021e3a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90021e3e:	fb05 0e03 	mla	lr, r5, r3, r0
90021e42:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90021e46:	f2c0 808c 	blt.w	90021f62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021e4a:	45a9      	cmp	r9, r5
90021e4c:	f340 8089 	ble.w	90021f62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021e50:	2800      	cmp	r0, #0
90021e52:	f2c0 8084 	blt.w	90021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021e56:	4580      	cmp	r8, r0
90021e58:	f340 8081 	ble.w	90021f5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021e5c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021e60:	f01e 0f01 	tst.w	lr, #1
90021e64:	5d16      	ldrb	r6, [r2, r4]
90021e66:	bf0c      	ite	eq
90021e68:	f006 060f 	andeq.w	r6, r6, #15
90021e6c:	1136      	asrne	r6, r6, #4
90021e6e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021e72:	b2f6      	uxtb	r6, r6
90021e74:	1c44      	adds	r4, r0, #1
90021e76:	d477      	bmi.n	90021f68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021e78:	45a0      	cmp	r8, r4
90021e7a:	dd75      	ble.n	90021f68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021e7c:	2f00      	cmp	r7, #0
90021e7e:	d075      	beq.n	90021f6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90021e80:	f10e 0a01 	add.w	sl, lr, #1
90021e84:	ea4f 045a 	mov.w	r4, sl, lsr #1
90021e88:	f01a 0f01 	tst.w	sl, #1
90021e8c:	5d14      	ldrb	r4, [r2, r4]
90021e8e:	bf0c      	ite	eq
90021e90:	f004 040f 	andeq.w	r4, r4, #15
90021e94:	1124      	asrne	r4, r4, #4
90021e96:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90021e9a:	b2e4      	uxtb	r4, r4
90021e9c:	3501      	adds	r5, #1
90021e9e:	d469      	bmi.n	90021f74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021ea0:	45a9      	cmp	r9, r5
90021ea2:	dd67      	ble.n	90021f74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021ea4:	f1bc 0f00 	cmp.w	ip, #0
90021ea8:	d067      	beq.n	90021f7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90021eaa:	2800      	cmp	r0, #0
90021eac:	db60      	blt.n	90021f70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021eae:	4580      	cmp	r8, r0
90021eb0:	dd5e      	ble.n	90021f70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021eb2:	eb03 090e 	add.w	r9, r3, lr
90021eb6:	ea4f 0559 	mov.w	r5, r9, lsr #1
90021eba:	f019 0f01 	tst.w	r9, #1
90021ebe:	5d55      	ldrb	r5, [r2, r5]
90021ec0:	bf0c      	ite	eq
90021ec2:	f005 050f 	andeq.w	r5, r5, #15
90021ec6:	112d      	asrne	r5, r5, #4
90021ec8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90021ecc:	b2ed      	uxtb	r5, r5
90021ece:	3001      	adds	r0, #1
90021ed0:	d456      	bmi.n	90021f80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021ed2:	4580      	cmp	r8, r0
90021ed4:	dd54      	ble.n	90021f80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021ed6:	2f00      	cmp	r7, #0
90021ed8:	d054      	beq.n	90021f84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90021eda:	3301      	adds	r3, #1
90021edc:	449e      	add	lr, r3
90021ede:	ea4f 035e 	mov.w	r3, lr, lsr #1
90021ee2:	f01e 0f01 	tst.w	lr, #1
90021ee6:	5cd0      	ldrb	r0, [r2, r3]
90021ee8:	bf0c      	ite	eq
90021eea:	f000 000f 	andeq.w	r0, r0, #15
90021eee:	1100      	asrne	r0, r0, #4
90021ef0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021ef4:	b2c3      	uxtb	r3, r0
90021ef6:	b2ba      	uxth	r2, r7
90021ef8:	fa1f fc8c 	uxth.w	ip, ip
90021efc:	fb02 f00c 	mul.w	r0, r2, ip
90021f00:	0112      	lsls	r2, r2, #4
90021f02:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021f06:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90021f0a:	1a12      	subs	r2, r2, r0
90021f0c:	fa1f fc8c 	uxth.w	ip, ip
90021f10:	b292      	uxth	r2, r2
90021f12:	eba7 070c 	sub.w	r7, r7, ip
90021f16:	4362      	muls	r2, r4
90021f18:	b2bf      	uxth	r7, r7
90021f1a:	fb06 2207 	mla	r2, r6, r7, r2
90021f1e:	fb0c 2505 	mla	r5, ip, r5, r2
90021f22:	fb00 5303 	mla	r3, r0, r3, r5
90021f26:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021f2a:	b1b3      	cbz	r3, 90021f5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021f2c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90021f30:	435a      	muls	r2, r3
90021f32:	1c53      	adds	r3, r2, #1
90021f34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021f38:	4a2d      	ldr	r2, [pc, #180]	; (90021ff0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90021f3a:	121b      	asrs	r3, r3, #8
90021f3c:	6812      	ldr	r2, [r2, #0]
90021f3e:	2bff      	cmp	r3, #255	; 0xff
90021f40:	ea4f 2612 	mov.w	r6, r2, lsr #8
90021f44:	d120      	bne.n	90021f88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90021f46:	0950      	lsrs	r0, r2, #5
90021f48:	4b2a      	ldr	r3, [pc, #168]	; (90021ff4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90021f4a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021f4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021f52:	4033      	ands	r3, r6
90021f54:	4318      	orrs	r0, r3
90021f56:	4302      	orrs	r2, r0
90021f58:	800a      	strh	r2, [r1, #0]
90021f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021f5e:	2600      	movs	r6, #0
90021f60:	e788      	b.n	90021e74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90021f62:	2400      	movs	r4, #0
90021f64:	4626      	mov	r6, r4
90021f66:	e799      	b.n	90021e9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f68:	2400      	movs	r4, #0
90021f6a:	e797      	b.n	90021e9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f6c:	463c      	mov	r4, r7
90021f6e:	e795      	b.n	90021e9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021f70:	2500      	movs	r5, #0
90021f72:	e7ac      	b.n	90021ece <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90021f74:	2300      	movs	r3, #0
90021f76:	461d      	mov	r5, r3
90021f78:	e7bd      	b.n	90021ef6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f7a:	4663      	mov	r3, ip
90021f7c:	4665      	mov	r5, ip
90021f7e:	e7ba      	b.n	90021ef6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f80:	2300      	movs	r3, #0
90021f82:	e7b8      	b.n	90021ef6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f84:	463b      	mov	r3, r7
90021f86:	e7b6      	b.n	90021ef6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021f88:	880d      	ldrh	r5, [r1, #0]
90021f8a:	b29f      	uxth	r7, r3
90021f8c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90021f90:	43db      	mvns	r3, r3
90021f92:	122c      	asrs	r4, r5, #8
90021f94:	fb10 f007 	smulbb	r0, r0, r7
90021f98:	b2db      	uxtb	r3, r3
90021f9a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90021f9e:	b2f6      	uxtb	r6, r6
90021fa0:	b2d2      	uxtb	r2, r2
90021fa2:	fb04 0403 	mla	r4, r4, r3, r0
90021fa6:	10e8      	asrs	r0, r5, #3
90021fa8:	fb12 f207 	smulbb	r2, r2, r7
90021fac:	00ed      	lsls	r5, r5, #3
90021fae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021fb2:	b2a4      	uxth	r4, r4
90021fb4:	fb16 f607 	smulbb	r6, r6, r7
90021fb8:	b2ed      	uxtb	r5, r5
90021fba:	fb00 6603 	mla	r6, r0, r3, r6
90021fbe:	fb05 2303 	mla	r3, r5, r3, r2
90021fc2:	b2b0      	uxth	r0, r6
90021fc4:	b29a      	uxth	r2, r3
90021fc6:	1c63      	adds	r3, r4, #1
90021fc8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90021fcc:	1c53      	adds	r3, r2, #1
90021fce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021fd2:	1c42      	adds	r2, r0, #1
90021fd4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90021fd8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021fdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021fe0:	0940      	lsrs	r0, r0, #5
90021fe2:	4323      	orrs	r3, r4
90021fe4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021fe8:	4303      	orrs	r3, r0
90021fea:	800b      	strh	r3, [r1, #0]
90021fec:	e7b5      	b.n	90021f5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021fee:	bf00      	nop
90021ff0:	2402626c 	.word	0x2402626c
90021ff4:	00fff800 	.word	0x00fff800

90021ff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021ffc:	b097      	sub	sp, #92	; 0x5c
90021ffe:	9214      	str	r2, [sp, #80]	; 0x50
90022000:	9309      	str	r3, [sp, #36]	; 0x24
90022002:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022004:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90022008:	9015      	str	r0, [sp, #84]	; 0x54
9002200a:	910d      	str	r1, [sp, #52]	; 0x34
9002200c:	6850      	ldr	r0, [r2, #4]
9002200e:	930f      	str	r3, [sp, #60]	; 0x3c
90022010:	6812      	ldr	r2, [r2, #0]
90022012:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90022016:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
9002201a:	fb00 1303 	mla	r3, r0, r3, r1
9002201e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90022022:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022024:	689b      	ldr	r3, [r3, #8]
90022026:	3301      	adds	r3, #1
90022028:	f023 0301 	bic.w	r3, r3, #1
9002202c:	930a      	str	r3, [sp, #40]	; 0x28
9002202e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022030:	681f      	ldr	r7, [r3, #0]
90022032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022034:	2b00      	cmp	r3, #0
90022036:	dc03      	bgt.n	90022040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022038:	9b14      	ldr	r3, [sp, #80]	; 0x50
9002203a:	2b00      	cmp	r3, #0
9002203c:	f340 8289 	ble.w	90022552 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90022040:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022042:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022046:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002204a:	1e48      	subs	r0, r1, #1
9002204c:	f102 3cff 	add.w	ip, r2, #4294967295
90022050:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022052:	2b00      	cmp	r3, #0
90022054:	f340 80c5 	ble.w	900221e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90022058:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002205c:	ea4f 4326 	mov.w	r3, r6, asr #16
90022060:	d406      	bmi.n	90022070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022062:	4586      	cmp	lr, r0
90022064:	da04      	bge.n	90022070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022066:	2b00      	cmp	r3, #0
90022068:	db02      	blt.n	90022070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002206a:	4563      	cmp	r3, ip
9002206c:	f2c0 80ba 	blt.w	900221e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90022070:	f11e 0e01 	adds.w	lr, lr, #1
90022074:	f100 80ab 	bmi.w	900221ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022078:	4571      	cmp	r1, lr
9002207a:	f2c0 80a8 	blt.w	900221ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002207e:	3301      	adds	r3, #1
90022080:	f100 80a5 	bmi.w	900221ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022084:	429a      	cmp	r2, r3
90022086:	f2c0 80a2 	blt.w	900221ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002208a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002208c:	46c8      	mov	r8, r9
9002208e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90022092:	930e      	str	r3, [sp, #56]	; 0x38
90022094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90022096:	2b00      	cmp	r3, #0
90022098:	f340 80c4 	ble.w	90022224 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
9002209c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002209e:	1430      	asrs	r0, r6, #16
900220a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
900220a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
900220a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900220ac:	1423      	asrs	r3, r4, #16
900220ae:	f100 814f 	bmi.w	90022350 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220b2:	f10c 3bff 	add.w	fp, ip, #4294967295
900220b6:	455b      	cmp	r3, fp
900220b8:	f280 814a 	bge.w	90022350 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220bc:	2800      	cmp	r0, #0
900220be:	f2c0 8147 	blt.w	90022350 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220c2:	f10e 3bff 	add.w	fp, lr, #4294967295
900220c6:	4558      	cmp	r0, fp
900220c8:	f280 8142 	bge.w	90022350 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
900220ce:	fb00 3305 	mla	r3, r0, r5, r3
900220d2:	0858      	lsrs	r0, r3, #1
900220d4:	07dd      	lsls	r5, r3, #31
900220d6:	f817 c000 	ldrb.w	ip, [r7, r0]
900220da:	bf54      	ite	pl
900220dc:	f00c 0c0f 	andpl.w	ip, ip, #15
900220e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900220e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900220e8:	fa5f fc8c 	uxtb.w	ip, ip
900220ec:	2a00      	cmp	r2, #0
900220ee:	f000 80dd 	beq.w	900222ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
900220f2:	1c58      	adds	r0, r3, #1
900220f4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900220f8:	07c0      	lsls	r0, r0, #31
900220fa:	f817 e00e 	ldrb.w	lr, [r7, lr]
900220fe:	bf54      	ite	pl
90022100:	f00e 0e0f 	andpl.w	lr, lr, #15
90022104:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90022108:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002210c:	fa5f f08e 	uxtb.w	r0, lr
90022110:	9010      	str	r0, [sp, #64]	; 0x40
90022112:	b1d9      	cbz	r1, 9002214c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022114:	4453      	add	r3, sl
90022116:	0858      	lsrs	r0, r3, #1
90022118:	07dd      	lsls	r5, r3, #31
9002211a:	f103 0301 	add.w	r3, r3, #1
9002211e:	5c38      	ldrb	r0, [r7, r0]
90022120:	bf54      	ite	pl
90022122:	f000 000f 	andpl.w	r0, r0, #15
90022126:	1100      	asrmi	r0, r0, #4
90022128:	07dd      	lsls	r5, r3, #31
9002212a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
9002212e:	b2c0      	uxtb	r0, r0
90022130:	900b      	str	r0, [sp, #44]	; 0x2c
90022132:	ea4f 0053 	mov.w	r0, r3, lsr #1
90022136:	f817 e000 	ldrb.w	lr, [r7, r0]
9002213a:	bf54      	ite	pl
9002213c:	f00e 030f 	andpl.w	r3, lr, #15
90022140:	ea4f 132e 	movmi.w	r3, lr, asr #4
90022144:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022148:	b2db      	uxtb	r3, r3
9002214a:	9311      	str	r3, [sp, #68]	; 0x44
9002214c:	b292      	uxth	r2, r2
9002214e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022150:	b289      	uxth	r1, r1
90022152:	fb02 f301 	mul.w	r3, r2, r1
90022156:	0112      	lsls	r2, r2, #4
90022158:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002215c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022160:	1ad2      	subs	r2, r2, r3
90022162:	b289      	uxth	r1, r1
90022164:	b292      	uxth	r2, r2
90022166:	1a40      	subs	r0, r0, r1
90022168:	436a      	muls	r2, r5
9002216a:	b280      	uxth	r0, r0
9002216c:	fb0c 2c00 	mla	ip, ip, r0, r2
90022170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90022172:	fb01 c102 	mla	r1, r1, r2, ip
90022176:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022178:	fb03 1302 	mla	r3, r3, r2, r1
9002217c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022180:	b1db      	cbz	r3, 900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022184:	4353      	muls	r3, r2
90022186:	1c5a      	adds	r2, r3, #1
90022188:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002218c:	4ac6      	ldr	r2, [pc, #792]	; (900224a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002218e:	121b      	asrs	r3, r3, #8
90022190:	6812      	ldr	r2, [r2, #0]
90022192:	2bff      	cmp	r3, #255	; 0xff
90022194:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022198:	f040 8099 	bne.w	900222ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9002219c:	0953      	lsrs	r3, r2, #5
9002219e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
900221a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900221a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900221aa:	f02c 0c07 	bic.w	ip, ip, #7
900221ae:	ea43 0c0c 	orr.w	ip, r3, ip
900221b2:	ea4c 0202 	orr.w	r2, ip, r2
900221b6:	f8a8 2000 	strh.w	r2, [r8]
900221ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900221bc:	f108 0802 	add.w	r8, r8, #2
900221c0:	441c      	add	r4, r3
900221c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900221c4:	441e      	add	r6, r3
900221c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900221c8:	3b01      	subs	r3, #1
900221ca:	930e      	str	r3, [sp, #56]	; 0x38
900221cc:	e762      	b.n	90022094 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900221ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900221d0:	f109 0902 	add.w	r9, r9, #2
900221d4:	441c      	add	r4, r3
900221d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900221d8:	441e      	add	r6, r3
900221da:	9b09      	ldr	r3, [sp, #36]	; 0x24
900221dc:	3b01      	subs	r3, #1
900221de:	9309      	str	r3, [sp, #36]	; 0x24
900221e0:	e736      	b.n	90022050 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900221e2:	d024      	beq.n	9002222e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900221e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900221e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
900221e8:	3b01      	subs	r3, #1
900221ea:	fb00 4003 	mla	r0, r0, r3, r4
900221ee:	1400      	asrs	r0, r0, #16
900221f0:	f53f af4b 	bmi.w	9002208a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221f4:	3901      	subs	r1, #1
900221f6:	4288      	cmp	r0, r1
900221f8:	f6bf af47 	bge.w	9002208a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900221fc:	9924      	ldr	r1, [sp, #144]	; 0x90
900221fe:	fb01 6303 	mla	r3, r1, r3, r6
90022202:	141b      	asrs	r3, r3, #16
90022204:	f53f af41 	bmi.w	9002208a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022208:	3a01      	subs	r2, #1
9002220a:	4293      	cmp	r3, r2
9002220c:	f6bf af3d 	bge.w	9002208a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022210:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90022214:	46c8      	mov	r8, r9
90022216:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9002221a:	930e      	str	r3, [sp, #56]	; 0x38
9002221c:	f1bb 0f00 	cmp.w	fp, #0
90022220:	f300 80b7 	bgt.w	90022392 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90022224:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022226:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002222a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9002222e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022230:	2b00      	cmp	r3, #0
90022232:	f340 818e 	ble.w	90022552 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90022236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002223a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002223c:	ee30 0a04 	vadd.f32	s0, s0, s8
90022240:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022244:	eef0 6a62 	vmov.f32	s13, s5
90022248:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002224c:	ee31 1a05 	vadd.f32	s2, s2, s10
90022250:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022254:	ee16 4a90 	vmov	r4, s13
90022258:	eef0 6a43 	vmov.f32	s13, s6
9002225c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022260:	ee16 6a90 	vmov	r6, s13
90022264:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022268:	ee61 7a27 	vmul.f32	s15, s2, s15
9002226c:	ee77 2a62 	vsub.f32	s5, s14, s5
90022270:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022274:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022278:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002227c:	ee12 2a90 	vmov	r2, s5
90022280:	eef0 2a47 	vmov.f32	s5, s14
90022284:	fb92 f3f3 	sdiv	r3, r2, r3
90022288:	ee13 2a10 	vmov	r2, s6
9002228c:	9323      	str	r3, [sp, #140]	; 0x8c
9002228e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022290:	eeb0 3a67 	vmov.f32	s6, s15
90022294:	fb92 f3f3 	sdiv	r3, r2, r3
90022298:	9324      	str	r3, [sp, #144]	; 0x90
9002229a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002229c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002229e:	3b01      	subs	r3, #1
900222a0:	930d      	str	r3, [sp, #52]	; 0x34
900222a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
900222a4:	bf08      	it	eq
900222a6:	4613      	moveq	r3, r2
900222a8:	9309      	str	r3, [sp, #36]	; 0x24
900222aa:	e6c2      	b.n	90022032 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900222ac:	2900      	cmp	r1, #0
900222ae:	f43f af4d 	beq.w	9002214c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900222b2:	eb0a 0003 	add.w	r0, sl, r3
900222b6:	0843      	lsrs	r3, r0, #1
900222b8:	07c0      	lsls	r0, r0, #31
900222ba:	5cfb      	ldrb	r3, [r7, r3]
900222bc:	bf54      	ite	pl
900222be:	f003 030f 	andpl.w	r3, r3, #15
900222c2:	111b      	asrmi	r3, r3, #4
900222c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900222c8:	b2db      	uxtb	r3, r3
900222ca:	930b      	str	r3, [sp, #44]	; 0x2c
900222cc:	e73e      	b.n	9002214c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900222ce:	f8b8 e000 	ldrh.w	lr, [r8]
900222d2:	fa1f fb83 	uxth.w	fp, r3
900222d6:	f3c2 4107 	ubfx	r1, r2, #16, #8
900222da:	43db      	mvns	r3, r3
900222dc:	ea4f 202e 	mov.w	r0, lr, asr #8
900222e0:	fb11 f10b 	smulbb	r1, r1, fp
900222e4:	b2db      	uxtb	r3, r3
900222e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900222ea:	fa5f fc8c 	uxtb.w	ip, ip
900222ee:	b2d2      	uxtb	r2, r2
900222f0:	fb00 1003 	mla	r0, r0, r3, r1
900222f4:	ea4f 01ee 	mov.w	r1, lr, asr #3
900222f8:	fb1c fc0b 	smulbb	ip, ip, fp
900222fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022300:	b280      	uxth	r0, r0
90022302:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022306:	fb12 fb0b 	smulbb	fp, r2, fp
9002230a:	fa5f fe8e 	uxtb.w	lr, lr
9002230e:	fb01 cc03 	mla	ip, r1, r3, ip
90022312:	fb0e bb03 	mla	fp, lr, r3, fp
90022316:	1c43      	adds	r3, r0, #1
90022318:	fa1f fc8c 	uxth.w	ip, ip
9002231c:	fa1f fb8b 	uxth.w	fp, fp
90022320:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90022324:	f10c 0101 	add.w	r1, ip, #1
90022328:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
9002232c:	f10b 0001 	add.w	r0, fp, #1
90022330:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90022334:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90022338:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002233c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90022340:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90022344:	4318      	orrs	r0, r3
90022346:	ea40 000c 	orr.w	r0, r0, ip
9002234a:	f8a8 0000 	strh.w	r0, [r8]
9002234e:	e734      	b.n	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022350:	f113 0b01 	adds.w	fp, r3, #1
90022354:	f53f af31 	bmi.w	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022358:	45dc      	cmp	ip, fp
9002235a:	f6ff af2e 	blt.w	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002235e:	f110 0b01 	adds.w	fp, r0, #1
90022362:	f53f af2a 	bmi.w	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022366:	45de      	cmp	lr, fp
90022368:	f6ff af27 	blt.w	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002236c:	9302      	str	r3, [sp, #8]
9002236e:	fa0f f38e 	sxth.w	r3, lr
90022372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90022374:	9301      	str	r3, [sp, #4]
90022376:	fa0f f38c 	sxth.w	r3, ip
9002237a:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002237e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90022382:	9300      	str	r3, [sp, #0]
90022384:	463a      	mov	r2, r7
90022386:	4653      	mov	r3, sl
90022388:	4641      	mov	r1, r8
9002238a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002238c:	f7ff fd4c 	bl	90021e28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022390:	e713      	b.n	900221ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022392:	1422      	asrs	r2, r4, #16
90022394:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90022396:	1433      	asrs	r3, r6, #16
90022398:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002239c:	f3c6 3003 	ubfx	r0, r6, #12, #4
900223a0:	fb05 2303 	mla	r3, r5, r3, r2
900223a4:	085a      	lsrs	r2, r3, #1
900223a6:	07dd      	lsls	r5, r3, #31
900223a8:	5cba      	ldrb	r2, [r7, r2]
900223aa:	bf54      	ite	pl
900223ac:	f002 020f 	andpl.w	r2, r2, #15
900223b0:	1112      	asrmi	r2, r2, #4
900223b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900223b6:	b2d2      	uxtb	r2, r2
900223b8:	2900      	cmp	r1, #0
900223ba:	d077      	beq.n	900224ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
900223bc:	f103 0e01 	add.w	lr, r3, #1
900223c0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
900223c4:	f01e 0f01 	tst.w	lr, #1
900223c8:	f817 c00c 	ldrb.w	ip, [r7, ip]
900223cc:	bf0c      	ite	eq
900223ce:	f00c 0c0f 	andeq.w	ip, ip, #15
900223d2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
900223d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900223da:	fa5f f58c 	uxtb.w	r5, ip
900223de:	9512      	str	r5, [sp, #72]	; 0x48
900223e0:	b308      	cbz	r0, 90022426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900223e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900223e4:	442b      	add	r3, r5
900223e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900223ea:	07dd      	lsls	r5, r3, #31
900223ec:	f103 0301 	add.w	r3, r3, #1
900223f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
900223f4:	bf54      	ite	pl
900223f6:	f00c 0c0f 	andpl.w	ip, ip, #15
900223fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900223fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022402:	fa5f f58c 	uxtb.w	r5, ip
90022406:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002240a:	950c      	str	r5, [sp, #48]	; 0x30
9002240c:	07dd      	lsls	r5, r3, #31
9002240e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022412:	bf54      	ite	pl
90022414:	f00c 0c0f 	andpl.w	ip, ip, #15
90022418:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002241c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022420:	fa5f f38c 	uxtb.w	r3, ip
90022424:	9313      	str	r3, [sp, #76]	; 0x4c
90022426:	b289      	uxth	r1, r1
90022428:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002242a:	b280      	uxth	r0, r0
9002242c:	fb01 f300 	mul.w	r3, r1, r0
90022430:	0109      	lsls	r1, r1, #4
90022432:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90022436:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
9002243a:	1ac9      	subs	r1, r1, r3
9002243c:	b280      	uxth	r0, r0
9002243e:	b289      	uxth	r1, r1
90022440:	ebac 0c00 	sub.w	ip, ip, r0
90022444:	4369      	muls	r1, r5
90022446:	fa1f fc8c 	uxth.w	ip, ip
9002244a:	fb02 120c 	mla	r2, r2, ip, r1
9002244e:	990c      	ldr	r1, [sp, #48]	; 0x30
90022450:	fb00 2001 	mla	r0, r0, r1, r2
90022454:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90022456:	fb03 0302 	mla	r3, r3, r2, r0
9002245a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002245e:	b1d3      	cbz	r3, 90022496 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022462:	4353      	muls	r3, r2
90022464:	1c5a      	adds	r2, r3, #1
90022466:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002246a:	4a0f      	ldr	r2, [pc, #60]	; (900224a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002246c:	121b      	asrs	r3, r3, #8
9002246e:	6812      	ldr	r2, [r2, #0]
90022470:	2bff      	cmp	r3, #255	; 0xff
90022472:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022476:	d12d      	bne.n	900224d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90022478:	0953      	lsrs	r3, r2, #5
9002247a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002247e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022482:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022486:	f02c 0c07 	bic.w	ip, ip, #7
9002248a:	ea43 0c0c 	orr.w	ip, r3, ip
9002248e:	ea4c 0202 	orr.w	r2, ip, r2
90022492:	f8a8 2000 	strh.w	r2, [r8]
90022496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022498:	f108 0802 	add.w	r8, r8, #2
9002249c:	f10b 3bff 	add.w	fp, fp, #4294967295
900224a0:	441c      	add	r4, r3
900224a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900224a4:	441e      	add	r6, r3
900224a6:	e6b9      	b.n	9002221c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
900224a8:	2402626c 	.word	0x2402626c
900224ac:	2800      	cmp	r0, #0
900224ae:	d0ba      	beq.n	90022426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900224b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900224b2:	442b      	add	r3, r5
900224b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900224b8:	07db      	lsls	r3, r3, #31
900224ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
900224be:	bf54      	ite	pl
900224c0:	f00c 0c0f 	andpl.w	ip, ip, #15
900224c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900224c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900224cc:	fa5f f38c 	uxtb.w	r3, ip
900224d0:	930c      	str	r3, [sp, #48]	; 0x30
900224d2:	e7a8      	b.n	90022426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900224d4:	f8b8 e000 	ldrh.w	lr, [r8]
900224d8:	fa1f fa83 	uxth.w	sl, r3
900224dc:	f3c2 4107 	ubfx	r1, r2, #16, #8
900224e0:	43db      	mvns	r3, r3
900224e2:	ea4f 202e 	mov.w	r0, lr, asr #8
900224e6:	fb11 f10a 	smulbb	r1, r1, sl
900224ea:	b2db      	uxtb	r3, r3
900224ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900224f0:	b2d2      	uxtb	r2, r2
900224f2:	fa5f fc8c 	uxtb.w	ip, ip
900224f6:	fb00 1003 	mla	r0, r0, r3, r1
900224fa:	ea4f 01ee 	mov.w	r1, lr, asr #3
900224fe:	fb12 f20a 	smulbb	r2, r2, sl
90022502:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022506:	b280      	uxth	r0, r0
90022508:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002250c:	fb1c fc0a 	smulbb	ip, ip, sl
90022510:	fa5f fe8e 	uxtb.w	lr, lr
90022514:	fb0e 2203 	mla	r2, lr, r3, r2
90022518:	fb01 cc03 	mla	ip, r1, r3, ip
9002251c:	1c43      	adds	r3, r0, #1
9002251e:	b292      	uxth	r2, r2
90022520:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90022524:	1c51      	adds	r1, r2, #1
90022526:	fa1f fc8c 	uxth.w	ip, ip
9002252a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002252e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
90022532:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90022536:	4308      	orrs	r0, r1
90022538:	f10c 0101 	add.w	r1, ip, #1
9002253c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90022540:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90022544:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90022548:	ea40 000c 	orr.w	r0, r0, ip
9002254c:	f8a8 0000 	strh.w	r0, [r8]
90022550:	e7a1      	b.n	90022496 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022552:	b017      	add	sp, #92	; 0x5c
90022554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022558 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90022558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002255c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90022560:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90022564:	2d00      	cmp	r5, #0
90022566:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002256a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002256e:	fb05 0e03 	mla	lr, r5, r3, r0
90022572:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90022576:	f2c0 80b0 	blt.w	900226da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002257a:	45a9      	cmp	r9, r5
9002257c:	f340 80ad 	ble.w	900226da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022580:	2800      	cmp	r0, #0
90022582:	f2c0 80a8 	blt.w	900226d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022586:	4580      	cmp	r8, r0
90022588:	f340 80a5 	ble.w	900226d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002258c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022590:	f01e 0f01 	tst.w	lr, #1
90022594:	5d16      	ldrb	r6, [r2, r4]
90022596:	bf0c      	ite	eq
90022598:	f006 060f 	andeq.w	r6, r6, #15
9002259c:	1136      	asrne	r6, r6, #4
9002259e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
900225a2:	b2f6      	uxtb	r6, r6
900225a4:	1c44      	adds	r4, r0, #1
900225a6:	f100 809b 	bmi.w	900226e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900225aa:	45a0      	cmp	r8, r4
900225ac:	f340 8098 	ble.w	900226e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900225b0:	2f00      	cmp	r7, #0
900225b2:	f000 8097 	beq.w	900226e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
900225b6:	f10e 0a01 	add.w	sl, lr, #1
900225ba:	ea4f 045a 	mov.w	r4, sl, lsr #1
900225be:	f01a 0f01 	tst.w	sl, #1
900225c2:	5d14      	ldrb	r4, [r2, r4]
900225c4:	bf0c      	ite	eq
900225c6:	f004 040f 	andeq.w	r4, r4, #15
900225ca:	1124      	asrne	r4, r4, #4
900225cc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900225d0:	b2e4      	uxtb	r4, r4
900225d2:	3501      	adds	r5, #1
900225d4:	f100 808a 	bmi.w	900226ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900225d8:	45a9      	cmp	r9, r5
900225da:	f340 8087 	ble.w	900226ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900225de:	f1bc 0f00 	cmp.w	ip, #0
900225e2:	f000 8086 	beq.w	900226f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
900225e6:	2800      	cmp	r0, #0
900225e8:	db7e      	blt.n	900226e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900225ea:	4580      	cmp	r8, r0
900225ec:	dd7c      	ble.n	900226e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900225ee:	eb03 090e 	add.w	r9, r3, lr
900225f2:	ea4f 0559 	mov.w	r5, r9, lsr #1
900225f6:	f019 0f01 	tst.w	r9, #1
900225fa:	5d55      	ldrb	r5, [r2, r5]
900225fc:	bf0c      	ite	eq
900225fe:	f005 050f 	andeq.w	r5, r5, #15
90022602:	112d      	asrne	r5, r5, #4
90022604:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90022608:	b2ed      	uxtb	r5, r5
9002260a:	3001      	adds	r0, #1
9002260c:	d474      	bmi.n	900226f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002260e:	4580      	cmp	r8, r0
90022610:	dd72      	ble.n	900226f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022612:	2f00      	cmp	r7, #0
90022614:	d072      	beq.n	900226fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90022616:	3301      	adds	r3, #1
90022618:	449e      	add	lr, r3
9002261a:	ea4f 035e 	mov.w	r3, lr, lsr #1
9002261e:	f01e 0f01 	tst.w	lr, #1
90022622:	5cd0      	ldrb	r0, [r2, r3]
90022624:	bf0c      	ite	eq
90022626:	f000 000f 	andeq.w	r0, r0, #15
9002262a:	1100      	asrne	r0, r0, #4
9002262c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90022630:	b2c3      	uxtb	r3, r0
90022632:	b2ba      	uxth	r2, r7
90022634:	fa1f fc8c 	uxth.w	ip, ip
90022638:	fb02 f00c 	mul.w	r0, r2, ip
9002263c:	0112      	lsls	r2, r2, #4
9002263e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90022642:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90022646:	1a12      	subs	r2, r2, r0
90022648:	fa1f fc8c 	uxth.w	ip, ip
9002264c:	b292      	uxth	r2, r2
9002264e:	eba7 070c 	sub.w	r7, r7, ip
90022652:	4362      	muls	r2, r4
90022654:	b2bf      	uxth	r7, r7
90022656:	fb06 2207 	mla	r2, r6, r7, r2
9002265a:	fb0c 2505 	mla	r5, ip, r5, r2
9002265e:	fb00 5303 	mla	r3, r0, r3, r5
90022662:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022666:	b3a3      	cbz	r3, 900226d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90022668:	4a25      	ldr	r2, [pc, #148]	; (90022700 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002266a:	880e      	ldrh	r6, [r1, #0]
9002266c:	6815      	ldr	r5, [r2, #0]
9002266e:	b29a      	uxth	r2, r3
90022670:	1234      	asrs	r4, r6, #8
90022672:	43db      	mvns	r3, r3
90022674:	f3c5 4007 	ubfx	r0, r5, #16, #8
90022678:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002267c:	b2db      	uxtb	r3, r3
9002267e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022682:	fb10 f002 	smulbb	r0, r0, r2
90022686:	b2ed      	uxtb	r5, r5
90022688:	fb17 f702 	smulbb	r7, r7, r2
9002268c:	fb04 0403 	mla	r4, r4, r3, r0
90022690:	10f0      	asrs	r0, r6, #3
90022692:	fb15 f202 	smulbb	r2, r5, r2
90022696:	00f6      	lsls	r6, r6, #3
90022698:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002269c:	b2a4      	uxth	r4, r4
9002269e:	b2f6      	uxtb	r6, r6
900226a0:	fb00 7003 	mla	r0, r0, r3, r7
900226a4:	fb06 2303 	mla	r3, r6, r3, r2
900226a8:	b280      	uxth	r0, r0
900226aa:	b29a      	uxth	r2, r3
900226ac:	1c63      	adds	r3, r4, #1
900226ae:	eb03 2414 	add.w	r4, r3, r4, lsr #8
900226b2:	1c53      	adds	r3, r2, #1
900226b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900226b8:	1c42      	adds	r2, r0, #1
900226ba:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900226be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900226c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900226c6:	0940      	lsrs	r0, r0, #5
900226c8:	4323      	orrs	r3, r4
900226ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900226ce:	4303      	orrs	r3, r0
900226d0:	800b      	strh	r3, [r1, #0]
900226d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900226d6:	2600      	movs	r6, #0
900226d8:	e764      	b.n	900225a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
900226da:	2400      	movs	r4, #0
900226dc:	4626      	mov	r6, r4
900226de:	e778      	b.n	900225d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900226e0:	2400      	movs	r4, #0
900226e2:	e776      	b.n	900225d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900226e4:	463c      	mov	r4, r7
900226e6:	e774      	b.n	900225d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900226e8:	2500      	movs	r5, #0
900226ea:	e78e      	b.n	9002260a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
900226ec:	2300      	movs	r3, #0
900226ee:	461d      	mov	r5, r3
900226f0:	e79f      	b.n	90022632 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226f2:	4663      	mov	r3, ip
900226f4:	4665      	mov	r5, ip
900226f6:	e79c      	b.n	90022632 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226f8:	2300      	movs	r3, #0
900226fa:	e79a      	b.n	90022632 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900226fc:	463b      	mov	r3, r7
900226fe:	e798      	b.n	90022632 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022700:	2402626c 	.word	0x2402626c

90022704 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022708:	b093      	sub	sp, #76	; 0x4c
9002270a:	461d      	mov	r5, r3
9002270c:	920c      	str	r2, [sp, #48]	; 0x30
9002270e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90022710:	9011      	str	r0, [sp, #68]	; 0x44
90022712:	9107      	str	r1, [sp, #28]
90022714:	6850      	ldr	r0, [r2, #4]
90022716:	6812      	ldr	r2, [r2, #0]
90022718:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002271c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90022720:	fb00 1303 	mla	r3, r0, r3, r1
90022724:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90022728:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002272a:	689b      	ldr	r3, [r3, #8]
9002272c:	3301      	adds	r3, #1
9002272e:	f023 0301 	bic.w	r3, r3, #1
90022732:	9306      	str	r3, [sp, #24]
90022734:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022736:	681f      	ldr	r7, [r3, #0]
90022738:	9b07      	ldr	r3, [sp, #28]
9002273a:	2b00      	cmp	r3, #0
9002273c:	dc03      	bgt.n	90022746 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9002273e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022740:	2b00      	cmp	r3, #0
90022742:	f340 8267 	ble.w	90022c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90022746:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022748:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002274c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022750:	1e48      	subs	r0, r1, #1
90022752:	f102 3cff 	add.w	ip, r2, #4294967295
90022756:	2d00      	cmp	r5, #0
90022758:	f340 80b7 	ble.w	900228ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002275c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022760:	ea4f 4326 	mov.w	r3, r6, asr #16
90022764:	d406      	bmi.n	90022774 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022766:	4586      	cmp	lr, r0
90022768:	da04      	bge.n	90022774 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002276a:	2b00      	cmp	r3, #0
9002276c:	db02      	blt.n	90022774 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002276e:	4563      	cmp	r3, ip
90022770:	f2c0 80ac 	blt.w	900228cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90022774:	f11e 0e01 	adds.w	lr, lr, #1
90022778:	f100 809f 	bmi.w	900228ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002277c:	4571      	cmp	r1, lr
9002277e:	f2c0 809c 	blt.w	900228ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022782:	3301      	adds	r3, #1
90022784:	f100 8099 	bmi.w	900228ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022788:	429a      	cmp	r2, r3
9002278a:	f2c0 8096 	blt.w	900228ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002278e:	46c8      	mov	r8, r9
90022790:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90022794:	9509      	str	r5, [sp, #36]	; 0x24
90022796:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022798:	2b00      	cmp	r3, #0
9002279a:	f340 80b5 	ble.w	90022908 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002279e:	f3c4 3303 	ubfx	r3, r4, #12, #4
900227a2:	1430      	asrs	r0, r6, #16
900227a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
900227a8:	9308      	str	r3, [sp, #32]
900227aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
900227ac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900227b0:	1423      	asrs	r3, r4, #16
900227b2:	f100 813f 	bmi.w	90022a34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900227b6:	f10c 3bff 	add.w	fp, ip, #4294967295
900227ba:	455b      	cmp	r3, fp
900227bc:	f280 813a 	bge.w	90022a34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900227c0:	2800      	cmp	r0, #0
900227c2:	f2c0 8137 	blt.w	90022a34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900227c6:	f10e 3bff 	add.w	fp, lr, #4294967295
900227ca:	4558      	cmp	r0, fp
900227cc:	f280 8132 	bge.w	90022a34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900227d0:	9a06      	ldr	r2, [sp, #24]
900227d2:	fb00 3302 	mla	r3, r0, r2, r3
900227d6:	0858      	lsrs	r0, r3, #1
900227d8:	07da      	lsls	r2, r3, #31
900227da:	9a08      	ldr	r2, [sp, #32]
900227dc:	f817 c000 	ldrb.w	ip, [r7, r0]
900227e0:	bf54      	ite	pl
900227e2:	f00c 0c0f 	andpl.w	ip, ip, #15
900227e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900227ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900227ee:	fa5f fc8c 	uxtb.w	ip, ip
900227f2:	2a00      	cmp	r2, #0
900227f4:	f000 80cc 	beq.w	90022990 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900227f8:	1c58      	adds	r0, r3, #1
900227fa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900227fe:	07c0      	lsls	r0, r0, #31
90022800:	f817 e00e 	ldrb.w	lr, [r7, lr]
90022804:	bf54      	ite	pl
90022806:	f00e 0e0f 	andpl.w	lr, lr, #15
9002280a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
9002280e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90022812:	fa5f fe8e 	uxtb.w	lr, lr
90022816:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
9002281a:	b1b9      	cbz	r1, 9002284c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002281c:	4453      	add	r3, sl
9002281e:	0858      	lsrs	r0, r3, #1
90022820:	07da      	lsls	r2, r3, #31
90022822:	5c38      	ldrb	r0, [r7, r0]
90022824:	bf54      	ite	pl
90022826:	f000 000f 	andpl.w	r0, r0, #15
9002282a:	1100      	asrmi	r0, r0, #4
9002282c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90022830:	b2c0      	uxtb	r0, r0
90022832:	900a      	str	r0, [sp, #40]	; 0x28
90022834:	1c58      	adds	r0, r3, #1
90022836:	0843      	lsrs	r3, r0, #1
90022838:	07c2      	lsls	r2, r0, #31
9002283a:	5cfb      	ldrb	r3, [r7, r3]
9002283c:	bf54      	ite	pl
9002283e:	f003 030f 	andpl.w	r3, r3, #15
90022842:	111b      	asrmi	r3, r3, #4
90022844:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022848:	b2db      	uxtb	r3, r3
9002284a:	930e      	str	r3, [sp, #56]	; 0x38
9002284c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90022850:	b289      	uxth	r1, r1
90022852:	fb02 f301 	mul.w	r3, r2, r1
90022856:	0112      	lsls	r2, r2, #4
90022858:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002285c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022860:	1ad2      	subs	r2, r2, r3
90022862:	b289      	uxth	r1, r1
90022864:	b292      	uxth	r2, r2
90022866:	1a40      	subs	r0, r0, r1
90022868:	fa1f fe80 	uxth.w	lr, r0
9002286c:	980d      	ldr	r0, [sp, #52]	; 0x34
9002286e:	4342      	muls	r2, r0
90022870:	fb0c 2c0e 	mla	ip, ip, lr, r2
90022874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90022876:	fb01 c102 	mla	r1, r1, r2, ip
9002287a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9002287c:	fb03 1302 	mla	r3, r3, r2, r1
90022880:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022884:	2bff      	cmp	r3, #255	; 0xff
90022886:	f040 8094 	bne.w	900229b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002288a:	4bbf      	ldr	r3, [pc, #764]	; (90022b88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002288c:	681a      	ldr	r2, [r3, #0]
9002288e:	4bbf      	ldr	r3, [pc, #764]	; (90022b8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022890:	0951      	lsrs	r1, r2, #5
90022892:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90022896:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002289a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002289e:	430b      	orrs	r3, r1
900228a0:	4313      	orrs	r3, r2
900228a2:	f8a8 3000 	strh.w	r3, [r8]
900228a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900228a8:	f108 0802 	add.w	r8, r8, #2
900228ac:	441c      	add	r4, r3
900228ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900228b0:	441e      	add	r6, r3
900228b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900228b4:	3b01      	subs	r3, #1
900228b6:	9309      	str	r3, [sp, #36]	; 0x24
900228b8:	e76d      	b.n	90022796 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900228ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900228bc:	3d01      	subs	r5, #1
900228be:	f109 0902 	add.w	r9, r9, #2
900228c2:	441c      	add	r4, r3
900228c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900228c6:	441e      	add	r6, r3
900228c8:	e745      	b.n	90022756 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900228ca:	d021      	beq.n	90022910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900228cc:	1e6b      	subs	r3, r5, #1
900228ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
900228d0:	fb00 4003 	mla	r0, r0, r3, r4
900228d4:	1400      	asrs	r0, r0, #16
900228d6:	f53f af5a 	bmi.w	9002278e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900228da:	3901      	subs	r1, #1
900228dc:	4288      	cmp	r0, r1
900228de:	f6bf af56 	bge.w	9002278e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900228e2:	9920      	ldr	r1, [sp, #128]	; 0x80
900228e4:	fb01 6303 	mla	r3, r1, r3, r6
900228e8:	141b      	asrs	r3, r3, #16
900228ea:	f53f af50 	bmi.w	9002278e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900228ee:	3a01      	subs	r2, #1
900228f0:	4293      	cmp	r3, r2
900228f2:	f6bf af4c 	bge.w	9002278e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900228f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900228fa:	46a8      	mov	r8, r5
900228fc:	46ce      	mov	lr, r9
900228fe:	9308      	str	r3, [sp, #32]
90022900:	f1b8 0f00 	cmp.w	r8, #0
90022904:	f300 80b6 	bgt.w	90022a74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022908:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002290c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90022910:	9b07      	ldr	r3, [sp, #28]
90022912:	2b00      	cmp	r3, #0
90022914:	f340 817e 	ble.w	90022c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90022918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002291c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002291e:	ee30 0a04 	vadd.f32	s0, s0, s8
90022922:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022926:	eef0 6a62 	vmov.f32	s13, s5
9002292a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002292e:	ee31 1a05 	vadd.f32	s2, s2, s10
90022932:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022936:	ee16 4a90 	vmov	r4, s13
9002293a:	eef0 6a43 	vmov.f32	s13, s6
9002293e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022942:	ee16 6a90 	vmov	r6, s13
90022946:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002294a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002294e:	ee77 2a62 	vsub.f32	s5, s14, s5
90022952:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022956:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002295a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002295e:	ee12 2a90 	vmov	r2, s5
90022962:	eef0 2a47 	vmov.f32	s5, s14
90022966:	fb92 f3f3 	sdiv	r3, r2, r3
9002296a:	ee13 2a10 	vmov	r2, s6
9002296e:	931f      	str	r3, [sp, #124]	; 0x7c
90022970:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90022972:	eeb0 3a67 	vmov.f32	s6, s15
90022976:	fb92 f3f3 	sdiv	r3, r2, r3
9002297a:	9320      	str	r3, [sp, #128]	; 0x80
9002297c:	9b07      	ldr	r3, [sp, #28]
9002297e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022980:	3b01      	subs	r3, #1
90022982:	9307      	str	r3, [sp, #28]
90022984:	bf08      	it	eq
90022986:	4615      	moveq	r5, r2
90022988:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002298a:	bf18      	it	ne
9002298c:	461d      	movne	r5, r3
9002298e:	e6d3      	b.n	90022738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90022990:	2900      	cmp	r1, #0
90022992:	f43f af5b 	beq.w	9002284c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022996:	eb0a 0003 	add.w	r0, sl, r3
9002299a:	0843      	lsrs	r3, r0, #1
9002299c:	07c0      	lsls	r0, r0, #31
9002299e:	5cfb      	ldrb	r3, [r7, r3]
900229a0:	bf54      	ite	pl
900229a2:	f003 030f 	andpl.w	r3, r3, #15
900229a6:	111b      	asrmi	r3, r3, #4
900229a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900229ac:	b2db      	uxtb	r3, r3
900229ae:	930a      	str	r3, [sp, #40]	; 0x28
900229b0:	e74c      	b.n	9002284c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900229b2:	2b00      	cmp	r3, #0
900229b4:	f43f af77 	beq.w	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900229b8:	4a73      	ldr	r2, [pc, #460]	; (90022b88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
900229ba:	fa1f fe83 	uxth.w	lr, r3
900229be:	f8b8 c000 	ldrh.w	ip, [r8]
900229c2:	43db      	mvns	r3, r3
900229c4:	6810      	ldr	r0, [r2, #0]
900229c6:	ea4f 212c 	mov.w	r1, ip, asr #8
900229ca:	f3c0 4207 	ubfx	r2, r0, #16, #8
900229ce:	b2db      	uxtb	r3, r3
900229d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900229d4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
900229d8:	fb12 f20e 	smulbb	r2, r2, lr
900229dc:	b2c0      	uxtb	r0, r0
900229de:	fb1b fb0e 	smulbb	fp, fp, lr
900229e2:	fb01 2103 	mla	r1, r1, r3, r2
900229e6:	ea4f 02ec 	mov.w	r2, ip, asr #3
900229ea:	fb10 fe0e 	smulbb	lr, r0, lr
900229ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900229f2:	b289      	uxth	r1, r1
900229f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900229f8:	fa5f fc8c 	uxtb.w	ip, ip
900229fc:	fb02 b203 	mla	r2, r2, r3, fp
90022a00:	1c48      	adds	r0, r1, #1
90022a02:	fb0c e303 	mla	r3, ip, r3, lr
90022a06:	b292      	uxth	r2, r2
90022a08:	b29b      	uxth	r3, r3
90022a0a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90022a0e:	f102 0b01 	add.w	fp, r2, #1
90022a12:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90022a16:	1c59      	adds	r1, r3, #1
90022a18:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022a1c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90022a20:	0952      	lsrs	r2, r2, #5
90022a22:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90022a26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022a2a:	4301      	orrs	r1, r0
90022a2c:	4311      	orrs	r1, r2
90022a2e:	f8a8 1000 	strh.w	r1, [r8]
90022a32:	e738      	b.n	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a34:	f113 0b01 	adds.w	fp, r3, #1
90022a38:	f53f af35 	bmi.w	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a3c:	45dc      	cmp	ip, fp
90022a3e:	f6ff af32 	blt.w	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a42:	f110 0b01 	adds.w	fp, r0, #1
90022a46:	f53f af2e 	bmi.w	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a4a:	45de      	cmp	lr, fp
90022a4c:	f6ff af2b 	blt.w	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a50:	9302      	str	r3, [sp, #8]
90022a52:	fa0f f38e 	sxth.w	r3, lr
90022a56:	9a08      	ldr	r2, [sp, #32]
90022a58:	9301      	str	r3, [sp, #4]
90022a5a:	fa0f f38c 	sxth.w	r3, ip
90022a5e:	9105      	str	r1, [sp, #20]
90022a60:	4641      	mov	r1, r8
90022a62:	9300      	str	r3, [sp, #0]
90022a64:	4653      	mov	r3, sl
90022a66:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022a6a:	463a      	mov	r2, r7
90022a6c:	9811      	ldr	r0, [sp, #68]	; 0x44
90022a6e:	f7ff fd73 	bl	90022558 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90022a72:	e718      	b.n	900228a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022a74:	1422      	asrs	r2, r4, #16
90022a76:	9906      	ldr	r1, [sp, #24]
90022a78:	1433      	asrs	r3, r6, #16
90022a7a:	f3c4 3003 	ubfx	r0, r4, #12, #4
90022a7e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90022a82:	fb01 2303 	mla	r3, r1, r3, r2
90022a86:	085a      	lsrs	r2, r3, #1
90022a88:	07d9      	lsls	r1, r3, #31
90022a8a:	5cba      	ldrb	r2, [r7, r2]
90022a8c:	bf54      	ite	pl
90022a8e:	f002 020f 	andpl.w	r2, r2, #15
90022a92:	1112      	asrmi	r2, r2, #4
90022a94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022a98:	b2d2      	uxtb	r2, r2
90022a9a:	2800      	cmp	r0, #0
90022a9c:	d063      	beq.n	90022b66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90022a9e:	f103 0a01 	add.w	sl, r3, #1
90022aa2:	ea4f 015a 	mov.w	r1, sl, lsr #1
90022aa6:	f01a 0f01 	tst.w	sl, #1
90022aaa:	5c79      	ldrb	r1, [r7, r1]
90022aac:	bf0c      	ite	eq
90022aae:	f001 010f 	andeq.w	r1, r1, #15
90022ab2:	1109      	asrne	r1, r1, #4
90022ab4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022ab8:	b2c9      	uxtb	r1, r1
90022aba:	910f      	str	r1, [sp, #60]	; 0x3c
90022abc:	f1bc 0f00 	cmp.w	ip, #0
90022ac0:	d01a      	beq.n	90022af8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022ac2:	9908      	ldr	r1, [sp, #32]
90022ac4:	440b      	add	r3, r1
90022ac6:	0859      	lsrs	r1, r3, #1
90022ac8:	f013 0f01 	tst.w	r3, #1
90022acc:	f103 0301 	add.w	r3, r3, #1
90022ad0:	5c79      	ldrb	r1, [r7, r1]
90022ad2:	bf0c      	ite	eq
90022ad4:	f001 010f 	andeq.w	r1, r1, #15
90022ad8:	1109      	asrne	r1, r1, #4
90022ada:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022ade:	b2c9      	uxtb	r1, r1
90022ae0:	910b      	str	r1, [sp, #44]	; 0x2c
90022ae2:	0859      	lsrs	r1, r3, #1
90022ae4:	07db      	lsls	r3, r3, #31
90022ae6:	5c79      	ldrb	r1, [r7, r1]
90022ae8:	bf54      	ite	pl
90022aea:	f001 010f 	andpl.w	r1, r1, #15
90022aee:	1109      	asrmi	r1, r1, #4
90022af0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022af4:	b2c9      	uxtb	r1, r1
90022af6:	9110      	str	r1, [sp, #64]	; 0x40
90022af8:	b280      	uxth	r0, r0
90022afa:	fa1f fc8c 	uxth.w	ip, ip
90022afe:	fb00 f30c 	mul.w	r3, r0, ip
90022b02:	0100      	lsls	r0, r0, #4
90022b04:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90022b08:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90022b0c:	1ac0      	subs	r0, r0, r3
90022b0e:	fa1f fc8c 	uxth.w	ip, ip
90022b12:	b280      	uxth	r0, r0
90022b14:	eba1 010c 	sub.w	r1, r1, ip
90022b18:	fa1f fa81 	uxth.w	sl, r1
90022b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
90022b1e:	4348      	muls	r0, r1
90022b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
90022b22:	fb02 020a 	mla	r2, r2, sl, r0
90022b26:	fb0c 2c01 	mla	ip, ip, r1, r2
90022b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90022b2c:	fb03 c302 	mla	r3, r3, r2, ip
90022b30:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022b34:	2bff      	cmp	r3, #255	; 0xff
90022b36:	d12b      	bne.n	90022b90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90022b38:	4b13      	ldr	r3, [pc, #76]	; (90022b88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022b3a:	681a      	ldr	r2, [r3, #0]
90022b3c:	4b13      	ldr	r3, [pc, #76]	; (90022b8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022b3e:	0951      	lsrs	r1, r2, #5
90022b40:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90022b44:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022b48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022b4c:	430b      	orrs	r3, r1
90022b4e:	4313      	orrs	r3, r2
90022b50:	f8ae 3000 	strh.w	r3, [lr]
90022b54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022b56:	f10e 0e02 	add.w	lr, lr, #2
90022b5a:	f108 38ff 	add.w	r8, r8, #4294967295
90022b5e:	441c      	add	r4, r3
90022b60:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022b62:	441e      	add	r6, r3
90022b64:	e6cc      	b.n	90022900 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90022b66:	f1bc 0f00 	cmp.w	ip, #0
90022b6a:	d0c5      	beq.n	90022af8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022b6c:	9908      	ldr	r1, [sp, #32]
90022b6e:	440b      	add	r3, r1
90022b70:	0859      	lsrs	r1, r3, #1
90022b72:	07db      	lsls	r3, r3, #31
90022b74:	5c79      	ldrb	r1, [r7, r1]
90022b76:	bf54      	ite	pl
90022b78:	f001 010f 	andpl.w	r1, r1, #15
90022b7c:	1109      	asrmi	r1, r1, #4
90022b7e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022b82:	b2c9      	uxtb	r1, r1
90022b84:	910b      	str	r1, [sp, #44]	; 0x2c
90022b86:	e7b7      	b.n	90022af8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022b88:	2402626c 	.word	0x2402626c
90022b8c:	fffff800 	.word	0xfffff800
90022b90:	2b00      	cmp	r3, #0
90022b92:	d0df      	beq.n	90022b54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022b94:	4a21      	ldr	r2, [pc, #132]	; (90022c1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90022b96:	fa1f fa83 	uxth.w	sl, r3
90022b9a:	f8be c000 	ldrh.w	ip, [lr]
90022b9e:	43db      	mvns	r3, r3
90022ba0:	6810      	ldr	r0, [r2, #0]
90022ba2:	ea4f 212c 	mov.w	r1, ip, asr #8
90022ba6:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022baa:	b2db      	uxtb	r3, r3
90022bac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022bb0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022bb4:	fb12 f20a 	smulbb	r2, r2, sl
90022bb8:	b2c0      	uxtb	r0, r0
90022bba:	fb1b fb0a 	smulbb	fp, fp, sl
90022bbe:	fb01 2103 	mla	r1, r1, r3, r2
90022bc2:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022bc6:	fb10 f00a 	smulbb	r0, r0, sl
90022bca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022bce:	b289      	uxth	r1, r1
90022bd0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022bd4:	fa5f fc8c 	uxtb.w	ip, ip
90022bd8:	fb02 b203 	mla	r2, r2, r3, fp
90022bdc:	fb0c 0003 	mla	r0, ip, r3, r0
90022be0:	1c4b      	adds	r3, r1, #1
90022be2:	b292      	uxth	r2, r2
90022be4:	b280      	uxth	r0, r0
90022be6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90022bea:	f100 0b01 	add.w	fp, r0, #1
90022bee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90022bf2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90022bf6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90022bfa:	ea4b 0101 	orr.w	r1, fp, r1
90022bfe:	f102 0b01 	add.w	fp, r2, #1
90022c02:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022c06:	0952      	lsrs	r2, r2, #5
90022c08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022c0c:	4311      	orrs	r1, r2
90022c0e:	f8ae 1000 	strh.w	r1, [lr]
90022c12:	e79f      	b.n	90022b54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022c14:	b013      	add	sp, #76	; 0x4c
90022c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022c1a:	bf00      	nop
90022c1c:	2402626c 	.word	0x2402626c

90022c20 <CRC_Lock>:
90022c20:	4a20      	ldr	r2, [pc, #128]	; (90022ca4 <CRC_Lock+0x84>)
90022c22:	b530      	push	{r4, r5, lr}
90022c24:	6813      	ldr	r3, [r2, #0]
90022c26:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90022c2a:	f24c 2540 	movw	r5, #49728	; 0xc240
90022c2e:	f023 0301 	bic.w	r3, r3, #1
90022c32:	6013      	str	r3, [r2, #0]
90022c34:	4b1c      	ldr	r3, [pc, #112]	; (90022ca8 <CRC_Lock+0x88>)
90022c36:	681a      	ldr	r2, [r3, #0]
90022c38:	4022      	ands	r2, r4
90022c3a:	42aa      	cmp	r2, r5
90022c3c:	d005      	beq.n	90022c4a <CRC_Lock+0x2a>
90022c3e:	681b      	ldr	r3, [r3, #0]
90022c40:	f24c 2270 	movw	r2, #49776	; 0xc270
90022c44:	4023      	ands	r3, r4
90022c46:	4293      	cmp	r3, r2
90022c48:	d124      	bne.n	90022c94 <CRC_Lock+0x74>
90022c4a:	4b18      	ldr	r3, [pc, #96]	; (90022cac <CRC_Lock+0x8c>)
90022c4c:	681b      	ldr	r3, [r3, #0]
90022c4e:	bb0b      	cbnz	r3, 90022c94 <CRC_Lock+0x74>
90022c50:	4b17      	ldr	r3, [pc, #92]	; (90022cb0 <CRC_Lock+0x90>)
90022c52:	681a      	ldr	r2, [r3, #0]
90022c54:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022c58:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90022c5c:	d00d      	beq.n	90022c7a <CRC_Lock+0x5a>
90022c5e:	681a      	ldr	r2, [r3, #0]
90022c60:	f240 4483 	movw	r4, #1155	; 0x483
90022c64:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022c68:	42a2      	cmp	r2, r4
90022c6a:	d006      	beq.n	90022c7a <CRC_Lock+0x5a>
90022c6c:	681b      	ldr	r3, [r3, #0]
90022c6e:	f240 4285 	movw	r2, #1157	; 0x485
90022c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
90022c76:	4293      	cmp	r3, r2
90022c78:	d10c      	bne.n	90022c94 <CRC_Lock+0x74>
90022c7a:	4b0e      	ldr	r3, [pc, #56]	; (90022cb4 <CRC_Lock+0x94>)
90022c7c:	2201      	movs	r2, #1
90022c7e:	601a      	str	r2, [r3, #0]
90022c80:	681a      	ldr	r2, [r3, #0]
90022c82:	2a00      	cmp	r2, #0
90022c84:	d1fc      	bne.n	90022c80 <CRC_Lock+0x60>
90022c86:	4b0c      	ldr	r3, [pc, #48]	; (90022cb8 <CRC_Lock+0x98>)
90022c88:	6018      	str	r0, [r3, #0]
90022c8a:	6818      	ldr	r0, [r3, #0]
90022c8c:	1a43      	subs	r3, r0, r1
90022c8e:	4258      	negs	r0, r3
90022c90:	4158      	adcs	r0, r3
90022c92:	bd30      	pop	{r4, r5, pc}
90022c94:	4b09      	ldr	r3, [pc, #36]	; (90022cbc <CRC_Lock+0x9c>)
90022c96:	2201      	movs	r2, #1
90022c98:	601a      	str	r2, [r3, #0]
90022c9a:	681a      	ldr	r2, [r3, #0]
90022c9c:	2a00      	cmp	r2, #0
90022c9e:	d1fc      	bne.n	90022c9a <CRC_Lock+0x7a>
90022ca0:	4b07      	ldr	r3, [pc, #28]	; (90022cc0 <CRC_Lock+0xa0>)
90022ca2:	e7f1      	b.n	90022c88 <CRC_Lock+0x68>
90022ca4:	e0002000 	.word	0xe0002000
90022ca8:	e000ed00 	.word	0xe000ed00
90022cac:	e0042000 	.word	0xe0042000
90022cb0:	5c001000 	.word	0x5c001000
90022cb4:	58024c08 	.word	0x58024c08
90022cb8:	58024c00 	.word	0x58024c00
90022cbc:	40023008 	.word	0x40023008
90022cc0:	40023000 	.word	0x40023000

90022cc4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90022cc4:	6101      	str	r1, [r0, #16]
90022cc6:	4770      	bx	lr

90022cc8 <_ZN8touchgfx8Gestures4tickEv>:
90022cc8:	7b83      	ldrb	r3, [r0, #14]
90022cca:	b14b      	cbz	r3, 90022ce0 <_ZN8touchgfx8Gestures4tickEv+0x18>
90022ccc:	8903      	ldrh	r3, [r0, #8]
90022cce:	3301      	adds	r3, #1
90022cd0:	b29b      	uxth	r3, r3
90022cd2:	2b07      	cmp	r3, #7
90022cd4:	8103      	strh	r3, [r0, #8]
90022cd6:	bf81      	itttt	hi
90022cd8:	2300      	movhi	r3, #0
90022cda:	8143      	strhhi	r3, [r0, #10]
90022cdc:	8183      	strhhi	r3, [r0, #12]
90022cde:	7383      	strbhi	r3, [r0, #14]
90022ce0:	4770      	bx	lr
	...

90022ce4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90022ce4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90022ce8:	4698      	mov	r8, r3
90022cea:	8883      	ldrh	r3, [r0, #4]
90022cec:	4604      	mov	r4, r0
90022cee:	4617      	mov	r7, r2
90022cf0:	f8ad 3006 	strh.w	r3, [sp, #6]
90022cf4:	eba8 0303 	sub.w	r3, r8, r3
90022cf8:	4a19      	ldr	r2, [pc, #100]	; (90022d60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90022cfa:	460e      	mov	r6, r1
90022cfc:	b21b      	sxth	r3, r3
90022cfe:	88c1      	ldrh	r1, [r0, #6]
90022d00:	9200      	str	r2, [sp, #0]
90022d02:	2000      	movs	r0, #0
90022d04:	2b00      	cmp	r3, #0
90022d06:	8aa2      	ldrh	r2, [r4, #20]
90022d08:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90022d0c:	bfb8      	it	lt
90022d0e:	425b      	neglt	r3, r3
90022d10:	f88d 0004 	strb.w	r0, [sp, #4]
90022d14:	f8ad 1008 	strh.w	r1, [sp, #8]
90022d18:	b21b      	sxth	r3, r3
90022d1a:	f8ad 800a 	strh.w	r8, [sp, #10]
90022d1e:	f8ad 500c 	strh.w	r5, [sp, #12]
90022d22:	4293      	cmp	r3, r2
90022d24:	dc07      	bgt.n	90022d36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90022d26:	1a69      	subs	r1, r5, r1
90022d28:	b209      	sxth	r1, r1
90022d2a:	2900      	cmp	r1, #0
90022d2c:	bfb8      	it	lt
90022d2e:	4249      	neglt	r1, r1
90022d30:	b209      	sxth	r1, r1
90022d32:	428a      	cmp	r2, r1
90022d34:	da10      	bge.n	90022d58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90022d36:	6920      	ldr	r0, [r4, #16]
90022d38:	4669      	mov	r1, sp
90022d3a:	eba8 0606 	sub.w	r6, r8, r6
90022d3e:	1bef      	subs	r7, r5, r7
90022d40:	6803      	ldr	r3, [r0, #0]
90022d42:	685b      	ldr	r3, [r3, #4]
90022d44:	4798      	blx	r3
90022d46:	2300      	movs	r3, #0
90022d48:	2001      	movs	r0, #1
90022d4a:	8166      	strh	r6, [r4, #10]
90022d4c:	8123      	strh	r3, [r4, #8]
90022d4e:	81a7      	strh	r7, [r4, #12]
90022d50:	f8a4 8004 	strh.w	r8, [r4, #4]
90022d54:	80e5      	strh	r5, [r4, #6]
90022d56:	73a0      	strb	r0, [r4, #14]
90022d58:	b004      	add	sp, #16
90022d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022d5e:	bf00      	nop
90022d60:	90026dac 	.word	0x90026dac

90022d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90022d64:	b5f0      	push	{r4, r5, r6, r7, lr}
90022d66:	461e      	mov	r6, r3
90022d68:	1e4b      	subs	r3, r1, #1
90022d6a:	b085      	sub	sp, #20
90022d6c:	4604      	mov	r4, r0
90022d6e:	2b01      	cmp	r3, #1
90022d70:	460d      	mov	r5, r1
90022d72:	4617      	mov	r7, r2
90022d74:	d84b      	bhi.n	90022e0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90022d76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90022d7a:	1cd3      	adds	r3, r2, #3
90022d7c:	b29b      	uxth	r3, r3
90022d7e:	2b06      	cmp	r3, #6
90022d80:	d916      	bls.n	90022db0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90022d82:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90022e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022d86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022d8a:	f8cd c004 	str.w	ip, [sp, #4]
90022d8e:	f04f 0c00 	mov.w	ip, #0
90022d92:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022d96:	6900      	ldr	r0, [r0, #16]
90022d98:	f8ad 100c 	strh.w	r1, [sp, #12]
90022d9c:	a901      	add	r1, sp, #4
90022d9e:	f88d c008 	strb.w	ip, [sp, #8]
90022da2:	f8ad 200a 	strh.w	r2, [sp, #10]
90022da6:	f8ad 300e 	strh.w	r3, [sp, #14]
90022daa:	6803      	ldr	r3, [r0, #0]
90022dac:	689b      	ldr	r3, [r3, #8]
90022dae:	4798      	blx	r3
90022db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90022db4:	1cd3      	adds	r3, r2, #3
90022db6:	b29b      	uxth	r3, r3
90022db8:	2b06      	cmp	r3, #6
90022dba:	d916      	bls.n	90022dea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022dbc:	f8df c064 	ldr.w	ip, [pc, #100]	; 90022e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022dc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022dc4:	f8cd c004 	str.w	ip, [sp, #4]
90022dc8:	f04f 0c01 	mov.w	ip, #1
90022dcc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022dd0:	6920      	ldr	r0, [r4, #16]
90022dd2:	f8ad 100c 	strh.w	r1, [sp, #12]
90022dd6:	a901      	add	r1, sp, #4
90022dd8:	f88d c008 	strb.w	ip, [sp, #8]
90022ddc:	f8ad 200a 	strh.w	r2, [sp, #10]
90022de0:	f8ad 300e 	strh.w	r3, [sp, #14]
90022de4:	6803      	ldr	r3, [r0, #0]
90022de6:	689b      	ldr	r3, [r3, #8]
90022de8:	4798      	blx	r3
90022dea:	4b0d      	ldr	r3, [pc, #52]	; (90022e20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90022dec:	a901      	add	r1, sp, #4
90022dee:	6920      	ldr	r0, [r4, #16]
90022df0:	9301      	str	r3, [sp, #4]
90022df2:	2300      	movs	r3, #0
90022df4:	f88d 5008 	strb.w	r5, [sp, #8]
90022df8:	f8ad 700a 	strh.w	r7, [sp, #10]
90022dfc:	f8ad 600c 	strh.w	r6, [sp, #12]
90022e00:	f8ad 300e 	strh.w	r3, [sp, #14]
90022e04:	6803      	ldr	r3, [r0, #0]
90022e06:	681b      	ldr	r3, [r3, #0]
90022e08:	4798      	blx	r3
90022e0a:	b005      	add	sp, #20
90022e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90022e0e:	2900      	cmp	r1, #0
90022e10:	d1eb      	bne.n	90022dea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022e12:	80a2      	strh	r2, [r4, #4]
90022e14:	80c6      	strh	r6, [r0, #6]
90022e16:	60a1      	str	r1, [r4, #8]
90022e18:	81a1      	strh	r1, [r4, #12]
90022e1a:	73a1      	strb	r1, [r4, #14]
90022e1c:	e7e5      	b.n	90022dea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022e1e:	bf00      	nop
90022e20:	90026d98 	.word	0x90026d98
90022e24:	90026dc0 	.word	0x90026dc0

90022e28 <__aeabi_atexit>:
90022e28:	460b      	mov	r3, r1
90022e2a:	4601      	mov	r1, r0
90022e2c:	4618      	mov	r0, r3
90022e2e:	f000 b90f 	b.w	90023050 <__cxa_atexit>

90022e32 <_ZdlPvj>:
90022e32:	f000 b812 	b.w	90022e5a <_ZdlPv>

90022e36 <__cxa_guard_acquire>:
90022e36:	6803      	ldr	r3, [r0, #0]
90022e38:	07db      	lsls	r3, r3, #31
90022e3a:	d406      	bmi.n	90022e4a <__cxa_guard_acquire+0x14>
90022e3c:	7843      	ldrb	r3, [r0, #1]
90022e3e:	b103      	cbz	r3, 90022e42 <__cxa_guard_acquire+0xc>
90022e40:	deff      	udf	#255	; 0xff
90022e42:	2301      	movs	r3, #1
90022e44:	7043      	strb	r3, [r0, #1]
90022e46:	4618      	mov	r0, r3
90022e48:	4770      	bx	lr
90022e4a:	2000      	movs	r0, #0
90022e4c:	4770      	bx	lr

90022e4e <__cxa_guard_release>:
90022e4e:	2301      	movs	r3, #1
90022e50:	6003      	str	r3, [r0, #0]
90022e52:	4770      	bx	lr

90022e54 <__cxa_pure_virtual>:
90022e54:	b508      	push	{r3, lr}
90022e56:	f000 f80f 	bl	90022e78 <_ZSt9terminatev>

90022e5a <_ZdlPv>:
90022e5a:	f000 b845 	b.w	90022ee8 <free>

90022e5e <_ZN10__cxxabiv111__terminateEPFvvE>:
90022e5e:	b508      	push	{r3, lr}
90022e60:	4780      	blx	r0
90022e62:	f000 f80e 	bl	90022e82 <abort>
	...

90022e68 <_ZSt13get_terminatev>:
90022e68:	4b02      	ldr	r3, [pc, #8]	; (90022e74 <_ZSt13get_terminatev+0xc>)
90022e6a:	6818      	ldr	r0, [r3, #0]
90022e6c:	f3bf 8f5b 	dmb	ish
90022e70:	4770      	bx	lr
90022e72:	bf00      	nop
90022e74:	240000dc 	.word	0x240000dc

90022e78 <_ZSt9terminatev>:
90022e78:	b508      	push	{r3, lr}
90022e7a:	f7ff fff5 	bl	90022e68 <_ZSt13get_terminatev>
90022e7e:	f7ff ffee 	bl	90022e5e <_ZN10__cxxabiv111__terminateEPFvvE>

90022e82 <abort>:
90022e82:	b508      	push	{r3, lr}
90022e84:	2006      	movs	r0, #6
90022e86:	f000 fadf 	bl	90023448 <raise>
90022e8a:	2001      	movs	r0, #1
90022e8c:	f7e1 ff06 	bl	90004c9c <_exit>

90022e90 <__assert_func>:
90022e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90022e92:	4614      	mov	r4, r2
90022e94:	461a      	mov	r2, r3
90022e96:	4b09      	ldr	r3, [pc, #36]	; (90022ebc <__assert_func+0x2c>)
90022e98:	681b      	ldr	r3, [r3, #0]
90022e9a:	4605      	mov	r5, r0
90022e9c:	68d8      	ldr	r0, [r3, #12]
90022e9e:	b14c      	cbz	r4, 90022eb4 <__assert_func+0x24>
90022ea0:	4b07      	ldr	r3, [pc, #28]	; (90022ec0 <__assert_func+0x30>)
90022ea2:	9100      	str	r1, [sp, #0]
90022ea4:	e9cd 3401 	strd	r3, r4, [sp, #4]
90022ea8:	4906      	ldr	r1, [pc, #24]	; (90022ec4 <__assert_func+0x34>)
90022eaa:	462b      	mov	r3, r5
90022eac:	f000 f982 	bl	900231b4 <fiprintf>
90022eb0:	f7ff ffe7 	bl	90022e82 <abort>
90022eb4:	4b04      	ldr	r3, [pc, #16]	; (90022ec8 <__assert_func+0x38>)
90022eb6:	461c      	mov	r4, r3
90022eb8:	e7f3      	b.n	90022ea2 <__assert_func+0x12>
90022eba:	bf00      	nop
90022ebc:	24000138 	.word	0x24000138
90022ec0:	90027088 	.word	0x90027088
90022ec4:	90027095 	.word	0x90027095
90022ec8:	900270c3 	.word	0x900270c3

90022ecc <atexit>:
90022ecc:	2300      	movs	r3, #0
90022ece:	4601      	mov	r1, r0
90022ed0:	461a      	mov	r2, r3
90022ed2:	4618      	mov	r0, r3
90022ed4:	f000 bb66 	b.w	900235a4 <__register_exitproc>

90022ed8 <malloc>:
90022ed8:	4b02      	ldr	r3, [pc, #8]	; (90022ee4 <malloc+0xc>)
90022eda:	4601      	mov	r1, r0
90022edc:	6818      	ldr	r0, [r3, #0]
90022ede:	f000 b82b 	b.w	90022f38 <_malloc_r>
90022ee2:	bf00      	nop
90022ee4:	24000138 	.word	0x24000138

90022ee8 <free>:
90022ee8:	4b02      	ldr	r3, [pc, #8]	; (90022ef4 <free+0xc>)
90022eea:	4601      	mov	r1, r0
90022eec:	6818      	ldr	r0, [r3, #0]
90022eee:	f000 bbb7 	b.w	90023660 <_free_r>
90022ef2:	bf00      	nop
90022ef4:	24000138 	.word	0x24000138

90022ef8 <sbrk_aligned>:
90022ef8:	b570      	push	{r4, r5, r6, lr}
90022efa:	4e0e      	ldr	r6, [pc, #56]	; (90022f34 <sbrk_aligned+0x3c>)
90022efc:	460c      	mov	r4, r1
90022efe:	6831      	ldr	r1, [r6, #0]
90022f00:	4605      	mov	r5, r0
90022f02:	b911      	cbnz	r1, 90022f0a <sbrk_aligned+0x12>
90022f04:	f000 faf0 	bl	900234e8 <_sbrk_r>
90022f08:	6030      	str	r0, [r6, #0]
90022f0a:	4621      	mov	r1, r4
90022f0c:	4628      	mov	r0, r5
90022f0e:	f000 faeb 	bl	900234e8 <_sbrk_r>
90022f12:	1c43      	adds	r3, r0, #1
90022f14:	d00a      	beq.n	90022f2c <sbrk_aligned+0x34>
90022f16:	1cc4      	adds	r4, r0, #3
90022f18:	f024 0403 	bic.w	r4, r4, #3
90022f1c:	42a0      	cmp	r0, r4
90022f1e:	d007      	beq.n	90022f30 <sbrk_aligned+0x38>
90022f20:	1a21      	subs	r1, r4, r0
90022f22:	4628      	mov	r0, r5
90022f24:	f000 fae0 	bl	900234e8 <_sbrk_r>
90022f28:	3001      	adds	r0, #1
90022f2a:	d101      	bne.n	90022f30 <sbrk_aligned+0x38>
90022f2c:	f04f 34ff 	mov.w	r4, #4294967295
90022f30:	4620      	mov	r0, r4
90022f32:	bd70      	pop	{r4, r5, r6, pc}
90022f34:	24026364 	.word	0x24026364

90022f38 <_malloc_r>:
90022f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90022f3c:	1ccd      	adds	r5, r1, #3
90022f3e:	f025 0503 	bic.w	r5, r5, #3
90022f42:	3508      	adds	r5, #8
90022f44:	2d0c      	cmp	r5, #12
90022f46:	bf38      	it	cc
90022f48:	250c      	movcc	r5, #12
90022f4a:	2d00      	cmp	r5, #0
90022f4c:	4607      	mov	r7, r0
90022f4e:	db01      	blt.n	90022f54 <_malloc_r+0x1c>
90022f50:	42a9      	cmp	r1, r5
90022f52:	d905      	bls.n	90022f60 <_malloc_r+0x28>
90022f54:	230c      	movs	r3, #12
90022f56:	603b      	str	r3, [r7, #0]
90022f58:	2600      	movs	r6, #0
90022f5a:	4630      	mov	r0, r6
90022f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90022f60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90023034 <_malloc_r+0xfc>
90022f64:	f000 f868 	bl	90023038 <__malloc_lock>
90022f68:	f8d8 3000 	ldr.w	r3, [r8]
90022f6c:	461c      	mov	r4, r3
90022f6e:	bb5c      	cbnz	r4, 90022fc8 <_malloc_r+0x90>
90022f70:	4629      	mov	r1, r5
90022f72:	4638      	mov	r0, r7
90022f74:	f7ff ffc0 	bl	90022ef8 <sbrk_aligned>
90022f78:	1c43      	adds	r3, r0, #1
90022f7a:	4604      	mov	r4, r0
90022f7c:	d155      	bne.n	9002302a <_malloc_r+0xf2>
90022f7e:	f8d8 4000 	ldr.w	r4, [r8]
90022f82:	4626      	mov	r6, r4
90022f84:	2e00      	cmp	r6, #0
90022f86:	d145      	bne.n	90023014 <_malloc_r+0xdc>
90022f88:	2c00      	cmp	r4, #0
90022f8a:	d048      	beq.n	9002301e <_malloc_r+0xe6>
90022f8c:	6823      	ldr	r3, [r4, #0]
90022f8e:	4631      	mov	r1, r6
90022f90:	4638      	mov	r0, r7
90022f92:	eb04 0903 	add.w	r9, r4, r3
90022f96:	f000 faa7 	bl	900234e8 <_sbrk_r>
90022f9a:	4581      	cmp	r9, r0
90022f9c:	d13f      	bne.n	9002301e <_malloc_r+0xe6>
90022f9e:	6821      	ldr	r1, [r4, #0]
90022fa0:	1a6d      	subs	r5, r5, r1
90022fa2:	4629      	mov	r1, r5
90022fa4:	4638      	mov	r0, r7
90022fa6:	f7ff ffa7 	bl	90022ef8 <sbrk_aligned>
90022faa:	3001      	adds	r0, #1
90022fac:	d037      	beq.n	9002301e <_malloc_r+0xe6>
90022fae:	6823      	ldr	r3, [r4, #0]
90022fb0:	442b      	add	r3, r5
90022fb2:	6023      	str	r3, [r4, #0]
90022fb4:	f8d8 3000 	ldr.w	r3, [r8]
90022fb8:	2b00      	cmp	r3, #0
90022fba:	d038      	beq.n	9002302e <_malloc_r+0xf6>
90022fbc:	685a      	ldr	r2, [r3, #4]
90022fbe:	42a2      	cmp	r2, r4
90022fc0:	d12b      	bne.n	9002301a <_malloc_r+0xe2>
90022fc2:	2200      	movs	r2, #0
90022fc4:	605a      	str	r2, [r3, #4]
90022fc6:	e00f      	b.n	90022fe8 <_malloc_r+0xb0>
90022fc8:	6822      	ldr	r2, [r4, #0]
90022fca:	1b52      	subs	r2, r2, r5
90022fcc:	d41f      	bmi.n	9002300e <_malloc_r+0xd6>
90022fce:	2a0b      	cmp	r2, #11
90022fd0:	d917      	bls.n	90023002 <_malloc_r+0xca>
90022fd2:	1961      	adds	r1, r4, r5
90022fd4:	42a3      	cmp	r3, r4
90022fd6:	6025      	str	r5, [r4, #0]
90022fd8:	bf18      	it	ne
90022fda:	6059      	strne	r1, [r3, #4]
90022fdc:	6863      	ldr	r3, [r4, #4]
90022fde:	bf08      	it	eq
90022fe0:	f8c8 1000 	streq.w	r1, [r8]
90022fe4:	5162      	str	r2, [r4, r5]
90022fe6:	604b      	str	r3, [r1, #4]
90022fe8:	4638      	mov	r0, r7
90022fea:	f104 060b 	add.w	r6, r4, #11
90022fee:	f000 f829 	bl	90023044 <__malloc_unlock>
90022ff2:	f026 0607 	bic.w	r6, r6, #7
90022ff6:	1d23      	adds	r3, r4, #4
90022ff8:	1af2      	subs	r2, r6, r3
90022ffa:	d0ae      	beq.n	90022f5a <_malloc_r+0x22>
90022ffc:	1b9b      	subs	r3, r3, r6
90022ffe:	50a3      	str	r3, [r4, r2]
90023000:	e7ab      	b.n	90022f5a <_malloc_r+0x22>
90023002:	42a3      	cmp	r3, r4
90023004:	6862      	ldr	r2, [r4, #4]
90023006:	d1dd      	bne.n	90022fc4 <_malloc_r+0x8c>
90023008:	f8c8 2000 	str.w	r2, [r8]
9002300c:	e7ec      	b.n	90022fe8 <_malloc_r+0xb0>
9002300e:	4623      	mov	r3, r4
90023010:	6864      	ldr	r4, [r4, #4]
90023012:	e7ac      	b.n	90022f6e <_malloc_r+0x36>
90023014:	4634      	mov	r4, r6
90023016:	6876      	ldr	r6, [r6, #4]
90023018:	e7b4      	b.n	90022f84 <_malloc_r+0x4c>
9002301a:	4613      	mov	r3, r2
9002301c:	e7cc      	b.n	90022fb8 <_malloc_r+0x80>
9002301e:	230c      	movs	r3, #12
90023020:	603b      	str	r3, [r7, #0]
90023022:	4638      	mov	r0, r7
90023024:	f000 f80e 	bl	90023044 <__malloc_unlock>
90023028:	e797      	b.n	90022f5a <_malloc_r+0x22>
9002302a:	6025      	str	r5, [r4, #0]
9002302c:	e7dc      	b.n	90022fe8 <_malloc_r+0xb0>
9002302e:	605b      	str	r3, [r3, #4]
90023030:	deff      	udf	#255	; 0xff
90023032:	bf00      	nop
90023034:	24026360 	.word	0x24026360

90023038 <__malloc_lock>:
90023038:	4801      	ldr	r0, [pc, #4]	; (90023040 <__malloc_lock+0x8>)
9002303a:	f000 baa2 	b.w	90023582 <__retarget_lock_acquire_recursive>
9002303e:	bf00      	nop
90023040:	240264a9 	.word	0x240264a9

90023044 <__malloc_unlock>:
90023044:	4801      	ldr	r0, [pc, #4]	; (9002304c <__malloc_unlock+0x8>)
90023046:	f000 ba9d 	b.w	90023584 <__retarget_lock_release_recursive>
9002304a:	bf00      	nop
9002304c:	240264a9 	.word	0x240264a9

90023050 <__cxa_atexit>:
90023050:	b510      	push	{r4, lr}
90023052:	4c05      	ldr	r4, [pc, #20]	; (90023068 <__cxa_atexit+0x18>)
90023054:	4613      	mov	r3, r2
90023056:	b12c      	cbz	r4, 90023064 <__cxa_atexit+0x14>
90023058:	460a      	mov	r2, r1
9002305a:	4601      	mov	r1, r0
9002305c:	2002      	movs	r0, #2
9002305e:	f000 faa1 	bl	900235a4 <__register_exitproc>
90023062:	bd10      	pop	{r4, pc}
90023064:	4620      	mov	r0, r4
90023066:	e7fc      	b.n	90023062 <__cxa_atexit+0x12>
90023068:	900235a5 	.word	0x900235a5

9002306c <std>:
9002306c:	2300      	movs	r3, #0
9002306e:	b510      	push	{r4, lr}
90023070:	4604      	mov	r4, r0
90023072:	e9c0 3300 	strd	r3, r3, [r0]
90023076:	e9c0 3304 	strd	r3, r3, [r0, #16]
9002307a:	6083      	str	r3, [r0, #8]
9002307c:	8181      	strh	r1, [r0, #12]
9002307e:	6643      	str	r3, [r0, #100]	; 0x64
90023080:	81c2      	strh	r2, [r0, #14]
90023082:	6183      	str	r3, [r0, #24]
90023084:	4619      	mov	r1, r3
90023086:	2208      	movs	r2, #8
90023088:	305c      	adds	r0, #92	; 0x5c
9002308a:	f000 f99b 	bl	900233c4 <memset>
9002308e:	4b0d      	ldr	r3, [pc, #52]	; (900230c4 <std+0x58>)
90023090:	6263      	str	r3, [r4, #36]	; 0x24
90023092:	4b0d      	ldr	r3, [pc, #52]	; (900230c8 <std+0x5c>)
90023094:	62a3      	str	r3, [r4, #40]	; 0x28
90023096:	4b0d      	ldr	r3, [pc, #52]	; (900230cc <std+0x60>)
90023098:	62e3      	str	r3, [r4, #44]	; 0x2c
9002309a:	4b0d      	ldr	r3, [pc, #52]	; (900230d0 <std+0x64>)
9002309c:	6323      	str	r3, [r4, #48]	; 0x30
9002309e:	4b0d      	ldr	r3, [pc, #52]	; (900230d4 <std+0x68>)
900230a0:	6224      	str	r4, [r4, #32]
900230a2:	429c      	cmp	r4, r3
900230a4:	d006      	beq.n	900230b4 <std+0x48>
900230a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
900230aa:	4294      	cmp	r4, r2
900230ac:	d002      	beq.n	900230b4 <std+0x48>
900230ae:	33d0      	adds	r3, #208	; 0xd0
900230b0:	429c      	cmp	r4, r3
900230b2:	d105      	bne.n	900230c0 <std+0x54>
900230b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
900230b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900230bc:	f000 ba60 	b.w	90023580 <__retarget_lock_init_recursive>
900230c0:	bd10      	pop	{r4, pc}
900230c2:	bf00      	nop
900230c4:	90023215 	.word	0x90023215
900230c8:	90023237 	.word	0x90023237
900230cc:	9002326f 	.word	0x9002326f
900230d0:	90023293 	.word	0x90023293
900230d4:	24026368 	.word	0x24026368

900230d8 <stdio_exit_handler>:
900230d8:	4a02      	ldr	r2, [pc, #8]	; (900230e4 <stdio_exit_handler+0xc>)
900230da:	4903      	ldr	r1, [pc, #12]	; (900230e8 <stdio_exit_handler+0x10>)
900230dc:	4803      	ldr	r0, [pc, #12]	; (900230ec <stdio_exit_handler+0x14>)
900230de:	f000 b87b 	b.w	900231d8 <_fwalk_sglue>
900230e2:	bf00      	nop
900230e4:	240000e0 	.word	0x240000e0
900230e8:	90023dad 	.word	0x90023dad
900230ec:	240000ec 	.word	0x240000ec

900230f0 <cleanup_stdio>:
900230f0:	6841      	ldr	r1, [r0, #4]
900230f2:	4b0c      	ldr	r3, [pc, #48]	; (90023124 <cleanup_stdio+0x34>)
900230f4:	4299      	cmp	r1, r3
900230f6:	b510      	push	{r4, lr}
900230f8:	4604      	mov	r4, r0
900230fa:	d001      	beq.n	90023100 <cleanup_stdio+0x10>
900230fc:	f000 fe56 	bl	90023dac <_fflush_r>
90023100:	68a1      	ldr	r1, [r4, #8]
90023102:	4b09      	ldr	r3, [pc, #36]	; (90023128 <cleanup_stdio+0x38>)
90023104:	4299      	cmp	r1, r3
90023106:	d002      	beq.n	9002310e <cleanup_stdio+0x1e>
90023108:	4620      	mov	r0, r4
9002310a:	f000 fe4f 	bl	90023dac <_fflush_r>
9002310e:	68e1      	ldr	r1, [r4, #12]
90023110:	4b06      	ldr	r3, [pc, #24]	; (9002312c <cleanup_stdio+0x3c>)
90023112:	4299      	cmp	r1, r3
90023114:	d004      	beq.n	90023120 <cleanup_stdio+0x30>
90023116:	4620      	mov	r0, r4
90023118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002311c:	f000 be46 	b.w	90023dac <_fflush_r>
90023120:	bd10      	pop	{r4, pc}
90023122:	bf00      	nop
90023124:	24026368 	.word	0x24026368
90023128:	240263d0 	.word	0x240263d0
9002312c:	24026438 	.word	0x24026438

90023130 <global_stdio_init.part.0>:
90023130:	b510      	push	{r4, lr}
90023132:	4b0b      	ldr	r3, [pc, #44]	; (90023160 <global_stdio_init.part.0+0x30>)
90023134:	4c0b      	ldr	r4, [pc, #44]	; (90023164 <global_stdio_init.part.0+0x34>)
90023136:	4a0c      	ldr	r2, [pc, #48]	; (90023168 <global_stdio_init.part.0+0x38>)
90023138:	601a      	str	r2, [r3, #0]
9002313a:	4620      	mov	r0, r4
9002313c:	2200      	movs	r2, #0
9002313e:	2104      	movs	r1, #4
90023140:	f7ff ff94 	bl	9002306c <std>
90023144:	f104 0068 	add.w	r0, r4, #104	; 0x68
90023148:	2201      	movs	r2, #1
9002314a:	2109      	movs	r1, #9
9002314c:	f7ff ff8e 	bl	9002306c <std>
90023150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
90023154:	2202      	movs	r2, #2
90023156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002315a:	2112      	movs	r1, #18
9002315c:	f7ff bf86 	b.w	9002306c <std>
90023160:	240264a0 	.word	0x240264a0
90023164:	24026368 	.word	0x24026368
90023168:	900230d9 	.word	0x900230d9

9002316c <__sfp_lock_acquire>:
9002316c:	4801      	ldr	r0, [pc, #4]	; (90023174 <__sfp_lock_acquire+0x8>)
9002316e:	f000 ba08 	b.w	90023582 <__retarget_lock_acquire_recursive>
90023172:	bf00      	nop
90023174:	240264aa 	.word	0x240264aa

90023178 <__sfp_lock_release>:
90023178:	4801      	ldr	r0, [pc, #4]	; (90023180 <__sfp_lock_release+0x8>)
9002317a:	f000 ba03 	b.w	90023584 <__retarget_lock_release_recursive>
9002317e:	bf00      	nop
90023180:	240264aa 	.word	0x240264aa

90023184 <__sinit>:
90023184:	b510      	push	{r4, lr}
90023186:	4604      	mov	r4, r0
90023188:	f7ff fff0 	bl	9002316c <__sfp_lock_acquire>
9002318c:	6a23      	ldr	r3, [r4, #32]
9002318e:	b11b      	cbz	r3, 90023198 <__sinit+0x14>
90023190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90023194:	f7ff bff0 	b.w	90023178 <__sfp_lock_release>
90023198:	4b04      	ldr	r3, [pc, #16]	; (900231ac <__sinit+0x28>)
9002319a:	6223      	str	r3, [r4, #32]
9002319c:	4b04      	ldr	r3, [pc, #16]	; (900231b0 <__sinit+0x2c>)
9002319e:	681b      	ldr	r3, [r3, #0]
900231a0:	2b00      	cmp	r3, #0
900231a2:	d1f5      	bne.n	90023190 <__sinit+0xc>
900231a4:	f7ff ffc4 	bl	90023130 <global_stdio_init.part.0>
900231a8:	e7f2      	b.n	90023190 <__sinit+0xc>
900231aa:	bf00      	nop
900231ac:	900230f1 	.word	0x900230f1
900231b0:	240264a0 	.word	0x240264a0

900231b4 <fiprintf>:
900231b4:	b40e      	push	{r1, r2, r3}
900231b6:	b503      	push	{r0, r1, lr}
900231b8:	4601      	mov	r1, r0
900231ba:	ab03      	add	r3, sp, #12
900231bc:	4805      	ldr	r0, [pc, #20]	; (900231d4 <fiprintf+0x20>)
900231be:	f853 2b04 	ldr.w	r2, [r3], #4
900231c2:	6800      	ldr	r0, [r0, #0]
900231c4:	9301      	str	r3, [sp, #4]
900231c6:	f000 fac1 	bl	9002374c <_vfiprintf_r>
900231ca:	b002      	add	sp, #8
900231cc:	f85d eb04 	ldr.w	lr, [sp], #4
900231d0:	b003      	add	sp, #12
900231d2:	4770      	bx	lr
900231d4:	24000138 	.word	0x24000138

900231d8 <_fwalk_sglue>:
900231d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900231dc:	4607      	mov	r7, r0
900231de:	4688      	mov	r8, r1
900231e0:	4614      	mov	r4, r2
900231e2:	2600      	movs	r6, #0
900231e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900231e8:	f1b9 0901 	subs.w	r9, r9, #1
900231ec:	d505      	bpl.n	900231fa <_fwalk_sglue+0x22>
900231ee:	6824      	ldr	r4, [r4, #0]
900231f0:	2c00      	cmp	r4, #0
900231f2:	d1f7      	bne.n	900231e4 <_fwalk_sglue+0xc>
900231f4:	4630      	mov	r0, r6
900231f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900231fa:	89ab      	ldrh	r3, [r5, #12]
900231fc:	2b01      	cmp	r3, #1
900231fe:	d907      	bls.n	90023210 <_fwalk_sglue+0x38>
90023200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90023204:	3301      	adds	r3, #1
90023206:	d003      	beq.n	90023210 <_fwalk_sglue+0x38>
90023208:	4629      	mov	r1, r5
9002320a:	4638      	mov	r0, r7
9002320c:	47c0      	blx	r8
9002320e:	4306      	orrs	r6, r0
90023210:	3568      	adds	r5, #104	; 0x68
90023212:	e7e9      	b.n	900231e8 <_fwalk_sglue+0x10>

90023214 <__sread>:
90023214:	b510      	push	{r4, lr}
90023216:	460c      	mov	r4, r1
90023218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002321c:	f000 f93e 	bl	9002349c <_read_r>
90023220:	2800      	cmp	r0, #0
90023222:	bfab      	itete	ge
90023224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90023226:	89a3      	ldrhlt	r3, [r4, #12]
90023228:	181b      	addge	r3, r3, r0
9002322a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9002322e:	bfac      	ite	ge
90023230:	6563      	strge	r3, [r4, #84]	; 0x54
90023232:	81a3      	strhlt	r3, [r4, #12]
90023234:	bd10      	pop	{r4, pc}

90023236 <__swrite>:
90023236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002323a:	461f      	mov	r7, r3
9002323c:	898b      	ldrh	r3, [r1, #12]
9002323e:	05db      	lsls	r3, r3, #23
90023240:	4605      	mov	r5, r0
90023242:	460c      	mov	r4, r1
90023244:	4616      	mov	r6, r2
90023246:	d505      	bpl.n	90023254 <__swrite+0x1e>
90023248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002324c:	2302      	movs	r3, #2
9002324e:	2200      	movs	r2, #0
90023250:	f000 f912 	bl	90023478 <_lseek_r>
90023254:	89a3      	ldrh	r3, [r4, #12]
90023256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002325a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9002325e:	81a3      	strh	r3, [r4, #12]
90023260:	4632      	mov	r2, r6
90023262:	463b      	mov	r3, r7
90023264:	4628      	mov	r0, r5
90023266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9002326a:	f000 b94d 	b.w	90023508 <_write_r>

9002326e <__sseek>:
9002326e:	b510      	push	{r4, lr}
90023270:	460c      	mov	r4, r1
90023272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023276:	f000 f8ff 	bl	90023478 <_lseek_r>
9002327a:	1c43      	adds	r3, r0, #1
9002327c:	89a3      	ldrh	r3, [r4, #12]
9002327e:	bf15      	itete	ne
90023280:	6560      	strne	r0, [r4, #84]	; 0x54
90023282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90023286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9002328a:	81a3      	strheq	r3, [r4, #12]
9002328c:	bf18      	it	ne
9002328e:	81a3      	strhne	r3, [r4, #12]
90023290:	bd10      	pop	{r4, pc}

90023292 <__sclose>:
90023292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023296:	f000 b8df 	b.w	90023458 <_close_r>

9002329a <__swbuf_r>:
9002329a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002329c:	460e      	mov	r6, r1
9002329e:	4614      	mov	r4, r2
900232a0:	4605      	mov	r5, r0
900232a2:	b118      	cbz	r0, 900232ac <__swbuf_r+0x12>
900232a4:	6a03      	ldr	r3, [r0, #32]
900232a6:	b90b      	cbnz	r3, 900232ac <__swbuf_r+0x12>
900232a8:	f7ff ff6c 	bl	90023184 <__sinit>
900232ac:	69a3      	ldr	r3, [r4, #24]
900232ae:	60a3      	str	r3, [r4, #8]
900232b0:	89a3      	ldrh	r3, [r4, #12]
900232b2:	071a      	lsls	r2, r3, #28
900232b4:	d525      	bpl.n	90023302 <__swbuf_r+0x68>
900232b6:	6923      	ldr	r3, [r4, #16]
900232b8:	b31b      	cbz	r3, 90023302 <__swbuf_r+0x68>
900232ba:	6823      	ldr	r3, [r4, #0]
900232bc:	6922      	ldr	r2, [r4, #16]
900232be:	1a98      	subs	r0, r3, r2
900232c0:	6963      	ldr	r3, [r4, #20]
900232c2:	b2f6      	uxtb	r6, r6
900232c4:	4283      	cmp	r3, r0
900232c6:	4637      	mov	r7, r6
900232c8:	dc04      	bgt.n	900232d4 <__swbuf_r+0x3a>
900232ca:	4621      	mov	r1, r4
900232cc:	4628      	mov	r0, r5
900232ce:	f000 fd6d 	bl	90023dac <_fflush_r>
900232d2:	b9e0      	cbnz	r0, 9002330e <__swbuf_r+0x74>
900232d4:	68a3      	ldr	r3, [r4, #8]
900232d6:	3b01      	subs	r3, #1
900232d8:	60a3      	str	r3, [r4, #8]
900232da:	6823      	ldr	r3, [r4, #0]
900232dc:	1c5a      	adds	r2, r3, #1
900232de:	6022      	str	r2, [r4, #0]
900232e0:	701e      	strb	r6, [r3, #0]
900232e2:	6962      	ldr	r2, [r4, #20]
900232e4:	1c43      	adds	r3, r0, #1
900232e6:	429a      	cmp	r2, r3
900232e8:	d004      	beq.n	900232f4 <__swbuf_r+0x5a>
900232ea:	89a3      	ldrh	r3, [r4, #12]
900232ec:	07db      	lsls	r3, r3, #31
900232ee:	d506      	bpl.n	900232fe <__swbuf_r+0x64>
900232f0:	2e0a      	cmp	r6, #10
900232f2:	d104      	bne.n	900232fe <__swbuf_r+0x64>
900232f4:	4621      	mov	r1, r4
900232f6:	4628      	mov	r0, r5
900232f8:	f000 fd58 	bl	90023dac <_fflush_r>
900232fc:	b938      	cbnz	r0, 9002330e <__swbuf_r+0x74>
900232fe:	4638      	mov	r0, r7
90023300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90023302:	4621      	mov	r1, r4
90023304:	4628      	mov	r0, r5
90023306:	f000 f805 	bl	90023314 <__swsetup_r>
9002330a:	2800      	cmp	r0, #0
9002330c:	d0d5      	beq.n	900232ba <__swbuf_r+0x20>
9002330e:	f04f 37ff 	mov.w	r7, #4294967295
90023312:	e7f4      	b.n	900232fe <__swbuf_r+0x64>

90023314 <__swsetup_r>:
90023314:	b538      	push	{r3, r4, r5, lr}
90023316:	4b2a      	ldr	r3, [pc, #168]	; (900233c0 <__swsetup_r+0xac>)
90023318:	4605      	mov	r5, r0
9002331a:	6818      	ldr	r0, [r3, #0]
9002331c:	460c      	mov	r4, r1
9002331e:	b118      	cbz	r0, 90023328 <__swsetup_r+0x14>
90023320:	6a03      	ldr	r3, [r0, #32]
90023322:	b90b      	cbnz	r3, 90023328 <__swsetup_r+0x14>
90023324:	f7ff ff2e 	bl	90023184 <__sinit>
90023328:	89a3      	ldrh	r3, [r4, #12]
9002332a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9002332e:	0718      	lsls	r0, r3, #28
90023330:	d422      	bmi.n	90023378 <__swsetup_r+0x64>
90023332:	06d9      	lsls	r1, r3, #27
90023334:	d407      	bmi.n	90023346 <__swsetup_r+0x32>
90023336:	2309      	movs	r3, #9
90023338:	602b      	str	r3, [r5, #0]
9002333a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9002333e:	81a3      	strh	r3, [r4, #12]
90023340:	f04f 30ff 	mov.w	r0, #4294967295
90023344:	e034      	b.n	900233b0 <__swsetup_r+0x9c>
90023346:	0758      	lsls	r0, r3, #29
90023348:	d512      	bpl.n	90023370 <__swsetup_r+0x5c>
9002334a:	6b61      	ldr	r1, [r4, #52]	; 0x34
9002334c:	b141      	cbz	r1, 90023360 <__swsetup_r+0x4c>
9002334e:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023352:	4299      	cmp	r1, r3
90023354:	d002      	beq.n	9002335c <__swsetup_r+0x48>
90023356:	4628      	mov	r0, r5
90023358:	f000 f982 	bl	90023660 <_free_r>
9002335c:	2300      	movs	r3, #0
9002335e:	6363      	str	r3, [r4, #52]	; 0x34
90023360:	89a3      	ldrh	r3, [r4, #12]
90023362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90023366:	81a3      	strh	r3, [r4, #12]
90023368:	2300      	movs	r3, #0
9002336a:	6063      	str	r3, [r4, #4]
9002336c:	6923      	ldr	r3, [r4, #16]
9002336e:	6023      	str	r3, [r4, #0]
90023370:	89a3      	ldrh	r3, [r4, #12]
90023372:	f043 0308 	orr.w	r3, r3, #8
90023376:	81a3      	strh	r3, [r4, #12]
90023378:	6923      	ldr	r3, [r4, #16]
9002337a:	b94b      	cbnz	r3, 90023390 <__swsetup_r+0x7c>
9002337c:	89a3      	ldrh	r3, [r4, #12]
9002337e:	f403 7320 	and.w	r3, r3, #640	; 0x280
90023382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90023386:	d003      	beq.n	90023390 <__swsetup_r+0x7c>
90023388:	4621      	mov	r1, r4
9002338a:	4628      	mov	r0, r5
9002338c:	f000 fd5c 	bl	90023e48 <__smakebuf_r>
90023390:	89a0      	ldrh	r0, [r4, #12]
90023392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90023396:	f010 0301 	ands.w	r3, r0, #1
9002339a:	d00a      	beq.n	900233b2 <__swsetup_r+0x9e>
9002339c:	2300      	movs	r3, #0
9002339e:	60a3      	str	r3, [r4, #8]
900233a0:	6963      	ldr	r3, [r4, #20]
900233a2:	425b      	negs	r3, r3
900233a4:	61a3      	str	r3, [r4, #24]
900233a6:	6923      	ldr	r3, [r4, #16]
900233a8:	b943      	cbnz	r3, 900233bc <__swsetup_r+0xa8>
900233aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
900233ae:	d1c4      	bne.n	9002333a <__swsetup_r+0x26>
900233b0:	bd38      	pop	{r3, r4, r5, pc}
900233b2:	0781      	lsls	r1, r0, #30
900233b4:	bf58      	it	pl
900233b6:	6963      	ldrpl	r3, [r4, #20]
900233b8:	60a3      	str	r3, [r4, #8]
900233ba:	e7f4      	b.n	900233a6 <__swsetup_r+0x92>
900233bc:	2000      	movs	r0, #0
900233be:	e7f7      	b.n	900233b0 <__swsetup_r+0x9c>
900233c0:	24000138 	.word	0x24000138

900233c4 <memset>:
900233c4:	4402      	add	r2, r0
900233c6:	4603      	mov	r3, r0
900233c8:	4293      	cmp	r3, r2
900233ca:	d100      	bne.n	900233ce <memset+0xa>
900233cc:	4770      	bx	lr
900233ce:	f803 1b01 	strb.w	r1, [r3], #1
900233d2:	e7f9      	b.n	900233c8 <memset+0x4>

900233d4 <strncmp>:
900233d4:	b510      	push	{r4, lr}
900233d6:	b16a      	cbz	r2, 900233f4 <strncmp+0x20>
900233d8:	3901      	subs	r1, #1
900233da:	1884      	adds	r4, r0, r2
900233dc:	f810 2b01 	ldrb.w	r2, [r0], #1
900233e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
900233e4:	429a      	cmp	r2, r3
900233e6:	d103      	bne.n	900233f0 <strncmp+0x1c>
900233e8:	42a0      	cmp	r0, r4
900233ea:	d001      	beq.n	900233f0 <strncmp+0x1c>
900233ec:	2a00      	cmp	r2, #0
900233ee:	d1f5      	bne.n	900233dc <strncmp+0x8>
900233f0:	1ad0      	subs	r0, r2, r3
900233f2:	bd10      	pop	{r4, pc}
900233f4:	4610      	mov	r0, r2
900233f6:	e7fc      	b.n	900233f2 <strncmp+0x1e>

900233f8 <_raise_r>:
900233f8:	291f      	cmp	r1, #31
900233fa:	b538      	push	{r3, r4, r5, lr}
900233fc:	4604      	mov	r4, r0
900233fe:	460d      	mov	r5, r1
90023400:	d904      	bls.n	9002340c <_raise_r+0x14>
90023402:	2316      	movs	r3, #22
90023404:	6003      	str	r3, [r0, #0]
90023406:	f04f 30ff 	mov.w	r0, #4294967295
9002340a:	bd38      	pop	{r3, r4, r5, pc}
9002340c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
9002340e:	b112      	cbz	r2, 90023416 <_raise_r+0x1e>
90023410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90023414:	b94b      	cbnz	r3, 9002342a <_raise_r+0x32>
90023416:	4620      	mov	r0, r4
90023418:	f000 f864 	bl	900234e4 <_getpid_r>
9002341c:	462a      	mov	r2, r5
9002341e:	4601      	mov	r1, r0
90023420:	4620      	mov	r0, r4
90023422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90023426:	f000 b84b 	b.w	900234c0 <_kill_r>
9002342a:	2b01      	cmp	r3, #1
9002342c:	d00a      	beq.n	90023444 <_raise_r+0x4c>
9002342e:	1c59      	adds	r1, r3, #1
90023430:	d103      	bne.n	9002343a <_raise_r+0x42>
90023432:	2316      	movs	r3, #22
90023434:	6003      	str	r3, [r0, #0]
90023436:	2001      	movs	r0, #1
90023438:	e7e7      	b.n	9002340a <_raise_r+0x12>
9002343a:	2400      	movs	r4, #0
9002343c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90023440:	4628      	mov	r0, r5
90023442:	4798      	blx	r3
90023444:	2000      	movs	r0, #0
90023446:	e7e0      	b.n	9002340a <_raise_r+0x12>

90023448 <raise>:
90023448:	4b02      	ldr	r3, [pc, #8]	; (90023454 <raise+0xc>)
9002344a:	4601      	mov	r1, r0
9002344c:	6818      	ldr	r0, [r3, #0]
9002344e:	f7ff bfd3 	b.w	900233f8 <_raise_r>
90023452:	bf00      	nop
90023454:	24000138 	.word	0x24000138

90023458 <_close_r>:
90023458:	b538      	push	{r3, r4, r5, lr}
9002345a:	4d06      	ldr	r5, [pc, #24]	; (90023474 <_close_r+0x1c>)
9002345c:	2300      	movs	r3, #0
9002345e:	4604      	mov	r4, r0
90023460:	4608      	mov	r0, r1
90023462:	602b      	str	r3, [r5, #0]
90023464:	f7e1 fc3c 	bl	90004ce0 <_close>
90023468:	1c43      	adds	r3, r0, #1
9002346a:	d102      	bne.n	90023472 <_close_r+0x1a>
9002346c:	682b      	ldr	r3, [r5, #0]
9002346e:	b103      	cbz	r3, 90023472 <_close_r+0x1a>
90023470:	6023      	str	r3, [r4, #0]
90023472:	bd38      	pop	{r3, r4, r5, pc}
90023474:	240264a4 	.word	0x240264a4

90023478 <_lseek_r>:
90023478:	b538      	push	{r3, r4, r5, lr}
9002347a:	4d07      	ldr	r5, [pc, #28]	; (90023498 <_lseek_r+0x20>)
9002347c:	4604      	mov	r4, r0
9002347e:	4608      	mov	r0, r1
90023480:	4611      	mov	r1, r2
90023482:	2200      	movs	r2, #0
90023484:	602a      	str	r2, [r5, #0]
90023486:	461a      	mov	r2, r3
90023488:	f7e1 fc36 	bl	90004cf8 <_lseek>
9002348c:	1c43      	adds	r3, r0, #1
9002348e:	d102      	bne.n	90023496 <_lseek_r+0x1e>
90023490:	682b      	ldr	r3, [r5, #0]
90023492:	b103      	cbz	r3, 90023496 <_lseek_r+0x1e>
90023494:	6023      	str	r3, [r4, #0]
90023496:	bd38      	pop	{r3, r4, r5, pc}
90023498:	240264a4 	.word	0x240264a4

9002349c <_read_r>:
9002349c:	b538      	push	{r3, r4, r5, lr}
9002349e:	4d07      	ldr	r5, [pc, #28]	; (900234bc <_read_r+0x20>)
900234a0:	4604      	mov	r4, r0
900234a2:	4608      	mov	r0, r1
900234a4:	4611      	mov	r1, r2
900234a6:	2200      	movs	r2, #0
900234a8:	602a      	str	r2, [r5, #0]
900234aa:	461a      	mov	r2, r3
900234ac:	f7e1 fbfc 	bl	90004ca8 <_read>
900234b0:	1c43      	adds	r3, r0, #1
900234b2:	d102      	bne.n	900234ba <_read_r+0x1e>
900234b4:	682b      	ldr	r3, [r5, #0]
900234b6:	b103      	cbz	r3, 900234ba <_read_r+0x1e>
900234b8:	6023      	str	r3, [r4, #0]
900234ba:	bd38      	pop	{r3, r4, r5, pc}
900234bc:	240264a4 	.word	0x240264a4

900234c0 <_kill_r>:
900234c0:	b538      	push	{r3, r4, r5, lr}
900234c2:	4d07      	ldr	r5, [pc, #28]	; (900234e0 <_kill_r+0x20>)
900234c4:	2300      	movs	r3, #0
900234c6:	4604      	mov	r4, r0
900234c8:	4608      	mov	r0, r1
900234ca:	4611      	mov	r1, r2
900234cc:	602b      	str	r3, [r5, #0]
900234ce:	f7e1 fbdb 	bl	90004c88 <_kill>
900234d2:	1c43      	adds	r3, r0, #1
900234d4:	d102      	bne.n	900234dc <_kill_r+0x1c>
900234d6:	682b      	ldr	r3, [r5, #0]
900234d8:	b103      	cbz	r3, 900234dc <_kill_r+0x1c>
900234da:	6023      	str	r3, [r4, #0]
900234dc:	bd38      	pop	{r3, r4, r5, pc}
900234de:	bf00      	nop
900234e0:	240264a4 	.word	0x240264a4

900234e4 <_getpid_r>:
900234e4:	f7e1 bbce 	b.w	90004c84 <_getpid>

900234e8 <_sbrk_r>:
900234e8:	b538      	push	{r3, r4, r5, lr}
900234ea:	4d06      	ldr	r5, [pc, #24]	; (90023504 <_sbrk_r+0x1c>)
900234ec:	2300      	movs	r3, #0
900234ee:	4604      	mov	r4, r0
900234f0:	4608      	mov	r0, r1
900234f2:	602b      	str	r3, [r5, #0]
900234f4:	f7e1 fc02 	bl	90004cfc <_sbrk>
900234f8:	1c43      	adds	r3, r0, #1
900234fa:	d102      	bne.n	90023502 <_sbrk_r+0x1a>
900234fc:	682b      	ldr	r3, [r5, #0]
900234fe:	b103      	cbz	r3, 90023502 <_sbrk_r+0x1a>
90023500:	6023      	str	r3, [r4, #0]
90023502:	bd38      	pop	{r3, r4, r5, pc}
90023504:	240264a4 	.word	0x240264a4

90023508 <_write_r>:
90023508:	b538      	push	{r3, r4, r5, lr}
9002350a:	4d07      	ldr	r5, [pc, #28]	; (90023528 <_write_r+0x20>)
9002350c:	4604      	mov	r4, r0
9002350e:	4608      	mov	r0, r1
90023510:	4611      	mov	r1, r2
90023512:	2200      	movs	r2, #0
90023514:	602a      	str	r2, [r5, #0]
90023516:	461a      	mov	r2, r3
90023518:	f7e1 fbd4 	bl	90004cc4 <_write>
9002351c:	1c43      	adds	r3, r0, #1
9002351e:	d102      	bne.n	90023526 <_write_r+0x1e>
90023520:	682b      	ldr	r3, [r5, #0]
90023522:	b103      	cbz	r3, 90023526 <_write_r+0x1e>
90023524:	6023      	str	r3, [r4, #0]
90023526:	bd38      	pop	{r3, r4, r5, pc}
90023528:	240264a4 	.word	0x240264a4

9002352c <__errno>:
9002352c:	4b01      	ldr	r3, [pc, #4]	; (90023534 <__errno+0x8>)
9002352e:	6818      	ldr	r0, [r3, #0]
90023530:	4770      	bx	lr
90023532:	bf00      	nop
90023534:	24000138 	.word	0x24000138

90023538 <__libc_init_array>:
90023538:	b570      	push	{r4, r5, r6, lr}
9002353a:	4d0d      	ldr	r5, [pc, #52]	; (90023570 <__libc_init_array+0x38>)
9002353c:	4c0d      	ldr	r4, [pc, #52]	; (90023574 <__libc_init_array+0x3c>)
9002353e:	1b64      	subs	r4, r4, r5
90023540:	10a4      	asrs	r4, r4, #2
90023542:	2600      	movs	r6, #0
90023544:	42a6      	cmp	r6, r4
90023546:	d109      	bne.n	9002355c <__libc_init_array+0x24>
90023548:	4d0b      	ldr	r5, [pc, #44]	; (90023578 <__libc_init_array+0x40>)
9002354a:	4c0c      	ldr	r4, [pc, #48]	; (9002357c <__libc_init_array+0x44>)
9002354c:	f000 fcda 	bl	90023f04 <_init>
90023550:	1b64      	subs	r4, r4, r5
90023552:	10a4      	asrs	r4, r4, #2
90023554:	2600      	movs	r6, #0
90023556:	42a6      	cmp	r6, r4
90023558:	d105      	bne.n	90023566 <__libc_init_array+0x2e>
9002355a:	bd70      	pop	{r4, r5, r6, pc}
9002355c:	f855 3b04 	ldr.w	r3, [r5], #4
90023560:	4798      	blx	r3
90023562:	3601      	adds	r6, #1
90023564:	e7ee      	b.n	90023544 <__libc_init_array+0xc>
90023566:	f855 3b04 	ldr.w	r3, [r5], #4
9002356a:	4798      	blx	r3
9002356c:	3601      	adds	r6, #1
9002356e:	e7f2      	b.n	90023556 <__libc_init_array+0x1e>
90023570:	900272b4 	.word	0x900272b4
90023574:	900272b4 	.word	0x900272b4
90023578:	900272b4 	.word	0x900272b4
9002357c:	900272d0 	.word	0x900272d0

90023580 <__retarget_lock_init_recursive>:
90023580:	4770      	bx	lr

90023582 <__retarget_lock_acquire_recursive>:
90023582:	4770      	bx	lr

90023584 <__retarget_lock_release_recursive>:
90023584:	4770      	bx	lr

90023586 <memcpy>:
90023586:	440a      	add	r2, r1
90023588:	4291      	cmp	r1, r2
9002358a:	f100 33ff 	add.w	r3, r0, #4294967295
9002358e:	d100      	bne.n	90023592 <memcpy+0xc>
90023590:	4770      	bx	lr
90023592:	b510      	push	{r4, lr}
90023594:	f811 4b01 	ldrb.w	r4, [r1], #1
90023598:	f803 4f01 	strb.w	r4, [r3, #1]!
9002359c:	4291      	cmp	r1, r2
9002359e:	d1f9      	bne.n	90023594 <memcpy+0xe>
900235a0:	bd10      	pop	{r4, pc}
	...

900235a4 <__register_exitproc>:
900235a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900235a8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 9002365c <__register_exitproc+0xb8>
900235ac:	4606      	mov	r6, r0
900235ae:	f8d8 0000 	ldr.w	r0, [r8]
900235b2:	461f      	mov	r7, r3
900235b4:	460d      	mov	r5, r1
900235b6:	4691      	mov	r9, r2
900235b8:	f7ff ffe3 	bl	90023582 <__retarget_lock_acquire_recursive>
900235bc:	4b23      	ldr	r3, [pc, #140]	; (9002364c <__register_exitproc+0xa8>)
900235be:	681c      	ldr	r4, [r3, #0]
900235c0:	b934      	cbnz	r4, 900235d0 <__register_exitproc+0x2c>
900235c2:	4c23      	ldr	r4, [pc, #140]	; (90023650 <__register_exitproc+0xac>)
900235c4:	601c      	str	r4, [r3, #0]
900235c6:	4b23      	ldr	r3, [pc, #140]	; (90023654 <__register_exitproc+0xb0>)
900235c8:	b113      	cbz	r3, 900235d0 <__register_exitproc+0x2c>
900235ca:	681b      	ldr	r3, [r3, #0]
900235cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
900235d0:	6863      	ldr	r3, [r4, #4]
900235d2:	2b1f      	cmp	r3, #31
900235d4:	dd07      	ble.n	900235e6 <__register_exitproc+0x42>
900235d6:	f8d8 0000 	ldr.w	r0, [r8]
900235da:	f7ff ffd3 	bl	90023584 <__retarget_lock_release_recursive>
900235de:	f04f 30ff 	mov.w	r0, #4294967295
900235e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900235e6:	b32e      	cbz	r6, 90023634 <__register_exitproc+0x90>
900235e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
900235ec:	b968      	cbnz	r0, 9002360a <__register_exitproc+0x66>
900235ee:	4b1a      	ldr	r3, [pc, #104]	; (90023658 <__register_exitproc+0xb4>)
900235f0:	2b00      	cmp	r3, #0
900235f2:	d0f0      	beq.n	900235d6 <__register_exitproc+0x32>
900235f4:	f44f 7084 	mov.w	r0, #264	; 0x108
900235f8:	f7ff fc6e 	bl	90022ed8 <malloc>
900235fc:	2800      	cmp	r0, #0
900235fe:	d0ea      	beq.n	900235d6 <__register_exitproc+0x32>
90023600:	2300      	movs	r3, #0
90023602:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90023606:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
9002360a:	6863      	ldr	r3, [r4, #4]
9002360c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90023610:	2201      	movs	r2, #1
90023612:	409a      	lsls	r2, r3
90023614:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90023618:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
9002361c:	4313      	orrs	r3, r2
9002361e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90023622:	2e02      	cmp	r6, #2
90023624:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90023628:	bf02      	ittt	eq
9002362a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
9002362e:	4313      	orreq	r3, r2
90023630:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90023634:	6863      	ldr	r3, [r4, #4]
90023636:	f8d8 0000 	ldr.w	r0, [r8]
9002363a:	1c5a      	adds	r2, r3, #1
9002363c:	3302      	adds	r3, #2
9002363e:	6062      	str	r2, [r4, #4]
90023640:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90023644:	f7ff ff9e 	bl	90023584 <__retarget_lock_release_recursive>
90023648:	2000      	movs	r0, #0
9002364a:	e7ca      	b.n	900235e2 <__register_exitproc+0x3e>
9002364c:	24026538 	.word	0x24026538
90023650:	240264ac 	.word	0x240264ac
90023654:	900270c4 	.word	0x900270c4
90023658:	90022ed9 	.word	0x90022ed9
9002365c:	2400013c 	.word	0x2400013c

90023660 <_free_r>:
90023660:	b537      	push	{r0, r1, r2, r4, r5, lr}
90023662:	2900      	cmp	r1, #0
90023664:	d044      	beq.n	900236f0 <_free_r+0x90>
90023666:	f851 3c04 	ldr.w	r3, [r1, #-4]
9002366a:	9001      	str	r0, [sp, #4]
9002366c:	2b00      	cmp	r3, #0
9002366e:	f1a1 0404 	sub.w	r4, r1, #4
90023672:	bfb8      	it	lt
90023674:	18e4      	addlt	r4, r4, r3
90023676:	f7ff fcdf 	bl	90023038 <__malloc_lock>
9002367a:	4a1e      	ldr	r2, [pc, #120]	; (900236f4 <_free_r+0x94>)
9002367c:	9801      	ldr	r0, [sp, #4]
9002367e:	6813      	ldr	r3, [r2, #0]
90023680:	b933      	cbnz	r3, 90023690 <_free_r+0x30>
90023682:	6063      	str	r3, [r4, #4]
90023684:	6014      	str	r4, [r2, #0]
90023686:	b003      	add	sp, #12
90023688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9002368c:	f7ff bcda 	b.w	90023044 <__malloc_unlock>
90023690:	42a3      	cmp	r3, r4
90023692:	d908      	bls.n	900236a6 <_free_r+0x46>
90023694:	6825      	ldr	r5, [r4, #0]
90023696:	1961      	adds	r1, r4, r5
90023698:	428b      	cmp	r3, r1
9002369a:	bf01      	itttt	eq
9002369c:	6819      	ldreq	r1, [r3, #0]
9002369e:	685b      	ldreq	r3, [r3, #4]
900236a0:	1949      	addeq	r1, r1, r5
900236a2:	6021      	streq	r1, [r4, #0]
900236a4:	e7ed      	b.n	90023682 <_free_r+0x22>
900236a6:	461a      	mov	r2, r3
900236a8:	685b      	ldr	r3, [r3, #4]
900236aa:	b10b      	cbz	r3, 900236b0 <_free_r+0x50>
900236ac:	42a3      	cmp	r3, r4
900236ae:	d9fa      	bls.n	900236a6 <_free_r+0x46>
900236b0:	6811      	ldr	r1, [r2, #0]
900236b2:	1855      	adds	r5, r2, r1
900236b4:	42a5      	cmp	r5, r4
900236b6:	d10b      	bne.n	900236d0 <_free_r+0x70>
900236b8:	6824      	ldr	r4, [r4, #0]
900236ba:	4421      	add	r1, r4
900236bc:	1854      	adds	r4, r2, r1
900236be:	42a3      	cmp	r3, r4
900236c0:	6011      	str	r1, [r2, #0]
900236c2:	d1e0      	bne.n	90023686 <_free_r+0x26>
900236c4:	681c      	ldr	r4, [r3, #0]
900236c6:	685b      	ldr	r3, [r3, #4]
900236c8:	6053      	str	r3, [r2, #4]
900236ca:	440c      	add	r4, r1
900236cc:	6014      	str	r4, [r2, #0]
900236ce:	e7da      	b.n	90023686 <_free_r+0x26>
900236d0:	d902      	bls.n	900236d8 <_free_r+0x78>
900236d2:	230c      	movs	r3, #12
900236d4:	6003      	str	r3, [r0, #0]
900236d6:	e7d6      	b.n	90023686 <_free_r+0x26>
900236d8:	6825      	ldr	r5, [r4, #0]
900236da:	1961      	adds	r1, r4, r5
900236dc:	428b      	cmp	r3, r1
900236de:	bf04      	itt	eq
900236e0:	6819      	ldreq	r1, [r3, #0]
900236e2:	685b      	ldreq	r3, [r3, #4]
900236e4:	6063      	str	r3, [r4, #4]
900236e6:	bf04      	itt	eq
900236e8:	1949      	addeq	r1, r1, r5
900236ea:	6021      	streq	r1, [r4, #0]
900236ec:	6054      	str	r4, [r2, #4]
900236ee:	e7ca      	b.n	90023686 <_free_r+0x26>
900236f0:	b003      	add	sp, #12
900236f2:	bd30      	pop	{r4, r5, pc}
900236f4:	24026360 	.word	0x24026360

900236f8 <__sfputc_r>:
900236f8:	6893      	ldr	r3, [r2, #8]
900236fa:	3b01      	subs	r3, #1
900236fc:	2b00      	cmp	r3, #0
900236fe:	b410      	push	{r4}
90023700:	6093      	str	r3, [r2, #8]
90023702:	da08      	bge.n	90023716 <__sfputc_r+0x1e>
90023704:	6994      	ldr	r4, [r2, #24]
90023706:	42a3      	cmp	r3, r4
90023708:	db01      	blt.n	9002370e <__sfputc_r+0x16>
9002370a:	290a      	cmp	r1, #10
9002370c:	d103      	bne.n	90023716 <__sfputc_r+0x1e>
9002370e:	f85d 4b04 	ldr.w	r4, [sp], #4
90023712:	f7ff bdc2 	b.w	9002329a <__swbuf_r>
90023716:	6813      	ldr	r3, [r2, #0]
90023718:	1c58      	adds	r0, r3, #1
9002371a:	6010      	str	r0, [r2, #0]
9002371c:	7019      	strb	r1, [r3, #0]
9002371e:	4608      	mov	r0, r1
90023720:	f85d 4b04 	ldr.w	r4, [sp], #4
90023724:	4770      	bx	lr

90023726 <__sfputs_r>:
90023726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023728:	4606      	mov	r6, r0
9002372a:	460f      	mov	r7, r1
9002372c:	4614      	mov	r4, r2
9002372e:	18d5      	adds	r5, r2, r3
90023730:	42ac      	cmp	r4, r5
90023732:	d101      	bne.n	90023738 <__sfputs_r+0x12>
90023734:	2000      	movs	r0, #0
90023736:	e007      	b.n	90023748 <__sfputs_r+0x22>
90023738:	f814 1b01 	ldrb.w	r1, [r4], #1
9002373c:	463a      	mov	r2, r7
9002373e:	4630      	mov	r0, r6
90023740:	f7ff ffda 	bl	900236f8 <__sfputc_r>
90023744:	1c43      	adds	r3, r0, #1
90023746:	d1f3      	bne.n	90023730 <__sfputs_r+0xa>
90023748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9002374c <_vfiprintf_r>:
9002374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023750:	460d      	mov	r5, r1
90023752:	b09d      	sub	sp, #116	; 0x74
90023754:	4614      	mov	r4, r2
90023756:	4698      	mov	r8, r3
90023758:	4606      	mov	r6, r0
9002375a:	b118      	cbz	r0, 90023764 <_vfiprintf_r+0x18>
9002375c:	6a03      	ldr	r3, [r0, #32]
9002375e:	b90b      	cbnz	r3, 90023764 <_vfiprintf_r+0x18>
90023760:	f7ff fd10 	bl	90023184 <__sinit>
90023764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90023766:	07d9      	lsls	r1, r3, #31
90023768:	d405      	bmi.n	90023776 <_vfiprintf_r+0x2a>
9002376a:	89ab      	ldrh	r3, [r5, #12]
9002376c:	059a      	lsls	r2, r3, #22
9002376e:	d402      	bmi.n	90023776 <_vfiprintf_r+0x2a>
90023770:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023772:	f7ff ff06 	bl	90023582 <__retarget_lock_acquire_recursive>
90023776:	89ab      	ldrh	r3, [r5, #12]
90023778:	071b      	lsls	r3, r3, #28
9002377a:	d501      	bpl.n	90023780 <_vfiprintf_r+0x34>
9002377c:	692b      	ldr	r3, [r5, #16]
9002377e:	b99b      	cbnz	r3, 900237a8 <_vfiprintf_r+0x5c>
90023780:	4629      	mov	r1, r5
90023782:	4630      	mov	r0, r6
90023784:	f7ff fdc6 	bl	90023314 <__swsetup_r>
90023788:	b170      	cbz	r0, 900237a8 <_vfiprintf_r+0x5c>
9002378a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002378c:	07dc      	lsls	r4, r3, #31
9002378e:	d504      	bpl.n	9002379a <_vfiprintf_r+0x4e>
90023790:	f04f 30ff 	mov.w	r0, #4294967295
90023794:	b01d      	add	sp, #116	; 0x74
90023796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002379a:	89ab      	ldrh	r3, [r5, #12]
9002379c:	0598      	lsls	r0, r3, #22
9002379e:	d4f7      	bmi.n	90023790 <_vfiprintf_r+0x44>
900237a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
900237a2:	f7ff feef 	bl	90023584 <__retarget_lock_release_recursive>
900237a6:	e7f3      	b.n	90023790 <_vfiprintf_r+0x44>
900237a8:	2300      	movs	r3, #0
900237aa:	9309      	str	r3, [sp, #36]	; 0x24
900237ac:	2320      	movs	r3, #32
900237ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900237b2:	f8cd 800c 	str.w	r8, [sp, #12]
900237b6:	2330      	movs	r3, #48	; 0x30
900237b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9002396c <_vfiprintf_r+0x220>
900237bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
900237c0:	f04f 0901 	mov.w	r9, #1
900237c4:	4623      	mov	r3, r4
900237c6:	469a      	mov	sl, r3
900237c8:	f813 2b01 	ldrb.w	r2, [r3], #1
900237cc:	b10a      	cbz	r2, 900237d2 <_vfiprintf_r+0x86>
900237ce:	2a25      	cmp	r2, #37	; 0x25
900237d0:	d1f9      	bne.n	900237c6 <_vfiprintf_r+0x7a>
900237d2:	ebba 0b04 	subs.w	fp, sl, r4
900237d6:	d00b      	beq.n	900237f0 <_vfiprintf_r+0xa4>
900237d8:	465b      	mov	r3, fp
900237da:	4622      	mov	r2, r4
900237dc:	4629      	mov	r1, r5
900237de:	4630      	mov	r0, r6
900237e0:	f7ff ffa1 	bl	90023726 <__sfputs_r>
900237e4:	3001      	adds	r0, #1
900237e6:	f000 80a9 	beq.w	9002393c <_vfiprintf_r+0x1f0>
900237ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
900237ec:	445a      	add	r2, fp
900237ee:	9209      	str	r2, [sp, #36]	; 0x24
900237f0:	f89a 3000 	ldrb.w	r3, [sl]
900237f4:	2b00      	cmp	r3, #0
900237f6:	f000 80a1 	beq.w	9002393c <_vfiprintf_r+0x1f0>
900237fa:	2300      	movs	r3, #0
900237fc:	f04f 32ff 	mov.w	r2, #4294967295
90023800:	e9cd 2305 	strd	r2, r3, [sp, #20]
90023804:	f10a 0a01 	add.w	sl, sl, #1
90023808:	9304      	str	r3, [sp, #16]
9002380a:	9307      	str	r3, [sp, #28]
9002380c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90023810:	931a      	str	r3, [sp, #104]	; 0x68
90023812:	4654      	mov	r4, sl
90023814:	2205      	movs	r2, #5
90023816:	f814 1b01 	ldrb.w	r1, [r4], #1
9002381a:	4854      	ldr	r0, [pc, #336]	; (9002396c <_vfiprintf_r+0x220>)
9002381c:	f7dc fd60 	bl	900002e0 <memchr>
90023820:	9a04      	ldr	r2, [sp, #16]
90023822:	b9d8      	cbnz	r0, 9002385c <_vfiprintf_r+0x110>
90023824:	06d1      	lsls	r1, r2, #27
90023826:	bf44      	itt	mi
90023828:	2320      	movmi	r3, #32
9002382a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9002382e:	0713      	lsls	r3, r2, #28
90023830:	bf44      	itt	mi
90023832:	232b      	movmi	r3, #43	; 0x2b
90023834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90023838:	f89a 3000 	ldrb.w	r3, [sl]
9002383c:	2b2a      	cmp	r3, #42	; 0x2a
9002383e:	d015      	beq.n	9002386c <_vfiprintf_r+0x120>
90023840:	9a07      	ldr	r2, [sp, #28]
90023842:	4654      	mov	r4, sl
90023844:	2000      	movs	r0, #0
90023846:	f04f 0c0a 	mov.w	ip, #10
9002384a:	4621      	mov	r1, r4
9002384c:	f811 3b01 	ldrb.w	r3, [r1], #1
90023850:	3b30      	subs	r3, #48	; 0x30
90023852:	2b09      	cmp	r3, #9
90023854:	d94d      	bls.n	900238f2 <_vfiprintf_r+0x1a6>
90023856:	b1b0      	cbz	r0, 90023886 <_vfiprintf_r+0x13a>
90023858:	9207      	str	r2, [sp, #28]
9002385a:	e014      	b.n	90023886 <_vfiprintf_r+0x13a>
9002385c:	eba0 0308 	sub.w	r3, r0, r8
90023860:	fa09 f303 	lsl.w	r3, r9, r3
90023864:	4313      	orrs	r3, r2
90023866:	9304      	str	r3, [sp, #16]
90023868:	46a2      	mov	sl, r4
9002386a:	e7d2      	b.n	90023812 <_vfiprintf_r+0xc6>
9002386c:	9b03      	ldr	r3, [sp, #12]
9002386e:	1d19      	adds	r1, r3, #4
90023870:	681b      	ldr	r3, [r3, #0]
90023872:	9103      	str	r1, [sp, #12]
90023874:	2b00      	cmp	r3, #0
90023876:	bfbb      	ittet	lt
90023878:	425b      	neglt	r3, r3
9002387a:	f042 0202 	orrlt.w	r2, r2, #2
9002387e:	9307      	strge	r3, [sp, #28]
90023880:	9307      	strlt	r3, [sp, #28]
90023882:	bfb8      	it	lt
90023884:	9204      	strlt	r2, [sp, #16]
90023886:	7823      	ldrb	r3, [r4, #0]
90023888:	2b2e      	cmp	r3, #46	; 0x2e
9002388a:	d10c      	bne.n	900238a6 <_vfiprintf_r+0x15a>
9002388c:	7863      	ldrb	r3, [r4, #1]
9002388e:	2b2a      	cmp	r3, #42	; 0x2a
90023890:	d134      	bne.n	900238fc <_vfiprintf_r+0x1b0>
90023892:	9b03      	ldr	r3, [sp, #12]
90023894:	1d1a      	adds	r2, r3, #4
90023896:	681b      	ldr	r3, [r3, #0]
90023898:	9203      	str	r2, [sp, #12]
9002389a:	2b00      	cmp	r3, #0
9002389c:	bfb8      	it	lt
9002389e:	f04f 33ff 	movlt.w	r3, #4294967295
900238a2:	3402      	adds	r4, #2
900238a4:	9305      	str	r3, [sp, #20]
900238a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9002397c <_vfiprintf_r+0x230>
900238aa:	7821      	ldrb	r1, [r4, #0]
900238ac:	2203      	movs	r2, #3
900238ae:	4650      	mov	r0, sl
900238b0:	f7dc fd16 	bl	900002e0 <memchr>
900238b4:	b138      	cbz	r0, 900238c6 <_vfiprintf_r+0x17a>
900238b6:	9b04      	ldr	r3, [sp, #16]
900238b8:	eba0 000a 	sub.w	r0, r0, sl
900238bc:	2240      	movs	r2, #64	; 0x40
900238be:	4082      	lsls	r2, r0
900238c0:	4313      	orrs	r3, r2
900238c2:	3401      	adds	r4, #1
900238c4:	9304      	str	r3, [sp, #16]
900238c6:	f814 1b01 	ldrb.w	r1, [r4], #1
900238ca:	4829      	ldr	r0, [pc, #164]	; (90023970 <_vfiprintf_r+0x224>)
900238cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900238d0:	2206      	movs	r2, #6
900238d2:	f7dc fd05 	bl	900002e0 <memchr>
900238d6:	2800      	cmp	r0, #0
900238d8:	d03f      	beq.n	9002395a <_vfiprintf_r+0x20e>
900238da:	4b26      	ldr	r3, [pc, #152]	; (90023974 <_vfiprintf_r+0x228>)
900238dc:	bb1b      	cbnz	r3, 90023926 <_vfiprintf_r+0x1da>
900238de:	9b03      	ldr	r3, [sp, #12]
900238e0:	3307      	adds	r3, #7
900238e2:	f023 0307 	bic.w	r3, r3, #7
900238e6:	3308      	adds	r3, #8
900238e8:	9303      	str	r3, [sp, #12]
900238ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
900238ec:	443b      	add	r3, r7
900238ee:	9309      	str	r3, [sp, #36]	; 0x24
900238f0:	e768      	b.n	900237c4 <_vfiprintf_r+0x78>
900238f2:	fb0c 3202 	mla	r2, ip, r2, r3
900238f6:	460c      	mov	r4, r1
900238f8:	2001      	movs	r0, #1
900238fa:	e7a6      	b.n	9002384a <_vfiprintf_r+0xfe>
900238fc:	2300      	movs	r3, #0
900238fe:	3401      	adds	r4, #1
90023900:	9305      	str	r3, [sp, #20]
90023902:	4619      	mov	r1, r3
90023904:	f04f 0c0a 	mov.w	ip, #10
90023908:	4620      	mov	r0, r4
9002390a:	f810 2b01 	ldrb.w	r2, [r0], #1
9002390e:	3a30      	subs	r2, #48	; 0x30
90023910:	2a09      	cmp	r2, #9
90023912:	d903      	bls.n	9002391c <_vfiprintf_r+0x1d0>
90023914:	2b00      	cmp	r3, #0
90023916:	d0c6      	beq.n	900238a6 <_vfiprintf_r+0x15a>
90023918:	9105      	str	r1, [sp, #20]
9002391a:	e7c4      	b.n	900238a6 <_vfiprintf_r+0x15a>
9002391c:	fb0c 2101 	mla	r1, ip, r1, r2
90023920:	4604      	mov	r4, r0
90023922:	2301      	movs	r3, #1
90023924:	e7f0      	b.n	90023908 <_vfiprintf_r+0x1bc>
90023926:	ab03      	add	r3, sp, #12
90023928:	9300      	str	r3, [sp, #0]
9002392a:	462a      	mov	r2, r5
9002392c:	4b12      	ldr	r3, [pc, #72]	; (90023978 <_vfiprintf_r+0x22c>)
9002392e:	a904      	add	r1, sp, #16
90023930:	4630      	mov	r0, r6
90023932:	f3af 8000 	nop.w
90023936:	4607      	mov	r7, r0
90023938:	1c78      	adds	r0, r7, #1
9002393a:	d1d6      	bne.n	900238ea <_vfiprintf_r+0x19e>
9002393c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002393e:	07d9      	lsls	r1, r3, #31
90023940:	d405      	bmi.n	9002394e <_vfiprintf_r+0x202>
90023942:	89ab      	ldrh	r3, [r5, #12]
90023944:	059a      	lsls	r2, r3, #22
90023946:	d402      	bmi.n	9002394e <_vfiprintf_r+0x202>
90023948:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002394a:	f7ff fe1b 	bl	90023584 <__retarget_lock_release_recursive>
9002394e:	89ab      	ldrh	r3, [r5, #12]
90023950:	065b      	lsls	r3, r3, #25
90023952:	f53f af1d 	bmi.w	90023790 <_vfiprintf_r+0x44>
90023956:	9809      	ldr	r0, [sp, #36]	; 0x24
90023958:	e71c      	b.n	90023794 <_vfiprintf_r+0x48>
9002395a:	ab03      	add	r3, sp, #12
9002395c:	9300      	str	r3, [sp, #0]
9002395e:	462a      	mov	r2, r5
90023960:	4b05      	ldr	r3, [pc, #20]	; (90023978 <_vfiprintf_r+0x22c>)
90023962:	a904      	add	r1, sp, #16
90023964:	4630      	mov	r0, r6
90023966:	f000 f879 	bl	90023a5c <_printf_i>
9002396a:	e7e4      	b.n	90023936 <_vfiprintf_r+0x1ea>
9002396c:	900270c8 	.word	0x900270c8
90023970:	900270d2 	.word	0x900270d2
90023974:	00000000 	.word	0x00000000
90023978:	90023727 	.word	0x90023727
9002397c:	900270ce 	.word	0x900270ce

90023980 <_printf_common>:
90023980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90023984:	4616      	mov	r6, r2
90023986:	4699      	mov	r9, r3
90023988:	688a      	ldr	r2, [r1, #8]
9002398a:	690b      	ldr	r3, [r1, #16]
9002398c:	f8dd 8020 	ldr.w	r8, [sp, #32]
90023990:	4293      	cmp	r3, r2
90023992:	bfb8      	it	lt
90023994:	4613      	movlt	r3, r2
90023996:	6033      	str	r3, [r6, #0]
90023998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9002399c:	4607      	mov	r7, r0
9002399e:	460c      	mov	r4, r1
900239a0:	b10a      	cbz	r2, 900239a6 <_printf_common+0x26>
900239a2:	3301      	adds	r3, #1
900239a4:	6033      	str	r3, [r6, #0]
900239a6:	6823      	ldr	r3, [r4, #0]
900239a8:	0699      	lsls	r1, r3, #26
900239aa:	bf42      	ittt	mi
900239ac:	6833      	ldrmi	r3, [r6, #0]
900239ae:	3302      	addmi	r3, #2
900239b0:	6033      	strmi	r3, [r6, #0]
900239b2:	6825      	ldr	r5, [r4, #0]
900239b4:	f015 0506 	ands.w	r5, r5, #6
900239b8:	d106      	bne.n	900239c8 <_printf_common+0x48>
900239ba:	f104 0a19 	add.w	sl, r4, #25
900239be:	68e3      	ldr	r3, [r4, #12]
900239c0:	6832      	ldr	r2, [r6, #0]
900239c2:	1a9b      	subs	r3, r3, r2
900239c4:	42ab      	cmp	r3, r5
900239c6:	dc26      	bgt.n	90023a16 <_printf_common+0x96>
900239c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
900239cc:	1e13      	subs	r3, r2, #0
900239ce:	6822      	ldr	r2, [r4, #0]
900239d0:	bf18      	it	ne
900239d2:	2301      	movne	r3, #1
900239d4:	0692      	lsls	r2, r2, #26
900239d6:	d42b      	bmi.n	90023a30 <_printf_common+0xb0>
900239d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
900239dc:	4649      	mov	r1, r9
900239de:	4638      	mov	r0, r7
900239e0:	47c0      	blx	r8
900239e2:	3001      	adds	r0, #1
900239e4:	d01e      	beq.n	90023a24 <_printf_common+0xa4>
900239e6:	6823      	ldr	r3, [r4, #0]
900239e8:	6922      	ldr	r2, [r4, #16]
900239ea:	f003 0306 	and.w	r3, r3, #6
900239ee:	2b04      	cmp	r3, #4
900239f0:	bf02      	ittt	eq
900239f2:	68e5      	ldreq	r5, [r4, #12]
900239f4:	6833      	ldreq	r3, [r6, #0]
900239f6:	1aed      	subeq	r5, r5, r3
900239f8:	68a3      	ldr	r3, [r4, #8]
900239fa:	bf0c      	ite	eq
900239fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90023a00:	2500      	movne	r5, #0
90023a02:	4293      	cmp	r3, r2
90023a04:	bfc4      	itt	gt
90023a06:	1a9b      	subgt	r3, r3, r2
90023a08:	18ed      	addgt	r5, r5, r3
90023a0a:	2600      	movs	r6, #0
90023a0c:	341a      	adds	r4, #26
90023a0e:	42b5      	cmp	r5, r6
90023a10:	d11a      	bne.n	90023a48 <_printf_common+0xc8>
90023a12:	2000      	movs	r0, #0
90023a14:	e008      	b.n	90023a28 <_printf_common+0xa8>
90023a16:	2301      	movs	r3, #1
90023a18:	4652      	mov	r2, sl
90023a1a:	4649      	mov	r1, r9
90023a1c:	4638      	mov	r0, r7
90023a1e:	47c0      	blx	r8
90023a20:	3001      	adds	r0, #1
90023a22:	d103      	bne.n	90023a2c <_printf_common+0xac>
90023a24:	f04f 30ff 	mov.w	r0, #4294967295
90023a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023a2c:	3501      	adds	r5, #1
90023a2e:	e7c6      	b.n	900239be <_printf_common+0x3e>
90023a30:	18e1      	adds	r1, r4, r3
90023a32:	1c5a      	adds	r2, r3, #1
90023a34:	2030      	movs	r0, #48	; 0x30
90023a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90023a3a:	4422      	add	r2, r4
90023a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90023a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90023a44:	3302      	adds	r3, #2
90023a46:	e7c7      	b.n	900239d8 <_printf_common+0x58>
90023a48:	2301      	movs	r3, #1
90023a4a:	4622      	mov	r2, r4
90023a4c:	4649      	mov	r1, r9
90023a4e:	4638      	mov	r0, r7
90023a50:	47c0      	blx	r8
90023a52:	3001      	adds	r0, #1
90023a54:	d0e6      	beq.n	90023a24 <_printf_common+0xa4>
90023a56:	3601      	adds	r6, #1
90023a58:	e7d9      	b.n	90023a0e <_printf_common+0x8e>
	...

90023a5c <_printf_i>:
90023a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90023a60:	7e0f      	ldrb	r7, [r1, #24]
90023a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90023a64:	2f78      	cmp	r7, #120	; 0x78
90023a66:	4691      	mov	r9, r2
90023a68:	4680      	mov	r8, r0
90023a6a:	460c      	mov	r4, r1
90023a6c:	469a      	mov	sl, r3
90023a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
90023a72:	d807      	bhi.n	90023a84 <_printf_i+0x28>
90023a74:	2f62      	cmp	r7, #98	; 0x62
90023a76:	d80a      	bhi.n	90023a8e <_printf_i+0x32>
90023a78:	2f00      	cmp	r7, #0
90023a7a:	f000 80d4 	beq.w	90023c26 <_printf_i+0x1ca>
90023a7e:	2f58      	cmp	r7, #88	; 0x58
90023a80:	f000 80c0 	beq.w	90023c04 <_printf_i+0x1a8>
90023a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
90023a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90023a8c:	e03a      	b.n	90023b04 <_printf_i+0xa8>
90023a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90023a92:	2b15      	cmp	r3, #21
90023a94:	d8f6      	bhi.n	90023a84 <_printf_i+0x28>
90023a96:	a101      	add	r1, pc, #4	; (adr r1, 90023a9c <_printf_i+0x40>)
90023a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90023a9c:	90023af5 	.word	0x90023af5
90023aa0:	90023b09 	.word	0x90023b09
90023aa4:	90023a85 	.word	0x90023a85
90023aa8:	90023a85 	.word	0x90023a85
90023aac:	90023a85 	.word	0x90023a85
90023ab0:	90023a85 	.word	0x90023a85
90023ab4:	90023b09 	.word	0x90023b09
90023ab8:	90023a85 	.word	0x90023a85
90023abc:	90023a85 	.word	0x90023a85
90023ac0:	90023a85 	.word	0x90023a85
90023ac4:	90023a85 	.word	0x90023a85
90023ac8:	90023c0d 	.word	0x90023c0d
90023acc:	90023b35 	.word	0x90023b35
90023ad0:	90023bc7 	.word	0x90023bc7
90023ad4:	90023a85 	.word	0x90023a85
90023ad8:	90023a85 	.word	0x90023a85
90023adc:	90023c2f 	.word	0x90023c2f
90023ae0:	90023a85 	.word	0x90023a85
90023ae4:	90023b35 	.word	0x90023b35
90023ae8:	90023a85 	.word	0x90023a85
90023aec:	90023a85 	.word	0x90023a85
90023af0:	90023bcf 	.word	0x90023bcf
90023af4:	682b      	ldr	r3, [r5, #0]
90023af6:	1d1a      	adds	r2, r3, #4
90023af8:	681b      	ldr	r3, [r3, #0]
90023afa:	602a      	str	r2, [r5, #0]
90023afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
90023b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90023b04:	2301      	movs	r3, #1
90023b06:	e09f      	b.n	90023c48 <_printf_i+0x1ec>
90023b08:	6820      	ldr	r0, [r4, #0]
90023b0a:	682b      	ldr	r3, [r5, #0]
90023b0c:	0607      	lsls	r7, r0, #24
90023b0e:	f103 0104 	add.w	r1, r3, #4
90023b12:	6029      	str	r1, [r5, #0]
90023b14:	d501      	bpl.n	90023b1a <_printf_i+0xbe>
90023b16:	681e      	ldr	r6, [r3, #0]
90023b18:	e003      	b.n	90023b22 <_printf_i+0xc6>
90023b1a:	0646      	lsls	r6, r0, #25
90023b1c:	d5fb      	bpl.n	90023b16 <_printf_i+0xba>
90023b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
90023b22:	2e00      	cmp	r6, #0
90023b24:	da03      	bge.n	90023b2e <_printf_i+0xd2>
90023b26:	232d      	movs	r3, #45	; 0x2d
90023b28:	4276      	negs	r6, r6
90023b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023b2e:	485a      	ldr	r0, [pc, #360]	; (90023c98 <_printf_i+0x23c>)
90023b30:	230a      	movs	r3, #10
90023b32:	e012      	b.n	90023b5a <_printf_i+0xfe>
90023b34:	682b      	ldr	r3, [r5, #0]
90023b36:	6820      	ldr	r0, [r4, #0]
90023b38:	1d19      	adds	r1, r3, #4
90023b3a:	6029      	str	r1, [r5, #0]
90023b3c:	0605      	lsls	r5, r0, #24
90023b3e:	d501      	bpl.n	90023b44 <_printf_i+0xe8>
90023b40:	681e      	ldr	r6, [r3, #0]
90023b42:	e002      	b.n	90023b4a <_printf_i+0xee>
90023b44:	0641      	lsls	r1, r0, #25
90023b46:	d5fb      	bpl.n	90023b40 <_printf_i+0xe4>
90023b48:	881e      	ldrh	r6, [r3, #0]
90023b4a:	4853      	ldr	r0, [pc, #332]	; (90023c98 <_printf_i+0x23c>)
90023b4c:	2f6f      	cmp	r7, #111	; 0x6f
90023b4e:	bf0c      	ite	eq
90023b50:	2308      	moveq	r3, #8
90023b52:	230a      	movne	r3, #10
90023b54:	2100      	movs	r1, #0
90023b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90023b5a:	6865      	ldr	r5, [r4, #4]
90023b5c:	60a5      	str	r5, [r4, #8]
90023b5e:	2d00      	cmp	r5, #0
90023b60:	bfa2      	ittt	ge
90023b62:	6821      	ldrge	r1, [r4, #0]
90023b64:	f021 0104 	bicge.w	r1, r1, #4
90023b68:	6021      	strge	r1, [r4, #0]
90023b6a:	b90e      	cbnz	r6, 90023b70 <_printf_i+0x114>
90023b6c:	2d00      	cmp	r5, #0
90023b6e:	d04b      	beq.n	90023c08 <_printf_i+0x1ac>
90023b70:	4615      	mov	r5, r2
90023b72:	fbb6 f1f3 	udiv	r1, r6, r3
90023b76:	fb03 6711 	mls	r7, r3, r1, r6
90023b7a:	5dc7      	ldrb	r7, [r0, r7]
90023b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
90023b80:	4637      	mov	r7, r6
90023b82:	42bb      	cmp	r3, r7
90023b84:	460e      	mov	r6, r1
90023b86:	d9f4      	bls.n	90023b72 <_printf_i+0x116>
90023b88:	2b08      	cmp	r3, #8
90023b8a:	d10b      	bne.n	90023ba4 <_printf_i+0x148>
90023b8c:	6823      	ldr	r3, [r4, #0]
90023b8e:	07de      	lsls	r6, r3, #31
90023b90:	d508      	bpl.n	90023ba4 <_printf_i+0x148>
90023b92:	6923      	ldr	r3, [r4, #16]
90023b94:	6861      	ldr	r1, [r4, #4]
90023b96:	4299      	cmp	r1, r3
90023b98:	bfde      	ittt	le
90023b9a:	2330      	movle	r3, #48	; 0x30
90023b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
90023ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
90023ba4:	1b52      	subs	r2, r2, r5
90023ba6:	6122      	str	r2, [r4, #16]
90023ba8:	f8cd a000 	str.w	sl, [sp]
90023bac:	464b      	mov	r3, r9
90023bae:	aa03      	add	r2, sp, #12
90023bb0:	4621      	mov	r1, r4
90023bb2:	4640      	mov	r0, r8
90023bb4:	f7ff fee4 	bl	90023980 <_printf_common>
90023bb8:	3001      	adds	r0, #1
90023bba:	d14a      	bne.n	90023c52 <_printf_i+0x1f6>
90023bbc:	f04f 30ff 	mov.w	r0, #4294967295
90023bc0:	b004      	add	sp, #16
90023bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023bc6:	6823      	ldr	r3, [r4, #0]
90023bc8:	f043 0320 	orr.w	r3, r3, #32
90023bcc:	6023      	str	r3, [r4, #0]
90023bce:	4833      	ldr	r0, [pc, #204]	; (90023c9c <_printf_i+0x240>)
90023bd0:	2778      	movs	r7, #120	; 0x78
90023bd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90023bd6:	6823      	ldr	r3, [r4, #0]
90023bd8:	6829      	ldr	r1, [r5, #0]
90023bda:	061f      	lsls	r7, r3, #24
90023bdc:	f851 6b04 	ldr.w	r6, [r1], #4
90023be0:	d402      	bmi.n	90023be8 <_printf_i+0x18c>
90023be2:	065f      	lsls	r7, r3, #25
90023be4:	bf48      	it	mi
90023be6:	b2b6      	uxthmi	r6, r6
90023be8:	07df      	lsls	r7, r3, #31
90023bea:	bf48      	it	mi
90023bec:	f043 0320 	orrmi.w	r3, r3, #32
90023bf0:	6029      	str	r1, [r5, #0]
90023bf2:	bf48      	it	mi
90023bf4:	6023      	strmi	r3, [r4, #0]
90023bf6:	b91e      	cbnz	r6, 90023c00 <_printf_i+0x1a4>
90023bf8:	6823      	ldr	r3, [r4, #0]
90023bfa:	f023 0320 	bic.w	r3, r3, #32
90023bfe:	6023      	str	r3, [r4, #0]
90023c00:	2310      	movs	r3, #16
90023c02:	e7a7      	b.n	90023b54 <_printf_i+0xf8>
90023c04:	4824      	ldr	r0, [pc, #144]	; (90023c98 <_printf_i+0x23c>)
90023c06:	e7e4      	b.n	90023bd2 <_printf_i+0x176>
90023c08:	4615      	mov	r5, r2
90023c0a:	e7bd      	b.n	90023b88 <_printf_i+0x12c>
90023c0c:	682b      	ldr	r3, [r5, #0]
90023c0e:	6826      	ldr	r6, [r4, #0]
90023c10:	6961      	ldr	r1, [r4, #20]
90023c12:	1d18      	adds	r0, r3, #4
90023c14:	6028      	str	r0, [r5, #0]
90023c16:	0635      	lsls	r5, r6, #24
90023c18:	681b      	ldr	r3, [r3, #0]
90023c1a:	d501      	bpl.n	90023c20 <_printf_i+0x1c4>
90023c1c:	6019      	str	r1, [r3, #0]
90023c1e:	e002      	b.n	90023c26 <_printf_i+0x1ca>
90023c20:	0670      	lsls	r0, r6, #25
90023c22:	d5fb      	bpl.n	90023c1c <_printf_i+0x1c0>
90023c24:	8019      	strh	r1, [r3, #0]
90023c26:	2300      	movs	r3, #0
90023c28:	6123      	str	r3, [r4, #16]
90023c2a:	4615      	mov	r5, r2
90023c2c:	e7bc      	b.n	90023ba8 <_printf_i+0x14c>
90023c2e:	682b      	ldr	r3, [r5, #0]
90023c30:	1d1a      	adds	r2, r3, #4
90023c32:	602a      	str	r2, [r5, #0]
90023c34:	681d      	ldr	r5, [r3, #0]
90023c36:	6862      	ldr	r2, [r4, #4]
90023c38:	2100      	movs	r1, #0
90023c3a:	4628      	mov	r0, r5
90023c3c:	f7dc fb50 	bl	900002e0 <memchr>
90023c40:	b108      	cbz	r0, 90023c46 <_printf_i+0x1ea>
90023c42:	1b40      	subs	r0, r0, r5
90023c44:	6060      	str	r0, [r4, #4]
90023c46:	6863      	ldr	r3, [r4, #4]
90023c48:	6123      	str	r3, [r4, #16]
90023c4a:	2300      	movs	r3, #0
90023c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023c50:	e7aa      	b.n	90023ba8 <_printf_i+0x14c>
90023c52:	6923      	ldr	r3, [r4, #16]
90023c54:	462a      	mov	r2, r5
90023c56:	4649      	mov	r1, r9
90023c58:	4640      	mov	r0, r8
90023c5a:	47d0      	blx	sl
90023c5c:	3001      	adds	r0, #1
90023c5e:	d0ad      	beq.n	90023bbc <_printf_i+0x160>
90023c60:	6823      	ldr	r3, [r4, #0]
90023c62:	079b      	lsls	r3, r3, #30
90023c64:	d413      	bmi.n	90023c8e <_printf_i+0x232>
90023c66:	68e0      	ldr	r0, [r4, #12]
90023c68:	9b03      	ldr	r3, [sp, #12]
90023c6a:	4298      	cmp	r0, r3
90023c6c:	bfb8      	it	lt
90023c6e:	4618      	movlt	r0, r3
90023c70:	e7a6      	b.n	90023bc0 <_printf_i+0x164>
90023c72:	2301      	movs	r3, #1
90023c74:	4632      	mov	r2, r6
90023c76:	4649      	mov	r1, r9
90023c78:	4640      	mov	r0, r8
90023c7a:	47d0      	blx	sl
90023c7c:	3001      	adds	r0, #1
90023c7e:	d09d      	beq.n	90023bbc <_printf_i+0x160>
90023c80:	3501      	adds	r5, #1
90023c82:	68e3      	ldr	r3, [r4, #12]
90023c84:	9903      	ldr	r1, [sp, #12]
90023c86:	1a5b      	subs	r3, r3, r1
90023c88:	42ab      	cmp	r3, r5
90023c8a:	dcf2      	bgt.n	90023c72 <_printf_i+0x216>
90023c8c:	e7eb      	b.n	90023c66 <_printf_i+0x20a>
90023c8e:	2500      	movs	r5, #0
90023c90:	f104 0619 	add.w	r6, r4, #25
90023c94:	e7f5      	b.n	90023c82 <_printf_i+0x226>
90023c96:	bf00      	nop
90023c98:	900270d9 	.word	0x900270d9
90023c9c:	900270ea 	.word	0x900270ea

90023ca0 <__sflush_r>:
90023ca0:	898a      	ldrh	r2, [r1, #12]
90023ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023ca6:	4605      	mov	r5, r0
90023ca8:	0710      	lsls	r0, r2, #28
90023caa:	460c      	mov	r4, r1
90023cac:	d458      	bmi.n	90023d60 <__sflush_r+0xc0>
90023cae:	684b      	ldr	r3, [r1, #4]
90023cb0:	2b00      	cmp	r3, #0
90023cb2:	dc05      	bgt.n	90023cc0 <__sflush_r+0x20>
90023cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90023cb6:	2b00      	cmp	r3, #0
90023cb8:	dc02      	bgt.n	90023cc0 <__sflush_r+0x20>
90023cba:	2000      	movs	r0, #0
90023cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90023cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90023cc2:	2e00      	cmp	r6, #0
90023cc4:	d0f9      	beq.n	90023cba <__sflush_r+0x1a>
90023cc6:	2300      	movs	r3, #0
90023cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90023ccc:	682f      	ldr	r7, [r5, #0]
90023cce:	6a21      	ldr	r1, [r4, #32]
90023cd0:	602b      	str	r3, [r5, #0]
90023cd2:	d032      	beq.n	90023d3a <__sflush_r+0x9a>
90023cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
90023cd6:	89a3      	ldrh	r3, [r4, #12]
90023cd8:	075a      	lsls	r2, r3, #29
90023cda:	d505      	bpl.n	90023ce8 <__sflush_r+0x48>
90023cdc:	6863      	ldr	r3, [r4, #4]
90023cde:	1ac0      	subs	r0, r0, r3
90023ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
90023ce2:	b10b      	cbz	r3, 90023ce8 <__sflush_r+0x48>
90023ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
90023ce6:	1ac0      	subs	r0, r0, r3
90023ce8:	2300      	movs	r3, #0
90023cea:	4602      	mov	r2, r0
90023cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90023cee:	6a21      	ldr	r1, [r4, #32]
90023cf0:	4628      	mov	r0, r5
90023cf2:	47b0      	blx	r6
90023cf4:	1c43      	adds	r3, r0, #1
90023cf6:	89a3      	ldrh	r3, [r4, #12]
90023cf8:	d106      	bne.n	90023d08 <__sflush_r+0x68>
90023cfa:	6829      	ldr	r1, [r5, #0]
90023cfc:	291d      	cmp	r1, #29
90023cfe:	d82b      	bhi.n	90023d58 <__sflush_r+0xb8>
90023d00:	4a29      	ldr	r2, [pc, #164]	; (90023da8 <__sflush_r+0x108>)
90023d02:	410a      	asrs	r2, r1
90023d04:	07d6      	lsls	r6, r2, #31
90023d06:	d427      	bmi.n	90023d58 <__sflush_r+0xb8>
90023d08:	2200      	movs	r2, #0
90023d0a:	6062      	str	r2, [r4, #4]
90023d0c:	04d9      	lsls	r1, r3, #19
90023d0e:	6922      	ldr	r2, [r4, #16]
90023d10:	6022      	str	r2, [r4, #0]
90023d12:	d504      	bpl.n	90023d1e <__sflush_r+0x7e>
90023d14:	1c42      	adds	r2, r0, #1
90023d16:	d101      	bne.n	90023d1c <__sflush_r+0x7c>
90023d18:	682b      	ldr	r3, [r5, #0]
90023d1a:	b903      	cbnz	r3, 90023d1e <__sflush_r+0x7e>
90023d1c:	6560      	str	r0, [r4, #84]	; 0x54
90023d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90023d20:	602f      	str	r7, [r5, #0]
90023d22:	2900      	cmp	r1, #0
90023d24:	d0c9      	beq.n	90023cba <__sflush_r+0x1a>
90023d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023d2a:	4299      	cmp	r1, r3
90023d2c:	d002      	beq.n	90023d34 <__sflush_r+0x94>
90023d2e:	4628      	mov	r0, r5
90023d30:	f7ff fc96 	bl	90023660 <_free_r>
90023d34:	2000      	movs	r0, #0
90023d36:	6360      	str	r0, [r4, #52]	; 0x34
90023d38:	e7c0      	b.n	90023cbc <__sflush_r+0x1c>
90023d3a:	2301      	movs	r3, #1
90023d3c:	4628      	mov	r0, r5
90023d3e:	47b0      	blx	r6
90023d40:	1c41      	adds	r1, r0, #1
90023d42:	d1c8      	bne.n	90023cd6 <__sflush_r+0x36>
90023d44:	682b      	ldr	r3, [r5, #0]
90023d46:	2b00      	cmp	r3, #0
90023d48:	d0c5      	beq.n	90023cd6 <__sflush_r+0x36>
90023d4a:	2b1d      	cmp	r3, #29
90023d4c:	d001      	beq.n	90023d52 <__sflush_r+0xb2>
90023d4e:	2b16      	cmp	r3, #22
90023d50:	d101      	bne.n	90023d56 <__sflush_r+0xb6>
90023d52:	602f      	str	r7, [r5, #0]
90023d54:	e7b1      	b.n	90023cba <__sflush_r+0x1a>
90023d56:	89a3      	ldrh	r3, [r4, #12]
90023d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90023d5c:	81a3      	strh	r3, [r4, #12]
90023d5e:	e7ad      	b.n	90023cbc <__sflush_r+0x1c>
90023d60:	690f      	ldr	r7, [r1, #16]
90023d62:	2f00      	cmp	r7, #0
90023d64:	d0a9      	beq.n	90023cba <__sflush_r+0x1a>
90023d66:	0793      	lsls	r3, r2, #30
90023d68:	680e      	ldr	r6, [r1, #0]
90023d6a:	bf08      	it	eq
90023d6c:	694b      	ldreq	r3, [r1, #20]
90023d6e:	600f      	str	r7, [r1, #0]
90023d70:	bf18      	it	ne
90023d72:	2300      	movne	r3, #0
90023d74:	eba6 0807 	sub.w	r8, r6, r7
90023d78:	608b      	str	r3, [r1, #8]
90023d7a:	f1b8 0f00 	cmp.w	r8, #0
90023d7e:	dd9c      	ble.n	90023cba <__sflush_r+0x1a>
90023d80:	6a21      	ldr	r1, [r4, #32]
90023d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90023d84:	4643      	mov	r3, r8
90023d86:	463a      	mov	r2, r7
90023d88:	4628      	mov	r0, r5
90023d8a:	47b0      	blx	r6
90023d8c:	2800      	cmp	r0, #0
90023d8e:	dc06      	bgt.n	90023d9e <__sflush_r+0xfe>
90023d90:	89a3      	ldrh	r3, [r4, #12]
90023d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90023d96:	81a3      	strh	r3, [r4, #12]
90023d98:	f04f 30ff 	mov.w	r0, #4294967295
90023d9c:	e78e      	b.n	90023cbc <__sflush_r+0x1c>
90023d9e:	4407      	add	r7, r0
90023da0:	eba8 0800 	sub.w	r8, r8, r0
90023da4:	e7e9      	b.n	90023d7a <__sflush_r+0xda>
90023da6:	bf00      	nop
90023da8:	dfbffffe 	.word	0xdfbffffe

90023dac <_fflush_r>:
90023dac:	b538      	push	{r3, r4, r5, lr}
90023dae:	690b      	ldr	r3, [r1, #16]
90023db0:	4605      	mov	r5, r0
90023db2:	460c      	mov	r4, r1
90023db4:	b913      	cbnz	r3, 90023dbc <_fflush_r+0x10>
90023db6:	2500      	movs	r5, #0
90023db8:	4628      	mov	r0, r5
90023dba:	bd38      	pop	{r3, r4, r5, pc}
90023dbc:	b118      	cbz	r0, 90023dc6 <_fflush_r+0x1a>
90023dbe:	6a03      	ldr	r3, [r0, #32]
90023dc0:	b90b      	cbnz	r3, 90023dc6 <_fflush_r+0x1a>
90023dc2:	f7ff f9df 	bl	90023184 <__sinit>
90023dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023dca:	2b00      	cmp	r3, #0
90023dcc:	d0f3      	beq.n	90023db6 <_fflush_r+0xa>
90023dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
90023dd0:	07d0      	lsls	r0, r2, #31
90023dd2:	d404      	bmi.n	90023dde <_fflush_r+0x32>
90023dd4:	0599      	lsls	r1, r3, #22
90023dd6:	d402      	bmi.n	90023dde <_fflush_r+0x32>
90023dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023dda:	f7ff fbd2 	bl	90023582 <__retarget_lock_acquire_recursive>
90023dde:	4628      	mov	r0, r5
90023de0:	4621      	mov	r1, r4
90023de2:	f7ff ff5d 	bl	90023ca0 <__sflush_r>
90023de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
90023de8:	07da      	lsls	r2, r3, #31
90023dea:	4605      	mov	r5, r0
90023dec:	d4e4      	bmi.n	90023db8 <_fflush_r+0xc>
90023dee:	89a3      	ldrh	r3, [r4, #12]
90023df0:	059b      	lsls	r3, r3, #22
90023df2:	d4e1      	bmi.n	90023db8 <_fflush_r+0xc>
90023df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023df6:	f7ff fbc5 	bl	90023584 <__retarget_lock_release_recursive>
90023dfa:	e7dd      	b.n	90023db8 <_fflush_r+0xc>

90023dfc <__swhatbuf_r>:
90023dfc:	b570      	push	{r4, r5, r6, lr}
90023dfe:	460c      	mov	r4, r1
90023e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023e04:	2900      	cmp	r1, #0
90023e06:	b096      	sub	sp, #88	; 0x58
90023e08:	4615      	mov	r5, r2
90023e0a:	461e      	mov	r6, r3
90023e0c:	da0d      	bge.n	90023e2a <__swhatbuf_r+0x2e>
90023e0e:	89a3      	ldrh	r3, [r4, #12]
90023e10:	f013 0f80 	tst.w	r3, #128	; 0x80
90023e14:	f04f 0100 	mov.w	r1, #0
90023e18:	bf0c      	ite	eq
90023e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
90023e1e:	2340      	movne	r3, #64	; 0x40
90023e20:	2000      	movs	r0, #0
90023e22:	6031      	str	r1, [r6, #0]
90023e24:	602b      	str	r3, [r5, #0]
90023e26:	b016      	add	sp, #88	; 0x58
90023e28:	bd70      	pop	{r4, r5, r6, pc}
90023e2a:	466a      	mov	r2, sp
90023e2c:	f000 f848 	bl	90023ec0 <_fstat_r>
90023e30:	2800      	cmp	r0, #0
90023e32:	dbec      	blt.n	90023e0e <__swhatbuf_r+0x12>
90023e34:	9901      	ldr	r1, [sp, #4]
90023e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
90023e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
90023e3e:	4259      	negs	r1, r3
90023e40:	4159      	adcs	r1, r3
90023e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
90023e46:	e7eb      	b.n	90023e20 <__swhatbuf_r+0x24>

90023e48 <__smakebuf_r>:
90023e48:	898b      	ldrh	r3, [r1, #12]
90023e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
90023e4c:	079d      	lsls	r5, r3, #30
90023e4e:	4606      	mov	r6, r0
90023e50:	460c      	mov	r4, r1
90023e52:	d507      	bpl.n	90023e64 <__smakebuf_r+0x1c>
90023e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
90023e58:	6023      	str	r3, [r4, #0]
90023e5a:	6123      	str	r3, [r4, #16]
90023e5c:	2301      	movs	r3, #1
90023e5e:	6163      	str	r3, [r4, #20]
90023e60:	b002      	add	sp, #8
90023e62:	bd70      	pop	{r4, r5, r6, pc}
90023e64:	ab01      	add	r3, sp, #4
90023e66:	466a      	mov	r2, sp
90023e68:	f7ff ffc8 	bl	90023dfc <__swhatbuf_r>
90023e6c:	9900      	ldr	r1, [sp, #0]
90023e6e:	4605      	mov	r5, r0
90023e70:	4630      	mov	r0, r6
90023e72:	f7ff f861 	bl	90022f38 <_malloc_r>
90023e76:	b948      	cbnz	r0, 90023e8c <__smakebuf_r+0x44>
90023e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023e7c:	059a      	lsls	r2, r3, #22
90023e7e:	d4ef      	bmi.n	90023e60 <__smakebuf_r+0x18>
90023e80:	f023 0303 	bic.w	r3, r3, #3
90023e84:	f043 0302 	orr.w	r3, r3, #2
90023e88:	81a3      	strh	r3, [r4, #12]
90023e8a:	e7e3      	b.n	90023e54 <__smakebuf_r+0xc>
90023e8c:	89a3      	ldrh	r3, [r4, #12]
90023e8e:	6020      	str	r0, [r4, #0]
90023e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90023e94:	81a3      	strh	r3, [r4, #12]
90023e96:	9b00      	ldr	r3, [sp, #0]
90023e98:	6163      	str	r3, [r4, #20]
90023e9a:	9b01      	ldr	r3, [sp, #4]
90023e9c:	6120      	str	r0, [r4, #16]
90023e9e:	b15b      	cbz	r3, 90023eb8 <__smakebuf_r+0x70>
90023ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023ea4:	4630      	mov	r0, r6
90023ea6:	f000 f81d 	bl	90023ee4 <_isatty_r>
90023eaa:	b128      	cbz	r0, 90023eb8 <__smakebuf_r+0x70>
90023eac:	89a3      	ldrh	r3, [r4, #12]
90023eae:	f023 0303 	bic.w	r3, r3, #3
90023eb2:	f043 0301 	orr.w	r3, r3, #1
90023eb6:	81a3      	strh	r3, [r4, #12]
90023eb8:	89a3      	ldrh	r3, [r4, #12]
90023eba:	431d      	orrs	r5, r3
90023ebc:	81a5      	strh	r5, [r4, #12]
90023ebe:	e7cf      	b.n	90023e60 <__smakebuf_r+0x18>

90023ec0 <_fstat_r>:
90023ec0:	b538      	push	{r3, r4, r5, lr}
90023ec2:	4d07      	ldr	r5, [pc, #28]	; (90023ee0 <_fstat_r+0x20>)
90023ec4:	2300      	movs	r3, #0
90023ec6:	4604      	mov	r4, r0
90023ec8:	4608      	mov	r0, r1
90023eca:	4611      	mov	r1, r2
90023ecc:	602b      	str	r3, [r5, #0]
90023ece:	f7e0 ff0b 	bl	90004ce8 <_fstat>
90023ed2:	1c43      	adds	r3, r0, #1
90023ed4:	d102      	bne.n	90023edc <_fstat_r+0x1c>
90023ed6:	682b      	ldr	r3, [r5, #0]
90023ed8:	b103      	cbz	r3, 90023edc <_fstat_r+0x1c>
90023eda:	6023      	str	r3, [r4, #0]
90023edc:	bd38      	pop	{r3, r4, r5, pc}
90023ede:	bf00      	nop
90023ee0:	240264a4 	.word	0x240264a4

90023ee4 <_isatty_r>:
90023ee4:	b538      	push	{r3, r4, r5, lr}
90023ee6:	4d06      	ldr	r5, [pc, #24]	; (90023f00 <_isatty_r+0x1c>)
90023ee8:	2300      	movs	r3, #0
90023eea:	4604      	mov	r4, r0
90023eec:	4608      	mov	r0, r1
90023eee:	602b      	str	r3, [r5, #0]
90023ef0:	f7e0 ff00 	bl	90004cf4 <_isatty>
90023ef4:	1c43      	adds	r3, r0, #1
90023ef6:	d102      	bne.n	90023efe <_isatty_r+0x1a>
90023ef8:	682b      	ldr	r3, [r5, #0]
90023efa:	b103      	cbz	r3, 90023efe <_isatty_r+0x1a>
90023efc:	6023      	str	r3, [r4, #0]
90023efe:	bd38      	pop	{r3, r4, r5, pc}
90023f00:	240264a4 	.word	0x240264a4

90023f04 <_init>:
90023f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023f06:	bf00      	nop
90023f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023f0a:	bc08      	pop	{r3}
90023f0c:	469e      	mov	lr, r3
90023f0e:	4770      	bx	lr

90023f10 <_fini>:
90023f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023f12:	bf00      	nop
90023f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023f16:	bc08      	pop	{r3}
90023f18:	469e      	mov	lr, r3
90023f1a:	4770      	bx	lr
