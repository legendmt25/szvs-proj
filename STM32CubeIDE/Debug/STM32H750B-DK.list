
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00028514  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000408c  900287b4  900287b4  000487b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  9002c840  9002c840  0004c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002c9f8  9002c9f8  003e1264  2**0
                  CONTENTS
  6 .ARM          00000000  9002c9f8  9002c9f8  003e1264  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002c9f8  9002c9f8  003e1264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002c9f8  9002c9f8  0004c9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002ca14  9002ca14  0004ca14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000140  24000000  9002ca1c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000140  9002cb5c  00050140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00022a94  24005b40  9003255c  00055b40  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  240285d4  9003255c  000585d4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  003e1264  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002198  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000cc  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0037f000  90202264  90202264  00062264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  003f0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  003f0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  003e1292  2**0
                  CONTENTS, READONLY
 21 .debug_line   0007cb50  00000000  00000000  003e1354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0045dea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000fe166  00000000  00000000  0045df0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00018445  00000000  00000000  0055c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003638  00000000  00000000  005744c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    001a2d72  00000000  00000000  00577af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00007df0  00000000  00000000  0071a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  0004a07b  00000000  00000000  0072265a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000b274  00000000  00000000  0076c6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0003dae1  00000000  00000000  0077794c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b40 	.word	0x24005b40
900002bc:	00000000 	.word	0x00000000
900002c0:	9002879c 	.word	0x9002879c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b44 	.word	0x24005b44
900002dc:	9002879c 	.word	0x9002879c

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr
	...

90000300 <memchr>:
90000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000304:	2a10      	cmp	r2, #16
90000306:	db2b      	blt.n	90000360 <memchr+0x60>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	d008      	beq.n	90000320 <memchr+0x20>
9000030e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000312:	3a01      	subs	r2, #1
90000314:	428b      	cmp	r3, r1
90000316:	d02d      	beq.n	90000374 <memchr+0x74>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	b342      	cbz	r2, 90000370 <memchr+0x70>
9000031e:	d1f6      	bne.n	9000030e <memchr+0xe>
90000320:	b4f0      	push	{r4, r5, r6, r7}
90000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000032a:	f022 0407 	bic.w	r4, r2, #7
9000032e:	f07f 0700 	mvns.w	r7, #0
90000332:	2300      	movs	r3, #0
90000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000338:	3c08      	subs	r4, #8
9000033a:	ea85 0501 	eor.w	r5, r5, r1
9000033e:	ea86 0601 	eor.w	r6, r6, r1
90000342:	fa85 f547 	uadd8	r5, r5, r7
90000346:	faa3 f587 	sel	r5, r3, r7
9000034a:	fa86 f647 	uadd8	r6, r6, r7
9000034e:	faa5 f687 	sel	r6, r5, r7
90000352:	b98e      	cbnz	r6, 90000378 <memchr+0x78>
90000354:	d1ee      	bne.n	90000334 <memchr+0x34>
90000356:	bcf0      	pop	{r4, r5, r6, r7}
90000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000035c:	f002 0207 	and.w	r2, r2, #7
90000360:	b132      	cbz	r2, 90000370 <memchr+0x70>
90000362:	f810 3b01 	ldrb.w	r3, [r0], #1
90000366:	3a01      	subs	r2, #1
90000368:	ea83 0301 	eor.w	r3, r3, r1
9000036c:	b113      	cbz	r3, 90000374 <memchr+0x74>
9000036e:	d1f8      	bne.n	90000362 <memchr+0x62>
90000370:	2000      	movs	r0, #0
90000372:	4770      	bx	lr
90000374:	3801      	subs	r0, #1
90000376:	4770      	bx	lr
90000378:	2d00      	cmp	r5, #0
9000037a:	bf06      	itte	eq
9000037c:	4635      	moveq	r5, r6
9000037e:	3803      	subeq	r0, #3
90000380:	3807      	subne	r0, #7
90000382:	f015 0f01 	tst.w	r5, #1
90000386:	d107      	bne.n	90000398 <memchr+0x98>
90000388:	3001      	adds	r0, #1
9000038a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000038e:	bf02      	ittt	eq
90000390:	3001      	addeq	r0, #1
90000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000396:	3001      	addeq	r0, #1
90000398:	bcf0      	pop	{r4, r5, r6, r7}
9000039a:	3801      	subs	r0, #1
9000039c:	4770      	bx	lr
9000039e:	bf00      	nop

900003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900003a6:	e003      	b.n	900003b0 <LoopCopyDataInit>

900003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900003a8:	4b0c      	ldr	r3, [pc, #48]	; (900003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900003ae:	3104      	adds	r1, #4

900003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900003b0:	480b      	ldr	r0, [pc, #44]	; (900003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900003b2:	4b0c      	ldr	r3, [pc, #48]	; (900003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900003b8:	d3f6      	bcc.n	900003a8 <CopyDataInit>
  ldr  r2, =_sbss
900003ba:	4a0b      	ldr	r2, [pc, #44]	; (900003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900003bc:	e002      	b.n	900003c4 <LoopFillZerobss>

900003be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003c0:	f842 3b04 	str.w	r3, [r2], #4

900003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003c4:	4b09      	ldr	r3, [pc, #36]	; (900003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003c8:	d3f9      	bcc.n	900003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003ca:	f009 fa7b 	bl	900098c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ce:	f027 fcff 	bl	90027dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003d2:	f003 ff9f 	bl	90004314 <main>
  bx  lr    
900003d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003d8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003dc:	9002ca1c 	.word	0x9002ca1c
  ldr  r0, =_sdata
900003e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003e4:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
900003e8:	24005b40 	.word	0x24005b40
  ldr  r3, = _ebss
900003ec:	240285d4 	.word	0x240285d4

900003f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003f0:	e7fe      	b.n	900003f0 <ADC3_IRQHandler>
	...

900003f4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003f4:	4770      	bx	lr
900003f6:	bf00      	nop

900003f8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003f8:	4770      	bx	lr
900003fa:	bf00      	nop

900003fc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003fc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003fe:	f001 ff25 	bl	9000224c <touchgfx_components_init>
  touchgfx_init();
}
90000402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
90000406:	f001 bea7 	b.w	90002158 <touchgfx_init>
9000040a:	bf00      	nop

9000040c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
9000040c:	f001 bf20 	b.w	90002250 <touchgfx_taskEntry>

90000410 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000410:	6840      	ldr	r0, [r0, #4]
    }
90000412:	4770      	bx	lr

90000414 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
90000414:	6041      	str	r1, [r0, #4]
    }
90000416:	4770      	bx	lr

90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000418:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000041c:	4b08      	ldr	r3, [pc, #32]	; (90000440 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
9000041e:	4a09      	ldr	r2, [pc, #36]	; (90000444 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000420:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000424:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000428:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000042c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000430:	430a      	orrs	r2, r1
90000432:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000436:	681a      	ldr	r2, [r3, #0]
90000438:	f042 0201 	orr.w	r2, r2, #1
9000043c:	601a      	str	r2, [r3, #0]
}
9000043e:	4770      	bx	lr
90000440:	e0001000 	.word	0xe0001000
90000444:	c5acce55 	.word	0xc5acce55

90000448 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000448:	1a51      	subs	r1, r2, r1
9000044a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000044e:	fbb1 f0f3 	udiv	r0, r1, r3
90000452:	4770      	bx	lr

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000454:	4b01      	ldr	r3, [pc, #4]	; (9000045c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000456:	6858      	ldr	r0, [r3, #4]
}
90000458:	4770      	bx	lr
9000045a:	bf00      	nop
9000045c:	e0001000 	.word	0xe0001000

90000460 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000460:	4770      	bx	lr
90000462:	bf00      	nop

90000464 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000464:	b510      	push	{r4, lr}
90000466:	4604      	mov	r4, r0
90000468:	210c      	movs	r1, #12
9000046a:	f027 f914 	bl	90027696 <_ZdlPvj>
9000046e:	4620      	mov	r0, r4
90000470:	bd10      	pop	{r4, pc}
90000472:	bf00      	nop

90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000474:	6803      	ldr	r3, [r0, #0]
90000476:	4a0c      	ldr	r2, [pc, #48]	; (900004a8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000478:	691b      	ldr	r3, [r3, #16]
{
9000047a:	b510      	push	{r4, lr}
9000047c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000047e:	b149      	cbz	r1, 90000494 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4293      	cmp	r3, r2
90000482:	d10d      	bne.n	900004a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000484:	4b09      	ldr	r3, [pc, #36]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000486:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000488:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000048a:	6863      	ldr	r3, [r4, #4]
9000048c:	1a9b      	subs	r3, r3, r2
9000048e:	4403      	add	r3, r0
90000490:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000492:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000494:	4293      	cmp	r3, r2
90000496:	d105      	bne.n	900004a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000498:	4b04      	ldr	r3, [pc, #16]	; (900004ac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000049a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000049c:	60a0      	str	r0, [r4, #8]
}
9000049e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
900004a0:	4798      	blx	r3
900004a2:	e7f1      	b.n	90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
900004a4:	4798      	blx	r3
900004a6:	e7f9      	b.n	9000049c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
900004a8:	90000455 	.word	0x90000455
900004ac:	e0001000 	.word	0xe0001000

900004b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
900004b0:	4770      	bx	lr
900004b2:	bf00      	nop
900004b4:	0000      	movs	r0, r0
	...

900004b8 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900004b8:	b500      	push	{lr}
900004ba:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900004bc:	2208      	movs	r2, #8
900004be:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004c0:	2000      	movs	r0, #0
900004c2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004e0 <_ZN20STM32TouchController4initEv+0x28>
900004c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004cc:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004d0:	f009 f906 	bl	900096e0 <BSP_TS_Init>
}
900004d4:	b005      	add	sp, #20
900004d6:	f85d fb04 	ldr.w	pc, [sp], #4
900004da:	bf00      	nop
900004dc:	f3af 8000 	nop.w
900004e0:	000001e0 	.word	0x000001e0
900004e4:	00000110 	.word	0x00000110

900004e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004e8:	b530      	push	{r4, r5, lr}
900004ea:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004ec:	2000      	movs	r0, #0
{
900004ee:	460d      	mov	r5, r1
900004f0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004f2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004f4:	9001      	str	r0, [sp, #4]
900004f6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004fa:	f009 f97f 	bl	900097fc <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004fe:	9801      	ldr	r0, [sp, #4]
90000500:	b120      	cbz	r0, 9000050c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
90000502:	2001      	movs	r0, #1
        y = TS_State.TouchY;
90000504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
90000508:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
9000050a:	6023      	str	r3, [r4, #0]
    }

    return false;
}
9000050c:	b005      	add	sp, #20
9000050e:	bd30      	pop	{r4, r5, pc}

90000510 <_ZN20STM32TouchControllerD0Ev>:
90000510:	b510      	push	{r4, lr}
90000512:	4604      	mov	r4, r0
90000514:	2104      	movs	r1, #4
90000516:	f027 f8be 	bl	90027696 <_ZdlPvj>
9000051a:	4620      	mov	r0, r4
9000051c:	bd10      	pop	{r4, pc}
9000051e:	bf00      	nop

90000520 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000520:	2108      	movs	r1, #8
90000522:	4810      	ldr	r0, [pc, #64]	; (90000564 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000524:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000526:	f009 fee1 	bl	9000a2ec <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b0e      	ldr	r3, [pc, #56]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000532:	2180      	movs	r1, #128	; 0x80
90000534:	480d      	ldr	r0, [pc, #52]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000536:	f009 fed9 	bl	9000a2ec <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b0a      	ldr	r3, [pc, #40]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000542:	2140      	movs	r1, #64	; 0x40
90000544:	4809      	ldr	r0, [pc, #36]	; (9000056c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000546:	f009 fed1 	bl	9000a2ec <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000054a:	2801      	cmp	r0, #1
9000054c:	d101      	bne.n	90000552 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000054e:	4b06      	ldr	r3, [pc, #24]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000550:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000552:	2140      	movs	r1, #64	; 0x40
90000554:	4806      	ldr	r0, [pc, #24]	; (90000570 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000556:	f009 fec9 	bl	9000a2ec <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000055a:	2801      	cmp	r0, #1
9000055c:	d101      	bne.n	90000562 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000055e:	4b02      	ldr	r3, [pc, #8]	; (90000568 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000560:	60d8      	str	r0, [r3, #12]
}
90000562:	bd08      	pop	{r3, pc}
90000564:	58021800 	.word	0x58021800
90000568:	24005b5c 	.word	0x24005b5c
9000056c:	58020400 	.word	0x58020400
90000570:	58020000 	.word	0x58020000

90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000574:	2803      	cmp	r0, #3
90000576:	d827      	bhi.n	900005c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000578:	e8df f000 	tbb	[pc, r0]
9000057c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000580:	4b12      	ldr	r3, [pc, #72]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000582:	2140      	movs	r1, #64	; 0x40
90000584:	4812      	ldr	r0, [pc, #72]	; (900005d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000586:	68da      	ldr	r2, [r3, #12]
90000588:	fab2 f282 	clz	r2, r2
9000058c:	0952      	lsrs	r2, r2, #5
9000058e:	f009 beb3 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000592:	4b0e      	ldr	r3, [pc, #56]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000594:	2140      	movs	r1, #64	; 0x40
90000596:	480f      	ldr	r0, [pc, #60]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000598:	689a      	ldr	r2, [r3, #8]
9000059a:	fab2 f282 	clz	r2, r2
9000059e:	0952      	lsrs	r2, r2, #5
900005a0:	f009 beaa 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
900005a4:	4b09      	ldr	r3, [pc, #36]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005a6:	2180      	movs	r1, #128	; 0x80
900005a8:	480a      	ldr	r0, [pc, #40]	; (900005d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
900005aa:	685a      	ldr	r2, [r3, #4]
900005ac:	fab2 f282 	clz	r2, r2
900005b0:	0952      	lsrs	r2, r2, #5
900005b2:	f009 bea1 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
900005b6:	4b05      	ldr	r3, [pc, #20]	; (900005cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
900005b8:	2108      	movs	r1, #8
900005ba:	4807      	ldr	r0, [pc, #28]	; (900005d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
900005bc:	681a      	ldr	r2, [r3, #0]
900005be:	fab2 f282 	clz	r2, r2
900005c2:	0952      	lsrs	r2, r2, #5
900005c4:	f009 be98 	b.w	9000a2f8 <HAL_GPIO_WritePin>
}
900005c8:	4770      	bx	lr
900005ca:	bf00      	nop
900005cc:	24005b5c 	.word	0x24005b5c
900005d0:	58020000 	.word	0x58020000
900005d4:	58020400 	.word	0x58020400
900005d8:	58021800 	.word	0x58021800

900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005dc:	2803      	cmp	r0, #3
900005de:	d827      	bhi.n	90000630 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005e0:	e8df f000 	tbb	[pc, r0]
900005e4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005e8:	4b12      	ldr	r3, [pc, #72]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ea:	2140      	movs	r1, #64	; 0x40
900005ec:	4812      	ldr	r0, [pc, #72]	; (90000638 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ee:	68da      	ldr	r2, [r3, #12]
900005f0:	3a00      	subs	r2, #0
900005f2:	bf18      	it	ne
900005f4:	2201      	movne	r2, #1
900005f6:	f009 be7f 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005fa:	4b0e      	ldr	r3, [pc, #56]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005fc:	2140      	movs	r1, #64	; 0x40
900005fe:	480f      	ldr	r0, [pc, #60]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000600:	689a      	ldr	r2, [r3, #8]
90000602:	3a00      	subs	r2, #0
90000604:	bf18      	it	ne
90000606:	2201      	movne	r2, #1
90000608:	f009 be76 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
9000060c:	4b09      	ldr	r3, [pc, #36]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
9000060e:	2180      	movs	r1, #128	; 0x80
90000610:	480a      	ldr	r0, [pc, #40]	; (9000063c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
90000612:	685a      	ldr	r2, [r3, #4]
90000614:	3a00      	subs	r2, #0
90000616:	bf18      	it	ne
90000618:	2201      	movne	r2, #1
9000061a:	f009 be6d 	b.w	9000a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
9000061e:	4b05      	ldr	r3, [pc, #20]	; (90000634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000620:	2108      	movs	r1, #8
90000622:	4807      	ldr	r0, [pc, #28]	; (90000640 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000624:	681a      	ldr	r2, [r3, #0]
90000626:	3a00      	subs	r2, #0
90000628:	bf18      	it	ne
9000062a:	2201      	movne	r2, #1
9000062c:	f009 be64 	b.w	9000a2f8 <HAL_GPIO_WritePin>
}
90000630:	4770      	bx	lr
90000632:	bf00      	nop
90000634:	24005b5c 	.word	0x24005b5c
90000638:	58020000 	.word	0x58020000
9000063c:	58020400 	.word	0x58020400
90000640:	58021800 	.word	0x58021800

90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000644:	2803      	cmp	r0, #3
90000646:	d813      	bhi.n	90000670 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000648:	e8df f000 	tbb	[pc, r0]
9000064c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000650:	2140      	movs	r1, #64	; 0x40
90000652:	4808      	ldr	r0, [pc, #32]	; (90000674 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000654:	f009 be54 	b.w	9000a300 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000658:	2140      	movs	r1, #64	; 0x40
9000065a:	4807      	ldr	r0, [pc, #28]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000065c:	f009 be50 	b.w	9000a300 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000660:	2180      	movs	r1, #128	; 0x80
90000662:	4805      	ldr	r0, [pc, #20]	; (90000678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000664:	f009 be4c 	b.w	9000a300 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000668:	2108      	movs	r1, #8
9000066a:	4804      	ldr	r0, [pc, #16]	; (9000067c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000066c:	f009 be48 	b.w	9000a300 <HAL_GPIO_TogglePin>
}
90000670:	4770      	bx	lr
90000672:	bf00      	nop
90000674:	58020000 	.word	0x58020000
90000678:	58020400 	.word	0x58020400
9000067c:	58021800 	.word	0x58021800

90000680 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000680:	2000      	movs	r0, #0
90000682:	4770      	bx	lr

90000684 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000684:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000686:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000068a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000068e:	4770      	bx	lr

90000690 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000690:	2000      	movs	r0, #0
90000692:	4770      	bx	lr

90000694 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000694:	1e0a      	subs	r2, r1, #0
90000696:	4b03      	ldr	r3, [pc, #12]	; (900006a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000698:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000069a:	bf18      	it	ne
9000069c:	2201      	movne	r2, #1
9000069e:	701a      	strb	r2, [r3, #0]
    }
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop
900006a4:	240281eb 	.word	0x240281eb

900006a8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900006a8:	2000      	movs	r0, #0
900006aa:	4770      	bx	lr

900006ac <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900006ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
900006ae:	4608      	mov	r0, r1
        if (taskDelayFunc)
900006b0:	b103      	cbz	r3, 900006b4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900006b2:	4718      	bx	r3
        }
    }
900006b4:	4770      	bx	lr
900006b6:	bf00      	nop

900006b8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900006b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
900006bc:	4770      	bx	lr
900006be:	bf00      	nop

900006c0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006c0:	4770      	bx	lr
900006c2:	bf00      	nop

900006c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006c4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c6:	4b09      	ldr	r3, [pc, #36]	; (900006ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006c8:	881b      	ldrh	r3, [r3, #0]
900006ca:	428b      	cmp	r3, r1
900006cc:	d808      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ce:	4b08      	ldr	r3, [pc, #32]	; (900006f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006d0:	881b      	ldrh	r3, [r3, #0]
900006d2:	4293      	cmp	r3, r2
900006d4:	d804      	bhi.n	900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006d6:	4807      	ldr	r0, [pc, #28]	; (900006f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006d8:	4b07      	ldr	r3, [pc, #28]	; (900006f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006da:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006dc:	801a      	strh	r2, [r3, #0]
    }
900006de:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006e0:	4b06      	ldr	r3, [pc, #24]	; (900006fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006e2:	219e      	movs	r1, #158	; 0x9e
900006e4:	4a06      	ldr	r2, [pc, #24]	; (90000700 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006e6:	4807      	ldr	r0, [pc, #28]	; (90000704 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006e8:	f027 f804 	bl	900276f4 <__assert_func>
900006ec:	240281e0 	.word	0x240281e0
900006f0:	240281e2 	.word	0x240281e2
900006f4:	240281e6 	.word	0x240281e6
900006f8:	240281e8 	.word	0x240281e8
900006fc:	90028834 	.word	0x90028834
90000700:	90028898 	.word	0x90028898
90000704:	900288dc 	.word	0x900288dc

90000708 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90000708:	b510      	push	{r4, lr}
9000070a:	4604      	mov	r4, r0
        swapFrameBuffers();
9000070c:	f013 fa5a 	bl	90013bc4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000710:	6823      	ldr	r3, [r4, #0]
90000712:	4620      	mov	r0, r4
90000714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
90000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
9000071c:	4718      	bx	r3
9000071e:	bf00      	nop

90000720 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000720:	f001 be8e 	b.w	90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000724 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000724:	f001 be92 	b.w	9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000728 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000728:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000072a:	f001 ff51 	bl	900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000072e:	4812      	ldr	r0, [pc, #72]	; (90000778 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000730:	2300      	movs	r3, #0
90000732:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000736:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000073a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000742:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000746:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000074a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000074e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000752:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000754:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000758:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000075a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000075e:	1c5a      	adds	r2, r3, #1
90000760:	d1f8      	bne.n	90000754 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000762:	f1ac 0c20 	sub.w	ip, ip, #32
90000766:	f11c 0f20 	cmn.w	ip, #32
9000076a:	d1f0      	bne.n	9000074e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000770:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000774:	bd10      	pop	{r4, pc}
90000776:	bf00      	nop
90000778:	e000ed00 	.word	0xe000ed00

9000077c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000077c:	f001 be3c 	b.w	900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000780 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000780:	f002 b84c 	b.w	9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000784 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000784:	f002 b836 	b.w	900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000788 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000788:	f001 be40 	b.w	9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000078c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000078c:	f012 bc72 	b.w	90013074 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000790 <_ZN11TouchGFXHALD0Ev>:
90000790:	b510      	push	{r4, lr}
90000792:	4604      	mov	r4, r0
90000794:	2188      	movs	r1, #136	; 0x88
90000796:	f026 ff7e 	bl	90027696 <_ZdlPvj>
9000079a:	4620      	mov	r0, r4
9000079c:	bd10      	pop	{r4, pc}
9000079e:	bf00      	nop

900007a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
900007a0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
900007a4:	b11b      	cbz	r3, 900007ae <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
900007a6:	6840      	ldr	r0, [r0, #4]
900007a8:	6803      	ldr	r3, [r0, #0]
900007aa:	681b      	ldr	r3, [r3, #0]
900007ac:	4718      	bx	r3
    }
900007ae:	4618      	mov	r0, r3
900007b0:	4770      	bx	lr
900007b2:	bf00      	nop

900007b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
900007b4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
900007b8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
900007bc:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
900007be:	4b0b      	ldr	r3, [pc, #44]	; (900007ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007c0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007c2:	d00b      	beq.n	900007dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007c4:	b94a      	cbnz	r2, 900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007c6:	4a0a      	ldr	r2, [pc, #40]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007c8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007cc:	4909      	ldr	r1, [pc, #36]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ce:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007d0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007d6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007d8:	8013      	strh	r3, [r2, #0]
        }
    }
900007da:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007dc:	2a00      	cmp	r2, #0
900007de:	d0fc      	beq.n	900007da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007e0:	4a03      	ldr	r2, [pc, #12]	; (900007f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007e2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007e6:	4903      	ldr	r1, [pc, #12]	; (900007f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007e8:	e7f1      	b.n	900007ce <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ea:	bf00      	nop
900007ec:	240281e4 	.word	0x240281e4
900007f0:	240281e2 	.word	0x240281e2
900007f4:	240281e0 	.word	0x240281e0

900007f8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007f8:	6840      	ldr	r0, [r0, #4]
900007fa:	4a04      	ldr	r2, [pc, #16]	; (9000080c <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007fc:	6803      	ldr	r3, [r0, #0]
900007fe:	699b      	ldr	r3, [r3, #24]
90000800:	4293      	cmp	r3, r2
90000802:	d101      	bne.n	90000808 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000804:	2000      	movs	r0, #0
90000806:	4770      	bx	lr
        return dma.getDMAType();
90000808:	4718      	bx	r3
9000080a:	bf00      	nop
9000080c:	90000681 	.word	0x90000681

90000810 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000810:	b1a9      	cbz	r1, 9000083e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000812:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000814:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000816:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000818:	bf18      	it	ne
9000081a:	2201      	movne	r2, #1
9000081c:	490c      	ldr	r1, [pc, #48]	; (90000850 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
9000081e:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000820:	6802      	ldr	r2, [r0, #0]
90000822:	490c      	ldr	r1, [pc, #48]	; (90000854 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000824:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000828:	428a      	cmp	r2, r1
9000082a:	d106      	bne.n	9000083a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000082c:	1e19      	subs	r1, r3, #0
9000082e:	4a0a      	ldr	r2, [pc, #40]	; (90000858 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000830:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000832:	bf18      	it	ne
90000834:	2101      	movne	r1, #1
90000836:	7011      	strb	r1, [r2, #0]
90000838:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000083a:	4619      	mov	r1, r3
9000083c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000083e:	4b07      	ldr	r3, [pc, #28]	; (9000085c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000840:	f240 21d2 	movw	r1, #722	; 0x2d2
90000844:	4a06      	ldr	r2, [pc, #24]	; (90000860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000846:	4807      	ldr	r0, [pc, #28]	; (90000864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000848:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000084a:	f026 ff53 	bl	900276f4 <__assert_func>
9000084e:	bf00      	nop
90000850:	240281ea 	.word	0x240281ea
90000854:	90000695 	.word	0x90000695
90000858:	240281eb 	.word	0x240281eb
9000085c:	90028924 	.word	0x90028924
90000860:	9002895c 	.word	0x9002895c
90000864:	900288dc 	.word	0x900288dc

90000868 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000868:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000086a:	6803      	ldr	r3, [r0, #0]
{
9000086c:	4604      	mov	r4, r0
9000086e:	4d17      	ldr	r5, [pc, #92]	; (900008cc <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000874:	4798      	blx	r3
    enableInterrupts();
90000876:	6823      	ldr	r3, [r4, #0]
90000878:	4620      	mov	r0, r4
9000087a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000087c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000087e:	f001 f8bb 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000882:	6823      	ldr	r3, [r4, #0]
90000884:	4620      	mov	r0, r4
90000886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000888:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000088a:	2201      	movs	r2, #1
9000088c:	2104      	movs	r1, #4
9000088e:	4810      	ldr	r0, [pc, #64]	; (900008d0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000890:	f009 fd32 	bl	9000a2f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000894:	2201      	movs	r2, #1
90000896:	2180      	movs	r1, #128	; 0x80
90000898:	480e      	ldr	r0, [pc, #56]	; (900008d4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000089a:	f009 fd2d 	bl	9000a2f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000089e:	2201      	movs	r2, #1
900008a0:	480d      	ldr	r0, [pc, #52]	; (900008d8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
900008a2:	4611      	mov	r1, r2
900008a4:	f009 fd28 	bl	9000a2f8 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
900008a8:	f001 f8a6 	bl	900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
900008ac:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
900008ae:	4620      	mov	r0, r4
900008b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900008b2:	42ab      	cmp	r3, r5
900008b4:	d107      	bne.n	900008c6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
900008b6:	f013 f985 	bl	90013bc4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900008ba:	6823      	ldr	r3, [r4, #0]
900008bc:	4620      	mov	r0, r4
900008be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008c2:	4798      	blx	r3
    }
900008c4:	e7f0      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008c6:	4798      	blx	r3
900008c8:	e7ee      	b.n	900008a8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008ca:	bf00      	nop
900008cc:	90000709 	.word	0x90000709
900008d0:	58020000 	.word	0x58020000
900008d4:	58020c00 	.word	0x58020c00
900008d8:	58022800 	.word	0x58022800

900008dc <_ZN11TouchGFXHAL10initializeEv>:
{
900008dc:	b538      	push	{r3, r4, r5, lr}
900008de:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008e0:	f001 ffa6 	bl	90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008e4:	4817      	ldr	r0, [pc, #92]	; (90000944 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008e6:	6823      	ldr	r3, [r4, #0]
900008e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ea:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008f0:	4285      	cmp	r5, r0
900008f2:	d119      	bne.n	90000928 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008f4:	b1f9      	cbz	r1, 90000936 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008f6:	3a00      	subs	r2, #0
900008f8:	4913      	ldr	r1, [pc, #76]	; (90000948 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008fe:	bf18      	it	ne
90000900:	2201      	movne	r2, #1
90000902:	4812      	ldr	r0, [pc, #72]	; (9000094c <_ZN11TouchGFXHAL10initializeEv+0x70>)
90000904:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000906:	4912      	ldr	r1, [pc, #72]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000908:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
9000090a:	d111      	bne.n	90000930 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000090c:	4b11      	ldr	r3, [pc, #68]	; (90000954 <_ZN11TouchGFXHAL10initializeEv+0x78>)
9000090e:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000910:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000912:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000914:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000918:	4628      	mov	r0, r5
9000091a:	f7ff fd7d 	bl	90000418 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
9000091e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000920:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000922:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000926:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000928:	4b09      	ldr	r3, [pc, #36]	; (90000950 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000092a:	4620      	mov	r0, r4
9000092c:	47a8      	blx	r5
9000092e:	e7f1      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000930:	4620      	mov	r0, r4
90000932:	4798      	blx	r3
90000934:	e7ee      	b.n	90000914 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000936:	4b08      	ldr	r3, [pc, #32]	; (90000958 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000938:	f240 21d2 	movw	r1, #722	; 0x2d2
9000093c:	4a07      	ldr	r2, [pc, #28]	; (9000095c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000093e:	4808      	ldr	r0, [pc, #32]	; (90000960 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000940:	f026 fed8 	bl	900276f4 <__assert_func>
90000944:	90000811 	.word	0x90000811
90000948:	90000695 	.word	0x90000695
9000094c:	240281ea 	.word	0x240281ea
90000950:	d0000000 	.word	0xd0000000
90000954:	240281eb 	.word	0x240281eb
90000958:	90028924 	.word	0x90028924
9000095c:	9002895c 	.word	0x9002895c
90000960:	900288dc 	.word	0x900288dc

90000964 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000964:	b508      	push	{r3, lr}
        return instance;
90000966:	4b07      	ldr	r3, [pc, #28]	; (90000984 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000968:	b128      	cbz	r0, 90000976 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000096a:	6818      	ldr	r0, [r3, #0]
9000096c:	2101      	movs	r1, #1
9000096e:	f013 f943 	bl	90013bf8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000972:	2001      	movs	r0, #1
90000974:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000976:	4601      	mov	r1, r0
90000978:	6818      	ldr	r0, [r3, #0]
9000097a:	f013 f93d 	bl	90013bf8 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000097e:	2001      	movs	r0, #1
90000980:	bd08      	pop	{r3, pc}
90000982:	bf00      	nop
90000984:	240281ec 	.word	0x240281ec

90000988 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000988:	6940      	ldr	r0, [r0, #20]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000098c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000990:	4770      	bx	lr
90000992:	bf00      	nop

90000994 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000994:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000996:	b10b      	cbz	r3, 9000099c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000998:	2001      	movs	r0, #1
}
9000099a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000099c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000099e:	3800      	subs	r0, #0
900009a0:	bf18      	it	ne
900009a2:	2001      	movne	r0, #1
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop

900009a8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
900009a8:	6880      	ldr	r0, [r0, #8]
900009aa:	4770      	bx	lr

900009ac <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
900009ac:	4770      	bx	lr
900009ae:	bf00      	nop

900009b0 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
900009b0:	3004      	adds	r0, #4
{
900009b2:	468c      	mov	ip, r1
    *data = videoInfo;
900009b4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
900009b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
900009ba:	4770      	bx	lr

900009bc <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
900009bc:	4770      	bx	lr
900009be:	bf00      	nop

900009c0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009c0:	b508      	push	{r3, lr}
    assert(0);
900009c2:	4a03      	ldr	r2, [pc, #12]	; (900009d0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009c4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009c8:	4b02      	ldr	r3, [pc, #8]	; (900009d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009ca:	4803      	ldr	r0, [pc, #12]	; (900009d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009cc:	f026 fe92 	bl	900276f4 <__assert_func>
900009d0:	90028a88 	.word	0x90028a88
900009d4:	90028a84 	.word	0x90028a84
900009d8:	90028ae4 	.word	0x90028ae4

900009dc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009dc:	b510      	push	{r4, lr}
900009de:	4604      	mov	r4, r0
900009e0:	2148      	movs	r1, #72	; 0x48
900009e2:	f026 fe58 	bl	90027696 <_ZdlPvj>
900009e6:	4620      	mov	r0, r4
900009e8:	bd10      	pop	{r4, pc}
900009ea:	bf00      	nop

900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009f0:	b085      	sub	sp, #20
900009f2:	4605      	mov	r5, r0
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f4:	4c65      	ldr	r4, [pc, #404]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009f6:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009f8:	2002      	movs	r0, #2
900009fa:	6120      	str	r0, [r4, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009fc:	68e8      	ldr	r0, [r5, #12]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009fe:	0705      	lsls	r5, r0, #28
90000a00:	d003      	beq.n	90000a0a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000a02:	f020 000f 	bic.w	r0, r0, #15
90000a06:	4c61      	ldr	r4, [pc, #388]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000a08:	3010      	adds	r0, #16
90000a0a:	6020      	str	r0, [r4, #0]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0c:	0900      	lsrs	r0, r0, #4
90000a0e:	4c5f      	ldr	r4, [pc, #380]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
90000a10:	2700      	movs	r7, #0
90000a12:	4e5f      	ldr	r6, [pc, #380]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a14:	60e0      	str	r0, [r4, #12]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a1a:	4d5e      	ldr	r5, [pc, #376]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a1c:	01c0      	lsls	r0, r0, #7
    Output_Is_Paused = 0;
90000a1e:	6037      	str	r7, [r6, #0]
    DMA2D_output_Is_Paused = 1;
90000a20:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000bc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a24:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a26:	9803      	ldr	r0, [sp, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000a28:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a2c:	6900      	ldr	r0, [r0, #16]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a2e:	702f      	strb	r7, [r5, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a30:	f000 000f 	and.w	r0, r0, #15
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a34:	60af      	str	r7, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a36:	732f      	strb	r7, [r5, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a38:	f1c0 0010 	rsb	r0, r0, #16
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a3c:	616f      	str	r7, [r5, #20]
90000a3e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000bc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a42:	60a0      	str	r0, [r4, #8]
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a44:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a48:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a4c:	6060      	str	r0, [r4, #4]
    FrameBufferAddress = output;
90000a4e:	4852      	ldr	r0, [pc, #328]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a50:	4c52      	ldr	r4, [pc, #328]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a52:	6003      	str	r3, [r0, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000a54:	4b52      	ldr	r3, [pc, #328]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a56:	4853      	ldr	r0, [pc, #332]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
    JPEG_OUT_Write_BufferIndex = 0;
90000a58:	601f      	str	r7, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a5a:	4b53      	ldr	r3, [pc, #332]	; (90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    JPEG_OUT_Read_BufferIndex = 0;
90000a5c:	f8c8 7000 	str.w	r7, [r8]
    JPEG_InputImageIndex = 0;
90000a60:	601f      	str	r7, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a62:	4b52      	ldr	r3, [pc, #328]	; (90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a64:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a66:	4b52      	ldr	r3, [pc, #328]	; (90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a68:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a6e:	4b51      	ldr	r3, [pc, #324]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a70:	601f      	str	r7, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a72:	2301      	movs	r3, #1
90000a74:	f8cb 3000 	str.w	r3, [fp]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a78:	686b      	ldr	r3, [r5, #4]
90000a7a:	f00a fd6d 	bl	9000b558 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a7e:	f8d9 3000 	ldr.w	r3, [r9]
90000a82:	b11b      	cbz	r3, 90000a8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a84:	4b4c      	ldr	r3, [pc, #304]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a86:	681b      	ldr	r3, [r3, #0]
90000a88:	2b00      	cmp	r3, #0
90000a8a:	d17d      	bne.n	90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a8c:	f8d8 3000 	ldr.w	r3, [r8]
90000a90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a94:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a98:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a9c:	2901      	cmp	r1, #1
90000a9e:	d042      	beq.n	90000b26 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000aa0:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d029      	beq.n	90000afa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000aa6:	6833      	ldr	r3, [r6, #0]
90000aa8:	b9c3      	cbnz	r3, 90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000aaa:	f8db 3000 	ldr.w	r3, [fp]
90000aae:	fab3 f383 	clz	r3, r3
90000ab2:	095b      	lsrs	r3, r3, #5
90000ab4:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ab6:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ab8:	6823      	ldr	r3, [r4, #0]
90000aba:	2b02      	cmp	r3, #2
90000abc:	d013      	beq.n	90000ae6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
      while(JpegProcessing_End != 1);
90000abe:	6823      	ldr	r3, [r4, #0]
90000ac0:	2b01      	cmp	r3, #1
90000ac2:	d1dc      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000ac4:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000ac6:	4a3c      	ldr	r2, [pc, #240]	; (90000bb8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000ac8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000acc:	f8ca 3004 	str.w	r3, [sl, #4]
      Jpeg_HWDecodingEnd = 0;
90000ad0:	f8c9 3000 	str.w	r3, [r9]
      DMA2D_CopyBufferEnd = 0;
90000ad4:	6013      	str	r3, [r2, #0]
}
90000ad6:	b005      	add	sp, #20
90000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
      return 2;
  }

  return 0;
90000adc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ade:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ae0:	6823      	ldr	r3, [r4, #0]
90000ae2:	2b02      	cmp	r3, #2
90000ae4:	d1eb      	bne.n	90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
          SEM_WAIT(semDecodingDone);
90000ae6:	4b35      	ldr	r3, [pc, #212]	; (90000bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ae8:	f04f 31ff 	mov.w	r1, #4294967295
90000aec:	6818      	ldr	r0, [r3, #0]
90000aee:	f00e f9fd 	bl	9000eeec <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000af2:	6823      	ldr	r3, [r4, #0]
90000af4:	2b01      	cmp	r3, #1
90000af6:	d1c2      	bne.n	90000a7e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000af8:	e7e4      	b.n	90000ac4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000afa:	4b29      	ldr	r3, [pc, #164]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000afc:	681b      	ldr	r3, [r3, #0]
90000afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000b02:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b06:	2b00      	cmp	r3, #0
90000b08:	d1cd      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000b0a:	f8d8 3000 	ldr.w	r3, [r8]
90000b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000b12:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000b16:	2b00      	cmp	r3, #0
90000b18:	d1c5      	bne.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b1a:	2102      	movs	r1, #2
90000b1c:	4821      	ldr	r0, [pc, #132]	; (90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
      Output_Is_Paused = 0;
90000b1e:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b20:	f00a fe62 	bl	9000b7e8 <HAL_JPEG_Resume>
90000b24:	e7bf      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b26:	f8db 1000 	ldr.w	r1, [fp]
90000b2a:	2901      	cmp	r1, #1
90000b2c:	d1b8      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      JPEG_OUT_Read_BufferIndex++;
90000b2e:	3301      	adds	r3, #1
      };
90000b30:	4920      	ldr	r1, [pc, #128]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b32:	f8da 0000 	ldr.w	r0, [sl]
      JPEG_OUT_Read_BufferIndex++;
90000b36:	2b01      	cmp	r3, #1
      };
90000b38:	f8d1 c000 	ldr.w	ip, [r1]
      JPEG_OUT_Read_BufferIndex++;
90000b3c:	bf88      	it	hi
90000b3e:	463b      	movhi	r3, r7
90000b40:	f8c8 3000 	str.w	r3, [r8]
      buffer_[tail_] = job;
90000b44:	f8da 3008 	ldr.w	r3, [sl, #8]
      tail_ = (tail_ + 1) % max_size_;
90000b48:	1c59      	adds	r1, r3, #1
      buffer_[tail_] = job;
90000b4a:	3302      	adds	r3, #2
90000b4c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b50:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b54:	605a      	str	r2, [r3, #4]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b56:	9a03      	ldr	r2, [sp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b58:	fbb1 f3f0 	udiv	r3, r1, r0
90000b5c:	fb00 1113 	mls	r1, r0, r3, r1
90000b60:	6c50      	ldr	r0, [r2, #68]	; 0x44
      count_++;
90000b62:	f8da 200c 	ldr.w	r2, [sl, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b66:	f8ca 1008 	str.w	r1, [sl, #8]
      count_++;
90000b6a:	3201      	adds	r2, #1
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b6c:	4911      	ldr	r1, [pc, #68]	; (90000bb4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b6e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b72:	4a06      	ldr	r2, [pc, #24]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b74:	680b      	ldr	r3, [r1, #0]
90000b76:	68d2      	ldr	r2, [r2, #12]
90000b78:	4413      	add	r3, r2
90000b7a:	600b      	str	r3, [r1, #0]
      dma.start();
90000b7c:	6803      	ldr	r3, [r0, #0]
      DMA2D_output_Is_Paused = 0;
90000b7e:	f8cb 7000 	str.w	r7, [fp]
      dma.start();
90000b82:	691b      	ldr	r3, [r3, #16]
90000b84:	4798      	blx	r3
90000b86:	e78b      	b.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
      return 1;
90000b88:	2301      	movs	r3, #1
90000b8a:	e794      	b.n	90000ab6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b8c:	24005ba0 	.word	0x24005ba0
90000b90:	24005b9c 	.word	0x24005b9c
90000b94:	24000004 	.word	0x24000004
90000b98:	24005b74 	.word	0x24005b74
90000b9c:	24005b8c 	.word	0x24005b8c
90000ba0:	24005b88 	.word	0x24005b88
90000ba4:	2400ce84 	.word	0x2400ce84
90000ba8:	24005b7c 	.word	0x24005b7c
90000bac:	24005b78 	.word	0x24005b78
90000bb0:	24005b80 	.word	0x24005b80
90000bb4:	24005b94 	.word	0x24005b94
90000bb8:	24005b6c 	.word	0x24005b6c
90000bbc:	24005bd8 	.word	0x24005bd8
90000bc0:	24005b70 	.word	0x24005b70
90000bc4:	24005b84 	.word	0x24005b84
90000bc8:	24005b90 	.word	0x24005b90
90000bcc:	24005bb4 	.word	0x24005bb4

90000bd0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bd2:	6803      	ldr	r3, [r0, #0]
90000bd4:	2901      	cmp	r1, #1
90000bd6:	4e2a      	ldr	r6, [pc, #168]	; (90000c80 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bd8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bdc:	bf38      	it	cc
90000bde:	2101      	movcc	r1, #1
90000be0:	42b3      	cmp	r3, r6
90000be2:	460d      	mov	r5, r1
90000be4:	d138      	bne.n	90000c58 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000be6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000be8:	4299      	cmp	r1, r3
90000bea:	d82a      	bhi.n	90000c42 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bec:	1e6b      	subs	r3, r5, #1
90000bee:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bf2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bf6:	b350      	cbz	r0, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bfa:	2b0f      	cmp	r3, #15
90000bfc:	d937      	bls.n	90000c6e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bfe:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000c00:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000c04:	68db      	ldr	r3, [r3, #12]
90000c06:	4631      	mov	r1, r6
90000c08:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c0c:	2210      	movs	r2, #16
90000c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c10:	6803      	ldr	r3, [r0, #0]
90000c12:	691b      	ldr	r3, [r3, #16]
90000c14:	4798      	blx	r3
90000c16:	b1b0      	cbz	r0, 90000c46 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c1a:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c1c:	b1bb      	cbz	r3, 90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c20:	7a93      	ldrb	r3, [r2, #10]
90000c22:	7a51      	ldrb	r1, [r2, #9]
90000c24:	041b      	lsls	r3, r3, #16
90000c26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c2a:	7a11      	ldrb	r1, [r2, #8]
90000c2c:	7ad2      	ldrb	r2, [r2, #11]
90000c2e:	430b      	orrs	r3, r1
90000c30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c34:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c36:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c38:	3a04      	subs	r2, #4
90000c3a:	441a      	add	r2, r3
90000c3c:	61a2      	str	r2, [r4, #24]
}
90000c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c40:	68a3      	ldr	r3, [r4, #8]
{
90000c42:	461d      	mov	r5, r3
90000c44:	e7d2      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c46:	230d      	movs	r3, #13
90000c48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c4c:	e7e4      	b.n	90000c18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c4e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c54:	58d3      	ldr	r3, [r2, r3]
90000c56:	e7ed      	b.n	90000c34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c58:	4798      	blx	r3
90000c5a:	4285      	cmp	r5, r0
90000c5c:	d9c6      	bls.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c5e:	6823      	ldr	r3, [r4, #0]
90000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c62:	42b3      	cmp	r3, r6
90000c64:	d0ec      	beq.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c66:	4620      	mov	r0, r4
90000c68:	4798      	blx	r3
90000c6a:	4605      	mov	r5, r0
90000c6c:	e7be      	b.n	90000bec <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c6e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c70:	4b04      	ldr	r3, [pc, #16]	; (90000c84 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c72:	4a05      	ldr	r2, [pc, #20]	; (90000c88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c74:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c7a:	4804      	ldr	r0, [pc, #16]	; (90000c8c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c7c:	f026 fd3a 	bl	900276f4 <__assert_func>
90000c80:	900009a9 	.word	0x900009a9
90000c84:	90028b40 	.word	0x90028b40
90000c88:	90028b54 	.word	0x90028b54
90000c8c:	90028ae4 	.word	0x90028ae4

90000c90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c94:	4604      	mov	r4, r0
    if (reader != 0)
90000c96:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c98:	b083      	sub	sp, #12
90000c9a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c9c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c9e:	2800      	cmp	r0, #0
90000ca0:	f000 80e4 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000ca6:	2b07      	cmp	r3, #7
90000ca8:	f240 80e7 	bls.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cac:	6803      	ldr	r3, [r0, #0]
90000cae:	4631      	mov	r1, r6
90000cb0:	68db      	ldr	r3, [r3, #12]
90000cb2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000cb6:	2208      	movs	r2, #8
90000cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000cba:	6803      	ldr	r3, [r0, #0]
90000cbc:	691b      	ldr	r3, [r3, #16]
90000cbe:	4798      	blx	r3
90000cc0:	2800      	cmp	r0, #0
90000cc2:	f000 80cf 	beq.w	90000e64 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cc6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000cc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000cca:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000ccc:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cce:	2800      	cmp	r0, #0
90000cd0:	f000 80dc 	beq.w	90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cd4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cd6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cd8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cdc:	18b1      	adds	r1, r6, r2
90000cde:	5cb2      	ldrb	r2, [r6, r2]
90000ce0:	788e      	ldrb	r6, [r1, #2]
90000ce2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000ce6:	0436      	lsls	r6, r6, #16
90000ce8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000cec:	4316      	orrs	r6, r2
90000cee:	78ca      	ldrb	r2, [r1, #3]
90000cf0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cf4:	42b3      	cmp	r3, r6
90000cf6:	f0c0 80c0 	bcc.w	90000e7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cfa:	6803      	ldr	r3, [r0, #0]
90000cfc:	4639      	mov	r1, r7
90000cfe:	68db      	ldr	r3, [r3, #12]
90000d00:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000d02:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000d04:	4632      	mov	r2, r6
90000d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000d08:	6803      	ldr	r3, [r0, #0]
90000d0a:	691b      	ldr	r3, [r3, #16]
90000d0c:	4798      	blx	r3
90000d0e:	b910      	cbnz	r0, 90000d16 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000d10:	230d      	movs	r3, #13
90000d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000d18:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000d1a:	2d00      	cmp	r5, #0
90000d1c:	d053      	beq.n	90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1e:	4a5c      	ldr	r2, [pc, #368]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d20:	4b5c      	ldr	r3, [pc, #368]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d22:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d24:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d26:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d2c:	4d5a      	ldr	r5, [pc, #360]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d2e:	4f5b      	ldr	r7, [pc, #364]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d30:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d32:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d34:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d36:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d38:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d3a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d3c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d3e:	4a58      	ldr	r2, [pc, #352]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d40:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000ecc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d44:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d46:	4a57      	ldr	r2, [pc, #348]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d48:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000ed0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d4c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d4e:	4a56      	ldr	r2, [pc, #344]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d50:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d54:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d56:	4a55      	ldr	r2, [pc, #340]	; (90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d58:	4855      	ldr	r0, [pc, #340]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d5a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d5c:	4a55      	ldr	r2, [pc, #340]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d5e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000ed4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d62:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d64:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d6a:	4e53      	ldr	r6, [pc, #332]	; (90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d6c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d70:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d72:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000ed8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d76:	f00a fbef 	bl	9000b558 <HAL_JPEG_Decode_DMA>
    return 0;
90000d7a:	e008      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d7c:	f8da 3000 	ldr.w	r3, [sl]
90000d80:	fab3 f383 	clz	r3, r3
90000d84:	095b      	lsrs	r3, r3, #5
90000d86:	005b      	lsls	r3, r3, #1
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d88:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d8a:	6833      	ldr	r3, [r6, #0]
90000d8c:	b9db      	cbnz	r3, 90000dc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d8e:	f8d9 3000 	ldr.w	r3, [r9]
90000d92:	b11b      	cbz	r3, 90000d9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d94:	4b49      	ldr	r3, [pc, #292]	; (90000ebc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d96:	681b      	ldr	r3, [r3, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d161      	bne.n	90000e60 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d9c:	f8d8 3000 	ldr.w	r3, [r8]
90000da0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000da4:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000da8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000dac:	2901      	cmp	r1, #1
90000dae:	d024      	beq.n	90000dfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
  if((Output_Is_Paused == 1) && \
90000db0:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000db2:	2b01      	cmp	r3, #1
90000db4:	d00b      	beq.n	90000dce <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000db6:	683b      	ldr	r3, [r7, #0]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d0df      	beq.n	90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000dbc:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000dbe:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000dc0:	6833      	ldr	r3, [r6, #0]
90000dc2:	2b00      	cmp	r3, #0
90000dc4:	d0e3      	beq.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000dc6:	2001      	movs	r0, #1
90000dc8:	b003      	add	sp, #12
90000dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dce:	4b34      	ldr	r3, [pc, #208]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dd0:	681b      	ldr	r3, [r3, #0]
90000dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000dd6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dda:	2b00      	cmp	r3, #0
90000ddc:	d1eb      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dde:	f8d8 3000 	ldr.w	r3, [r8]
90000de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000de6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dea:	2b00      	cmp	r3, #0
90000dec:	d1e3      	bne.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dee:	2102      	movs	r1, #2
90000df0:	482f      	ldr	r0, [pc, #188]	; (90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000df2:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000df4:	f00a fcf8 	bl	9000b7e8 <HAL_JPEG_Resume>
90000df8:	e7dd      	b.n	90000db6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dfa:	f8da 1000 	ldr.w	r1, [sl]
90000dfe:	2901      	cmp	r1, #1
90000e00:	d1d6      	bne.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000e02:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000e06:	3301      	adds	r3, #1
      };
90000e08:	482a      	ldr	r0, [pc, #168]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000e0a:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000e0e:	2b01      	cmp	r3, #1
      };
90000e10:	f8d0 e000 	ldr.w	lr, [r0]
90000e14:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000e18:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000e1c:	bf88      	it	hi
90000e1e:	2300      	movhi	r3, #0
90000e20:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e24:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e28:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e2c:	2300      	movs	r3, #0
90000e2e:	604a      	str	r2, [r1, #4]
      count_++;
90000e30:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e34:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e38:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e3a:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e3e:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e42:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e46:	4912      	ldr	r1, [pc, #72]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e48:	481a      	ldr	r0, [pc, #104]	; (90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e4a:	68c9      	ldr	r1, [r1, #12]
90000e4c:	6802      	ldr	r2, [r0, #0]
90000e4e:	440a      	add	r2, r1
90000e50:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e52:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e54:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e58:	6803      	ldr	r3, [r0, #0]
90000e5a:	691b      	ldr	r3, [r3, #16]
90000e5c:	4798      	blx	r3
90000e5e:	e7a7      	b.n	90000db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
      return 1;
90000e60:	2301      	movs	r3, #1
90000e62:	e791      	b.n	90000d88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e64:	230d      	movs	r3, #13
90000e66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e6a:	e72c      	b.n	90000cc6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e70:	f106 0308 	add.w	r3, r6, #8
90000e74:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e76:	4419      	add	r1, r3
90000e78:	e74f      	b.n	90000d1a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e7a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e7c:	4b10      	ldr	r3, [pc, #64]	; (90000ec0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e7e:	4a11      	ldr	r2, [pc, #68]	; (90000ec4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e80:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e86:	4810      	ldr	r0, [pc, #64]	; (90000ec8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e88:	f026 fc34 	bl	900276f4 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e8c:	463e      	mov	r6, r7
90000e8e:	e7ee      	b.n	90000e6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e90:	24005ba0 	.word	0x24005ba0
90000e94:	24005b74 	.word	0x24005b74
90000e98:	24000004 	.word	0x24000004
90000e9c:	24005b9c 	.word	0x24005b9c
90000ea0:	24005b88 	.word	0x24005b88
90000ea4:	24005b7c 	.word	0x24005b7c
90000ea8:	24005b78 	.word	0x24005b78
90000eac:	24005b80 	.word	0x24005b80
90000eb0:	2400ce84 	.word	0x2400ce84
90000eb4:	24005b94 	.word	0x24005b94
90000eb8:	24005b8c 	.word	0x24005b8c
90000ebc:	24005b6c 	.word	0x24005b6c
90000ec0:	90028b40 	.word	0x90028b40
90000ec4:	90028b54 	.word	0x90028b54
90000ec8:	90028ae4 	.word	0x90028ae4
90000ecc:	24005b84 	.word	0x24005b84
90000ed0:	24005b70 	.word	0x24005b70
90000ed4:	24005b90 	.word	0x24005b90
90000ed8:	24005bb4 	.word	0x24005bb4

90000edc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000edc:	6943      	ldr	r3, [r0, #20]
{
90000ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ee2:	2b00      	cmp	r3, #0
90000ee4:	f000 8098 	beq.w	90001018 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ee8:	4605      	mov	r5, r0
    if (reader != 0)
90000eea:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000eec:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000eee:	2800      	cmp	r0, #0
90000ef0:	f000 8082 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ef4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ef6:	2b07      	cmp	r3, #7
90000ef8:	f240 8083 	bls.w	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000efc:	6803      	ldr	r3, [r0, #0]
90000efe:	4621      	mov	r1, r4
90000f00:	68db      	ldr	r3, [r3, #12]
90000f02:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f04:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f06:	2208      	movs	r2, #8
90000f08:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f0a:	6803      	ldr	r3, [r0, #0]
90000f0c:	691b      	ldr	r3, [r3, #16]
90000f0e:	4798      	blx	r3
90000f10:	2800      	cmp	r0, #0
90000f12:	d06d      	beq.n	90000ff0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f14:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000f16:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000f18:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000f1a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f1c:	2800      	cmp	r0, #0
90000f1e:	d06d      	beq.n	90000ffc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f20:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f22:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f24:	18a1      	adds	r1, r4, r2
90000f26:	5ca2      	ldrb	r2, [r4, r2]
90000f28:	788c      	ldrb	r4, [r1, #2]
90000f2a:	784e      	ldrb	r6, [r1, #1]
90000f2c:	0424      	lsls	r4, r4, #16
90000f2e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f32:	4314      	orrs	r4, r2
90000f34:	78ca      	ldrb	r2, [r1, #3]
90000f36:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f3a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f3c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f40:	e039      	b.n	90000fb6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f42:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f44:	2b07      	cmp	r3, #7
90000f46:	d95c      	bls.n	90001002 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f48:	6803      	ldr	r3, [r0, #0]
90000f4a:	4621      	mov	r1, r4
90000f4c:	68db      	ldr	r3, [r3, #12]
90000f4e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f50:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f52:	2208      	movs	r2, #8
90000f54:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f56:	6803      	ldr	r3, [r0, #0]
90000f58:	691b      	ldr	r3, [r3, #16]
90000f5a:	4798      	blx	r3
90000f5c:	b908      	cbnz	r0, 90000f62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f5e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f62:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f64:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f66:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f68:	2800      	cmp	r0, #0
90000f6a:	d053      	beq.n	90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f6c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f70:	188b      	adds	r3, r1, r2
90000f72:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f74:	799c      	ldrb	r4, [r3, #6]
90000f76:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f7a:	0424      	lsls	r4, r4, #16
90000f7c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f80:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f84:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f88:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f8c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f90:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f94:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f96:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f9a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f9e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000fa2:	f246 3264 	movw	r2, #25444	; 0x6364
90000fa6:	42b1      	cmp	r1, r6
90000fa8:	bf08      	it	eq
90000faa:	4293      	cmpeq	r3, r2
90000fac:	bf0c      	ite	eq
90000fae:	2101      	moveq	r1, #1
90000fb0:	2100      	movne	r1, #0
90000fb2:	d01a      	beq.n	90000fea <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000fb4:	69ab      	ldr	r3, [r5, #24]
90000fb6:	441c      	add	r4, r3
90000fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000fba:	f104 0208 	add.w	r2, r4, #8
90000fbe:	429a      	cmp	r2, r3
90000fc0:	d20e      	bcs.n	90000fe0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fc2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc4:	3409      	adds	r4, #9
        frameNumber++;
90000fc6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fc8:	f024 0401 	bic.w	r4, r4, #1
90000fcc:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fd0:	2800      	cmp	r0, #0
90000fd2:	d1b6      	bne.n	90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fd6:	191a      	adds	r2, r3, r4
90000fd8:	5b19      	ldrh	r1, [r3, r4]
90000fda:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6854      	ldr	r4, [r2, #4]
90000fde:	e7e0      	b.n	90000fa2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fe0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fe2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fe4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fe6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fea:	4608      	mov	r0, r1
90000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000ff0:	230d      	movs	r3, #13
90000ff2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000ff6:	e78d      	b.n	90000f14 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ff8:	1d22      	adds	r2, r4, #4
90000ffa:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000ffc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000ffe:	588c      	ldr	r4, [r1, r2]
90001000:	e79b      	b.n	90000f3a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001002:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001004:	4b07      	ldr	r3, [pc, #28]	; (90001024 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90001006:	4a08      	ldr	r2, [pc, #32]	; (90001028 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90001008:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000100a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
9000100e:	4807      	ldr	r0, [pc, #28]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001010:	f026 fb70 	bl	900276f4 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90001014:	4614      	mov	r4, r2
90001016:	e7dd      	b.n	90000fd4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	4b05      	ldr	r3, [pc, #20]	; (90001030 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
9000101a:	21ec      	movs	r1, #236	; 0xec
9000101c:	4a05      	ldr	r2, [pc, #20]	; (90001034 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
9000101e:	4803      	ldr	r0, [pc, #12]	; (9000102c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001020:	f026 fb68 	bl	900276f4 <__assert_func>
90001024:	90028b40 	.word	0x90028b40
90001028:	90028b54 	.word	0x90028b54
9000102c:	90028ae4 	.word	0x90028ae4
90001030:	90028b98 	.word	0x90028b98
90001034:	90028be4 	.word	0x90028be4

90001038 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001038:	6943      	ldr	r3, [r0, #20]
{
9000103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000103e:	2b00      	cmp	r3, #0
90001040:	f000 809b 	beq.w	9000117a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001044:	4604      	mov	r4, r0
    if (reader != 0)
90001046:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001048:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000104a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000104c:	2800      	cmp	r0, #0
9000104e:	d061      	beq.n	90001114 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001052:	2b07      	cmp	r3, #7
90001054:	f240 8097 	bls.w	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001058:	6803      	ldr	r3, [r0, #0]
9000105a:	4629      	mov	r1, r5
9000105c:	68db      	ldr	r3, [r3, #12]
9000105e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001060:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001062:	2208      	movs	r2, #8
90001064:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001066:	6803      	ldr	r3, [r0, #0]
90001068:	691b      	ldr	r3, [r3, #16]
9000106a:	4798      	blx	r3
9000106c:	2800      	cmp	r0, #0
9000106e:	d04c      	beq.n	9000110a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001072:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001074:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001076:	2800      	cmp	r0, #0
90001078:	d04b      	beq.n	90001112 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000107a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000107e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001080:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001082:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001086:	1b52      	subs	r2, r2, r5
90001088:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000108a:	eb03 0e0c 	add.w	lr, r3, ip
9000108e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 0805 	add.w	r8, r3, r5
90001096:	f813 c005 	ldrb.w	ip, [r3, r5]
9000109a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000109e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010a2:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900010a6:	f89e 5002 	ldrb.w	r5, [lr, #2]
900010aa:	f89e e003 	ldrb.w	lr, [lr, #3]
900010ae:	042d      	lsls	r5, r5, #16
900010b0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900010b4:	433d      	orrs	r5, r7
900010b6:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
900010ba:	eb03 0e02 	add.w	lr, r3, r2
900010be:	5c9b      	ldrb	r3, [r3, r2]
900010c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010c8:	194a      	adds	r2, r1, r5
900010ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010cc:	f102 0e08 	add.w	lr, r2, #8
900010d0:	45be      	cmp	lr, r7
900010d2:	d213      	bcs.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010d4:	f243 0730 	movw	r7, #12336	; 0x3030
900010d8:	45bc      	cmp	ip, r7
900010da:	d124      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010dc:	f246 3764 	movw	r7, #25444	; 0x6364
900010e0:	42bb      	cmp	r3, r7
900010e2:	d120      	bne.n	90001126 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010e4:	bb1d      	cbnz	r5, 9000112e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
          currentMovieOffset += 8;
900010e6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010e8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ec:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010f0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010f2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010f4:	d002      	beq.n	900010fc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010f6:	2001      	movs	r0, #1
}
900010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010fc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010fe:	6a23      	ldr	r3, [r4, #32]
90001100:	2000      	movs	r0, #0
90001102:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
90001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
9000110a:	230d      	movs	r3, #13
9000110c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90001110:	e7ae      	b.n	90001070 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
90001112:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
90001114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
90001116:	4629      	mov	r1, r5
90001118:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
9000111a:	f832 c005 	ldrh.w	ip, [r2, r5]
9000111e:	442a      	add	r2, r5
90001120:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001122:	6855      	ldr	r5, [r2, #4]
90001124:	e7d0      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001126:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001128:	2d00      	cmp	r5, #0
9000112a:	d1dd      	bne.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000112c:	e7db      	b.n	900010e6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000112e:	f101 0708 	add.w	r7, r1, #8
90001132:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001134:	b1f0      	cbz	r0, 90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001138:	429d      	cmp	r5, r3
9000113a:	d824      	bhi.n	90001186 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000113c:	6803      	ldr	r3, [r0, #0]
9000113e:	4639      	mov	r1, r7
90001140:	68db      	ldr	r3, [r3, #12]
90001142:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001144:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001146:	462a      	mov	r2, r5
90001148:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000114a:	6803      	ldr	r3, [r0, #0]
9000114c:	691b      	ldr	r3, [r3, #16]
9000114e:	4798      	blx	r3
90001150:	b910      	cbnz	r0, 90001158 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001152:	230d      	movs	r3, #13
90001154:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001158:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000115a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000115c:	b126      	cbz	r6, 90001168 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000115e:	4633      	mov	r3, r6
90001160:	462a      	mov	r2, r5
90001162:	4620      	mov	r0, r4
90001164:	f7ff fc42 	bl	900009ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001168:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000116c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000116e:	442a      	add	r2, r5
            frameNumber++;
90001170:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001172:	e7b9      	b.n	900010e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001174:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001176:	4439      	add	r1, r7
90001178:	e7f0      	b.n	9000115c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000117a:	4b07      	ldr	r3, [pc, #28]	; (90001198 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000117c:	21b8      	movs	r1, #184	; 0xb8
9000117e:	4a07      	ldr	r2, [pc, #28]	; (9000119c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001180:	4807      	ldr	r0, [pc, #28]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001182:	f026 fab7 	bl	900276f4 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001186:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001188:	4b06      	ldr	r3, [pc, #24]	; (900011a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000118a:	4a07      	ldr	r2, [pc, #28]	; (900011a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000118c:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000118e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001192:	4803      	ldr	r0, [pc, #12]	; (900011a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001194:	f026 faae 	bl	900276f4 <__assert_func>
90001198:	90028b98 	.word	0x90028b98
9000119c:	90028c18 	.word	0x90028c18
900011a0:	90028ae4 	.word	0x90028ae4
900011a4:	90028b40 	.word	0x90028b40
900011a8:	90028b54 	.word	0x90028b54

900011ac <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011ac:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011ae:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b0:	4b0f      	ldr	r3, [pc, #60]	; (900011f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
900011b2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011b4:	6003      	str	r3, [r0, #0]
900011b6:	63c5      	str	r5, [r0, #60]	; 0x3c
900011b8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
900011bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011c4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011c8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011cc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011d0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011d8:	f002 fa9a 	bl	90003710 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011dc:	462a      	mov	r2, r5
900011de:	4629      	mov	r1, r5
900011e0:	2001      	movs	r0, #1
900011e2:	f00d fe33 	bl	9000ee4c <osSemaphoreNew>
900011e6:	4b03      	ldr	r3, [pc, #12]	; (900011f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011e8:	4602      	mov	r2, r0
}
900011ea:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011ec:	601a      	str	r2, [r3, #0]
}
900011ee:	bd38      	pop	{r3, r4, r5, pc}
900011f0:	90028d98 	.word	0x90028d98
900011f4:	24005bd8 	.word	0x24005bd8

900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011fc:	2100      	movs	r1, #0
    if (reader != 0)
900011fe:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
90001200:	b083      	sub	sp, #12
90001202:	4605      	mov	r5, r0
    currentMovieOffset = 0;
90001204:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
90001206:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
9000120a:	2e00      	cmp	r6, #0
9000120c:	f000 81aa 	beq.w	90001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
90001210:	6b83      	ldr	r3, [r0, #56]	; 0x38
90001212:	2b47      	cmp	r3, #71	; 0x47
90001214:	f240 8202 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001218:	6833      	ldr	r3, [r6, #0]
9000121a:	4630      	mov	r0, r6
9000121c:	68db      	ldr	r3, [r3, #12]
9000121e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001220:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001222:	2248      	movs	r2, #72	; 0x48
90001224:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001226:	6803      	ldr	r3, [r0, #0]
90001228:	691b      	ldr	r3, [r3, #16]
9000122a:	4798      	blx	r3
9000122c:	2800      	cmp	r0, #0
9000122e:	f000 80ce 	beq.w	900013ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001232:	2300      	movs	r3, #0
    if (reader != 0)
90001234:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001236:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001238:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000123a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000123c:	2e00      	cmp	r6, #0
9000123e:	f000 8192 	beq.w	90001566 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001242:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001246:	2204      	movs	r2, #4
90001248:	49be      	ldr	r1, [pc, #760]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000124a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000124e:	4658      	mov	r0, fp
90001250:	f026 fd0c 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001254:	2800      	cmp	r0, #0
90001256:	f040 81ea 	bne.w	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000125a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000125e:	2204      	movs	r2, #4
90001260:	49b9      	ldr	r1, [pc, #740]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001262:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001264:	4440      	add	r0, r8
90001266:	f026 fd01 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000126a:	2800      	cmp	r0, #0
9000126c:	f040 81fa 	bne.w	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001270:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001274:	2204      	movs	r2, #4
90001276:	49b5      	ldr	r1, [pc, #724]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001278:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000127c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001280:	f026 fcf4 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001284:	9001      	str	r0, [sp, #4]
90001286:	2800      	cmp	r0, #0
90001288:	f040 81e2 	bne.w	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000128c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001290:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001294:	0424      	lsls	r4, r4, #16
90001296:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000129a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000129e:	f89b 2010 	ldrb.w	r2, [fp, #16]
900012a2:	4314      	orrs	r4, r2
    assert(aviListSize);
900012a4:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
900012a8:	f000 81cb 	beq.w	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900012ac:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a7      	ldr	r1, [pc, #668]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
900012b4:	4440      	add	r0, r8
900012b6:	f026 fcd9 	bl	90027c6c <strncmp>
    if (compare(offset, "hdrl", 4))
900012ba:	2800      	cmp	r0, #0
900012bc:	f000 808b 	beq.w	900013d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012c0:	2306      	movs	r3, #6
        foundFrame = false;
900012c2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012c6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ce:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012d0:	2204      	movs	r2, #4
900012d2:	49a0      	ldr	r1, [pc, #640]	; (90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012d4:	f026 fcca 	bl	90027c6c <strncmp>
    if (compare(offset, "avih", 4))
900012d8:	2800      	cmp	r0, #0
900012da:	f000 8085 	beq.w	900013e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012de:	2307      	movs	r3, #7
900012e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012e4:	4454      	add	r4, sl
900012e6:	3408      	adds	r4, #8
    if (reader != 0)
900012e8:	f1b9 0f00 	cmp.w	r9, #0
900012ec:	d015      	beq.n	9000131a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012f0:	2b0b      	cmp	r3, #11
900012f2:	f240 8193 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012f6:	f8d9 3000 	ldr.w	r3, [r9]
900012fa:	4621      	mov	r1, r4
900012fc:	4648      	mov	r0, r9
900012fe:	68db      	ldr	r3, [r3, #12]
90001300:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001302:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001304:	220c      	movs	r2, #12
90001306:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001308:	6803      	ldr	r3, [r0, #0]
9000130a:	691b      	ldr	r3, [r3, #16]
9000130c:	4798      	blx	r3
9000130e:	b910      	cbnz	r0, 90001316 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
90001310:	230d      	movs	r3, #13
90001312:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001316:	6b2e      	ldr	r6, [r5, #48]	; 0x30
90001318:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
9000131a:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
9000131e:	4f8e      	ldr	r7, [pc, #568]	; (90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001320:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001324:	2e00      	cmp	r6, #0
90001326:	d041      	beq.n	900013ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000132a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000132c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000132e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001330:	eba8 0303 	sub.w	r3, r8, r3
90001334:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001336:	f026 fc99 	bl	90027c6c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000133a:	2800      	cmp	r0, #0
9000133c:	d03e      	beq.n	900013bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000133e:	f1b9 0f00 	cmp.w	r9, #0
90001342:	d13e      	bne.n	900013c2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001344:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001346:	42a3      	cmp	r3, r4
90001348:	f240 80a7 	bls.w	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000134c:	3404      	adds	r4, #4
    if (reader != 0)
9000134e:	2e00      	cmp	r6, #0
90001350:	d046      	beq.n	900013e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001352:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001354:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001358:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000135a:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000135c:	eb01 0204 	add.w	r2, r1, r4
90001360:	5d09      	ldrb	r1, [r1, r4]
90001362:	7894      	ldrb	r4, [r2, #2]
90001364:	7850      	ldrb	r0, [r2, #1]
90001366:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000136a:	78d2      	ldrb	r2, [r2, #3]
9000136c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001370:	ea44 0401 	orr.w	r4, r4, r1
90001374:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001378:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000137a:	f240 814f 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000137e:	6833      	ldr	r3, [r6, #0]
90001380:	4621      	mov	r1, r4
90001382:	4630      	mov	r0, r6
90001384:	68db      	ldr	r3, [r3, #12]
90001386:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001388:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000138a:	220c      	movs	r2, #12
9000138c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000138e:	6803      	ldr	r3, [r0, #0]
90001390:	691b      	ldr	r3, [r3, #16]
90001392:	4798      	blx	r3
90001394:	b910      	cbnz	r0, 9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001396:	230d      	movs	r3, #13
90001398:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000139c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139e:	f104 0808 	add.w	r8, r4, #8
900013a2:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900013a6:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900013a8:	2e00      	cmp	r6, #0
900013aa:	d1bd      	bne.n	90001328 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
900013ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013ae:	2204      	movs	r2, #4
900013b0:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
900013b2:	4440      	add	r0, r8
    return strncmp(src, str, num);
900013b4:	f026 fc5a 	bl	90027c6c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013b8:	2800      	cmp	r0, #0
900013ba:	d1c0      	bne.n	9000133e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
900013bc:	f1b9 0f00 	cmp.w	r9, #0
900013c0:	d06b      	beq.n	9000149a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013c2:	230a      	movs	r3, #10
900013c4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013c8:	b003      	add	sp, #12
900013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ce:	230d      	movs	r3, #13
900013d0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013d4:	e72d      	b.n	90001232 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013d6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013da:	f04f 0b01 	mov.w	fp, #1
900013de:	e776      	b.n	900012ce <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013e2:	591c      	ldr	r4, [r3, r4]
900013e4:	4444      	add	r4, r8
    return movieData + offset;
900013e6:	e79b      	b.n	90001320 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013e8:	f1bb 0f00 	cmp.w	fp, #0
900013ec:	f43f af7a 	beq.w	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013f0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013f4:	f1b9 0f00 	cmp.w	r9, #0
900013f8:	f000 80f4 	beq.w	900015e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	1ac9      	subs	r1, r1, r3
90001402:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001406:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000140a:	f812 8001 	ldrb.w	r8, [r2, r1]
9000140e:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
90001412:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
90001416:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
9000141a:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141c:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001420:	4439      	add	r1, r7
90001422:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001424:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001428:	f89e e003 	ldrb.w	lr, [lr, #3]
9000142c:	041b      	lsls	r3, r3, #16
9000142e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001432:	ea43 0308 	orr.w	r3, r3, r8
90001436:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000143a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000143e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001442:	099b      	lsrs	r3, r3, #6
90001444:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001446:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000144a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	f812 e000 	ldrb.w	lr, [r2, r0]
90001454:	f89c c003 	ldrb.w	ip, [ip, #3]
90001458:	1850      	adds	r0, r2, r1
9000145a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000145e:	ea43 030e 	orr.w	r3, r3, lr
90001462:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001466:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001468:	7883      	ldrb	r3, [r0, #2]
9000146a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000146e:	041b      	lsls	r3, r3, #16
90001470:	5c51      	ldrb	r1, [r2, r1]
90001472:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001476:	430b      	orrs	r3, r1
90001478:	78c1      	ldrb	r1, [r0, #3]
9000147a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000147e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001480:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001482:	788b      	ldrb	r3, [r1, #2]
90001484:	7848      	ldrb	r0, [r1, #1]
90001486:	041b      	lsls	r3, r3, #16
90001488:	5dd2      	ldrb	r2, [r2, r7]
9000148a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000148e:	4313      	orrs	r3, r2
90001490:	78ca      	ldrb	r2, [r1, #3]
90001492:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001496:	612b      	str	r3, [r5, #16]
90001498:	e724      	b.n	900012e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000149a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000149e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
900014a0:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
900014a2:	2e00      	cmp	r6, #0
900014a4:	f000 80b2 	beq.w	9000160c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
900014a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
900014aa:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
900014ac:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f104 0c02 	add.w	ip, r4, #2
900014b4:	1c67      	adds	r7, r4, #1
900014b6:	f811 e004 	ldrb.w	lr, [r1, r4]
900014ba:	1ce0      	adds	r0, r4, #3
900014bc:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014c0:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014c2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014c6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014ca:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ce:	ea43 030e 	orr.w	r3, r3, lr
900014d2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014d6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014da:	4443      	add	r3, r8
900014dc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014de:	f811 300c 	ldrb.w	r3, [r1, ip]
900014e2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014e6:	5d0f      	ldrb	r7, [r1, r4]
900014e8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014ec:	5c09      	ldrb	r1, [r1, r0]
900014ee:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014f2:	ea44 0407 	orr.w	r4, r4, r7
900014f6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014fa:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014fc:	f240 808e 	bls.w	9000161c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
90001500:	6833      	ldr	r3, [r6, #0]
90001502:	4621      	mov	r1, r4
90001504:	4630      	mov	r0, r6
90001506:	68db      	ldr	r3, [r3, #12]
90001508:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000150a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000150c:	2204      	movs	r2, #4
9000150e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001510:	6803      	ldr	r3, [r0, #0]
90001512:	691b      	ldr	r3, [r3, #16]
90001514:	4798      	blx	r3
90001516:	2800      	cmp	r0, #0
90001518:	d05a      	beq.n	900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
9000151a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000151c:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000151e:	2b00      	cmp	r3, #0
90001520:	f000 80aa 	beq.w	90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001524:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001526:	2204      	movs	r2, #4
90001528:	490c      	ldr	r1, [pc, #48]	; (9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000152a:	f026 fb9f 	bl	90027c6c <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000152e:	2800      	cmp	r0, #0
90001530:	d166      	bne.n	90001600 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001532:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001534:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001536:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001538:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000153a:	622b      	str	r3, [r5, #32]
}
9000153c:	b003      	add	sp, #12
9000153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001542:	bf00      	nop
90001544:	90028c74 	.word	0x90028c74
90001548:	90028d2c 	.word	0x90028d2c
9000154c:	90028d24 	.word	0x90028d24
90001550:	90028d1c 	.word	0x90028d1c
90001554:	90028d04 	.word	0x90028d04
90001558:	90028d0c 	.word	0x90028d0c
9000155c:	90028d14 	.word	0x90028d14
90001560:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001564:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001566:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000156a:	2204      	movs	r2, #4
9000156c:	4944      	ldr	r1, [pc, #272]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000156e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001572:	4620      	mov	r0, r4
90001574:	f026 fb7a 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001578:	2800      	cmp	r0, #0
9000157a:	d158      	bne.n	9000162e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000157c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001580:	2204      	movs	r2, #4
90001582:	4940      	ldr	r1, [pc, #256]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001584:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001586:	4440      	add	r0, r8
90001588:	f026 fb70 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000158c:	2800      	cmp	r0, #0
9000158e:	d169      	bne.n	90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001590:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	493c      	ldr	r1, [pc, #240]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001598:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000159c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
900015a0:	f026 fb64 	bl	90027c6c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
900015a4:	4683      	mov	fp, r0
900015a6:	2800      	cmp	r0, #0
900015a8:	d152      	bne.n	90001650 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015aa:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015ac:	2c00      	cmp	r4, #0
900015ae:	d048      	beq.n	90001642 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
900015b0:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015b4:	2204      	movs	r2, #4
900015b6:	4935      	ldr	r1, [pc, #212]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
900015b8:	4440      	add	r0, r8
900015ba:	f026 fb57 	bl	90027c6c <strncmp>
    if (compare(offset, "hdrl", 4))
900015be:	b958      	cbnz	r0, 900015d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015c0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015c4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c8:	4440      	add	r0, r8
900015ca:	f04f 0900 	mov.w	r9, #0
900015ce:	e67f      	b.n	900012d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015d0:	230d      	movs	r3, #13
900015d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015d6:	e7a0      	b.n	9000151a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d8:	2306      	movs	r3, #6
    offset += 4;
900015da:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015de:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015e2:	e7f1      	b.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015e6:	585a      	ldr	r2, [r3, r1]
900015e8:	443b      	add	r3, r7
900015ea:	4929      	ldr	r1, [pc, #164]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015ec:	fba1 1202 	umull	r1, r2, r1, r2
900015f0:	0992      	lsrs	r2, r2, #6
900015f2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015f6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015fa:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015fe:	e74a      	b.n	90001496 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
90001600:	230b      	movs	r3, #11
90001602:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
90001606:	b003      	add	sp, #12
90001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000160c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000160e:	5903      	ldr	r3, [r0, r4]
90001610:	4443      	add	r3, r8
90001612:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
90001614:	5904      	ldr	r4, [r0, r4]
90001616:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
90001618:	4420      	add	r0, r4
9000161a:	e784      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000161e:	4b1d      	ldr	r3, [pc, #116]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001620:	4a1d      	ldr	r2, [pc, #116]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001622:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001624:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001628:	481c      	ldr	r0, [pc, #112]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162a:	f026 f863 	bl	900276f4 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000162e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001630:	4b1b      	ldr	r3, [pc, #108]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001632:	4a1c      	ldr	r2, [pc, #112]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001634:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001638:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000163c:	4817      	ldr	r0, [pc, #92]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000163e:	f026 f859 	bl	900276f4 <__assert_func>
    assert(aviListSize);
90001642:	4b19      	ldr	r3, [pc, #100]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001644:	f240 1149 	movw	r1, #329	; 0x149
90001648:	4a16      	ldr	r2, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	4814      	ldr	r0, [pc, #80]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000164c:	f026 f852 	bl	900276f4 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001650:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001652:	4b16      	ldr	r3, [pc, #88]	; (900016ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001654:	4a13      	ldr	r2, [pc, #76]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001656:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000165a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000165e:	480f      	ldr	r0, [pc, #60]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001660:	f026 f848 	bl	900276f4 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001664:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001666:	4b12      	ldr	r3, [pc, #72]	; (900016b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001668:	4a0e      	ldr	r2, [pc, #56]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000166a:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000166e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001672:	480a      	ldr	r0, [pc, #40]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001674:	f026 f83e 	bl	900276f4 <__assert_func>
        src = (const char*)movieData + offset;
90001678:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000167a:	4420      	add	r0, r4
9000167c:	e753      	b.n	90001526 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000167e:	bf00      	nop
90001680:	90028c74 	.word	0x90028c74
90001684:	90028d2c 	.word	0x90028d2c
90001688:	90028d24 	.word	0x90028d24
9000168c:	90028d1c 	.word	0x90028d1c
90001690:	10624dd3 	.word	0x10624dd3
90001694:	90028b40 	.word	0x90028b40
90001698:	90028b54 	.word	0x90028b54
9000169c:	90028ae4 	.word	0x90028ae4
900016a0:	90028c7c 	.word	0x90028c7c
900016a4:	90028c98 	.word	0x90028c98
900016a8:	90028cf8 	.word	0x90028cf8
900016ac:	90028ce0 	.word	0x90028ce0
900016b0:	90028cc8 	.word	0x90028cc8

900016b4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016b4:	b410      	push	{r4}
    reader = 0; //not using reader
900016b6:	2400      	movs	r4, #0
    movieLength = length;
900016b8:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016bc:	6304      	str	r4, [r0, #48]	; 0x30
}
900016be:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016c2:	f7ff bd99 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016c6:	bf00      	nop

900016c8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016ca:	680b      	ldr	r3, [r1, #0]
{
900016cc:	4604      	mov	r4, r0
    movieData = 0;
900016ce:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016d0:	4608      	mov	r0, r1
900016d2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016d4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d8:	4798      	blx	r3
900016da:	4603      	mov	r3, r0
    readVideoHeader();
900016dc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016de:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016e4:	f7ff bd88 	b.w	900011f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e8 <HAL_JPEG_InfoReadyCallback>:
{
900016e8:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ea:	684b      	ldr	r3, [r1, #4]
{
900016ec:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ee:	2b01      	cmp	r3, #1
900016f0:	d01a      	beq.n	90001728 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016f2:	2b02      	cmp	r3, #2
900016f4:	d010      	beq.n	90001718 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016f6:	b94b      	cbnz	r3, 9000170c <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	0759      	lsls	r1, r3, #29
900016fc:	d12f      	bne.n	9000175e <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016fe:	6883      	ldr	r3, [r0, #8]
90001700:	075a      	lsls	r2, r3, #29
90001702:	d003      	beq.n	9000170c <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
90001704:	f023 0307 	bic.w	r3, r3, #7
90001708:	3308      	adds	r3, #8
9000170a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000170c:	4a1a      	ldr	r2, [pc, #104]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
9000170e:	491b      	ldr	r1, [pc, #108]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001710:	f011 f95a 	bl	900129c8 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001714:	bb40      	cbnz	r0, 90001768 <HAL_JPEG_InfoReadyCallback+0x80>
}
90001716:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001718:	68cb      	ldr	r3, [r1, #12]
9000171a:	071a      	lsls	r2, r3, #28
9000171c:	d0ef      	beq.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000171e:	f023 030f 	bic.w	r3, r3, #15
90001722:	3310      	adds	r3, #16
90001724:	60cb      	str	r3, [r1, #12]
90001726:	e7ea      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001728:	68cb      	ldr	r3, [r1, #12]
9000172a:	071a      	lsls	r2, r3, #28
9000172c:	d003      	beq.n	90001736 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000172e:	f023 030f 	bic.w	r3, r3, #15
90001732:	3310      	adds	r3, #16
90001734:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001736:	6883      	ldr	r3, [r0, #8]
90001738:	0719      	lsls	r1, r3, #28
9000173a:	d003      	beq.n	90001744 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000173c:	f023 030f 	bic.w	r3, r3, #15
90001740:	3310      	adds	r3, #16
90001742:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001744:	4a0c      	ldr	r2, [pc, #48]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x90>)
90001746:	490d      	ldr	r1, [pc, #52]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x94>)
90001748:	f001 ff56 	bl	900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000174c:	2800      	cmp	r0, #0
9000174e:	d0e2      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001750:	4b0b      	ldr	r3, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
90001752:	f240 212e 	movw	r1, #558	; 0x22e
90001756:	4a0b      	ldr	r2, [pc, #44]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001758:	480b      	ldr	r0, [pc, #44]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000175a:	f025 ffcb 	bl	900276f4 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000175e:	f023 0307 	bic.w	r3, r3, #7
90001762:	3308      	adds	r3, #8
90001764:	60c3      	str	r3, [r0, #12]
90001766:	e7ca      	b.n	900016fe <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001768:	4b05      	ldr	r3, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0x98>)
9000176a:	f44f 7112 	mov.w	r1, #584	; 0x248
9000176e:	4a05      	ldr	r2, [pc, #20]	; (90001784 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001770:	4805      	ldr	r0, [pc, #20]	; (90001788 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001772:	f025 ffbf 	bl	900276f4 <__assert_func>
90001776:	bf00      	nop
90001778:	24005b98 	.word	0x24005b98
9000177c:	24005bd4 	.word	0x24005bd4
90001780:	90028d34 	.word	0x90028d34
90001784:	90028d48 	.word	0x90028d48
90001788:	90028ae4 	.word	0x90028ae4

9000178c <HAL_JPEG_GetDataCallback>:
{
9000178c:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
9000178e:	4c0c      	ldr	r4, [pc, #48]	; (900017c0 <HAL_JPEG_GetDataCallback+0x34>)
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001790:	4a0c      	ldr	r2, [pc, #48]	; (900017c4 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001792:	6823      	ldr	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001794:	6812      	ldr	r2, [r2, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001796:	440b      	add	r3, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001798:	4293      	cmp	r3, r2
  JPEG_InputImageIndex += NbDecodedData;
9000179a:	6023      	str	r3, [r4, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000179c:	d302      	bcc.n	900017a4 <HAL_JPEG_GetDataCallback+0x18>
}
9000179e:	f85d 4b04 	ldr.w	r4, [sp], #4
900017a2:	4770      	bx	lr
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
900017a4:	1ad2      	subs	r2, r2, r3
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4b08      	ldr	r3, [pc, #32]	; (900017c8 <HAL_JPEG_GetDataCallback+0x3c>)
900017a8:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ae:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b0:	bf28      	it	cs
900017b2:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017ba:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017bc:	f009 bf46 	b.w	9000b64c <HAL_JPEG_ConfigInputBuffer>
900017c0:	24005b7c 	.word	0x24005b7c
900017c4:	24005b80 	.word	0x24005b80
900017c8:	24005b78 	.word	0x24005b78

900017cc <HAL_JPEG_DataReadyCallback>:
{
900017cc:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ce:	4e1e      	ldr	r6, [pc, #120]	; (90001848 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017d0:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d2:	2001      	movs	r0, #1
900017d4:	4c1d      	ldr	r4, [pc, #116]	; (9000184c <HAL_JPEG_DataReadyCallback+0x80>)
900017d6:	6833      	ldr	r3, [r6, #0]
900017d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017dc:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017de:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e8:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ea:	d91a      	bls.n	90001822 <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017ec:	2200      	movs	r2, #0
900017ee:	4613      	mov	r3, r2
900017f0:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017f6:	005a      	lsls	r2, r3, #1
900017f8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017fc:	b9c9      	cbnz	r1, 90001832 <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017fe:	4914      	ldr	r1, [pc, #80]	; (90001850 <HAL_JPEG_DataReadyCallback+0x84>)
90001800:	4413      	add	r3, r2
90001802:	4628      	mov	r0, r5
90001804:	68ca      	ldr	r2, [r1, #12]
90001806:	eb04 0483 	add.w	r4, r4, r3, lsl #2
9000180a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9000180e:	6861      	ldr	r1, [r4, #4]
90001810:	01d2      	lsls	r2, r2, #7
90001812:	f009 ff1f 	bl	9000b654 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
90001816:	4b0f      	ldr	r3, [pc, #60]	; (90001854 <HAL_JPEG_DataReadyCallback+0x88>)
}
90001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
9000181c:	6818      	ldr	r0, [r3, #0]
9000181e:	f00d bb99 	b.w	9000ef54 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001822:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001826:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001828:	005a      	lsls	r2, r3, #1
9000182a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000182e:	2900      	cmp	r1, #0
90001830:	d0e5      	beq.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001832:	2102      	movs	r1, #2
90001834:	4628      	mov	r0, r5
90001836:	f009 fed1 	bl	9000b5dc <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
9000183a:	4a07      	ldr	r2, [pc, #28]	; (90001858 <HAL_JPEG_DataReadyCallback+0x8c>)
9000183c:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000183e:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001840:	6011      	str	r1, [r2, #0]
90001842:	fa03 f201 	lsl.w	r2, r3, r1
90001846:	e7da      	b.n	900017fe <HAL_JPEG_DataReadyCallback+0x32>
90001848:	24005b88 	.word	0x24005b88
9000184c:	24000004 	.word	0x24000004
90001850:	24005ba0 	.word	0x24005ba0
90001854:	24005bd8 	.word	0x24005bd8
90001858:	24005b9c 	.word	0x24005b9c

9000185c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000185c:	b672      	cpsid	i
  while (1)
9000185e:	e7fe      	b.n	9000185e <HAL_JPEG_ErrorCallback+0x2>

90001860 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001860:	4b01      	ldr	r3, [pc, #4]	; (90001868 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001862:	2201      	movs	r2, #1
90001864:	601a      	str	r2, [r3, #0]
}
90001866:	4770      	bx	lr
90001868:	24005b90 	.word	0x24005b90

9000186c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000186c:	b570      	push	{r4, r5, r6, lr}
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	491b      	ldr	r1, [pc, #108]	; (900018dc <DMA2D_CopyBuffer+0x70>)
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001870:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001872:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001874:	4c1a      	ldr	r4, [pc, #104]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001876:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001878:	6363      	str	r3, [r4, #52]	; 0x34
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187a:	012b      	lsls	r3, r5, #4

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000187c:	4e19      	ldr	r6, [pc, #100]	; (900018e4 <DMA2D_CopyBuffer+0x78>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000187e:	fbb3 fcf2 	udiv	ip, r3, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001882:	fb02 321c 	mls	r2, r2, ip, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001886:	684b      	ldr	r3, [r1, #4]
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001888:	6836      	ldr	r6, [r6, #0]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188a:	fb03 fc0c 	mul.w	ip, r3, ip
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188e:	68cb      	ldr	r3, [r1, #12]
90001890:	eba6 0e03 	sub.w	lr, r6, r3
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001894:	690e      	ldr	r6, [r1, #16]
90001896:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000189a:	4575      	cmp	r5, lr
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000189c:	fb06 f202 	mul.w	r2, r6, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
900018a0:	d317      	bcc.n	900018d2 <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018a2:	6889      	ldr	r1, [r1, #8]
900018a4:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a8:	6461      	str	r1, [r4, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018aa:	490f      	ldr	r1, [pc, #60]	; (900018e8 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ac:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018b2:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b4:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018b6:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ba:	4411      	add	r1, r2
900018bc:	4a08      	ldr	r2, [pc, #32]	; (900018e0 <DMA2D_CopyBuffer+0x74>)
900018be:	4461      	add	r1, ip
900018c0:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018c2:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c4:	4909      	ldr	r1, [pc, #36]	; (900018ec <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	4b0a      	ldr	r3, [pc, #40]	; (900018f0 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c8:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018ca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018cc:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ce:	6013      	str	r3, [r2, #0]
}
900018d0:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018d2:	0519      	lsls	r1, r3, #20
900018d4:	f041 0110 	orr.w	r1, r1, #16
900018d8:	6461      	str	r1, [r4, #68]	; 0x44
900018da:	e7e6      	b.n	900018aa <DMA2D_CopyBuffer+0x3e>
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	52001000 	.word	0x52001000
900018e4:	24005b98 	.word	0x24005b98
900018e8:	24005b74 	.word	0x24005b74
900018ec:	ff09000b 	.word	0xff09000b
900018f0:	00010201 	.word	0x00010201

900018f4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018f4:	2200      	movs	r2, #0
900018f6:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f8:	490b      	ldr	r1, [pc, #44]	; (90001928 <DMA2D_ExternalJobCompleted+0x34>)
900018fa:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018fc:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018fe:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
90001900:	b911      	cbnz	r1, 90001908 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
90001902:	4b0a      	ldr	r3, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x38>)
90001904:	2201      	movs	r2, #1
90001906:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001908:	4b09      	ldr	r3, [pc, #36]	; (90001930 <DMA2D_ExternalJobCompleted+0x3c>)
9000190a:	490a      	ldr	r1, [pc, #40]	; (90001934 <DMA2D_ExternalJobCompleted+0x40>)
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	68c9      	ldr	r1, [r1, #12]
90001910:	6802      	ldr	r2, [r0, #0]
90001912:	1a5b      	subs	r3, r3, r1
90001914:	429a      	cmp	r2, r3
90001916:	d302      	bcc.n	9000191e <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001918:	4b07      	ldr	r3, [pc, #28]	; (90001938 <DMA2D_ExternalJobCompleted+0x44>)
9000191a:	2201      	movs	r2, #1
9000191c:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
9000191e:	4b07      	ldr	r3, [pc, #28]	; (9000193c <DMA2D_ExternalJobCompleted+0x48>)
90001920:	6818      	ldr	r0, [r3, #0]
90001922:	f00d bb17 	b.w	9000ef54 <osSemaphoreRelease>
90001926:	bf00      	nop
90001928:	24005bb4 	.word	0x24005bb4
9000192c:	24005b70 	.word	0x24005b70
90001930:	24005b98 	.word	0x24005b98
90001934:	24005ba0 	.word	0x24005ba0
90001938:	24005b6c 	.word	0x24005b6c
9000193c:	24005bd8 	.word	0x24005bd8

90001940 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001940:	4b03      	ldr	r3, [pc, #12]	; (90001950 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001942:	2200      	movs	r2, #0
90001944:	2102      	movs	r1, #2
90001946:	60da      	str	r2, [r3, #12]
90001948:	6019      	str	r1, [r3, #0]
9000194a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000194e:	4770      	bx	lr
90001950:	24005bb4 	.word	0x24005bb4

90001954 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001954:	2101      	movs	r1, #1
90001956:	2200      	movs	r2, #0
{
90001958:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000195a:	4608      	mov	r0, r1
9000195c:	f00d fa76 	bl	9000ee4c <osSemaphoreNew>
90001960:	4b0b      	ldr	r3, [pc, #44]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001962:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001964:	b140      	cbz	r0, 90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001966:	2200      	movs	r2, #0
90001968:	2104      	movs	r1, #4
9000196a:	2001      	movs	r0, #1
9000196c:	f00d fb1e 	bl	9000efac <osMessageQueueNew>
90001970:	4b08      	ldr	r3, [pc, #32]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001972:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001974:	b130      	cbz	r0, 90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001976:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001978:	4b07      	ldr	r3, [pc, #28]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000197a:	2128      	movs	r1, #40	; 0x28
9000197c:	4a07      	ldr	r2, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000197e:	4808      	ldr	r0, [pc, #32]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001980:	f025 feb8 	bl	900276f4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001984:	4b07      	ldr	r3, [pc, #28]	; (900019a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001986:	212c      	movs	r1, #44	; 0x2c
90001988:	4a04      	ldr	r2, [pc, #16]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000198a:	4805      	ldr	r0, [pc, #20]	; (900019a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000198c:	f025 feb2 	bl	900276f4 <__assert_func>
90001990:	24005be0 	.word	0x24005be0
90001994:	24005bdc 	.word	0x24005bdc
90001998:	90028dd4 	.word	0x90028dd4
9000199c:	90028e20 	.word	0x90028e20
900019a0:	90028e50 	.word	0x90028e50
900019a4:	90028ea4 	.word	0x90028ea4

900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a8:	4b02      	ldr	r3, [pc, #8]	; (900019b4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019aa:	f04f 31ff 	mov.w	r1, #4294967295
900019ae:	6818      	ldr	r0, [r3, #0]
900019b0:	f00d ba9c 	b.w	9000eeec <osSemaphoreAcquire>
900019b4:	24005be0 	.word	0x24005be0

900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b8:	4b01      	ldr	r3, [pc, #4]	; (900019c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019ba:	6818      	ldr	r0, [r3, #0]
900019bc:	f00d baca 	b.w	9000ef54 <osSemaphoreRelease>
900019c0:	24005be0 	.word	0x24005be0

900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019c4:	4b02      	ldr	r3, [pc, #8]	; (900019d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019c6:	2100      	movs	r1, #0
900019c8:	6818      	ldr	r0, [r3, #0]
900019ca:	f00d ba8f 	b.w	9000eeec <osSemaphoreAcquire>
900019ce:	bf00      	nop
900019d0:	24005be0 	.word	0x24005be0

900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019d4:	4b01      	ldr	r3, [pc, #4]	; (900019dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019d6:	6818      	ldr	r0, [r3, #0]
900019d8:	f00d babc 	b.w	9000ef54 <osSemaphoreRelease>
900019dc:	24005be0 	.word	0x24005be0

900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019e0:	4803      	ldr	r0, [pc, #12]	; (900019f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019e2:	2300      	movs	r3, #0
900019e4:	4903      	ldr	r1, [pc, #12]	; (900019f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019e6:	461a      	mov	r2, r3
900019e8:	6800      	ldr	r0, [r0, #0]
900019ea:	f00d bb1d 	b.w	9000f028 <osMessageQueuePut>
900019ee:	bf00      	nop
900019f0:	24005bdc 	.word	0x24005bdc
900019f4:	2400001c 	.word	0x2400001c

900019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fa:	2300      	movs	r3, #0
{
900019fc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019fe:	4c07      	ldr	r4, [pc, #28]	; (90001a1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001a00:	461a      	mov	r2, r3
90001a02:	a901      	add	r1, sp, #4
90001a04:	6820      	ldr	r0, [r4, #0]
90001a06:	f00d fb51 	bl	9000f0ac <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a0a:	f04f 33ff 	mov.w	r3, #4294967295
90001a0e:	2200      	movs	r2, #0
90001a10:	a901      	add	r1, sp, #4
90001a12:	6820      	ldr	r0, [r4, #0]
90001a14:	f00d fb4a 	bl	9000f0ac <osMessageQueueGet>
}
90001a18:	b002      	add	sp, #8
90001a1a:	bd10      	pop	{r4, pc}
90001a1c:	24005bdc 	.word	0x24005bdc

90001a20 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a20:	6803      	ldr	r3, [r0, #0]
90001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a24:	4718      	bx	r3
90001a26:	bf00      	nop

90001a28 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a28:	2001      	movs	r0, #1
90001a2a:	4770      	bx	lr

90001a2c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a2c:	4905      	ldr	r1, [pc, #20]	; (90001a44 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a32:	4b05      	ldr	r3, [pc, #20]	; (90001a48 <_ZN8STM32DMAD1Ev+0x1c>)
90001a34:	6001      	str	r1, [r0, #0]
90001a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a3e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a42:	4770      	bx	lr
90001a44:	90029050 	.word	0x90029050
90001a48:	e000e100 	.word	0xe000e100

90001a4c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4c:	4b0f      	ldr	r3, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a4e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a50:	490f      	ldr	r1, [pc, #60]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a56:	480f      	ldr	r0, [pc, #60]	; (90001a94 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a58:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a5c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a66:	f002 0210 	and.w	r2, r2, #16
90001a6a:	9201      	str	r2, [sp, #4]
90001a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f042 0210 	orr.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a78:	f022 0210 	bic.w	r2, r2, #16
90001a7c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a7e:	4b06      	ldr	r3, [pc, #24]	; (90001a98 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a84:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a86:	b002      	add	sp, #8
90001a88:	4770      	bx	lr
90001a8a:	bf00      	nop
90001a8c:	58024400 	.word	0x58024400
90001a90:	2400ce1c 	.word	0x2400ce1c
90001a94:	90001e45 	.word	0x90001e45
90001a98:	e000e100 	.word	0xe000e100

90001a9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a9c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001aa0:	4770      	bx	lr
90001aa2:	bf00      	nop

90001aa4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001aa4:	4909      	ldr	r1, [pc, #36]	; (90001acc <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aaa:	4b09      	ldr	r3, [pc, #36]	; (90001ad0 <_ZN8STM32DMAD0Ev+0x2c>)
90001aac:	b510      	push	{r4, lr}
90001aae:	6001      	str	r1, [r0, #0]
90001ab0:	4604      	mov	r4, r0
90001ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001aba:	f3bf 8f6f 	isb	sy
}
90001abe:	f640 51a8 	movw	r1, #3496	; 0xda8
90001ac2:	f025 fde8 	bl	90027696 <_ZdlPvj>
90001ac6:	4620      	mov	r0, r4
90001ac8:	bd10      	pop	{r4, pc}
90001aca:	bf00      	nop
90001acc:	90029050 	.word	0x90029050
90001ad0:	e000e100 	.word	0xe000e100

90001ad4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ad4:	b510      	push	{r4, lr}
90001ad6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad8:	f04f 31ff 	mov.w	r1, #4294967295
90001adc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ae0:	f00d f96e 	bl	9000edc0 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ae4:	6860      	ldr	r0, [r4, #4]
90001ae6:	6803      	ldr	r3, [r0, #0]
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	4798      	blx	r3
90001aec:	b978      	cbnz	r0, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001aee:	7a63      	ldrb	r3, [r4, #9]
90001af0:	b16b      	cbz	r3, 90001b0e <_ZN8STM32DMA5startEv+0x3a>
90001af2:	7a23      	ldrb	r3, [r4, #8]
90001af4:	b92b      	cbnz	r3, 90001b02 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001af6:	6822      	ldr	r2, [r4, #0]
90001af8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001afa:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001afe:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001b00:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b0a:	f00d b97d 	b.w	9000ee08 <osMutexRelease>
      return count_ == 0;
90001b0e:	4b0b      	ldr	r3, [pc, #44]	; (90001b3c <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b10:	68da      	ldr	r2, [r3, #12]
90001b12:	2a00      	cmp	r2, #0
90001b14:	d0f5      	beq.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
90001b16:	7a22      	ldrb	r2, [r4, #8]
90001b18:	2a00      	cmp	r2, #0
90001b1a:	d1f2      	bne.n	90001b02 <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b1c:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b1e:	2201      	movs	r2, #1
      return buffer_[head_];
90001b20:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b22:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b26:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b28:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b2c:	f7ff fe9e 	bl	9000186c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b38:	f00d b966 	b.w	9000ee08 <osMutexRelease>
90001b3c:	24005bb4 	.word	0x24005bb4

90001b40 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b40:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b42:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b46:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b48:	b943      	cbnz	r3, 90001b5c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b4a:	6803      	ldr	r3, [r0, #0]
90001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b4e:	4798      	blx	r3
      return count_ == 0;
90001b50:	4b15      	ldr	r3, [pc, #84]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b52:	68da      	ldr	r2, [r3, #12]
90001b54:	b10a      	cbz	r2, 90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b56:	7a22      	ldrb	r2, [r4, #8]
90001b58:	b1d2      	cbz	r2, 90001b90 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b5a:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b5c:	4b12      	ldr	r3, [pc, #72]	; (90001ba8 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b5e:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b60:	2a00      	cmp	r2, #0
90001b62:	d0fa      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b64:	7a01      	ldrb	r1, [r0, #8]
90001b66:	2900      	cmp	r1, #0
90001b68:	d0f7      	beq.n	90001b5a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b6a:	2100      	movs	r1, #0
      count_--;
90001b6c:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b6e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b72:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b74:	1c41      	adds	r1, r0, #1
      count_--;
90001b76:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b78:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b7a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b7e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b86:	6059      	str	r1, [r3, #4]
    }
90001b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b8c:	f7ff beb2 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b90:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b92:	2201      	movs	r2, #1
      return buffer_[head_];
90001b94:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b96:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b9a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001ba4:	f7ff be62 	b.w	9000186c <DMA2D_CopyBuffer>
90001ba8:	24005bb4 	.word	0x24005bb4

90001bac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001bac:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001bae:	7f8b      	ldrb	r3, [r1, #30]
90001bb0:	2b0a      	cmp	r3, #10
90001bb2:	d83e      	bhi.n	90001c32 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bb4:	e8df f003 	tbb	[pc, r3]
90001bb8:	3d2a063b 	.word	0x3d2a063b
90001bbc:	063d3d3d 	.word	0x063d3d3d
90001bc0:	0606      	.short	0x0606
90001bc2:	06          	.byte	0x06
90001bc3:	00          	.byte	0x00
90001bc4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bca:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bce:	4b1c      	ldr	r3, [pc, #112]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bda:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bdc:	6908      	ldr	r0, [r1, #16]
90001bde:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001be0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001be2:	680d      	ldr	r5, [r1, #0]
90001be4:	2d08      	cmp	r5, #8
90001be6:	d013      	beq.n	90001c10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bea:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bec:	4c15      	ldr	r4, [pc, #84]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bee:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bf0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bf2:	0a0a      	lsrs	r2, r1, #8
90001bf4:	0948      	lsrs	r0, r1, #5
90001bf6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bfe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001c02:	4302      	orrs	r2, r0
90001c04:	430a      	orrs	r2, r1
90001c06:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c08:	601c      	str	r4, [r3, #0]
    }
}
90001c0a:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c0c:	2400      	movs	r4, #0
90001c0e:	e7da      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c10:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c14:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c16:	4a0c      	ldr	r2, [pc, #48]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c18:	7f0c      	ldrb	r4, [r1, #28]
90001c1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c1e:	4c0b      	ldr	r4, [pc, #44]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c20:	61da      	str	r2, [r3, #28]
90001c22:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c24:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c26:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c28:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c2a:	601c      	str	r4, [r3, #0]
}
90001c2c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c2e:	2402      	movs	r4, #2
90001c30:	e7c9      	b.n	90001bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c32:	4b07      	ldr	r3, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c34:	2188      	movs	r1, #136	; 0x88
90001c36:	4a07      	ldr	r2, [pc, #28]	; (90001c54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c38:	4807      	ldr	r0, [pc, #28]	; (90001c58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c3a:	f025 fd5b 	bl	900276f4 <__assert_func>
90001c3e:	bf00      	nop
90001c40:	52001000 	.word	0x52001000
90001c44:	00030201 	.word	0x00030201
90001c48:	00010009 	.word	0x00010009
90001c4c:	00020201 	.word	0x00020201
90001c50:	90028ee8 	.word	0x90028ee8
90001c54:	90028f04 	.word	0x90028f04
90001c58:	90028f50 	.word	0x90028f50

90001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c5e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c62:	f1be 0f0b 	cmp.w	lr, #11
90001c66:	f200 80c1 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c6a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c6e:	0063      	.short	0x0063
90001c70:	004c0065 	.word	0x004c0065
90001c74:	00bf00bf 	.word	0x00bf00bf
90001c78:	00bf00bf 	.word	0x00bf00bf
90001c7c:	000c000c 	.word	0x000c000c
90001c80:	000c000c 	.word	0x000c000c
90001c84:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c86:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c88:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c8c:	f1bc 0f0b 	cmp.w	ip, #11
90001c90:	f200 80ac 	bhi.w	90001dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c94:	e8df f00c 	tbb	[pc, ip]
90001c98:	aa0e4b52 	.word	0xaa0e4b52
90001c9c:	06aaaaaa 	.word	0x06aaaaaa
90001ca0:	06060606 	.word	0x06060606
    switch (format)
90001ca4:	f1ac 0307 	sub.w	r3, ip, #7
90001ca8:	2b03      	cmp	r3, #3
90001caa:	f200 80a5 	bhi.w	90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001cae:	2605      	movs	r6, #5
90001cb0:	2701      	movs	r7, #1
90001cb2:	e001      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cb4:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cb6:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	8a8b      	ldrh	r3, [r1, #20]
90001cba:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cbc:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbe:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc8:	4b52      	ldr	r3, [pc, #328]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cca:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ccc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cce:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cd2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cd4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cd6:	6908      	ldr	r0, [r1, #16]
90001cd8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cda:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cdc:	680a      	ldr	r2, [r1, #0]
90001cde:	2a80      	cmp	r2, #128	; 0x80
90001ce0:	d03b      	beq.n	90001d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001ce2:	d812      	bhi.n	90001d0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001ce4:	2a20      	cmp	r2, #32
90001ce6:	d02c      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce8:	2a40      	cmp	r2, #64	; 0x40
90001cea:	d02a      	beq.n	90001d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cec:	2a04      	cmp	r2, #4
90001cee:	d169      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cf2:	4949      	ldr	r1, [pc, #292]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cfc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cfe:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d00:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d02:	6019      	str	r1, [r3, #0]
}
90001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001d06:	2500      	movs	r5, #0
90001d08:	e7be      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d0a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d0e:	d067      	beq.n	90001de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d14:	d156      	bne.n	90001dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d16:	7f0c      	ldrb	r4, [r1, #28]
90001d18:	4a40      	ldr	r2, [pc, #256]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d1a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d1e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d20:	4a3d      	ldr	r2, [pc, #244]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d22:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d24:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d26:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d28:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d2a:	601a      	str	r2, [r3, #0]
}
90001d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d2e:	2601      	movs	r6, #1
90001d30:	4637      	mov	r7, r6
90001d32:	e7c1      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d34:	2502      	movs	r5, #2
90001d36:	e7a7      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d38:	2501      	movs	r5, #1
90001d3a:	e7a5      	b.n	90001c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d3c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d3e:	4637      	mov	r7, r6
90001d40:	e7ba      	b.n	90001cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d42:	7f0b      	ldrb	r3, [r1, #28]
90001d44:	4a33      	ldr	r2, [pc, #204]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d46:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d4e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d50:	4b31      	ldr	r3, [pc, #196]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d52:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d54:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d56:	6013      	str	r3, [r2, #0]
}
90001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d5a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d5c:	1d14      	adds	r4, r2, #4
90001d5e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d60:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d62:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d64:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d68:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d6c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d6e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d70:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d72:	b9b1      	cbnz	r1, 90001da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d74:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d76:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d78:	69d8      	ldr	r0, [r3, #28]
90001d7a:	4a29      	ldr	r2, [pc, #164]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d7c:	3901      	subs	r1, #1
90001d7e:	4002      	ands	r2, r0
90001d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d84:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d86:	4a23      	ldr	r2, [pc, #140]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	f043 0320 	orr.w	r3, r3, #32
90001d8e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d90:	69d3      	ldr	r3, [r2, #28]
90001d92:	069b      	lsls	r3, r3, #26
90001d94:	d4fc      	bmi.n	90001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d96:	2310      	movs	r3, #16
90001d98:	6093      	str	r3, [r2, #8]
            if(blend)
90001d9a:	b324      	cbz	r4, 90001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d9c:	4b1e      	ldr	r3, [pc, #120]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d9e:	6013      	str	r3, [r2, #0]
}
90001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001da2:	2901      	cmp	r1, #1
90001da4:	d12e      	bne.n	90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da6:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da8:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001daa:	69d8      	ldr	r0, [r3, #28]
90001dac:	4a1c      	ldr	r2, [pc, #112]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001dae:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001db2:	bf18      	it	ne
90001db4:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001db6:	4002      	ands	r2, r0
90001db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001dbc:	f042 0210 	orr.w	r2, r2, #16
90001dc0:	61da      	str	r2, [r3, #28]
                break;
90001dc2:	e7e0      	b.n	90001d86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dc6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc8:	4b12      	ldr	r3, [pc, #72]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dca:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dce:	bf14      	ite	ne
90001dd0:	4a14      	ldrne	r2, [pc, #80]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dda:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001ddc:	601a      	str	r2, [r3, #0]
}
90001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001de0:	7f0c      	ldrb	r4, [r1, #28]
90001de2:	4a11      	ldr	r2, [pc, #68]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001de4:	e799      	b.n	90001d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001de6:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de8:	6013      	str	r3, [r2, #0]
}
90001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dec:	4b0f      	ldr	r3, [pc, #60]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dee:	2167      	movs	r1, #103	; 0x67
90001df0:	4a0f      	ldr	r2, [pc, #60]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001df2:	4810      	ldr	r0, [pc, #64]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df4:	f025 fc7e 	bl	900276f4 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df8:	4b0c      	ldr	r3, [pc, #48]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dfa:	2188      	movs	r1, #136	; 0x88
90001dfc:	4a0e      	ldr	r2, [pc, #56]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dfe:	480d      	ldr	r0, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e00:	f025 fc78 	bl	900276f4 <__assert_func>
                assert(0 && "Unsupported format");
90001e04:	4b0d      	ldr	r3, [pc, #52]	; (90001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001e06:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e0a:	4a0d      	ldr	r2, [pc, #52]	; (90001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e0c:	4809      	ldr	r0, [pc, #36]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e0e:	f025 fc71 	bl	900276f4 <__assert_func>
90001e12:	bf00      	nop
90001e14:	52001000 	.word	0x52001000
90001e18:	00020201 	.word	0x00020201
90001e1c:	00020009 	.word	0x00020009
90001e20:	ffff00ef 	.word	0xffff00ef
90001e24:	00010201 	.word	0x00010201
90001e28:	0002000a 	.word	0x0002000a
90001e2c:	90028ee8 	.word	0x90028ee8
90001e30:	90028fa0 	.word	0x90028fa0
90001e34:	90028f50 	.word	0x90028f50
90001e38:	90028f04 	.word	0x90028f04
90001e3c:	90028fec 	.word	0x90028fec
90001e40:	90029008 	.word	0x90029008

90001e44 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e44:	4b1f      	ldr	r3, [pc, #124]	; (90001ec4 <DMA2D_XferCpltCallback+0x80>)
90001e46:	4920      	ldr	r1, [pc, #128]	; (90001ec8 <DMA2D_XferCpltCallback+0x84>)
90001e48:	681b      	ldr	r3, [r3, #0]
    {
90001e4a:	b570      	push	{r4, r5, r6, lr}
90001e4c:	685c      	ldr	r4, [r3, #4]
90001e4e:	6823      	ldr	r3, [r4, #0]
90001e50:	695a      	ldr	r2, [r3, #20]
90001e52:	428a      	cmp	r2, r1
90001e54:	d125      	bne.n	90001ea2 <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e56:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e5a:	b942      	cbnz	r2, 90001e6e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e5e:	4620      	mov	r0, r4
90001e60:	4798      	blx	r3
      return count_ == 0;
90001e62:	4b1a      	ldr	r3, [pc, #104]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e64:	68da      	ldr	r2, [r3, #12]
90001e66:	b10a      	cbz	r2, 90001e6c <DMA2D_XferCpltCallback+0x28>
90001e68:	7a22      	ldrb	r2, [r4, #8]
90001e6a:	b1f2      	cbz	r2, 90001eaa <DMA2D_XferCpltCallback+0x66>
    }
90001e6c:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e6e:	4b17      	ldr	r3, [pc, #92]	; (90001ecc <DMA2D_XferCpltCallback+0x88>)
90001e70:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e72:	2a00      	cmp	r2, #0
90001e74:	d0fa      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
90001e76:	7a21      	ldrb	r1, [r4, #8]
90001e78:	2900      	cmp	r1, #0
90001e7a:	d0f7      	beq.n	90001e6c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e7c:	2100      	movs	r1, #0
      count_--;
90001e7e:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e80:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e84:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e86:	1c41      	adds	r1, r0, #1
      count_--;
90001e88:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e8a:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e8c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e90:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e9c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e9e:	f7ff bd29 	b.w	900018f4 <DMA2D_ExternalJobCompleted>
90001ea2:	4620      	mov	r0, r4
90001ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea8:	4710      	bx	r2
      return buffer_[head_];
90001eaa:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001eac:	2201      	movs	r2, #1
      return buffer_[head_];
90001eae:	3002      	adds	r0, #2
                started_by_external_job = true;
90001eb0:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eb4:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eb6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ebe:	f7ff bcd5 	b.w	9000186c <DMA2D_CopyBuffer>
90001ec2:	bf00      	nop
90001ec4:	240281ec 	.word	0x240281ec
90001ec8:	90001b41 	.word	0x90001b41
90001ecc:	24005bb4 	.word	0x24005bb4

90001ed0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ed0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed2:	4b10      	ldr	r3, [pc, #64]	; (90001f14 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ed4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ed6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed8:	2500      	movs	r5, #0
90001eda:	300c      	adds	r0, #12
90001edc:	2260      	movs	r2, #96	; 0x60
90001ede:	7235      	strb	r5, [r6, #8]
90001ee0:	7275      	strb	r5, [r6, #9]
90001ee2:	6070      	str	r0, [r6, #4]
90001ee4:	f844 3b20 	str.w	r3, [r4], #32
90001ee8:	4621      	mov	r1, r4
90001eea:	f011 ffc7 	bl	90013e7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001eee:	4621      	mov	r1, r4
90001ef0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ef4:	60cd      	str	r5, [r1, #12]
90001ef6:	3124      	adds	r1, #36	; 0x24
90001ef8:	428b      	cmp	r3, r1
90001efa:	d1fb      	bne.n	90001ef4 <_ZN8STM32DMAC1Ev+0x24>
90001efc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001f00:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001f02:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f00c ff1b 	bl	9000ed40 <osMutexNew>
90001f0a:	4603      	mov	r3, r0
}
90001f0c:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f0e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f12:	bd70      	pop	{r4, r5, r6, pc}
90001f14:	90029050 	.word	0x90029050

90001f18 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f18:	4a03      	ldr	r2, [pc, #12]	; (90001f28 <_ZN8touchgfx5paint8tearDownEv+0x10>)
90001f1a:	6813      	ldr	r3, [r2, #0]
90001f1c:	07db      	lsls	r3, r3, #31
90001f1e:	d4fc      	bmi.n	90001f1a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f20:	2323      	movs	r3, #35	; 0x23
90001f22:	6093      	str	r3, [r2, #8]
}
90001f24:	4770      	bx	lr
90001f26:	bf00      	nop
90001f28:	52001000 	.word	0x52001000

90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
90001f2c:	b430      	push	{r4, r5}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
90001f2e:	4c11      	ldr	r4, [pc, #68]	; (90001f74 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
90001f30:	6825      	ldr	r5, [r4, #0]
90001f32:	07ed      	lsls	r5, r5, #31
90001f34:	d4fc      	bmi.n	90001f30 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f36:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f38:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
90001f3a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001f3c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f3e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001f42:	f04f 0502 	mov.w	r5, #2
90001f46:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
90001f48:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
90001f4a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
90001f4c:	d00b      	beq.n	90001f66 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x3a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f4e:	490a      	ldr	r1, [pc, #40]	; (90001f78 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001f50:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f52:	ea41 6303 	orr.w	r3, r1, r3, lsl #24

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f56:	4909      	ldr	r1, [pc, #36]	; (90001f7c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001f58:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->FGCOLR, color);
90001f5a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
90001f5c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
90001f5e:	60e0      	str	r0, [r4, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
90001f60:	6021      	str	r1, [r4, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
90001f62:	bc30      	pop	{r4, r5}
90001f64:	4770      	bx	lr
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001f66:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
90001f68:	9a02      	ldr	r2, [sp, #8]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6a:	4b05      	ldr	r3, [pc, #20]	; (90001f80 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x54>)
        WRITE_REG(DMA2D->OCOLR, color565);
90001f6c:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
90001f6e:	6023      	str	r3, [r4, #0]
}
90001f70:	bc30      	pop	{r4, r5}
90001f72:	4770      	bx	lr
90001f74:	52001000 	.word	0x52001000
90001f78:	00010009 	.word	0x00010009
90001f7c:	00020001 	.word	0x00020001
90001f80:	00030001 	.word	0x00030001

90001f84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f84:	2001      	movs	r0, #1
90001f86:	4770      	bx	lr

90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f88:	2040      	movs	r0, #64	; 0x40
90001f8a:	4770      	bx	lr

90001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f8c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f90:	3008      	adds	r0, #8
90001f92:	4770      	bx	lr

90001f94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f94:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
90001f98:	3008      	adds	r0, #8
90001f9a:	4770      	bx	lr

90001f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f9c:	2001      	movs	r0, #1
90001f9e:	4770      	bx	lr

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fa0:	f242 004c 	movw	r0, #8268	; 0x204c
90001fa4:	4770      	bx	lr
90001fa6:	bf00      	nop

90001fa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fa8:	f242 034c 	movw	r3, #8268	; 0x204c
90001fac:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fb0:	3008      	adds	r0, #8
90001fb2:	4770      	bx	lr

90001fb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fb4:	f242 034c 	movw	r3, #8268	; 0x204c
90001fb8:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001fbc:	3008      	adds	r0, #8
90001fbe:	4770      	bx	lr

90001fc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001fc0:	2001      	movs	r0, #1
90001fc2:	4770      	bx	lr

90001fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001fc4:	2010      	movs	r0, #16
90001fc6:	4770      	bx	lr

90001fc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fc8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fcc:	3008      	adds	r0, #8
90001fce:	4770      	bx	lr

90001fd0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001fd0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001fd4:	3008      	adds	r0, #8
90001fd6:	4770      	bx	lr

90001fd8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001fd8:	4608      	mov	r0, r1
90001fda:	f003 bced 	b.w	900059b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001fde:	bf00      	nop

90001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001fe0:	4b03      	ldr	r3, [pc, #12]	; (90001ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
90001fe2:	b510      	push	{r4, lr}
90001fe4:	4604      	mov	r4, r0
90001fe6:	6003      	str	r3, [r0, #0]
90001fe8:	f010 fd9d 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fec:	4620      	mov	r0, r4
90001fee:	bd10      	pop	{r4, pc}
90001ff0:	90029108 	.word	0x90029108

90001ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
90001ff4:	4b05      	ldr	r3, [pc, #20]	; (9000200c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev+0x18>)
90001ff6:	b510      	push	{r4, lr}
90001ff8:	4604      	mov	r4, r0
90001ffa:	6003      	str	r3, [r0, #0]
90001ffc:	f010 fd93 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002000:	2148      	movs	r1, #72	; 0x48
90002002:	4620      	mov	r0, r4
90002004:	f025 fb47 	bl	90027696 <_ZdlPvj>
90002008:	4620      	mov	r0, r4
9000200a:	bd10      	pop	{r4, pc}
9000200c:	90029108 	.word	0x90029108

90002010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002010:	4b03      	ldr	r3, [pc, #12]	; (90002020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002012:	b510      	push	{r4, lr}
90002014:	4604      	mov	r4, r0
90002016:	6003      	str	r3, [r0, #0]
90002018:	f010 fd85 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201c:	4620      	mov	r0, r4
9000201e:	bd10      	pop	{r4, pc}
90002020:	900290d4 	.word	0x900290d4

90002024 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90002026:	b510      	push	{r4, lr}
90002028:	4604      	mov	r4, r0
9000202a:	6003      	str	r3, [r0, #0]
9000202c:	f010 fd7b 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002030:	f242 0154 	movw	r1, #8276	; 0x2054
90002034:	4620      	mov	r0, r4
90002036:	f025 fb2e 	bl	90027696 <_ZdlPvj>
9000203a:	4620      	mov	r0, r4
9000203c:	bd10      	pop	{r4, pc}
9000203e:	bf00      	nop
90002040:	900290d4 	.word	0x900290d4

90002044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002044:	4b03      	ldr	r3, [pc, #12]	; (90002054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90002046:	b510      	push	{r4, lr}
90002048:	4604      	mov	r4, r0
9000204a:	6003      	str	r3, [r0, #0]
9000204c:	f010 fd6b 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002050:	4620      	mov	r0, r4
90002052:	bd10      	pop	{r4, pc}
90002054:	900290a0 	.word	0x900290a0

90002058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90002058:	4b05      	ldr	r3, [pc, #20]	; (90002070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000205a:	b510      	push	{r4, lr}
9000205c:	4604      	mov	r4, r0
9000205e:	6003      	str	r3, [r0, #0]
90002060:	f010 fd61 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002064:	2118      	movs	r1, #24
90002066:	4620      	mov	r0, r4
90002068:	f025 fb15 	bl	90027696 <_ZdlPvj>
9000206c:	4620      	mov	r0, r4
9000206e:	bd10      	pop	{r4, pc}
90002070:	900290a0 	.word	0x900290a0

90002074 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002074:	490d      	ldr	r1, [pc, #52]	; (900020ac <_ZN12FrontendHeapD1Ev+0x38>)
90002076:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
9000207a:	4a0d      	ldr	r2, [pc, #52]	; (900020b0 <_ZN12FrontendHeapD1Ev+0x3c>)
9000207c:	b510      	push	{r4, lr}
9000207e:	4604      	mov	r4, r0
90002080:	6001      	str	r1, [r0, #0]
90002082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
90002086:	f500 5002 	add.w	r0, r0, #8320	; 0x2080
9000208a:	f010 fd4c 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000208e:	4620      	mov	r0, r4
90002090:	4b08      	ldr	r3, [pc, #32]	; (900020b4 <_ZN12FrontendHeapD1Ev+0x40>)
90002092:	f840 3f2c 	str.w	r3, [r0, #44]!
90002096:	f010 fd46 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000209a:	4620      	mov	r0, r4
9000209c:	4b06      	ldr	r3, [pc, #24]	; (900020b8 <_ZN12FrontendHeapD1Ev+0x44>)
9000209e:	f840 3f14 	str.w	r3, [r0, #20]!
900020a2:	f010 fd40 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a6:	4620      	mov	r0, r4
900020a8:	bd10      	pop	{r4, pc}
900020aa:	bf00      	nop
900020ac:	9002913c 	.word	0x9002913c
900020b0:	90029108 	.word	0x90029108
900020b4:	900290d4 	.word	0x900290d4
900020b8:	900290a0 	.word	0x900290a0

900020bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
900020bc:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
900020be:	4c0d      	ldr	r4, [pc, #52]	; (900020f4 <__tcf_0+0x38>)
900020c0:	4a0d      	ldr	r2, [pc, #52]	; (900020f8 <__tcf_0+0x3c>)
900020c2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
900020c6:	490d      	ldr	r1, [pc, #52]	; (900020fc <__tcf_0+0x40>)
900020c8:	f504 5002 	add.w	r0, r4, #8320	; 0x2080
900020cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900020d0:	6021      	str	r1, [r4, #0]
900020d2:	f010 fd28 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020d6:	4620      	mov	r0, r4
900020d8:	4b09      	ldr	r3, [pc, #36]	; (90002100 <__tcf_0+0x44>)
900020da:	f840 3f2c 	str.w	r3, [r0, #44]!
900020de:	f010 fd22 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020e2:	4620      	mov	r0, r4
900020e4:	4b07      	ldr	r3, [pc, #28]	; (90002104 <__tcf_0+0x48>)
        static FrontendHeap instance;
900020e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900020ea:	f840 3f14 	str.w	r3, [r0, #20]!
900020ee:	f010 bd1a 	b.w	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020f2:	bf00      	nop
900020f4:	24005be8 	.word	0x24005be8
900020f8:	90029108 	.word	0x90029108
900020fc:	9002913c 	.word	0x9002913c
90002100:	900290d4 	.word	0x900290d4
90002104:	900290a0 	.word	0x900290a0

90002108 <_ZN12FrontendHeapD0Ev>:
90002108:	4a0f      	ldr	r2, [pc, #60]	; (90002148 <_ZN12FrontendHeapD0Ev+0x40>)
9000210a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
class FrontendHeap : public FrontendHeapBase
9000210e:	490f      	ldr	r1, [pc, #60]	; (9000214c <_ZN12FrontendHeapD0Ev+0x44>)
90002110:	b510      	push	{r4, lr}
90002112:	4604      	mov	r4, r0
90002114:	6001      	str	r1, [r0, #0]
90002116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
9000211a:	f500 5002 	add.w	r0, r0, #8320	; 0x2080
9000211e:	f010 fd02 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002122:	4620      	mov	r0, r4
90002124:	4b0a      	ldr	r3, [pc, #40]	; (90002150 <_ZN12FrontendHeapD0Ev+0x48>)
90002126:	f840 3f2c 	str.w	r3, [r0, #44]!
9000212a:	f010 fcfc 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000212e:	4b09      	ldr	r3, [pc, #36]	; (90002154 <_ZN12FrontendHeapD0Ev+0x4c>)
90002130:	4620      	mov	r0, r4
90002132:	f840 3f14 	str.w	r3, [r0, #20]!
90002136:	f010 fcf6 	bl	90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000213a:	4620      	mov	r0, r4
9000213c:	f242 213c 	movw	r1, #8764	; 0x223c
90002140:	f025 faa9 	bl	90027696 <_ZdlPvj>
90002144:	4620      	mov	r0, r4
90002146:	bd10      	pop	{r4, pc}
90002148:	90029108 	.word	0x90029108
9000214c:	9002913c 	.word	0x9002913c
90002150:	900290d4 	.word	0x900290d4
90002154:	900290a0 	.word	0x900290a0

90002158 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
90002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000215c:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
9000215e:	2400      	movs	r4, #0
90002160:	f002 fee0 	bl	90004f24 <_ZN14BitmapDatabase11getInstanceEv>
90002164:	4605      	mov	r5, r0
90002166:	f002 fee1 	bl	90004f2c <_ZN14BitmapDatabase15getInstanceSizeEv>
9000216a:	4623      	mov	r3, r4
9000216c:	4601      	mov	r1, r0
9000216e:	4622      	mov	r2, r4
90002170:	4628      	mov	r0, r5
90002172:	9400      	str	r4, [sp, #0]
90002174:	f019 f978 	bl	9001b468 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
90002178:	4b29      	ldr	r3, [pc, #164]	; (90002220 <touchgfx_init+0xc8>)
9000217a:	4a2a      	ldr	r2, [pc, #168]	; (90002224 <touchgfx_init+0xcc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
9000217c:	4620      	mov	r0, r4
        static FrontendHeap instance;
9000217e:	4c2a      	ldr	r4, [pc, #168]	; (90002228 <touchgfx_init+0xd0>)
90002180:	601a      	str	r2, [r3, #0]
90002182:	f006 f869 	bl	90008258 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002186:	4829      	ldr	r0, [pc, #164]	; (9000222c <touchgfx_init+0xd4>)
90002188:	f019 f8d6 	bl	9001b338 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000218c:	6823      	ldr	r3, [r4, #0]
9000218e:	f3bf 8f5b 	dmb	ish
90002192:	07db      	lsls	r3, r3, #31
90002194:	d505      	bpl.n	900021a2 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002196:	4826      	ldr	r0, [pc, #152]	; (90002230 <touchgfx_init+0xd8>)
}
90002198:	b002      	add	sp, #8
9000219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000219e:	f7fe bb9d 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
900021a2:	4620      	mov	r0, r4
900021a4:	f025 fa79 	bl	9002769a <__cxa_guard_acquire>
900021a8:	2800      	cmp	r0, #0
900021aa:	d0f4      	beq.n	90002196 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
900021ac:	4d21      	ldr	r5, [pc, #132]	; (90002234 <touchgfx_init+0xdc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
900021ae:	4b22      	ldr	r3, [pc, #136]	; (90002238 <touchgfx_init+0xe0>)
          screenStorage(scr),
          transitionStorage(tra),
900021b0:	f505 5702 	add.w	r7, r5, #8320	; 0x2080
        : presenterStorage(pres),
900021b4:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
900021b8:	f105 082c 	add.w	r8, r5, #44	; 0x2c
900021bc:	602b      	str	r3, [r5, #0]
          frontendApplication(app)
900021be:	f107 0660 	add.w	r6, r7, #96	; 0x60
          transitionStorage(tra),
900021c2:	60ef      	str	r7, [r5, #12]
          screenStorage(scr),
900021c4:	e9c5 0801 	strd	r0, r8, [r5, #4]
          frontendApplication(app)
900021c8:	612e      	str	r6, [r5, #16]
900021ca:	f010 fcad 	bl	90012b28 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021ce:	4b1b      	ldr	r3, [pc, #108]	; (9000223c <touchgfx_init+0xe4>)
900021d0:	4640      	mov	r0, r8
900021d2:	616b      	str	r3, [r5, #20]
900021d4:	f010 fca8 	bl	90012b28 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021d8:	4b19      	ldr	r3, [pc, #100]	; (90002240 <touchgfx_init+0xe8>)
900021da:	4638      	mov	r0, r7
900021dc:	62eb      	str	r3, [r5, #44]	; 0x2c
900021de:	f010 fca3 	bl	90012b28 <_ZN8touchgfx17AbstractPartitionC1Ev>
900021e2:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
900021e6:	4a17      	ldr	r2, [pc, #92]	; (90002244 <touchgfx_init+0xec>)
900021e8:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
900021ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900021f0:	f006 f8bc 	bl	9000836c <_ZN5ModelC1Ev>
900021f4:	462a      	mov	r2, r5
900021f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
900021fa:	4630      	mov	r0, r6
900021fc:	f006 f8a2 	bl	90008344 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002200:	4630      	mov	r0, r6
90002202:	f003 fbd9 	bl	900059b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002206:	4810      	ldr	r0, [pc, #64]	; (90002248 <touchgfx_init+0xf0>)
90002208:	f025 fa92 	bl	90027730 <atexit>
9000220c:	4620      	mov	r0, r4
9000220e:	f025 fa50 	bl	900276b2 <__cxa_guard_release>
90002212:	4807      	ldr	r0, [pc, #28]	; (90002230 <touchgfx_init+0xd8>)
}
90002214:	b002      	add	sp, #8
90002216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000221a:	f7fe bb5f 	b.w	900008dc <_ZN11TouchGFXHAL10initializeEv>
9000221e:	bf00      	nop
90002220:	24028250 	.word	0x24028250
90002224:	24008c58 	.word	0x24008c58
90002228:	24005be4 	.word	0x24005be4
9000222c:	24000020 	.word	0x24000020
90002230:	24008bd0 	.word	0x24008bd0
90002234:	24005be8 	.word	0x24005be8
90002238:	9002913c 	.word	0x9002913c
9000223c:	900290a0 	.word	0x900290a0
90002240:	900290d4 	.word	0x900290d4
90002244:	90029108 	.word	0x90029108
90002248:	900020bd 	.word	0x900020bd

9000224c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
9000224c:	4770      	bx	lr
9000224e:	bf00      	nop

90002250 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
90002250:	4801      	ldr	r0, [pc, #4]	; (90002258 <touchgfx_taskEntry+0x8>)
90002252:	f7fe bb09 	b.w	90000868 <_ZN11TouchGFXHAL9taskEntryEv>
90002256:	bf00      	nop
90002258:	24008bd0 	.word	0x24008bd0

9000225c <_GLOBAL__sub_I_touchgfx_init>:
}
9000225c:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
9000225e:	4b26      	ldr	r3, [pc, #152]	; (900022f8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
90002260:	4c26      	ldr	r4, [pc, #152]	; (900022fc <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
90002262:	4e27      	ldr	r6, [pc, #156]	; (90002300 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
90002264:	4d27      	ldr	r5, [pc, #156]	; (90002304 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90002266:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
90002268:	4630      	mov	r0, r6
9000226a:	f7ff fe31 	bl	90001ed0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
9000226e:	4628      	mov	r0, r5
90002270:	f01c fa04 	bl	9001e67c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
90002274:	4b24      	ldr	r3, [pc, #144]	; (90002308 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
90002276:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002278:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000227c:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
90002280:	62da      	str	r2, [r3, #44]	; 0x2c
90002282:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
90002284:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
90002286:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
9000228a:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
9000228c:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
90002290:	4c1e      	ldr	r4, [pc, #120]	; (9000230c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
90002292:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002294:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002298:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
9000229a:	2401      	movs	r4, #1
9000229c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
900022a0:	4c1b      	ldr	r4, [pc, #108]	; (90002310 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
900022a2:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022a4:	4c1b      	ldr	r4, [pc, #108]	; (90002314 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
900022a6:	8020      	strh	r0, [r4, #0]
900022a8:	4c1b      	ldr	r4, [pc, #108]	; (90002318 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
900022aa:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900022ae:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b0:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022b4:	4c19      	ldr	r4, [pc, #100]	; (9000231c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
900022b6:	481a      	ldr	r0, [pc, #104]	; (90002320 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
900022b8:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
900022ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
900022be:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
900022c2:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
900022c6:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
900022ca:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
900022ce:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
900022d2:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
900022d6:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900022da:	8021      	strh	r1, [r4, #0]
900022dc:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
900022de:	4c11      	ldr	r4, [pc, #68]	; (90002324 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
900022e0:	4811      	ldr	r0, [pc, #68]	; (90002328 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
900022e2:	4912      	ldr	r1, [pc, #72]	; (9000232c <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
900022e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
900022e8:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
900022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
900022ee:	6018      	str	r0, [r3, #0]
          cc_in(0)
900022f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
900022f4:	67d9      	str	r1, [r3, #124]	; 0x7c
}
900022f6:	bd70      	pop	{r4, r5, r6, pc}
900022f8:	90028824 	.word	0x90028824
900022fc:	24007e24 	.word	0x24007e24
90002300:	24007e28 	.word	0x24007e28
90002304:	24008c5c 	.word	0x24008c5c
90002308:	24008bd0 	.word	0x24008bd0
9000230c:	01000001 	.word	0x01000001
90002310:	240281ec 	.word	0x240281ec
90002314:	240281e0 	.word	0x240281e0
90002318:	240281e6 	.word	0x240281e6
9000231c:	240281e2 	.word	0x240281e2
90002320:	240281e8 	.word	0x240281e8
90002324:	240281e4 	.word	0x240281e4
90002328:	900289b4 	.word	0x900289b4
9000232c:	900287fc 	.word	0x900287fc

90002330 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002330:	4801      	ldr	r0, [pc, #4]	; (90002338 <_GLOBAL__sub_D_touchgfx_init+0x8>)
90002332:	f7ff bb7b 	b.w	90001a2c <_ZN8STM32DMAD1Ev>
90002336:	bf00      	nop
90002338:	24007e28 	.word	0x24007e28

9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
9000233c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002340:	b112      	cbz	r2, 90002348 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
90002342:	6803      	ldr	r3, [r0, #0]
90002344:	695b      	ldr	r3, [r3, #20]
90002346:	4718      	bx	r3
        }
    }
90002348:	4770      	bx	lr
9000234a:	bf00      	nop

9000234c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
9000234c:	2000      	movs	r0, #0
9000234e:	4770      	bx	lr

90002350 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
90002350:	8081      	strh	r1, [r0, #4]
    }
90002352:	4770      	bx	lr

90002354 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
90002354:	80c1      	strh	r1, [r0, #6]
    }
90002356:	4770      	bx	lr

90002358 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
90002358:	8101      	strh	r1, [r0, #8]
    }
9000235a:	4770      	bx	lr

9000235c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
9000235c:	8141      	strh	r1, [r0, #10]
    }
9000235e:	4770      	bx	lr

90002360 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
90002360:	4770      	bx	lr
90002362:	bf00      	nop

90002364 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
90002364:	4770      	bx	lr
90002366:	bf00      	nop

90002368 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
90002368:	4770      	bx	lr
9000236a:	bf00      	nop

9000236c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
9000236c:	4770      	bx	lr
9000236e:	bf00      	nop

90002370 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
90002370:	4770      	bx	lr
90002372:	bf00      	nop

90002374 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
90002374:	f8b0 c006 	ldrh.w	ip, [r0, #6]
90002378:	6803      	ldr	r3, [r0, #0]
9000237a:	eba2 020c 	sub.w	r2, r2, ip
9000237e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
90002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002384:	eba1 010c 	sub.w	r1, r1, ip
90002388:	b212      	sxth	r2, r2
9000238a:	b209      	sxth	r1, r1
9000238c:	4718      	bx	r3
9000238e:	bf00      	nop

90002390 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002390:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002392:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002396:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000239a:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000239e:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900023a2:	6010      	str	r0, [r2, #0]
    }
900023a4:	4770      	bx	lr
900023a6:	bf00      	nop

900023a8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
900023a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900023ac:	b11a      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
900023ae:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
900023b2:	b102      	cbz	r2, 900023b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
900023b4:	6018      	str	r0, [r3, #0]
        }
    }
900023b6:	4770      	bx	lr

900023b8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
900023b8:	2000      	movs	r0, #0
900023ba:	4770      	bx	lr

900023bc <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
900023bc:	4603      	mov	r3, r0
    {
        widgetWidth = widgetRect.width;
900023be:	888a      	ldrh	r2, [r1, #4]
        return true;
    }
900023c0:	2001      	movs	r0, #1
        widgetWidth = widgetRect.width;
900023c2:	809a      	strh	r2, [r3, #4]
    }
900023c4:	4770      	bx	lr
900023c6:	bf00      	nop

900023c8 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
900023c8:	4770      	bx	lr
900023ca:	bf00      	nop

900023cc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900023cc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
900023d0:	4770      	bx	lr
900023d2:	bf00      	nop

900023d4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
900023d4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
900023d8:	4770      	bx	lr
900023da:	bf00      	nop

900023dc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900023dc:	f04f 0c00 	mov.w	ip, #0
        return rect.width;
900023e0:	688a      	ldr	r2, [r1, #8]
900023e2:	f8c0 c000 	str.w	ip, [r0]
900023e6:	6042      	str	r2, [r0, #4]
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
900023e8:	4770      	bx	lr
900023ea:	bf00      	nop

900023ec <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
900023ec:	2200      	movs	r2, #0
900023ee:	6002      	str	r2, [r0, #0]
900023f0:	6042      	str	r2, [r0, #4]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900023f2:	4770      	bx	lr

900023f4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
900023f4:	2000      	movs	r0, #0
900023f6:	4770      	bx	lr

900023f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900023f8:	4b03      	ldr	r3, [pc, #12]	; (90002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
900023fa:	2290      	movs	r2, #144	; 0x90
900023fc:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002400:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002404:	4770      	bx	lr
90002406:	bf00      	nop
90002408:	e000e100 	.word	0xe000e100

9000240c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000240c:	4a09      	ldr	r2, [pc, #36]	; (90002434 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000240e:	490a      	ldr	r1, [pc, #40]	; (90002438 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002410:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002412:	480a      	ldr	r0, [pc, #40]	; (9000243c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002414:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002418:	3b01      	subs	r3, #1
9000241a:	b29b      	uxth	r3, r3
9000241c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000241e:	6911      	ldr	r1, [r2, #16]
90002420:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002424:	3901      	subs	r1, #1
90002426:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002428:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000242a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000242c:	f043 0301 	orr.w	r3, r3, #1
90002430:	6353      	str	r3, [r2, #52]	; 0x34
}
90002432:	4770      	bx	lr
90002434:	50001000 	.word	0x50001000
90002438:	24008cd8 	.word	0x24008cd8
9000243c:	24008cd6 	.word	0x24008cd6

90002440 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002440:	4b01      	ldr	r3, [pc, #4]	; (90002448 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002442:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002446:	4770      	bx	lr
90002448:	50001000 	.word	0x50001000

9000244c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000244c:	4b02      	ldr	r3, [pc, #8]	; (90002458 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000244e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002450:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002454:	625a      	str	r2, [r3, #36]	; 0x24
}
90002456:	4770      	bx	lr
90002458:	50001000 	.word	0x50001000

9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000245c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002460:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90002462:	4770      	bx	lr

90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002464:	4770      	bx	lr
90002466:	bf00      	nop

90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000246c:	4611      	mov	r1, r2
9000246e:	6840      	ldr	r0, [r0, #4]
90002470:	6803      	ldr	r3, [r0, #0]
90002472:	68db      	ldr	r3, [r3, #12]
90002474:	4718      	bx	r3
90002476:	bf00      	nop

90002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002478:	b510      	push	{r4, lr}
9000247a:	4604      	mov	r4, r0
9000247c:	2148      	movs	r1, #72	; 0x48
9000247e:	f025 f90a 	bl	90027696 <_ZdlPvj>
90002482:	4620      	mov	r0, r4
90002484:	bd10      	pop	{r4, pc}
90002486:	bf00      	nop

90002488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
90002488:	b911      	cbnz	r1, 90002490 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
9000248a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
9000248e:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
90002490:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002492:	4a03      	ldr	r2, [pc, #12]	; (900024a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
90002494:	f44f 71b8 	mov.w	r1, #368	; 0x170
90002498:	4b02      	ldr	r3, [pc, #8]	; (900024a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
9000249a:	4803      	ldr	r0, [pc, #12]	; (900024a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
9000249c:	f025 f92a 	bl	900276f4 <__assert_func>
900024a0:	9002915c 	.word	0x9002915c
900024a4:	90029148 	.word	0x90029148
900024a8:	900292e8 	.word	0x900292e8

900024ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900024ac:	b921      	cbnz	r1, 900024b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900024ae:	6840      	ldr	r0, [r0, #4]
900024b0:	4611      	mov	r1, r2
900024b2:	6803      	ldr	r3, [r0, #0]
900024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024b6:	4718      	bx	r3
        assert(handle < no_streams);
900024b8:	4b03      	ldr	r3, [pc, #12]	; (900024c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900024ba:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900024be:	4a03      	ldr	r2, [pc, #12]	; (900024cc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900024c0:	4803      	ldr	r0, [pc, #12]	; (900024d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900024c2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024c4:	f025 f916 	bl	900276f4 <__assert_func>
900024c8:	90029148 	.word	0x90029148
900024cc:	9002932c 	.word	0x9002932c
900024d0:	900292e8 	.word	0x900292e8

900024d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900024d4:	b909      	cbnz	r1, 900024da <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900024d6:	68c0      	ldr	r0, [r0, #12]
900024d8:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900024da:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900024dc:	4a02      	ldr	r2, [pc, #8]	; (900024e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900024de:	2179      	movs	r1, #121	; 0x79
900024e0:	4b02      	ldr	r3, [pc, #8]	; (900024ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
900024e2:	4803      	ldr	r0, [pc, #12]	; (900024f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
900024e4:	f025 f906 	bl	900276f4 <__assert_func>
900024e8:	900294dc 	.word	0x900294dc
900024ec:	90029148 	.word	0x90029148
900024f0:	900292e8 	.word	0x900292e8

900024f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
900024f4:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900024f6:	460c      	mov	r4, r1
900024f8:	b949      	cbnz	r1, 9000250e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
900024fa:	4611      	mov	r1, r2
900024fc:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
900024fe:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002500:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002502:	681c      	ldr	r4, [r3, #0]
90002504:	4618      	mov	r0, r3
90002506:	68a3      	ldr	r3, [r4, #8]
    }
90002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000250c:	4718      	bx	r3
        assert(handle < no_streams);
9000250e:	4b03      	ldr	r3, [pc, #12]	; (9000251c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002510:	2190      	movs	r1, #144	; 0x90
90002512:	4a03      	ldr	r2, [pc, #12]	; (90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002514:	4803      	ldr	r0, [pc, #12]	; (90002524 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002516:	f025 f8ed 	bl	900276f4 <__assert_func>
9000251a:	bf00      	nop
9000251c:	90029148 	.word	0x90029148
90002520:	90029690 	.word	0x90029690
90002524:	900292e8 	.word	0x900292e8

90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002528:	b921      	cbnz	r1, 90002534 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000252a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000252e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002532:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002534:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002536:	4a03      	ldr	r2, [pc, #12]	; (90002544 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002538:	2182      	movs	r1, #130	; 0x82
9000253a:	4b03      	ldr	r3, [pc, #12]	; (90002548 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000253c:	4803      	ldr	r0, [pc, #12]	; (9000254c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000253e:	f025 f8d9 	bl	900276f4 <__assert_func>
90002542:	bf00      	nop
90002544:	9002986c 	.word	0x9002986c
90002548:	90029148 	.word	0x90029148
9000254c:	900292e8 	.word	0x900292e8

90002550 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002550:	f010 bdcc 	b.w	900130ec <_ZN8touchgfx3HAL10beginFrameEv>

90002554 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002554:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002558:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000255a:	b113      	cbz	r3, 90002562 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000255c:	4b1a      	ldr	r3, [pc, #104]	; (900025c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000255e:	2201      	movs	r2, #1
90002560:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90002562:	4c1a      	ldr	r4, [pc, #104]	; (900025cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002564:	f010 fdce 	bl	90013104 <_ZN8touchgfx3HAL8endFrameEv>
90002568:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
9000256c:	b963      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000256e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
90002572:	b94b      	cbnz	r3, 90002588 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
90002574:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
9000257c:	f00c fcea 	bl	9000ef54 <osSemaphoreRelease>
        if (uiHasMutex)
90002580:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
90002584:	b9cb      	cbnz	r3, 900025ba <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
90002586:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
90002588:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
9000258c:	69e1      	ldr	r1, [r4, #28]
9000258e:	6922      	ldr	r2, [r4, #16]
90002590:	fb00 f303 	mul.w	r3, r0, r3
90002594:	fb01 f202 	mul.w	r2, r1, r2
90002598:	4293      	cmp	r3, r2
9000259a:	d3eb      	bcc.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
9000259c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900025a0:	b138      	cbz	r0, 900025b2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900025a2:	1a9b      	subs	r3, r3, r2
900025a4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900025a8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900025aa:	bf98      	it	ls
900025ac:	f102 32ff 	addls.w	r2, r2, #4294967295
900025b0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900025b2:	2301      	movs	r3, #1
900025b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900025b8:	e7dc      	b.n	90002574 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900025ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
900025bc:	f00c fc24 	bl	9000ee08 <osMutexRelease>
            uiHasMutex = false;
900025c0:	2300      	movs	r3, #0
900025c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900025c6:	bd10      	pop	{r4, pc}
900025c8:	24008cd4 	.word	0x24008cd4
900025cc:	24008d24 	.word	0x24008d24

900025d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900025d0:	f010 bd56 	b.w	90013080 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900025d4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900025d4:	f010 beb1 	b.w	9001333a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900025d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900025d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900025dc:	b903      	cbnz	r3, 900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900025de:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900025e0:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900025e2:	f04f 31ff 	mov.w	r1, #4294967295
900025e6:	4604      	mov	r4, r0
900025e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
900025ea:	f00c fbe9 	bl	9000edc0 <osMutexAcquire>
            firstDrawThisFrame = false;
900025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
900025f2:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
900025f6:	bd10      	pop	{r4, pc}

900025f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
900025f8:	b538      	push	{r3, r4, r5, lr}
900025fa:	460c      	mov	r4, r1
900025fc:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
900025fe:	f04f 31ff 	mov.w	r1, #4294967295
90002602:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002604:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002608:	f00c fbda 	bl	9000edc0 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000260c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000260e:	f00c fbfb 	bl	9000ee08 <osMutexRelease>
        streams[handle].isActive = false;
90002612:	2300      	movs	r3, #0
90002614:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002618:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000261c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002620:	b90b      	cbnz	r3, 90002626 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002624:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002626:	bd38      	pop	{r3, r4, r5, pc}

90002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002628:	4814      	ldr	r0, [pc, #80]	; (9000267c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000262a:	6943      	ldr	r3, [r0, #20]
9000262c:	03d9      	lsls	r1, r3, #15
9000262e:	d523      	bpl.n	90002678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002630:	2300      	movs	r3, #0
{
90002632:	b510      	push	{r4, lr}
90002634:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002638:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000263c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002640:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002644:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002648:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000264c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002650:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002654:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002656:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000265a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000265c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002660:	1c5a      	adds	r2, r3, #1
90002662:	d1f8      	bne.n	90002656 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002664:	f1ac 0c20 	sub.w	ip, ip, #32
90002668:	f11c 0f20 	cmn.w	ip, #32
9000266c:	d1f0      	bne.n	90002650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000266e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002672:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90002676:	bd10      	pop	{r4, pc}
90002678:	4770      	bx	lr
9000267a:	bf00      	nop
9000267c:	e000ed00 	.word	0xe000ed00

90002680 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
90002680:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002682:	2900      	cmp	r1, #0
90002684:	d133      	bne.n	900026ee <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
90002686:	4604      	mov	r4, r0
        switch (cmd)
90002688:	2a05      	cmp	r2, #5
9000268a:	d809      	bhi.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
9000268c:	e8df f002 	tbb	[pc, r2]
90002690:	27221e0f 	.word	0x27221e0f
90002694:	0903      	.short	0x0903
            stream.isPlaying = false;
90002696:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002698:	2301      	movs	r3, #1
            stream.isPlaying = false;
9000269a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
9000269e:	6203      	str	r3, [r0, #32]
    }
900026a0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900026a2:	3b00      	subs	r3, #0
900026a4:	bf18      	it	ne
900026a6:	2301      	movne	r3, #1
900026a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900026ac:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900026ae:	6840      	ldr	r0, [r0, #4]
900026b0:	6803      	ldr	r3, [r0, #0]
900026b2:	691b      	ldr	r3, [r3, #16]
900026b4:	4798      	blx	r3
900026b6:	2800      	cmp	r0, #0
900026b8:	d0f2      	beq.n	900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900026ba:	2201      	movs	r2, #1
                stream.frameCount = 0;
900026bc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900026be:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900026c2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900026c6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900026ca:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900026cc:	2300      	movs	r3, #0
900026ce:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900026d2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026d4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900026d6:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
900026d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026dc:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900026de:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
900026e0:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
900026e2:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
900026e4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
900026e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900026ec:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
900026ee:	4b03      	ldr	r3, [pc, #12]	; (900026fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
900026f0:	21a2      	movs	r1, #162	; 0xa2
900026f2:	4a03      	ldr	r2, [pc, #12]	; (90002700 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
900026f4:	4803      	ldr	r0, [pc, #12]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
900026f6:	f024 fffd 	bl	900276f4 <__assert_func>
900026fa:	bf00      	nop
900026fc:	90029148 	.word	0x90029148
90002700:	90029a28 	.word	0x90029a28
90002704:	900292e8 	.word	0x900292e8

90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002708:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000270a:	bb39      	cbnz	r1, 9000275c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000270c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002710:	4604      	mov	r4, r0
90002712:	b923      	cbnz	r3, 9000271e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002714:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002718:	b963      	cbnz	r3, 90002734 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000271a:	2001      	movs	r0, #1
    }
9000271c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000271e:	4912      	ldr	r1, [pc, #72]	; (90002768 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002720:	6943      	ldr	r3, [r0, #20]
90002722:	6809      	ldr	r1, [r1, #0]
90002724:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002728:	440b      	add	r3, r1
9000272a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000272c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002730:	2b00      	cmp	r3, #0
90002732:	d0f2      	beq.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002734:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002736:	4610      	mov	r0, r2
90002738:	6813      	ldr	r3, [r2, #0]
9000273a:	695b      	ldr	r3, [r3, #20]
9000273c:	6311      	str	r1, [r2, #48]	; 0x30
9000273e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002740:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002742:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002746:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000274a:	2800      	cmp	r0, #0
9000274c:	d1e5      	bne.n	9000271a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000274e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002752:	2b00      	cmp	r3, #0
90002754:	d1e2      	bne.n	9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002756:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000275a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000275c:	4b03      	ldr	r3, [pc, #12]	; (9000276c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000275e:	21d0      	movs	r1, #208	; 0xd0
90002760:	4a03      	ldr	r2, [pc, #12]	; (90002770 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90002762:	4804      	ldr	r0, [pc, #16]	; (90002774 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002764:	f024 ffc6 	bl	900276f4 <__assert_func>
90002768:	240281ec 	.word	0x240281ec
9000276c:	90029148 	.word	0x90029148
90002770:	90029bfc 	.word	0x90029bfc
90002774:	900292e8 	.word	0x900292e8

90002778 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90002778:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
9000277c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000277e:	b9fb      	cbnz	r3, 900027c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
90002780:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
90002782:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
90002784:	60c3      	str	r3, [r0, #12]
90002786:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
9000278a:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
9000278e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
90002792:	6103      	str	r3, [r0, #16]
90002794:	6143      	str	r3, [r0, #20]
90002796:	6183      	str	r3, [r0, #24]
90002798:	61c3      	str	r3, [r0, #28]
9000279a:	6203      	str	r3, [r0, #32]
9000279c:	6243      	str	r3, [r0, #36]	; 0x24
9000279e:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900027a2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900027a6:	4432      	add	r2, r6
900027a8:	4294      	cmp	r4, r2
900027aa:	d810      	bhi.n	900027ce <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900027ac:	4a0b      	ldr	r2, [pc, #44]	; (900027dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900027ae:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900027b0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900027b2:	4618      	mov	r0, r3
        format = bufferFormat;
900027b4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900027b8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900027bc:	630b      	str	r3, [r1, #48]	; 0x30
900027be:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900027c0:	4b07      	ldr	r3, [pc, #28]	; (900027e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900027c2:	f240 11c5 	movw	r1, #453	; 0x1c5
900027c6:	4a07      	ldr	r2, [pc, #28]	; (900027e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900027c8:	4807      	ldr	r0, [pc, #28]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027ca:	f024 ff93 	bl	900276f4 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900027ce:	4b07      	ldr	r3, [pc, #28]	; (900027ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900027d0:	2152      	movs	r1, #82	; 0x52
900027d2:	4a07      	ldr	r2, [pc, #28]	; (900027f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900027d4:	4804      	ldr	r0, [pc, #16]	; (900027e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900027d6:	f024 ff8d 	bl	900276f4 <__assert_func>
900027da:	bf00      	nop
900027dc:	012001e0 	.word	0x012001e0
900027e0:	90029d9c 	.word	0x90029d9c
900027e4:	90029dcc 	.word	0x90029dcc
900027e8:	900292e8 	.word	0x900292e8
900027ec:	90029f54 	.word	0x90029f54
900027f0:	90029f90 	.word	0x90029f90

900027f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900027f4:	4b08      	ldr	r3, [pc, #32]	; (90002818 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
900027f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900027fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900027fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002802:	f3bf 8f6f 	isb	sy
90002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000280a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000280e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002812:	f3bf 8f6f 	isb	sy
}
90002816:	4770      	bx	lr
90002818:	e000e100 	.word	0xe000e100

9000281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000281c:	4b03      	ldr	r3, [pc, #12]	; (9000282c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000281e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002822:	609a      	str	r2, [r3, #8]
90002824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002828:	609a      	str	r2, [r3, #8]
}
9000282a:	4770      	bx	lr
9000282c:	e000e100 	.word	0xe000e100

90002830 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002830:	b538      	push	{r3, r4, r5, lr}
90002832:	4604      	mov	r4, r0
    HAL::initialize();
90002834:	f010 fc73 	bl	9001311e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002838:	6823      	ldr	r3, [r4, #0]
9000283a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000283c:	f015 fcae 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
90002840:	4601      	mov	r1, r0
90002842:	4620      	mov	r0, r4
90002844:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002846:	6823      	ldr	r3, [r4, #0]
90002848:	4a16      	ldr	r2, [pc, #88]	; (900028a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000284a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000284e:	4295      	cmp	r5, r2
90002850:	d11c      	bne.n	9000288c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002852:	4a15      	ldr	r2, [pc, #84]	; (900028a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002854:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000285a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000285e:	4813      	ldr	r0, [pc, #76]	; (900028ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002860:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002864:	4a12      	ldr	r2, [pc, #72]	; (900028b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002866:	7005      	strb	r5, [r0, #0]
90002868:	4293      	cmp	r3, r2
9000286a:	d116      	bne.n	9000289a <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000286c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000286e:	4a11      	ldr	r2, [pc, #68]	; (900028b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002870:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002872:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
90002874:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90002876:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
9000287a:	4b0f      	ldr	r3, [pc, #60]	; (900028b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
9000287c:	490f      	ldr	r1, [pc, #60]	; (900028bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
9000287e:	4a10      	ldr	r2, [pc, #64]	; (900028c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
90002880:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
90002882:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
90002884:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
90002886:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
9000288a:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
9000288c:	4a0d      	ldr	r2, [pc, #52]	; (900028c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
9000288e:	2300      	movs	r3, #0
90002890:	4620      	mov	r0, r4
90002892:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
90002896:	47a8      	blx	r5
90002898:	e7ec      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
9000289a:	2100      	movs	r1, #0
9000289c:	4620      	mov	r0, r4
9000289e:	4798      	blx	r3
900028a0:	e7e8      	b.n	90002874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900028a2:	bf00      	nop
900028a4:	90000811 	.word	0x90000811
900028a8:	d003fc00 	.word	0xd003fc00
900028ac:	240281ea 	.word	0x240281ea
900028b0:	90000695 	.word	0x90000695
900028b4:	240281eb 	.word	0x240281eb
900028b8:	24008d24 	.word	0x24008d24
900028bc:	24008cdc 	.word	0x24008cdc
900028c0:	d00bf400 	.word	0xd00bf400
900028c4:	d007f800 	.word	0xd007f800

900028c8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900028c8:	b510      	push	{r4, lr}
        return instance;
900028ca:	4c14      	ldr	r4, [pc, #80]	; (9000291c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900028cc:	6823      	ldr	r3, [r4, #0]
900028ce:	b323      	cbz	r3, 9000291a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
900028d0:	4b13      	ldr	r3, [pc, #76]	; (90002920 <HAL_LTDC_LineEventCallback+0x58>)
900028d2:	4a14      	ldr	r2, [pc, #80]	; (90002924 <HAL_LTDC_LineEventCallback+0x5c>)
900028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900028d6:	8811      	ldrh	r1, [r2, #0]
900028d8:	428b      	cmp	r3, r1
900028da:	d00a      	beq.n	900028f2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
900028dc:	f009 fed8 	bl	9000c690 <HAL_LTDC_ProgramLineEvent>
900028e0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
900028e2:	6803      	ldr	r3, [r0, #0]
900028e4:	6a1b      	ldr	r3, [r3, #32]
900028e6:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
900028e8:	2000      	movs	r0, #0
        }
    }
900028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
900028ee:	f7fd be75 	b.w	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
900028f2:	4b0d      	ldr	r3, [pc, #52]	; (90002928 <HAL_LTDC_LineEventCallback+0x60>)
900028f4:	8819      	ldrh	r1, [r3, #0]
900028f6:	f009 fecb 	bl	9000c690 <HAL_LTDC_ProgramLineEvent>
        return instance;
900028fa:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
900028fc:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002900:	3301      	adds	r3, #1
90002902:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002906:	f7ff f86b 	bl	900019e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000290a:	6820      	ldr	r0, [r4, #0]
9000290c:	f011 f95a 	bl	90013bc4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002910:	2000      	movs	r0, #0
    }
90002912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002916:	f7fd be2d 	b.w	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000291a:	bd10      	pop	{r4, pc}
9000291c:	240281ec 	.word	0x240281ec
90002920:	50001000 	.word	0x50001000
90002924:	24008cd8 	.word	0x24008cd8
90002928:	24008cd6 	.word	0x24008cd6

9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002930:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900029ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002934:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002936:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002938:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000293c:	4604      	mov	r4, r0
9000293e:	e024      	b.n	9000298a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002940:	682b      	ldr	r3, [r5, #0]
90002942:	4628      	mov	r0, r5
90002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002946:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002948:	2300      	movs	r3, #0
9000294a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000294c:	6829      	ldr	r1, [r5, #0]
9000294e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002952:	9700      	str	r7, [sp, #0]
90002954:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002958:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000295c:	4628      	mov	r0, r5
9000295e:	68a1      	ldr	r1, [r4, #8]
90002960:	47c8      	blx	r9
                    stream.frameCount++;
90002962:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002964:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002968:	3301      	adds	r3, #1
9000296a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000296c:	2800      	cmp	r0, #0
9000296e:	d033      	beq.n	900029d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002970:	682b      	ldr	r3, [r5, #0]
90002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002974:	4543      	cmp	r3, r8
90002976:	d131      	bne.n	900029dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90002978:	6968      	ldr	r0, [r5, #20]
9000297a:	3801      	subs	r0, #1
                    stream.doDecode = false;
9000297c:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000297e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002980:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002984:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002986:	f00c fa3f 	bl	9000ee08 <osMutexRelease>
            SEM_WAIT(semDecode);
9000298a:	f04f 31ff 	mov.w	r1, #4294967295
9000298e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002990:	f00c faac 	bl	9000eeec <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002994:	f04f 31ff 	mov.w	r1, #4294967295
90002998:	6c60      	ldr	r0, [r4, #68]	; 0x44
9000299a:	f00c fa11 	bl	9000edc0 <osMutexAcquire>
                if (stream.doDecode)
9000299e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900029a2:	2b00      	cmp	r3, #0
900029a4:	d0ee      	beq.n	90002984 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900029a6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900029a8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900029aa:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900029ae:	2900      	cmp	r1, #0
900029b0:	d1c6      	bne.n	90002940 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900029b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029b4:	2b00      	cmp	r3, #0
900029b6:	d0c9      	beq.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029b8:	682a      	ldr	r2, [r5, #0]
900029ba:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900029be:	4541      	cmp	r1, r8
900029c0:	d10f      	bne.n	900029e2 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900029c2:	6968      	ldr	r0, [r5, #20]
900029c4:	18c1      	adds	r1, r0, r3
900029c6:	4628      	mov	r0, r5
900029c8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900029ca:	6923      	ldr	r3, [r4, #16]
900029cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900029ce:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
900029d0:	440b      	add	r3, r1
                            stream.skip_frames = 0;
900029d2:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
900029d4:	6123      	str	r3, [r4, #16]
900029d6:	e7b9      	b.n	9000294c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
900029d8:	2001      	movs	r0, #1
900029da:	e7cf      	b.n	9000297c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900029dc:	4628      	mov	r0, r5
900029de:	4798      	blx	r3
900029e0:	e7cb      	b.n	9000297a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900029e2:	4628      	mov	r0, r5
900029e4:	4788      	blx	r1
900029e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900029e8:	e7ec      	b.n	900029c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
900029ea:	bf00      	nop
900029ec:	90000989 	.word	0x90000989

900029f0 <videoTaskFunc>:
    videoController.decoderTaskEntry();
900029f0:	4801      	ldr	r0, [pc, #4]	; (900029f8 <videoTaskFunc+0x8>)
{
900029f2:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
900029f4:	f7ff ff9a 	bl	9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
900029f8:	24008d24 	.word	0x24008d24

900029fc <_GLOBAL__sub_I_mjpegdecoder1>:
}
900029fc:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
900029fe:	4815      	ldr	r0, [pc, #84]	; (90002a54 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a00:	2500      	movs	r5, #0
90002a02:	f7fe fbd3 	bl	900011ac <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a06:	4c14      	ldr	r4, [pc, #80]	; (90002a58 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002a08:	4914      	ldr	r1, [pc, #80]	; (90002a5c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002a0e:	462a      	mov	r2, r5
90002a10:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a12:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a14:	4629      	mov	r1, r5
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a16:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a18:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a1a:	60e5      	str	r5, [r4, #12]
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
90002a1c:	62a5      	str	r5, [r4, #40]	; 0x28
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002a1e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a22:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a24:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
90002a2c:	e9c4 5506 	strd	r5, r5, [r4, #24]
                   seek_to_frame(0), skip_frames(0),
90002a30:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002a34:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002a38:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002a40:	f00c fa04 	bl	9000ee4c <osSemaphoreNew>
90002a44:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002a46:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002a48:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002a4a:	f00c f979 	bl	9000ed40 <osMutexNew>
90002a4e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002a50:	bd38      	pop	{r3, r4, r5, pc}
90002a52:	bf00      	nop
90002a54:	24008cdc 	.word	0x24008cdc
90002a58:	24008d24 	.word	0x24008d24
90002a5c:	9002a15c 	.word	0x9002a15c

90002a60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a64:	4c7e      	ldr	r4, [pc, #504]	; (90002c60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002a66:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a68:	fba4 4303 	umull	r4, r3, r4, r3
{
90002a6c:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a6e:	0a19      	lsrs	r1, r3, #8
{
90002a70:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002a72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
90002a76:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002a78:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002a7c:	4293      	cmp	r3, r2
90002a7e:	930b      	str	r3, [sp, #44]	; 0x2c
90002a80:	f240 80e9 	bls.w	90002c56 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002a84:	4b77      	ldr	r3, [pc, #476]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002a86:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002c74 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
90002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002a8c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002c78 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
90002a90:	930a      	str	r3, [sp, #40]	; 0x28
90002a92:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
90002a94:	f04f 0e02 	mov.w	lr, #2
90002a98:	9908      	ldr	r1, [sp, #32]
90002a9a:	f502 7080 	add.w	r0, r2, #256	; 0x100
90002a9e:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa0:	3101      	adds	r1, #1
    currentMCU++;
90002aa2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
90002aa8:	9108      	str	r1, [sp, #32]
90002aaa:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002aae:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ab2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
90002ab6:	005b      	lsls	r3, r3, #1
90002ab8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002abc:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002abe:	e009      	b.n	90002ad4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ac0:	9b01      	ldr	r3, [sp, #4]
90002ac2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ac6:	d30f      	bcc.n	90002ae8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002ac8:	f1be 0f10 	cmp.w	lr, #16
90002acc:	f000 80b6 	beq.w	90002c3c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002ad0:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002ad4:	f1be 0f0a 	cmp.w	lr, #10
90002ad8:	d1f2      	bne.n	90002ac0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002ada:	9b06      	ldr	r3, [sp, #24]
90002adc:	3380      	adds	r3, #128	; 0x80
90002ade:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002ae0:	9b01      	ldr	r3, [sp, #4]
90002ae2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ae6:	d2f3      	bcs.n	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002ae8:	9a01      	ldr	r2, [sp, #4]
90002aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002aec:	f8cd e01c 	str.w	lr, [sp, #28]
90002af0:	4413      	add	r3, r2
90002af2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002af6:	f103 0c10 	add.w	ip, r3, #16
90002afa:	3330      	adds	r3, #48	; 0x30
90002afc:	4696      	mov	lr, r2
90002afe:	9102      	str	r1, [sp, #8]
90002b00:	9305      	str	r3, [sp, #20]
90002b02:	9b02      	ldr	r3, [sp, #8]
90002b04:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002b08:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002b0c:	4674      	mov	r4, lr
90002b0e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b10:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002b14:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b16:	4954      	ldr	r1, [pc, #336]	; (90002c68 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002b18:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b1a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002b1e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b20:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002b24:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b26:	4951      	ldr	r1, [pc, #324]	; (90002c6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002b28:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b30:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b34:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002b36:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002b38:	4b4d      	ldr	r3, [pc, #308]	; (90002c70 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002b3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b3e:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b42:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b46:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b48:	eb03 0b02 	add.w	fp, r3, r2
90002b4c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b50:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b52:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b56:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b5a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b5e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b62:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002b66:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002b6a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002b6e:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002b72:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b76:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b7a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b7e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b80:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b84:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b88:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002b8c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b90:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b94:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b98:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b9c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ba0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ba4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ba8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bac:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bb0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bb2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bb6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bba:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002bbe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bc2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bc6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002bca:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002bce:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002bd2:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002bd6:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bd8:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bda:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002bdc:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bde:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002be2:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002bea:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002bee:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002bf2:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002bf6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002bfa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002bfe:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002c02:	d185      	bne.n	90002b10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002c04:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c06:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002c0a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002c0e:	3304      	adds	r3, #4
90002c10:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002c12:	9b05      	ldr	r3, [sp, #20]
90002c14:	4563      	cmp	r3, ip
90002c16:	f47f af74 	bne.w	90002b02 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002c1a:	9b04      	ldr	r3, [sp, #16]
90002c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002c20:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002c22:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002c26:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002c28:	9b03      	ldr	r3, [sp, #12]
90002c2a:	f103 0310 	add.w	r3, r3, #16
90002c2e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002c30:	9b01      	ldr	r3, [sp, #4]
90002c32:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002c36:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002c38:	f47f af4a 	bne.w	90002ad0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c3c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c3e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002c40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002c44:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002c48:	4293      	cmp	r3, r2
90002c4a:	f47f af22 	bne.w	90002a92 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002c4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002c52:	4a04      	ldr	r2, [pc, #16]	; (90002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002c54:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002c56:	ee17 0a90 	vmov	r0, s15
90002c5a:	b00d      	add	sp, #52	; 0x34
90002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002c60:	aaaaaaab 	.word	0xaaaaaaab
90002c64:	2400b9ec 	.word	0x2400b9ec
90002c68:	24009d6c 	.word	0x24009d6c
90002c6c:	2400996c 	.word	0x2400996c
90002c70:	2400a56c 	.word	0x2400a56c
90002c74:	2400a16c 	.word	0x2400a16c
90002c78:	9002a194 	.word	0x9002a194

90002c7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c80:	0a1c      	lsrs	r4, r3, #8
{
90002c82:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002c84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002c88:	ee07 4a90 	vmov	s15, r4
{
90002c8c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002c8e:	429a      	cmp	r2, r3
{
90002c90:	9007      	str	r0, [sp, #28]
90002c92:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002c94:	930b      	str	r3, [sp, #44]	; 0x2c
90002c96:	f080 814a 	bcs.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c9a:	4ba7      	ldr	r3, [pc, #668]	; (90002f38 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002c9c:	4da7      	ldr	r5, [pc, #668]	; (90002f3c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002ca0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002f40 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002ca4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ca8:	691b      	ldr	r3, [r3, #16]
90002caa:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002f44 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002cae:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002f48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002cb2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002f4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cb6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cb8:	9301      	str	r3, [sp, #4]
90002cba:	e008      	b.n	90002cce <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cbc:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002cc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002cc4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002cc6:	9b08      	ldr	r3, [sp, #32]
90002cc8:	4293      	cmp	r3, r2
90002cca:	f000 8130 	beq.w	90002f2e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cce:	9a07      	ldr	r2, [sp, #28]
90002cd0:	9908      	ldr	r1, [sp, #32]
90002cd2:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002cd6:	010b      	lsls	r3, r1, #4
90002cd8:	3101      	adds	r1, #1
    currentMCU++;
90002cda:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002cde:	980a      	ldr	r0, [sp, #40]	; 0x28
90002ce0:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ce2:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002ce4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002ce8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cec:	fb01 f202 	mul.w	r2, r1, r2
90002cf0:	005b      	lsls	r3, r3, #1
90002cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002cf6:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002cf8:	2308      	movs	r3, #8
90002cfa:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
90002d00:	4293      	cmp	r3, r2
90002d02:	d9db      	bls.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002d06:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002d08:	9a03      	ldr	r2, [sp, #12]
90002d0a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002d0e:	9a02      	ldr	r2, [sp, #8]
90002d10:	f103 0020 	add.w	r0, r3, #32
90002d14:	3204      	adds	r2, #4
90002d16:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d18:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002d1c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d1e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002d22:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d24:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002d28:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002d2a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d2e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d32:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d34:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002d38:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d3c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d3e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d40:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d44:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d48:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d4c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d50:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d52:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d56:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d5a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d5e:	08e4      	lsrs	r4, r4, #3
90002d60:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d64:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d68:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d6c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002d70:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d74:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d76:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d78:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d82:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d86:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d88:	08c0      	lsrs	r0, r0, #3
90002d8a:	08a4      	lsrs	r4, r4, #2
90002d8c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d90:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d94:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d98:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d9c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002da0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002da4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002da8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dac:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dae:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002db2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002db6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002db8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dba:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dbe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dc6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dca:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dcc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dd0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002dd4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002dd8:	08e4      	lsrs	r4, r4, #3
90002dda:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002dde:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002de2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002de6:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002dea:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dee:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002dfc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e00:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e02:	08c0      	lsrs	r0, r0, #3
90002e04:	08a4      	lsrs	r4, r4, #2
90002e06:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e0a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e0e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e12:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e16:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002e1a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e1e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e22:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e26:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e2a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e2c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e30:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002e32:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e34:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e38:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e3c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e40:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e44:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e46:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e4a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002e4e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e52:	08e4      	lsrs	r4, r4, #3
90002e54:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e58:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e5c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e60:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002e64:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e68:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e6c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e6e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e72:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e76:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e7a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e7c:	08c0      	lsrs	r0, r0, #3
90002e7e:	08a4      	lsrs	r4, r4, #2
90002e80:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e84:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e88:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e8c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e90:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002e94:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002e98:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002e9c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ea0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ea2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002ea6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eaa:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eac:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eae:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eb2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eb6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002eba:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ebe:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ec0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ec4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ec8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ecc:	08e4      	lsrs	r4, r4, #3
90002ece:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ed2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ed6:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002eda:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002ede:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ee2:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee4:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ee6:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ee8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002eec:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002ef0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ef4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ef6:	08c0      	lsrs	r0, r0, #3
90002ef8:	08a4      	lsrs	r4, r4, #2
90002efa:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002efe:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002f02:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002f06:	9804      	ldr	r0, [sp, #16]
90002f08:	4283      	cmp	r3, r0
90002f0a:	f47f af05 	bne.w	90002d18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002f0e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f10:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002f12:	3308      	adds	r3, #8
90002f14:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002f16:	9b03      	ldr	r3, [sp, #12]
90002f18:	3308      	adds	r3, #8
90002f1a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f1c:	9b00      	ldr	r3, [sp, #0]
90002f1e:	4413      	add	r3, r2
90002f20:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002f22:	9b05      	ldr	r3, [sp, #20]
90002f24:	3b01      	subs	r3, #1
90002f26:	9305      	str	r3, [sp, #20]
90002f28:	f47f aee8 	bne.w	90002cfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002f2c:	e6c6      	b.n	90002cbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002f2e:	ee17 0a90 	vmov	r0, s15
90002f32:	b00d      	add	sp, #52	; 0x34
90002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002f38:	2400b9ec 	.word	0x2400b9ec
90002f3c:	2400996c 	.word	0x2400996c
90002f40:	2400a56c 	.word	0x2400a56c
90002f44:	2400a16c 	.word	0x2400a16c
90002f48:	24009d6c 	.word	0x24009d6c
90002f4c:	9002a194 	.word	0x9002a194

90002f50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f54:	4cb6      	ldr	r4, [pc, #728]	; (90003230 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002f56:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f58:	fba4 4303 	umull	r4, r3, r4, r3
{
90002f5c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f5e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002f60:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002f64:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002f68:	429a      	cmp	r2, r3
90002f6a:	9306      	str	r3, [sp, #24]
{
90002f6c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f70:	f080 8158 	bcs.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f74:	4baf      	ldr	r3, [pc, #700]	; (90003234 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f76:	4cb0      	ldr	r4, [pc, #704]	; (90003238 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f7a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003240 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002f7e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f82:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f84:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003244 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f88:	48ac      	ldr	r0, [pc, #688]	; (9000323c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002f8a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003248 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f8e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f90:	9300      	str	r3, [sp, #0]
90002f92:	e007      	b.n	90002fa4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002f94:	9b04      	ldr	r3, [sp, #16]
90002f96:	33c0      	adds	r3, #192	; 0xc0
90002f98:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002f9a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002f9e:	4293      	cmp	r3, r2
90002fa0:	f000 8140 	beq.w	90003224 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fa4:	9e05      	ldr	r6, [sp, #20]
90002fa6:	9f07      	ldr	r7, [sp, #28]
90002fa8:	00f2      	lsls	r2, r6, #3
90002faa:	3601      	adds	r6, #1
90002fac:	9904      	ldr	r1, [sp, #16]
90002fae:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fb0:	9e03      	ldr	r6, [sp, #12]
90002fb2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002fb6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002fba:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002fbe:	fb06 f505 	mul.w	r5, r6, r5
90002fc2:	0052      	lsls	r2, r2, #1
90002fc4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002fc8:	2508      	movs	r5, #8
90002fca:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002fcc:	9d00      	ldr	r5, [sp, #0]
90002fce:	4295      	cmp	r5, r2
90002fd0:	d9e0      	bls.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fd2:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002fd6:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fd8:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002fdc:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002fde:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fe2:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002fea:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fec:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ff8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffa:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ffe:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003002:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003006:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003008:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000300c:	08ed      	lsrs	r5, r5, #3
9000300e:	08bf      	lsrs	r7, r7, #2
90003010:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90003014:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003016:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000301a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000301c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003020:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003024:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003028:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000302c:	4425      	add	r5, r4
9000302e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003032:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003036:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000303a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000303c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000303e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003040:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003044:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003048:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000304c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000304e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90003052:	08ed      	lsrs	r5, r5, #3
90003054:	08bf      	lsrs	r7, r7, #2
90003056:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000305a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000305c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90003060:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90003062:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003064:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003068:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000306c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000306e:	4427      	add	r7, r4
90003070:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003074:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003076:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000307a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000307c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003080:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003084:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003088:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000308c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003094:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003098:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000309c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a0:	08fe      	lsrs	r6, r7, #3
900030a2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030a6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030aa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030ae:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900030b8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900030c4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ca:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ce:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030d8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030dc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030e8:	08fe      	lsrs	r6, r7, #3
900030ea:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ee:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030f2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030f8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030fc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003100:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003104:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003108:	4427      	add	r7, r4
9000310a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000310e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003116:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003118:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003120:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003124:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003128:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000312c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003130:	08fe      	lsrs	r6, r7, #3
90003132:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003136:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000313a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000313e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003140:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003144:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003148:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000314c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000314e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003152:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003156:	44b9      	add	r9, r7
90003158:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000315c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003160:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003164:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003168:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000316a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000316c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003170:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90003174:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003178:	08fe      	lsrs	r6, r7, #3
9000317a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000317e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003182:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003186:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003188:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000318c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90003190:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003194:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003198:	4427      	add	r7, r4
9000319a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000319e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031a2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031a6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031a8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031aa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ac:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031b0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031b4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031b8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031bc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900031c0:	08fe      	lsrs	r6, r7, #3
900031c2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900031c6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900031ca:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900031ce:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900031d0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031d4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900031d8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900031e0:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031e2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031e6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031ea:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031ee:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900031f0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031f2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900031f4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900031f8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900031fc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003200:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003204:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003208:	08fe      	lsrs	r6, r7, #3
9000320a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000320e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003212:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003216:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003218:	9d01      	ldr	r5, [sp, #4]
9000321a:	3d01      	subs	r5, #1
9000321c:	9501      	str	r5, [sp, #4]
9000321e:	f47f aed5 	bne.w	90002fcc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003222:	e6b7      	b.n	90002f94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003224:	ee17 0a90 	vmov	r0, s15
90003228:	b009      	add	sp, #36	; 0x24
9000322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000322e:	bf00      	nop
90003230:	aaaaaaab 	.word	0xaaaaaaab
90003234:	2400b9ec 	.word	0x2400b9ec
90003238:	9002a194 	.word	0x9002a194
9000323c:	2400a16c 	.word	0x2400a16c
90003240:	2400a56c 	.word	0x2400a56c
90003244:	2400996c 	.word	0x2400996c
90003248:	24009d6c 	.word	0x24009d6c

9000324c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003250:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003254:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003256:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003258:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000325c:	f080 8088 	bcs.w	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003260:	4b45      	ldr	r3, [pc, #276]	; (90003378 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003262:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003266:	691e      	ldr	r6, [r3, #16]
90003268:	e003      	b.n	90003272 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000326a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000326c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90003270:	d07e      	beq.n	90003370 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003272:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90003274:	4604      	mov	r4, r0
90003276:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000327a:	3201      	adds	r2, #1
9000327c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90003280:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003284:	fb08 f505 	mul.w	r5, r8, r5
90003288:	005b      	lsls	r3, r3, #1
9000328a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000328e:	429e      	cmp	r6, r3
90003290:	d9eb      	bls.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90003292:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90003296:	18cd      	adds	r5, r1, r3
          pLum++;
90003298:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9000329a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000329e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032a2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032a6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032aa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ae:	ea47 070c 	orr.w	r7, r7, ip
900032b2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900032b4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900032b6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ba:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032c2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032c6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032ca:	ea47 070c 	orr.w	r7, r7, ip
900032ce:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900032d0:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032d4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032dc:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032e0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032e4:	ea47 070c 	orr.w	r7, r7, ip
900032e8:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
900032ea:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900032ee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900032f2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900032f6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032fa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032fe:	ea47 070c 	orr.w	r7, r7, ip
90003302:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003304:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003308:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000330c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003310:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003314:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003318:	ea47 070c 	orr.w	r7, r7, ip
9000331c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000331e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003322:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003326:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000332a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000332e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003332:	ea47 070c 	orr.w	r7, r7, ip
90003336:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003338:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000333c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003340:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003344:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003348:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000334c:	ea47 070c 	orr.w	r7, r7, ip
90003350:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003352:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003356:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000335a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000335e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003362:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003366:	ea47 070c 	orr.w	r7, r7, ip
9000336a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000336c:	d18f      	bne.n	9000328e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000336e:	e77c      	b.n	9000326a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90003370:	ee17 0a90 	vmov	r0, s15
90003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003378:	2400b9ec 	.word	0x2400b9ec

9000337c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003380:	0a1c      	lsrs	r4, r3, #8
{
90003382:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003384:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90003388:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000338c:	429a      	cmp	r2, r3
9000338e:	9300      	str	r3, [sp, #0]
90003390:	f080 8129 	bcs.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003394:	4b96      	ldr	r3, [pc, #600]	; (900035f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003396:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900035f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000339a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000339c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033a0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033a2:	9401      	str	r4, [sp, #4]
900033a4:	e005      	b.n	900033b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900033a6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900033a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900033ac:	429a      	cmp	r2, r3
900033ae:	f000 811a 	beq.w	900035e6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033b2:	00d3      	lsls	r3, r2, #3
900033b4:	9c01      	ldr	r4, [sp, #4]
900033b6:	3201      	adds	r2, #1
    currentMCU++;
900033b8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900033bc:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900033c0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900033c4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900033c6:	fb08 f505 	mul.w	r5, r8, r5
900033ca:	0064      	lsls	r4, r4, #1
900033cc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900033d0:	42a6      	cmp	r6, r4
900033d2:	d9e8      	bls.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900033d4:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
900033d8:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033da:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900033de:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
900033e2:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033e6:	fb19 f90a 	smulbb	r9, r9, sl
900033ea:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900033f2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033f6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033fa:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033fe:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003402:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003406:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000340a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000340e:	fb19 f90a 	smulbb	r9, r9, sl
90003412:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003416:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000341a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000341c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000341e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003420:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003424:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003428:	fb19 f90a 	smulbb	r9, r9, sl
9000342c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003430:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90003434:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003438:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000343c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003440:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003444:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003448:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000344c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003450:	fb19 f90a 	smulbb	r9, r9, sl
90003454:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003458:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000345c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000345e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003460:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003464:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003468:	fb19 f90a 	smulbb	r9, r9, sl
9000346c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003470:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90003474:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003478:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000347c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003480:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003484:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003488:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000348c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90003490:	fb19 f90a 	smulbb	r9, r9, sl
90003494:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003498:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000349c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000349e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900034a0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900034a8:	fb19 f90a 	smulbb	r9, r9, sl
900034ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900034b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034cc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900034d0:	fb19 f90a 	smulbb	r9, r9, sl
900034d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034de:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
900034e0:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034e4:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
900034e8:	fb19 f90a 	smulbb	r9, r9, sl
900034ec:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900034f4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034f8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034fc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003500:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003504:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003508:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000350c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003510:	fb19 f90a 	smulbb	r9, r9, sl
90003514:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003518:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000351c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000351e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003520:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003524:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003528:	fb19 f90a 	smulbb	r9, r9, sl
9000352c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003530:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90003534:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003538:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000353c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003540:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003544:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003548:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000354c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003550:	fb19 f90a 	smulbb	r9, r9, sl
90003554:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003558:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000355c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000355e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003560:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003564:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003568:	fb19 f90a 	smulbb	r9, r9, sl
9000356c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003570:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90003574:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003578:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000357c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003580:	ea4f 2555 	mov.w	r5, r5, lsr #9
90003584:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003588:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000358c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90003590:	fb19 f90a 	smulbb	r9, r9, sl
90003594:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003598:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000359c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000359e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900035a0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900035a4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900035a8:	fb19 f90a 	smulbb	r9, r9, sl
900035ac:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035b0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900035b4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035b8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035bc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035c0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900035c4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900035c8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900035cc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900035d0:	fb19 f90a 	smulbb	r9, r9, sl
900035d4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900035d8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900035dc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900035de:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
900035e0:	f47f aef6 	bne.w	900033d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
900035e4:	e6df      	b.n	900033a6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
900035e6:	ee17 0a90 	vmov	r0, s15
900035ea:	b003      	add	sp, #12
900035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900035f0:	2400b9ec 	.word	0x2400b9ec
900035f4:	80808081 	.word	0x80808081

900035f8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900035f8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900035fa:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900035fc:	6805      	ldr	r5, [r0, #0]
900035fe:	4c3e      	ldr	r4, [pc, #248]	; (900036f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003600:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003602:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003604:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003606:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000360a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000360e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003610:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003614:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003616:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003618:	d027      	beq.n	9000366a <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000361a:	b9ed      	cbnz	r5, 90003658 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000361c:	4837      	ldr	r0, [pc, #220]	; (900036fc <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
9000361e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003620:	f013 0107 	ands.w	r1, r3, #7
90003624:	d02b      	beq.n	9000367e <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003626:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000362a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000362c:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000362e:	4419      	add	r1, r3
90003630:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003632:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003634:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003636:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003638:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000363c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000363e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003642:	fb05 6611 	mls	r6, r5, r1, r6
90003646:	b106      	cbz	r6, 9000364a <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003648:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000364a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000364e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003650:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003652:	6013      	str	r3, [r2, #0]
}
90003654:	bcf0      	pop	{r4, r5, r6, r7}
90003656:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003658:	2d30      	cmp	r5, #48	; 0x30
9000365a:	d119      	bne.n	90003690 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000365c:	4828      	ldr	r0, [pc, #160]	; (90003700 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
9000365e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003660:	f013 0107 	ands.w	r1, r3, #7
90003664:	d1df      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003666:	6161      	str	r1, [r4, #20]
90003668:	e00a      	b.n	90003680 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000366a:	2f01      	cmp	r7, #1
9000366c:	d024      	beq.n	900036b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000366e:	2f02      	cmp	r7, #2
90003670:	d011      	beq.n	90003696 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90003672:	4824      	ldr	r0, [pc, #144]	; (90003704 <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
90003674:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90003676:	f013 0107 	ands.w	r1, r3, #7
9000367a:	d1d4      	bne.n	90003626 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
9000367c:	e7f3      	b.n	90003666 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9000367e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003680:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90003682:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003684:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003686:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003688:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9000368a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000368e:	e7d6      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90003690:	2001      	movs	r0, #1
}
90003692:	bcf0      	pop	{r4, r5, r6, r7}
90003694:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90003696:	481c      	ldr	r0, [pc, #112]	; (90003708 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90003698:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
9000369a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000369c:	f013 010f 	ands.w	r1, r3, #15
900036a0:	d022      	beq.n	900036e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900036a6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036a8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036aa:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900036ac:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036ae:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036b2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036b4:	62a1      	str	r1, [r4, #40]	; 0x28
900036b6:	e7c1      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900036b8:	4814      	ldr	r0, [pc, #80]	; (9000370c <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900036ba:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900036bc:	f013 010f 	ands.w	r1, r3, #15
900036c0:	d107      	bne.n	900036d2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036c2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036c4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036c6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036c8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ca:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036cc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036d0:	e7b5      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900036d2:	f1c1 0110 	rsb	r1, r1, #16
900036d6:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900036d8:	4419      	add	r1, r3
900036da:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036dc:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036de:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036e0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900036e2:	e9c4 5507 	strd	r5, r5, [r4, #28]
900036e6:	e7a9      	b.n	9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
900036e8:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900036ea:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036ec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
900036ee:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900036f2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900036f4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900036f6:	e7a2      	b.n	9000363e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
900036f8:	2400b9ec 	.word	0x2400b9ec
900036fc:	9000324d 	.word	0x9000324d
90003700:	9000337d 	.word	0x9000337d
90003704:	90002f51 	.word	0x90002f51
90003708:	90002c7d 	.word	0x90002c7d
9000370c:	90002a61 	.word	0x90002a61

90003710 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003714:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003844 <TGFX_JPEG_InitColorTables+0x134>
90003718:	b0a5      	sub	sp, #148	; 0x94
9000371a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003848 <TGFX_JPEG_InitColorTables+0x138>
9000371e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003722:	f8df e128 	ldr.w	lr, [pc, #296]	; 9000384c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003726:	2300      	movs	r3, #0
90003728:	4f3d      	ldr	r7, [pc, #244]	; (90003820 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000372a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000372e:	4e3d      	ldr	r6, [pc, #244]	; (90003824 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003730:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003734:	4d3c      	ldr	r5, [pc, #240]	; (90003828 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003736:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000373a:	4c3c      	ldr	r4, [pc, #240]	; (9000382c <TGFX_JPEG_InitColorTables+0x11c>)
9000373c:	483c      	ldr	r0, [pc, #240]	; (90003830 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000373e:	f249 6245 	movw	r2, #38469	; 0x9645
90003742:	fb02 f203 	mul.w	r2, r2, r3
90003746:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000374a:	1412      	asrs	r2, r2, #16
9000374c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003750:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003754:	fb02 f203 	mul.w	r2, r2, r3
90003758:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000375c:	1412      	asrs	r2, r2, #16
9000375e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003762:	4a34      	ldr	r2, [pc, #208]	; (90003834 <TGFX_JPEG_InitColorTables+0x124>)
90003764:	fb02 f203 	mul.w	r2, r2, r3
90003768:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000376c:	1412      	asrs	r2, r2, #16
9000376e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003772:	4a31      	ldr	r2, [pc, #196]	; (90003838 <TGFX_JPEG_InitColorTables+0x128>)
90003774:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003778:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000377a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003782:	ea4f 4222 	mov.w	r2, r2, asr #16
90003786:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000378a:	4a2c      	ldr	r2, [pc, #176]	; (9000383c <TGFX_JPEG_InitColorTables+0x12c>)
9000378c:	fb02 b203 	mla	r2, r2, r3, fp
90003790:	ea4f 4222 	mov.w	r2, r2, asr #16
90003794:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003798:	4a29      	ldr	r2, [pc, #164]	; (90003840 <TGFX_JPEG_InitColorTables+0x130>)
9000379a:	fb02 a203 	mla	r2, r2, r3, sl
9000379e:	ea4f 4222 	mov.w	r2, r2, asr #16
900037a2:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037a6:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900037aa:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037ac:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900037b0:	f343 024f 	sbfx	r2, r3, #1, #16
900037b4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900037b8:	d1c1      	bne.n	9000373e <TGFX_JPEG_InitColorTables+0x2e>
900037ba:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003850 <TGFX_JPEG_InitColorTables+0x140>
900037be:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900037c0:	f04f 0c00 	mov.w	ip, #0
900037c4:	e007      	b.n	900037d6 <TGFX_JPEG_InitColorTables+0xc6>
900037c6:	f10c 0c01 	add.w	ip, ip, #1
900037ca:	4641      	mov	r1, r8
900037cc:	f10e 0e20 	add.w	lr, lr, #32
900037d0:	f1bc 0f10 	cmp.w	ip, #16
900037d4:	d03e      	beq.n	90003854 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900037d6:	f1bc 0f07 	cmp.w	ip, #7
900037da:	f101 0808 	add.w	r8, r1, #8
900037de:	4672      	mov	r2, lr
900037e0:	f04f 0001 	mov.w	r0, #1
900037e4:	bf94      	ite	ls
900037e6:	2600      	movls	r6, #0
900037e8:	2601      	movhi	r6, #1
900037ea:	fa1f f388 	uxth.w	r3, r8
900037ee:	2400      	movs	r4, #0
900037f0:	2c07      	cmp	r4, #7
900037f2:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
900037f6:	bf94      	ite	ls
900037f8:	2700      	movls	r7, #0
900037fa:	2701      	movhi	r7, #1
900037fc:	2f00      	cmp	r7, #0
900037fe:	f000 8407 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003802:	2e00      	cmp	r6, #0
90003804:	f000 8404 	beq.w	90004010 <TGFX_JPEG_InitColorTables+0x900>
90003808:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
9000380c:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000380e:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003810:	d0d9      	beq.n	900037c6 <TGFX_JPEG_InitColorTables+0xb6>
90003812:	3301      	adds	r3, #1
90003814:	3401      	adds	r4, #1
90003816:	3001      	adds	r0, #1
90003818:	3101      	adds	r1, #1
9000381a:	3202      	adds	r2, #2
9000381c:	b29b      	uxth	r3, r3
9000381e:	e7e7      	b.n	900037f0 <TGFX_JPEG_InitColorTables+0xe0>
90003820:	2400c5a8 	.word	0x2400c5a8
90003824:	2400a968 	.word	0x2400a968
90003828:	24008d68 	.word	0x24008d68
9000382c:	2400ad68 	.word	0x2400ad68
90003830:	24009168 	.word	0x24009168
90003834:	ffffd4d1 	.word	0xffffd4d1
90003838:	ffffab30 	.word	0xffffab30
9000383c:	ffff94d1 	.word	0xffff94d1
90003840:	ffffeb30 	.word	0xffffeb30
90003844:	24009568 	.word	0x24009568
90003848:	2400c9a8 	.word	0x2400c9a8
9000384c:	2400b168 	.word	0x2400b168
90003850:	2400c3ac 	.word	0x2400c3ac
90003854:	4b07      	ldr	r3, [pc, #28]	; (90003874 <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003856:	2000      	movs	r0, #0
90003858:	4907      	ldr	r1, [pc, #28]	; (90003878 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
9000385a:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000385e:	9304      	str	r3, [sp, #16]
90003860:	4b06      	ldr	r3, [pc, #24]	; (9000387c <TGFX_JPEG_InitColorTables+0x16c>)
90003862:	4a07      	ldr	r2, [pc, #28]	; (90003880 <TGFX_JPEG_InitColorTables+0x170>)
90003864:	9303      	str	r3, [sp, #12]
90003866:	4b07      	ldr	r3, [pc, #28]	; (90003884 <TGFX_JPEG_InitColorTables+0x174>)
90003868:	f8df e01c 	ldr.w	lr, [pc, #28]	; 90003888 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
9000386c:	469b      	mov	fp, r3
9000386e:	9002      	str	r0, [sp, #8]
90003870:	e00c      	b.n	9000388c <TGFX_JPEG_InitColorTables+0x17c>
90003872:	bf00      	nop
90003874:	2400b56c 	.word	0x2400b56c
90003878:	2400bc2c 	.word	0x2400bc2c
9000387c:	2400b76c 	.word	0x2400b76c
90003880:	2400beac 	.word	0x2400beac
90003884:	2400ba2c 	.word	0x2400ba2c
90003888:	2400c0ac 	.word	0x2400c0ac
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000388c:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388e:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003892:	f10c 0640 	add.w	r6, ip, #64	; 0x40
90003896:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003898:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
9000389a:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000389c:	b2ad      	uxth	r5, r5
9000389e:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900038a2:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038a4:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038a6:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038a8:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900038aa:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ac:	9606      	str	r6, [sp, #24]
900038ae:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038b0:	f503 7580 	add.w	r5, r3, #256	; 0x100
900038b4:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900038b8:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900038bc:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900038c2:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c4:	fa1f fa8a 	uxth.w	sl, sl
900038c8:	f365 060f 	bfi	r6, r5, #0, #16
900038cc:	fa1f f989 	uxth.w	r9, r9
900038d0:	f365 461f 	bfi	r6, r5, #16, #16
900038d4:	4635      	mov	r5, r6
900038d6:	9e04      	ldr	r6, [sp, #16]
900038d8:	9500      	str	r5, [sp, #0]
900038da:	4634      	mov	r4, r6
900038dc:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038de:	f10c 0541 	add.w	r5, ip, #65	; 0x41
900038e2:	b2ad      	uxth	r5, r5
900038e4:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038e6:	f10c 0502 	add.w	r5, ip, #2
900038ea:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038ee:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038f2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038f6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038fa:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038fe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003902:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003906:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000390a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000390e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003912:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003916:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000391a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000391e:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003922:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003926:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000392a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000392e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003932:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003936:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000393a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000393e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003942:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003946:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000394a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000394e:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003952:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003956:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000395a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000395e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003962:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003966:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000396a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000396e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003972:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003976:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000397a:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397e:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003982:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003986:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000398a:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398e:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003992:	b2ad      	uxth	r5, r5
90003994:	f365 000f 	bfi	r0, r5, #0, #16
90003998:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000399c:	f203 1541 	addw	r5, r3, #321	; 0x141
900039a0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a4:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a8:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ae:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b2:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b6:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039bc:	f203 1047 	addw	r0, r3, #327	; 0x147
900039c0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039c4:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039c8:	b280      	uxth	r0, r0
900039ca:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ce:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d2:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039da:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039de:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039e2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039e6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039ea:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f2:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039f6:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039f8:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039fc:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a00:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a02:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a04:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a08:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0a:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a0e:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a10:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a14:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a16:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a18:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a1a:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1e:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a20:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a22:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a26:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a28:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a2a:	b2ad      	uxth	r5, r5
90003a2c:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a2e:	f503 75c3 	add.w	r5, r3, #390	; 0x186
90003a32:	b2ad      	uxth	r5, r5
90003a34:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a36:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a3a:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a3e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a40:	b29b      	uxth	r3, r3
90003a42:	9323      	str	r3, [sp, #140]	; 0x8c
90003a44:	2300      	movs	r3, #0
90003a46:	f36a 030f 	bfi	r3, sl, #0, #16
90003a4a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a4e:	f04f 0a00 	mov.w	sl, #0
90003a52:	f369 0a0f 	bfi	sl, r9, #0, #16
90003a56:	60a3      	str	r3, [r4, #8]
90003a58:	f369 4a1f 	bfi	sl, r9, #16, #16
90003a5c:	f04f 0900 	mov.w	r9, #0
90003a60:	f368 090f 	bfi	r9, r8, #0, #16
90003a64:	f8c4 a00c 	str.w	sl, [r4, #12]
90003a68:	f368 491f 	bfi	r9, r8, #16, #16
90003a6c:	f04f 0800 	mov.w	r8, #0
90003a70:	f367 080f 	bfi	r8, r7, #0, #16
90003a74:	f8c4 9010 	str.w	r9, [r4, #16]
90003a78:	f367 481f 	bfi	r8, r7, #16, #16
90003a7c:	2700      	movs	r7, #0
90003a7e:	f366 070f 	bfi	r7, r6, #0, #16
90003a82:	f8c4 8014 	str.w	r8, [r4, #20]
90003a86:	f366 471f 	bfi	r7, r6, #16, #16
90003a8a:	2600      	movs	r6, #0
90003a8c:	f365 060f 	bfi	r6, r5, #0, #16
90003a90:	61a7      	str	r7, [r4, #24]
90003a92:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
90003a96:	f104 0520 	add.w	r5, r4, #32
90003a9a:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a9c:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a9e:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aa0:	f36c 050f 	bfi	r5, ip, #0, #16
90003aa4:	9c08      	ldr	r4, [sp, #32]
90003aa6:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
90003aaa:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aae:	6005      	str	r5, [r0, #0]
90003ab0:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003ab2:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ab6:	f364 050f 	bfi	r5, r4, #0, #16
90003aba:	f364 451f 	bfi	r5, r4, #16, #16
90003abe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90003ac0:	6045      	str	r5, [r0, #4]
90003ac2:	2500      	movs	r5, #0
90003ac4:	f364 050f 	bfi	r5, r4, #0, #16
90003ac8:	f364 451f 	bfi	r5, r4, #16, #16
90003acc:	9c10      	ldr	r4, [sp, #64]	; 0x40
90003ace:	6085      	str	r5, [r0, #8]
90003ad0:	2500      	movs	r5, #0
90003ad2:	f364 050f 	bfi	r5, r4, #0, #16
90003ad6:	f364 451f 	bfi	r5, r4, #16, #16
90003ada:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003adc:	60c5      	str	r5, [r0, #12]
90003ade:	2500      	movs	r5, #0
90003ae0:	f364 050f 	bfi	r5, r4, #0, #16
90003ae4:	f364 451f 	bfi	r5, r4, #16, #16
90003ae8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003aea:	6105      	str	r5, [r0, #16]
90003aec:	2500      	movs	r5, #0
90003aee:	f364 050f 	bfi	r5, r4, #0, #16
90003af2:	f364 451f 	bfi	r5, r4, #16, #16
90003af6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003af8:	6145      	str	r5, [r0, #20]
90003afa:	2500      	movs	r5, #0
90003afc:	f364 050f 	bfi	r5, r4, #0, #16
90003b00:	f364 451f 	bfi	r5, r4, #16, #16
90003b04:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003b06:	6185      	str	r5, [r0, #24]
90003b08:	2500      	movs	r5, #0
90003b0a:	f364 050f 	bfi	r5, r4, #0, #16
90003b0e:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003b12:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b16:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b18:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003b1a:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b1c:	9c05      	ldr	r4, [sp, #20]
90003b1e:	f364 050f 	bfi	r5, r4, #0, #16
90003b22:	f364 451f 	bfi	r5, r4, #16, #16
90003b26:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003b28:	f84b 5c20 	str.w	r5, [fp, #-32]
90003b2c:	2500      	movs	r5, #0
90003b2e:	f364 050f 	bfi	r5, r4, #0, #16
90003b32:	f364 451f 	bfi	r5, r4, #16, #16
90003b36:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003b3a:	2500      	movs	r5, #0
90003b3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b3e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b40:	f364 050f 	bfi	r5, r4, #0, #16
90003b44:	f364 451f 	bfi	r5, r4, #16, #16
90003b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003b4a:	f84b 5c18 	str.w	r5, [fp, #-24]
90003b4e:	2500      	movs	r5, #0
90003b50:	f364 050f 	bfi	r5, r4, #0, #16
90003b54:	f364 451f 	bfi	r5, r4, #16, #16
90003b58:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003b5a:	f84b 5c14 	str.w	r5, [fp, #-20]
90003b5e:	2500      	movs	r5, #0
90003b60:	f364 050f 	bfi	r5, r4, #0, #16
90003b64:	f364 451f 	bfi	r5, r4, #16, #16
90003b68:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003b6a:	f84b 5c10 	str.w	r5, [fp, #-16]
90003b6e:	2500      	movs	r5, #0
90003b70:	f364 050f 	bfi	r5, r4, #0, #16
90003b74:	f364 451f 	bfi	r5, r4, #16, #16
90003b78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003b7a:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003b7e:	2500      	movs	r5, #0
90003b80:	f364 050f 	bfi	r5, r4, #0, #16
90003b84:	f364 451f 	bfi	r5, r4, #16, #16
90003b88:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003b8a:	f84b 5c08 	str.w	r5, [fp, #-8]
90003b8e:	2500      	movs	r5, #0
90003b90:	f364 050f 	bfi	r5, r4, #0, #16
90003b94:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b98:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b9a:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b9e:	2500      	movs	r5, #0
90003ba0:	f360 050f 	bfi	r5, r0, #0, #16
90003ba4:	f360 451f 	bfi	r5, r0, #16, #16
90003ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
90003baa:	f841 5c20 	str.w	r5, [r1, #-32]
90003bae:	2500      	movs	r5, #0
90003bb0:	f360 050f 	bfi	r5, r0, #0, #16
90003bb4:	f360 451f 	bfi	r5, r0, #16, #16
90003bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
90003bba:	f841 5c1c 	str.w	r5, [r1, #-28]
90003bbe:	2500      	movs	r5, #0
90003bc0:	f360 050f 	bfi	r5, r0, #0, #16
90003bc4:	f360 451f 	bfi	r5, r0, #16, #16
90003bc8:	9812      	ldr	r0, [sp, #72]	; 0x48
90003bca:	f841 5c18 	str.w	r5, [r1, #-24]
90003bce:	2500      	movs	r5, #0
90003bd0:	f360 050f 	bfi	r5, r0, #0, #16
90003bd4:	f360 451f 	bfi	r5, r0, #16, #16
90003bd8:	9816      	ldr	r0, [sp, #88]	; 0x58
90003bda:	f841 5c14 	str.w	r5, [r1, #-20]
90003bde:	2500      	movs	r5, #0
90003be0:	f360 050f 	bfi	r5, r0, #0, #16
90003be4:	f360 451f 	bfi	r5, r0, #16, #16
90003be8:	981a      	ldr	r0, [sp, #104]	; 0x68
90003bea:	f841 5c10 	str.w	r5, [r1, #-16]
90003bee:	2500      	movs	r5, #0
90003bf0:	f360 050f 	bfi	r5, r0, #0, #16
90003bf4:	f360 451f 	bfi	r5, r0, #16, #16
90003bf8:	981e      	ldr	r0, [sp, #120]	; 0x78
90003bfa:	f841 5c0c 	str.w	r5, [r1, #-12]
90003bfe:	2500      	movs	r5, #0
90003c00:	f360 050f 	bfi	r5, r0, #0, #16
90003c04:	f360 451f 	bfi	r5, r0, #16, #16
90003c08:	9822      	ldr	r0, [sp, #136]	; 0x88
90003c0a:	f841 5c08 	str.w	r5, [r1, #-8]
90003c0e:	2500      	movs	r5, #0
90003c10:	f360 050f 	bfi	r5, r0, #0, #16
90003c14:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c18:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c1a:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c1e:	2500      	movs	r5, #0
90003c20:	f360 050f 	bfi	r5, r0, #0, #16
90003c24:	f360 451f 	bfi	r5, r0, #16, #16
90003c28:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c2c:	9d00      	ldr	r5, [sp, #0]
90003c2e:	f8ce 5000 	str.w	r5, [lr]
90003c32:	9801      	ldr	r0, [sp, #4]
90003c34:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003c3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c3c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c40:	2300      	movs	r3, #0
90003c42:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003c44:	f366 030f 	bfi	r3, r6, #0, #16
90003c48:	f366 431f 	bfi	r3, r6, #16, #16
90003c4c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c4e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003c52:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c56:	f842 3c1c 	str.w	r3, [r2, #-28]
90003c5a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003c5c:	9f02      	ldr	r7, [sp, #8]
90003c5e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c62:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003c66:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c68:	f366 431f 	bfi	r3, r6, #16, #16
90003c6c:	f842 3c18 	str.w	r3, [r2, #-24]
90003c70:	f04f 0300 	mov.w	r3, #0
90003c74:	f365 030f 	bfi	r3, r5, #0, #16
90003c78:	f365 431f 	bfi	r3, r5, #16, #16
90003c7c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003c7e:	f842 3c14 	str.w	r3, [r2, #-20]
90003c82:	f04f 0300 	mov.w	r3, #0
90003c86:	f365 040f 	bfi	r4, r5, #0, #16
90003c8a:	f360 030f 	bfi	r3, r0, #0, #16
90003c8e:	f365 441f 	bfi	r4, r5, #16, #16
90003c92:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003c94:	f360 431f 	bfi	r3, r0, #16, #16
90003c98:	f04f 0000 	mov.w	r0, #0
90003c9c:	f842 4c0c 	str.w	r4, [r2, #-12]
90003ca0:	f842 3c10 	str.w	r3, [r2, #-16]
90003ca4:	4603      	mov	r3, r0
90003ca6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003ca8:	f365 000f 	bfi	r0, r5, #0, #16
90003cac:	f364 030f 	bfi	r3, r4, #0, #16
90003cb0:	f365 401f 	bfi	r0, r5, #16, #16
90003cb4:	f364 431f 	bfi	r3, r4, #16, #16
90003cb8:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003cbc:	f47f ade6 	bne.w	9000388c <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc0:	48db      	ldr	r0, [pc, #876]	; (90004030 <TGFX_JPEG_InitColorTables+0x920>)
90003cc2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cc6:	49db      	ldr	r1, [pc, #876]	; (90004034 <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cc8:	6004      	str	r4, [r0, #0]
90003cca:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cce:	4ada      	ldr	r2, [pc, #872]	; (90004038 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd0:	6044      	str	r4, [r0, #4]
90003cd2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd6:	4bd9      	ldr	r3, [pc, #868]	; (9000403c <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cd8:	6084      	str	r4, [r0, #8]
90003cda:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cde:	4fd8      	ldr	r7, [pc, #864]	; (90004040 <TGFX_JPEG_InitColorTables+0x930>)
90003ce0:	60c4      	str	r4, [r0, #12]
90003ce2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ce6:	4ed7      	ldr	r6, [pc, #860]	; (90004044 <TGFX_JPEG_InitColorTables+0x934>)
90003ce8:	6104      	str	r4, [r0, #16]
90003cea:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cee:	4dd6      	ldr	r5, [pc, #856]	; (90004048 <TGFX_JPEG_InitColorTables+0x938>)
90003cf0:	6144      	str	r4, [r0, #20]
90003cf2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003cf6:	f8df b374 	ldr.w	fp, [pc, #884]	; 9000406c <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003cfa:	6184      	str	r4, [r0, #24]
90003cfc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d00:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90004070 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d04:	61c4      	str	r4, [r0, #28]
90003d06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d0a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90004074 <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d0e:	6204      	str	r4, [r0, #32]
90003d10:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d14:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90004078 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d18:	6244      	str	r4, [r0, #36]	; 0x24
90003d1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d1e:	f8df e35c 	ldr.w	lr, [pc, #860]	; 9000407c <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d22:	6284      	str	r4, [r0, #40]	; 0x28
90003d24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d28:	62c4      	str	r4, [r0, #44]	; 0x2c
90003d2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d2e:	6304      	str	r4, [r0, #48]	; 0x30
90003d30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d34:	6344      	str	r4, [r0, #52]	; 0x34
90003d36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d3a:	6384      	str	r4, [r0, #56]	; 0x38
90003d3c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d40:	63c4      	str	r4, [r0, #60]	; 0x3c
90003d42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d46:	6404      	str	r4, [r0, #64]	; 0x40
90003d48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d4c:	6444      	str	r4, [r0, #68]	; 0x44
90003d4e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d52:	6484      	str	r4, [r0, #72]	; 0x48
90003d54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d58:	64c4      	str	r4, [r0, #76]	; 0x4c
90003d5a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d5e:	6504      	str	r4, [r0, #80]	; 0x50
90003d60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d64:	6544      	str	r4, [r0, #84]	; 0x54
90003d66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d6a:	6584      	str	r4, [r0, #88]	; 0x58
90003d6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d70:	65c4      	str	r4, [r0, #92]	; 0x5c
90003d72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d76:	6604      	str	r4, [r0, #96]	; 0x60
90003d78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d7c:	6644      	str	r4, [r0, #100]	; 0x64
90003d7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d82:	6684      	str	r4, [r0, #104]	; 0x68
90003d84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d88:	66c4      	str	r4, [r0, #108]	; 0x6c
90003d8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d8e:	6704      	str	r4, [r0, #112]	; 0x70
90003d90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d94:	6744      	str	r4, [r0, #116]	; 0x74
90003d96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d9a:	6784      	str	r4, [r0, #120]	; 0x78
90003d9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da0:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003da2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003da6:	48a9      	ldr	r0, [pc, #676]	; (9000404c <TGFX_JPEG_InitColorTables+0x93c>)
90003da8:	e9c1 4000 	strd	r4, r0, [r1]
90003dac:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003db0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003db4:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003db8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dbc:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dc0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003dc4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dc8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dcc:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003dd0:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dd4:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dd8:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003ddc:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003de0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003de4:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003de8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003dec:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003df0:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003df4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003df8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003dfc:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003e00:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e04:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e08:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003e0c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e10:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e14:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003e18:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e1c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e20:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003e24:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e28:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e2c:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003e30:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e34:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e38:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003e3c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e40:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e44:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003e48:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e4c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e50:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003e54:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e58:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e5c:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e60:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e64:	497a      	ldr	r1, [pc, #488]	; (90004050 <TGFX_JPEG_InitColorTables+0x940>)
90003e66:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e6a:	e9c2 4100 	strd	r4, r1, [r2]
90003e6e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e72:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e76:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003e7a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e7e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e82:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003e86:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e8a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e8e:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003e92:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e96:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e9a:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003e9e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ea2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ea6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003eaa:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eae:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eb2:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003eb6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eba:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ebe:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003ec2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ec6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eca:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003ece:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ed2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ed6:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003eda:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ede:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ee2:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003ee6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003eea:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003eee:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003ef2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ef6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003efa:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003efe:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f02:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f06:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003f0a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f0e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f12:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003f16:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f1a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003f1e:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f22:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003f26:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003f2a:	4a4a      	ldr	r2, [pc, #296]	; (90004054 <TGFX_JPEG_InitColorTables+0x944>)
90003f2c:	e9c3 4000 	strd	r4, r0, [r3]
90003f30:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003f34:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f38:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f3c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f40:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f44:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003f48:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003f4c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f50:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f54:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f58:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f5c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003f60:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003f64:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f6c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f70:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f74:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003f78:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003f7c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f84:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f88:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f8c:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003f90:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003f94:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f9c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fa0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fa4:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003fa8:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003fac:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fb4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fb8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fbc:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003fc0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003fc4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fc8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fcc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fd0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fd4:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003fd8:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003fdc:	4c1e      	ldr	r4, [pc, #120]	; (90004058 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fde:	481f      	ldr	r0, [pc, #124]	; (9000405c <TGFX_JPEG_InitColorTables+0x94c>)
90003fe0:	491f      	ldr	r1, [pc, #124]	; (90004060 <TGFX_JPEG_InitColorTables+0x950>)
90003fe2:	4a20      	ldr	r2, [pc, #128]	; (90004064 <TGFX_JPEG_InitColorTables+0x954>)
90003fe4:	4b20      	ldr	r3, [pc, #128]	; (90004068 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003fea:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003fec:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003ff0:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff2:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003ff6:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003ffc:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90004000:	4452      	add	r2, sl
90004002:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004004:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004008:	d1ed      	bne.n	90003fe6 <TGFX_JPEG_InitColorTables+0x8d6>
}
9000400a:	b025      	add	sp, #148	; 0x94
9000400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90004010:	f1bc 0f07 	cmp.w	ip, #7
90004014:	d803      	bhi.n	9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004016:	b117      	cbz	r7, 9000401e <TGFX_JPEG_InitColorTables+0x90e>
90004018:	460d      	mov	r5, r1
9000401a:	f7ff bbf7 	b.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
9000401e:	2c07      	cmp	r4, #7
90004020:	f63f abf4 	bhi.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
90004024:	2e00      	cmp	r6, #0
90004026:	f43f abf1 	beq.w	9000380c <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000402a:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
9000402c:	f7ff bbf1 	b.w	90003812 <TGFX_JPEG_InitColorTables+0x102>
90004030:	2400c32c 	.word	0x2400c32c
90004034:	2400b96c 	.word	0x2400b96c
90004038:	2400be2c 	.word	0x2400be2c
9000403c:	2400c2ac 	.word	0x2400c2ac
90004040:	2400a568 	.word	0x2400a568
90004044:	24009968 	.word	0x24009968
90004048:	2400a168 	.word	0x2400a168
9000404c:	00430042 	.word	0x00430042
90004050:	00830082 	.word	0x00830082
90004054:	00c700c6 	.word	0x00c700c6
90004058:	24009d68 	.word	0x24009d68
9000405c:	002c0c00 	.word	0x002c0c00
90004060:	005b6800 	.word	0x005b6800
90004064:	ff1db000 	.word	0xff1db000
90004068:	ff4d0c00 	.word	0xff4d0c00
9000406c:	000166e8 	.word	0x000166e8
90004070:	0001c5a0 	.word	0x0001c5a0
90004074:	ffff4930 	.word	0xffff4930
90004078:	ffffa7e8 	.word	0xffffa7e8
9000407c:	00b3f400 	.word	0x00b3f400

90004080 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90004080:	4901      	ldr	r1, [pc, #4]	; (90004088 <vApplicationIdleHook+0x8>)
90004082:	2000      	movs	r0, #0
90004084:	f00d b900 	b.w	90011288 <vTaskSetApplicationTaskTag>
90004088:	90000965 	.word	0x90000965

9000408c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
9000408c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
9000408e:	2064      	movs	r0, #100	; 0x64
90004090:	f00a fdee 	bl	9000ec70 <osDelay>
  for(;;)
90004094:	e7fb      	b.n	9000408e <StartDefaultTask+0x2>
90004096:	bf00      	nop

90004098 <consumerTask_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_consumerTask_handler */
void consumerTask_handler(void *argument)
{
90004098:	b570      	push	{r4, r5, r6, lr}
9000409a:	4e11      	ldr	r6, [pc, #68]	; (900040e0 <consumerTask_handler+0x48>)
9000409c:	b082      	sub	sp, #8
9000409e:	4c11      	ldr	r4, [pc, #68]	; (900040e4 <consumerTask_handler+0x4c>)
    if(messageQueueGetStatus != osOK) {
    	osDelay(1);
    	continue;
    }

    if(!strcmp(control.type, "DHT11")) {
900040a0:	4d11      	ldr	r5, [pc, #68]	; (900040e8 <consumerTask_handler+0x50>)
    osStatus_t messageQueueGetStatus = osMessageQueueGet(controlQueueHandle, (void*) &control, NULL, 0);
900040a2:	2300      	movs	r3, #0
900040a4:	4669      	mov	r1, sp
900040a6:	6830      	ldr	r0, [r6, #0]
900040a8:	461a      	mov	r2, r3
900040aa:	f00a ffff 	bl	9000f0ac <osMessageQueueGet>
    if(!strcmp(control.type, "DHT11")) {
900040ae:	4629      	mov	r1, r5
    if(messageQueueGetStatus != osOK) {
900040b0:	b990      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
    if(!strcmp(control.type, "DHT11")) {
900040b2:	9800      	ldr	r0, [sp, #0]
900040b4:	f7fc f914 	bl	900002e0 <strcmp>
900040b8:	b970      	cbnz	r0, 900040d8 <consumerTask_handler+0x40>
      DHT11_HandleTypeDef* dht11 = (DHT11_HandleTypeDef*) control.obj;
900040ba:	9a01      	ldr	r2, [sp, #4]

      if(applicationContext.maxTemperature < dht11->temperature) {
900040bc:	f9b4 1000 	ldrsh.w	r1, [r4]
900040c0:	7853      	ldrb	r3, [r2, #1]
900040c2:	4299      	cmp	r1, r3
    	applicationContext.maxTemperature = dht11->temperature;
      }

      if(applicationContext.minTemperature > dht11->temperature) {
900040c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
      	applicationContext.minTemperature = dht11->temperature;
	  }

      applicationContext.temperature = dht11->temperature;
900040c8:	7123      	strb	r3, [r4, #4]
    	applicationContext.maxTemperature = dht11->temperature;
900040ca:	bfb8      	it	lt
900040cc:	8023      	strhlt	r3, [r4, #0]
      if(applicationContext.minTemperature > dht11->temperature) {
900040ce:	428b      	cmp	r3, r1
      	applicationContext.minTemperature = dht11->temperature;
900040d0:	bfb8      	it	lt
900040d2:	8063      	strhlt	r3, [r4, #2]
      applicationContext.humidity = dht11->humidity;
900040d4:	7813      	ldrb	r3, [r2, #0]
900040d6:	7163      	strb	r3, [r4, #5]
    	osDelay(1);
900040d8:	2001      	movs	r0, #1
900040da:	f00a fdc9 	bl	9000ec70 <osDelay>
    	continue;
900040de:	e7e0      	b.n	900040a2 <consumerTask_handler+0xa>
900040e0:	2400cdec 	.word	0x2400cdec
900040e4:	2400cdb0 	.word	0x2400cdb0
900040e8:	9002a494 	.word	0x9002a494

900040ec <temperatureHourlyReadCb>:
{
  /* USER CODE BEGIN temperatureHourlyReadCb */
	int i = 0;
	int size = TEMPERATURE_DATA_SIZE;

	for(i = 0; i < size; ++i) {
900040ec:	4a0e      	ldr	r2, [pc, #56]	; (90004128 <temperatureHourlyReadCb+0x3c>)
900040ee:	2300      	movs	r3, #0
900040f0:	e002      	b.n	900040f8 <temperatureHourlyReadCb+0xc>
900040f2:	3301      	adds	r3, #1
900040f4:	2b18      	cmp	r3, #24
900040f6:	d00b      	beq.n	90004110 <temperatureHourlyReadCb+0x24>
		if(applicationContext.temperatureData[i] == MIN_ALLOWED_TEMPERATURE) {
900040f8:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
900040fc:	3164      	adds	r1, #100	; 0x64
900040fe:	d1f8      	bne.n	900040f2 <temperatureHourlyReadCb+0x6>
			break;
		}
	}

	if(i < size - 1) {
90004100:	2b17      	cmp	r3, #23
90004102:	d005      	beq.n	90004110 <temperatureHourlyReadCb+0x24>
		applicationContext.temperatureData[i] = applicationContext.temperature;
90004104:	4a09      	ldr	r2, [pc, #36]	; (9000412c <temperatureHourlyReadCb+0x40>)
90004106:	3304      	adds	r3, #4
90004108:	7911      	ldrb	r1, [r2, #4]
9000410a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
9000410e:	4770      	bx	lr
{
90004110:	b510      	push	{r4, lr}
	} else {
		// Shift array by one and add the newest value in front
		for(i = 0; i < size - 1; ++i) {
			applicationContext.temperatureData[i] = applicationContext.temperatureData[i + 1];
90004112:	4c06      	ldr	r4, [pc, #24]	; (9000412c <temperatureHourlyReadCb+0x40>)
90004114:	222e      	movs	r2, #46	; 0x2e
90004116:	f104 010a 	add.w	r1, r4, #10
9000411a:	f104 0008 	add.w	r0, r4, #8
9000411e:	f023 fd83 	bl	90027c28 <memmove>
		}

		applicationContext.temperatureData[size - 1] = applicationContext.temperature;
90004122:	7923      	ldrb	r3, [r4, #4]
90004124:	86e3      	strh	r3, [r4, #54]	; 0x36
	}

  /* USER CODE END temperatureHourlyReadCb */
}
90004126:	bd10      	pop	{r4, pc}
90004128:	2400cdb6 	.word	0x2400cdb6
9000412c:	2400cdb0 	.word	0x2400cdb0

90004130 <dht11Task_handler>:
{
90004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004134:	f04f 0a00 	mov.w	sl, #0
90004138:	b087      	sub	sp, #28

	// EMPTY BUFFER
	for (int i=0; i<5; i++) bits[i] = 0;

	// REQUEST SAMPLE
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
9000413a:	4c47      	ldr	r4, [pc, #284]	; (90004258 <dht11Task_handler+0x128>)
9000413c:	46d1      	mov	r9, sl
9000413e:	46d3      	mov	fp, sl
90004140:	2200      	movs	r2, #0
90004142:	2108      	movs	r1, #8
90004144:	4620      	mov	r0, r4
        // wait for high pulse
        uint32_t t = 0;
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
        {
            t++;
            HAL_Delay(1);
90004146:	f04f 0801 	mov.w	r8, #1
    memset(bits, 0, sizeof(bits));
9000414a:	4616      	mov	r6, r2
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
9000414c:	f006 f8d4 	bl	9000a2f8 <HAL_GPIO_WritePin>
    HAL_Delay(18);
90004150:	2012      	movs	r0, #18
90004152:	f005 fc3b 	bl	900099cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
90004156:	4642      	mov	r2, r8
90004158:	2108      	movs	r1, #8
9000415a:	4620      	mov	r0, r4
9000415c:	f006 f8cc 	bl	9000a2f8 <HAL_GPIO_WritePin>
    HAL_Delay(40);
90004160:	2028      	movs	r0, #40	; 0x28
90004162:	f005 fc33 	bl	900099cc <HAL_Delay>
    memset(bits, 0, sizeof(bits));
90004166:	f8cd b010 	str.w	fp, [sp, #16]
9000416a:	f88d b014 	strb.w	fp, [sp, #20]
    for(i=0; i<40; i++)
9000416e:	b2f7      	uxtb	r7, r6
        while(!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin));
90004170:	2108      	movs	r1, #8
90004172:	4620      	mov	r0, r4
90004174:	f006 f8ba 	bl	9000a2ec <HAL_GPIO_ReadPin>
90004178:	2800      	cmp	r0, #0
9000417a:	d0f9      	beq.n	90004170 <dht11Task_handler+0x40>
        uint32_t t = 0;
9000417c:	2500      	movs	r5, #0
9000417e:	e002      	b.n	90004186 <dht11Task_handler+0x56>
            t++;
90004180:	3501      	adds	r5, #1
            HAL_Delay(1);
90004182:	f005 fc23 	bl	900099cc <HAL_Delay>
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
90004186:	2108      	movs	r1, #8
90004188:	4620      	mov	r0, r4
9000418a:	f006 f8af 	bl	9000a2ec <HAL_GPIO_ReadPin>
9000418e:	4603      	mov	r3, r0
            HAL_Delay(1);
90004190:	2001      	movs	r0, #1
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
90004192:	2b00      	cmp	r3, #0
90004194:	d1f4      	bne.n	90004180 <dht11Task_handler+0x50>
        }

        // store bit value in bits array
        if(t > 30)
90004196:	2d1e      	cmp	r5, #30
90004198:	d90c      	bls.n	900041b4 <dht11Task_handler+0x84>
        	bits[i/8] |= (1 << (7 - (i % 8)));
9000419a:	aa06      	add	r2, sp, #24
9000419c:	43f3      	mvns	r3, r6
9000419e:	eb02 07d7 	add.w	r7, r2, r7, lsr #3
900041a2:	f003 0307 	and.w	r3, r3, #7
900041a6:	f817 2c08 	ldrb.w	r2, [r7, #-8]
900041aa:	fa08 f303 	lsl.w	r3, r8, r3
900041ae:	4313      	orrs	r3, r2
900041b0:	f807 3c08 	strb.w	r3, [r7, #-8]
    for(i=0; i<40; i++)
900041b4:	3601      	adds	r6, #1
900041b6:	2e28      	cmp	r6, #40	; 0x28
900041b8:	d1d9      	bne.n	9000416e <dht11Task_handler+0x3e>
    }

    // verify checksum
    if(bits[4] == (bits[0] + bits[1] + bits[2] + bits[3]))
900041ba:	f89d 2011 	ldrb.w	r2, [sp, #17]
900041be:	f89d 3010 	ldrb.w	r3, [sp, #16]
900041c2:	f89d 1012 	ldrb.w	r1, [sp, #18]
900041c6:	4413      	add	r3, r2
900041c8:	f89d 0013 	ldrb.w	r0, [sp, #19]
900041cc:	f89d 5014 	ldrb.w	r5, [sp, #20]
900041d0:	440b      	add	r3, r1
900041d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
900041d6:	4403      	add	r3, r0
900041d8:	429d      	cmp	r5, r3
900041da:	d015      	beq.n	90004208 <dht11Task_handler+0xd8>
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900041dc:	25ff      	movs	r5, #255	; 0xff
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900041de:	2300      	movs	r3, #0
900041e0:	4a1e      	ldr	r2, [pc, #120]	; (9000425c <dht11Task_handler+0x12c>)
900041e2:	a904      	add	r1, sp, #16
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900041e4:	f88d 500e 	strb.w	r5, [sp, #14]
	  control.obj = (void*) &dht11;
900041e8:	ad03      	add	r5, sp, #12
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900041ea:	6810      	ldr	r0, [r2, #0]
900041ec:	461a      	mov	r2, r3
	  control.obj = (void*) &dht11;
900041ee:	9505      	str	r5, [sp, #20]
	  control.type = "DHT11";
900041f0:	4d1b      	ldr	r5, [pc, #108]	; (90004260 <dht11Task_handler+0x130>)
	  DHT11_HandleTypeDef dht11 = read_DHT11(GPIOE, GPIO_PIN_3);
900041f2:	f88d a00c 	strb.w	sl, [sp, #12]
900041f6:	f88d 900d 	strb.w	r9, [sp, #13]
	  control.type = "DHT11";
900041fa:	9504      	str	r5, [sp, #16]
	  osStatus_t messageQueuePutStatus = osMessageQueuePut(controlQueueHandle, ( void * ) &control, 0, 0);
900041fc:	f00a ff14 	bl	9000f028 <osMessageQueuePut>
	  osDelay(1);
90004200:	2001      	movs	r0, #1
90004202:	f00a fd35 	bl	9000ec70 <osDelay>
  for(;;)
90004206:	e79b      	b.n	90004140 <dht11Task_handler+0x10>
    {
        // convert temperature and humidity values
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
90004208:	020b      	lsls	r3, r1, #8
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
9000420a:	ba52      	rev16	r2, r2
9000420c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
90004210:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
90004214:	b292      	uxth	r2, r2
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
90004216:	4303      	orrs	r3, r0
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
90004218:	ee07 2a90 	vmov	s15, r2
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
9000421c:	ee06 3a90 	vmov	s13, r3
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
90004220:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        if (bits[2] & 0x80) dht11.temperature *= -1;
90004224:	060b      	lsls	r3, r1, #24
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
90004226:	eeb8 6be6 	vcvt.f64.s32	d6, s13
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
9000422a:	ee87 4b05 	vdiv.f64	d4, d7, d5
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
9000422e:	ee86 7b05 	vdiv.f64	d7, d6, d5
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
90004232:	eefc 6bc4 	vcvt.u32.f64	s13, d4
90004236:	edcd 6a00 	vstr	s13, [sp]
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
9000423a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
        dht11.humidity = (bits[0] << 8 | bits[1]) / 10.0;
9000423e:	f89d a000 	ldrb.w	sl, [sp]
        dht11.temperature = ((bits[2] & 0x7F) << 8 | bits[3]) / 10.0;
90004242:	edcd 7a01 	vstr	s15, [sp, #4]
90004246:	f89d 9004 	ldrb.w	r9, [sp, #4]
        if (bits[2] & 0x80) dht11.temperature *= -1;
9000424a:	d5c7      	bpl.n	900041dc <dht11Task_handler+0xac>
9000424c:	f1c9 0900 	rsb	r9, r9, #0
90004250:	fa5f f989 	uxtb.w	r9, r9
90004254:	e7c2      	b.n	900041dc <dht11Task_handler+0xac>
90004256:	bf00      	nop
90004258:	58021000 	.word	0x58021000
9000425c:	2400cdec 	.word	0x2400cdec
90004260:	9002a494 	.word	0x9002a494

90004264 <SystemClock_Config>:
{
90004264:	b570      	push	{r4, r5, r6, lr}
90004266:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90004268:	224c      	movs	r2, #76	; 0x4c
9000426a:	2100      	movs	r1, #0
9000426c:	a80a      	add	r0, sp, #40	; 0x28
9000426e:	f023 fcf5 	bl	90027c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90004272:	2220      	movs	r2, #32
90004274:	2100      	movs	r1, #0
90004276:	a802      	add	r0, sp, #8
90004278:	f023 fcf0 	bl	90027c5c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
9000427c:	2002      	movs	r0, #2
9000427e:	f008 fc45 	bl	9000cb0c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90004282:	4b22      	ldr	r3, [pc, #136]	; (9000430c <SystemClock_Config+0xa8>)
90004284:	2100      	movs	r1, #0
90004286:	4a22      	ldr	r2, [pc, #136]	; (90004310 <SystemClock_Config+0xac>)
90004288:	9101      	str	r1, [sp, #4]
9000428a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000428c:	f021 0101 	bic.w	r1, r1, #1
90004290:	62d9      	str	r1, [r3, #44]	; 0x2c
90004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004294:	f003 0301 	and.w	r3, r3, #1
90004298:	9301      	str	r3, [sp, #4]
9000429a:	6993      	ldr	r3, [r2, #24]
9000429c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900042a0:	6193      	str	r3, [r2, #24]
900042a2:	6993      	ldr	r3, [r2, #24]
900042a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900042a8:	9301      	str	r3, [sp, #4]
900042aa:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
900042ac:	6993      	ldr	r3, [r2, #24]
900042ae:	0499      	lsls	r1, r3, #18
900042b0:	d5fc      	bpl.n	900042ac <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900042b2:	2201      	movs	r2, #1
900042b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900042b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900042ba:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900042bc:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900042be:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
900042c0:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900042c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
900042c6:	2205      	movs	r2, #5
900042c8:	23a0      	movs	r3, #160	; 0xa0
900042ca:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
900042ce:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900042d0:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
900042d4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900042d6:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900042da:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900042de:	f008 fcbd 	bl	9000cc5c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900042e2:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900042e4:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900042e6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900042e8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900042ea:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900042ee:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900042f0:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
900042f2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900042f4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900042f6:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900042f8:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
900042fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004300:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004302:	f009 f83f 	bl	9000d384 <HAL_RCC_ClockConfig>
}
90004306:	b01e      	add	sp, #120	; 0x78
90004308:	bd70      	pop	{r4, r5, r6, pc}
9000430a:	bf00      	nop
9000430c:	58000400 	.word	0x58000400
90004310:	58024800 	.word	0x58024800

90004314 <main>:
{
90004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004318:	2400      	movs	r4, #0
{
9000431a:	b099      	sub	sp, #100	; 0x64
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000431c:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000431e:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004320:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004322:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004326:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
9000432a:	f005 fbd7 	bl	90009adc <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
9000432e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004332:	49d4      	ldr	r1, [pc, #848]	; (90004684 <main+0x370>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004334:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x24000000;
90004336:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004338:	4bd3      	ldr	r3, [pc, #844]	; (90004688 <main+0x374>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000433a:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000433e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004342:	f005 fbe9 	bl	90009b18 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90004346:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000434a:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000434c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0x90000000;
90004350:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004352:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90004356:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000435a:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000435e:	f005 fbdb 	bl	90009b18 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004362:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004364:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004366:	f8ad 6037 	strh.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
9000436a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
9000436e:	231a      	movs	r3, #26
90004370:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004374:	f240 1301 	movw	r3, #257	; 0x101
90004378:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000437c:	f005 fbcc 	bl	90009b18 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004380:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004384:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004386:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000438a:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000438c:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004390:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004394:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004398:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
9000439a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000439e:	f005 fbbb 	bl	90009b18 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900043a2:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900043a4:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900043a6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900043aa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900043ae:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900043b2:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900043b6:	f005 fbaf 	bl	90009b18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900043ba:	4620      	mov	r0, r4
900043bc:	f005 fb9c 	bl	90009af8 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900043c0:	4ab2      	ldr	r2, [pc, #712]	; (9000468c <main+0x378>)
900043c2:	6953      	ldr	r3, [r2, #20]
900043c4:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
900043c8:	d111      	bne.n	900043ee <main+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
900043ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043ce:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900043d2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900043d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043da:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900043de:	6953      	ldr	r3, [r2, #20]
900043e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900043e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900043e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900043ea:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900043ee:	48a7      	ldr	r0, [pc, #668]	; (9000468c <main+0x378>)
900043f0:	6943      	ldr	r3, [r0, #20]
900043f2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
900043f6:	d124      	bne.n	90004442 <main+0x12e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900043f8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900043fc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90004400:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004404:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90004408:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000440c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90004410:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004412:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004416:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004418:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000441c:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000441e:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90004422:	1c5a      	adds	r2, r3, #1
90004424:	d1f8      	bne.n	90004418 <main+0x104>
    } while(sets-- != 0U);
90004426:	3c20      	subs	r4, #32
90004428:	f114 0f20 	cmn.w	r4, #32
9000442c:	d1f1      	bne.n	90004412 <main+0xfe>
9000442e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90004432:	6943      	ldr	r3, [r0, #20]
90004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004438:	6143      	str	r3, [r0, #20]
9000443a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000443e:	f3bf 8f6f 	isb	sy
  HAL_Init();
90004442:	f005 fa81 	bl	90009948 <HAL_Init>
	applicationContext.temperatureData[i] = MIN_ALLOWED_TEMPERATURE;
90004446:	4b92      	ldr	r3, [pc, #584]	; (90004690 <main+0x37c>)
90004448:	f06f 1263 	mvn.w	r2, #6488163	; 0x630063
  applicationContext.maxTemperature = MIN_ALLOWED_TEMPERATURE;
9000444c:	4991      	ldr	r1, [pc, #580]	; (90004694 <main+0x380>)
  applicationContext.temperature = 0;
9000444e:	2400      	movs	r4, #0
  applicationContext.maxTemperature = MIN_ALLOWED_TEMPERATURE;
90004450:	6019      	str	r1, [r3, #0]
  applicationContext.temperature = 0;
90004452:	711c      	strb	r4, [r3, #4]
	applicationContext.temperatureData[i] = MIN_ALLOWED_TEMPERATURE;
90004454:	e9c3 2202 	strd	r2, r2, [r3, #8]
90004458:	e9c3 2204 	strd	r2, r2, [r3, #16]
9000445c:	e9c3 2206 	strd	r2, r2, [r3, #24]
90004460:	e9c3 2208 	strd	r2, r2, [r3, #32]
90004464:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
90004468:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  SystemClock_Config();
9000446c:	f7ff fefa 	bl	90004264 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
90004470:	b662      	cpsie	i
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004472:	4d89      	ldr	r5, [pc, #548]	; (90004698 <main+0x384>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004474:	21c0      	movs	r1, #192	; 0xc0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004476:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004478:	4622      	mov	r2, r4
9000447a:	4888      	ldr	r0, [pc, #544]	; (9000469c <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000447c:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000447e:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = GPIO_PIN_3;
90004482:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
90004484:	f04f 0804 	mov.w	r8, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004488:	f04f 0a02 	mov.w	sl, #2
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000448c:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004490:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90004494:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004498:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000449c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900044a0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900044ac:	9301      	str	r3, [sp, #4]
900044ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900044b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900044b8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
900044c4:	9302      	str	r3, [sp, #8]
900044c6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900044c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900044d0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900044dc:	9303      	str	r3, [sp, #12]
900044de:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900044e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044e4:	f043 0310 	orr.w	r3, r3, #16
900044e8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900044ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044f0:	f003 0310 	and.w	r3, r3, #16
900044f4:	9304      	str	r3, [sp, #16]
900044f6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
900044f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900044fc:	f043 0302 	orr.w	r3, r3, #2
90004500:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004504:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004508:	f003 0302 	and.w	r3, r3, #2
9000450c:	9305      	str	r3, [sp, #20]
9000450e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90004510:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90004518:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000451c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004524:	9306      	str	r3, [sp, #24]
90004526:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90004528:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000452c:	f043 0308 	orr.w	r3, r3, #8
90004530:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004534:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004538:	f003 0308 	and.w	r3, r3, #8
9000453c:	9307      	str	r3, [sp, #28]
9000453e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90004540:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004544:	f043 0320 	orr.w	r3, r3, #32
90004548:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000454c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004550:	f003 0320 	and.w	r3, r3, #32
90004554:	9308      	str	r3, [sp, #32]
90004556:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90004558:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004560:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004564:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004568:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000456c:	9309      	str	r3, [sp, #36]	; 0x24
9000456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
90004570:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004574:	f043 0301 	orr.w	r3, r3, #1
90004578:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000457c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004580:	f003 0301 	and.w	r3, r3, #1
90004584:	930a      	str	r3, [sp, #40]	; 0x28
90004586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004588:	f005 feb6 	bl	9000a2f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
9000458c:	4622      	mov	r2, r4
9000458e:	2180      	movs	r1, #128	; 0x80
90004590:	4843      	ldr	r0, [pc, #268]	; (900046a0 <main+0x38c>)
90004592:	f005 feb1 	bl	9000a2f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004596:	4622      	mov	r2, r4
90004598:	2108      	movs	r1, #8
9000459a:	4842      	ldr	r0, [pc, #264]	; (900046a4 <main+0x390>)
9000459c:	f005 feac 	bl	9000a2f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
900045a0:	2201      	movs	r2, #1
900045a2:	4841      	ldr	r0, [pc, #260]	; (900046a8 <main+0x394>)
900045a4:	4611      	mov	r1, r2
900045a6:	f005 fea7 	bl	9000a2f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900045aa:	4622      	mov	r2, r4
900045ac:	2144      	movs	r1, #68	; 0x44
900045ae:	483f      	ldr	r0, [pc, #252]	; (900046ac <main+0x398>)
900045b0:	f005 fea2 	bl	9000a2f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
900045b4:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900045b6:	a90b      	add	r1, sp, #44	; 0x2c
900045b8:	4838      	ldr	r0, [pc, #224]	; (9000469c <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045ba:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900045be:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900045c2:	f005 fc99 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
900045c6:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
900045c8:	a90b      	add	r1, sp, #44	; 0x2c
900045ca:	4835      	ldr	r0, [pc, #212]	; (900046a0 <main+0x38c>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
900045cc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900045ce:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900045d0:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
900045d4:	f005 fc90 	bl	90009ef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900045d8:	a90b      	add	r1, sp, #44	; 0x2c
900045da:	4835      	ldr	r0, [pc, #212]	; (900046b0 <main+0x39c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900045dc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900045de:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900045e2:	f005 fc89 	bl	90009ef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900045e6:	a90b      	add	r1, sp, #44	; 0x2c
900045e8:	482e      	ldr	r0, [pc, #184]	; (900046a4 <main+0x390>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900045ea:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045ee:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900045f2:	f005 fc81 	bl	90009ef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900045f6:	a90b      	add	r1, sp, #44	; 0x2c
900045f8:	482b      	ldr	r0, [pc, #172]	; (900046a8 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900045fa:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900045fe:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004602:	f005 fc79 	bl	90009ef8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004606:	a90b      	add	r1, sp, #44	; 0x2c
90004608:	4828      	ldr	r0, [pc, #160]	; (900046ac <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000460a:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000460e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004612:	f005 fc71 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004616:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
9000461a:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000461e:	a90b      	add	r1, sp, #44	; 0x2c
90004620:	4822      	ldr	r0, [pc, #136]	; (900046ac <main+0x398>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004622:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004626:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000462a:	f005 fc65 	bl	90009ef8 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
9000462e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004632:	4622      	mov	r2, r4
90004634:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
90004636:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004638:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
9000463a:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
9000463e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Instance = LTDC;
90004642:	4d1c      	ldr	r5, [pc, #112]	; (900046b4 <main+0x3a0>)
  __HAL_RCC_MDMA_CLK_ENABLE();
90004644:	4033      	ands	r3, r6
90004646:	9300      	str	r3, [sp, #0]
90004648:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
9000464a:	f005 f9e9 	bl	90009a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
9000464e:	207a      	movs	r0, #122	; 0x7a
90004650:	f005 fa24 	bl	90009a9c <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90004654:	2234      	movs	r2, #52	; 0x34
90004656:	4621      	mov	r1, r4
90004658:	a80b      	add	r0, sp, #44	; 0x2c
9000465a:	f023 faff 	bl	90027c5c <memset>
  hltdc.Instance = LTDC;
9000465e:	4b16      	ldr	r3, [pc, #88]	; (900046b8 <main+0x3a4>)
  hltdc.Init.AccumulatedVBP = 11;
90004660:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.AccumulatedActiveH = 283;
90004662:	f240 2c0a 	movw	ip, #522	; 0x20a
  hltdc.Instance = LTDC;
90004666:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
90004668:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.TotalHeigh = 285;
9000466a:	f44f 7e04 	mov.w	lr, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
9000466e:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.HorizontalSync = 39;
90004670:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
90004672:	230b      	movs	r3, #11
  hltdc.Init.VerticalSync = 8;
90004674:	61af      	str	r7, [r5, #24]
  hltdc.Init.Backcolor.Red = 0;
90004676:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
9000467a:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
9000467e:	f240 131b 	movw	r3, #283	; 0x11b
90004682:	e01b      	b.n	900046bc <main+0x3a8>
90004684:	03000012 	.word	0x03000012
90004688:	01010001 	.word	0x01010001
9000468c:	e000ed00 	.word	0xe000ed00
90004690:	2400cdb0 	.word	0x2400cdb0
90004694:	0064ff9c 	.word	0x0064ff9c
90004698:	58024400 	.word	0x58024400
9000469c:	58020400 	.word	0x58020400
900046a0:	58020c00 	.word	0x58020c00
900046a4:	58021800 	.word	0x58021800
900046a8:	58022800 	.word	0x58022800
900046ac:	58020000 	.word	0x58020000
900046b0:	58021000 	.word	0x58021000
900046b4:	2400cedc 	.word	0x2400cedc
900046b8:	50001000 	.word	0x50001000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900046bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
900046be:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
900046c2:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
900046c6:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.TotalHeigh = 285;
900046ca:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
900046ce:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900046d2:	f007 fe37 	bl	9000c344 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
900046d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900046da:	4622      	mov	r2, r4
900046dc:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowX1 = 480;
900046de:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900046e0:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
900046e2:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
900046e4:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
900046e8:	4d50      	ldr	r5, [pc, #320]	; (9000482c <main+0x518>)
  pLayerCfg.WindowY1 = 272;
900046ea:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
900046ec:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Alpha = 255;
900046ee:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
900046f0:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.Alpha = 255;
900046f2:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
900046f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
900046f8:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
900046fa:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
900046fc:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
900046fe:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
90004700:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Red = 0;
90004704:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004708:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000470c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004710:	f007 feec 	bl	9000c4ec <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
90004714:	4b46      	ldr	r3, [pc, #280]	; (90004830 <main+0x51c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004716:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90004718:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
9000471a:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
9000471c:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
9000471e:	e9c5 4a11 	strd	r4, sl, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90004722:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90004726:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
9000472a:	e9c5 4a01 	strd	r4, sl, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
9000472e:	f005 fa9b 	bl	90009c68 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004732:	4631      	mov	r1, r6
90004734:	4628      	mov	r0, r5
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004736:	2510      	movs	r5, #16
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004738:	f005 fb6e 	bl	90009e18 <HAL_DMA2D_ConfigLayer>
  SdramTiming.ExitSelfRefreshDelay = 7;
9000473c:	2307      	movs	r3, #7
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000473e:	483d      	ldr	r0, [pc, #244]	; (90004834 <main+0x520>)
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004740:	a90b      	add	r1, sp, #44	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
90004742:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
90004744:	930e      	str	r3, [sp, #56]	; 0x38
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004746:	4b3c      	ldr	r3, [pc, #240]	; (90004838 <main+0x524>)
  SdramTiming.SelfRefreshTime = 4;
90004748:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000474c:	6003      	str	r3, [r0, #0]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000474e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004752:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004756:	f44f 6800 	mov.w	r8, #2048	; 0x800
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000475a:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
9000475c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004760:	6105      	str	r5, [r0, #16]
  SdramTiming.WriteRecoveryTime = 5;
90004762:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  SdramTiming.LoadToActiveDelay = 2;
90004766:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000476a:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000476e:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90004770:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004772:	e9c0 8308 	strd	r8, r3, [r0, #32]
  SdramTiming.RCDDelay = 2;
90004776:	e9cd aa10 	strd	sl, sl, [sp, #64]	; 0x40
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000477a:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
9000477e:	f009 fed9 	bl	9000e534 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90004782:	4620      	mov	r0, r4
90004784:	f004 fe72 	bl	9000946c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90004788:	4620      	mov	r0, r4
9000478a:	f004 feb9 	bl	90009500 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
9000478e:	f7fb fe31 	bl	900003f4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004792:	4b2a      	ldr	r3, [pc, #168]	; (9000483c <main+0x528>)
90004794:	482a      	ldr	r0, [pc, #168]	; (90004840 <main+0x52c>)
90004796:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
90004798:	f006 fda8 	bl	9000b2ec <HAL_JPEG_Init>
  hcrc.Instance = CRC;
9000479c:	4829      	ldr	r0, [pc, #164]	; (90004844 <main+0x530>)
9000479e:	4b2a      	ldr	r3, [pc, #168]	; (90004848 <main+0x534>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
900047a0:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
900047a2:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
900047a4:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
900047a6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
900047aa:	f005 f9e7 	bl	90009b7c <HAL_CRC_Init>
  MX_TouchGFX_Init();
900047ae:	f7fb fe25 	bl	900003fc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
900047b2:	f7fb fe21 	bl	900003f8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
900047b6:	f00a f9e5 	bl	9000eb84 <osKernelInitialize>
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
900047ba:	4622      	mov	r2, r4
900047bc:	4b23      	ldr	r3, [pc, #140]	; (9000484c <main+0x538>)
900047be:	4631      	mov	r1, r6
900047c0:	4823      	ldr	r0, [pc, #140]	; (90004850 <main+0x53c>)
900047c2:	f00a fa63 	bl	9000ec8c <osTimerNew>
900047c6:	4b23      	ldr	r3, [pc, #140]	; (90004854 <main+0x540>)
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, TEMPERATURE_READ_TIMER_MS);
900047c8:	4923      	ldr	r1, [pc, #140]	; (90004858 <main+0x544>)
  temperatureHourlyReadHandle = osTimerNew(temperatureHourlyReadCb, osTimerPeriodic, NULL, &temperatureHourlyRead_attributes);
900047ca:	6018      	str	r0, [r3, #0]
  osStatus_t temperatureHourlyReadStartStatus = osTimerStart(temperatureHourlyReadHandle, TEMPERATURE_READ_TIMER_MS);
900047cc:	f00a faa0 	bl	9000ed10 <osTimerStart>
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
900047d0:	4a22      	ldr	r2, [pc, #136]	; (9000485c <main+0x548>)
900047d2:	4639      	mov	r1, r7
900047d4:	4628      	mov	r0, r5
900047d6:	f00a fbe9 	bl	9000efac <osMessageQueueNew>
900047da:	4b21      	ldr	r3, [pc, #132]	; (90004860 <main+0x54c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900047dc:	4a21      	ldr	r2, [pc, #132]	; (90004864 <main+0x550>)
900047de:	4621      	mov	r1, r4
  controlQueueHandle = osMessageQueueNew (16, sizeof(Control_TypeDef), &controlQueue_attributes);
900047e0:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900047e2:	4821      	ldr	r0, [pc, #132]	; (90004868 <main+0x554>)
900047e4:	f00a f9fa 	bl	9000ebdc <osThreadNew>
900047e8:	4b20      	ldr	r3, [pc, #128]	; (9000486c <main+0x558>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047ea:	4a21      	ldr	r2, [pc, #132]	; (90004870 <main+0x55c>)
900047ec:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
900047ee:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047f0:	4820      	ldr	r0, [pc, #128]	; (90004874 <main+0x560>)
900047f2:	f00a f9f3 	bl	9000ebdc <osThreadNew>
900047f6:	4b20      	ldr	r3, [pc, #128]	; (90004878 <main+0x564>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900047f8:	4a20      	ldr	r2, [pc, #128]	; (9000487c <main+0x568>)
900047fa:	4621      	mov	r1, r4
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
900047fc:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
900047fe:	4820      	ldr	r0, [pc, #128]	; (90004880 <main+0x56c>)
90004800:	f00a f9ec 	bl	9000ebdc <osThreadNew>
90004804:	4b1f      	ldr	r3, [pc, #124]	; (90004884 <main+0x570>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
90004806:	4a20      	ldr	r2, [pc, #128]	; (90004888 <main+0x574>)
90004808:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000480a:	6018      	str	r0, [r3, #0]
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000480c:	481f      	ldr	r0, [pc, #124]	; (9000488c <main+0x578>)
9000480e:	f00a f9e5 	bl	9000ebdc <osThreadNew>
90004812:	4b1f      	ldr	r3, [pc, #124]	; (90004890 <main+0x57c>)
90004814:	4605      	mov	r5, r0
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
90004816:	4a1f      	ldr	r2, [pc, #124]	; (90004894 <main+0x580>)
90004818:	4621      	mov	r1, r4
9000481a:	481f      	ldr	r0, [pc, #124]	; (90004898 <main+0x584>)
  dht11TaskHandle = osThreadNew(dht11Task_handler, NULL, &dht11Task_attributes);
9000481c:	601d      	str	r5, [r3, #0]
  consumerTaskHandle = osThreadNew(consumerTask_handler, NULL, &consumerTask_attributes);
9000481e:	f00a f9dd 	bl	9000ebdc <osThreadNew>
90004822:	4b1e      	ldr	r3, [pc, #120]	; (9000489c <main+0x588>)
90004824:	6018      	str	r0, [r3, #0]
  osKernelStart();
90004826:	f00a f9bf 	bl	9000eba8 <osKernelStart>
  while (1)
9000482a:	e7fe      	b.n	9000482a <main+0x516>
9000482c:	2400ce1c 	.word	0x2400ce1c
90004830:	52001000 	.word	0x52001000
90004834:	2400d05c 	.word	0x2400d05c
90004838:	52004140 	.word	0x52004140
9000483c:	52003000 	.word	0x52003000
90004840:	2400ce84 	.word	0x2400ce84
90004844:	2400cdf8 	.word	0x2400cdf8
90004848:	58024c00 	.word	0x58024c00
9000484c:	9002a5a8 	.word	0x9002a5a8
90004850:	900040ed 	.word	0x900040ed
90004854:	2400d090 	.word	0x2400d090
90004858:	0036ee80 	.word	0x0036ee80
9000485c:	9002a548 	.word	0x9002a548
90004860:	2400cdec 	.word	0x2400cdec
90004864:	9002a560 	.word	0x9002a560
90004868:	9000408d 	.word	0x9000408d
9000486c:	2400cdf0 	.word	0x2400cdf0
90004870:	9002a500 	.word	0x9002a500
90004874:	9000040d 	.word	0x9000040d
90004878:	2400cdac 	.word	0x2400cdac
9000487c:	9002a5b8 	.word	0x9002a5b8
90004880:	900029f1 	.word	0x900029f1
90004884:	2400d094 	.word	0x2400d094
90004888:	9002a584 	.word	0x9002a584
9000488c:	90004131 	.word	0x90004131
90004890:	2400cdf4 	.word	0x2400cdf4
90004894:	9002a524 	.word	0x9002a524
90004898:	90004099 	.word	0x90004099
9000489c:	2400cde8 	.word	0x2400cde8

900048a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
900048a0:	4b03      	ldr	r3, [pc, #12]	; (900048b0 <HAL_TIM_PeriodElapsedCallback+0x10>)
900048a2:	6802      	ldr	r2, [r0, #0]
900048a4:	429a      	cmp	r2, r3
900048a6:	d000      	beq.n	900048aa <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
900048a8:	4770      	bx	lr
    HAL_IncTick();
900048aa:	f005 b87d 	b.w	900099a8 <HAL_IncTick>
900048ae:	bf00      	nop
900048b0:	40001000 	.word	0x40001000

900048b4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
900048b4:	4770      	bx	lr
900048b6:	bf00      	nop

900048b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900048b8:	4b0b      	ldr	r3, [pc, #44]	; (900048e8 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900048ba:	2200      	movs	r2, #0
900048bc:	210f      	movs	r1, #15
900048be:	f06f 0001 	mvn.w	r0, #1
{
900048c2:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900048c4:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
900048c8:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900048ca:	f044 0402 	orr.w	r4, r4, #2
900048ce:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
900048d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900048d6:	f003 0302 	and.w	r3, r3, #2
900048da:	9301      	str	r3, [sp, #4]
900048dc:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900048de:	b003      	add	sp, #12
900048e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900048e4:	f005 b89c 	b.w	90009a20 <HAL_NVIC_SetPriority>
900048e8:	58024400 	.word	0x58024400

900048ec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
900048ec:	4b0a      	ldr	r3, [pc, #40]	; (90004918 <HAL_CRC_MspInit+0x2c>)
900048ee:	6802      	ldr	r2, [r0, #0]
900048f0:	429a      	cmp	r2, r3
900048f2:	d000      	beq.n	900048f6 <HAL_CRC_MspInit+0xa>
900048f4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
900048f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
900048fa:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
900048fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004900:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004904:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000490c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004910:	9301      	str	r3, [sp, #4]
90004912:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004914:	b002      	add	sp, #8
90004916:	4770      	bx	lr
90004918:	58024c00 	.word	0x58024c00

9000491c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
9000491c:	4b0f      	ldr	r3, [pc, #60]	; (9000495c <HAL_DMA2D_MspInit+0x40>)
9000491e:	6802      	ldr	r2, [r0, #0]
90004920:	429a      	cmp	r2, r3
90004922:	d000      	beq.n	90004926 <HAL_DMA2D_MspInit+0xa>
90004924:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004926:	4b0e      	ldr	r3, [pc, #56]	; (90004960 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004928:	205a      	movs	r0, #90	; 0x5a
9000492a:	2200      	movs	r2, #0
9000492c:	2105      	movs	r1, #5
{
9000492e:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004930:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
90004934:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004936:	f044 0410 	orr.w	r4, r4, #16
9000493a:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
9000493e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90004942:	f003 0310 	and.w	r3, r3, #16
90004946:	9301      	str	r3, [sp, #4]
90004948:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
9000494a:	f005 f869 	bl	90009a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
9000494e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
90004950:	b002      	add	sp, #8
90004952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
90004956:	f005 b8a1 	b.w	90009a9c <HAL_NVIC_EnableIRQ>
9000495a:	bf00      	nop
9000495c:	52001000 	.word	0x52001000
90004960:	58024400 	.word	0x58024400

90004964 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
90004964:	4b3f      	ldr	r3, [pc, #252]	; (90004a64 <HAL_JPEG_MspInit+0x100>)
90004966:	6802      	ldr	r2, [r0, #0]
90004968:	429a      	cmp	r2, r3
9000496a:	d000      	beq.n	9000496e <HAL_JPEG_MspInit+0xa>
9000496c:	4770      	bx	lr
{
9000496e:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
90004970:	4b3d      	ldr	r3, [pc, #244]	; (90004a68 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90004972:	2211      	movs	r2, #17
90004974:	4e3d      	ldr	r6, [pc, #244]	; (90004a6c <HAL_JPEG_MspInit+0x108>)
{
90004976:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004978:	4d3d      	ldr	r5, [pc, #244]	; (90004a70 <HAL_JPEG_MspInit+0x10c>)
9000497a:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
9000497c:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000497e:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90004980:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004984:	493b      	ldr	r1, [pc, #236]	; (90004a74 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90004986:	f042 0220 	orr.w	r2, r2, #32
9000498a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000498e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90004990:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90004994:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004996:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
9000499a:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
9000499c:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000499e:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
900049a0:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900049a2:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900049a4:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900049a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900049ac:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900049ae:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
900049b0:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
900049b4:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
900049b8:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
900049ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
900049be:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
900049c2:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900049c6:	2313      	movs	r3, #19
900049c8:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
900049ca:	2302      	movs	r3, #2
900049cc:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900049ce:	f007 fe81 	bl	9000c6d4 <HAL_MDMA_Init>
900049d2:	2800      	cmp	r0, #0
900049d4:	d13a      	bne.n	90004a4c <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
900049d6:	2200      	movs	r2, #0
900049d8:	4824      	ldr	r0, [pc, #144]	; (90004a6c <HAL_JPEG_MspInit+0x108>)
900049da:	4611      	mov	r1, r2
900049dc:	f007 ff18 	bl	9000c810 <HAL_MDMA_ConfigPostRequestMask>
900049e0:	2800      	cmp	r0, #0
900049e2:	d13c      	bne.n	90004a5e <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900049e4:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900049e6:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900049e8:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900049ea:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
900049ec:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
900049ee:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900049f0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
900049f4:	4920      	ldr	r1, [pc, #128]	; (90004a78 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900049f6:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
900049f8:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
900049fa:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
900049fc:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
900049fe:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004a02:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004a06:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004a08:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004a0a:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004a0e:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004a10:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004a18:	4815      	ldr	r0, [pc, #84]	; (90004a70 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004a1a:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004a1c:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004a1e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004a20:	f007 fe58 	bl	9000c6d4 <HAL_MDMA_Init>
90004a24:	b9c0      	cbnz	r0, 90004a58 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
90004a26:	2200      	movs	r2, #0
90004a28:	4811      	ldr	r0, [pc, #68]	; (90004a70 <HAL_JPEG_MspInit+0x10c>)
90004a2a:	4611      	mov	r1, r2
90004a2c:	f007 fef0 	bl	9000c810 <HAL_MDMA_ConfigPostRequestMask>
90004a30:	b978      	cbnz	r0, 90004a52 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004a32:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004a34:	2079      	movs	r0, #121	; 0x79
90004a36:	2200      	movs	r2, #0
90004a38:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004a3a:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004a3c:	f004 fff0 	bl	90009a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004a40:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
90004a42:	b002      	add	sp, #8
90004a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
90004a48:	f005 b828 	b.w	90009a9c <HAL_NVIC_EnableIRQ>
      Error_Handler();
90004a4c:	f7ff ff32 	bl	900048b4 <Error_Handler>
90004a50:	e7c1      	b.n	900049d6 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
90004a52:	f7ff ff2f 	bl	900048b4 <Error_Handler>
90004a56:	e7ec      	b.n	90004a32 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
90004a58:	f7ff ff2c 	bl	900048b4 <Error_Handler>
90004a5c:	e7e3      	b.n	90004a26 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
90004a5e:	f7ff ff29 	bl	900048b4 <Error_Handler>
90004a62:	e7bf      	b.n	900049e4 <HAL_JPEG_MspInit+0x80>
90004a64:	52003000 	.word	0x52003000
90004a68:	58024400 	.word	0x58024400
90004a6c:	2400cf84 	.word	0x2400cf84
90004a70:	2400cff0 	.word	0x2400cff0
90004a74:	52000200 	.word	0x52000200
90004a78:	520001c0 	.word	0x520001c0

90004a7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
90004a7c:	b570      	push	{r4, r5, r6, lr}
90004a7e:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a80:	2100      	movs	r1, #0
{
90004a82:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a84:	22c0      	movs	r2, #192	; 0xc0
90004a86:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004a88:	9109      	str	r1, [sp, #36]	; 0x24
90004a8a:	e9cd 1105 	strd	r1, r1, [sp, #20]
90004a8e:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a92:	f023 f8e3 	bl	90027c5c <memset>
  if(hltdc->Instance==LTDC)
90004a96:	4b4a      	ldr	r3, [pc, #296]	; (90004bc0 <HAL_LTDC_MspInit+0x144>)
90004a98:	6822      	ldr	r2, [r4, #0]
90004a9a:	429a      	cmp	r2, r3
90004a9c:	d001      	beq.n	90004aa2 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90004a9e:	b03a      	add	sp, #232	; 0xe8
90004aa0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004aa2:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004aa4:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004aa6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
90004aaa:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004aac:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004aae:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004ab0:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004ab2:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90004ab4:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004aba:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
90004abc:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004abe:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004ac2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004ac6:	f008 ff35 	bl	9000d934 <HAL_RCCEx_PeriphCLKConfig>
90004aca:	2800      	cmp	r0, #0
90004acc:	d174      	bne.n	90004bb8 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004ace:	4b3d      	ldr	r3, [pc, #244]	; (90004bc4 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004ad0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004ad2:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004ad4:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004ad6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004ada:	a905      	add	r1, sp, #20
90004adc:	483a      	ldr	r0, [pc, #232]	; (90004bc8 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90004ade:	f042 0208 	orr.w	r2, r2, #8
90004ae2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004ae6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004aea:	f002 0208 	and.w	r2, r2, #8
90004aee:	9200      	str	r2, [sp, #0]
90004af0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004af2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004af6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004afa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004afe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b02:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004b06:	9201      	str	r2, [sp, #4]
90004b08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004b0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004b12:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004b16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004b1e:	9202      	str	r2, [sp, #8]
90004b20:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004b22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004b2a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004b2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b32:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004b36:	9203      	str	r2, [sp, #12]
90004b38:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90004b42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004b4a:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b50:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004b54:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004b56:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004b58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004b5e:	f005 f9cb 	bl	90009ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004b62:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004b66:	a905      	add	r1, sp, #20
90004b68:	4818      	ldr	r0, [pc, #96]	; (90004bcc <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004b6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b70:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004b74:	f005 f9c0 	bl	90009ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004b78:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004b7c:	a905      	add	r1, sp, #20
90004b7e:	4814      	ldr	r0, [pc, #80]	; (90004bd0 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004b80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004b82:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b86:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004b8a:	f005 f9b5 	bl	90009ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b92:	a905      	add	r1, sp, #20
90004b94:	480f      	ldr	r0, [pc, #60]	; (90004bd4 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004b96:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004b98:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004b9c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004ba0:	f005 f9aa 	bl	90009ef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004ba4:	462a      	mov	r2, r5
90004ba6:	2105      	movs	r1, #5
90004ba8:	2058      	movs	r0, #88	; 0x58
90004baa:	f004 ff39 	bl	90009a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004bae:	2058      	movs	r0, #88	; 0x58
90004bb0:	f004 ff74 	bl	90009a9c <HAL_NVIC_EnableIRQ>
}
90004bb4:	b03a      	add	sp, #232	; 0xe8
90004bb6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004bb8:	f7ff fe7c 	bl	900048b4 <Error_Handler>
90004bbc:	e787      	b.n	90004ace <HAL_LTDC_MspInit+0x52>
90004bbe:	bf00      	nop
90004bc0:	50001000 	.word	0x50001000
90004bc4:	58024400 	.word	0x58024400
90004bc8:	58022800 	.word	0x58022800
90004bcc:	58022000 	.word	0x58022000
90004bd0:	58022400 	.word	0x58022400
90004bd4:	58021c00 	.word	0x58021c00

90004bd8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004bd8:	4836      	ldr	r0, [pc, #216]	; (90004cb4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004bda:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004bdc:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004bde:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004be0:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004be2:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004be6:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004bea:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004bec:	b109      	cbz	r1, 90004bf2 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004bee:	b038      	add	sp, #224	; 0xe0
90004bf0:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004bf2:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004bf4:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004bf6:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004bf8:	a80a      	add	r0, sp, #40	; 0x28
90004bfa:	f023 f82f 	bl	90027c5c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004c02:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004c04:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004c06:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004c0a:	f008 fe93 	bl	9000d934 <HAL_RCCEx_PeriphCLKConfig>
90004c0e:	2800      	cmp	r0, #0
90004c10:	d14c      	bne.n	90004cac <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004c12:	4b29      	ldr	r3, [pc, #164]	; (90004cb8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c14:	f64f 7083 	movw	r0, #65411	; 0xff83
90004c18:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c1a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004c1c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c20:	2600      	movs	r6, #0
90004c22:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004c24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004c28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c30:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004c3a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004c3c:	a902      	add	r1, sp, #8
90004c3e:	481f      	ldr	r0, [pc, #124]	; (90004cbc <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004c40:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c42:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004c46:	f005 f957 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c4a:	f248 1233 	movw	r2, #33075	; 0x8133
90004c4e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c50:	a902      	add	r1, sp, #8
90004c52:	481b      	ldr	r0, [pc, #108]	; (90004cc0 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c54:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c56:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c5e:	f005 f94b 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c62:	f24c 7203 	movw	r2, #50947	; 0xc703
90004c66:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004c68:	a902      	add	r1, sp, #8
90004c6a:	4816      	ldr	r0, [pc, #88]	; (90004cc4 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c6c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c72:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004c76:	f005 f93f 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c7a:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004c7e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c80:	a902      	add	r1, sp, #8
90004c82:	4811      	ldr	r0, [pc, #68]	; (90004cc8 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c84:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004c8e:	f005 f933 	bl	90009ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c92:	22e0      	movs	r2, #224	; 0xe0
90004c94:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004c96:	a902      	add	r1, sp, #8
90004c98:	480c      	ldr	r0, [pc, #48]	; (90004ccc <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c9a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004c9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004ca4:	f005 f928 	bl	90009ef8 <HAL_GPIO_Init>
}
90004ca8:	b038      	add	sp, #224	; 0xe0
90004caa:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004cac:	f7ff fe02 	bl	900048b4 <Error_Handler>
90004cb0:	e7af      	b.n	90004c12 <HAL_SDRAM_MspInit+0x3a>
90004cb2:	bf00      	nop
90004cb4:	2400d09c 	.word	0x2400d09c
90004cb8:	58024400 	.word	0x58024400
90004cbc:	58021000 	.word	0x58021000
90004cc0:	58021800 	.word	0x58021800
90004cc4:	58020c00 	.word	0x58020c00
90004cc8:	58021400 	.word	0x58021400
90004ccc:	58021c00 	.word	0x58021c00

90004cd0 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004cd0:	4b13      	ldr	r3, [pc, #76]	; (90004d20 <HAL_SDRAM_MspDeInit+0x50>)
90004cd2:	681a      	ldr	r2, [r3, #0]
90004cd4:	b102      	cbz	r2, 90004cd8 <HAL_SDRAM_MspDeInit+0x8>
90004cd6:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004cd8:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004cda:	4a12      	ldr	r2, [pc, #72]	; (90004d24 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004cdc:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004cde:	f64f 7183 	movw	r1, #65411	; 0xff83
90004ce2:	4811      	ldr	r0, [pc, #68]	; (90004d28 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004ce4:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004ce6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004cee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004cf2:	f005 fa33 	bl	9000a15c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004cf6:	f248 1133 	movw	r1, #33075	; 0x8133
90004cfa:	480c      	ldr	r0, [pc, #48]	; (90004d2c <HAL_SDRAM_MspDeInit+0x5c>)
90004cfc:	f005 fa2e 	bl	9000a15c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004d00:	f24c 7103 	movw	r1, #50947	; 0xc703
90004d04:	480a      	ldr	r0, [pc, #40]	; (90004d30 <HAL_SDRAM_MspDeInit+0x60>)
90004d06:	f005 fa29 	bl	9000a15c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004d0a:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004d0e:	4809      	ldr	r0, [pc, #36]	; (90004d34 <HAL_SDRAM_MspDeInit+0x64>)
90004d10:	f005 fa24 	bl	9000a15c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004d14:	21e0      	movs	r1, #224	; 0xe0
90004d16:	4808      	ldr	r0, [pc, #32]	; (90004d38 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004d1c:	f005 ba1e 	b.w	9000a15c <HAL_GPIO_DeInit>
90004d20:	2400d098 	.word	0x2400d098
90004d24:	58024400 	.word	0x58024400
90004d28:	58021000 	.word	0x58021000
90004d2c:	58021800 	.word	0x58021800
90004d30:	58020c00 	.word	0x58020c00
90004d34:	58021400 	.word	0x58021400
90004d38:	58021c00 	.word	0x58021c00

90004d3c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004d3c:	280f      	cmp	r0, #15
90004d3e:	d901      	bls.n	90004d44 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004d40:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004d42:	4770      	bx	lr
{
90004d44:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d46:	4601      	mov	r1, r0
{
90004d48:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d4a:	2200      	movs	r2, #0
90004d4c:	4604      	mov	r4, r0
90004d4e:	2036      	movs	r0, #54	; 0x36
90004d50:	f004 fe66 	bl	90009a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004d54:	2036      	movs	r0, #54	; 0x36
90004d56:	f004 fea1 	bl	90009a9c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d5a:	4b1a      	ldr	r3, [pc, #104]	; (90004dc4 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004d5c:	4a1a      	ldr	r2, [pc, #104]	; (90004dc8 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004d5e:	4669      	mov	r1, sp
90004d60:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004d62:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d64:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004d68:	f042 0210 	orr.w	r2, r2, #16
90004d6c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004d74:	f003 0310 	and.w	r3, r3, #16
90004d78:	9301      	str	r3, [sp, #4]
90004d7a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004d7c:	f008 fcba 	bl	9000d6f4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004d80:	9b07      	ldr	r3, [sp, #28]
90004d82:	b9bb      	cbnz	r3, 90004db4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004d84:	f008 fc26 	bl	9000d5d4 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d88:	4b10      	ldr	r3, [pc, #64]	; (90004dcc <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004d8a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004d8c:	4c10      	ldr	r4, [pc, #64]	; (90004dd0 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d8e:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004d92:	4d10      	ldr	r5, [pc, #64]	; (90004dd4 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004d94:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004d98:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004d9a:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004d9c:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004d9e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004da0:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004da2:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004da6:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004da8:	f009 fc36 	bl	9000e618 <HAL_TIM_Base_Init>
90004dac:	b130      	cbz	r0, 90004dbc <HAL_InitTick+0x80>
    return HAL_ERROR;
90004dae:	2001      	movs	r0, #1
}
90004db0:	b00b      	add	sp, #44	; 0x2c
90004db2:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004db4:	f008 fc0e 	bl	9000d5d4 <HAL_RCC_GetPCLK1Freq>
90004db8:	0040      	lsls	r0, r0, #1
90004dba:	e7e5      	b.n	90004d88 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004dbc:	4620      	mov	r0, r4
90004dbe:	f009 fce1 	bl	9000e784 <HAL_TIM_Base_Start_IT>
90004dc2:	e7f5      	b.n	90004db0 <HAL_InitTick+0x74>
90004dc4:	58024400 	.word	0x58024400
90004dc8:	24000060 	.word	0x24000060
90004dcc:	431bde83 	.word	0x431bde83
90004dd0:	2400d0a0 	.word	0x2400d0a0
90004dd4:	40001000 	.word	0x40001000

90004dd8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004dd8:	4770      	bx	lr
90004dda:	bf00      	nop

90004ddc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004ddc:	e7fe      	b.n	90004ddc <HardFault_Handler>
90004dde:	bf00      	nop

90004de0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004de0:	e7fe      	b.n	90004de0 <MemManage_Handler>
90004de2:	bf00      	nop

90004de4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004de4:	e7fe      	b.n	90004de4 <BusFault_Handler>
90004de6:	bf00      	nop

90004de8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004de8:	e7fe      	b.n	90004de8 <UsageFault_Handler>
90004dea:	bf00      	nop

90004dec <DebugMon_Handler>:
90004dec:	4770      	bx	lr
90004dee:	bf00      	nop

90004df0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004df0:	4801      	ldr	r0, [pc, #4]	; (90004df8 <TIM6_DAC_IRQHandler+0x8>)
90004df2:	f009 bd2b 	b.w	9000e84c <HAL_TIM_IRQHandler>
90004df6:	bf00      	nop
90004df8:	2400d0a0 	.word	0x2400d0a0

90004dfc <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004dfc:	4801      	ldr	r0, [pc, #4]	; (90004e04 <LTDC_IRQHandler+0x8>)
90004dfe:	f007 bb13 	b.w	9000c428 <HAL_LTDC_IRQHandler>
90004e02:	bf00      	nop
90004e04:	2400cedc 	.word	0x2400cedc

90004e08 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004e08:	4801      	ldr	r0, [pc, #4]	; (90004e10 <DMA2D_IRQHandler+0x8>)
90004e0a:	f004 bf71 	b.w	90009cf0 <HAL_DMA2D_IRQHandler>
90004e0e:	bf00      	nop
90004e10:	2400ce1c 	.word	0x2400ce1c

90004e14 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004e14:	4801      	ldr	r0, [pc, #4]	; (90004e1c <JPEG_IRQHandler+0x8>)
90004e16:	f007 b9f3 	b.w	9000c200 <HAL_JPEG_IRQHandler>
90004e1a:	bf00      	nop
90004e1c:	2400ce84 	.word	0x2400ce84

90004e20 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004e20:	4804      	ldr	r0, [pc, #16]	; (90004e34 <MDMA_IRQHandler+0x14>)
{
90004e22:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004e24:	f007 fdb4 	bl	9000c990 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004e28:	4803      	ldr	r0, [pc, #12]	; (90004e38 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004e2e:	f007 bdaf 	b.w	9000c990 <HAL_MDMA_IRQHandler>
90004e32:	bf00      	nop
90004e34:	2400cff0 	.word	0x2400cff0
90004e38:	2400cf84 	.word	0x2400cf84

90004e3c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004e3c:	2001      	movs	r0, #1
90004e3e:	4770      	bx	lr

90004e40 <_kill>:

int _kill(int pid, int sig)
{
90004e40:	b508      	push	{r3, lr}
	errno = EINVAL;
90004e42:	f022 ffbf 	bl	90027dc4 <__errno>
90004e46:	2216      	movs	r2, #22
90004e48:	4603      	mov	r3, r0
	return -1;
}
90004e4a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004e4e:	601a      	str	r2, [r3, #0]
}
90004e50:	bd08      	pop	{r3, pc}
90004e52:	bf00      	nop

90004e54 <_exit>:

void _exit (int status)
{
90004e54:	b508      	push	{r3, lr}
	errno = EINVAL;
90004e56:	f022 ffb5 	bl	90027dc4 <__errno>
90004e5a:	2316      	movs	r3, #22
90004e5c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004e5e:	e7fe      	b.n	90004e5e <_exit+0xa>

90004e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004e60:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e62:	1e16      	subs	r6, r2, #0
90004e64:	dd07      	ble.n	90004e76 <_read+0x16>
90004e66:	460c      	mov	r4, r1
90004e68:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004e6a:	f3af 8000 	nop.w
90004e6e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e72:	42a5      	cmp	r5, r4
90004e74:	d1f9      	bne.n	90004e6a <_read+0xa>
	}

return len;
}
90004e76:	4630      	mov	r0, r6
90004e78:	bd70      	pop	{r4, r5, r6, pc}
90004e7a:	bf00      	nop

90004e7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004e7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e7e:	1e16      	subs	r6, r2, #0
90004e80:	dd07      	ble.n	90004e92 <_write+0x16>
90004e82:	460c      	mov	r4, r1
90004e84:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004e86:	f814 0b01 	ldrb.w	r0, [r4], #1
90004e8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004e8e:	42ac      	cmp	r4, r5
90004e90:	d1f9      	bne.n	90004e86 <_write+0xa>
	}
	return len;
}
90004e92:	4630      	mov	r0, r6
90004e94:	bd70      	pop	{r4, r5, r6, pc}
90004e96:	bf00      	nop

90004e98 <_close>:

int _close(int file)
{
	return -1;
}
90004e98:	f04f 30ff 	mov.w	r0, #4294967295
90004e9c:	4770      	bx	lr
90004e9e:	bf00      	nop

90004ea0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004ea4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004ea6:	604b      	str	r3, [r1, #4]
}
90004ea8:	4770      	bx	lr
90004eaa:	bf00      	nop

90004eac <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004eac:	2001      	movs	r0, #1
90004eae:	4770      	bx	lr

90004eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004eb0:	2000      	movs	r0, #0
90004eb2:	4770      	bx	lr

90004eb4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004eb4:	4a0a      	ldr	r2, [pc, #40]	; (90004ee0 <_sbrk+0x2c>)
{
90004eb6:	b508      	push	{r3, lr}
90004eb8:	4603      	mov	r3, r0
	if (heap_end == 0)
90004eba:	6810      	ldr	r0, [r2, #0]
90004ebc:	b128      	cbz	r0, 90004eca <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004ebe:	4403      	add	r3, r0
90004ec0:	4669      	mov	r1, sp
90004ec2:	428b      	cmp	r3, r1
90004ec4:	d805      	bhi.n	90004ed2 <_sbrk+0x1e>
	{
		errno = ENOMEM;
		return NULL;
	}

	heap_end += incr;
90004ec6:	6013      	str	r3, [r2, #0]

	return prev_heap_end;
}
90004ec8:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004eca:	4906      	ldr	r1, [pc, #24]	; (90004ee4 <_sbrk+0x30>)
90004ecc:	4608      	mov	r0, r1
90004ece:	6011      	str	r1, [r2, #0]
90004ed0:	e7f5      	b.n	90004ebe <_sbrk+0xa>
		errno = ENOMEM;
90004ed2:	f022 ff77 	bl	90027dc4 <__errno>
90004ed6:	220c      	movs	r2, #12
90004ed8:	4603      	mov	r3, r0
		return NULL;
90004eda:	2000      	movs	r0, #0
		errno = ENOMEM;
90004edc:	601a      	str	r2, [r3, #0]
}
90004ede:	bd08      	pop	{r3, pc}
90004ee0:	2400d0ec 	.word	0x2400d0ec
90004ee4:	240285d8 	.word	0x240285d8

90004ee8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004ee8:	4770      	bx	lr
90004eea:	bf00      	nop

90004eec <_ZN23ApplicationFontProviderD0Ev>:
90004eec:	b510      	push	{r4, lr}
90004eee:	4604      	mov	r4, r0
90004ef0:	2104      	movs	r1, #4
90004ef2:	f022 fbd0 	bl	90027696 <_ZdlPvj>
90004ef6:	4620      	mov	r0, r4
90004ef8:	bd10      	pop	{r4, pc}
90004efa:	bf00      	nop

90004efc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004efc:	2901      	cmp	r1, #1
{
90004efe:	b508      	push	{r3, lr}
    switch (typography)
90004f00:	d004      	beq.n	90004f0c <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004f02:	2902      	cmp	r1, #2
90004f04:	d00a      	beq.n	90004f1c <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004f06:	b129      	cbz	r1, 90004f14 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004f08:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004f0a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004f0c:	f003 f9f2 	bl	900082f4 <_ZN17TypedTextDatabase8getFontsEv>
90004f10:	6840      	ldr	r0, [r0, #4]
}
90004f12:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004f14:	f003 f9ee 	bl	900082f4 <_ZN17TypedTextDatabase8getFontsEv>
90004f18:	6800      	ldr	r0, [r0, #0]
}
90004f1a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004f1c:	f003 f9ea 	bl	900082f4 <_ZN17TypedTextDatabase8getFontsEv>
90004f20:	6880      	ldr	r0, [r0, #8]
}
90004f22:	bd08      	pop	{r3, pc}

90004f24 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004f24:	4800      	ldr	r0, [pc, #0]	; (90004f28 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004f26:	4770      	bx	lr
90004f28:	9002a5f0 	.word	0x9002a5f0

90004f2c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004f2c:	2008      	movs	r0, #8
90004f2e:	4770      	bx	lr

90004f30 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004f30:	b169      	cbz	r1, 90004f4e <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f32:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004f34:	b530      	push	{r4, r5, lr}
90004f36:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004f38:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f3a:	6895      	ldr	r5, [r2, #8]
90004f3c:	f10d 0303 	add.w	r3, sp, #3
90004f40:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004f42:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004f44:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f48:	47a8      	blx	r5
        return glyph;
    }
90004f4a:	b003      	add	sp, #12
90004f4c:	bd30      	pop	{r4, r5, pc}
            return 0;
90004f4e:	4608      	mov	r0, r1
    }
90004f50:	4770      	bx	lr
90004f52:	bf00      	nop

90004f54 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004f54:	89c0      	ldrh	r0, [r0, #14]
90004f56:	4770      	bx	lr

90004f58 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004f58:	8a00      	ldrh	r0, [r0, #16]
90004f5a:	4770      	bx	lr

90004f5c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004f5c:	88c0      	ldrh	r0, [r0, #6]
90004f5e:	4770      	bx	lr

90004f60 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004f60:	8880      	ldrh	r0, [r0, #4]
90004f62:	4770      	bx	lr

90004f64 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004f64:	7a80      	ldrb	r0, [r0, #10]
    }
90004f66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004f6a:	4770      	bx	lr

90004f6c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004f6c:	7a80      	ldrb	r0, [r0, #10]
    }
90004f6e:	09c0      	lsrs	r0, r0, #7
90004f70:	4770      	bx	lr
90004f72:	bf00      	nop

90004f74 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004f74:	4770      	bx	lr
90004f76:	bf00      	nop

90004f78 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004f78:	b510      	push	{r4, lr}
90004f7a:	4604      	mov	r4, r0
    }
90004f7c:	2108      	movs	r1, #8
90004f7e:	f022 fb8a 	bl	90027696 <_ZdlPvj>
90004f82:	4620      	mov	r0, r4
90004f84:	bd10      	pop	{r4, pc}
90004f86:	bf00      	nop

90004f88 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004f88:	4770      	bx	lr
90004f8a:	bf00      	nop

90004f8c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004f8c:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004f90:	6808      	ldr	r0, [r1, #0]
90004f92:	6849      	ldr	r1, [r1, #4]
90004f94:	c303      	stmia	r3!, {r0, r1}
    }
90004f96:	4770      	bx	lr

90004f98 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
90004f98:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004f9a:	4770      	bx	lr

90004f9c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004f9c:	4770      	bx	lr
90004f9e:	bf00      	nop

90004fa0 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004fa0:	4770      	bx	lr
90004fa2:	bf00      	nop

90004fa4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004fa4:	6041      	str	r1, [r0, #4]
    }
90004fa6:	4770      	bx	lr

90004fa8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004fa8:	4770      	bx	lr
90004faa:	bf00      	nop

90004fac <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004fac:	4905      	ldr	r1, [pc, #20]	; (90004fc4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004fae:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004fb0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004fb4:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004fb8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004fbc:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004fc0:	4770      	bx	lr
90004fc2:	bf00      	nop
90004fc4:	900052a9 	.word	0x900052a9

90004fc8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004fc8:	2301      	movs	r3, #1
90004fca:	7203      	strb	r3, [r0, #8]
    }
90004fcc:	4770      	bx	lr
90004fce:	bf00      	nop

90004fd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
90004fd0:	4770      	bx	lr
90004fd2:	bf00      	nop

90004fd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
90004fd4:	4770      	bx	lr
90004fd6:	bf00      	nop

90004fd8 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004fd8:	4770      	bx	lr
90004fda:	bf00      	nop

90004fdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004fdc:	4770      	bx	lr
90004fde:	bf00      	nop

90004fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004fe0:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004fe2:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004fe4:	6841      	ldr	r1, [r0, #4]
90004fe6:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004fea:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004fee:	07d2      	lsls	r2, r2, #31
90004ff0:	d401      	bmi.n	90004ff6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004ff2:	689b      	ldr	r3, [r3, #8]
90004ff4:	4718      	bx	r3
90004ff6:	f851 200c 	ldr.w	r2, [r1, ip]
90004ffa:	689b      	ldr	r3, [r3, #8]
90004ffc:	58d3      	ldr	r3, [r2, r3]
90004ffe:	4718      	bx	r3

90005000 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90005000:	6843      	ldr	r3, [r0, #4]
90005002:	b13b      	cbz	r3, 90005014 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90005004:	6883      	ldr	r3, [r0, #8]
90005006:	b10b      	cbz	r3, 9000500c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90005008:	2001      	movs	r0, #1
    }
9000500a:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
9000500c:	68c0      	ldr	r0, [r0, #12]
9000500e:	f000 0001 	and.w	r0, r0, #1
90005012:	4770      	bx	lr
90005014:	4618      	mov	r0, r3
90005016:	4770      	bx	lr

90005018 <_ZN8touchgfx12NoTransitionD0Ev>:
90005018:	b510      	push	{r4, lr}
9000501a:	4604      	mov	r4, r0
9000501c:	210c      	movs	r1, #12
9000501e:	f022 fb3a 	bl	90027696 <_ZdlPvj>
90005022:	4620      	mov	r0, r4
90005024:	bd10      	pop	{r4, pc}
90005026:	bf00      	nop

90005028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005028:	b510      	push	{r4, lr}
9000502a:	4604      	mov	r4, r0
9000502c:	2110      	movs	r1, #16
9000502e:	f022 fb32 	bl	90027696 <_ZdlPvj>
90005032:	4620      	mov	r0, r4
90005034:	bd10      	pop	{r4, pc}
90005036:	bf00      	nop

90005038 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90005038:	b510      	push	{r4, lr}
9000503a:	4604      	mov	r4, r0
9000503c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90005040:	f022 fb29 	bl	90027696 <_ZdlPvj>
90005044:	4620      	mov	r0, r4
90005046:	bd10      	pop	{r4, pc}

90005048 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
90005048:	b510      	push	{r4, lr}
9000504a:	4604      	mov	r4, r0
9000504c:	2140      	movs	r1, #64	; 0x40
9000504e:	f022 fb22 	bl	90027696 <_ZdlPvj>
90005052:	4620      	mov	r0, r4
90005054:	bd10      	pop	{r4, pc}
90005056:	bf00      	nop

90005058 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
90005058:	b510      	push	{r4, lr}
9000505a:	4604      	mov	r4, r0
9000505c:	2140      	movs	r1, #64	; 0x40
9000505e:	f022 fb1a 	bl	90027696 <_ZdlPvj>
90005062:	4620      	mov	r0, r4
90005064:	bd10      	pop	{r4, pc}
90005066:	bf00      	nop

90005068 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90005068:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
9000506a:	f013 f897 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
    }
9000506e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90005072:	f013 bd27 	b.w	90018ac4 <_ZN8touchgfx11Application10invalidateEv>
90005076:	bf00      	nop

90005078 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90005078:	4b05      	ldr	r3, [pc, #20]	; (90005090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x18>)
9000507a:	781b      	ldrb	r3, [r3, #0]
9000507c:	b13b      	cbz	r3, 9000508e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
9000507e:	6843      	ldr	r3, [r0, #4]
90005080:	b12b      	cbz	r3, 9000508e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x16>
        {
            screenContainer->remove(snapshot);
90005082:	681a      	ldr	r2, [r3, #0]
90005084:	f100 010c 	add.w	r1, r0, #12
90005088:	4618      	mov	r0, r3
9000508a:	6e53      	ldr	r3, [r2, #100]	; 0x64
9000508c:	4718      	bx	r3
        }
    }
9000508e:	4770      	bx	lr
90005090:	240281eb 	.word	0x240281eb

90005094 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
90005094:	4b05      	ldr	r3, [pc, #20]	; (900050ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
90005096:	781b      	ldrb	r3, [r3, #0]
90005098:	b13b      	cbz	r3, 900050aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
9000509a:	6843      	ldr	r3, [r0, #4]
9000509c:	b12b      	cbz	r3, 900050aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x16>
            screenContainer->remove(snapshot);
9000509e:	681a      	ldr	r2, [r3, #0]
900050a0:	f100 010c 	add.w	r1, r0, #12
900050a4:	4618      	mov	r0, r3
900050a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
900050a8:	4718      	bx	r3
    }
900050aa:	4770      	bx	lr
900050ac:	240281eb 	.word	0x240281eb

900050b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
900050b0:	b570      	push	{r4, r5, r6, lr}
900050b2:	4605      	mov	r5, r0
        animationCounter++;
900050b4:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
900050b8:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
900050ba:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
900050be:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
900050c0:	4298      	cmp	r0, r3
        animationCounter++;
900050c2:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
900050c6:	d905      	bls.n	900050d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x24>
            done = true;
900050c8:	2201      	movs	r2, #1
            animationCounter = 0;
900050ca:	2300      	movs	r3, #0
            done = true;
900050cc:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
900050ce:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
900050d2:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
900050d4:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
900050d8:	2100      	movs	r1, #0
900050da:	f014 fe13 	bl	90019d04 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
900050de:	f010 0201 	ands.w	r2, r0, #1
900050e2:	b283      	uxth	r3, r0
900050e4:	d006      	beq.n	900050f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
900050e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
900050ea:	2800      	cmp	r0, #0
900050ec:	bfd8      	it	le
900050ee:	460a      	movle	r2, r1
900050f0:	4413      	add	r3, r2
900050f2:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
900050f4:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
900050f6:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
900050f8:	6802      	ldr	r2, [r0, #0]
900050fa:	4912      	ldr	r1, [pc, #72]	; (90005144 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
900050fc:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
900050fe:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
90005100:	87ab      	strh	r3, [r5, #60]	; 0x3c
90005102:	428a      	cmp	r2, r1
90005104:	d11b      	bne.n	9000513e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
        return firstChild;
90005106:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005108:	b164      	cbz	r4, 90005124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
9000510a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
9000510c:	4e0e      	ldr	r6, [pc, #56]	; (90005148 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
9000510e:	6823      	ldr	r3, [r4, #0]
90005110:	88a1      	ldrh	r1, [r4, #4]
90005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005114:	4411      	add	r1, r2
90005116:	42b3      	cmp	r3, r6
90005118:	b209      	sxth	r1, r1
        rect.x = x;
9000511a:	d109      	bne.n	90005130 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
9000511c:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
9000511e:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005120:	2c00      	cmp	r4, #0
90005122:	d1f4      	bne.n	9000510e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
90005124:	6868      	ldr	r0, [r5, #4]
90005126:	6803      	ldr	r3, [r0, #0]
    }
90005128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
9000512c:	695b      	ldr	r3, [r3, #20]
9000512e:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
90005130:	4620      	mov	r0, r4
90005132:	4798      	blx	r3
90005134:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005136:	2c00      	cmp	r4, #0
90005138:	d0f4      	beq.n	90005124 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
9000513a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
9000513c:	e7e7      	b.n	9000510e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
9000513e:	4790      	blx	r2
90005140:	4604      	mov	r4, r0
90005142:	e7e1      	b.n	90005108 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x58>
90005144:	90004f99 	.word	0x90004f99
90005148:	90002351 	.word	0x90002351

9000514c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
9000514c:	b570      	push	{r4, r5, r6, lr}
9000514e:	4605      	mov	r5, r0
        animationCounter++;
90005150:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
90005154:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
90005156:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
        animationCounter++;
9000515a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
9000515c:	4298      	cmp	r0, r3
        animationCounter++;
9000515e:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        if (animationCounter > animationSteps)
90005162:	d905      	bls.n	90005170 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
90005164:	2201      	movs	r2, #1
            animationCounter = 0;
90005166:	2300      	movs	r3, #0
            done = true;
90005168:	722a      	strb	r2, [r5, #8]
            animationCounter = 0;
9000516a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    }
9000516e:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
90005170:	f9b5 203a 	ldrsh.w	r2, [r5, #58]	; 0x3a
90005174:	2100      	movs	r1, #0
90005176:	f014 fdc5 	bl	90019d04 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
9000517a:	f010 0201 	ands.w	r2, r0, #1
9000517e:	b283      	uxth	r3, r0
90005180:	d006      	beq.n	90005190 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x44>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
90005182:	f64f 71ff 	movw	r1, #65535	; 0xffff
90005186:	2800      	cmp	r0, #0
90005188:	bfd8      	it	le
9000518a:	460a      	movle	r2, r1
9000518c:	4413      	add	r3, r2
9000518e:	b29b      	uxth	r3, r3
        Drawable* d = screenContainer->getFirstChild();
90005190:	6868      	ldr	r0, [r5, #4]
            relativeValue = calculatedValue - snapshot.getX();
90005192:	8a2c      	ldrh	r4, [r5, #16]
        Drawable* d = screenContainer->getFirstChild();
90005194:	6802      	ldr	r2, [r0, #0]
90005196:	4912      	ldr	r1, [pc, #72]	; (900051e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
            relativeValue = calculatedValue - snapshot.getX();
90005198:	1b1b      	subs	r3, r3, r4
        Drawable* d = screenContainer->getFirstChild();
9000519a:	69d2      	ldr	r2, [r2, #28]
            relativeValue = calculatedValue - snapshot.getX();
9000519c:	87ab      	strh	r3, [r5, #60]	; 0x3c
9000519e:	428a      	cmp	r2, r1
900051a0:	d11b      	bne.n	900051da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
900051a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900051a4:	b164      	cbz	r4, 900051c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
900051a6:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900051a8:	4e0e      	ldr	r6, [pc, #56]	; (900051e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
                d->setX(d->getX() + relativeValue);
900051aa:	6823      	ldr	r3, [r4, #0]
900051ac:	88a1      	ldrh	r1, [r4, #4]
900051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900051b0:	4411      	add	r1, r2
900051b2:	42b3      	cmp	r3, r6
900051b4:	b209      	sxth	r1, r1
        rect.x = x;
900051b6:	d109      	bne.n	900051cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
900051b8:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900051ba:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051bc:	2c00      	cmp	r4, #0
900051be:	d1f4      	bne.n	900051aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        screenContainer->invalidate();
900051c0:	6868      	ldr	r0, [r5, #4]
900051c2:	6803      	ldr	r3, [r0, #0]
    }
900051c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
900051c8:	695b      	ldr	r3, [r3, #20]
900051ca:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
900051cc:	4620      	mov	r0, r4
900051ce:	4798      	blx	r3
900051d0:	69a4      	ldr	r4, [r4, #24]
        while (d)
900051d2:	2c00      	cmp	r4, #0
900051d4:	d0f4      	beq.n	900051c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
900051d6:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
900051d8:	e7e7      	b.n	900051aa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
        Drawable* d = screenContainer->getFirstChild();
900051da:	4790      	blx	r2
900051dc:	4604      	mov	r4, r0
900051de:	e7e1      	b.n	900051a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
900051e0:	90004f99 	.word	0x90004f99
900051e4:	90002351 	.word	0x90002351

900051e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
900051e8:	7a03      	ldrb	r3, [r0, #8]
900051ea:	bb2b      	cbnz	r3, 90005238 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x50>
900051ec:	4a14      	ldr	r2, [pc, #80]	; (90005240 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x58>)
    virtual void init()
900051ee:	b570      	push	{r4, r5, r6, lr}
900051f0:	4605      	mov	r5, r0
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
900051f2:	6840      	ldr	r0, [r0, #4]
900051f4:	6803      	ldr	r3, [r0, #0]
900051f6:	69db      	ldr	r3, [r3, #28]
900051f8:	4293      	cmp	r3, r2
900051fa:	d11e      	bne.n	9000523a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x52>
900051fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900051fe:	b164      	cbz	r4, 9000521a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
90005200:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005202:	4e10      	ldr	r6, [pc, #64]	; (90005244 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x5c>)
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
90005204:	6823      	ldr	r3, [r4, #0]
90005206:	88a1      	ldrh	r1, [r4, #4]
90005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000520a:	1a89      	subs	r1, r1, r2
9000520c:	42b3      	cmp	r3, r6
9000520e:	b209      	sxth	r1, r1
        rect.x = x;
90005210:	d10b      	bne.n	9000522a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x42>
90005212:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005214:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005216:	2c00      	cmp	r4, #0
90005218:	d1f4      	bne.n	90005204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
9000521a:	6868      	ldr	r0, [r5, #4]
9000521c:	f105 010c 	add.w	r1, r5, #12
90005220:	6803      	ldr	r3, [r0, #0]
    }
90005222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
90005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005228:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
9000522a:	4620      	mov	r0, r4
9000522c:	4798      	blx	r3
9000522e:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005230:	2c00      	cmp	r4, #0
90005232:	d0f2      	beq.n	9000521a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x32>
90005234:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005236:	e7e5      	b.n	90005204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x1c>
90005238:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
9000523a:	4798      	blx	r3
9000523c:	4604      	mov	r4, r0
9000523e:	e7de      	b.n	900051fe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x16>
90005240:	90004f99 	.word	0x90004f99
90005244:	90002351 	.word	0x90002351

90005248 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
        if (done)
90005248:	7a03      	ldrb	r3, [r0, #8]
9000524a:	bb2b      	cbnz	r3, 90005298 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x50>
9000524c:	4a14      	ldr	r2, [pc, #80]	; (900052a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x58>)
    virtual void init()
9000524e:	b570      	push	{r4, r5, r6, lr}
90005250:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
90005252:	6840      	ldr	r0, [r0, #4]
90005254:	6803      	ldr	r3, [r0, #0]
90005256:	69db      	ldr	r3, [r3, #28]
90005258:	4293      	cmp	r3, r2
9000525a:	d11e      	bne.n	9000529a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x52>
9000525c:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
9000525e:	b164      	cbz	r4, 9000527a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
90005260:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005262:	4e10      	ldr	r6, [pc, #64]	; (900052a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x5c>)
                d->setX(d->getX() - targetValue);
90005264:	6823      	ldr	r3, [r4, #0]
90005266:	88a1      	ldrh	r1, [r4, #4]
90005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000526a:	1a89      	subs	r1, r1, r2
9000526c:	42b3      	cmp	r3, r6
9000526e:	b209      	sxth	r1, r1
        rect.x = x;
90005270:	d10b      	bne.n	9000528a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x42>
90005272:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
90005274:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005276:	2c00      	cmp	r4, #0
90005278:	d1f4      	bne.n	90005264 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
        screenContainer->add(snapshot);
9000527a:	6868      	ldr	r0, [r5, #4]
9000527c:	f105 010c 	add.w	r1, r5, #12
90005280:	6803      	ldr	r3, [r0, #0]
    }
90005282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
90005286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005288:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
9000528a:	4620      	mov	r0, r4
9000528c:	4798      	blx	r3
9000528e:	69a4      	ldr	r4, [r4, #24]
        while (d)
90005290:	2c00      	cmp	r4, #0
90005292:	d0f2      	beq.n	9000527a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x32>
90005294:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005296:	e7e5      	b.n	90005264 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x1c>
90005298:	4770      	bx	lr
        Drawable* d = screenContainer->getFirstChild();
9000529a:	4798      	blx	r3
9000529c:	4604      	mov	r4, r0
9000529e:	e7de      	b.n	9000525e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x16>
900052a0:	90004f99 	.word	0x90004f99
900052a4:	90002351 	.word	0x90002351

900052a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
900052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900052ac:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
900052b0:	4607      	mov	r7, r0
900052b2:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900052b4:	68a0      	ldr	r0, [r4, #8]
900052b6:	6803      	ldr	r3, [r0, #0]
900052b8:	6a1b      	ldr	r3, [r3, #32]
900052ba:	4798      	blx	r3
900052bc:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
900052c0:	f0c0 809c 	bcc.w	900053fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x154>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900052c4:	6860      	ldr	r0, [r4, #4]
900052c6:	6803      	ldr	r3, [r0, #0]
900052c8:	6a1b      	ldr	r3, [r3, #32]
900052ca:	4798      	blx	r3
900052cc:	280f      	cmp	r0, #15
900052ce:	f240 80a1 	bls.w	90005414 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900052d2:	68e0      	ldr	r0, [r4, #12]
900052d4:	6803      	ldr	r3, [r0, #0]
900052d6:	6a1b      	ldr	r3, [r3, #32]
900052d8:	4798      	blx	r3
900052da:	280b      	cmp	r0, #11
900052dc:	f240 8094 	bls.w	90005408 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    if (*currentTrans)
900052e0:	f8df 915c 	ldr.w	r9, [pc, #348]	; 90005440 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
900052e4:	f012 ff5a 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
900052e8:	3004      	adds	r0, #4
900052ea:	f012 ff95 	bl	90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900052ee:	f8d9 0000 	ldr.w	r0, [r9]
900052f2:	b140      	cbz	r0, 90005306 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->tearDown();
900052f4:	6803      	ldr	r3, [r0, #0]
900052f6:	68db      	ldr	r3, [r3, #12]
900052f8:	4798      	blx	r3
    if (*currentTrans)
900052fa:	f8d9 0000 	ldr.w	r0, [r9]
900052fe:	b110      	cbz	r0, 90005306 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5e>
        (*currentTrans)->~Transition();
90005300:	6803      	ldr	r3, [r0, #0]
90005302:	681b      	ldr	r3, [r3, #0]
90005304:	4798      	blx	r3
    if (*currentScreen)
90005306:	f8df 813c 	ldr.w	r8, [pc, #316]	; 90005444 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>
9000530a:	f8d8 0000 	ldr.w	r0, [r8]
9000530e:	2800      	cmp	r0, #0
90005310:	d061      	beq.n	900053d6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
        (*currentScreen)->tearDownScreen();
90005312:	6803      	ldr	r3, [r0, #0]
90005314:	695b      	ldr	r3, [r3, #20]
90005316:	4798      	blx	r3
    if (*currentPresenter)
90005318:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000531c:	2800      	cmp	r0, #0
9000531e:	d055      	beq.n	900053cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x124>
        (*currentPresenter)->deactivate();
90005320:	6803      	ldr	r3, [r0, #0]
90005322:	685b      	ldr	r3, [r3, #4]
90005324:	4798      	blx	r3
    if (*currentScreen)
90005326:	f8d8 0000 	ldr.w	r0, [r8]
9000532a:	b110      	cbz	r0, 90005332 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentScreen)->~Screen();
9000532c:	6803      	ldr	r3, [r0, #0]
9000532e:	681b      	ldr	r3, [r3, #0]
90005330:	4798      	blx	r3
    if (*currentPresenter)
90005332:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90005336:	b110      	cbz	r0, 9000533e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentPresenter)->~Presenter();
90005338:	6803      	ldr	r3, [r0, #0]
9000533a:	689b      	ldr	r3, [r3, #8]
9000533c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000533e:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90005340:	2100      	movs	r1, #0
90005342:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005344:	468b      	mov	fp, r1
90005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005348:	4798      	blx	r3
9000534a:	4b35      	ldr	r3, [pc, #212]	; (90005420 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>)
9000534c:	4605      	mov	r5, r0
9000534e:	f8c0 b004 	str.w	fp, [r0, #4]
90005352:	f880 b008 	strb.w	fp, [r0, #8]
90005356:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005358:	68a0      	ldr	r0, [r4, #8]
9000535a:	602b      	str	r3, [r5, #0]
9000535c:	6803      	ldr	r3, [r0, #0]
9000535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005360:	4798      	blx	r3
90005362:	4606      	mov	r6, r0
90005364:	f003 f8b8 	bl	900084d8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005368:	6860      	ldr	r0, [r4, #4]
9000536a:	4659      	mov	r1, fp
9000536c:	6803      	ldr	r3, [r0, #0]
9000536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005370:	4798      	blx	r3
90005372:	4604      	mov	r4, r0
90005374:	4631      	mov	r1, r6
90005376:	f003 f883 	bl	90008480 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
9000537a:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
9000537e:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90005382:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90005386:	b35c      	cbz	r4, 900053e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
90005388:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
9000538a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
9000538e:	4630      	mov	r0, r6
90005390:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90005392:	f8c4 a008 	str.w	sl, [r4, #8]
90005396:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90005398:	63f4      	str	r4, [r6, #60]	; 0x3c
9000539a:	4798      	blx	r3
    newPresenter->activate();
9000539c:	6823      	ldr	r3, [r4, #0]
9000539e:	4620      	mov	r0, r4
900053a0:	681b      	ldr	r3, [r3, #0]
900053a2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900053a4:	4629      	mov	r1, r5
900053a6:	4630      	mov	r0, r6
900053a8:	f014 fca6 	bl	90019cf8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900053ac:	682b      	ldr	r3, [r5, #0]
900053ae:	491d      	ldr	r1, [pc, #116]	; (90005424 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17c>)
900053b0:	691a      	ldr	r2, [r3, #16]
900053b2:	428a      	cmp	r2, r1
900053b4:	d116      	bne.n	900053e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>
    newTransition->invalidate();
900053b6:	695b      	ldr	r3, [r3, #20]
900053b8:	4a1b      	ldr	r2, [pc, #108]	; (90005428 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
900053ba:	4293      	cmp	r3, r2
900053bc:	d119      	bne.n	900053f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14a>
        Application::getInstance()->invalidate();
900053be:	f012 feed 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
}
900053c2:	b001      	add	sp, #4
900053c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900053c8:	f013 bb7c 	b.w	90018ac4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900053cc:	f8d8 0000 	ldr.w	r0, [r8]
900053d0:	2800      	cmp	r0, #0
900053d2:	d1ab      	bne.n	9000532c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
900053d4:	e7b3      	b.n	9000533e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    if (*currentPresenter)
900053d6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900053da:	2800      	cmp	r0, #0
900053dc:	d1a0      	bne.n	90005320 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x78>
900053de:	e7ae      	b.n	9000533e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
    model->bind(newPresenter);
900053e0:	4623      	mov	r3, r4
900053e2:	e7d2      	b.n	9000538a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe2>
    newTransition->init();
900053e4:	4628      	mov	r0, r5
900053e6:	4790      	blx	r2
    newTransition->invalidate();
900053e8:	682b      	ldr	r3, [r5, #0]
900053ea:	4a0f      	ldr	r2, [pc, #60]	; (90005428 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x180>)
900053ec:	695b      	ldr	r3, [r3, #20]
900053ee:	4293      	cmp	r3, r2
900053f0:	d0e5      	beq.n	900053be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x116>
900053f2:	4628      	mov	r0, r5
900053f4:	b001      	add	sp, #4
900053f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900053fa:	4718      	bx	r3
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900053fc:	4b0b      	ldr	r3, [pc, #44]	; (9000542c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
900053fe:	21a3      	movs	r1, #163	; 0xa3
90005400:	4a0b      	ldr	r2, [pc, #44]	; (90005430 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90005402:	480c      	ldr	r0, [pc, #48]	; (90005434 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005404:	f022 f976 	bl	900276f4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005408:	4b0b      	ldr	r3, [pc, #44]	; (90005438 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
9000540a:	21a5      	movs	r1, #165	; 0xa5
9000540c:	4a08      	ldr	r2, [pc, #32]	; (90005430 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
9000540e:	4809      	ldr	r0, [pc, #36]	; (90005434 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005410:	f022 f970 	bl	900276f4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005414:	4b09      	ldr	r3, [pc, #36]	; (9000543c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90005416:	21a4      	movs	r1, #164	; 0xa4
90005418:	4a05      	ldr	r2, [pc, #20]	; (90005430 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
9000541a:	4806      	ldr	r0, [pc, #24]	; (90005434 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
9000541c:	f022 f96a 	bl	900276f4 <__assert_func>
90005420:	9002ac60 	.word	0x9002ac60
90005424:	90004fa1 	.word	0x90004fa1
90005428:	90005069 	.word	0x90005069
9000542c:	9002a6a0 	.word	0x9002a6a0
90005430:	9002a730 	.word	0x9002a730
90005434:	9002a834 	.word	0x9002a834
90005438:	9002a920 	.word	0x9002a920
9000543c:	9002a87c 	.word	0x9002a87c
90005440:	24028234 	.word	0x24028234
90005444:	24028230 	.word	0x24028230

90005448 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
90005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
9000544c:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
90005450:	4680      	mov	r8, r0
90005452:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005454:	68a0      	ldr	r0, [r4, #8]
90005456:	6803      	ldr	r3, [r0, #0]
90005458:	6a1b      	ldr	r3, [r3, #32]
9000545a:	4798      	blx	r3
9000545c:	f5b0 7ff2 	cmp.w	r0, #484	; 0x1e4
90005460:	f0c0 80de 	bcc.w	90005620 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d8>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005464:	6860      	ldr	r0, [r4, #4]
90005466:	6803      	ldr	r3, [r0, #0]
90005468:	6a1b      	ldr	r3, [r3, #32]
9000546a:	4798      	blx	r3
9000546c:	280f      	cmp	r0, #15
9000546e:	f240 80e3 	bls.w	90005638 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1f0>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005472:	68e0      	ldr	r0, [r4, #12]
90005474:	6803      	ldr	r3, [r0, #0]
90005476:	6a1b      	ldr	r3, [r3, #32]
90005478:	4798      	blx	r3
9000547a:	283f      	cmp	r0, #63	; 0x3f
9000547c:	f240 80d6 	bls.w	9000562c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1e4>
    if (*currentTrans)
90005480:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 90005678 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x230>
    Application::getInstance()->clearAllTimerWidgets();
90005484:	f012 fe8a 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
90005488:	3004      	adds	r0, #4
9000548a:	f012 fec5 	bl	90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
9000548e:	f8da 0000 	ldr.w	r0, [sl]
90005492:	b140      	cbz	r0, 900054a6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->tearDown();
90005494:	6803      	ldr	r3, [r0, #0]
90005496:	68db      	ldr	r3, [r3, #12]
90005498:	4798      	blx	r3
    if (*currentTrans)
9000549a:	f8da 0000 	ldr.w	r0, [sl]
9000549e:	b110      	cbz	r0, 900054a6 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x5e>
        (*currentTrans)->~Transition();
900054a0:	6803      	ldr	r3, [r0, #0]
900054a2:	681b      	ldr	r3, [r3, #0]
900054a4:	4798      	blx	r3
    if (*currentScreen)
900054a6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9000567c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x234>
900054aa:	f8d9 0000 	ldr.w	r0, [r9]
900054ae:	2800      	cmp	r0, #0
900054b0:	f000 80a2 	beq.w	900055f8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1b0>
        (*currentScreen)->tearDownScreen();
900054b4:	6803      	ldr	r3, [r0, #0]
900054b6:	695b      	ldr	r3, [r3, #20]
900054b8:	4798      	blx	r3
    if (*currentPresenter)
900054ba:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900054be:	2800      	cmp	r0, #0
900054c0:	d07f      	beq.n	900055c2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x17a>
        (*currentPresenter)->deactivate();
900054c2:	6803      	ldr	r3, [r0, #0]
900054c4:	685b      	ldr	r3, [r3, #4]
900054c6:	4798      	blx	r3
    if (*currentScreen)
900054c8:	f8d9 0000 	ldr.w	r0, [r9]
900054cc:	b110      	cbz	r0, 900054d4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x8c>
        (*currentScreen)->~Screen();
900054ce:	6803      	ldr	r3, [r0, #0]
900054d0:	681b      	ldr	r3, [r3, #0]
900054d2:	4798      	blx	r3
    if (*currentPresenter)
900054d4:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900054d8:	b110      	cbz	r0, 900054e0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
        (*currentPresenter)->~Presenter();
900054da:	6803      	ldr	r3, [r0, #0]
900054dc:	689b      	ldr	r3, [r3, #8]
900054de:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
900054e0:	68e0      	ldr	r0, [r4, #12]
900054e2:	2100      	movs	r1, #0
900054e4:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
900054e6:	460f      	mov	r7, r1
900054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900054ea:	4798      	blx	r3
          relativeValue(0)
900054ec:	4b55      	ldr	r3, [pc, #340]	; (90005644 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1fc>)
900054ee:	4606      	mov	r6, r0
900054f0:	4605      	mov	r5, r0
900054f2:	6047      	str	r7, [r0, #4]
900054f4:	7207      	strb	r7, [r0, #8]
900054f6:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
900054fa:	4630      	mov	r0, r6
900054fc:	f00f fd7a 	bl	90014ff4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
90005500:	4b51      	ldr	r3, [pc, #324]	; (90005648 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x200>)
          animationSteps(transitionSteps),
90005502:	2214      	movs	r2, #20
          relativeValue(0)
90005504:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
90005506:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
90005508:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
9000550a:	2b00      	cmp	r3, #0
9000550c:	d165      	bne.n	900055da <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x192>
            done = true;
9000550e:	2301      	movs	r3, #1
90005510:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005512:	68a0      	ldr	r0, [r4, #8]
90005514:	2100      	movs	r1, #0
90005516:	6803      	ldr	r3, [r0, #0]
90005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000551a:	4798      	blx	r3
9000551c:	4607      	mov	r7, r0
9000551e:	f002 ffdb 	bl	900084d8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005522:	6860      	ldr	r0, [r4, #4]
90005524:	2100      	movs	r1, #0
90005526:	6803      	ldr	r3, [r0, #0]
90005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000552a:	4798      	blx	r3
9000552c:	4604      	mov	r4, r0
9000552e:	4639      	mov	r1, r7
90005530:	f002 ffa6 	bl	90008480 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90005534:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
90005538:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
9000553c:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
90005540:	2c00      	cmp	r4, #0
90005542:	d05f      	beq.n	90005604 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1bc>
90005544:	1d23      	adds	r3, r4, #4
90005546:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
9000554a:	4638      	mov	r0, r7
9000554c:	683b      	ldr	r3, [r7, #0]
9000554e:	f8c4 b008 	str.w	fp, [r4, #8]
90005552:	68db      	ldr	r3, [r3, #12]
90005554:	63fc      	str	r4, [r7, #60]	; 0x3c
90005556:	4798      	blx	r3
    newPresenter->activate();
90005558:	6823      	ldr	r3, [r4, #0]
9000555a:	4620      	mov	r0, r4
9000555c:	681b      	ldr	r3, [r3, #0]
9000555e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90005560:	4629      	mov	r1, r5
90005562:	4638      	mov	r0, r7
90005564:	f014 fbc8 	bl	90019cf8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90005568:	682b      	ldr	r3, [r5, #0]
9000556a:	4938      	ldr	r1, [pc, #224]	; (9000564c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x204>)
9000556c:	691a      	ldr	r2, [r3, #16]
9000556e:	428a      	cmp	r2, r1
90005570:	d152      	bne.n	90005618 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1d0>
        if (done)
90005572:	7a2a      	ldrb	r2, [r5, #8]
90005574:	b9d2      	cbnz	r2, 900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
        Drawable* d = screenContainer->getFirstChild();
90005576:	6868      	ldr	r0, [r5, #4]
90005578:	4a35      	ldr	r2, [pc, #212]	; (90005650 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x208>)
9000557a:	6803      	ldr	r3, [r0, #0]
9000557c:	69db      	ldr	r3, [r3, #28]
9000557e:	4293      	cmp	r3, r2
90005580:	d142      	bne.n	90005608 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c0>
90005582:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
90005584:	b164      	cbz	r4, 900055a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
90005586:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005588:	4f32      	ldr	r7, [pc, #200]	; (90005654 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x20c>)
                d->setX(d->getX() - targetValue);
9000558a:	6823      	ldr	r3, [r4, #0]
9000558c:	88a1      	ldrh	r1, [r4, #4]
9000558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005590:	1a89      	subs	r1, r1, r2
90005592:	42bb      	cmp	r3, r7
90005594:	b209      	sxth	r1, r1
90005596:	d119      	bne.n	900055cc <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x184>
        rect.x = x;
90005598:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
9000559a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000559c:	2c00      	cmp	r4, #0
9000559e:	d1f4      	bne.n	9000558a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        screenContainer->add(snapshot);
900055a0:	6868      	ldr	r0, [r5, #4]
900055a2:	4631      	mov	r1, r6
900055a4:	6803      	ldr	r3, [r0, #0]
900055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900055a8:	4798      	blx	r3
    newTransition->invalidate();
900055aa:	682b      	ldr	r3, [r5, #0]
900055ac:	695b      	ldr	r3, [r3, #20]
900055ae:	4a2a      	ldr	r2, [pc, #168]	; (90005658 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x210>)
900055b0:	4293      	cmp	r3, r2
900055b2:	d12c      	bne.n	9000560e <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x1c6>
        Application::getInstance()->invalidate();
900055b4:	f012 fdf2 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
}
900055b8:	b001      	add	sp, #4
900055ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900055be:	f013 ba81 	b.w	90018ac4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900055c2:	f8d9 0000 	ldr.w	r0, [r9]
900055c6:	2800      	cmp	r0, #0
900055c8:	d181      	bne.n	900054ce <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x86>
900055ca:	e789      	b.n	900054e0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
                d->setX(d->getX() - targetValue);
900055cc:	4620      	mov	r0, r4
900055ce:	4798      	blx	r3
900055d0:	69a4      	ldr	r4, [r4, #24]
        while (d)
900055d2:	2c00      	cmp	r4, #0
900055d4:	d0e4      	beq.n	900055a0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x158>
900055d6:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900055d8:	e7d7      	b.n	9000558a <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x142>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
900055da:	4b20      	ldr	r3, [pc, #128]	; (9000565c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x214>)
        snapshot.makeSnapshot();
900055dc:	4630      	mov	r0, r6
        rect.x = x;
900055de:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
900055e0:	f9b3 3000 	ldrsh.w	r3, [r3]
900055e4:	4f1e      	ldr	r7, [pc, #120]	; (90005660 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x218>)
        rect.height = height;
900055e6:	82eb      	strh	r3, [r5, #22]
900055e8:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
900055ec:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
900055ee:	f00f fc7d 	bl	90014eec <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = HAL::DISPLAY_WIDTH;
900055f2:	883b      	ldrh	r3, [r7, #0]
900055f4:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
900055f6:	e78c      	b.n	90005512 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xca>
    if (*currentPresenter)
900055f8:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900055fc:	2800      	cmp	r0, #0
900055fe:	f47f af60 	bne.w	900054c2 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x7a>
90005602:	e76d      	b.n	900054e0 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x98>
    model->bind(newPresenter);
90005604:	4623      	mov	r3, r4
90005606:	e79e      	b.n	90005546 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0xfe>
        Drawable* d = screenContainer->getFirstChild();
90005608:	4798      	blx	r3
9000560a:	4604      	mov	r4, r0
9000560c:	e7ba      	b.n	90005584 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x13c>
    newTransition->invalidate();
9000560e:	4628      	mov	r0, r5
90005610:	b001      	add	sp, #4
90005612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005616:	4718      	bx	r3
    newTransition->init();
90005618:	4628      	mov	r0, r5
9000561a:	4790      	blx	r2
    newTransition->invalidate();
9000561c:	682b      	ldr	r3, [r5, #0]
9000561e:	e7c5      	b.n	900055ac <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x164>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005620:	4b10      	ldr	r3, [pc, #64]	; (90005664 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x21c>)
90005622:	21a3      	movs	r1, #163	; 0xa3
90005624:	4a10      	ldr	r2, [pc, #64]	; (90005668 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
90005626:	4811      	ldr	r0, [pc, #68]	; (9000566c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
90005628:	f022 f864 	bl	900276f4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000562c:	4b10      	ldr	r3, [pc, #64]	; (90005670 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x228>)
9000562e:	21a5      	movs	r1, #165	; 0xa5
90005630:	4a0d      	ldr	r2, [pc, #52]	; (90005668 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
90005632:	480e      	ldr	r0, [pc, #56]	; (9000566c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
90005634:	f022 f85e 	bl	900276f4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005638:	4b0e      	ldr	r3, [pc, #56]	; (90005674 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x22c>)
9000563a:	21a4      	movs	r1, #164	; 0xa4
9000563c:	4a0a      	ldr	r2, [pc, #40]	; (90005668 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x220>)
9000563e:	480b      	ldr	r0, [pc, #44]	; (9000566c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x224>)
90005640:	f022 f858 	bl	900276f4 <__assert_func>
90005644:	9002aca8 	.word	0x9002aca8
90005648:	240281eb 	.word	0x240281eb
9000564c:	900051e9 	.word	0x900051e9
90005650:	90004f99 	.word	0x90004f99
90005654:	90002351 	.word	0x90002351
90005658:	90005069 	.word	0x90005069
9000565c:	240281e2 	.word	0x240281e2
90005660:	240281e0 	.word	0x240281e0
90005664:	9002a6a0 	.word	0x9002a6a0
90005668:	9002a9c4 	.word	0x9002a9c4
9000566c:	9002a834 	.word	0x9002a834
90005670:	9002a920 	.word	0x9002a920
90005674:	9002a87c 	.word	0x9002a87c
90005678:	24028234 	.word	0x24028234
9000567c:	24028230 	.word	0x24028230

90005680 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
90005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90005684:	e9d0 4b55 	ldrd	r4, fp, [r0, #340]	; 0x154
{
90005688:	4680      	mov	r8, r0
9000568a:	b081      	sub	sp, #4
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
9000568c:	68a0      	ldr	r0, [r4, #8]
9000568e:	6803      	ldr	r3, [r0, #0]
90005690:	6a1b      	ldr	r3, [r3, #32]
90005692:	4798      	blx	r3
90005694:	f242 034b 	movw	r3, #8267	; 0x204b
90005698:	4298      	cmp	r0, r3
9000569a:	f240 80df 	bls.w	9000585c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1dc>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000569e:	6860      	ldr	r0, [r4, #4]
900056a0:	6803      	ldr	r3, [r0, #0]
900056a2:	6a1b      	ldr	r3, [r3, #32]
900056a4:	4798      	blx	r3
900056a6:	280f      	cmp	r0, #15
900056a8:	f240 80e4 	bls.w	90005874 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1f4>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900056ac:	68e0      	ldr	r0, [r4, #12]
900056ae:	6803      	ldr	r3, [r0, #0]
900056b0:	6a1b      	ldr	r3, [r3, #32]
900056b2:	4798      	blx	r3
900056b4:	283f      	cmp	r0, #63	; 0x3f
900056b6:	f240 80d7 	bls.w	90005868 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1e8>
    if (*currentTrans)
900056ba:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 900058b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x234>
    Application::getInstance()->clearAllTimerWidgets();
900056be:	f012 fd6d 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
900056c2:	3004      	adds	r0, #4
900056c4:	f012 fda8 	bl	90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900056c8:	f8da 0000 	ldr.w	r0, [sl]
900056cc:	b140      	cbz	r0, 900056e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->tearDown();
900056ce:	6803      	ldr	r3, [r0, #0]
900056d0:	68db      	ldr	r3, [r3, #12]
900056d2:	4798      	blx	r3
    if (*currentTrans)
900056d4:	f8da 0000 	ldr.w	r0, [sl]
900056d8:	b110      	cbz	r0, 900056e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x60>
        (*currentTrans)->~Transition();
900056da:	6803      	ldr	r3, [r0, #0]
900056dc:	681b      	ldr	r3, [r3, #0]
900056de:	4798      	blx	r3
    if (*currentScreen)
900056e0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 900058b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x238>
900056e4:	f8d9 0000 	ldr.w	r0, [r9]
900056e8:	2800      	cmp	r0, #0
900056ea:	f000 80a3 	beq.w	90005834 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1b4>
        (*currentScreen)->tearDownScreen();
900056ee:	6803      	ldr	r3, [r0, #0]
900056f0:	695b      	ldr	r3, [r3, #20]
900056f2:	4798      	blx	r3
    if (*currentPresenter)
900056f4:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
900056f8:	2800      	cmp	r0, #0
900056fa:	d07f      	beq.n	900057fc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>
        (*currentPresenter)->deactivate();
900056fc:	6803      	ldr	r3, [r0, #0]
900056fe:	685b      	ldr	r3, [r3, #4]
90005700:	4798      	blx	r3
    if (*currentScreen)
90005702:	f8d9 0000 	ldr.w	r0, [r9]
90005706:	b110      	cbz	r0, 9000570e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x8e>
        (*currentScreen)->~Screen();
90005708:	6803      	ldr	r3, [r0, #0]
9000570a:	681b      	ldr	r3, [r3, #0]
9000570c:	4798      	blx	r3
    if (*currentPresenter)
9000570e:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005712:	b110      	cbz	r0, 9000571a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
        (*currentPresenter)->~Presenter();
90005714:	6803      	ldr	r3, [r0, #0]
90005716:	689b      	ldr	r3, [r3, #8]
90005718:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
9000571a:	68e0      	ldr	r0, [r4, #12]
9000571c:	2100      	movs	r1, #0
9000571e:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90005720:	460f      	mov	r7, r1
90005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005724:	4798      	blx	r3
          relativeValue(0)
90005726:	4b56      	ldr	r3, [pc, #344]	; (90005880 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x200>)
90005728:	4606      	mov	r6, r0
9000572a:	4605      	mov	r5, r0
9000572c:	6047      	str	r7, [r0, #4]
9000572e:	7207      	strb	r7, [r0, #8]
90005730:	f846 3b0c 	str.w	r3, [r6], #12
          snapshot(),
90005734:	4630      	mov	r0, r6
90005736:	f00f fc5d 	bl	90014ff4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
        if (!HAL::USE_ANIMATION_STORAGE)
9000573a:	4b52      	ldr	r3, [pc, #328]	; (90005884 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x204>)
          animationSteps(transitionSteps),
9000573c:	2214      	movs	r2, #20
          relativeValue(0)
9000573e:	87af      	strh	r7, [r5, #60]	; 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
90005740:	781b      	ldrb	r3, [r3, #0]
          animationSteps(transitionSteps),
90005742:	872a      	strh	r2, [r5, #56]	; 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
90005744:	2b00      	cmp	r3, #0
90005746:	d165      	bne.n	90005814 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>
            done = true;
90005748:	2301      	movs	r3, #1
9000574a:	722b      	strb	r3, [r5, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
9000574c:	68a0      	ldr	r0, [r4, #8]
9000574e:	2100      	movs	r1, #0
90005750:	6803      	ldr	r3, [r0, #0]
90005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005754:	4798      	blx	r3
90005756:	4607      	mov	r7, r0
90005758:	f002 ff5c 	bl	90008614 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
9000575c:	6860      	ldr	r0, [r4, #4]
9000575e:	2100      	movs	r1, #0
90005760:	6803      	ldr	r3, [r0, #0]
90005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005764:	4798      	blx	r3
90005766:	4604      	mov	r4, r0
90005768:	4639      	mov	r1, r7
9000576a:	f002 ff27 	bl	900085bc <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
9000576e:	f8ca 5000 	str.w	r5, [sl]
    *currentPresenter = newPresenter;
90005772:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
    *currentScreen = newScreen;
90005776:	f8c9 7000 	str.w	r7, [r9]
    model->bind(newPresenter);
9000577a:	2c00      	cmp	r4, #0
9000577c:	d060      	beq.n	90005840 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c0>
9000577e:	1d23      	adds	r3, r4, #4
90005780:	f8cb 3000 	str.w	r3, [fp]
    newScreen->setupScreen();
90005784:	4638      	mov	r0, r7
90005786:	683b      	ldr	r3, [r7, #0]
90005788:	f8c4 b008 	str.w	fp, [r4, #8]
9000578c:	68db      	ldr	r3, [r3, #12]
9000578e:	63fc      	str	r4, [r7, #60]	; 0x3c
90005790:	4798      	blx	r3
    newPresenter->activate();
90005792:	6823      	ldr	r3, [r4, #0]
90005794:	4620      	mov	r0, r4
90005796:	681b      	ldr	r3, [r3, #0]
90005798:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
9000579a:	4629      	mov	r1, r5
9000579c:	4638      	mov	r0, r7
9000579e:	f014 faab 	bl	90019cf8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900057a2:	682b      	ldr	r3, [r5, #0]
900057a4:	4938      	ldr	r1, [pc, #224]	; (90005888 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x208>)
900057a6:	691a      	ldr	r2, [r3, #16]
900057a8:	428a      	cmp	r2, r1
900057aa:	d153      	bne.n	90005854 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1d4>
        if (done)
900057ac:	7a2a      	ldrb	r2, [r5, #8]
900057ae:	b9d2      	cbnz	r2, 900057e6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
        Drawable* d = screenContainer->getFirstChild();
900057b0:	6868      	ldr	r0, [r5, #4]
900057b2:	4a36      	ldr	r2, [pc, #216]	; (9000588c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20c>)
900057b4:	6803      	ldr	r3, [r0, #0]
900057b6:	69db      	ldr	r3, [r3, #28]
900057b8:	4293      	cmp	r3, r2
900057ba:	d143      	bne.n	90005844 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1c4>
900057bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
        while (d)
900057be:	b164      	cbz	r4, 900057da <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
900057c0:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
900057c2:	4f33      	ldr	r7, [pc, #204]	; (90005890 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x210>)
                d->setX(d->getX() - targetValue);
900057c4:	6823      	ldr	r3, [r4, #0]
900057c6:	88a1      	ldrh	r1, [r4, #4]
900057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900057ca:	1a89      	subs	r1, r1, r2
900057cc:	42bb      	cmp	r3, r7
900057ce:	b209      	sxth	r1, r1
900057d0:	d119      	bne.n	90005806 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x186>
        rect.x = x;
900057d2:	80a1      	strh	r1, [r4, #4]
        return nextSibling;
900057d4:	69a4      	ldr	r4, [r4, #24]
        while (d)
900057d6:	2c00      	cmp	r4, #0
900057d8:	d1f4      	bne.n	900057c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        screenContainer->add(snapshot);
900057da:	6868      	ldr	r0, [r5, #4]
900057dc:	4631      	mov	r1, r6
900057de:	6803      	ldr	r3, [r0, #0]
900057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900057e2:	4798      	blx	r3
    newTransition->invalidate();
900057e4:	682b      	ldr	r3, [r5, #0]
900057e6:	695b      	ldr	r3, [r3, #20]
900057e8:	4a2a      	ldr	r2, [pc, #168]	; (90005894 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x214>)
900057ea:	4293      	cmp	r3, r2
900057ec:	d12d      	bne.n	9000584a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x1ca>
        Application::getInstance()->invalidate();
900057ee:	f012 fcd5 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
}
900057f2:	b001      	add	sp, #4
900057f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900057f8:	f013 b964 	b.w	90018ac4 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900057fc:	f8d9 0000 	ldr.w	r0, [r9]
90005800:	2800      	cmp	r0, #0
90005802:	d181      	bne.n	90005708 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x88>
90005804:	e789      	b.n	9000571a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
                d->setX(d->getX() - targetValue);
90005806:	4620      	mov	r0, r4
90005808:	4798      	blx	r3
9000580a:	69a4      	ldr	r4, [r4, #24]
        while (d)
9000580c:	2c00      	cmp	r4, #0
9000580e:	d0e4      	beq.n	900057da <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x15a>
90005810:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
90005812:	e7d7      	b.n	900057c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
90005814:	4b20      	ldr	r3, [pc, #128]	; (90005898 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x218>)
        snapshot.makeSnapshot();
90005816:	4630      	mov	r0, r6
        rect.x = x;
90005818:	612f      	str	r7, [r5, #16]
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
9000581a:	f9b3 3000 	ldrsh.w	r3, [r3]
9000581e:	4f1f      	ldr	r7, [pc, #124]	; (9000589c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x21c>)
        rect.height = height;
90005820:	82eb      	strh	r3, [r5, #22]
90005822:	f9b7 3000 	ldrsh.w	r3, [r7]
        rect.width = width;
90005826:	82ab      	strh	r3, [r5, #20]
        snapshot.makeSnapshot();
90005828:	f00f fb60 	bl	90014eec <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
9000582c:	883b      	ldrh	r3, [r7, #0]
9000582e:	425b      	negs	r3, r3
90005830:	876b      	strh	r3, [r5, #58]	; 0x3a
            break;
90005832:	e78b      	b.n	9000574c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xcc>
    if (*currentPresenter)
90005834:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
90005838:	2800      	cmp	r0, #0
9000583a:	f47f af5f 	bne.w	900056fc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x7c>
9000583e:	e76c      	b.n	9000571a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9a>
    model->bind(newPresenter);
90005840:	4623      	mov	r3, r4
90005842:	e79d      	b.n	90005780 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x100>
        Drawable* d = screenContainer->getFirstChild();
90005844:	4798      	blx	r3
90005846:	4604      	mov	r4, r0
90005848:	e7b9      	b.n	900057be <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x13e>
    newTransition->invalidate();
9000584a:	4628      	mov	r0, r5
9000584c:	b001      	add	sp, #4
9000584e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005852:	4718      	bx	r3
    newTransition->init();
90005854:	4628      	mov	r0, r5
90005856:	4790      	blx	r2
    newTransition->invalidate();
90005858:	682b      	ldr	r3, [r5, #0]
9000585a:	e7c4      	b.n	900057e6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x166>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
9000585c:	4b10      	ldr	r3, [pc, #64]	; (900058a0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x220>)
9000585e:	21a3      	movs	r1, #163	; 0xa3
90005860:	4a10      	ldr	r2, [pc, #64]	; (900058a4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
90005862:	4811      	ldr	r0, [pc, #68]	; (900058a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
90005864:	f021 ff46 	bl	900276f4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005868:	4b10      	ldr	r3, [pc, #64]	; (900058ac <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x22c>)
9000586a:	21a5      	movs	r1, #165	; 0xa5
9000586c:	4a0d      	ldr	r2, [pc, #52]	; (900058a4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
9000586e:	480e      	ldr	r0, [pc, #56]	; (900058a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
90005870:	f021 ff40 	bl	900276f4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005874:	4b0e      	ldr	r3, [pc, #56]	; (900058b0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x230>)
90005876:	21a4      	movs	r1, #164	; 0xa4
90005878:	4a0a      	ldr	r2, [pc, #40]	; (900058a4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x224>)
9000587a:	480b      	ldr	r0, [pc, #44]	; (900058a8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x228>)
9000587c:	f021 ff3a 	bl	900276f4 <__assert_func>
90005880:	9002ac84 	.word	0x9002ac84
90005884:	240281eb 	.word	0x240281eb
90005888:	90005249 	.word	0x90005249
9000588c:	90004f99 	.word	0x90004f99
90005890:	90002351 	.word	0x90002351
90005894:	90005069 	.word	0x90005069
90005898:	240281e2 	.word	0x240281e2
9000589c:	240281e0 	.word	0x240281e0
900058a0:	9002a6a0 	.word	0x9002a6a0
900058a4:	9002aadc 	.word	0x9002aadc
900058a8:	9002a834 	.word	0x9002a834
900058ac:	9002a920 	.word	0x9002a920
900058b0:	9002a87c 	.word	0x9002a87c
900058b4:	24028234 	.word	0x24028234
900058b8:	24028230 	.word	0x24028230

900058bc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900058bc:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
900058c0:	b1d3      	cbz	r3, 900058f8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
900058c2:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
900058c4:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900058c6:	68d1      	ldr	r1, [r2, #12]
900058c8:	4604      	mov	r4, r0
900058ca:	4818      	ldr	r0, [pc, #96]	; (9000592c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
900058cc:	4281      	cmp	r1, r0
900058ce:	d118      	bne.n	90005902 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
900058d0:	6858      	ldr	r0, [r3, #4]
900058d2:	b180      	cbz	r0, 900058f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900058d4:	6899      	ldr	r1, [r3, #8]
900058d6:	b1e1      	cbz	r1, 90005912 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
900058d8:	6892      	ldr	r2, [r2, #8]
900058da:	4915      	ldr	r1, [pc, #84]	; (90005930 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900058dc:	428a      	cmp	r2, r1
900058de:	d122      	bne.n	90005926 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900058e0:	68da      	ldr	r2, [r3, #12]
900058e2:	6858      	ldr	r0, [r3, #4]
900058e4:	eb00 0062 	add.w	r0, r0, r2, asr #1
900058e8:	07d2      	lsls	r2, r2, #31
900058ea:	d406      	bmi.n	900058fa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
900058ec:	689b      	ldr	r3, [r3, #8]
900058ee:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
900058f0:	2300      	movs	r3, #0
900058f2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
900058f6:	bd70      	pop	{r4, r5, r6, pc}
900058f8:	4770      	bx	lr
900058fa:	6899      	ldr	r1, [r3, #8]
900058fc:	6803      	ldr	r3, [r0, #0]
900058fe:	585b      	ldr	r3, [r3, r1]
90005900:	e7f5      	b.n	900058ee <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005902:	4618      	mov	r0, r3
90005904:	4788      	blx	r1
90005906:	2800      	cmp	r0, #0
90005908:	d0f5      	beq.n	900058f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
9000590a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
9000590e:	681a      	ldr	r2, [r3, #0]
90005910:	e7e2      	b.n	900058d8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
90005912:	68dd      	ldr	r5, [r3, #12]
90005914:	07ee      	lsls	r6, r5, #31
90005916:	d5ee      	bpl.n	900058f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005918:	6892      	ldr	r2, [r2, #8]
9000591a:	4e05      	ldr	r6, [pc, #20]	; (90005930 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
9000591c:	42b2      	cmp	r2, r6
9000591e:	d102      	bne.n	90005926 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005920:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005924:	e7ea      	b.n	900058fc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
90005926:	4618      	mov	r0, r3
90005928:	4790      	blx	r2
9000592a:	e7e1      	b.n	900058f0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
9000592c:	90005001 	.word	0x90005001
90005930:	90004fe1 	.word	0x90004fe1

90005934 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90005934:	b570      	push	{r4, r5, r6, lr}
90005936:	4604      	mov	r4, r0
90005938:	4616      	mov	r6, r2
9000593a:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
9000593c:	f012 fd3e 	bl	900183bc <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90005940:	4a18      	ldr	r2, [pc, #96]	; (900059a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
90005942:	2300      	movs	r3, #0
      frontendHeap(heap),
90005944:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
90005948:	6014      	str	r4, [r2, #0]
        return instance;
9000594a:	4e17      	ldr	r6, [pc, #92]	; (900059a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
9000594c:	4a17      	ldr	r2, [pc, #92]	; (900059ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
9000594e:	6830      	ldr	r0, [r6, #0]
90005950:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
90005952:	4a17      	ldr	r2, [pc, #92]	; (900059b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90005954:	4917      	ldr	r1, [pc, #92]	; (900059b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
90005956:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
9000595a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
9000595e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
90005962:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005966:	6802      	ldr	r2, [r0, #0]
90005968:	6892      	ldr	r2, [r2, #8]
9000596a:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
9000596c:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
90005970:	d115      	bne.n	9000599e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
90005972:	f44f 7380 	mov.w	r3, #256	; 0x100
90005976:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
9000597a:	2000      	movs	r0, #0
9000597c:	f002 fc6c 	bl	90008258 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90005980:	6833      	ldr	r3, [r6, #0]
90005982:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90005986:	b12a      	cbz	r2, 90005994 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005988:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000598a:	b118      	cbz	r0, 90005994 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
9000598c:	f01a fc5d 	bl	9002024a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005990:	4620      	mov	r0, r4
90005992:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005994:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005996:	f01a fc58 	bl	9002024a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000599a:	4620      	mov	r0, r4
9000599c:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000599e:	4619      	mov	r1, r3
900059a0:	4790      	blx	r2
900059a2:	e7ea      	b.n	9000597a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
900059a4:	24028240 	.word	0x24028240
900059a8:	240281ec 	.word	0x240281ec
900059ac:	9002ac14 	.word	0x9002ac14
900059b0:	9002abfc 	.word	0x9002abfc
900059b4:	90000685 	.word	0x90000685

900059b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
900059b8:	4905      	ldr	r1, [pc, #20]	; (900059d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
900059ba:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
900059bc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900059c0:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900059c4:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900059c8:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
900059cc:	4770      	bx	lr
900059ce:	bf00      	nop
900059d0:	900052a9 	.word	0x900052a9

900059d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:
900059d4:	4905      	ldr	r1, [pc, #20]	; (900059ec <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x18>)
900059d6:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
900059d8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900059dc:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900059e0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900059e4:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
900059e8:	4770      	bx	lr
900059ea:	bf00      	nop
900059ec:	90005449 	.word	0x90005449

900059f0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
900059f0:	4905      	ldr	r1, [pc, #20]	; (90005a08 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x18>)
900059f2:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
900059f4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900059f8:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900059fc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005a00:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005a04:	4770      	bx	lr
90005a06:	bf00      	nop
90005a08:	90005681 	.word	0x90005681

90005a0c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90005a0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
90005a0e:	4770      	bx	lr

90005a10 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005a10:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005a12:	4770      	bx	lr

90005a14 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005a14:	4770      	bx	lr
90005a16:	bf00      	nop

90005a18 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90005a18:	888b      	ldrh	r3, [r1, #4]
90005a1a:	69c0      	ldr	r0, [r0, #28]
90005a1c:	0adb      	lsrs	r3, r3, #11
90005a1e:	680a      	ldr	r2, [r1, #0]
90005a20:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005a24:	4410      	add	r0, r2
90005a26:	4770      	bx	lr

90005a28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90005a28:	b1da      	cbz	r2, 90005a62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
90005a2a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90005a2c:	7b14      	ldrb	r4, [r2, #12]
90005a2e:	b1b4      	cbz	r4, 90005a5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005a30:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005a34:	f892 e00b 	ldrb.w	lr, [r2, #11]
90005a38:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90005a3c:	6a03      	ldr	r3, [r0, #32]
90005a3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90005a42:	ea4e 0202 	orr.w	r2, lr, r2
90005a46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a4a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90005a4e:	881a      	ldrh	r2, [r3, #0]
90005a50:	428a      	cmp	r2, r1
90005a52:	d008      	beq.n	90005a66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a54:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005a58:	d801      	bhi.n	90005a5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005a5a:	4283      	cmp	r3, r0
90005a5c:	d1f7      	bne.n	90005a4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
90005a5e:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
90005a60:	bd10      	pop	{r4, pc}
        return 0;
90005a62:	4610      	mov	r0, r2
}
90005a64:	4770      	bx	lr
            return kerndata->distance;
90005a66:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
90005a6a:	bd10      	pop	{r4, pc}

90005a6c <_ZN8touchgfx13GeneratedFontD0Ev>:
90005a6c:	b510      	push	{r4, lr}
90005a6e:	4604      	mov	r4, r0
90005a70:	212c      	movs	r1, #44	; 0x2c
90005a72:	f021 fe10 	bl	90027696 <_ZdlPvj>
90005a76:	4620      	mov	r0, r4
90005a78:	bd10      	pop	{r4, pc}
90005a7a:	bf00      	nop

90005a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a7c:	b530      	push	{r4, r5, lr}
90005a7e:	b08b      	sub	sp, #44	; 0x2c
90005a80:	4604      	mov	r4, r0
90005a82:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90005a86:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a88:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90005a8c:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a8e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
90005a92:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a94:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005a98:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005a9a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90005a9e:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005aa0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005aa4:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005aa6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005aaa:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005aac:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005ab0:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005ab2:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005ab6:	9508      	str	r5, [sp, #32]
90005ab8:	f013 fcac 	bl	90019414 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005abe:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005ac0:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
90005ac2:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005ac4:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
90005ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005ac8:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005aca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005acc:	62a3      	str	r3, [r4, #40]	; 0x28
90005ace:	4b02      	ldr	r3, [pc, #8]	; (90005ad8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005ad0:	6023      	str	r3, [r4, #0]
}
90005ad2:	b00b      	add	sp, #44	; 0x2c
90005ad4:	bd30      	pop	{r4, r5, pc}
90005ad6:	bf00      	nop
90005ad8:	9002accc 	.word	0x9002accc

90005adc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005adc:	4770      	bx	lr
90005ade:	bf00      	nop

90005ae0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005ae0:	4770      	bx	lr
90005ae2:	bf00      	nop

90005ae4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005ae4:	4770      	bx	lr
90005ae6:	bf00      	nop

90005ae8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005ae8:	4770      	bx	lr
90005aea:	bf00      	nop

90005aec <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005aec:	b530      	push	{r4, r5, lr}
90005aee:	b085      	sub	sp, #20
90005af0:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
90005af2:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
90005af4:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005af6:	466d      	mov	r5, sp
90005af8:	4601      	mov	r1, r0
90005afa:	8102      	strh	r2, [r0, #8]
90005afc:	343c      	adds	r4, #60	; 0x3c
90005afe:	4628      	mov	r0, r5
90005b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005b04:	4798      	blx	r3
90005b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005b0e:	b005      	add	sp, #20
90005b10:	bd30      	pop	{r4, r5, pc}
90005b12:	bf00      	nop

90005b14 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
90005b14:	b530      	push	{r4, r5, lr}
90005b16:	b085      	sub	sp, #20
90005b18:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005b1a:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005b1c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005b1e:	466d      	mov	r5, sp
90005b20:	4601      	mov	r1, r0
        rect.height = height;
90005b22:	8142      	strh	r2, [r0, #10]
90005b24:	343c      	adds	r4, #60	; 0x3c
90005b26:	4628      	mov	r0, r5
90005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005b2c:	4798      	blx	r3
90005b2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005b36:	b005      	add	sp, #20
90005b38:	bd30      	pop	{r4, r5, pc}
90005b3a:	bf00      	nop

90005b3c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
90005b3c:	2200      	movs	r2, #0
90005b3e:	6002      	str	r2, [r0, #0]
90005b40:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
90005b42:	4770      	bx	lr

90005b44 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90005b44:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
90005b48:	4770      	bx	lr
90005b4a:	bf00      	nop

90005b4c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
90005b4c:	2000      	movs	r0, #0
90005b4e:	4770      	bx	lr

90005b50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
90005b50:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005b54:	b112      	cbz	r2, 90005b5c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005b56:	6803      	ldr	r3, [r0, #0]
90005b58:	695b      	ldr	r3, [r3, #20]
90005b5a:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005b5c:	4770      	bx	lr
90005b5e:	bf00      	nop

90005b60 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005b60:	2200      	movs	r2, #0
90005b62:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005b66:	6082      	str	r2, [r0, #8]
90005b68:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005b6c:	4770      	bx	lr
90005b6e:	bf00      	nop

90005b70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005b70:	6c80      	ldr	r0, [r0, #72]	; 0x48
90005b72:	4770      	bx	lr

90005b74 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005b74:	4770      	bx	lr
90005b76:	bf00      	nop

90005b78 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005b78:	4770      	bx	lr
90005b7a:	bf00      	nop

90005b7c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005b7c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005b80:	b123      	cbz	r3, 90005b8c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
90005b82:	f100 0380 	add.w	r3, r0, #128	; 0x80
90005b86:	681b      	ldr	r3, [r3, #0]
        color = newColor;
90005b88:	6643      	str	r3, [r0, #100]	; 0x64
        T::handlePressedUpdated();
    }
90005b8a:	4770      	bx	lr
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90005b8c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
90005b90:	681b      	ldr	r3, [r3, #0]
90005b92:	6643      	str	r3, [r0, #100]	; 0x64
    }
90005b94:	4770      	bx	lr
90005b96:	bf00      	nop

90005b98 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005b98:	4770      	bx	lr
90005b9a:	bf00      	nop

90005b9c <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class TextButtonStyle : public T
90005b9c:	4770      	bx	lr
90005b9e:	bf00      	nop

90005ba0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005ba0:	4770      	bx	lr
90005ba2:	bf00      	nop

90005ba4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
90005ba4:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
90005ba6:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90005ba8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90005baa:	6844      	ldr	r4, [r0, #4]
90005bac:	f012 0f01 	tst.w	r2, #1
90005bb0:	eb04 0062 	add.w	r0, r4, r2, asr #1
90005bb4:	d103      	bne.n	90005bbe <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
90005bb6:	689b      	ldr	r3, [r3, #8]
    }
90005bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005bbc:	4718      	bx	r3
90005bbe:	ea4f 0c62 	mov.w	ip, r2, asr #1
90005bc2:	689b      	ldr	r3, [r3, #8]
90005bc4:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90005bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005bcc:	58d3      	ldr	r3, [r2, r3]
90005bce:	4718      	bx	r3

90005bd0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005bd0:	6843      	ldr	r3, [r0, #4]
90005bd2:	b13b      	cbz	r3, 90005be4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90005bd4:	6883      	ldr	r3, [r0, #8]
90005bd6:	b10b      	cbz	r3, 90005bdc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90005bd8:	2001      	movs	r0, #1
    }
90005bda:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005bdc:	68c0      	ldr	r0, [r0, #12]
90005bde:	f000 0001 	and.w	r0, r0, #1
90005be2:	4770      	bx	lr
90005be4:	4618      	mov	r0, r3
90005be6:	4770      	bx	lr

90005be8 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        alpha = newAlpha;
90005be8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
90005bec:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
90005bf0:	4770      	bx	lr
90005bf2:	bf00      	nop

90005bf4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005bf4:	b510      	push	{r4, lr}
90005bf6:	4604      	mov	r4, r0
90005bf8:	214c      	movs	r1, #76	; 0x4c
90005bfa:	f021 fd4c 	bl	90027696 <_ZdlPvj>
90005bfe:	4620      	mov	r0, r4
90005c00:	bd10      	pop	{r4, pc}
90005c02:	bf00      	nop

90005c04 <_ZN8touchgfx15TextButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class TextButtonStyle : public T
90005c04:	b510      	push	{r4, lr}
90005c06:	4604      	mov	r4, r0
90005c08:	2184      	movs	r1, #132	; 0x84
90005c0a:	f021 fd44 	bl	90027696 <_ZdlPvj>
90005c0e:	4620      	mov	r0, r4
90005c10:	bd10      	pop	{r4, pc}
90005c12:	bf00      	nop

90005c14 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90005c14:	b510      	push	{r4, lr}
90005c16:	4604      	mov	r4, r0
90005c18:	2110      	movs	r1, #16
90005c1a:	f021 fd3c 	bl	90027696 <_ZdlPvj>
90005c1e:	4620      	mov	r0, r4
90005c20:	bd10      	pop	{r4, pc}
90005c22:	bf00      	nop

90005c24 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005c24:	b510      	push	{r4, lr}
90005c26:	4604      	mov	r4, r0
}
90005c28:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
90005c2c:	f021 fd33 	bl	90027696 <_ZdlPvj>
90005c30:	4620      	mov	r0, r4
90005c32:	bd10      	pop	{r4, pc}

90005c34 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &temperatureButton)
90005c34:	f500 70a0 	add.w	r0, r0, #320	; 0x140
90005c38:	4288      	cmp	r0, r1
90005c3a:	d000      	beq.n	90005c3e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
90005c3c:	4770      	bx	lr
{
90005c3e:	b508      	push	{r3, lr}
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
90005c40:	f012 faac 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
        //temperatureButtonInteraction
        //When temperatureButton clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
90005c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
90005c48:	f7ff bed2 	b.w	900059f0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>

90005c4c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005c4c:	4b1b      	ldr	r3, [pc, #108]	; (90005cbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c4e:	6802      	ldr	r2, [r0, #0]
90005c50:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005c52:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c54:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005c56:	b323      	cbz	r3, 90005ca2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005c58:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
90005c5a:	4919      	ldr	r1, [pc, #100]	; (90005cc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005c5c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90005c5e:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005c60:	8809      	ldrh	r1, [r1, #0]
90005c62:	4291      	cmp	r1, r2
90005c64:	d923      	bls.n	90005cae <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005c66:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005c6a:	4b16      	ldr	r3, [pc, #88]	; (90005cc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005c6c:	681b      	ldr	r3, [r3, #0]
90005c6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005c72:	4a15      	ldr	r2, [pc, #84]	; (90005cc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005c74:	6803      	ldr	r3, [r0, #0]
90005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005c78:	4293      	cmp	r3, r2
90005c7a:	d107      	bne.n	90005c8c <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005c7c:	88c0      	ldrh	r0, [r0, #6]
90005c7e:	4b13      	ldr	r3, [pc, #76]	; (90005ccc <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c80:	1a31      	subs	r1, r6, r0
90005c82:	429d      	cmp	r5, r3
90005c84:	b209      	sxth	r1, r1
90005c86:	d107      	bne.n	90005c98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005c88:	80e1      	strh	r1, [r4, #6]
    }
90005c8a:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005c8c:	4798      	blx	r3
90005c8e:	4b0f      	ldr	r3, [pc, #60]	; (90005ccc <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005c90:	1a31      	subs	r1, r6, r0
90005c92:	429d      	cmp	r5, r3
90005c94:	b209      	sxth	r1, r1
90005c96:	d0f7      	beq.n	90005c88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005c98:	4620      	mov	r0, r4
90005c9a:	462b      	mov	r3, r5
    }
90005c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005ca0:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005ca2:	4b0b      	ldr	r3, [pc, #44]	; (90005cd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005ca4:	216c      	movs	r1, #108	; 0x6c
90005ca6:	4a0b      	ldr	r2, [pc, #44]	; (90005cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005ca8:	480b      	ldr	r0, [pc, #44]	; (90005cd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005caa:	f021 fd23 	bl	900276f4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005cae:	4b0b      	ldr	r3, [pc, #44]	; (90005cdc <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005cb0:	216d      	movs	r1, #109	; 0x6d
90005cb2:	4a08      	ldr	r2, [pc, #32]	; (90005cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005cb4:	4808      	ldr	r0, [pc, #32]	; (90005cd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005cb6:	f021 fd1d 	bl	900276f4 <__assert_func>
90005cba:	bf00      	nop
90005cbc:	24028244 	.word	0x24028244
90005cc0:	24028248 	.word	0x24028248
90005cc4:	2402824c 	.word	0x2402824c
90005cc8:	90004f5d 	.word	0x90004f5d
90005ccc:	90002355 	.word	0x90002355
90005cd0:	9002ad24 	.word	0x9002ad24
90005cd4:	9002ad68 	.word	0x9002ad68
90005cd8:	9002ada4 	.word	0x9002ada4
90005cdc:	9002adec 	.word	0x9002adec

90005ce0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
     *
     * @see setAction
     */
    virtual void executeAction()
    {
        if (action && action->isValid())
90005ce0:	6b03      	ldr	r3, [r0, #48]	; 0x30
90005ce2:	b30b      	cbz	r3, 90005d28 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x48>
90005ce4:	681a      	ldr	r2, [r3, #0]
    virtual void executeAction()
90005ce6:	b570      	push	{r4, r5, r6, lr}
        if (action && action->isValid())
90005ce8:	68d1      	ldr	r1, [r2, #12]
90005cea:	4604      	mov	r4, r0
90005cec:	481a      	ldr	r0, [pc, #104]	; (90005d58 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x78>)
90005cee:	4281      	cmp	r1, r0
90005cf0:	d11b      	bne.n	90005d2a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x4a>
        return (pobject != 0) && (pmemfun != 0);
90005cf2:	6858      	ldr	r0, [r3, #4]
90005cf4:	b180      	cbz	r0, 90005d18 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005cf6:	6899      	ldr	r1, [r3, #8]
90005cf8:	b1f1      	cbz	r1, 90005d38 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x58>
        {
            action->execute(*this);
90005cfa:	6892      	ldr	r2, [r2, #8]
90005cfc:	4917      	ldr	r1, [pc, #92]	; (90005d5c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005cfe:	428a      	cmp	r2, r1
90005d00:	d124      	bne.n	90005d4c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005d02:	68da      	ldr	r2, [r3, #12]
90005d04:	6858      	ldr	r0, [r3, #4]
90005d06:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005d0a:	07d2      	lsls	r2, r2, #31
90005d0c:	d405      	bmi.n	90005d1a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3a>
90005d0e:	4621      	mov	r1, r4
90005d10:	689b      	ldr	r3, [r3, #8]
        }
    }
90005d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005d16:	4718      	bx	r3
90005d18:	bd70      	pop	{r4, r5, r6, pc}
90005d1a:	6899      	ldr	r1, [r3, #8]
90005d1c:	6803      	ldr	r3, [r0, #0]
90005d1e:	585b      	ldr	r3, [r3, r1]
90005d20:	4621      	mov	r1, r4
90005d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005d26:	4718      	bx	r3
90005d28:	4770      	bx	lr
        if (action && action->isValid())
90005d2a:	4618      	mov	r0, r3
90005d2c:	4788      	blx	r1
90005d2e:	2800      	cmp	r0, #0
90005d30:	d0f2      	beq.n	90005d18 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
            action->execute(*this);
90005d32:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005d34:	681a      	ldr	r2, [r3, #0]
90005d36:	e7e0      	b.n	90005cfa <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        return (pobject != 0) && (pmemfun != 0);
90005d38:	68dd      	ldr	r5, [r3, #12]
90005d3a:	07ee      	lsls	r6, r5, #31
90005d3c:	d5ec      	bpl.n	90005d18 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005d3e:	6892      	ldr	r2, [r2, #8]
90005d40:	4e06      	ldr	r6, [pc, #24]	; (90005d5c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005d42:	42b2      	cmp	r2, r6
90005d44:	d102      	bne.n	90005d4c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
90005d46:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005d4a:	e7e7      	b.n	90005d1c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3c>
90005d4c:	4621      	mov	r1, r4
90005d4e:	4618      	mov	r0, r3
    }
90005d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            action->execute(*this);
90005d54:	4710      	bx	r2
90005d56:	bf00      	nop
90005d58:	90005bd1 	.word	0x90005bd1
90005d5c:	90005ba5 	.word	0x90005ba5

90005d60 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005d60:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005d66:	4f25      	ldr	r7, [pc, #148]	; (90005dfc <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005d68:	4605      	mov	r5, r0
        setX(x);
90005d6a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005d6c:	4690      	mov	r8, r2
90005d6e:	42be      	cmp	r6, r7
90005d70:	d125      	bne.n	90005dbe <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005d72:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005d74:	80a9      	strh	r1, [r5, #4]
90005d76:	4922      	ldr	r1, [pc, #136]	; (90005e00 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005d78:	428c      	cmp	r4, r1
90005d7a:	d126      	bne.n	90005dca <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005d7c:	4921      	ldr	r1, [pc, #132]	; (90005e04 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005d7e:	fa1f f888 	uxth.w	r8, r8
90005d82:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005d84:	680b      	ldr	r3, [r1, #0]
90005d86:	2b00      	cmp	r3, #0
90005d88:	d032      	beq.n	90005df0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
90005d8a:	491f      	ldr	r1, [pc, #124]	; (90005e08 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005d8c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005d8e:	8809      	ldrh	r1, [r1, #0]
90005d90:	4291      	cmp	r1, r2
90005d92:	d927      	bls.n	90005de4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005d94:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005d98:	4b1c      	ldr	r3, [pc, #112]	; (90005e0c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
90005d9a:	681b      	ldr	r3, [r3, #0]
90005d9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005da0:	4a1b      	ldr	r2, [pc, #108]	; (90005e10 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005da2:	6803      	ldr	r3, [r0, #0]
90005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005da6:	4293      	cmp	r3, r2
90005da8:	d11a      	bne.n	90005de0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
90005daa:	88c0      	ldrh	r0, [r0, #6]
90005dac:	4b19      	ldr	r3, [pc, #100]	; (90005e14 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
90005dae:	eba8 0200 	sub.w	r2, r8, r0
90005db2:	429e      	cmp	r6, r3
90005db4:	b211      	sxth	r1, r2
90005db6:	d10e      	bne.n	90005dd6 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
90005db8:	80e9      	strh	r1, [r5, #6]
    }
90005dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
90005dbe:	47b0      	blx	r6
        setBaselineY(baselineY);
90005dc0:	682b      	ldr	r3, [r5, #0]
90005dc2:	490f      	ldr	r1, [pc, #60]	; (90005e00 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005dc4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005dc6:	428c      	cmp	r4, r1
90005dc8:	d0d8      	beq.n	90005d7c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
90005dca:	4641      	mov	r1, r8
90005dcc:	4628      	mov	r0, r5
90005dce:	4623      	mov	r3, r4
    }
90005dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005dd4:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005dd6:	4628      	mov	r0, r5
90005dd8:	4633      	mov	r3, r6
    }
90005dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005dde:	4718      	bx	r3
90005de0:	4798      	blx	r3
90005de2:	e7e3      	b.n	90005dac <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005de4:	4b0c      	ldr	r3, [pc, #48]	; (90005e18 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005de6:	216d      	movs	r1, #109	; 0x6d
90005de8:	4a0c      	ldr	r2, [pc, #48]	; (90005e1c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005dea:	480d      	ldr	r0, [pc, #52]	; (90005e20 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005dec:	f021 fc82 	bl	900276f4 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005df0:	4b0c      	ldr	r3, [pc, #48]	; (90005e24 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005df2:	216c      	movs	r1, #108	; 0x6c
90005df4:	4a09      	ldr	r2, [pc, #36]	; (90005e1c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005df6:	480a      	ldr	r0, [pc, #40]	; (90005e20 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005df8:	f021 fc7c 	bl	900276f4 <__assert_func>
90005dfc:	90002351 	.word	0x90002351
90005e00:	90005c4d 	.word	0x90005c4d
90005e04:	24028244 	.word	0x24028244
90005e08:	24028248 	.word	0x24028248
90005e0c:	2402824c 	.word	0x2402824c
90005e10:	90004f5d 	.word	0x90004f5d
90005e14:	90002355 	.word	0x90002355
90005e18:	9002adec 	.word	0x9002adec
90005e1c:	9002ad68 	.word	0x9002ad68
90005e20:	9002ada4 	.word	0x9002ada4
90005e24:	9002ad24 	.word	0x9002ad24

90005e28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
90005e28:	790b      	ldrb	r3, [r1, #4]
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005e2a:	1e1a      	subs	r2, r3, #0
    virtual void handleClickEvent(const ClickEvent& event)
90005e2c:	b570      	push	{r4, r5, r6, lr}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005e2e:	bf18      	it	ne
90005e30:	2201      	movne	r2, #1
        return pressed;
90005e32:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
90005e36:	460d      	mov	r5, r1
90005e38:	4604      	mov	r4, r0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005e3a:	42b2      	cmp	r2, r6
90005e3c:	d004      	beq.n	90005e48 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x20>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
90005e3e:	b116      	cbz	r6, 90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e40:	792b      	ldrb	r3, [r5, #4]
90005e42:	2b01      	cmp	r3, #1
90005e44:	d00e      	beq.n	90005e64 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
90005e46:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
90005e48:	fab3 f383 	clz	r3, r3
90005e4c:	095b      	lsrs	r3, r3, #5
90005e4e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
        handlePressedUpdated();
90005e52:	6803      	ldr	r3, [r0, #0]
90005e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005e58:	4798      	blx	r3
            invalidate();
90005e5a:	6823      	ldr	r3, [r4, #0]
90005e5c:	4620      	mov	r0, r4
90005e5e:	695b      	ldr	r3, [r3, #20]
90005e60:	4798      	blx	r3
90005e62:	e7ec      	b.n	90005e3e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
            executeAction();
90005e64:	6823      	ldr	r3, [r4, #0]
90005e66:	4a20      	ldr	r2, [pc, #128]	; (90005ee8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc0>)
90005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005e6c:	4293      	cmp	r3, r2
90005e6e:	d127      	bne.n	90005ec0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x98>
        if (action && action->isValid())
90005e70:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005e72:	2b00      	cmp	r3, #0
90005e74:	d0e7      	beq.n	90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e76:	6819      	ldr	r1, [r3, #0]
90005e78:	481c      	ldr	r0, [pc, #112]	; (90005eec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc4>)
90005e7a:	68ca      	ldr	r2, [r1, #12]
90005e7c:	4282      	cmp	r2, r0
90005e7e:	d123      	bne.n	90005ec8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        return (pobject != 0) && (pmemfun != 0);
90005e80:	685a      	ldr	r2, [r3, #4]
90005e82:	2a00      	cmp	r2, #0
90005e84:	d0df      	beq.n	90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005e86:	689d      	ldr	r5, [r3, #8]
90005e88:	b175      	cbz	r5, 90005ea8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x80>
            action->execute(*this);
90005e8a:	688e      	ldr	r6, [r1, #8]
90005e8c:	4a18      	ldr	r2, [pc, #96]	; (90005ef0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005e8e:	4296      	cmp	r6, r2
90005e90:	d123      	bne.n	90005eda <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005e92:	68d9      	ldr	r1, [r3, #12]
90005e94:	685a      	ldr	r2, [r3, #4]
90005e96:	eb02 0061 	add.w	r0, r2, r1, asr #1
90005e9a:	07ca      	lsls	r2, r1, #31
90005e9c:	d41b      	bmi.n	90005ed6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xae>
90005e9e:	689b      	ldr	r3, [r3, #8]
90005ea0:	4621      	mov	r1, r4
    }
90005ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005ea6:	4718      	bx	r3
        return (pobject != 0) && (pmemfun != 0);
90005ea8:	68d8      	ldr	r0, [r3, #12]
90005eaa:	07c6      	lsls	r6, r0, #31
90005eac:	d5cb      	bpl.n	90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005eae:	688e      	ldr	r6, [r1, #8]
90005eb0:	490f      	ldr	r1, [pc, #60]	; (90005ef0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005eb2:	428e      	cmp	r6, r1
90005eb4:	d111      	bne.n	90005eda <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005eb6:	eb02 0060 	add.w	r0, r2, r0, asr #1
90005eba:	6803      	ldr	r3, [r0, #0]
90005ebc:	595b      	ldr	r3, [r3, r5]
90005ebe:	e7ef      	b.n	90005ea0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x78>
            executeAction();
90005ec0:	4620      	mov	r0, r4
    }
90005ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
90005ec6:	4718      	bx	r3
        if (action && action->isValid())
90005ec8:	4618      	mov	r0, r3
90005eca:	4790      	blx	r2
90005ecc:	2800      	cmp	r0, #0
90005ece:	d0ba      	beq.n	90005e46 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            action->execute(*this);
90005ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005ed2:	6819      	ldr	r1, [r3, #0]
90005ed4:	e7d9      	b.n	90005e8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x62>
90005ed6:	689d      	ldr	r5, [r3, #8]
90005ed8:	e7ef      	b.n	90005eba <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x92>
90005eda:	4621      	mov	r1, r4
90005edc:	4618      	mov	r0, r3
90005ede:	4633      	mov	r3, r6
    }
90005ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005ee4:	4718      	bx	r3
90005ee6:	bf00      	nop
90005ee8:	90005ce1 	.word	0x90005ce1
90005eec:	90005bd1 	.word	0x90005bd1
90005ef0:	90005ba5 	.word	0x90005ba5

90005ef4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005ef8:	b087      	sub	sp, #28
90005efa:	4604      	mov	r4, r0
        : presenter(0)
90005efc:	f013 fd50 	bl	900199a0 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90005f00:	4adf      	ldr	r2, [pc, #892]	; (90006280 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005f02:	4be0      	ldr	r3, [pc, #896]	; (90006284 <_ZN15Screen1ViewBaseC1Ev+0x390>)
90005f04:	2600      	movs	r6, #0
          touchable(false),
90005f06:	f44f 7780 	mov.w	r7, #256	; 0x100
90005f0a:	f104 086c 	add.w	r8, r4, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005f0e:	f64f 75ff 	movw	r5, #65535	; 0xffff
90005f12:	6022      	str	r2, [r4, #0]
90005f14:	6423      	str	r3, [r4, #64]	; 0x40
90005f16:	22ff      	movs	r2, #255	; 0xff
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
90005f18:	4bdb      	ldr	r3, [pc, #876]	; (90006288 <_ZN15Screen1ViewBaseC1Ev+0x394>)
    {
        Image::setBitmap(bmp);
90005f1a:	4640      	mov	r0, r8
90005f1c:	a904      	add	r1, sp, #16
90005f1e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
90005f22:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
        : animationDoneAction(0),
          startId(BITMAP_INVALID),
90005f26:	f04f 3bff 	mov.w	fp, #4294967295
90005f2a:	f8a4 7090 	strh.w	r7, [r4, #144]	; 0x90
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
90005f2e:	f04f 0901 	mov.w	r9, #1
        : Widget(), bitmap(bmp), alpha(255)
90005f32:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
90005f36:	f504 7aa0 	add.w	sl, r4, #320	; 0x140
90005f3a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
90005f3e:	66e3      	str	r3, [r4, #108]	; 0x6c
90005f40:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005f42:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
90005f44:	6626      	str	r6, [r4, #96]	; 0x60
        : color(col)
90005f46:	66a6      	str	r6, [r4, #104]	; 0x68
90005f48:	f8ad 5010 	strh.w	r5, [sp, #16]
        : x(0), y(0), width(0), height(0)
90005f4c:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
90005f50:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
90005f54:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90005f58:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
90005f5c:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
          nextSibling(0),
90005f60:	e9c4 6620 	strd	r6, r6, [r4, #128]	; 0x80
          cachedAbsX(0),
90005f64:	e9c4 6622 	strd	r6, r6, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90005f68:	f00f fd9d 	bl	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : typedTextId(id)
90005f6c:	4bc7      	ldr	r3, [pc, #796]	; (9000628c <_ZN15Screen1ViewBaseC1Ev+0x398>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005f6e:	22ff      	movs	r2, #255	; 0xff
        : TextAreaWithWildcardBase(), wc1(0)
90005f70:	49c7      	ldr	r1, [pc, #796]	; (90006290 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
90005f72:	48c8      	ldr	r0, [pc, #800]	; (90006294 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
90005f74:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
90005f78:	f8c4 20de 	str.w	r2, [r4, #222]	; 0xde
          touchable(false),
90005f7c:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
90005f80:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
90005f84:	66e0      	str	r0, [r4, #108]	; 0x6c
        T::add(text);
90005f86:	4650      	mov	r0, sl
90005f88:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
90005f8c:	f8a4 b0d4 	strh.w	fp, [r4, #212]	; 0xd4
        : color(col)
90005f90:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
90005f94:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
          updateTicksInterval(updateInterval),
90005f98:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
          startId(BITMAP_INVALID),
90005f9c:	e9c4 6b26 	strd	r6, fp, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
90005fa0:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
90005fa4:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
90005fa8:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
90005fac:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005fb0:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
90005fb4:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
        : x(0), y(0), width(0), height(0)
90005fb8:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
90005fbc:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
90005fc0:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
90005fc4:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
90005fc8:	f8a4 7118 	strh.w	r7, [r4, #280]	; 0x118
90005fcc:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
        : pressed(false), alpha(255), action(0)
90005fd0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
90005fd4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
90005fd8:	f8a4 116c 	strh.w	r1, [r4, #364]	; 0x16c
        touchable = touch;
90005fdc:	f240 1101 	movw	r1, #257	; 0x101
90005fe0:	f8c4 212a 	str.w	r2, [r4, #298]	; 0x12a
90005fe4:	f8a4 1164 	strh.w	r1, [r4, #356]	; 0x164
        : T()
90005fe8:	49ab      	ldr	r1, [pc, #684]	; (90006298 <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
          touchable(false),
90005fea:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005fee:	1d27      	adds	r7, r4, #4
90005ff0:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
90005ff4:	49a9      	ldr	r1, [pc, #676]	; (9000629c <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
90005ff6:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
        : color(col)
90005ffa:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90005ffe:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
          firstChild(0)
90006002:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
90006006:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000600a:	e9c4 6b4c 	strd	r6, fp, [r4, #304]	; 0x130
9000600e:	e9c4 664e 	strd	r6, r6, [r4, #312]	; 0x138
        : x(0), y(0), width(0), height(0)
90006012:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
90006016:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
9000601a:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
9000601e:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
90006022:	e9c4 665e 	strd	r6, r6, [r4, #376]	; 0x178
90006026:	e9c4 6660 	strd	r6, r6, [r4, #384]	; 0x180
          nextSibling(0),
9000602a:	e9c4 6662 	strd	r6, r6, [r4, #392]	; 0x188
          cachedAbsX(0),
9000602e:	e9c4 6664 	strd	r6, r6, [r4, #400]	; 0x190
90006032:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
90006036:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
        T::add(text);
9000603a:	f504 75ba 	add.w	r5, r4, #372	; 0x174
9000603e:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
90006042:	4629      	mov	r1, r5
90006044:	f8c4 21aa 	str.w	r2, [r4, #426]	; 0x1aa
        : color(col)
90006048:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
9000604c:	f8a4 61a8 	strh.w	r6, [r4, #424]	; 0x1a8
        : color(0)
90006050:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006054:	e9c4 6b6c 	strd	r6, fp, [r4, #432]	; 0x1b0
        : color(0)
90006058:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
9000605c:	f00c fd76 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90006060:	4a8f      	ldr	r2, [pc, #572]	; (900062a0 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
90006062:	f104 0140 	add.w	r1, r4, #64	; 0x40
90006066:	4638      	mov	r0, r7
90006068:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
9000606c:	4a8d      	ldr	r2, [pc, #564]	; (900062a4 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
9000606e:	f8c4 41d8 	str.w	r4, [r4, #472]	; 0x1d8
90006072:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
        rect.x = x;
90006076:	4a8c      	ldr	r2, [pc, #560]	; (900062a8 <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90006078:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
9000607c:	64a2      	str	r2, [r4, #72]	; 0x48
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
9000607e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006082:	6466      	str	r6, [r4, #68]	; 0x44
90006084:	66a2      	str	r2, [r4, #104]	; 0x68
90006086:	f00c fd61 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
9000608a:	4a88      	ldr	r2, [pc, #544]	; (900062ac <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
    animatedImage1.setBitmaps(BITMAP_FRAME_00_DELAY_0_05S_ID, BITMAP_FRAME_07_DELAY_0_05S_ID);
9000608c:	4640      	mov	r0, r8
9000608e:	4631      	mov	r1, r6
90006090:	6722      	str	r2, [r4, #112]	; 0x70
90006092:	2207      	movs	r2, #7
90006094:	f00f f89c 	bl	900151d0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90006098:	4640      	mov	r0, r8
9000609a:	2106      	movs	r1, #6
9000609c:	f00f f8ab 	bl	900151f6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
900060a0:	464b      	mov	r3, r9
900060a2:	464a      	mov	r2, r9
900060a4:	4640      	mov	r0, r8
900060a6:	4631      	mov	r1, r6
900060a8:	f00e ffea 	bl	90015080 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
900060ac:	4641      	mov	r1, r8
900060ae:	4638      	mov	r0, r7
    humidityTextArea.setXY(20, 48);
900060b0:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
900060b4:	f00c fd4a 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900060b8:	4a7d      	ldr	r2, [pc, #500]	; (900062b0 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        setX(x);
900060ba:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
900060be:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
900060c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
900060c6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
900060ca:	4a7a      	ldr	r2, [pc, #488]	; (900062b4 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        linespace = space;
900060cc:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
900060d0:	4293      	cmp	r3, r2
900060d2:	f040 810c 	bne.w	900062ee <_ZN15Screen1ViewBaseC1Ev+0x3fa>
        boundingArea = calculateBoundingArea();
900060d6:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
900060da:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900060de:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 900062d4 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
900060e2:	f504 76e2 	add.w	r6, r4, #452	; 0x1c4
900060e6:	f8db 3000 	ldr.w	r3, [fp]
900060ea:	2b00      	cmp	r3, #0
900060ec:	f000 8122 	beq.w	90006334 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900060f0:	4b71      	ldr	r3, [pc, #452]	; (900062b8 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
900060f2:	881b      	ldrh	r3, [r3, #0]
900060f4:	2b08      	cmp	r3, #8
900060f6:	f240 8123 	bls.w	90006340 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
900060fa:	4b70      	ldr	r3, [pc, #448]	; (900062bc <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
900060fc:	2108      	movs	r1, #8
    temperatureTextArea.setXY(20, 15);
900060fe:	f104 09f4 	add.w	r9, r4, #244	; 0xf4
90006102:	6818      	ldr	r0, [r3, #0]
90006104:	f002 f8e6 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YZZO).getText());
90006108:	4a6d      	ldr	r2, [pc, #436]	; (900062c0 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
9000610a:	4603      	mov	r3, r0
9000610c:	2104      	movs	r1, #4
9000610e:	4630      	mov	r0, r6
90006110:	f015 f904 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    humidityTextArea.resizeToCurrentText();
90006114:	4640      	mov	r0, r8
        wc1 = value;
90006116:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
9000611a:	f00f fbdd 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000611e:	4b5b      	ldr	r3, [pc, #364]	; (9000628c <_ZN15Screen1ViewBaseC1Ev+0x398>)
    humidityTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y9RM));
90006120:	a904      	add	r1, sp, #16
90006122:	4640      	mov	r0, r8
90006124:	9304      	str	r3, [sp, #16]
90006126:	2309      	movs	r3, #9
90006128:	f8ad 3014 	strh.w	r3, [sp, #20]
9000612c:	f00f fbf4 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006130:	4641      	mov	r1, r8
90006132:	4638      	mov	r0, r7
90006134:	f00c fd0a 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
90006138:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
9000613c:	485d      	ldr	r0, [pc, #372]	; (900062b4 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        color = newColor;
9000613e:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
90006142:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
90006146:	4b5f      	ldr	r3, [pc, #380]	; (900062c4 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
90006148:	4282      	cmp	r2, r0
        color = newColor;
9000614a:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
9000614e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
90006152:	f04f 0300 	mov.w	r3, #0
90006156:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
9000615a:	f040 80d3 	bne.w	90006304 <_ZN15Screen1ViewBaseC1Ev+0x410>
9000615e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
90006162:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006166:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
9000616a:	f504 78e6 	add.w	r8, r4, #460	; 0x1cc
9000616e:	2b00      	cmp	r3, #0
90006170:	f000 80e0 	beq.w	90006334 <_ZN15Screen1ViewBaseC1Ev+0x440>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006174:	4b50      	ldr	r3, [pc, #320]	; (900062b8 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
90006176:	881b      	ldrh	r3, [r3, #0]
90006178:	2b0a      	cmp	r3, #10
9000617a:	f240 80e1 	bls.w	90006340 <_ZN15Screen1ViewBaseC1Ev+0x44c>
        return texts->getText(typedTextId);
9000617e:	4b4f      	ldr	r3, [pc, #316]	; (900062bc <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90006180:	210a      	movs	r1, #10
        : typedTextId(id)
90006182:	4e42      	ldr	r6, [pc, #264]	; (9000628c <_ZN15Screen1ViewBaseC1Ev+0x398>)
        return texts->getText(typedTextId);
90006184:	6818      	ldr	r0, [r3, #0]
90006186:	f002 f8a5 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
9000618a:	4a4d      	ldr	r2, [pc, #308]	; (900062c0 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
9000618c:	4603      	mov	r3, r0
9000618e:	2104      	movs	r1, #4
90006190:	4640      	mov	r0, r8
90006192:	f015 f8c3 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
90006196:	4648      	mov	r0, r9
90006198:	f8c4 813c 	str.w	r8, [r4, #316]	; 0x13c
        boundingArea = calculateBoundingArea();
9000619c:	f105 083c 	add.w	r8, r5, #60	; 0x3c
900061a0:	f00f fb9a 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900061a4:	230b      	movs	r3, #11
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
900061a6:	4648      	mov	r0, r9
900061a8:	a904      	add	r1, sp, #16
900061aa:	f8ad 3014 	strh.w	r3, [sp, #20]
900061ae:	9604      	str	r6, [sp, #16]
900061b0:	f00f fbb2 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900061b4:	4649      	mov	r1, r9
900061b6:	4638      	mov	r0, r7
900061b8:	f00c fcc8 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900061bc:	2301      	movs	r3, #1
        text.setTypedText(t);
900061be:	a904      	add	r1, sp, #16
900061c0:	4628      	mov	r0, r5
900061c2:	9604      	str	r6, [sp, #16]
900061c4:	466e      	mov	r6, sp
900061c6:	f8ad 3014 	strh.w	r3, [sp, #20]
900061ca:	f00f fba5 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
900061ce:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
900061d2:	4629      	mov	r1, r5
900061d4:	4630      	mov	r0, r6
        return rect.height;
900061d6:	f9b4 914a 	ldrsh.w	r9, [r4, #330]	; 0x14a
        rect.width = width;
900061da:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
900061de:	f00f f8f3 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
900061e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900061e6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
900061ea:	4629      	mov	r1, r5
900061ec:	4630      	mov	r0, r6
        rect.height = height;
900061ee:	f8a4 917e 	strh.w	r9, [r4, #382]	; 0x17e
900061f2:	f00f f8e9 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setX(x);
900061f6:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
900061fa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 900062d8 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
        rect.x = x;
900061fe:	f04f 0e00 	mov.w	lr, #0
        setWidth(width);
90006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006204:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90006208:	4563      	cmp	r3, ip
9000620a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        rect.x = x;
9000620e:	f8c4 e178 	str.w	lr, [r4, #376]	; 0x178
        setWidth(width);
90006212:	f040 8082 	bne.w	9000631a <_ZN15Screen1ViewBaseC1Ev+0x426>
        rect.width = width;
90006216:	23a6      	movs	r3, #166	; 0xa6
        boundingArea = calculateBoundingArea();
90006218:	4629      	mov	r1, r5
9000621a:	4630      	mov	r0, r6
9000621c:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
90006220:	f00f f8d2 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        setHeight(height);
90006224:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
90006228:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
9000622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000622e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
90006232:	4a25      	ldr	r2, [pc, #148]	; (900062c8 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
90006234:	4293      	cmp	r3, r2
90006236:	d179      	bne.n	9000632c <_ZN15Screen1ViewBaseC1Ev+0x438>
        rect.height = height;
90006238:	231d      	movs	r3, #29
        boundingArea = calculateBoundingArea();
9000623a:	4629      	mov	r1, r5
9000623c:	4630      	mov	r0, r6
9000623e:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
90006242:	f00f f8c1 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006246:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
9000624a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
9000624e:	f894 116c 	ldrb.w	r1, [r4, #364]	; 0x16c
        colorReleased = newColorReleased;
90006252:	f04f 32ff 	mov.w	r2, #4294967295
        colorPressed = newColorPressed;
90006256:	4b1d      	ldr	r3, [pc, #116]	; (900062cc <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
90006258:	4638      	mov	r0, r7
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
9000625a:	2900      	cmp	r1, #0
        colorReleased = newColorReleased;
9000625c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
        colorPressed = newColorPressed;
90006260:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
90006264:	4651      	mov	r1, sl
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90006266:	bf08      	it	eq
90006268:	4613      	moveq	r3, r2
    temperatureButton.setAction(flexButtonCallback);
9000626a:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
        color = newColor;
9000626e:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
        rect.x = x;
90006272:	4b17      	ldr	r3, [pc, #92]	; (900062d0 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
        action = &callback;
90006274:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
90006278:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
9000627c:	e02e      	b.n	900062dc <_ZN15Screen1ViewBaseC1Ev+0x3e8>
9000627e:	bf00      	nop
90006280:	9002afb4 	.word	0x9002afb4
90006284:	9002c338 	.word	0x9002c338
90006288:	9002c3a0 	.word	0x9002c3a0
9000628c:	9002a698 	.word	0x9002a698
90006290:	9002ae70 	.word	0x9002ae70
90006294:	9002c22c 	.word	0x9002c22c
90006298:	9002af00 	.word	0x9002af00
9000629c:	9002c2a8 	.word	0x9002c2a8
900062a0:	9002af9c 	.word	0x9002af9c
900062a4:	90005c35 	.word	0x90005c35
900062a8:	011001e0 	.word	0x011001e0
900062ac:	ffb6ffa8 	.word	0xffb6ffa8
900062b0:	00300014 	.word	0x00300014
900062b4:	90005b61 	.word	0x90005b61
900062b8:	24028248 	.word	0x24028248
900062bc:	24028250 	.word	0x24028250
900062c0:	9002ae64 	.word	0x9002ae64
900062c4:	000f0014 	.word	0x000f0014
900062c8:	90005b15 	.word	0x90005b15
900062cc:	ff9e9d9d 	.word	0xff9e9d9d
900062d0:	00e50014 	.word	0x00e50014
900062d4:	24028244 	.word	0x24028244
900062d8:	90005aed 	.word	0x90005aed
900062dc:	4b1b      	ldr	r3, [pc, #108]	; (9000634c <_ZN15Screen1ViewBaseC1Ev+0x458>)
900062de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900062e2:	f00c fc33 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900062e6:	4620      	mov	r0, r4
900062e8:	b007      	add	sp, #28
900062ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        boundingArea = calculateBoundingArea();
900062ee:	46e9      	mov	r9, sp
900062f0:	4641      	mov	r1, r8
900062f2:	4648      	mov	r0, r9
900062f4:	4798      	blx	r3
900062f6:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
900062fa:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
900062fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90006302:	e6ec      	b.n	900060de <_ZN15Screen1ViewBaseC1Ev+0x1ea>
90006304:	46e8      	mov	r8, sp
90006306:	4649      	mov	r1, r9
90006308:	4640      	mov	r0, r8
9000630a:	4790      	blx	r2
9000630c:	f504 7398 	add.w	r3, r4, #304	; 0x130
90006310:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
90006314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90006318:	e725      	b.n	90006166 <_ZN15Screen1ViewBaseC1Ev+0x272>
        setWidth(width);
9000631a:	21a6      	movs	r1, #166	; 0xa6
9000631c:	4628      	mov	r0, r5
9000631e:	4798      	blx	r3
        setHeight(height);
90006320:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
90006324:	4a0a      	ldr	r2, [pc, #40]	; (90006350 <_ZN15Screen1ViewBaseC1Ev+0x45c>)
90006326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006328:	4293      	cmp	r3, r2
9000632a:	d085      	beq.n	90006238 <_ZN15Screen1ViewBaseC1Ev+0x344>
9000632c:	4628      	mov	r0, r5
9000632e:	211d      	movs	r1, #29
90006330:	4798      	blx	r3
90006332:	e78c      	b.n	9000624e <_ZN15Screen1ViewBaseC1Ev+0x35a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006334:	4b07      	ldr	r3, [pc, #28]	; (90006354 <_ZN15Screen1ViewBaseC1Ev+0x460>)
90006336:	2160      	movs	r1, #96	; 0x60
90006338:	4a07      	ldr	r2, [pc, #28]	; (90006358 <_ZN15Screen1ViewBaseC1Ev+0x464>)
9000633a:	4808      	ldr	r0, [pc, #32]	; (9000635c <_ZN15Screen1ViewBaseC1Ev+0x468>)
9000633c:	f021 f9da 	bl	900276f4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006340:	4b07      	ldr	r3, [pc, #28]	; (90006360 <_ZN15Screen1ViewBaseC1Ev+0x46c>)
90006342:	2161      	movs	r1, #97	; 0x61
90006344:	4a04      	ldr	r2, [pc, #16]	; (90006358 <_ZN15Screen1ViewBaseC1Ev+0x464>)
90006346:	4805      	ldr	r0, [pc, #20]	; (9000635c <_ZN15Screen1ViewBaseC1Ev+0x468>)
90006348:	f021 f9d4 	bl	900276f4 <__assert_func>
9000634c:	001d00a6 	.word	0x001d00a6
90006350:	90005b15 	.word	0x90005b15
90006354:	9002ad24 	.word	0x9002ad24
90006358:	9002ae2c 	.word	0x9002ae2c
9000635c:	9002ada4 	.word	0x9002ada4
90006360:	9002adec 	.word	0x9002adec

90006364 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90006364:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
90006368:	4770      	bx	lr
9000636a:	bf00      	nop

9000636c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
9000636c:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
9000636e:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
90006370:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90006372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90006376:	fb04 f202 	mul.w	r2, r4, r2
9000637a:	fb04 f101 	mul.w	r1, r4, r1
    }
9000637e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90006382:	4718      	bx	r3

90006384 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
90006384:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006388:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000638a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
9000638e:	b410      	push	{r4}
        const float fs = f * (float)scale;
90006390:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006394:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (fs >= 0)
90006398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
9000639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900063a0:	da2e      	bge.n	90006400 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7c>
        {
            return (int)(fs + 0.5f);
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063a2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
900063a6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
900063aa:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063ae:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900063b2:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
900063b6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063ba:	3b01      	subs	r3, #1
900063bc:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
900063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063c4:	ee30 0a26 	vadd.f32	s0, s0, s13
900063c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
900063cc:	ee10 1a10 	vmov	r1, s0
900063d0:	4419      	add	r1, r3
        if (fs >= 0)
900063d2:	da24      	bge.n	9000641e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900063d4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900063d8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900063dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900063e0:	ee17 3a90 	vmov	r3, s15
900063e4:	3b01      	subs	r3, #1
900063e6:	ee70 0ae6 	vsub.f32	s1, s1, s13
900063ea:	ee70 0a87 	vadd.f32	s1, s1, s14
900063ee:	eefd 0ae0 	vcvt.s32.f32	s1, s1
900063f2:	ee10 2a90 	vmov	r2, s1
900063f6:	441a      	add	r2, r3
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063f8:	4623      	mov	r3, r4
    }
900063fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
900063fe:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
90006404:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
90006408:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
9000640c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
90006410:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
90006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
90006418:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
9000641c:	dbda      	blt.n	900063d4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x50>
            return (int)(fs + 0.5f);
9000641e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006422:	4623      	mov	r3, r4
    }
90006424:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
90006428:	ee70 0aa7 	vadd.f32	s1, s1, s15
9000642c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
90006430:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
90006434:	4718      	bx	r3
90006436:	bf00      	nop

90006438 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
90006438:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000643a:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
9000643c:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000643e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90006442:	fb04 f202 	mul.w	r2, r4, r2
90006446:	fb04 f101 	mul.w	r1, r4, r1
    }
9000644a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000644e:	4718      	bx	r3

90006450 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
90006450:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006454:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
9000645a:	b410      	push	{r4}
        const float fs = f * (float)scale;
9000645c:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006460:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
        if (fs >= 0)
90006464:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000646c:	da2e      	bge.n	900064cc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000646e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
90006472:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
        const float fs = f * (float)scale;
90006476:	ee60 0aa7 	vmul.f32	s1, s1, s15
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000647a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000647e:	ee17 3a10 	vmov	r3, s14
        if (fs >= 0)
90006482:	eef5 0ac0 	vcmpe.f32	s1, #0.0
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006486:	3b01      	subs	r3, #1
90006488:	ee30 0a46 	vsub.f32	s0, s0, s12
        if (fs >= 0)
9000648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006490:	ee30 0a26 	vadd.f32	s0, s0, s13
90006494:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006498:	ee10 1a10 	vmov	r1, s0
9000649c:	4419      	add	r1, r3
        if (fs >= 0)
9000649e:	da24      	bge.n	900064ea <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900064a0:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900064a4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900064a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900064ac:	ee17 3a90 	vmov	r3, s15
900064b0:	3b01      	subs	r3, #1
900064b2:	ee70 0ae6 	vsub.f32	s1, s1, s13
900064b6:	ee70 0a87 	vadd.f32	s1, s1, s14
900064ba:	eefd 0ae0 	vcvt.s32.f32	s1, s1
900064be:	ee10 2a90 	vmov	r2, s1
900064c2:	441a      	add	r2, r3
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900064c4:	4623      	mov	r3, r4
    }
900064c6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900064ca:	4718      	bx	r3
            return (int)(fs + 0.5f);
900064cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        const float fs = f * (float)scale;
900064d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
            return (int)(fs + 0.5f);
900064d4:	ee30 0a07 	vadd.f32	s0, s0, s14
        if (fs >= 0)
900064d8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
            return (int)(fs + 0.5f);
900064dc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
        if (fs >= 0)
900064e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return (int)(fs + 0.5f);
900064e4:	ee17 1a10 	vmov	r1, s14
        if (fs >= 0)
900064e8:	dbda      	blt.n	900064a0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x50>
            return (int)(fs + 0.5f);
900064ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
900064ee:	4623      	mov	r3, r4
    }
900064f0:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
900064f4:	ee70 0aa7 	vadd.f32	s1, s1, s15
900064f8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
900064fc:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
90006500:	4718      	bx	r3
90006502:	bf00      	nop

90006504 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
90006504:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
90006506:	6803      	ldr	r3, [r0, #0]
90006508:	6b44      	ldr	r4, [r0, #52]	; 0x34
9000650a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
9000650e:	fb04 f202 	mul.w	r2, r4, r2
    }
90006512:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
90006516:	4718      	bx	r3

90006518 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
90006518:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000651c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
9000651e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
90006522:	b410      	push	{r4}
        const float fs = f * (float)scale;
90006524:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006528:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (fs >= 0)
9000652c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006534:	da15      	bge.n	90006562 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006536:	eefd 7ac0 	vcvt.s32.f32	s15, s0
9000653a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
9000653e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006542:	ee17 3a90 	vmov	r3, s15
90006546:	3b01      	subs	r3, #1
90006548:	ee30 0a66 	vsub.f32	s0, s0, s13
9000654c:	ee30 0a07 	vadd.f32	s0, s0, s14
90006550:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006554:	ee10 2a10 	vmov	r2, s0
90006558:	441a      	add	r2, r3
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
9000655a:	4623      	mov	r3, r4
    }
9000655c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006560:	4718      	bx	r3
            return (int)(fs + 0.5f);
90006562:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006566:	4623      	mov	r3, r4
    }
90006568:	f85d 4b04 	ldr.w	r4, [sp], #4
            return (int)(fs + 0.5f);
9000656c:	ee30 0a27 	vadd.f32	s0, s0, s15
90006570:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006574:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
90006578:	4718      	bx	r3
9000657a:	bf00      	nop

9000657c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
9000657c:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
90006580:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
90006582:	2b00      	cmp	r3, #0
90006584:	da0c      	bge.n	900065a0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006586:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000658a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9000658e:	3801      	subs	r0, #1
90006590:	fb90 f0f2 	sdiv	r0, r0, r2
90006594:	2800      	cmp	r0, #0
90006596:	bfb8      	it	lt
90006598:	3001      	addlt	r0, #1
9000659a:	1040      	asrs	r0, r0, #1
9000659c:	4240      	negs	r0, r0
    }
9000659e:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900065a0:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900065a4:	fb90 f0f2 	sdiv	r0, r0, r2
900065a8:	2800      	cmp	r0, #0
900065aa:	bfb8      	it	lt
900065ac:	3001      	addlt	r0, #1
900065ae:	1040      	asrs	r0, r0, #1
900065b0:	4770      	bx	lr
900065b2:	bf00      	nop

900065b4 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
900065b4:	ed90 0a4b 	vldr	s0, [r0, #300]	; 0x12c
900065b8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
900065bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
900065c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
900065c4:	ee80 0a27 	vdiv.f32	s0, s0, s15
900065c8:	4770      	bx	lr
900065ca:	bf00      	nop

900065cc <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
900065cc:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
900065d0:	4770      	bx	lr
900065d2:	bf00      	nop

900065d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
900065d4:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
900065d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
900065da:	2b00      	cmp	r3, #0
900065dc:	da0c      	bge.n	900065f8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
900065de:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
900065e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900065e6:	3801      	subs	r0, #1
900065e8:	fb90 f0f2 	sdiv	r0, r0, r2
900065ec:	2800      	cmp	r0, #0
900065ee:	bfb8      	it	lt
900065f0:	3001      	addlt	r0, #1
900065f2:	1040      	asrs	r0, r0, #1
900065f4:	4240      	negs	r0, r0
    }
900065f6:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900065f8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900065fc:	fb90 f0f2 	sdiv	r0, r0, r2
90006600:	2800      	cmp	r0, #0
90006602:	bfb8      	it	lt
90006604:	3001      	addlt	r0, #1
90006606:	1040      	asrs	r0, r0, #1
90006608:	4770      	bx	lr
9000660a:	bf00      	nop

9000660c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
9000660c:	ed90 0a4c 	vldr	s0, [r0, #304]	; 0x130
90006610:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006614:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
9000661c:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006620:	4770      	bx	lr
90006622:	bf00      	nop

90006624 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
90006624:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
90006628:	4770      	bx	lr
9000662a:	bf00      	nop

9000662c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
9000662c:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
90006630:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
90006632:	2b00      	cmp	r3, #0
90006634:	da0c      	bge.n	90006650 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006636:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
9000663a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9000663e:	3801      	subs	r0, #1
90006640:	fb90 f0f2 	sdiv	r0, r0, r2
90006644:	2800      	cmp	r0, #0
90006646:	bfb8      	it	lt
90006648:	3001      	addlt	r0, #1
9000664a:	1040      	asrs	r0, r0, #1
9000664c:	4240      	negs	r0, r0
    }
9000664e:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
90006650:	eb02 0043 	add.w	r0, r2, r3, lsl #1
90006654:	fb90 f0f2 	sdiv	r0, r0, r2
90006658:	2800      	cmp	r0, #0
9000665a:	bfb8      	it	lt
9000665c:	3001      	addlt	r0, #1
9000665e:	1040      	asrs	r0, r0, #1
90006660:	4770      	bx	lr
90006662:	bf00      	nop

90006664 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
90006664:	ed90 0a4d 	vldr	s0, [r0, #308]	; 0x134
90006668:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
9000666c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
90006670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
90006674:	ee80 0a27 	vdiv.f32	s0, s0, s15
90006678:	4770      	bx	lr
9000667a:	bf00      	nop

9000667c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
9000667c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
90006680:	4770      	bx	lr
90006682:	bf00      	nop

90006684 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
90006684:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
90006688:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
9000668a:	2b00      	cmp	r3, #0
9000668c:	da0c      	bge.n	900066a8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x24>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000668e:	ebc3 70c3 	rsb	r0, r3, r3, lsl #31
90006692:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006696:	3801      	subs	r0, #1
90006698:	fb90 f0f2 	sdiv	r0, r0, r2
9000669c:	2800      	cmp	r0, #0
9000669e:	bfb8      	it	lt
900066a0:	3001      	addlt	r0, #1
900066a2:	1040      	asrs	r0, r0, #1
900066a4:	4240      	negs	r0, r0
    }
900066a6:	4770      	bx	lr
            return ((i * 2 + scale) / scale) / 2;
900066a8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
900066ac:	fb90 f0f2 	sdiv	r0, r0, r2
900066b0:	2800      	cmp	r0, #0
900066b2:	bfb8      	it	lt
900066b4:	3001      	addlt	r0, #1
900066b6:	1040      	asrs	r0, r0, #1
900066b8:	4770      	bx	lr
900066ba:	bf00      	nop

900066bc <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
900066bc:	ed90 0a4e 	vldr	s0, [r0, #312]	; 0x138
900066c0:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
900066c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
900066c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
900066cc:	ee80 0a27 	vdiv.f32	s0, s0, s15
900066d0:	4770      	bx	lr
900066d2:	bf00      	nop

900066d4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
900066d4:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
900066d8:	4770      	bx	lr
900066da:	bf00      	nop

900066dc <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
900066dc:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
900066de:	b570      	push	{r4, r5, r6, lr}
900066e0:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
900066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
900066e6:	460d      	mov	r5, r1
900066e8:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
900066ea:	4798      	blx	r3
        setScaleY(scale, updateData);
900066ec:	6823      	ldr	r3, [r4, #0]
900066ee:	4632      	mov	r2, r6
900066f0:	4629      	mov	r1, r5
900066f2:	4620      	mov	r0, r4
900066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
900066f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
900066fc:	4718      	bx	r3
900066fe:	bf00      	nop

90006700 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006700:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
90006702:	2a00      	cmp	r2, #0
        return scaled2int(i, xScale);
90006704:	6b01      	ldr	r1, [r0, #48]	; 0x30
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
90006706:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006708:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
9000670c:	da14      	bge.n	90006738 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
9000670e:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006712:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90006716:	3b01      	subs	r3, #1
90006718:	fb93 f3f1 	sdiv	r3, r3, r1
9000671c:	2b00      	cmp	r3, #0
9000671e:	bfb8      	it	lt
90006720:	3301      	addlt	r3, #1
90006722:	105b      	asrs	r3, r3, #1
90006724:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006726:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
9000672a:	4259      	negs	r1, r3
9000672c:	3a01      	subs	r2, #1
9000672e:	441a      	add	r2, r3
90006730:	4623      	mov	r3, r4
    }
90006732:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006736:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006738:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9000673c:	fb92 f3f1 	sdiv	r3, r2, r1
90006740:	2b00      	cmp	r3, #0
90006742:	bfb8      	it	lt
90006744:	3301      	addlt	r3, #1
90006746:	105b      	asrs	r3, r3, #1
90006748:	e7ed      	b.n	90006726 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x26>
9000674a:	bf00      	nop

9000674c <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
9000674c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006750:	4770      	bx	lr
90006752:	bf00      	nop

90006754 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
90006754:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
90006758:	4770      	bx	lr
9000675a:	bf00      	nop

9000675c <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
9000675c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006760:	4770      	bx	lr
90006762:	bf00      	nop

90006764 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
90006764:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
90006768:	4770      	bx	lr
9000676a:	bf00      	nop

9000676c <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
9000676c:	4608      	mov	r0, r1
9000676e:	4770      	bx	lr

90006770 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006770:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
90006772:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
90006774:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006776:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
9000677a:	b510      	push	{r4, lr}
9000677c:	4604      	mov	r4, r0
        if (i >= 0)
9000677e:	da13      	bge.n	900067a8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x38>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006780:	ebc1 71c1 	rsb	r1, r1, r1, lsl #31
90006784:	eb02 0141 	add.w	r1, r2, r1, lsl #1
90006788:	3901      	subs	r1, #1
9000678a:	fb91 f1f2 	sdiv	r1, r1, r2
9000678e:	2900      	cmp	r1, #0
90006790:	bfb8      	it	lt
90006792:	3101      	addlt	r1, #1
90006794:	1049      	asrs	r1, r1, #1
90006796:	4249      	negs	r1, r1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
90006798:	b209      	sxth	r1, r1
9000679a:	4620      	mov	r0, r4
9000679c:	4798      	blx	r3
9000679e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
900067a2:	fb02 3000 	mla	r0, r2, r0, r3
900067a6:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
900067a8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
900067ac:	fb91 f1f2 	sdiv	r1, r1, r2
900067b0:	2900      	cmp	r1, #0
900067b2:	bfb8      	it	lt
900067b4:	3101      	addlt	r1, #1
900067b6:	1049      	asrs	r1, r1, #1
900067b8:	e7ee      	b.n	90006798 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x28>
900067ba:	bf00      	nop

900067bc <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
900067bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
900067be:	4770      	bx	lr

900067c0 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
900067c0:	6b40      	ldr	r0, [r0, #52]	; 0x34
900067c2:	4770      	bx	lr

900067c4 <_ZN15Screen2ViewBase11setupScreenEv>:
}

void Screen2ViewBase::setupScreen()
{

}
900067c4:	4770      	bx	lr
900067c6:	bf00      	nop

900067c8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
900067c8:	4770      	bx	lr
900067ca:	bf00      	nop

900067cc <_ZN8touchgfx21GraphWrapAndOverwriteILs24EED1Ev>:
 * A Continuous graph. A quick way to create a GraphWrapAndOverwriteData.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
900067cc:	4770      	bx	lr
900067ce:	bf00      	nop

900067d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
900067d0:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
900067d2:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
900067d4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
900067d6:	6844      	ldr	r4, [r0, #4]
900067d8:	f012 0f01 	tst.w	r2, #1
900067dc:	eb04 0062 	add.w	r0, r4, r2, asr #1
900067e0:	d103      	bne.n	900067ea <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
900067e2:	689b      	ldr	r3, [r3, #8]
    }
900067e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
900067e8:	4718      	bx	r3
900067ea:	ea4f 0c62 	mov.w	ip, r2, asr #1
900067ee:	689b      	ldr	r3, [r3, #8]
900067f0:	f854 200c 	ldr.w	r2, [r4, ip]
    }
900067f4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
900067f8:	58d3      	ldr	r3, [r2, r3]
900067fa:	4718      	bx	r3

900067fc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
900067fc:	6843      	ldr	r3, [r0, #4]
900067fe:	b13b      	cbz	r3, 90006810 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
90006800:	6883      	ldr	r3, [r0, #8]
90006802:	b10b      	cbz	r3, 90006808 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
90006804:	2001      	movs	r0, #1
    }
90006806:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90006808:	68c0      	ldr	r0, [r0, #12]
9000680a:	f000 0001 	and.w	r0, r0, #1
9000680e:	4770      	bx	lr
90006810:	4618      	mov	r0, r3
90006812:	4770      	bx	lr

90006814 <_ZN8touchgfx21GraphWrapAndOverwriteILs24EED0Ev>:
90006814:	b510      	push	{r4, lr}
90006816:	4604      	mov	r4, r0
90006818:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
9000681c:	f020 ff3b 	bl	90027696 <_ZdlPvj>
90006820:	4620      	mov	r0, r4
90006822:	bd10      	pop	{r4, pc}

90006824 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90006824:	b510      	push	{r4, lr}
90006826:	4604      	mov	r4, r0
90006828:	2110      	movs	r1, #16
9000682a:	f020 ff34 	bl	90027696 <_ZdlPvj>
9000682e:	4620      	mov	r0, r4
90006830:	bd10      	pop	{r4, pc}
90006832:	bf00      	nop

90006834 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
90006834:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
90006836:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
90006838:	db0d      	blt.n	90006856 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
9000683a:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
9000683e:	4604      	mov	r4, r0
90006840:	429a      	cmp	r2, r3
90006842:	dd08      	ble.n	90006856 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
90006844:	6803      	ldr	r3, [r0, #0]
90006846:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
9000684a:	4798      	blx	r3
9000684c:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
90006850:	fb02 3000 	mla	r0, r2, r0, r3
90006854:	bd10      	pop	{r4, pc}
        assert(index >= 0 && index < usedCapacity);
90006856:	4b03      	ldr	r3, [pc, #12]	; (90006864 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
90006858:	f240 6133 	movw	r1, #1587	; 0x633
9000685c:	4a02      	ldr	r2, [pc, #8]	; (90006868 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
9000685e:	4803      	ldr	r0, [pc, #12]	; (9000686c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
90006860:	f020 ff48 	bl	900276f4 <__assert_func>
90006864:	9002afe0 	.word	0x9002afe0
90006868:	9002b004 	.word	0x9002b004
9000686c:	9002b054 	.word	0x9002b054

90006870 <_ZN15Screen2ViewBaseD1Ev>:
Screen2ViewBase::~Screen2ViewBase()
90006870:	4b03      	ldr	r3, [pc, #12]	; (90006880 <_ZN15Screen2ViewBaseD1Ev+0x10>)
90006872:	b510      	push	{r4, lr}
90006874:	4604      	mov	r4, r0
90006876:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
90006878:	f010 f810 	bl	9001689c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
9000687c:	4620      	mov	r0, r4
9000687e:	bd10      	pop	{r4, pc}
90006880:	9002b3bc 	.word	0x9002b3bc

90006884 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
90006884:	4b07      	ldr	r3, [pc, #28]	; (900068a4 <_ZN15Screen2ViewBaseD0Ev+0x20>)
90006886:	b500      	push	{lr}
90006888:	b083      	sub	sp, #12
9000688a:	6003      	str	r3, [r0, #0]
9000688c:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
9000688e:	f010 f805 	bl	9001689c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
90006892:	9801      	ldr	r0, [sp, #4]
90006894:	f242 014c 	movw	r1, #8268	; 0x204c
90006898:	f020 fefd 	bl	90027696 <_ZdlPvj>
9000689c:	9801      	ldr	r0, [sp, #4]
9000689e:	b003      	add	sp, #12
900068a0:	f85d fb04 	ldr.w	pc, [sp], #4
900068a4:	9002b3bc 	.word	0x9002b3bc

900068a8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
900068a8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
900068ac:	b12a      	cbz	r2, 900068ba <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
        if (visible)
900068ae:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900068b2:	b112      	cbz	r2, 900068ba <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x12>
            invalidate();
900068b4:	6803      	ldr	r3, [r0, #0]
900068b6:	695b      	ldr	r3, [r3, #20]
900068b8:	4718      	bx	r3
    }
900068ba:	4770      	bx	lr

900068bc <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &backButton)
900068bc:	f500 7060 	add.w	r0, r0, #896	; 0x380
900068c0:	4288      	cmp	r0, r1
900068c2:	d000      	beq.n	900068c6 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>
900068c4:	4770      	bx	lr
{
900068c6:	b508      	push	{r3, lr}
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
900068c8:	f011 fc68 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
        //backButtonInteraction
        //When backButton clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}
900068cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenSlideTransitionWest();
900068d0:	f7ff b880 	b.w	900059d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>

900068d4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
    virtual int indexToDataPointYScaled(int16_t index) const
900068d4:	b538      	push	{r3, r4, r5, lr}
        assert(index >= 0 && index < usedCapacity);
900068d6:	1e0b      	subs	r3, r1, #0
900068d8:	db13      	blt.n	90006902 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
900068da:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
900068de:	429c      	cmp	r4, r3
900068e0:	dd0f      	ble.n	90006902 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x2e>
        return yValues[dataIndex(index)];
900068e2:	6802      	ldr	r2, [r0, #0]
900068e4:	4d0a      	ldr	r5, [pc, #40]	; (90006910 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x3c>)
900068e6:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
900068ea:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
900068ee:	42aa      	cmp	r2, r5
900068f0:	d102      	bne.n	900068f8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x24>
    }
900068f2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900068f6:	bd38      	pop	{r3, r4, r5, pc}
        return yValues[dataIndex(index)];
900068f8:	4790      	blx	r2
900068fa:	4603      	mov	r3, r0
    }
900068fc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
90006900:	bd38      	pop	{r3, r4, r5, pc}
        assert(index >= 0 && index < usedCapacity);
90006902:	4b04      	ldr	r3, [pc, #16]	; (90006914 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x40>)
90006904:	f240 6139 	movw	r1, #1593	; 0x639
90006908:	4a03      	ldr	r2, [pc, #12]	; (90006918 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x44>)
9000690a:	4804      	ldr	r0, [pc, #16]	; (9000691c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x48>)
9000690c:	f020 fef2 	bl	900276f4 <__assert_func>
90006910:	9000676d 	.word	0x9000676d
90006914:	9002afe0 	.word	0x9002afe0
90006918:	9002b0b4 	.word	0x9002b0b4
9000691c:	9002b054 	.word	0x9002b054

90006920 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
90006920:	b430      	push	{r4, r5}
    {
        setXAxisFactorScaled(scale);
90006922:	6804      	ldr	r4, [r0, #0]
90006924:	4d05      	ldr	r5, [pc, #20]	; (9000693c <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x1c>)
90006926:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
9000692a:	42ac      	cmp	r4, r5
9000692c:	d103      	bne.n	90006936 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi+0x16>
        xAxisFactor = factor;
9000692e:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006932:	bc30      	pop	{r4, r5}
90006934:	4770      	bx	lr
        setXAxisFactorScaled(scale);
90006936:	4623      	mov	r3, r4
    }
90006938:	bc30      	pop	{r4, r5}
        setXAxisFactorScaled(scale);
9000693a:	4718      	bx	r3
9000693c:	9000674d 	.word	0x9000674d

90006940 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
        return getScaleY();
90006940:	6802      	ldr	r2, [r0, #0]
90006942:	4904      	ldr	r1, [pc, #16]	; (90006954 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x14>)
90006944:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
90006948:	428a      	cmp	r2, r1
9000694a:	d101      	bne.n	90006950 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv+0x10>
        return yScale;
9000694c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    }
9000694e:	4770      	bx	lr
        return getScaleY();
90006950:	4710      	bx	r2
90006952:	bf00      	nop
90006954:	900067c1 	.word	0x900067c1

90006958 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
        return getGraphRangeXMinScaled();
90006958:	6802      	ldr	r2, [r0, #0]
9000695a:	4904      	ldr	r1, [pc, #16]	; (9000696c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x14>)
9000695c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
90006960:	428a      	cmp	r2, r1
90006962:	d102      	bne.n	9000696a <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv+0x12>
        return graphRangeMinX;
90006964:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
    }
90006968:	4770      	bx	lr
        return getGraphRangeXMinScaled();
9000696a:	4710      	bx	r2
9000696c:	900065cd 	.word	0x900065cd

90006970 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
        return getGraphRangeXMaxScaled();
90006970:	6802      	ldr	r2, [r0, #0]
90006972:	4904      	ldr	r1, [pc, #16]	; (90006984 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x14>)
90006974:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
90006978:	428a      	cmp	r2, r1
9000697a:	d102      	bne.n	90006982 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv+0x12>
        return graphRangeMaxX;
9000697c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    }
90006980:	4770      	bx	lr
        return getGraphRangeXMaxScaled();
90006982:	4710      	bx	r2
90006984:	90006625 	.word	0x90006625

90006988 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
90006988:	6802      	ldr	r2, [r0, #0]
9000698a:	4904      	ldr	r1, [pc, #16]	; (9000699c <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x14>)
9000698c:	f8d2 215c 	ldr.w	r2, [r2, #348]	; 0x15c
90006990:	428a      	cmp	r2, r1
90006992:	d102      	bne.n	9000699a <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv+0x12>
        return xAxisFactor;
90006994:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
    }
90006998:	4770      	bx	lr
        return getXAxisFactorScaled();
9000699a:	4710      	bx	r2
9000699c:	90006755 	.word	0x90006755

900069a0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        setXAxisOffsetScaled(int2scaledX(offset));
900069a0:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisOffset(int offset)
900069a2:	b410      	push	{r4}
        return i * scale;
900069a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisOffsetScaled(int2scaledX(offset));
900069a6:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
        return i * scale;
900069aa:	fb04 f101 	mul.w	r1, r4, r1
900069ae:	4c05      	ldr	r4, [pc, #20]	; (900069c4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x24>)
900069b0:	42a2      	cmp	r2, r4
900069b2:	d104      	bne.n	900069be <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi+0x1e>
    }
900069b4:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisOffset = offset;
900069b8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
900069bc:	4770      	bx	lr
900069be:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisOffsetScaled(int2scaledX(offset));
900069c2:	4710      	bx	r2
900069c4:	9000675d 	.word	0x9000675d

900069c8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
900069c8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisOffsetScaled(float2scaledX(offset));
900069cc:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
900069ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
900069d2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
900069d6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
900069da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
900069de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900069e2:	da17      	bge.n	90006a14 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900069e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
900069e8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
900069ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900069f0:	ee17 3a90 	vmov	r3, s15
900069f4:	3b01      	subs	r3, #1
900069f6:	ee30 0a66 	vsub.f32	s0, s0, s13
900069fa:	ee30 0a07 	vadd.f32	s0, s0, s14
900069fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006a02:	ee10 1a10 	vmov	r1, s0
90006a06:	4419      	add	r1, r3
90006a08:	4b08      	ldr	r3, [pc, #32]	; (90006a2c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
90006a0a:	429a      	cmp	r2, r3
90006a0c:	d10d      	bne.n	90006a2a <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
        xAxisOffset = offset;
90006a0e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
90006a12:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006a14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006a18:	4b04      	ldr	r3, [pc, #16]	; (90006a2c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x64>)
90006a1a:	429a      	cmp	r2, r3
90006a1c:	ee30 0a27 	vadd.f32	s0, s0, s15
90006a20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006a24:	ee17 1a90 	vmov	r1, s15
90006a28:	d0f1      	beq.n	90006a0e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x46>
        setXAxisOffsetScaled(float2scaledX(offset));
90006a2a:	4710      	bx	r2
90006a2c:	9000675d 	.word	0x9000675d

90006a30 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
        return scaled2intX(getXAxisOffsetScaled());
90006a30:	6803      	ldr	r3, [r0, #0]
90006a32:	4a12      	ldr	r2, [pc, #72]	; (90006a7c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x4c>)
90006a34:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
90006a38:	4293      	cmp	r3, r2
    virtual int getXAxisOffsetAsInt() const
90006a3a:	b510      	push	{r4, lr}
90006a3c:	4604      	mov	r4, r0
90006a3e:	d11a      	bne.n	90006a76 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x46>
        return xAxisOffset;
90006a40:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
        if (i >= 0)
90006a44:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006a46:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006a48:	da0c      	bge.n	90006a64 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006a4a:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006a4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006a52:	3801      	subs	r0, #1
90006a54:	fb90 f0f2 	sdiv	r0, r0, r2
90006a58:	2800      	cmp	r0, #0
90006a5a:	bfb8      	it	lt
90006a5c:	3001      	addlt	r0, #1
90006a5e:	1040      	asrs	r0, r0, #1
90006a60:	4240      	negs	r0, r0
    }
90006a62:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006a64:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006a68:	fb90 f0f2 	sdiv	r0, r0, r2
90006a6c:	2800      	cmp	r0, #0
90006a6e:	bfb8      	it	lt
90006a70:	3001      	addlt	r0, #1
90006a72:	1040      	asrs	r0, r0, #1
    }
90006a74:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisOffsetScaled());
90006a76:	4798      	blx	r3
90006a78:	e7e4      	b.n	90006a44 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x14>
90006a7a:	bf00      	nop
90006a7c:	90006765 	.word	0x90006765

90006a80 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:
        return scaled2floatX(getXAxisOffsetScaled());
90006a80:	6803      	ldr	r3, [r0, #0]
90006a82:	4a0b      	ldr	r2, [pc, #44]	; (90006ab0 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x30>)
90006a84:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
90006a88:	4293      	cmp	r3, r2
    virtual float getXAxisOffsetAsFloat() const
90006a8a:	b510      	push	{r4, lr}
90006a8c:	4604      	mov	r4, r0
90006a8e:	d10a      	bne.n	90006aa6 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x26>
        return xAxisOffset;
90006a90:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
        return (float)i / (float)scale;
90006a94:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006a9c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006aa0:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006aa4:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisOffsetScaled());
90006aa6:	4798      	blx	r3
90006aa8:	ee07 0a90 	vmov	s15, r0
90006aac:	e7f2      	b.n	90006a94 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv+0x14>
90006aae:	bf00      	nop
90006ab0:	90006765 	.word	0x90006765

90006ab4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        setXAxisFactorScaled(int2scaledX(factor));
90006ab4:	6802      	ldr	r2, [r0, #0]
    virtual void setXAxisFactor(int factor)
90006ab6:	b410      	push	{r4}
        return i * scale;
90006ab8:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006aba:	f8d2 2148 	ldr.w	r2, [r2, #328]	; 0x148
        return i * scale;
90006abe:	fb04 f101 	mul.w	r1, r4, r1
90006ac2:	4c05      	ldr	r4, [pc, #20]	; (90006ad8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x24>)
90006ac4:	42a2      	cmp	r2, r4
90006ac6:	d104      	bne.n	90006ad2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi+0x1e>
    }
90006ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006acc:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006ad0:	4770      	bx	lr
90006ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(int2scaledX(factor));
90006ad6:	4710      	bx	r2
90006ad8:	9000674d 	.word	0x9000674d

90006adc <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
90006adc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setXAxisFactorScaled(float2scaledX(factor));
90006ae0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
90006ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
90006ae6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
90006aea:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006aee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006af6:	da17      	bge.n	90006b28 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x4c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006af8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006afc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006b00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006b04:	ee17 3a90 	vmov	r3, s15
90006b08:	3b01      	subs	r3, #1
90006b0a:	ee30 0a66 	vsub.f32	s0, s0, s13
90006b0e:	ee30 0a07 	vadd.f32	s0, s0, s14
90006b12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006b16:	ee10 1a10 	vmov	r1, s0
90006b1a:	4419      	add	r1, r3
90006b1c:	4b08      	ldr	r3, [pc, #32]	; (90006b40 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006b1e:	429a      	cmp	r2, r3
90006b20:	d10d      	bne.n	90006b3e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
        xAxisFactor = factor;
90006b22:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006b26:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006b28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006b2c:	4b04      	ldr	r3, [pc, #16]	; (90006b40 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x64>)
90006b2e:	429a      	cmp	r2, r3
90006b30:	ee30 0a27 	vadd.f32	s0, s0, s15
90006b34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006b38:	ee17 1a90 	vmov	r1, s15
90006b3c:	d0f1      	beq.n	90006b22 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x46>
        setXAxisFactorScaled(float2scaledX(factor));
90006b3e:	4710      	bx	r2
90006b40:	9000674d 	.word	0x9000674d

90006b44 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
        return scaled2intX(getXAxisFactorScaled());
90006b44:	6803      	ldr	r3, [r0, #0]
90006b46:	4a12      	ldr	r2, [pc, #72]	; (90006b90 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x4c>)
90006b48:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b4c:	4293      	cmp	r3, r2
    virtual int getXAxisFactorAsInt() const
90006b4e:	b510      	push	{r4, lr}
90006b50:	4604      	mov	r4, r0
90006b52:	d11a      	bne.n	90006b8a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x46>
        return xAxisFactor;
90006b54:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006b58:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006b5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006b5c:	da0c      	bge.n	90006b78 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x34>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006b5e:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006b62:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006b66:	3801      	subs	r0, #1
90006b68:	fb90 f0f2 	sdiv	r0, r0, r2
90006b6c:	2800      	cmp	r0, #0
90006b6e:	bfb8      	it	lt
90006b70:	3001      	addlt	r0, #1
90006b72:	1040      	asrs	r0, r0, #1
90006b74:	4240      	negs	r0, r0
    }
90006b76:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006b78:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006b7c:	fb90 f0f2 	sdiv	r0, r0, r2
90006b80:	2800      	cmp	r0, #0
90006b82:	bfb8      	it	lt
90006b84:	3001      	addlt	r0, #1
90006b86:	1040      	asrs	r0, r0, #1
    }
90006b88:	bd10      	pop	{r4, pc}
        return scaled2intX(getXAxisFactorScaled());
90006b8a:	4798      	blx	r3
90006b8c:	e7e4      	b.n	90006b58 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x14>
90006b8e:	bf00      	nop
90006b90:	90006755 	.word	0x90006755

90006b94 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
        return scaled2floatX(getXAxisFactorScaled());
90006b94:	6803      	ldr	r3, [r0, #0]
90006b96:	4a0b      	ldr	r2, [pc, #44]	; (90006bc4 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x30>)
90006b98:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006b9c:	4293      	cmp	r3, r2
    virtual float getXAxisFactorAsFloat() const
90006b9e:	b510      	push	{r4, lr}
90006ba0:	4604      	mov	r4, r0
90006ba2:	d10a      	bne.n	90006bba <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x26>
        return xAxisFactor;
90006ba4:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006ba8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
90006bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006bb0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
90006bb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
90006bb8:	bd10      	pop	{r4, pc}
        return scaled2floatX(getXAxisFactorScaled());
90006bba:	4798      	blx	r3
90006bbc:	ee07 0a90 	vmov	s15, r0
90006bc0:	e7f2      	b.n	90006ba8 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv+0x14>
90006bc2:	bf00      	nop
90006bc4:	90006755 	.word	0x90006755

90006bc8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
90006bc8:	b470      	push	{r4, r5, r6}
        setXAxisFactor(scale);
90006bca:	6804      	ldr	r4, [r0, #0]
90006bcc:	4e0b      	ldr	r6, [pc, #44]	; (90006bfc <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x34>)
90006bce:	f8d4 513c 	ldr.w	r5, [r4, #316]	; 0x13c
90006bd2:	42b5      	cmp	r5, r6
90006bd4:	d10c      	bne.n	90006bf0 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x28>
90006bd6:	460a      	mov	r2, r1
        return i * scale;
90006bd8:	6b01      	ldr	r1, [r0, #48]	; 0x30
        setXAxisFactorScaled(int2scaledX(factor));
90006bda:	f8d4 4148 	ldr.w	r4, [r4, #328]	; 0x148
        return i * scale;
90006bde:	fb02 f101 	mul.w	r1, r2, r1
90006be2:	4a07      	ldr	r2, [pc, #28]	; (90006c00 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x38>)
90006be4:	4294      	cmp	r4, r2
90006be6:	d106      	bne.n	90006bf6 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi+0x2e>
        xAxisFactor = factor;
90006be8:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
90006bec:	bc70      	pop	{r4, r5, r6}
90006bee:	4770      	bx	lr
        setXAxisFactor(scale);
90006bf0:	462b      	mov	r3, r5
    }
90006bf2:	bc70      	pop	{r4, r5, r6}
        setXAxisFactor(scale);
90006bf4:	4718      	bx	r3
        setXAxisFactorScaled(int2scaledX(factor));
90006bf6:	4623      	mov	r3, r4
    }
90006bf8:	bc70      	pop	{r4, r5, r6}
        setXAxisFactorScaled(int2scaledX(factor));
90006bfa:	4718      	bx	r3
90006bfc:	90006ab5 	.word	0x90006ab5
90006c00:	9000674d 	.word	0x9000674d

90006c04 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:
        return getXAxisFactorAsFloat();
90006c04:	6803      	ldr	r3, [r0, #0]
90006c06:	490e      	ldr	r1, [pc, #56]	; (90006c40 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x3c>)
90006c08:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
90006c0c:	428a      	cmp	r2, r1
90006c0e:	d111      	bne.n	90006c34 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x30>
        return scaled2floatX(getXAxisFactorScaled());
90006c10:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006c14:	4a0b      	ldr	r2, [pc, #44]	; (90006c44 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x40>)
90006c16:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
90006c18:	b510      	push	{r4, lr}
90006c1a:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
90006c1c:	d10b      	bne.n	90006c36 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x32>
        return xAxisFactor;
90006c1e:	edd0 7a4f 	vldr	s15, [r0, #316]	; 0x13c
        return (float)i / (float)scale;
90006c22:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90006c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006c2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90006c2e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
90006c32:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsFloat();
90006c34:	4710      	bx	r2
        return scaled2floatX(getXAxisFactorScaled());
90006c36:	4798      	blx	r3
90006c38:	ee07 0a90 	vmov	s15, r0
90006c3c:	e7f1      	b.n	90006c22 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv+0x1e>
90006c3e:	bf00      	nop
90006c40:	90006b95 	.word	0x90006b95
90006c44:	90006755 	.word	0x90006755

90006c48 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
        return valueToScreenXQ5(int2scaledX(index));
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c48:	6802      	ldr	r2, [r0, #0]
90006c4a:	f8df c090 	ldr.w	ip, [pc, #144]	; 90006cdc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x94>
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c50:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
90006c54:	b085      	sub	sp, #20
90006c56:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006c58:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90006c5c:	4566      	cmp	r6, ip
90006c5e:	f8d2 5118 	ldr.w	r5, [r2, #280]	; 0x118
90006c62:	d136      	bne.n	90006cd2 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x8a>
90006c64:	460b      	mov	r3, r1
90006c66:	4a1c      	ldr	r2, [pc, #112]	; (90006cd8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x90>)
90006c68:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
90006c6c:	4295      	cmp	r5, r2
90006c6e:	d12a      	bne.n	90006cc6 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x7e>
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006c70:	f9b4 c114 	ldrsh.w	ip, [r4, #276]	; 0x114
90006c74:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
90006c78:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90006c7c:	4462      	add	r2, ip
90006c7e:	1a9b      	subs	r3, r3, r2
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006c80:	e9d4 524d 	ldrd	r5, r2, [r4, #308]	; 0x134
90006c84:	b21c      	sxth	r4, r3
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c86:	ab03      	add	r3, sp, #12
90006c88:	1b52      	subs	r2, r2, r5
90006c8a:	1b48      	subs	r0, r1, r5
90006c8c:	44a4      	add	ip, r4
90006c8e:	1e61      	subs	r1, r4, #1
90006c90:	9201      	str	r2, [sp, #4]
90006c92:	f10c 3cff 	add.w	ip, ip, #4294967295
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006c96:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006c9a:	f012 fcb6 	bl	9001960a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006c9e:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006ca0:	9903      	ldr	r1, [sp, #12]
90006ca2:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006ca6:	9a01      	ldr	r2, [sp, #4]
90006ca8:	db06      	blt.n	90006cb8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x70>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006caa:	f012 fccd 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006cae:	eb00 1045 	add.w	r0, r0, r5, lsl #5
            return Q5(v - q5.v);
90006cb2:	1a20      	subs	r0, r4, r0
    }
90006cb4:	b005      	add	sp, #20
90006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006cb8:	f012 fcc6 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006cbc:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006cc0:	1a20      	subs	r0, r4, r0
90006cc2:	b005      	add	sp, #20
90006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006cc6:	4620      	mov	r0, r4
90006cc8:	462b      	mov	r3, r5
    }
90006cca:	b005      	add	sp, #20
90006ccc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
90006cd0:	4718      	bx	r3
90006cd2:	47b0      	blx	r6
90006cd4:	4603      	mov	r3, r0
90006cd6:	e7c6      	b.n	90006c66 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es+0x1e>
90006cd8:	90006e31 	.word	0x90006e31
90006cdc:	9000676d 	.word	0x9000676d

90006ce0 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:
        return getXAxisFactorAsInt();
90006ce0:	6803      	ldr	r3, [r0, #0]
90006ce2:	4915      	ldr	r1, [pc, #84]	; (90006d38 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x58>)
90006ce4:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
90006ce8:	428a      	cmp	r2, r1
90006cea:	d121      	bne.n	90006d30 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x50>
        return scaled2intX(getXAxisFactorScaled());
90006cec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
90006cf0:	4a12      	ldr	r2, [pc, #72]	; (90006d3c <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x5c>)
90006cf2:	4293      	cmp	r3, r2
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
90006cf4:	b510      	push	{r4, lr}
90006cf6:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
90006cf8:	d11b      	bne.n	90006d32 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x52>
        return xAxisFactor;
90006cfa:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
        if (i >= 0)
90006cfe:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
90006d00:	6b22      	ldr	r2, [r4, #48]	; 0x30
        if (i >= 0)
90006d02:	da0c      	bge.n	90006d1e <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x3e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006d04:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
90006d08:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006d0c:	3801      	subs	r0, #1
90006d0e:	fb90 f0f2 	sdiv	r0, r0, r2
90006d12:	2800      	cmp	r0, #0
90006d14:	bfb8      	it	lt
90006d16:	3001      	addlt	r0, #1
90006d18:	1040      	asrs	r0, r0, #1
90006d1a:	4240      	negs	r0, r0
    }
90006d1c:	bd10      	pop	{r4, pc}
            return ((i * 2 + scale) / scale) / 2;
90006d1e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90006d22:	fb90 f0f2 	sdiv	r0, r0, r2
90006d26:	2800      	cmp	r0, #0
90006d28:	bfb8      	it	lt
90006d2a:	3001      	addlt	r0, #1
90006d2c:	1040      	asrs	r0, r0, #1
    }
90006d2e:	bd10      	pop	{r4, pc}
        return getXAxisFactorAsInt();
90006d30:	4710      	bx	r2
        return scaled2intX(getXAxisFactorScaled());
90006d32:	4798      	blx	r3
90006d34:	e7e3      	b.n	90006cfe <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv+0x1e>
90006d36:	bf00      	nop
90006d38:	90006b45 	.word	0x90006b45
90006d3c:	90006755 	.word	0x90006755

90006d40 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
        setXAxisFactor(scale);
90006d40:	6802      	ldr	r2, [r0, #0]
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
90006d42:	b410      	push	{r4}
        setXAxisFactor(scale);
90006d44:	f8d2 1144 	ldr.w	r1, [r2, #324]	; 0x144
90006d48:	4c1e      	ldr	r4, [pc, #120]	; (90006dc4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x84>)
90006d4a:	42a1      	cmp	r1, r4
90006d4c:	d137      	bne.n	90006dbe <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x7e>
        const float fs = f * (float)scale;
90006d4e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
90006d52:	4603      	mov	r3, r0
        setXAxisFactorScaled(float2scaledX(factor));
90006d54:	f8d2 4148 	ldr.w	r4, [r2, #328]	; 0x148
        const float fs = f * (float)scale;
90006d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006d5c:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006d60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006d68:	da19      	bge.n	90006d9e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x5e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006d6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006d6e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006d76:	ee17 2a90 	vmov	r2, s15
90006d7a:	3a01      	subs	r2, #1
90006d7c:	ee30 0a66 	vsub.f32	s0, s0, s13
90006d80:	ee30 0a07 	vadd.f32	s0, s0, s14
90006d84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006d88:	ee10 1a10 	vmov	r1, s0
90006d8c:	4411      	add	r1, r2
90006d8e:	4a0e      	ldr	r2, [pc, #56]	; (90006dc8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006d90:	4294      	cmp	r4, r2
90006d92:	d10f      	bne.n	90006db4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x74>
    }
90006d94:	f85d 4b04 	ldr.w	r4, [sp], #4
        xAxisFactor = factor;
90006d98:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    }
90006d9c:	4770      	bx	lr
            return (int)(fs + 0.5f);
90006d9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006da2:	4a09      	ldr	r2, [pc, #36]	; (90006dc8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x88>)
90006da4:	4294      	cmp	r4, r2
90006da6:	ee30 0a27 	vadd.f32	s0, s0, s15
90006daa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006dae:	ee17 1a90 	vmov	r1, s15
90006db2:	d0ef      	beq.n	90006d94 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf+0x54>
        setXAxisFactorScaled(float2scaledX(factor));
90006db4:	4618      	mov	r0, r3
90006db6:	4623      	mov	r3, r4
    }
90006db8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactorScaled(float2scaledX(factor));
90006dbc:	4718      	bx	r3
    }
90006dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
        setXAxisFactor(scale);
90006dc2:	4708      	bx	r1
90006dc4:	90006add 	.word	0x90006add
90006dc8:	9000674d 	.word	0x9000674d

90006dcc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006dcc:	b530      	push	{r4, r5, lr}
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006dce:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006dd2:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006dd4:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
90006dd8:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006dda:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006dde:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
90006de2:	4402      	add	r2, r0
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006de4:	1b48      	subs	r0, r1, r5
90006de6:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006de8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006dec:	ab03      	add	r3, sp, #12
90006dee:	b209      	sxth	r1, r1
90006df0:	1b52      	subs	r2, r2, r5
90006df2:	3901      	subs	r1, #1
90006df4:	9201      	str	r2, [sp, #4]
90006df6:	f012 fc08 	bl	9001960a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006dfa:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006dfc:	9903      	ldr	r1, [sp, #12]
90006dfe:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e02:	9a01      	ldr	r2, [sp, #4]
90006e04:	db09      	blt.n	90006e1a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei+0x4e>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e06:	f012 fc1f 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e0a:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006e0e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006e12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006e16:	b005      	add	sp, #20
90006e18:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e1a:	f012 fc15 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e1e:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006e22:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006e26:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006e2a:	b005      	add	sp, #20
90006e2c:	bd30      	pop	{r4, r5, pc}
90006e2e:	bf00      	nop

90006e30 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006e30:	f9b0 c114 	ldrsh.w	ip, [r0, #276]	; 0x114
90006e34:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006e38:	b530      	push	{r4, r5, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006e3a:	4463      	add	r3, ip
90006e3c:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
90006e40:	b085      	sub	sp, #20
        return graphArea.getHeight() - (topPadding + bottomPadding);
90006e42:	1ae4      	subs	r4, r4, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
90006e44:	b224      	sxth	r4, r4
90006e46:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
90006e4a:	44a4      	add	ip, r4
90006e4c:	1ad2      	subs	r2, r2, r3
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e4e:	1ac8      	subs	r0, r1, r3
90006e50:	f10c 3cff 	add.w	ip, ip, #4294967295
90006e54:	1e61      	subs	r1, r4, #1
90006e56:	ab03      	add	r3, sp, #12
90006e58:	9201      	str	r2, [sp, #4]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
90006e5a:	ea4f 144c 	mov.w	r4, ip, lsl #5
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006e5e:	f012 fbd4 	bl	9001960a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006e62:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e64:	9903      	ldr	r1, [sp, #12]
90006e66:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006e6a:	9a01      	ldr	r2, [sp, #4]
90006e6c:	db06      	blt.n	90006e7c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei+0x4c>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e6e:	f012 fbeb 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006e72:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    }
90006e76:	1a20      	subs	r0, r4, r0
90006e78:	b005      	add	sp, #20
90006e7a:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006e7c:	f012 fbe4 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
90006e80:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
90006e84:	1a20      	subs	r0, r4, r0
90006e86:	b005      	add	sp, #20
90006e88:	bd30      	pop	{r4, r5, pc}
90006e8a:	bf00      	nop

90006e8c <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
90006e8c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return valueToScreenXQ5(int2scaledX(index));
90006e8e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
90006e90:	fb02 f101 	mul.w	r1, r2, r1
90006e94:	4a1b      	ldr	r2, [pc, #108]	; (90006f04 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x78>)
        return valueToScreenXQ5(int2scaledX(index));
90006e96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
        return i * scale;
90006e9a:	4293      	cmp	r3, r2
90006e9c:	d130      	bne.n	90006f00 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x74>
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006e9e:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006ea2:	b530      	push	{r4, r5, lr}
90006ea4:	4604      	mov	r4, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006ea6:	f8b0 0118 	ldrh.w	r0, [r0, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
90006eaa:	b085      	sub	sp, #20
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006eac:	f8d4 512c 	ldr.w	r5, [r4, #300]	; 0x12c
        return graphArea.getWidth() - (leftPadding + rightPadding);
90006eb0:	4402      	add	r2, r0
90006eb2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
90006eb6:	1b48      	subs	r0, r1, r5
90006eb8:	1a99      	subs	r1, r3, r2
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
90006eba:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
90006ebe:	ab03      	add	r3, sp, #12
90006ec0:	b209      	sxth	r1, r1
90006ec2:	1b52      	subs	r2, r2, r5
90006ec4:	3901      	subs	r1, #1
90006ec6:	9201      	str	r2, [sp, #4]
90006ec8:	f012 fb9f 	bl	9001960a <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
90006ecc:	1e05      	subs	r5, r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006ece:	9903      	ldr	r1, [sp, #12]
90006ed0:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
90006ed4:	9a01      	ldr	r2, [sp, #4]
90006ed6:	db09      	blt.n	90006eec <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es+0x60>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006ed8:	f012 fbb6 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006edc:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
90006ee0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
90006ee4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    }
90006ee8:	b005      	add	sp, #20
90006eea:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
90006eec:	f012 fbac 	bl	90019648 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
90006ef0:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
            return Q5(v - q5.v);
90006ef4:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
            return Q5(v + q5.v);
90006ef8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
90006efc:	b005      	add	sp, #20
90006efe:	bd30      	pop	{r4, r5, pc}
        return valueToScreenXQ5(int2scaledX(index));
90006f00:	4718      	bx	r3
90006f02:	bf00      	nop
90006f04:	90006dcd 	.word	0x90006dcd

90006f08 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f08:	6803      	ldr	r3, [r0, #0]
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
90006f0a:	b470      	push	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f0c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
90006f10:	4e15      	ldr	r6, [pc, #84]	; (90006f68 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x60>)
        return int2scaled(i, xScale);
90006f12:	6b05      	ldr	r5, [r0, #48]	; 0x30
        return i * scale;
90006f14:	42b4      	cmp	r4, r6
90006f16:	fb05 f202 	mul.w	r2, r5, r2
90006f1a:	d122      	bne.n	90006f62 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x5a>
        if (i >= 0)
90006f1c:	2a00      	cmp	r2, #0
90006f1e:	4684      	mov	ip, r0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f20:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (i >= 0)
90006f24:	da14      	bge.n	90006f50 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x48>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006f26:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006f2a:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f2e:	3b01      	subs	r3, #1
90006f30:	fb93 f3f5 	sdiv	r3, r3, r5
90006f34:	2b00      	cmp	r3, #0
90006f36:	bfb8      	it	lt
90006f38:	3301      	addlt	r3, #1
90006f3a:	105b      	asrs	r3, r3, #1
90006f3c:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f3e:	f9bc 211e 	ldrsh.w	r2, [ip, #286]	; 0x11e
90006f42:	4259      	negs	r1, r3
90006f44:	4660      	mov	r0, ip
90006f46:	3a01      	subs	r2, #1
90006f48:	441a      	add	r2, r3
90006f4a:	4623      	mov	r3, r4
    }
90006f4c:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006f4e:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006f50:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006f54:	fb93 f3f5 	sdiv	r3, r3, r5
90006f58:	2b00      	cmp	r3, #0
90006f5a:	bfb8      	it	lt
90006f5c:	3301      	addlt	r3, #1
90006f5e:	105b      	asrs	r3, r3, #1
90006f60:	e7ed      	b.n	90006f3e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi+0x36>
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f62:	4623      	mov	r3, r4
    }
90006f64:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
90006f66:	4718      	bx	r3
90006f68:	90006701 	.word	0x90006701

90006f6c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
90006f6c:	b470      	push	{r4, r5, r6}
        return float2scaled(f, xScale);
90006f6e:	6b05      	ldr	r5, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f70:	6804      	ldr	r4, [r0, #0]
        const float fs = f * (float)scale;
90006f72:	ee07 5a90 	vmov	s15, r5
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90006f76:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
        const float fs = f * (float)scale;
90006f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90006f7e:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
90006f82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90006f8a:	da35      	bge.n	90006ff8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x8c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90006f8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90006f90:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
90006f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90006f98:	ee17 3a90 	vmov	r3, s15
90006f9c:	3b01      	subs	r3, #1
90006f9e:	ee30 0a66 	vsub.f32	s0, s0, s13
90006fa2:	ee30 0a07 	vadd.f32	s0, s0, s14
90006fa6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90006faa:	ee10 2a10 	vmov	r2, s0
90006fae:	441a      	add	r2, r3
90006fb0:	4b18      	ldr	r3, [pc, #96]	; (90007014 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006fb2:	429e      	cmp	r6, r3
90006fb4:	d12b      	bne.n	9000700e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa2>
        if (i >= 0)
90006fb6:	2a00      	cmp	r2, #0
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006fb8:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
        if (i >= 0)
90006fbc:	da13      	bge.n	90006fe6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x7a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
90006fbe:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
90006fc2:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006fc6:	3b01      	subs	r3, #1
90006fc8:	fb93 f3f5 	sdiv	r3, r3, r5
90006fcc:	2b00      	cmp	r3, #0
90006fce:	bfb8      	it	lt
90006fd0:	3301      	addlt	r3, #1
90006fd2:	105b      	asrs	r3, r3, #1
90006fd4:	425b      	negs	r3, r3
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006fd6:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
90006fda:	4259      	negs	r1, r3
90006fdc:	3a01      	subs	r2, #1
90006fde:	441a      	add	r2, r3
90006fe0:	4623      	mov	r3, r4
    }
90006fe2:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
90006fe4:	4718      	bx	r3
            return ((i * 2 + scale) / scale) / 2;
90006fe6:	eb05 0342 	add.w	r3, r5, r2, lsl #1
90006fea:	fb93 f3f5 	sdiv	r3, r3, r5
90006fee:	2b00      	cmp	r3, #0
90006ff0:	bfb8      	it	lt
90006ff2:	3301      	addlt	r3, #1
90006ff4:	105b      	asrs	r3, r3, #1
90006ff6:	e7ee      	b.n	90006fd6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x6a>
            return (int)(fs + 0.5f);
90006ff8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
90006ffc:	4b05      	ldr	r3, [pc, #20]	; (90007014 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0xa8>)
90006ffe:	429e      	cmp	r6, r3
90007000:	ee30 0a27 	vadd.f32	s0, s0, s15
90007004:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90007008:	ee17 2a90 	vmov	r2, s15
9000700c:	d0d3      	beq.n	90006fb6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x4a>
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
9000700e:	4633      	mov	r3, r6
    }
90007010:	bc70      	pop	{r4, r5, r6}
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
90007012:	4718      	bx	r3
90007014:	90006701 	.word	0x90006701

90007018 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
90007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000701c:	ed2d 8b02 	vpush	{d8}
90007020:	b08b      	sub	sp, #44	; 0x2c
90007022:	4604      	mov	r4, r0
90007024:	f012 fcbc 	bl	900199a0 <_ZN8touchgfx6ScreenC1Ev>
        : Widget(), alpha(255), color(0)
90007028:	4a78      	ldr	r2, [pc, #480]	; (9000720c <_ZN15Screen2ViewBaseC1Ev+0x1f4>)
9000702a:	2600      	movs	r6, #0
9000702c:	f64f 78ff 	movw	r8, #65535	; 0xffff
          touchable(false),
90007030:	f44f 7980 	mov.w	r9, #256	; 0x100
90007034:	f04f 0bff 	mov.w	fp, #255	; 0xff
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
90007038:	4975      	ldr	r1, [pc, #468]	; (90007210 <_ZN15Screen2ViewBaseC1Ev+0x1f8>)
9000703a:	f104 0a6c 	add.w	sl, r4, #108	; 0x6c
9000703e:	6422      	str	r2, [r4, #64]	; 0x40
        : DynamicDataGraph(capacity, values), current(0)
90007040:	f504 75c6 	add.w	r5, r4, #396	; 0x18c
        : Widget(), bitmap(bmp), alpha(255)
90007044:	4a73      	ldr	r2, [pc, #460]	; (90007214 <_ZN15Screen2ViewBaseC1Ev+0x1fc>)
        Image::setBitmap(bmp);
90007046:	4650      	mov	r0, sl
90007048:	6021      	str	r1, [r4, #0]
9000704a:	a908      	add	r1, sp, #32
        : Widget(), bitmap(bmp), alpha(255)
9000704c:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
90007050:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
90007054:	66e2      	str	r2, [r4, #108]	; 0x6c
90007056:	63e6      	str	r6, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90007058:	6466      	str	r6, [r4, #68]	; 0x44
          cachedAbsX(0),
9000705a:	6626      	str	r6, [r4, #96]	; 0x60
          touchable(false),
9000705c:	f8a4 9064 	strh.w	r9, [r4, #100]	; 0x64
        : color(col)
90007060:	66a6      	str	r6, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
90007062:	6726      	str	r6, [r4, #112]	; 0x70
90007064:	f884 b066 	strb.w	fp, [r4, #102]	; 0x66
          cachedAbsX(0),
90007068:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
          touchable(false),
9000706c:	f8a4 9090 	strh.w	r9, [r4, #144]	; 0x90
        : typedTextId(id)
90007070:	4f69      	ldr	r7, [pc, #420]	; (90007218 <_ZN15Screen2ViewBaseC1Ev+0x200>)
90007072:	f8ad 8020 	strh.w	r8, [sp, #32]
90007076:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
          parent(0),
9000707a:	e9c4 6614 	strd	r6, r6, [r4, #80]	; 0x50
          nextDrawChainElement(0),
9000707e:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
90007082:	e9c4 661d 	strd	r6, r6, [r4, #116]	; 0x74
          parent(0),
90007086:	e9c4 661f 	strd	r6, r6, [r4, #124]	; 0x7c
          nextDrawChainElement(0),
9000708a:	e9c4 6621 	strd	r6, r6, [r4, #132]	; 0x84
        Image::setBitmap(bmp);
9000708e:	f00e fd0a 	bl	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90007092:	f04f 32ff 	mov.w	r2, #4294967295
        : TextAreaWithWildcardBase(), wc1(0)
90007096:	4961      	ldr	r1, [pc, #388]	; (9000721c <_ZN15Screen2ViewBaseC1Ev+0x204>)
          updateTicksInterval(updateInterval),
90007098:	2301      	movs	r3, #1
          running(false)
9000709a:	4861      	ldr	r0, [pc, #388]	; (90007220 <_ZN15Screen2ViewBaseC1Ev+0x208>)
          startId(BITMAP_INVALID),
9000709c:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
900070a0:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900070a4:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
          updateTicksInterval(updateInterval),
900070a8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
900070ac:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
          running(false)
900070b0:	66e0      	str	r0, [r4, #108]	; 0x6c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
900070b2:	4628      	mov	r0, r5
        : animationDoneAction(0),
900070b4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
          running(false)
900070b8:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
          touchable(false),
900070bc:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
900070c0:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
        : color(col)
900070c4:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900070c8:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
900070cc:	f8c4 b0de 	str.w	fp, [r4, #222]	; 0xde
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900070d0:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
        : x(0), y(0), width(0), height(0)
900070d4:	e9c4 662b 	strd	r6, r6, [r4, #172]	; 0xac
900070d8:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
          nextSibling(0),
900070dc:	e9c4 662f 	strd	r6, r6, [r4, #188]	; 0xbc
          cachedAbsX(0),
900070e0:	e9c4 6631 	strd	r6, r6, [r4, #196]	; 0xc4
900070e4:	e9c4 663b 	strd	r6, r6, [r4, #236]	; 0xec
900070e8:	e9c4 663e 	strd	r6, r6, [r4, #248]	; 0xf8
900070ec:	e9c4 6640 	strd	r6, r6, [r4, #256]	; 0x100
          nextSibling(0),
900070f0:	e9c4 6642 	strd	r6, r6, [r4, #264]	; 0x108
          cachedAbsX(0),
900070f4:	e9c4 6644 	strd	r6, r6, [r4, #272]	; 0x110
          touchable(false),
900070f8:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
900070fc:	f8a4 8120 	strh.w	r8, [r4, #288]	; 0x120
90007100:	f8a4 816c 	strh.w	r8, [r4, #364]	; 0x16c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007104:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
90007108:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
9000710c:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
90007110:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
        : color(col)
90007114:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
90007118:	f8a4 6128 	strh.w	r6, [r4, #296]	; 0x128
9000711c:	f8c4 b12a 	str.w	fp, [r4, #298]	; 0x12a
90007120:	f8c4 b176 	str.w	fp, [r4, #374]	; 0x176
              text(0)
90007124:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
90007128:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
9000712c:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90007130:	f8a4 6174 	strh.w	r6, [r4, #372]	; 0x174
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007134:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90007138:	f8df 8104 	ldr.w	r8, [pc, #260]	; 90007240 <_ZN15Screen2ViewBaseC1Ev+0x228>
9000713c:	e9c4 624c 	strd	r6, r2, [r4, #304]	; 0x130
90007140:	e9c4 614f 	strd	r6, r1, [r4, #316]	; 0x13c
        : x(0), y(0), width(0), height(0)
90007144:	e9c4 6651 	strd	r6, r6, [r4, #324]	; 0x144
90007148:	2118      	movs	r1, #24
9000714a:	e9c4 6653 	strd	r6, r6, [r4, #332]	; 0x14c
          nextSibling(0),
9000714e:	e9c4 6655 	strd	r6, r6, [r4, #340]	; 0x154
          cachedAbsX(0),
90007152:	e9c4 6657 	strd	r6, r6, [r4, #348]	; 0x15c
90007156:	e9c4 6661 	strd	r6, r6, [r4, #388]	; 0x184
9000715a:	f00d fb09 	bl	90014770 <_ZN8touchgfx17AbstractDataGraphC1Es>
        return i * scale;
9000715e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007162:	4930      	ldr	r1, [pc, #192]	; (90007224 <_ZN15Screen2ViewBaseC1Ev+0x20c>)
90007164:	2301      	movs	r3, #1
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90007166:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
90007168:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
9000716c:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
        return i * scale;
90007170:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90007174:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
{
public:
    GraphWrapAndOverwrite()
        : GraphWrapAndOverwriteData(CAPACITY, y)
90007178:	f504 7137 	add.w	r1, r4, #732	; 0x2dc
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
9000717c:	e9c4 36b2 	strd	r3, r6, [r4, #712]	; 0x2c8
90007180:	f8c4 12d0 	str.w	r1, [r4, #720]	; 0x2d0
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
90007184:	4631      	mov	r1, r6
90007186:	f00c ffae 	bl	900140e6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>
9000718a:	4a27      	ldr	r2, [pc, #156]	; (90007228 <_ZN15Screen2ViewBaseC1Ev+0x210>)
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
9000718c:	f504 735b 	add.w	r3, r4, #876	; 0x36c
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
90007190:	f504 704f 	add.w	r0, r4, #828	; 0x33c
90007194:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
        : DynamicDataGraph(capacity, values), current(0)
90007198:	f8a4 62d8 	strh.w	r6, [r4, #728]	; 0x2d8
9000719c:	ee08 0a10 	vmov	s16, r0
900071a0:	9303      	str	r3, [sp, #12]
900071a2:	f00c ff53 	bl	9001404c <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
900071a6:	2302      	movs	r3, #2
900071a8:	4a20      	ldr	r2, [pc, #128]	; (9000722c <_ZN15Screen2ViewBaseC1Ev+0x214>)
        : widgetWidth(0)
900071aa:	f8a4 6370 	strh.w	r6, [r4, #880]	; 0x370
900071ae:	f884 3368 	strb.w	r3, [r4, #872]	; 0x368
900071b2:	f8c4 233c 	str.w	r2, [r4, #828]	; 0x33c
900071b6:	f8d8 3000 	ldr.w	r3, [r8]
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
        : AbstractPainter()
900071ba:	4a1d      	ldr	r2, [pc, #116]	; (90007230 <_ZN15Screen2ViewBaseC1Ev+0x218>)
900071bc:	f8c4 236c 	str.w	r2, [r4, #876]	; 0x36c
900071c0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900071c4:	2a00      	cmp	r2, #0
900071c6:	d03f      	beq.n	90007248 <_ZN15Screen2ViewBaseC1Ev+0x230>
900071c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900071ca:	2800      	cmp	r0, #0
900071cc:	f000 85c3 	beq.w	90007d56 <_ZN15Screen2ViewBaseC1Ev+0xd3e>
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
900071d0:	6803      	ldr	r3, [r0, #0]
900071d2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 90007244 <_ZN15Screen2ViewBaseC1Ev+0x22c>
900071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900071d8:	454a      	cmp	r2, r9
900071da:	d043      	beq.n	90007264 <_ZN15Screen2ViewBaseC1Ev+0x24c>
900071dc:	4790      	blx	r2
        return auxiliaryLCD;
900071de:	f8d8 3000 	ldr.w	r3, [r8]
900071e2:	fab0 f680 	clz	r6, r0
900071e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900071e8:	0976      	lsrs	r6, r6, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
900071ea:	b140      	cbz	r0, 900071fe <_ZN15Screen2ViewBaseC1Ev+0x1e6>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
900071ec:	6803      	ldr	r3, [r0, #0]
900071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071f0:	454b      	cmp	r3, r9
900071f2:	d037      	beq.n	90007264 <_ZN15Screen2ViewBaseC1Ev+0x24c>
900071f4:	4798      	blx	r3
900071f6:	2800      	cmp	r0, #0
900071f8:	bf08      	it	eq
900071fa:	f046 0601 	orreq.w	r6, r6, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
900071fe:	bb8e      	cbnz	r6, 90007264 <_ZN15Screen2ViewBaseC1Ev+0x24c>
90007200:	4b0c      	ldr	r3, [pc, #48]	; (90007234 <_ZN15Screen2ViewBaseC1Ev+0x21c>)
90007202:	212c      	movs	r1, #44	; 0x2c
90007204:	4a0c      	ldr	r2, [pc, #48]	; (90007238 <_ZN15Screen2ViewBaseC1Ev+0x220>)
90007206:	480d      	ldr	r0, [pc, #52]	; (9000723c <_ZN15Screen2ViewBaseC1Ev+0x224>)
90007208:	f020 fa74 	bl	900276f4 <__assert_func>
9000720c:	9002c338 	.word	0x9002c338
90007210:	9002b3bc 	.word	0x9002b3bc
90007214:	9002c3a0 	.word	0x9002c3a0
90007218:	9002a698 	.word	0x9002a698
9000721c:	9002ae70 	.word	0x9002ae70
90007220:	9002c22c 	.word	0x9002c22c
90007224:	9002be78 	.word	0x9002be78
90007228:	9002b20c 	.word	0x9002b20c
9000722c:	9002c140 	.word	0x9002c140
90007230:	9002a13c 	.word	0x9002a13c
90007234:	9002b104 	.word	0x9002b104
90007238:	9002b164 	.word	0x9002b164
9000723c:	9002b1a0 	.word	0x9002b1a0
90007240:	240281ec 	.word	0x240281ec
90007244:	900023f5 	.word	0x900023f5
        return instance->lcdRef;
90007248:	6898      	ldr	r0, [r3, #8]
9000724a:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 90007620 <_ZN15Screen2ViewBaseC1Ev+0x608>
        bool compat = HAL::lcd().framebufferFormat() == format;
9000724e:	6802      	ldr	r2, [r0, #0]
90007250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90007252:	454a      	cmp	r2, r9
90007254:	d1c2      	bne.n	900071dc <_ZN15Screen2ViewBaseC1Ev+0x1c4>
        return auxiliaryLCD;
90007256:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
90007258:	b120      	cbz	r0, 90007264 <_ZN15Screen2ViewBaseC1Ev+0x24c>
        bool compat = HAL::lcd().framebufferFormat() == format;
9000725a:	6803      	ldr	r3, [r0, #0]
9000725c:	2601      	movs	r6, #1
9000725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
90007260:	454b      	cmp	r3, r9
90007262:	d1c7      	bne.n	900071f4 <_ZN15Screen2ViewBaseC1Ev+0x1dc>
90007264:	4bdc      	ldr	r3, [pc, #880]	; (900075d8 <_ZN15Screen2ViewBaseC1Ev+0x5c0>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
90007266:	2600      	movs	r6, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90007268:	f04f 3bff 	mov.w	fp, #4294967295
        T::add(text);
9000726c:	f504 796d 	add.w	r9, r4, #948	; 0x3b4
90007270:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
90007274:	3324      	adds	r3, #36	; 0x24
90007276:	f504 7060 	add.w	r0, r4, #896	; 0x380
9000727a:	4649      	mov	r1, r9
9000727c:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
        : pressed(false), alpha(255), action(0)
90007280:	f44f 437f 	mov.w	r3, #65280	; 0xff00
90007284:	f8c4 73dc 	str.w	r7, [r4, #988]	; 0x3dc
90007288:	ee08 0a90 	vmov	s17, r0
9000728c:	f8a4 33ac 	strh.w	r3, [r4, #940]	; 0x3ac
        touchable = touch;
90007290:	f240 1301 	movw	r3, #257	; 0x101
90007294:	f8c4 6378 	str.w	r6, [r4, #888]	; 0x378
90007298:	f104 0804 	add.w	r8, r4, #4
9000729c:	f8a4 33a4 	strh.w	r3, [r4, #932]	; 0x3a4
        : T()
900072a0:	4bce      	ldr	r3, [pc, #824]	; (900075dc <_ZN15Screen2ViewBaseC1Ev+0x5c4>)
900072a2:	f8c4 63a8 	str.w	r6, [r4, #936]	; 0x3a8
900072a6:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
          touchable(false),
900072aa:	f44f 7380 	mov.w	r3, #256	; 0x100
900072ae:	f8c4 63b0 	str.w	r6, [r4, #944]	; 0x3b0
900072b2:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
900072b6:	4bca      	ldr	r3, [pc, #808]	; (900075e0 <_ZN15Screen2ViewBaseC1Ev+0x5c8>)
        : color(col)
900072b8:	f8c4 63e4 	str.w	r6, [r4, #996]	; 0x3e4
900072bc:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
900072c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
900072c4:	f8a4 63e8 	strh.w	r6, [r4, #1000]	; 0x3e8
900072c8:	f8a4 33e0 	strh.w	r3, [r4, #992]	; 0x3e0
900072cc:	23ff      	movs	r3, #255	; 0xff
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900072ce:	f8c4 63f0 	str.w	r6, [r4, #1008]	; 0x3f0
900072d2:	f8c4 33ea 	str.w	r3, [r4, #1002]	; 0x3ea
        : x(0), y(0), width(0), height(0)
900072d6:	e9c4 66e1 	strd	r6, r6, [r4, #900]	; 0x384
900072da:	e9c4 66e3 	strd	r6, r6, [r4, #908]	; 0x38c
          nextSibling(0),
900072de:	e9c4 66e5 	strd	r6, r6, [r4, #916]	; 0x394
          cachedAbsX(0),
900072e2:	e9c4 66e7 	strd	r6, r6, [r4, #924]	; 0x39c
900072e6:	e9c4 66ee 	strd	r6, r6, [r4, #952]	; 0x3b8
900072ea:	e9c4 66f0 	strd	r6, r6, [r4, #960]	; 0x3c0
          nextSibling(0),
900072ee:	e9c4 66f2 	strd	r6, r6, [r4, #968]	; 0x3c8
          cachedAbsX(0),
900072f2:	e9c4 66f4 	strd	r6, r6, [r4, #976]	; 0x3d0
              text(0)
900072f6:	e9c4 b6fd 	strd	fp, r6, [r4, #1012]	; 0x3f4
        : color(0)
900072fa:	f8c4 63fc 	str.w	r6, [r4, #1020]	; 0x3fc
900072fe:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
        T::add(text);
90007302:	f00b fc23 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
90007306:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
9000730a:	4ab6      	ldr	r2, [pc, #728]	; (900075e4 <_ZN15Screen2ViewBaseC1Ev+0x5cc>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
9000730c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
90007310:	f204 401c 	addw	r0, r4, #1052	; 0x41c
90007314:	641c      	str	r4, [r3, #64]	; 0x40
90007316:	63da      	str	r2, [r3, #60]	; 0x3c
90007318:	4ab3      	ldr	r2, [pc, #716]	; (900075e8 <_ZN15Screen2ViewBaseC1Ev+0x5d0>)
9000731a:	649e      	str	r6, [r3, #72]	; 0x48
9000731c:	645a      	str	r2, [r3, #68]	; 0x44
9000731e:	f00f fab3 	bl	90016888 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        rect.x = x;
90007322:	4bb2      	ldr	r3, [pc, #712]	; (900075ec <_ZN15Screen2ViewBaseC1Ev+0x5d4>)
90007324:	f104 0140 	add.w	r1, r4, #64	; 0x40
90007328:	4640      	mov	r0, r8
9000732a:	64a3      	str	r3, [r4, #72]	; 0x48
        color = newColor;
9000732c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
90007330:	6466      	str	r6, [r4, #68]	; 0x44
90007332:	66a3      	str	r3, [r4, #104]	; 0x68
90007334:	f00b fc0a 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007338:	4bad      	ldr	r3, [pc, #692]	; (900075f0 <_ZN15Screen2ViewBaseC1Ev+0x5d8>)
    animatedImage1.setBitmaps(BITMAP_FRAME_00_DELAY_0_05S_ID, BITMAP_FRAME_07_DELAY_0_05S_ID);
9000733a:	2207      	movs	r2, #7
9000733c:	4650      	mov	r0, sl
9000733e:	6723      	str	r3, [r4, #112]	; 0x70
90007340:	4631      	mov	r1, r6
90007342:	f00d ff45 	bl	900151d0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(6);
90007346:	4650      	mov	r0, sl
90007348:	2106      	movs	r1, #6
9000734a:	f00d ff54 	bl	900151f6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
9000734e:	2301      	movs	r3, #1
90007350:	4650      	mov	r0, sl
90007352:	4631      	mov	r1, r6
90007354:	461a      	mov	r2, r3
90007356:	f00d fe93 	bl	90015080 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
9000735a:	4651      	mov	r1, sl
9000735c:	4640      	mov	r0, r8
    minTemperatureTextArea.setXY(16, 128);
9000735e:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
90007362:	f00b fbf3 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007366:	4aa3      	ldr	r2, [pc, #652]	; (900075f4 <_ZN15Screen2ViewBaseC1Ev+0x5dc>)
        setX(x);
90007368:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        color = newColor;
9000736c:	f8c4 b0d8 	str.w	fp, [r4, #216]	; 0xd8
        boundingArea = calculateBoundingArea();
90007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        rect.x = x;
90007374:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
90007378:	4a9f      	ldr	r2, [pc, #636]	; (900075f8 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        linespace = space;
9000737a:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
9000737e:	4293      	cmp	r3, r2
90007380:	f040 85e8 	bne.w	90007f54 <_ZN15Screen2ViewBaseC1Ev+0xf3c>
        boundingArea = calculateBoundingArea();
90007384:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
90007388:	e9c4 6b39 	strd	r6, fp, [r4, #228]	; 0xe4
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
9000738c:	f204 4304 	addw	r3, r4, #1028	; 0x404
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007390:	f8df b290 	ldr.w	fp, [pc, #656]	; 90007624 <_ZN15Screen2ViewBaseC1Ev+0x60c>
90007394:	9302      	str	r3, [sp, #8]
90007396:	f8db 3000 	ldr.w	r3, [fp]
9000739a:	2b00      	cmp	r3, #0
9000739c:	f000 8606 	beq.w	90007fac <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900073a0:	4b96      	ldr	r3, [pc, #600]	; (900075fc <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
900073a2:	881b      	ldrh	r3, [r3, #0]
900073a4:	2b02      	cmp	r3, #2
900073a6:	f240 85fb 	bls.w	90007fa0 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
900073aa:	4b95      	ldr	r3, [pc, #596]	; (90007600 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
900073ac:	2102      	movs	r1, #2
    temperatureTextArea.setXY(16, 61);
900073ae:	f104 06f4 	add.w	r6, r4, #244	; 0xf4
900073b2:	6818      	ldr	r0, [r3, #0]
900073b4:	f000 ff8e 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4SII).getText());
900073b8:	4a92      	ldr	r2, [pc, #584]	; (90007604 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
900073ba:	4603      	mov	r3, r0
900073bc:	2104      	movs	r1, #4
900073be:	9802      	ldr	r0, [sp, #8]
900073c0:	f013 ffac 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
900073c4:	9b02      	ldr	r3, [sp, #8]
    minTemperatureTextArea.resizeToCurrentText();
900073c6:	4650      	mov	r0, sl
900073c8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
900073cc:	f00e fa84 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900073d0:	2303      	movs	r3, #3
    minTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JNB3));
900073d2:	a908      	add	r1, sp, #32
900073d4:	4650      	mov	r0, sl
900073d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900073da:	9708      	str	r7, [sp, #32]
900073dc:	f00e fa9c 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900073e0:	4651      	mov	r1, sl
900073e2:	4640      	mov	r0, r8
900073e4:	f00b fbb2 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
900073e8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
        setY(y);
900073ec:	4882      	ldr	r0, [pc, #520]	; (900075f8 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        color = newColor;
900073ee:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
900073f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        rect.x = x;
900073f6:	4b84      	ldr	r3, [pc, #528]	; (90007608 <_ZN15Screen2ViewBaseC1Ev+0x5f0>)
900073f8:	4282      	cmp	r2, r0
        color = newColor;
900073fa:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
900073fe:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
        linespace = space;
90007402:	f04f 0300 	mov.w	r3, #0
90007406:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
        boundingArea = calculateBoundingArea();
9000740a:	f040 85af 	bne.w	90007f6c <_ZN15Screen2ViewBaseC1Ev+0xf54>
9000740e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
90007412:	e9c4 314c 	strd	r3, r1, [r4, #304]	; 0x130
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007416:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DG5G).getText());
9000741a:	f204 4a0c 	addw	sl, r4, #1036	; 0x40c
9000741e:	2b00      	cmp	r3, #0
90007420:	f000 85c4 	beq.w	90007fac <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007424:	4b75      	ldr	r3, [pc, #468]	; (900075fc <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
90007426:	881b      	ldrh	r3, [r3, #0]
90007428:	2b06      	cmp	r3, #6
9000742a:	f240 85b9 	bls.w	90007fa0 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
9000742e:	4b74      	ldr	r3, [pc, #464]	; (90007600 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
90007430:	2106      	movs	r1, #6
90007432:	6818      	ldr	r0, [r3, #0]
90007434:	f000 ff4e 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90007438:	4a72      	ldr	r2, [pc, #456]	; (90007604 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
9000743a:	4603      	mov	r3, r0
9000743c:	2104      	movs	r1, #4
9000743e:	4650      	mov	r0, sl
90007440:	f013 ff6c 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    temperatureTextArea.resizeToCurrentText();
90007444:	4630      	mov	r0, r6
90007446:	f8c4 a13c 	str.w	sl, [r4, #316]	; 0x13c
9000744a:	f00e fa45 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
9000744e:	2307      	movs	r3, #7
    temperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DSQV));
90007450:	4630      	mov	r0, r6
90007452:	a908      	add	r1, sp, #32
90007454:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90007458:	9708      	str	r7, [sp, #32]
9000745a:	f00e fa5d 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000745e:	4631      	mov	r1, r6
90007460:	4640      	mov	r0, r8
90007462:	f00b fb73 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        setX(x);
90007466:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
9000746a:	4863      	ldr	r0, [pc, #396]	; (900075f8 <_ZN15Screen2ViewBaseC1Ev+0x5e0>)
        color = newColor;
9000746c:	f04f 31ff 	mov.w	r1, #4294967295
        boundingArea = calculateBoundingArea();
90007470:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    maxTemperatureTextArea.setXY(16, 93);
90007474:	f504 76a0 	add.w	r6, r4, #320	; 0x140
        rect.x = x;
90007478:	4b64      	ldr	r3, [pc, #400]	; (9000760c <_ZN15Screen2ViewBaseC1Ev+0x5f4>)
9000747a:	4282      	cmp	r2, r0
        color = newColor;
9000747c:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
90007480:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
        linespace = space;
90007484:	f04f 0300 	mov.w	r3, #0
90007488:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
9000748c:	f040 857b 	bne.w	90007f86 <_ZN15Screen2ViewBaseC1Ev+0xf6e>
        boundingArea = calculateBoundingArea();
90007490:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
90007494:	e9c4 315f 	strd	r3, r1, [r4, #380]	; 0x17c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007498:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HQVR).getText());
9000749c:	f204 4a14 	addw	sl, r4, #1044	; 0x414
900074a0:	2b00      	cmp	r3, #0
900074a2:	f000 8583 	beq.w	90007fac <_ZN15Screen2ViewBaseC1Ev+0xf94>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900074a6:	4b55      	ldr	r3, [pc, #340]	; (900075fc <_ZN15Screen2ViewBaseC1Ev+0x5e4>)
900074a8:	881b      	ldrh	r3, [r3, #0]
900074aa:	2b04      	cmp	r3, #4
900074ac:	f240 8578 	bls.w	90007fa0 <_ZN15Screen2ViewBaseC1Ev+0xf88>
        return texts->getText(typedTextId);
900074b0:	4b53      	ldr	r3, [pc, #332]	; (90007600 <_ZN15Screen2ViewBaseC1Ev+0x5e8>)
900074b2:	2104      	movs	r1, #4
900074b4:	6818      	ldr	r0, [r3, #0]
900074b6:	f000 ff0d 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
900074ba:	4a52      	ldr	r2, [pc, #328]	; (90007604 <_ZN15Screen2ViewBaseC1Ev+0x5ec>)
900074bc:	4603      	mov	r3, r0
900074be:	2104      	movs	r1, #4
900074c0:	4650      	mov	r0, sl
900074c2:	f013 ff2b 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    maxTemperatureTextArea.resizeToCurrentText();
900074c6:	4630      	mov	r0, r6
900074c8:	f8c4 a188 	str.w	sl, [r4, #392]	; 0x188
        : typedTextId(id)
900074cc:	f04f 0a05 	mov.w	sl, #5
900074d0:	f00e fa02 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    maxTemperatureTextArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XZKY));
900074d4:	a908      	add	r1, sp, #32
900074d6:	4630      	mov	r0, r6
900074d8:	9708      	str	r7, [sp, #32]
900074da:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
900074de:	f00e fa1b 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900074e2:	4631      	mov	r1, r6
900074e4:	4640      	mov	r0, r8
900074e6:	f00b fb31 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900074ea:	4a49      	ldr	r2, [pc, #292]	; (90007610 <_ZN15Screen2ViewBaseC1Ev+0x5f8>)
        setX(x);
900074ec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
        setWidth(width);
900074f0:	f240 11c7 	movw	r1, #455	; 0x1c7
900074f4:	4628      	mov	r0, r5
900074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        rect.x = x;
900074f8:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
        setWidth(width);
900074fc:	4798      	blx	r3
        setHeight(height);
900074fe:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
90007502:	2161      	movs	r1, #97	; 0x61
90007504:	4628      	mov	r0, r5
90007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007508:	4798      	blx	r3
        setScaleX(scale, updateData);
9000750a:	2200      	movs	r2, #0
9000750c:	2101      	movs	r1, #1
9000750e:	4628      	mov	r0, r5
90007510:	f00d f99a 	bl	90014848 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>
        setScaleY(scale, updateData);
90007514:	2200      	movs	r2, #0
90007516:	2101      	movs	r1, #1
90007518:	4628      	mov	r0, r5
9000751a:	f00d f9c7 	bl	900148ac <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>
    temperatureGraph.setGraphAreaMargin(0, 0, 0, 0);
9000751e:	2300      	movs	r3, #0
90007520:	4628      	mov	r0, r5
90007522:	461a      	mov	r2, r3
90007524:	4619      	mov	r1, r3
90007526:	9300      	str	r3, [sp, #0]
90007528:	f00d f8d3 	bl	900146d2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    temperatureGraph.setGraphAreaPadding(0, 0, 0, 0);
9000752c:	2300      	movs	r3, #0
9000752e:	4628      	mov	r0, r5
90007530:	461a      	mov	r2, r3
90007532:	4619      	mov	r1, r3
90007534:	9300      	str	r3, [sp, #0]
90007536:	f00d f80a 	bl	9001454e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
        return int2scaled(i, yScale);
9000753a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
9000753e:	4628      	mov	r0, r5
        return i * scale;
90007540:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
90007544:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
90007548:	0092      	lsls	r2, r2, #2
9000754a:	0049      	lsls	r1, r1, #1
9000754c:	f00c fdee 	bl	9001412c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>
        canvasPainter = &painter;
90007550:	9b03      	ldr	r3, [sp, #12]
    temperatureGraph.addGraphElement(temperatureGraphLine1);
90007552:	ee18 1a10 	vmov	r1, s16
90007556:	4628      	mov	r0, r5
90007558:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
9000755c:	4b2d      	ldr	r3, [pc, #180]	; (90007614 <_ZN15Screen2ViewBaseC1Ev+0x5fc>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
9000755e:	f884 a368 	strb.w	sl, [r4, #872]	; 0x368
90007562:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
90007566:	f24e 73c0 	movw	r3, #59328	; 0xe7c0
9000756a:	f8a4 337c 	strh.w	r3, [r4, #892]	; 0x37c
9000756e:	f00c fff9 	bl	90014564 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
90007572:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007576:	ed9f 7a28 	vldr	s14, [pc, #160]	; 90007618 <_ZN15Screen2ViewBaseC1Ev+0x600>
9000757a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000757e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000758a:	f280 84d9 	bge.w	90007f40 <_ZN15Screen2ViewBaseC1Ev+0xf28>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000758e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007592:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007596:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000759a:	ee17 3a10 	vmov	r3, s14
9000759e:	3b01      	subs	r3, #1
900075a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
900075a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
900075a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900075ac:	ee17 1a90 	vmov	r1, s15
900075b0:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900075b2:	4628      	mov	r0, r5
900075b4:	f00d f999 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900075b8:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900075bc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9000761c <_ZN15Screen2ViewBaseC1Ev+0x604>
900075c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900075c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900075c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900075d0:	f280 84ac 	bge.w	90007f2c <_ZN15Screen2ViewBaseC1Ev+0xf14>
900075d4:	e044      	b.n	90007660 <_ZN15Screen2ViewBaseC1Ev+0x648>
900075d6:	bf00      	nop
900075d8:	9002bdc8 	.word	0x9002bdc8
900075dc:	9002af00 	.word	0x9002af00
900075e0:	9002c2a8 	.word	0x9002c2a8
900075e4:	9002b3a4 	.word	0x9002b3a4
900075e8:	900068bd 	.word	0x900068bd
900075ec:	011001e0 	.word	0x011001e0
900075f0:	ffb6ffa8 	.word	0xffb6ffa8
900075f4:	00800010 	.word	0x00800010
900075f8:	90005b61 	.word	0x90005b61
900075fc:	24028248 	.word	0x24028248
90007600:	24028250 	.word	0x24028250
90007604:	9002ae64 	.word	0x9002ae64
90007608:	003d0010 	.word	0x003d0010
9000760c:	005d0010 	.word	0x005d0010
90007610:	00a10010 	.word	0x00a10010
90007614:	ffe5fa00 	.word	0xffe5fa00
90007618:	41c2385c 	.word	0x41c2385c
9000761c:	4204d825 	.word	0x4204d825
90007620:	900023f5 	.word	0x900023f5
90007624:	24028244 	.word	0x24028244
90007628:	41bb9afe 	.word	0x41bb9afe
9000762c:	41da4f2d 	.word	0x41da4f2d
90007630:	41d58d8a 	.word	0x41d58d8a
90007634:	413608c4 	.word	0x413608c4
90007638:	418ae892 	.word	0x418ae892
9000763c:	41cf5b86 	.word	0x41cf5b86
90007640:	419fcf08 	.word	0x419fcf08
90007644:	41ebda95 	.word	0x41ebda95
90007648:	4208792b 	.word	0x4208792b
9000764c:	4194e713 	.word	0x4194e713
90007650:	4199b776 	.word	0x4199b776
90007654:	41b16782 	.word	0x41b16782
90007658:	4148ff6d 	.word	0x4148ff6d
9000765c:	41b62aa4 	.word	0x41b62aa4
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007660:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007664:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007668:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000766c:	ee17 3a10 	vmov	r3, s14
90007670:	3b01      	subs	r3, #1
90007672:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000767a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000767e:	ee17 1a90 	vmov	r1, s15
90007682:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007684:	4628      	mov	r0, r5
90007686:	f00d f930 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000768a:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000768e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 90007628 <_ZN15Screen2ViewBaseC1Ev+0x610>
90007692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007696:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000769a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076a2:	f280 8439 	bge.w	90007f18 <_ZN15Screen2ViewBaseC1Ev+0xf00>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076aa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076ae:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076b2:	ee17 3a10 	vmov	r3, s14
900076b6:	3b01      	subs	r3, #1
900076b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
900076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
900076c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900076c4:	ee17 1a90 	vmov	r1, s15
900076c8:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900076ca:	4628      	mov	r0, r5
900076cc:	f00d f90d 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900076d0:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900076d4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 9000762c <_ZN15Screen2ViewBaseC1Ev+0x614>
900076d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900076dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900076e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900076e8:	f280 840c 	bge.w	90007f04 <_ZN15Screen2ViewBaseC1Ev+0xeec>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900076ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900076f0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900076f4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900076f8:	ee17 3a10 	vmov	r3, s14
900076fc:	3b01      	subs	r3, #1
900076fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000770a:	ee17 1a90 	vmov	r1, s15
9000770e:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007710:	4628      	mov	r0, r5
90007712:	f00d f8ea 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007716:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000771a:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 90007630 <_ZN15Screen2ViewBaseC1Ev+0x618>
9000771e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007722:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000772e:	f280 83e0 	bge.w	90007ef2 <_ZN15Screen2ViewBaseC1Ev+0xeda>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007732:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007736:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000773a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000773e:	ee17 3a10 	vmov	r3, s14
90007742:	3b01      	subs	r3, #1
90007744:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007748:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000774c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007750:	ee17 1a90 	vmov	r1, s15
90007754:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007756:	4628      	mov	r0, r5
90007758:	f00d f8c7 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000775c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007760:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 90007634 <_ZN15Screen2ViewBaseC1Ev+0x61c>
90007764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007768:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000776c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007774:	f280 83b4 	bge.w	90007ee0 <_ZN15Screen2ViewBaseC1Ev+0xec8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007778:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000777c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007780:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007784:	ee17 3a10 	vmov	r3, s14
90007788:	3b01      	subs	r3, #1
9000778a:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000778e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007796:	ee17 1a90 	vmov	r1, s15
9000779a:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000779c:	4628      	mov	r0, r5
9000779e:	f00d f8a4 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900077a2:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900077a6:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 90007638 <_ZN15Screen2ViewBaseC1Ev+0x620>
900077aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900077ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900077b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900077b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900077ba:	f280 8388 	bge.w	90007ece <_ZN15Screen2ViewBaseC1Ev+0xeb6>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900077be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900077c2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900077c6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900077ca:	ee17 3a10 	vmov	r3, s14
900077ce:	3b01      	subs	r3, #1
900077d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
900077d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
900077d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900077dc:	ee17 1a90 	vmov	r1, s15
900077e0:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900077e2:	4628      	mov	r0, r5
900077e4:	f00d f881 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900077e8:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900077ec:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 9000763c <_ZN15Screen2ViewBaseC1Ev+0x624>
900077f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900077f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900077f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007800:	f280 835c 	bge.w	90007ebc <_ZN15Screen2ViewBaseC1Ev+0xea4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007804:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007808:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000780c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007810:	ee17 3a10 	vmov	r3, s14
90007814:	3b01      	subs	r3, #1
90007816:	ee77 7ac6 	vsub.f32	s15, s15, s12
9000781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000781e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007822:	ee17 1a90 	vmov	r1, s15
90007826:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007828:	4628      	mov	r0, r5
9000782a:	f00d f85e 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000782e:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007832:	ed1f 7a7d 	vldr	s14, [pc, #-500]	; 90007640 <_ZN15Screen2ViewBaseC1Ev+0x628>
90007836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000783a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000783e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007846:	f280 8330 	bge.w	90007eaa <_ZN15Screen2ViewBaseC1Ev+0xe92>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000784a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
9000784e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007852:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007856:	ee17 3a10 	vmov	r3, s14
9000785a:	3b01      	subs	r3, #1
9000785c:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007868:	ee17 1a90 	vmov	r1, s15
9000786c:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
9000786e:	4628      	mov	r0, r5
90007870:	f00d f83b 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007874:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007878:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 90007644 <_ZN15Screen2ViewBaseC1Ev+0x62c>
9000787c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007880:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000788c:	f280 8304 	bge.w	90007e98 <_ZN15Screen2ViewBaseC1Ev+0xe80>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007890:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007894:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007898:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000789c:	ee17 3a10 	vmov	r3, s14
900078a0:	3b01      	subs	r3, #1
900078a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
900078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900078ae:	ee17 1a90 	vmov	r1, s15
900078b2:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900078b4:	4628      	mov	r0, r5
900078b6:	f00d f818 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900078ba:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900078be:	ed1f 7a9e 	vldr	s14, [pc, #-632]	; 90007648 <_ZN15Screen2ViewBaseC1Ev+0x630>
900078c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900078c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900078ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900078d2:	f280 82d8 	bge.w	90007e86 <_ZN15Screen2ViewBaseC1Ev+0xe6e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900078d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900078da:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900078de:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900078e2:	ee17 3a10 	vmov	r3, s14
900078e6:	3b01      	subs	r3, #1
900078e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
900078ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
900078f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900078f4:	ee17 1a90 	vmov	r1, s15
900078f8:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900078fa:	4628      	mov	r0, r5
900078fc:	f00c fff5 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007900:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007904:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 9000764c <_ZN15Screen2ViewBaseC1Ev+0x634>
90007908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000790c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007918:	f280 82ac 	bge.w	90007e74 <_ZN15Screen2ViewBaseC1Ev+0xe5c>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
9000791c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007920:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007924:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007928:	ee17 3a10 	vmov	r3, s14
9000792c:	3b01      	subs	r3, #1
9000792e:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007932:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9000793a:	ee17 1a90 	vmov	r1, s15
9000793e:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007940:	4628      	mov	r0, r5
90007942:	f00c ffd2 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007946:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
9000794a:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 90007650 <_ZN15Screen2ViewBaseC1Ev+0x638>
9000794e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007952:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9000795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000795e:	f280 8280 	bge.w	90007e62 <_ZN15Screen2ViewBaseC1Ev+0xe4a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007962:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007966:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
9000796a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
9000796e:	ee17 3a10 	vmov	r3, s14
90007972:	3b01      	subs	r3, #1
90007974:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000797c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007980:	ee17 1a90 	vmov	r1, s15
90007984:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007986:	4628      	mov	r0, r5
90007988:	f00c ffaf 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
9000798c:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007990:	ed1f 7ad0 	vldr	s14, [pc, #-832]	; 90007654 <_ZN15Screen2ViewBaseC1Ev+0x63c>
90007994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007998:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
9000799c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900079a4:	f280 8254 	bge.w	90007e50 <_ZN15Screen2ViewBaseC1Ev+0xe38>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900079a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900079ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900079b0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900079b4:	ee17 3a10 	vmov	r3, s14
900079b8:	3b01      	subs	r3, #1
900079ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
900079be:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900079c6:	ee17 1a90 	vmov	r1, s15
900079ca:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
900079cc:	4628      	mov	r0, r5
900079ce:	f00c ff8c 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
900079d2:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
900079d6:	ed1f 7ae0 	vldr	s14, [pc, #-896]	; 90007658 <_ZN15Screen2ViewBaseC1Ev+0x640>
900079da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900079de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
900079e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
900079e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900079ea:	f280 820f 	bge.w	90007e0c <_ZN15Screen2ViewBaseC1Ev+0xdf4>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
900079ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900079f2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
900079f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
900079fa:	ee17 3a10 	vmov	r3, s14
900079fe:	3b01      	subs	r3, #1
90007a00:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007a0c:	ee17 1a90 	vmov	r1, s15
90007a10:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007a12:	4628      	mov	r0, r5
90007a14:	f00c ff69 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007a18:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007a1c:	ed1f 7af1 	vldr	s14, [pc, #-964]	; 9000765c <_ZN15Screen2ViewBaseC1Ev+0x644>
90007a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007a24:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007a30:	f280 81e3 	bge.w	90007dfa <_ZN15Screen2ViewBaseC1Ev+0xde2>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007a34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007a38:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007a3c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007a40:	ee17 3a10 	vmov	r3, s14
90007a44:	3b01      	subs	r3, #1
90007a46:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007a52:	ee17 1a90 	vmov	r1, s15
90007a56:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007a58:	4628      	mov	r0, r5
90007a5a:	f00c ff46 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007a5e:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007a62:	ed9f 7aef 	vldr	s14, [pc, #956]	; 90007e20 <_ZN15Screen2ViewBaseC1Ev+0xe08>
90007a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007a76:	f280 81b7 	bge.w	90007de8 <_ZN15Screen2ViewBaseC1Ev+0xdd0>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007a7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007a7e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007a82:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007a86:	ee17 3a10 	vmov	r3, s14
90007a8a:	3b01      	subs	r3, #1
90007a8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007a98:	ee17 1a90 	vmov	r1, s15
90007a9c:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007a9e:	4628      	mov	r0, r5
90007aa0:	f00c ff23 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007aa4:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007aa8:	ed9f 7ade 	vldr	s14, [pc, #888]	; 90007e24 <_ZN15Screen2ViewBaseC1Ev+0xe0c>
90007aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007abc:	f280 818b 	bge.w	90007dd6 <_ZN15Screen2ViewBaseC1Ev+0xdbe>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007ac0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007ac4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007ac8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007acc:	ee17 3a10 	vmov	r3, s14
90007ad0:	3b01      	subs	r3, #1
90007ad2:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ade:	ee17 1a90 	vmov	r1, s15
90007ae2:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007ae4:	4628      	mov	r0, r5
90007ae6:	f00c ff00 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007aea:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007aee:	ed9f 7ace 	vldr	s14, [pc, #824]	; 90007e28 <_ZN15Screen2ViewBaseC1Ev+0xe10>
90007af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007af6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b02:	f280 815f 	bge.w	90007dc4 <_ZN15Screen2ViewBaseC1Ev+0xdac>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007b0a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007b0e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007b12:	ee17 3a10 	vmov	r3, s14
90007b16:	3b01      	subs	r3, #1
90007b18:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007b24:	ee17 1a90 	vmov	r1, s15
90007b28:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007b2a:	4628      	mov	r0, r5
90007b2c:	f00c fedd 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007b30:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007b34:	ed9f 7abd 	vldr	s14, [pc, #756]	; 90007e2c <_ZN15Screen2ViewBaseC1Ev+0xe14>
90007b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b48:	f280 8133 	bge.w	90007db2 <_ZN15Screen2ViewBaseC1Ev+0xd9a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007b50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007b54:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007b58:	ee17 3a10 	vmov	r3, s14
90007b5c:	3b01      	subs	r3, #1
90007b5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007b6a:	ee17 1a90 	vmov	r1, s15
90007b6e:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007b70:	4628      	mov	r0, r5
90007b72:	f00c feba 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007b76:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007b7a:	ed9f 7aad 	vldr	s14, [pc, #692]	; 90007e30 <_ZN15Screen2ViewBaseC1Ev+0xe18>
90007b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007b82:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007b8e:	f280 8107 	bge.w	90007da0 <_ZN15Screen2ViewBaseC1Ev+0xd88>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007b92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007b96:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007b9a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007b9e:	ee17 3a10 	vmov	r3, s14
90007ba2:	3b01      	subs	r3, #1
90007ba4:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007bb0:	ee17 1a90 	vmov	r1, s15
90007bb4:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007bb6:	4628      	mov	r0, r5
90007bb8:	f00c fe97 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007bbc:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007bc0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 90007e34 <_ZN15Screen2ViewBaseC1Ev+0xe1c>
90007bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007bd4:	f280 80db 	bge.w	90007d8e <_ZN15Screen2ViewBaseC1Ev+0xd76>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007bd8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007bdc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007be0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007be4:	ee17 3a10 	vmov	r3, s14
90007be8:	3b01      	subs	r3, #1
90007bea:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007bf6:	ee17 1a90 	vmov	r1, s15
90007bfa:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007bfc:	4628      	mov	r0, r5
90007bfe:	f00c fe74 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007c02:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007c06:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 90007e38 <_ZN15Screen2ViewBaseC1Ev+0xe20>
90007c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007c1a:	f280 80af 	bge.w	90007d7c <_ZN15Screen2ViewBaseC1Ev+0xd64>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007c1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007c22:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007c26:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007c2a:	ee17 3a10 	vmov	r3, s14
90007c2e:	3b01      	subs	r3, #1
90007c30:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007c3c:	ee17 1a90 	vmov	r1, s15
90007c40:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007c42:	4628      	mov	r0, r5
90007c44:	f00c fe51 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
90007c48:	edd4 7a70 	vldr	s15, [r4, #448]	; 0x1c0
90007c4c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 90007e3c <_ZN15Screen2ViewBaseC1Ev+0xe24>
90007c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90007c54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
90007c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90007c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90007c60:	f280 8083 	bge.w	90007d6a <_ZN15Screen2ViewBaseC1Ev+0xd52>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
90007c64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90007c68:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
90007c6c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
90007c70:	ee17 3a10 	vmov	r3, s14
90007c74:	3b01      	subs	r3, #1
90007c76:	ee77 7ac6 	vsub.f32	s15, s15, s12
90007c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007c82:	ee17 1a90 	vmov	r1, s15
90007c86:	4419      	add	r1, r3
        return addDataPointScaled(float2scaledY(y));
90007c88:	4628      	mov	r0, r5
        boundingArea = calculateBoundingArea();
90007c8a:	f109 063c 	add.w	r6, r9, #60	; 0x3c
90007c8e:	f00c fe2c 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
90007c92:	4629      	mov	r1, r5
90007c94:	4640      	mov	r0, r8
90007c96:	ad04      	add	r5, sp, #16
90007c98:	f00a ff58 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90007c9c:	9708      	str	r7, [sp, #32]
90007c9e:	2700      	movs	r7, #0
        text.setTypedText(t);
90007ca0:	4648      	mov	r0, r9
90007ca2:	a908      	add	r1, sp, #32
90007ca4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
90007ca8:	f00d fe36 	bl	90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        rect.width = width;
90007cac:	f8b4 3388 	ldrh.w	r3, [r4, #904]	; 0x388
90007cb0:	4649      	mov	r1, r9
90007cb2:	4628      	mov	r0, r5
        return rect.height;
90007cb4:	f9b4 a38a 	ldrsh.w	sl, [r4, #906]	; 0x38a
        rect.width = width;
90007cb8:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
90007cbc:	f00d fb84 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90007cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007cc4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007cc8:	4649      	mov	r1, r9
90007cca:	4628      	mov	r0, r5
        rect.height = height;
90007ccc:	f8a4 a3be 	strh.w	sl, [r4, #958]	; 0x3be
        colorReleased = newColorReleased;
90007cd0:	f04f 3aff 	mov.w	sl, #4294967295
90007cd4:	f00d fb78 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        rect.width = width;
90007cd8:	234e      	movs	r3, #78	; 0x4e
90007cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007cde:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007ce2:	4649      	mov	r1, r9
90007ce4:	4628      	mov	r0, r5
        rect.x = x;
90007ce6:	f8c4 73b8 	str.w	r7, [r4, #952]	; 0x3b8
        rect.width = width;
90007cea:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
90007cee:	f00d fb6b 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        rect.height = height;
90007cf2:	231c      	movs	r3, #28
90007cf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007cf8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90007cfc:	4649      	mov	r1, r9
90007cfe:	4628      	mov	r0, r5
90007d00:	f8a4 33be 	strh.w	r3, [r4, #958]	; 0x3be
90007d04:	f00d fb60 	bl	900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007d08:	f894 33ac 	ldrb.w	r3, [r4, #940]	; 0x3ac
        rect.x = x;
90007d0c:	f8df e134 	ldr.w	lr, [pc, #308]	; 90007e44 <_ZN15Screen2ViewBaseC1Ev+0xe2c>
90007d10:	42bb      	cmp	r3, r7
        colorPressed = newColorPressed;
90007d12:	4f4b      	ldr	r7, [pc, #300]	; (90007e40 <_ZN15Screen2ViewBaseC1Ev+0xe28>)
    backButton.setAction(flexButtonCallback);
90007d14:	f242 033c 	movw	r3, #8252	; 0x203c
90007d18:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90007e48 <_ZN15Screen2ViewBaseC1Ev+0xe30>
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
90007d1c:	bf0c      	ite	eq
90007d1e:	46d1      	moveq	r9, sl
90007d20:	46b9      	movne	r9, r7
90007d22:	4423      	add	r3, r4
90007d24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90007d28:	e886 0007 	stmia.w	r6, {r0, r1, r2}
90007d2c:	4640      	mov	r0, r8
90007d2e:	ee18 1a90 	vmov	r1, s17
        colorReleased = newColorReleased;
90007d32:	f8c4 a3fc 	str.w	sl, [r4, #1020]	; 0x3fc
        colorPressed = newColorPressed;
90007d36:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
        color = newColor;
90007d3a:	f8c4 93e4 	str.w	r9, [r4, #996]	; 0x3e4
        action = &callback;
90007d3e:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
90007d42:	e9c4 ece1 	strd	lr, ip, [r4, #900]	; 0x384
90007d46:	f00a ff01 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90007d4a:	4620      	mov	r0, r4
90007d4c:	b00b      	add	sp, #44	; 0x2c
90007d4e:	ecbd 8b02 	vpop	{d8}
90007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return instance->lcdRef;
90007d56:	6898      	ldr	r0, [r3, #8]
90007d58:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 90007e4c <_ZN15Screen2ViewBaseC1Ev+0xe34>
        bool compat = HAL::lcd().framebufferFormat() == format;
90007d5c:	6803      	ldr	r3, [r0, #0]
90007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007d60:	454a      	cmp	r2, r9
90007d62:	f43f aa7f 	beq.w	90007264 <_ZN15Screen2ViewBaseC1Ev+0x24c>
90007d66:	f7ff ba39 	b.w	900071dc <_ZN15Screen2ViewBaseC1Ev+0x1c4>
            return (int)(fs + 0.5f);
90007d6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d76:	ee17 1a90 	vmov	r1, s15
90007d7a:	e785      	b.n	90007c88 <_ZN15Screen2ViewBaseC1Ev+0xc70>
90007d7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d80:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d88:	ee17 1a90 	vmov	r1, s15
90007d8c:	e759      	b.n	90007c42 <_ZN15Screen2ViewBaseC1Ev+0xc2a>
90007d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007d92:	ee77 7a87 	vadd.f32	s15, s15, s14
90007d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007d9a:	ee17 1a90 	vmov	r1, s15
90007d9e:	e72d      	b.n	90007bfc <_ZN15Screen2ViewBaseC1Ev+0xbe4>
90007da0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007da4:	ee77 7a87 	vadd.f32	s15, s15, s14
90007da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007dac:	ee17 1a90 	vmov	r1, s15
90007db0:	e701      	b.n	90007bb6 <_ZN15Screen2ViewBaseC1Ev+0xb9e>
90007db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007db6:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007dbe:	ee17 1a90 	vmov	r1, s15
90007dc2:	e6d5      	b.n	90007b70 <_ZN15Screen2ViewBaseC1Ev+0xb58>
90007dc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007dd0:	ee17 1a90 	vmov	r1, s15
90007dd4:	e6a9      	b.n	90007b2a <_ZN15Screen2ViewBaseC1Ev+0xb12>
90007dd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007dda:	ee77 7a87 	vadd.f32	s15, s15, s14
90007dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007de2:	ee17 1a90 	vmov	r1, s15
90007de6:	e67d      	b.n	90007ae4 <_ZN15Screen2ViewBaseC1Ev+0xacc>
90007de8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007dec:	ee77 7a87 	vadd.f32	s15, s15, s14
90007df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007df4:	ee17 1a90 	vmov	r1, s15
90007df8:	e651      	b.n	90007a9e <_ZN15Screen2ViewBaseC1Ev+0xa86>
90007dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e06:	ee17 1a90 	vmov	r1, s15
90007e0a:	e625      	b.n	90007a58 <_ZN15Screen2ViewBaseC1Ev+0xa40>
90007e0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e10:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e18:	ee17 1a90 	vmov	r1, s15
90007e1c:	e5f9      	b.n	90007a12 <_ZN15Screen2ViewBaseC1Ev+0x9fa>
90007e1e:	bf00      	nop
90007e20:	42060a5d 	.word	0x42060a5d
90007e24:	41c00e31 	.word	0x41c00e31
90007e28:	41d4814a 	.word	0x41d4814a
90007e2c:	41dd557c 	.word	0x41dd557c
90007e30:	41420f71 	.word	0x41420f71
90007e34:	41813c4b 	.word	0x41813c4b
90007e38:	41d060bf 	.word	0x41d060bf
90007e3c:	41a12cff 	.word	0x41a12cff
90007e40:	ff9e9d9d 	.word	0xff9e9d9d
90007e44:	0017000d 	.word	0x0017000d
90007e48:	001c004e 	.word	0x001c004e
90007e4c:	900023f5 	.word	0x900023f5
90007e50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e54:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e5c:	ee17 1a90 	vmov	r1, s15
90007e60:	e5b4      	b.n	900079cc <_ZN15Screen2ViewBaseC1Ev+0x9b4>
90007e62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e66:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e6e:	ee17 1a90 	vmov	r1, s15
90007e72:	e588      	b.n	90007986 <_ZN15Screen2ViewBaseC1Ev+0x96e>
90007e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e78:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e80:	ee17 1a90 	vmov	r1, s15
90007e84:	e55c      	b.n	90007940 <_ZN15Screen2ViewBaseC1Ev+0x928>
90007e86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
90007e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007e92:	ee17 1a90 	vmov	r1, s15
90007e96:	e530      	b.n	900078fa <_ZN15Screen2ViewBaseC1Ev+0x8e2>
90007e98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ea4:	ee17 1a90 	vmov	r1, s15
90007ea8:	e504      	b.n	900078b4 <_ZN15Screen2ViewBaseC1Ev+0x89c>
90007eaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007eae:	ee77 7a87 	vadd.f32	s15, s15, s14
90007eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007eb6:	ee17 1a90 	vmov	r1, s15
90007eba:	e4d8      	b.n	9000786e <_ZN15Screen2ViewBaseC1Ev+0x856>
90007ebc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007ec8:	ee17 1a90 	vmov	r1, s15
90007ecc:	e4ac      	b.n	90007828 <_ZN15Screen2ViewBaseC1Ev+0x810>
90007ece:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007eda:	ee17 1a90 	vmov	r1, s15
90007ede:	e480      	b.n	900077e2 <_ZN15Screen2ViewBaseC1Ev+0x7ca>
90007ee0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
90007ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007eec:	ee17 1a90 	vmov	r1, s15
90007ef0:	e454      	b.n	9000779c <_ZN15Screen2ViewBaseC1Ev+0x784>
90007ef2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
90007efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007efe:	ee17 1a90 	vmov	r1, s15
90007f02:	e428      	b.n	90007756 <_ZN15Screen2ViewBaseC1Ev+0x73e>
90007f04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007f08:	ee77 7a87 	vadd.f32	s15, s15, s14
90007f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007f10:	ee17 1a90 	vmov	r1, s15
90007f14:	f7ff bbfc 	b.w	90007710 <_ZN15Screen2ViewBaseC1Ev+0x6f8>
90007f18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
90007f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007f24:	ee17 1a90 	vmov	r1, s15
90007f28:	f7ff bbcf 	b.w	900076ca <_ZN15Screen2ViewBaseC1Ev+0x6b2>
90007f2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007f30:	ee77 7a87 	vadd.f32	s15, s15, s14
90007f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007f38:	ee17 1a90 	vmov	r1, s15
90007f3c:	f7ff bba2 	b.w	90007684 <_ZN15Screen2ViewBaseC1Ev+0x66c>
90007f40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90007f44:	ee77 7a87 	vadd.f32	s15, s15, s14
90007f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90007f4c:	ee17 1a90 	vmov	r1, s15
90007f50:	f7ff bb2f 	b.w	900075b2 <_ZN15Screen2ViewBaseC1Ev+0x59a>
        boundingArea = calculateBoundingArea();
90007f54:	ae04      	add	r6, sp, #16
90007f56:	4651      	mov	r1, sl
90007f58:	4630      	mov	r0, r6
90007f5a:	4798      	blx	r3
90007f5c:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
90007f60:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90007f64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007f68:	f7ff ba10 	b.w	9000738c <_ZN15Screen2ViewBaseC1Ev+0x374>
90007f6c:	f10d 0a10 	add.w	sl, sp, #16
90007f70:	4631      	mov	r1, r6
90007f72:	4650      	mov	r0, sl
90007f74:	4790      	blx	r2
90007f76:	f504 7398 	add.w	r3, r4, #304	; 0x130
90007f7a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007f82:	f7ff ba48 	b.w	90007416 <_ZN15Screen2ViewBaseC1Ev+0x3fe>
90007f86:	f10d 0a10 	add.w	sl, sp, #16
90007f8a:	4631      	mov	r1, r6
90007f8c:	4650      	mov	r0, sl
90007f8e:	4790      	blx	r2
90007f90:	f504 73be 	add.w	r3, r4, #380	; 0x17c
90007f94:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
90007f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90007f9c:	f7ff ba7c 	b.w	90007498 <_ZN15Screen2ViewBaseC1Ev+0x480>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007fa0:	4b05      	ldr	r3, [pc, #20]	; (90007fb8 <_ZN15Screen2ViewBaseC1Ev+0xfa0>)
90007fa2:	2161      	movs	r1, #97	; 0x61
90007fa4:	4a05      	ldr	r2, [pc, #20]	; (90007fbc <_ZN15Screen2ViewBaseC1Ev+0xfa4>)
90007fa6:	4806      	ldr	r0, [pc, #24]	; (90007fc0 <_ZN15Screen2ViewBaseC1Ev+0xfa8>)
90007fa8:	f01f fba4 	bl	900276f4 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90007fac:	4b05      	ldr	r3, [pc, #20]	; (90007fc4 <_ZN15Screen2ViewBaseC1Ev+0xfac>)
90007fae:	2160      	movs	r1, #96	; 0x60
90007fb0:	4a02      	ldr	r2, [pc, #8]	; (90007fbc <_ZN15Screen2ViewBaseC1Ev+0xfa4>)
90007fb2:	4803      	ldr	r0, [pc, #12]	; (90007fc0 <_ZN15Screen2ViewBaseC1Ev+0xfa8>)
90007fb4:	f01f fb9e 	bl	900276f4 <__assert_func>
90007fb8:	9002adec 	.word	0x9002adec
90007fbc:	9002ae2c 	.word	0x9002ae2c
90007fc0:	9002ada4 	.word	0x9002ada4
90007fc4:	9002ad24 	.word	0x9002ad24

90007fc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007fc8:	4770      	bx	lr
90007fca:	bf00      	nop

90007fcc <_Z23getFont_verdana_10_4bppv>:
{
90007fcc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007fce:	4d18      	ldr	r5, [pc, #96]	; (90008030 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90007fd0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007fd2:	682c      	ldr	r4, [r5, #0]
90007fd4:	f3bf 8f5b 	dmb	ish
90007fd8:	f014 0401 	ands.w	r4, r4, #1
90007fdc:	d002      	beq.n	90007fe4 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90007fde:	4815      	ldr	r0, [pc, #84]	; (90008034 <_Z23getFont_verdana_10_4bppv+0x68>)
90007fe0:	b00f      	add	sp, #60	; 0x3c
90007fe2:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90007fe4:	4628      	mov	r0, r5
90007fe6:	f01f fb58 	bl	9002769a <__cxa_guard_acquire>
90007fea:	2800      	cmp	r0, #0
90007fec:	d0f7      	beq.n	90007fde <_Z23getFont_verdana_10_4bppv+0x12>
90007fee:	213f      	movs	r1, #63	; 0x3f
90007ff0:	2201      	movs	r2, #1
90007ff2:	230a      	movs	r3, #10
90007ff4:	2004      	movs	r0, #4
90007ff6:	9204      	str	r2, [sp, #16]
90007ff8:	9300      	str	r3, [sp, #0]
90007ffa:	9003      	str	r0, [sp, #12]
90007ffc:	480d      	ldr	r0, [pc, #52]	; (90008034 <_Z23getFont_verdana_10_4bppv+0x68>)
90007ffe:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90008002:	490d      	ldr	r1, [pc, #52]	; (90008038 <_Z23getFont_verdana_10_4bppv+0x6c>)
90008004:	9108      	str	r1, [sp, #32]
90008006:	490d      	ldr	r1, [pc, #52]	; (9000803c <_Z23getFont_verdana_10_4bppv+0x70>)
90008008:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000800c:	9107      	str	r1, [sp, #28]
9000800e:	490c      	ldr	r1, [pc, #48]	; (90008040 <_Z23getFont_verdana_10_4bppv+0x74>)
90008010:	e9cd 4405 	strd	r4, r4, [sp, #20]
90008014:	e9cd 4401 	strd	r4, r4, [sp, #4]
90008018:	f7fd fd30 	bl	90005a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
9000801c:	4809      	ldr	r0, [pc, #36]	; (90008044 <_Z23getFont_verdana_10_4bppv+0x78>)
9000801e:	f01f fb87 	bl	90027730 <atexit>
90008022:	4628      	mov	r0, r5
90008024:	f01f fb45 	bl	900276b2 <__cxa_guard_release>
}
90008028:	4802      	ldr	r0, [pc, #8]	; (90008034 <_Z23getFont_verdana_10_4bppv+0x68>)
9000802a:	b00f      	add	sp, #60	; 0x3c
9000802c:	bd30      	pop	{r4, r5, pc}
9000802e:	bf00      	nop
90008030:	2400d0f0 	.word	0x2400d0f0
90008034:	2400d0f4 	.word	0x2400d0f4
90008038:	9002c840 	.word	0x9002c840
9000803c:	9002c9ec 	.word	0x9002c9ec
90008040:	90201c38 	.word	0x90201c38
90008044:	90007fc9 	.word	0x90007fc9

90008048 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90008048:	4770      	bx	lr
9000804a:	bf00      	nop

9000804c <_Z23getFont_verdana_20_4bppv>:
{
9000804c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000804e:	4d19      	ldr	r5, [pc, #100]	; (900080b4 <_Z23getFont_verdana_20_4bppv+0x68>)
{
90008050:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90008052:	682c      	ldr	r4, [r5, #0]
90008054:	f3bf 8f5b 	dmb	ish
90008058:	f014 0401 	ands.w	r4, r4, #1
9000805c:	d002      	beq.n	90008064 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
9000805e:	4816      	ldr	r0, [pc, #88]	; (900080b8 <_Z23getFont_verdana_20_4bppv+0x6c>)
90008060:	b00f      	add	sp, #60	; 0x3c
90008062:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 96, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
90008064:	4628      	mov	r0, r5
90008066:	f01f fb18 	bl	9002769a <__cxa_guard_acquire>
9000806a:	2800      	cmp	r0, #0
9000806c:	d0f7      	beq.n	9000805e <_Z23getFont_verdana_20_4bppv+0x12>
9000806e:	213f      	movs	r1, #63	; 0x3f
90008070:	4a12      	ldr	r2, [pc, #72]	; (900080bc <_Z23getFont_verdana_20_4bppv+0x70>)
90008072:	2301      	movs	r3, #1
90008074:	2014      	movs	r0, #20
90008076:	9208      	str	r2, [sp, #32]
90008078:	2204      	movs	r2, #4
9000807a:	9304      	str	r3, [sp, #16]
9000807c:	9000      	str	r0, [sp, #0]
9000807e:	9401      	str	r4, [sp, #4]
90008080:	480d      	ldr	r0, [pc, #52]	; (900080b8 <_Z23getFont_verdana_20_4bppv+0x6c>)
90008082:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90008086:	490e      	ldr	r1, [pc, #56]	; (900080c0 <_Z23getFont_verdana_20_4bppv+0x74>)
90008088:	e9cd 3305 	strd	r3, r3, [sp, #20]
9000808c:	9107      	str	r1, [sp, #28]
9000808e:	2318      	movs	r3, #24
90008090:	490c      	ldr	r1, [pc, #48]	; (900080c4 <_Z23getFont_verdana_20_4bppv+0x78>)
90008092:	e9cd 4202 	strd	r4, r2, [sp, #8]
90008096:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
9000809a:	2260      	movs	r2, #96	; 0x60
9000809c:	f7fd fcee 	bl	90005a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900080a0:	4809      	ldr	r0, [pc, #36]	; (900080c8 <_Z23getFont_verdana_20_4bppv+0x7c>)
900080a2:	f01f fb45 	bl	90027730 <atexit>
900080a6:	4628      	mov	r0, r5
900080a8:	f01f fb03 	bl	900276b2 <__cxa_guard_release>
}
900080ac:	4802      	ldr	r0, [pc, #8]	; (900080b8 <_Z23getFont_verdana_20_4bppv+0x6c>)
900080ae:	b00f      	add	sp, #60	; 0x3c
900080b0:	bd30      	pop	{r4, r5, pc}
900080b2:	bf00      	nop
900080b4:	2400d120 	.word	0x2400d120
900080b8:	2400d124 	.word	0x2400d124
900080bc:	9002c844 	.word	0x9002c844
900080c0:	9002c9f0 	.word	0x9002c9f0
900080c4:	90201c48 	.word	0x90201c48
900080c8:	90008049 	.word	0x90008049

900080cc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900080cc:	4770      	bx	lr
900080ce:	bf00      	nop

900080d0 <_Z23getFont_verdana_40_4bppv>:
{
900080d0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900080d2:	4d18      	ldr	r5, [pc, #96]	; (90008134 <_Z23getFont_verdana_40_4bppv+0x64>)
{
900080d4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900080d6:	682c      	ldr	r4, [r5, #0]
900080d8:	f3bf 8f5b 	dmb	ish
900080dc:	f014 0401 	ands.w	r4, r4, #1
900080e0:	d002      	beq.n	900080e8 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
900080e2:	4815      	ldr	r0, [pc, #84]	; (90008138 <_Z23getFont_verdana_40_4bppv+0x68>)
900080e4:	b00f      	add	sp, #60	; 0x3c
900080e6:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
900080e8:	4628      	mov	r0, r5
900080ea:	f01f fad6 	bl	9002769a <__cxa_guard_acquire>
900080ee:	2800      	cmp	r0, #0
900080f0:	d0f7      	beq.n	900080e2 <_Z23getFont_verdana_40_4bppv+0x12>
900080f2:	213f      	movs	r1, #63	; 0x3f
900080f4:	2201      	movs	r2, #1
900080f6:	2328      	movs	r3, #40	; 0x28
900080f8:	2004      	movs	r0, #4
900080fa:	9204      	str	r2, [sp, #16]
900080fc:	9300      	str	r3, [sp, #0]
900080fe:	9003      	str	r0, [sp, #12]
90008100:	480d      	ldr	r0, [pc, #52]	; (90008138 <_Z23getFont_verdana_40_4bppv+0x68>)
90008102:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90008106:	490d      	ldr	r1, [pc, #52]	; (9000813c <_Z23getFont_verdana_40_4bppv+0x6c>)
90008108:	9108      	str	r1, [sp, #32]
9000810a:	490d      	ldr	r1, [pc, #52]	; (90008140 <_Z23getFont_verdana_40_4bppv+0x70>)
9000810c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90008110:	9107      	str	r1, [sp, #28]
90008112:	490c      	ldr	r1, [pc, #48]	; (90008144 <_Z23getFont_verdana_40_4bppv+0x74>)
90008114:	e9cd 4405 	strd	r4, r4, [sp, #20]
90008118:	e9cd 4401 	strd	r4, r4, [sp, #4]
9000811c:	f7fd fcae 	bl	90005a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90008120:	4809      	ldr	r0, [pc, #36]	; (90008148 <_Z23getFont_verdana_40_4bppv+0x78>)
90008122:	f01f fb05 	bl	90027730 <atexit>
90008126:	4628      	mov	r0, r5
90008128:	f01f fac3 	bl	900276b2 <__cxa_guard_release>
}
9000812c:	4802      	ldr	r0, [pc, #8]	; (90008138 <_Z23getFont_verdana_40_4bppv+0x68>)
9000812e:	b00f      	add	sp, #60	; 0x3c
90008130:	bd30      	pop	{r4, r5, pc}
90008132:	bf00      	nop
90008134:	2400d150 	.word	0x2400d150
90008138:	2400d154 	.word	0x2400d154
9000813c:	9002c9e8 	.word	0x9002c9e8
90008140:	9002c9f4 	.word	0x9002c9f4
90008144:	90202188 	.word	0x90202188
90008148:	900080cd 	.word	0x900080cd

9000814c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
9000814c:	2000      	movs	r0, #0
9000814e:	4770      	bx	lr

90008150 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90008150:	2000      	movs	r0, #0
90008152:	4770      	bx	lr

90008154 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90008154:	b40e      	push	{r1, r2, r3}
90008156:	b500      	push	{lr}
90008158:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
9000815a:	2100      	movs	r1, #0
{
9000815c:	ab03      	add	r3, sp, #12
9000815e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90008162:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90008164:	f010 ff7e 	bl	90019064 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90008168:	b002      	add	sp, #8
9000816a:	f85d eb04 	ldr.w	lr, [sp], #4
9000816e:	b003      	add	sp, #12
90008170:	4770      	bx	lr
90008172:	bf00      	nop

90008174 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90008174:	b40c      	push	{r2, r3}
90008176:	b500      	push	{lr}
90008178:	b083      	sub	sp, #12
9000817a:	ab04      	add	r3, sp, #16
9000817c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90008180:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90008182:	f010 ff6f 	bl	90019064 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90008186:	b003      	add	sp, #12
90008188:	f85d eb04 	ldr.w	lr, [sp], #4
9000818c:	b002      	add	sp, #8
9000818e:	4770      	bx	lr

90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90008190:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90008192:	b510      	push	{r4, lr}
90008194:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90008196:	b133      	cbz	r3, 900081a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90008198:	8f03      	ldrh	r3, [r0, #56]	; 0x38
9000819a:	b39b      	cbz	r3, 90008204 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
9000819c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9000819e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900081a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
900081a4:	b923      	cbnz	r3, 900081b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
900081a6:	4620      	mov	r0, r4
}
900081a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
900081ac:	f012 ba0a 	b.w	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
900081b0:	f012 fb06 	bl	9001a7c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
900081b4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
900081b6:	2b01      	cmp	r3, #1
900081b8:	d92a      	bls.n	90008210 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
900081ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900081bc:	1c53      	adds	r3, r2, #1
900081be:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
900081c0:	2b09      	cmp	r3, #9
900081c2:	d812      	bhi.n	900081ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
900081c4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
900081c8:	f640 103f 	movw	r0, #2367	; 0x93f
900081cc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
900081ce:	4281      	cmp	r1, r0
900081d0:	d1e9      	bne.n	900081a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
900081d2:	eb04 0142 	add.w	r1, r4, r2, lsl #1
900081d6:	0052      	lsls	r2, r2, #1
900081d8:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
900081da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
900081de:	4422      	add	r2, r4
900081e0:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
900081e4:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
900081e6:	8450      	strh	r0, [r2, #34]	; 0x22
        }
900081e8:	e7dd      	b.n	900081a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
900081ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900081ee:	f640 113f 	movw	r1, #2367	; 0x93f
900081f2:	89db      	ldrh	r3, [r3, #14]
900081f4:	428b      	cmp	r3, r1
900081f6:	d1d6      	bne.n	900081a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
900081f8:	eb04 0142 	add.w	r1, r4, r2, lsl #1
900081fc:	2300      	movs	r3, #0
900081fe:	0052      	lsls	r2, r2, #1
90008200:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90008202:	e7ea      	b.n	900081da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90008204:	4b05      	ldr	r3, [pc, #20]	; (9000821c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90008206:	21c5      	movs	r1, #197	; 0xc5
90008208:	4a05      	ldr	r2, [pc, #20]	; (90008220 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
9000820a:	4806      	ldr	r0, [pc, #24]	; (90008224 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
9000820c:	f01f fa72 	bl	900276f4 <__assert_func>
            assert(offset < used);
90008210:	4b05      	ldr	r3, [pc, #20]	; (90008228 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90008212:	21cb      	movs	r1, #203	; 0xcb
90008214:	4a05      	ldr	r2, [pc, #20]	; (9000822c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90008216:	4803      	ldr	r0, [pc, #12]	; (90008224 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90008218:	f01f fa6c 	bl	900276f4 <__assert_func>
9000821c:	9002b3e8 	.word	0x9002b3e8
90008220:	9002b3f4 	.word	0x9002b3f4
90008224:	9002b4a0 	.word	0x9002b4a0
90008228:	9002b4ec 	.word	0x9002b4ec
9000822c:	9002b4fc 	.word	0x9002b4fc

90008230 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90008230:	f012 b991 	b.w	9001a556 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90008234 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90008234:	b510      	push	{r4, lr}
90008236:	b086      	sub	sp, #24
90008238:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
9000823c:	ac0a      	add	r4, sp, #40	; 0x28
{
9000823e:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90008242:	461a      	mov	r2, r3
90008244:	9b09      	ldr	r3, [sp, #36]	; 0x24
90008246:	4661      	mov	r1, ip
90008248:	9401      	str	r4, [sp, #4]
9000824a:	9300      	str	r3, [sp, #0]
9000824c:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
9000824e:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90008250:	f00f fba6 	bl	900179a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90008254:	b006      	add	sp, #24
90008256:	bd10      	pop	{r4, pc}

90008258 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90008258:	b9e0      	cbnz	r0, 90008294 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
9000825a:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
9000825c:	4b13      	ldr	r3, [pc, #76]	; (900082ac <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
9000825e:	681b      	ldr	r3, [r3, #0]
90008260:	b1cb      	cbz	r3, 90008296 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90008262:	4c13      	ldr	r4, [pc, #76]	; (900082b0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90008264:	4813      	ldr	r0, [pc, #76]	; (900082b4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90008266:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000826a:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
9000826c:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000826e:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90008270:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90008272:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90008274:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90008276:	4b10      	ldr	r3, [pc, #64]	; (900082b8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90008278:	2200      	movs	r2, #0
9000827a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
9000827c:	f000 f83a 	bl	900082f4 <_ZN17TypedTextDatabase8getFontsEv>
90008280:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90008282:	f000 f835 	bl	900082f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90008286:	4b0d      	ldr	r3, [pc, #52]	; (900082bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90008288:	4a0d      	ldr	r2, [pc, #52]	; (900082c0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
9000828a:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
9000828c:	4b0d      	ldr	r3, [pc, #52]	; (900082c4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
9000828e:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90008290:	8018      	strh	r0, [r3, #0]
    }
}
90008292:	bd38      	pop	{r3, r4, r5, pc}
90008294:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90008296:	4c0c      	ldr	r4, [pc, #48]	; (900082c8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90008298:	4905      	ldr	r1, [pc, #20]	; (900082b0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
9000829a:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
9000829c:	480b      	ldr	r0, [pc, #44]	; (900082cc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
9000829e:	4b05      	ldr	r3, [pc, #20]	; (900082b4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900082a0:	4a0b      	ldr	r2, [pc, #44]	; (900082d0 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
900082a2:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
900082a4:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
900082a6:	2c00      	cmp	r4, #0
900082a8:	d1e5      	bne.n	90008276 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
900082aa:	bd38      	pop	{r3, r4, r5, pc}
900082ac:	2400d180 	.word	0x2400d180
900082b0:	2400d184 	.word	0x2400d184
900082b4:	2400d188 	.word	0x2400d188
900082b8:	2400d18c 	.word	0x2400d18c
900082bc:	24028244 	.word	0x24028244
900082c0:	2402824c 	.word	0x2402824c
900082c4:	24028248 	.word	0x24028248
900082c8:	90202260 	.word	0x90202260
900082cc:	902021c8 	.word	0x902021c8
900082d0:	90202198 	.word	0x90202198

900082d4 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
900082d4:	4a04      	ldr	r2, [pc, #16]	; (900082e8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
900082d6:	4b05      	ldr	r3, [pc, #20]	; (900082ec <_ZNK8touchgfx5Texts7getTextEt+0x18>)
900082d8:	6812      	ldr	r2, [r2, #0]
900082da:	681b      	ldr	r3, [r3, #0]
900082dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
900082e0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
900082e4:	4770      	bx	lr
900082e6:	bf00      	nop
900082e8:	2400d188 	.word	0x2400d188
900082ec:	2400d184 	.word	0x2400d184

900082f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
900082f0:	200c      	movs	r0, #12
900082f2:	4770      	bx	lr

900082f4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
900082f4:	4800      	ldr	r0, [pc, #0]	; (900082f8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
900082f6:	4770      	bx	lr
900082f8:	2400d190 	.word	0x2400d190

900082fc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
900082fc:	b510      	push	{r4, lr}
};
900082fe:	4c05      	ldr	r4, [pc, #20]	; (90008314 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90008300:	f7ff fea4 	bl	9000804c <_Z23getFont_verdana_20_4bppv>
};
90008304:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90008306:	f7ff fee3 	bl	900080d0 <_Z23getFont_verdana_40_4bppv>
};
9000830a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
9000830c:	f7ff fe5e 	bl	90007fcc <_Z23getFont_verdana_10_4bppv>
};
90008310:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
90008312:	bd10      	pop	{r4, pc}
90008314:	2400d190 	.word	0x2400d190

90008318 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90008318:	4770      	bx	lr
9000831a:	bf00      	nop

9000831c <_ZN19FrontendApplicationD0Ev>:
9000831c:	b510      	push	{r4, lr}
9000831e:	4604      	mov	r4, r0
90008320:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90008324:	f01f f9b7 	bl	90027696 <_ZdlPvj>
90008328:	4620      	mov	r0, r4
9000832a:	bd10      	pop	{r4, pc}

9000832c <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
9000832c:	b510      	push	{r4, lr}
9000832e:	4604      	mov	r4, r0
    {
        model.tick();
90008330:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90008334:	f000 f822 	bl	9000837c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90008338:	4620      	mov	r0, r4
    }
9000833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
9000833e:	f00f bfc9 	b.w	900182d4 <_ZN8touchgfx11Application15handleTickEventEv>
90008342:	bf00      	nop

90008344 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90008344:	b510      	push	{r4, lr}
90008346:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90008348:	f7fd faf4 	bl	90005934 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
9000834c:	4b01      	ldr	r3, [pc, #4]	; (90008354 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
9000834e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90008350:	6023      	str	r3, [r4, #0]
}
90008352:	bd10      	pop	{r4, pc}
90008354:	9002b5d8 	.word	0x9002b5d8

90008358 <_ZN13ModelListener14setTemperatureEi>:
    }
    virtual void setTemperature(int temperature) {};
90008358:	4770      	bx	lr
9000835a:	bf00      	nop

9000835c <_ZN13ModelListener11setHumidityEi>:
    virtual void setHumidity(int humidity) {};
9000835c:	4770      	bx	lr
9000835e:	bf00      	nop

90008360 <_ZN13ModelListener17setMaxTemperatureEi>:
    virtual void setMaxTemperature(int temperature) {};
90008360:	4770      	bx	lr
90008362:	bf00      	nop

90008364 <_ZN13ModelListener17setMinTemperatureEi>:
    virtual void setMinTemperature(int temperature) {};
90008364:	4770      	bx	lr
90008366:	bf00      	nop

90008368 <_ZN13ModelListener23setTemperatureGraphDataEPsii>:
    virtual void setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {};
90008368:	4770      	bx	lr
9000836a:	bf00      	nop

9000836c <_ZN5ModelC1Ev>:
extern "C"
{
	extern ApplicationContext_TypeDef applicationContext;
}
#endif
Model::Model() : modelListener(0),
9000836c:	2200      	movs	r2, #0
		temperature(0),
9000836e:	e9c0 2200 	strd	r2, r2, [r0]
		maxTemperature(0),
		minTemperature(0),
90008372:	e9c0 2202 	strd	r2, r2, [r0, #8]
		temperatureGraphData(NULL),
90008376:	e9c0 2204 	strd	r2, r2, [r0, #16]
		humidity(0)
{

}
9000837a:	4770      	bx	lr

9000837c <_ZN5Model4tickEv>:

void Model::tick()
{
9000837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008380:	4604      	mov	r4, r0
#ifndef SIMULATOR
	modelListener->setHumidity(applicationContext.humidity);
90008382:	6800      	ldr	r0, [r0, #0]
90008384:	4922      	ldr	r1, [pc, #136]	; (90008410 <_ZN5Model4tickEv+0x94>)
90008386:	6803      	ldr	r3, [r0, #0]
90008388:	4d22      	ldr	r5, [pc, #136]	; (90008414 <_ZN5Model4tickEv+0x98>)
9000838a:	68da      	ldr	r2, [r3, #12]
9000838c:	428a      	cmp	r2, r1
9000838e:	d113      	bne.n	900083b8 <_ZN5Model4tickEv+0x3c>

	modelListener->setTemperature(applicationContext.temperature);
90008390:	689a      	ldr	r2, [r3, #8]
90008392:	4921      	ldr	r1, [pc, #132]	; (90008418 <_ZN5Model4tickEv+0x9c>)
90008394:	428a      	cmp	r2, r1
90008396:	d117      	bne.n	900083c8 <_ZN5Model4tickEv+0x4c>
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
90008398:	691a      	ldr	r2, [r3, #16]
9000839a:	4920      	ldr	r1, [pc, #128]	; (9000841c <_ZN5Model4tickEv+0xa0>)
9000839c:	428a      	cmp	r2, r1
9000839e:	d11b      	bne.n	900083d8 <_ZN5Model4tickEv+0x5c>
	modelListener->setMinTemperature(applicationContext.minTemperature);
900083a0:	695e      	ldr	r6, [r3, #20]
900083a2:	4f1f      	ldr	r7, [pc, #124]	; (90008420 <_ZN5Model4tickEv+0xa4>)
900083a4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900083a8:	42be      	cmp	r6, r7
900083aa:	d120      	bne.n	900083ee <_ZN5Model4tickEv+0x72>

	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
900083ac:	699c      	ldr	r4, [r3, #24]
900083ae:	4b1d      	ldr	r3, [pc, #116]	; (90008424 <_ZN5Model4tickEv+0xa8>)
900083b0:	429c      	cmp	r4, r3
900083b2:	d126      	bne.n	90008402 <_ZN5Model4tickEv+0x86>

	#endif
}
900083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	modelListener->setHumidity(applicationContext.humidity);
900083b8:	7969      	ldrb	r1, [r5, #5]
900083ba:	4790      	blx	r2
	modelListener->setTemperature(applicationContext.temperature);
900083bc:	6820      	ldr	r0, [r4, #0]
900083be:	4916      	ldr	r1, [pc, #88]	; (90008418 <_ZN5Model4tickEv+0x9c>)
900083c0:	6803      	ldr	r3, [r0, #0]
900083c2:	689a      	ldr	r2, [r3, #8]
900083c4:	428a      	cmp	r2, r1
900083c6:	d0e7      	beq.n	90008398 <_ZN5Model4tickEv+0x1c>
900083c8:	7929      	ldrb	r1, [r5, #4]
900083ca:	4790      	blx	r2
	modelListener->setMaxTemperature(applicationContext.maxTemperature);
900083cc:	6820      	ldr	r0, [r4, #0]
900083ce:	4913      	ldr	r1, [pc, #76]	; (9000841c <_ZN5Model4tickEv+0xa0>)
900083d0:	6803      	ldr	r3, [r0, #0]
900083d2:	691a      	ldr	r2, [r3, #16]
900083d4:	428a      	cmp	r2, r1
900083d6:	d0e3      	beq.n	900083a0 <_ZN5Model4tickEv+0x24>
900083d8:	f9b5 1000 	ldrsh.w	r1, [r5]
900083dc:	4790      	blx	r2
	modelListener->setMinTemperature(applicationContext.minTemperature);
900083de:	6820      	ldr	r0, [r4, #0]
900083e0:	4f0f      	ldr	r7, [pc, #60]	; (90008420 <_ZN5Model4tickEv+0xa4>)
900083e2:	6803      	ldr	r3, [r0, #0]
900083e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900083e8:	695e      	ldr	r6, [r3, #20]
900083ea:	42be      	cmp	r6, r7
900083ec:	d0de      	beq.n	900083ac <_ZN5Model4tickEv+0x30>
900083ee:	4611      	mov	r1, r2
900083f0:	47b0      	blx	r6
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
900083f2:	6820      	ldr	r0, [r4, #0]
900083f4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900083f8:	6803      	ldr	r3, [r0, #0]
900083fa:	699c      	ldr	r4, [r3, #24]
900083fc:	4b09      	ldr	r3, [pc, #36]	; (90008424 <_ZN5Model4tickEv+0xa8>)
900083fe:	429c      	cmp	r4, r3
90008400:	d0d8      	beq.n	900083b4 <_ZN5Model4tickEv+0x38>
90008402:	f9b5 3000 	ldrsh.w	r3, [r5]
90008406:	46a4      	mov	ip, r4
90008408:	4907      	ldr	r1, [pc, #28]	; (90008428 <_ZN5Model4tickEv+0xac>)
}
9000840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	modelListener->setTemperatureGraphData(&applicationContext.temperatureData[0], applicationContext.minTemperature, applicationContext.maxTemperature);
9000840e:	4760      	bx	ip
90008410:	9000835d 	.word	0x9000835d
90008414:	2400cdb0 	.word	0x2400cdb0
90008418:	90008359 	.word	0x90008359
9000841c:	90008361 	.word	0x90008361
90008420:	90008365 	.word	0x90008365
90008424:	90008369 	.word	0x90008369
90008428:	2400cdb8 	.word	0x2400cdb8

9000842c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
9000842c:	4770      	bx	lr
9000842e:	bf00      	nop

90008430 <_ZThn4_N16Screen1PresenterD1Ev>:
90008430:	3804      	subs	r0, #4
90008432:	4770      	bx	lr

90008434 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90008434:	4770      	bx	lr
90008436:	bf00      	nop

90008438 <_ZN16Screen1Presenter14setTemperatureEi>:
{

}

void Screen1Presenter::setTemperature(int value) {
	view.setTemperature(value);
90008438:	68c0      	ldr	r0, [r0, #12]
9000843a:	6803      	ldr	r3, [r0, #0]
9000843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000843e:	4718      	bx	r3

90008440 <_ZN16Screen1Presenter11setHumidityEi>:
}
void Screen1Presenter::setHumidity(int value) {
	view.setHumidity(value);
90008440:	68c0      	ldr	r0, [r0, #12]
90008442:	6803      	ldr	r3, [r0, #0]
90008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008446:	4718      	bx	r3

90008448 <_ZN16Screen1PresenterD0Ev>:
90008448:	b510      	push	{r4, lr}
9000844a:	4604      	mov	r4, r0
9000844c:	2110      	movs	r1, #16
9000844e:	f01f f922 	bl	90027696 <_ZdlPvj>
90008452:	4620      	mov	r0, r4
90008454:	bd10      	pop	{r4, pc}
90008456:	bf00      	nop

90008458 <_ZThn4_N16Screen1PresenterD0Ev>:
90008458:	b500      	push	{lr}
9000845a:	3804      	subs	r0, #4
9000845c:	b083      	sub	sp, #12
9000845e:	2110      	movs	r1, #16
90008460:	9001      	str	r0, [sp, #4]
90008462:	f01f f918 	bl	90027696 <_ZdlPvj>
90008466:	9801      	ldr	r0, [sp, #4]
90008468:	b003      	add	sp, #12
9000846a:	f85d fb04 	ldr.w	pc, [sp], #4
9000846e:	bf00      	nop

90008470 <_ZThn4_N16Screen1Presenter14setTemperatureEi>:
90008470:	6880      	ldr	r0, [r0, #8]
90008472:	6803      	ldr	r3, [r0, #0]
90008474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008476:	4718      	bx	r3

90008478 <_ZThn4_N16Screen1Presenter11setHumidityEi>:
90008478:	6880      	ldr	r0, [r0, #8]
9000847a:	6803      	ldr	r3, [r0, #0]
9000847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000847e:	4718      	bx	r3

90008480 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90008480:	4a06      	ldr	r2, [pc, #24]	; (9000849c <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90008482:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90008484:	b410      	push	{r4}
    ModelListener() : model(0) {}
90008486:	2400      	movs	r4, #0
90008488:	6084      	str	r4, [r0, #8]
    : view(v)
9000848a:	f102 0408 	add.w	r4, r2, #8
9000848e:	3228      	adds	r2, #40	; 0x28
90008490:	e9c0 4200 	strd	r4, r2, [r0]
}
90008494:	f85d 4b04 	ldr.w	r4, [sp], #4
90008498:	4770      	bx	lr
9000849a:	bf00      	nop
9000849c:	9002b61c 	.word	0x9002b61c

900084a0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
900084a0:	4770      	bx	lr
900084a2:	bf00      	nop

900084a4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
900084a4:	4b03      	ldr	r3, [pc, #12]	; (900084b4 <_ZN11Screen1ViewD1Ev+0x10>)
900084a6:	b510      	push	{r4, lr}
900084a8:	4604      	mov	r4, r0
900084aa:	6003      	str	r3, [r0, #0]
900084ac:	f7fd fb62 	bl	90005b74 <_ZN15Screen1ViewBaseD1Ev>
900084b0:	4620      	mov	r0, r4
900084b2:	bd10      	pop	{r4, pc}
900084b4:	9002b66c 	.word	0x9002b66c

900084b8 <_ZN11Screen1ViewD0Ev>:
900084b8:	4b06      	ldr	r3, [pc, #24]	; (900084d4 <_ZN11Screen1ViewD0Ev+0x1c>)
900084ba:	b510      	push	{r4, lr}
900084bc:	4604      	mov	r4, r0
900084be:	6003      	str	r3, [r0, #0]
900084c0:	f7fd fb58 	bl	90005b74 <_ZN15Screen1ViewBaseD1Ev>
900084c4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
900084c8:	4620      	mov	r0, r4
900084ca:	f01f f8e4 	bl	90027696 <_ZdlPvj>
900084ce:	4620      	mov	r0, r4
900084d0:	bd10      	pop	{r4, pc}
900084d2:	bf00      	nop
900084d4:	9002b66c 	.word	0x9002b66c

900084d8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
900084d8:	b510      	push	{r4, lr}
900084da:	4604      	mov	r4, r0
900084dc:	f7fd fd0a 	bl	90005ef4 <_ZN15Screen1ViewBaseC1Ev>
900084e0:	4b01      	ldr	r3, [pc, #4]	; (900084e8 <_ZN11Screen1ViewC1Ev+0x10>)
}
900084e2:	4620      	mov	r0, r4
Screen1View::Screen1View()
900084e4:	6023      	str	r3, [r4, #0]
}
900084e6:	bd10      	pop	{r4, pc}
900084e8:	9002b66c 	.word	0x9002b66c

900084ec <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
900084ec:	f7fd bb44 	b.w	90005b78 <_ZN15Screen1ViewBase11setupScreenEv>

900084f0 <_ZN11Screen1View14setTemperatureEi>:

void Screen1View::setTemperature(int value) {
900084f0:	b510      	push	{r4, lr}
900084f2:	4604      	mov	r4, r0
900084f4:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
900084f6:	4a06      	ldr	r2, [pc, #24]	; (90008510 <_ZN11Screen1View14setTemperatureEi+0x20>)
900084f8:	2104      	movs	r1, #4
900084fa:	f500 70e6 	add.w	r0, r0, #460	; 0x1cc
900084fe:	f012 ff0d 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
90008502:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
90008506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
9000850a:	f010 bed6 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9000850e:	bf00      	nop
90008510:	9002b660 	.word	0x9002b660

90008514 <_ZN11Screen1View11setHumidityEi>:

void Screen1View::setHumidity(int value) {
90008514:	b510      	push	{r4, lr}
90008516:	4604      	mov	r4, r0
90008518:	460b      	mov	r3, r1
	Unicode::snprintf(humidityTextAreaBuffer, HUMIDITYTEXTAREA_SIZE, "%d", value);
9000851a:	4a06      	ldr	r2, [pc, #24]	; (90008534 <_ZN11Screen1View11setHumidityEi+0x20>)
9000851c:	2104      	movs	r1, #4
9000851e:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
90008522:	f012 fefb 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	humidityTextArea.invalidate();
90008526:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
9000852a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	humidityTextArea.invalidate();
9000852e:	f010 bec4 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
90008532:	bf00      	nop
90008534:	9002b660 	.word	0x9002b660

90008538 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
90008538:	4770      	bx	lr
9000853a:	bf00      	nop

9000853c <_ZThn4_N16Screen2PresenterD1Ev>:
9000853c:	3804      	subs	r0, #4
9000853e:	4770      	bx	lr

90008540 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
90008540:	4770      	bx	lr
90008542:	bf00      	nop

90008544 <_ZN16Screen2Presenter14setTemperatureEi>:
{

}

void Screen2Presenter::setTemperature(int value) {
	view.setTemperature(value);
90008544:	68c0      	ldr	r0, [r0, #12]
90008546:	6803      	ldr	r3, [r0, #0]
90008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000854a:	4718      	bx	r3

9000854c <_ZN16Screen2Presenter17setMaxTemperatureEi>:
};

void Screen2Presenter::setMaxTemperature(int value) {
	view.setMaxTemperature(value);
9000854c:	68c0      	ldr	r0, [r0, #12]
9000854e:	6803      	ldr	r3, [r0, #0]
90008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008552:	4718      	bx	r3

90008554 <_ZN16Screen2Presenter17setMinTemperatureEi>:
};

void Screen2Presenter::setMinTemperature(int value) {
	view.setMinTemperature(value);
90008554:	68c0      	ldr	r0, [r0, #12]
90008556:	6803      	ldr	r3, [r0, #0]
90008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000855a:	4718      	bx	r3

9000855c <_ZN16Screen2Presenter23setTemperatureGraphDataEPsii>:
};

void Screen2Presenter::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
	view.setTemperatureGraphData(data, minYRange, maxYRange);
9000855c:	68c0      	ldr	r0, [r0, #12]
void Screen2Presenter::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
9000855e:	b410      	push	{r4}
	view.setTemperatureGraphData(data, minYRange, maxYRange);
90008560:	6804      	ldr	r4, [r0, #0]
90008562:	6ba4      	ldr	r4, [r4, #56]	; 0x38
90008564:	46a4      	mov	ip, r4
};
90008566:	f85d 4b04 	ldr.w	r4, [sp], #4
	view.setTemperatureGraphData(data, minYRange, maxYRange);
9000856a:	4760      	bx	ip

9000856c <_ZN16Screen2PresenterD0Ev>:
9000856c:	b510      	push	{r4, lr}
9000856e:	4604      	mov	r4, r0
90008570:	2110      	movs	r1, #16
90008572:	f01f f890 	bl	90027696 <_ZdlPvj>
90008576:	4620      	mov	r0, r4
90008578:	bd10      	pop	{r4, pc}
9000857a:	bf00      	nop

9000857c <_ZThn4_N16Screen2PresenterD0Ev>:
9000857c:	b500      	push	{lr}
9000857e:	3804      	subs	r0, #4
90008580:	b083      	sub	sp, #12
90008582:	2110      	movs	r1, #16
90008584:	9001      	str	r0, [sp, #4]
90008586:	f01f f886 	bl	90027696 <_ZdlPvj>
9000858a:	9801      	ldr	r0, [sp, #4]
9000858c:	b003      	add	sp, #12
9000858e:	f85d fb04 	ldr.w	pc, [sp], #4
90008592:	bf00      	nop

90008594 <_ZThn4_N16Screen2Presenter14setTemperatureEi>:
90008594:	6880      	ldr	r0, [r0, #8]
90008596:	6803      	ldr	r3, [r0, #0]
90008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000859a:	4718      	bx	r3

9000859c <_ZThn4_N16Screen2Presenter17setMaxTemperatureEi>:
9000859c:	6880      	ldr	r0, [r0, #8]
9000859e:	6803      	ldr	r3, [r0, #0]
900085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900085a2:	4718      	bx	r3

900085a4 <_ZThn4_N16Screen2Presenter17setMinTemperatureEi>:
900085a4:	6880      	ldr	r0, [r0, #8]
900085a6:	6803      	ldr	r3, [r0, #0]
900085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900085aa:	4718      	bx	r3

900085ac <_ZThn4_N16Screen2Presenter23setTemperatureGraphDataEPsii>:
900085ac:	6880      	ldr	r0, [r0, #8]
900085ae:	b410      	push	{r4}
900085b0:	6804      	ldr	r4, [r0, #0]
900085b2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
900085b4:	46a4      	mov	ip, r4
900085b6:	f85d 4b04 	ldr.w	r4, [sp], #4
900085ba:	4760      	bx	ip

900085bc <_ZN16Screen2PresenterC1ER11Screen2View>:
    : view(v)
900085bc:	4a06      	ldr	r2, [pc, #24]	; (900085d8 <_ZN16Screen2PresenterC1ER11Screen2View+0x1c>)
900085be:	60c1      	str	r1, [r0, #12]
Screen2Presenter::Screen2Presenter(Screen2View& v)
900085c0:	b410      	push	{r4}
900085c2:	2400      	movs	r4, #0
900085c4:	6084      	str	r4, [r0, #8]
    : view(v)
900085c6:	f102 0408 	add.w	r4, r2, #8
900085ca:	3230      	adds	r2, #48	; 0x30
900085cc:	e9c0 4200 	strd	r4, r2, [r0]
}
900085d0:	f85d 4b04 	ldr.w	r4, [sp], #4
900085d4:	4770      	bx	lr
900085d6:	bf00      	nop
900085d8:	9002b6a0 	.word	0x9002b6a0

900085dc <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
900085dc:	4770      	bx	lr
900085de:	bf00      	nop

900085e0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
900085e0:	4b03      	ldr	r3, [pc, #12]	; (900085f0 <_ZN11Screen2ViewD1Ev+0x10>)
900085e2:	b510      	push	{r4, lr}
900085e4:	4604      	mov	r4, r0
900085e6:	6003      	str	r3, [r0, #0]
900085e8:	f7fe f942 	bl	90006870 <_ZN15Screen2ViewBaseD1Ev>
900085ec:	4620      	mov	r0, r4
900085ee:	bd10      	pop	{r4, pc}
900085f0:	9002b6f4 	.word	0x9002b6f4

900085f4 <_ZN11Screen2ViewD0Ev>:
900085f4:	4b06      	ldr	r3, [pc, #24]	; (90008610 <_ZN11Screen2ViewD0Ev+0x1c>)
900085f6:	b510      	push	{r4, lr}
900085f8:	4604      	mov	r4, r0
900085fa:	6003      	str	r3, [r0, #0]
900085fc:	f7fe f938 	bl	90006870 <_ZN15Screen2ViewBaseD1Ev>
90008600:	f242 014c 	movw	r1, #8268	; 0x204c
90008604:	4620      	mov	r0, r4
90008606:	f01f f846 	bl	90027696 <_ZdlPvj>
9000860a:	4620      	mov	r0, r4
9000860c:	bd10      	pop	{r4, pc}
9000860e:	bf00      	nop
90008610:	9002b6f4 	.word	0x9002b6f4

90008614 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
90008614:	b510      	push	{r4, lr}
90008616:	4604      	mov	r4, r0
90008618:	f7fe fcfe 	bl	90007018 <_ZN15Screen2ViewBaseC1Ev>
9000861c:	4b01      	ldr	r3, [pc, #4]	; (90008624 <_ZN11Screen2ViewC1Ev+0x10>)
}
9000861e:	4620      	mov	r0, r4
Screen2View::Screen2View()
90008620:	6023      	str	r3, [r4, #0]
}
90008622:	bd10      	pop	{r4, pc}
90008624:	9002b6f4 	.word	0x9002b6f4

90008628 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
90008628:	f7fe b8cc 	b.w	900067c4 <_ZN15Screen2ViewBase11setupScreenEv>

9000862c <_ZN11Screen2View14setTemperatureEi>:

void Screen2View::setTemperature(int value) {
9000862c:	b510      	push	{r4, lr}
9000862e:	4604      	mov	r4, r0
90008630:	460b      	mov	r3, r1
	Unicode::snprintf(temperatureTextAreaBuffer, TEMPERATURETEXTAREA_SIZE, "%d", value);
90008632:	4a06      	ldr	r2, [pc, #24]	; (9000864c <_ZN11Screen2View14setTemperatureEi+0x20>)
90008634:	2104      	movs	r1, #4
90008636:	f200 400c 	addw	r0, r0, #1036	; 0x40c
9000863a:	f012 fe6f 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temperatureTextArea.invalidate();
9000863e:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
};
90008642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temperatureTextArea.invalidate();
90008646:	f010 be38 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9000864a:	bf00      	nop
9000864c:	9002b660 	.word	0x9002b660

90008650 <_ZN11Screen2View17setMaxTemperatureEi>:

void Screen2View::setMaxTemperature(int value) {
90008650:	b510      	push	{r4, lr}
90008652:	4604      	mov	r4, r0
90008654:	460b      	mov	r3, r1
	Unicode::snprintf(maxTemperatureTextAreaBuffer, MAXTEMPERATURETEXTAREA_SIZE, "%d", value);
90008656:	4a06      	ldr	r2, [pc, #24]	; (90008670 <_ZN11Screen2View17setMaxTemperatureEi+0x20>)
90008658:	2104      	movs	r1, #4
9000865a:	f200 4014 	addw	r0, r0, #1044	; 0x414
9000865e:	f012 fe5d 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	maxTemperatureTextArea.invalidate();
90008662:	f504 70a0 	add.w	r0, r4, #320	; 0x140
};
90008666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	maxTemperatureTextArea.invalidate();
9000866a:	f010 be26 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9000866e:	bf00      	nop
90008670:	9002b660 	.word	0x9002b660

90008674 <_ZN11Screen2View17setMinTemperatureEi>:

void Screen2View::setMinTemperature(int value) {
90008674:	b510      	push	{r4, lr}
90008676:	4604      	mov	r4, r0
90008678:	460b      	mov	r3, r1
	Unicode::snprintf(minTemperatureTextAreaBuffer, MINTEMPERATURETEXTAREA_SIZE, "%d", value);
9000867a:	4a06      	ldr	r2, [pc, #24]	; (90008694 <_ZN11Screen2View17setMinTemperatureEi+0x20>)
9000867c:	2104      	movs	r1, #4
9000867e:	f200 4004 	addw	r0, r0, #1028	; 0x404
90008682:	f012 fe4b 	bl	9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	minTemperatureTextArea.invalidate();
90008686:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
};
9000868a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	minTemperatureTextArea.invalidate();
9000868e:	f010 be14 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
90008692:	bf00      	nop
90008694:	9002b660 	.word	0x9002b660

90008698 <_ZN11Screen2View23setTemperatureGraphDataEPsii>:

void Screen2View::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
	if(!data) {
90008698:	b361      	cbz	r1, 900086f4 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x5c>
void Screen2View::setTemperatureGraphData(short int* data, int minYRange, int maxYRange) {
9000869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		return;
	}

	temperatureGraph.clear();
9000869e:	f500 77c6 	add.w	r7, r0, #396	; 0x18c
900086a2:	4614      	mov	r4, r2
900086a4:	4606      	mov	r6, r0
900086a6:	4698      	mov	r8, r3
900086a8:	4638      	mov	r0, r7
900086aa:	460d      	mov	r5, r1
	temperatureGraph.setGraphRangeY(minYRange - 1, maxYRange + 1);
900086ac:	3c01      	subs	r4, #1
	temperatureGraph.clear();
900086ae:	f00c fb7c 	bl	90014daa <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>
        return int2scaled(i, yScale);
900086b2:	f8d6 11c0 	ldr.w	r1, [r6, #448]	; 0x1c0
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
900086b6:	4638      	mov	r0, r7
900086b8:	fb08 1201 	mla	r2, r8, r1, r1
900086bc:	fb04 f101 	mul.w	r1, r4, r1
900086c0:	f00b fd34 	bl	9001412c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>

	const int size = 24;
	const int minAllowedTemperature = -100;
	for(int i = 0; data[i] != minAllowedTemperature && i < size; ++i) {
900086c4:	f9b5 3000 	ldrsh.w	r3, [r5]
900086c8:	f113 0f64 	cmn.w	r3, #100	; 0x64
900086cc:	d010      	beq.n	900086f0 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x58>
900086ce:	2400      	movs	r4, #0
900086d0:	e002      	b.n	900086d8 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x40>
900086d2:	f113 0f64 	cmn.w	r3, #100	; 0x64
900086d6:	d00b      	beq.n	900086f0 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x58>
        return i * scale;
900086d8:	f8d6 11c0 	ldr.w	r1, [r6, #448]	; 0x1c0
900086dc:	3401      	adds	r4, #1
        return addDataPointScaled(int2scaledY(y));
900086de:	4638      	mov	r0, r7
900086e0:	fb03 f101 	mul.w	r1, r3, r1
900086e4:	f00c f901 	bl	900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
900086e8:	2c18      	cmp	r4, #24
900086ea:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
900086ee:	d1f0      	bne.n	900086d2 <_ZN11Screen2View23setTemperatureGraphDataEPsii+0x3a>
	  temperatureGraph.addDataPoint(data[i]);
	}
};
900086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900086f4:	4770      	bx	lr
900086f6:	bf00      	nop

900086f8 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
900086f8:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
900086fc:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
900086fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90008702:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90008706:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90008708:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
9000870a:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000870e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90008712:	4770      	bx	lr

90008714 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90008714:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90008718:	2b01      	cmp	r3, #1
9000871a:	d102      	bne.n	90008722 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
9000871c:	2300      	movs	r3, #0
9000871e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90008722:	2000      	movs	r0, #0
90008724:	4770      	bx	lr
90008726:	bf00      	nop

90008728 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90008728:	2000      	movs	r0, #0
9000872a:	4770      	bx	lr

9000872c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000872c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000872e:	6904      	ldr	r4, [r0, #16]
90008730:	8900      	ldrh	r0, [r0, #8]
90008732:	46a4      	mov	ip, r4
}
90008734:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90008738:	4760      	bx	ip
9000873a:	bf00      	nop

9000873c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000873c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
9000873e:	68c4      	ldr	r4, [r0, #12]
90008740:	8900      	ldrh	r0, [r0, #8]
90008742:	46a4      	mov	ip, r4
}
90008744:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90008748:	4760      	bx	ip
9000874a:	bf00      	nop

9000874c <FT5336_GestureConfig>:
{
9000874c:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
9000874e:	f100 0518 	add.w	r5, r0, #24
{
90008752:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90008754:	7809      	ldrb	r1, [r1, #0]
90008756:	4628      	mov	r0, r5
90008758:	f000 f96c 	bl	90008a34 <ft5336_radian_value>
9000875c:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
9000875e:	7931      	ldrb	r1, [r6, #4]
90008760:	4628      	mov	r0, r5
90008762:	f000 f975 	bl	90008a50 <ft5336_offset_left_right>
90008766:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90008768:	7a31      	ldrb	r1, [r6, #8]
9000876a:	4628      	mov	r0, r5
9000876c:	f000 f97e 	bl	90008a6c <ft5336_offset_up_down>
90008770:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90008772:	7b31      	ldrb	r1, [r6, #12]
90008774:	4628      	mov	r0, r5
90008776:	f000 f987 	bl	90008a88 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000877a:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
9000877c:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000877e:	4628      	mov	r0, r5
90008780:	f000 f990 	bl	90008aa4 <ft5336_distance_up_down>
90008784:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008786:	7d31      	ldrb	r1, [r6, #20]
90008788:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000878a:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
9000878c:	f000 f998 	bl	90008ac0 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90008790:	42c4      	cmn	r4, r0
}
90008792:	bf14      	ite	ne
90008794:	f04f 30ff 	movne.w	r0, #4294967295
90008798:	2000      	moveq	r0, #0
9000879a:	bd70      	pop	{r4, r5, r6, pc}

9000879c <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
9000879c:	3018      	adds	r0, #24
9000879e:	f000 b9ab 	b.w	90008af8 <ft5336_chip_id>
900087a2:	bf00      	nop

900087a4 <FT5336_GetState>:
{
900087a4:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900087a6:	f100 0518 	add.w	r5, r0, #24
{
900087aa:	b083      	sub	sp, #12
900087ac:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900087ae:	4628      	mov	r0, r5
900087b0:	a901      	add	r1, sp, #4
900087b2:	f000 f931 	bl	90008a18 <ft5336_td_status>
900087b6:	bb10      	cbnz	r0, 900087fe <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900087b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900087bc:	2b05      	cmp	r3, #5
900087be:	bf94      	ite	ls
900087c0:	4619      	movls	r1, r3
900087c2:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900087c4:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900087c6:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900087c8:	4628      	mov	r0, r5
900087ca:	2103      	movs	r1, #3
900087cc:	eb0d 0203 	add.w	r2, sp, r3
900087d0:	f000 f910 	bl	900089f4 <ft5336_read_reg>
900087d4:	b9b0      	cbnz	r0, 90008804 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087de:	0212      	lsls	r2, r2, #8
900087e0:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087e4:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087e6:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087ee:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
900087f4:	430b      	orrs	r3, r1
900087f6:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900087fa:	b003      	add	sp, #12
900087fc:	bd30      	pop	{r4, r5, pc}
900087fe:	f04f 31ff 	mov.w	r1, #4294967295
90008802:	e7df      	b.n	900087c4 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90008804:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90008808:	e7f7      	b.n	900087fa <FT5336_GetState+0x56>
9000880a:	bf00      	nop

9000880c <FT5336_GetMultiTouchState>:
{
9000880c:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000880e:	f100 0518 	add.w	r5, r0, #24
{
90008812:	b088      	sub	sp, #32
90008814:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008816:	4628      	mov	r0, r5
90008818:	4669      	mov	r1, sp
9000881a:	f000 f8fd 	bl	90008a18 <ft5336_td_status>
9000881e:	2800      	cmp	r0, #0
90008820:	f040 809a 	bne.w	90008958 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90008824:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90008828:	2b05      	cmp	r3, #5
9000882a:	bf94      	ite	ls
9000882c:	4619      	movls	r1, r3
9000882e:	2100      	movhi	r1, #0
90008830:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008832:	231e      	movs	r3, #30
90008834:	466a      	mov	r2, sp
90008836:	4628      	mov	r0, r5
90008838:	2103      	movs	r1, #3
9000883a:	f000 f8db 	bl	900089f4 <ft5336_read_reg>
9000883e:	2800      	cmp	r0, #0
90008840:	f040 808d 	bne.w	9000895e <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008844:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008848:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000884c:	020a      	lsls	r2, r1, #8
9000884e:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008852:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008854:	f89d c007 	ldrb.w	ip, [sp, #7]
90008858:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000885c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000885e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008862:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008866:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008868:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000886c:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000886e:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008870:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008872:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008874:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008878:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000887a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000887e:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008882:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008884:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008886:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000888a:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000888c:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000888e:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008890:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008894:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008896:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008898:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000889c:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088a0:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088a2:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088a4:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088a6:	ea45 050c 	orr.w	r5, r5, ip
900088aa:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088ae:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088b2:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088b4:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088b6:	0212      	lsls	r2, r2, #8
900088b8:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088bc:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088be:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088c6:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088c8:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
900088ce:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088d0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088d4:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088d6:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088dc:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088de:	f89d 200f 	ldrb.w	r2, [sp, #15]
900088e2:	4313      	orrs	r3, r2
900088e4:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088e6:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088e8:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088f0:	020a      	lsls	r2, r1, #8
900088f2:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088f6:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088f8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088fc:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008902:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008904:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008908:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000890a:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000890c:	f89d 1018 	ldrb.w	r1, [sp, #24]
90008910:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008912:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008914:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008916:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000891a:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000891c:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008920:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008922:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008926:	f89d 301d 	ldrb.w	r3, [sp, #29]
9000892a:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000892c:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000892e:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008930:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008934:	6625      	str	r5, [r4, #96]	; 0x60
90008936:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008938:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000893c:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000893e:	021b      	lsls	r3, r3, #8
90008940:	f89d 101b 	ldrb.w	r1, [sp, #27]
90008944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90008948:	430b      	orrs	r3, r1
9000894a:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000894c:	f89d 3019 	ldrb.w	r3, [sp, #25]
90008950:	4313      	orrs	r3, r2
90008952:	6163      	str	r3, [r4, #20]
}
90008954:	b008      	add	sp, #32
90008956:	bd70      	pop	{r4, r5, r6, pc}
90008958:	f04f 31ff 	mov.w	r1, #4294967295
9000895c:	e768      	b.n	90008830 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
9000895e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90008962:	e7f7      	b.n	90008954 <FT5336_GetMultiTouchState+0x148>

90008964 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90008964:	3018      	adds	r0, #24
90008966:	f000 b84d 	b.w	90008a04 <ft5336_gest_id>
9000896a:	bf00      	nop

9000896c <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
9000896c:	2101      	movs	r1, #1
9000896e:	3018      	adds	r0, #24
90008970:	f000 b8b4 	b.w	90008adc <ft5336_g_mode>

90008974 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90008974:	2100      	movs	r1, #0
90008976:	3018      	adds	r0, #24
90008978:	f000 b8b0 	b.w	90008adc <ft5336_g_mode>

9000897c <FT5336_Init>:
{
9000897c:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
9000897e:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90008982:	b98d      	cbnz	r5, 900089a8 <FT5336_Init+0x2c>
    pObj->IO.Init();
90008984:	4606      	mov	r6, r0
90008986:	4604      	mov	r4, r0
90008988:	f856 3b18 	ldr.w	r3, [r6], #24
9000898c:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000898e:	4629      	mov	r1, r5
90008990:	4630      	mov	r0, r6
90008992:	f000 f8a3 	bl	90008adc <ft5336_g_mode>
  if(ret != FT5336_OK)
90008996:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90008998:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
9000899c:	bf18      	it	ne
9000899e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
900089a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
900089a4:	4240      	negs	r0, r0
}
900089a6:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
900089a8:	2000      	movs	r0, #0
}
900089aa:	bd70      	pop	{r4, r5, r6, pc}

900089ac <FT5336_ClearIT>:
900089ac:	2000      	movs	r0, #0
900089ae:	4770      	bx	lr

900089b0 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
900089b0:	b1c0      	cbz	r0, 900089e4 <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
900089b2:	890a      	ldrh	r2, [r1, #8]
{
900089b4:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
900089b6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
900089ba:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
900089bc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
900089c0:	694a      	ldr	r2, [r1, #20]
900089c2:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
900089c6:	4909      	ldr	r1, [pc, #36]	; (900089ec <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
900089c8:	60c5      	str	r5, [r0, #12]
900089ca:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
900089ce:	4a08      	ldr	r2, [pc, #32]	; (900089f0 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
900089d0:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
900089d4:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
900089d6:	b10b      	cbz	r3, 900089dc <FT5336_RegisterBusIO+0x2c>
}
900089d8:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
900089da:	4718      	bx	r3
}
900089dc:	f04f 30ff 	mov.w	r0, #4294967295
900089e0:	bc30      	pop	{r4, r5}
900089e2:	4770      	bx	lr
900089e4:	f04f 30ff 	mov.w	r0, #4294967295
900089e8:	4770      	bx	lr
900089ea:	bf00      	nop
900089ec:	9000872d 	.word	0x9000872d
900089f0:	9000873d 	.word	0x9000873d

900089f4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900089f4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089f6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900089fa:	46a4      	mov	ip, r4
}
900089fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a00:	4760      	bx	ip
90008a02:	bf00      	nop

90008a04 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008a04:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a06:	2301      	movs	r3, #1
{
90008a08:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a0a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90008a0e:	4619      	mov	r1, r3
90008a10:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90008a12:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a16:	4760      	bx	ip

90008a18 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90008a18:	b538      	push	{r3, r4, r5, lr}
90008a1a:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008a1c:	2301      	movs	r3, #1
90008a1e:	2102      	movs	r1, #2
90008a20:	4622      	mov	r2, r4
90008a22:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90008a26:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90008a28:	b918      	cbnz	r0, 90008a32 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90008a2a:	7823      	ldrb	r3, [r4, #0]
90008a2c:	f003 030f 	and.w	r3, r3, #15
90008a30:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90008a32:	bd38      	pop	{r3, r4, r5, pc}

90008a34 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90008a34:	b510      	push	{r4, lr}
90008a36:	460c      	mov	r4, r1
90008a38:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a3a:	2301      	movs	r3, #1
90008a3c:	2191      	movs	r1, #145	; 0x91
{
90008a3e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a42:	f10d 0207 	add.w	r2, sp, #7
90008a46:	6804      	ldr	r4, [r0, #0]
90008a48:	6880      	ldr	r0, [r0, #8]
90008a4a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90008a4c:	b002      	add	sp, #8
90008a4e:	bd10      	pop	{r4, pc}

90008a50 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008a50:	b510      	push	{r4, lr}
90008a52:	460c      	mov	r4, r1
90008a54:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a56:	2301      	movs	r3, #1
90008a58:	2192      	movs	r1, #146	; 0x92
{
90008a5a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a5e:	f10d 0207 	add.w	r2, sp, #7
90008a62:	6804      	ldr	r4, [r0, #0]
90008a64:	6880      	ldr	r0, [r0, #8]
90008a66:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90008a68:	b002      	add	sp, #8
90008a6a:	bd10      	pop	{r4, pc}

90008a6c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008a6c:	b510      	push	{r4, lr}
90008a6e:	460c      	mov	r4, r1
90008a70:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a72:	2301      	movs	r3, #1
90008a74:	2193      	movs	r1, #147	; 0x93
{
90008a76:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a7a:	f10d 0207 	add.w	r2, sp, #7
90008a7e:	6804      	ldr	r4, [r0, #0]
90008a80:	6880      	ldr	r0, [r0, #8]
90008a82:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90008a84:	b002      	add	sp, #8
90008a86:	bd10      	pop	{r4, pc}

90008a88 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008a88:	b510      	push	{r4, lr}
90008a8a:	460c      	mov	r4, r1
90008a8c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a8e:	2301      	movs	r3, #1
90008a90:	2194      	movs	r1, #148	; 0x94
{
90008a92:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a96:	f10d 0207 	add.w	r2, sp, #7
90008a9a:	6804      	ldr	r4, [r0, #0]
90008a9c:	6880      	ldr	r0, [r0, #8]
90008a9e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90008aa0:	b002      	add	sp, #8
90008aa2:	bd10      	pop	{r4, pc}

90008aa4 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008aa4:	b510      	push	{r4, lr}
90008aa6:	460c      	mov	r4, r1
90008aa8:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008aaa:	2301      	movs	r3, #1
90008aac:	2195      	movs	r1, #149	; 0x95
{
90008aae:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008ab2:	f10d 0207 	add.w	r2, sp, #7
90008ab6:	6804      	ldr	r4, [r0, #0]
90008ab8:	6880      	ldr	r0, [r0, #8]
90008aba:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90008abc:	b002      	add	sp, #8
90008abe:	bd10      	pop	{r4, pc}

90008ac0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90008ac0:	b510      	push	{r4, lr}
90008ac2:	460c      	mov	r4, r1
90008ac4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008ac6:	2301      	movs	r3, #1
90008ac8:	2196      	movs	r1, #150	; 0x96
{
90008aca:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008ace:	f10d 0207 	add.w	r2, sp, #7
90008ad2:	6804      	ldr	r4, [r0, #0]
90008ad4:	6880      	ldr	r0, [r0, #8]
90008ad6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90008ad8:	b002      	add	sp, #8
90008ada:	bd10      	pop	{r4, pc}

90008adc <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90008adc:	b510      	push	{r4, lr}
90008ade:	460c      	mov	r4, r1
90008ae0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008ae2:	2301      	movs	r3, #1
90008ae4:	21a4      	movs	r1, #164	; 0xa4
{
90008ae6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008aea:	f10d 0207 	add.w	r2, sp, #7
90008aee:	6804      	ldr	r4, [r0, #0]
90008af0:	6880      	ldr	r0, [r0, #8]
90008af2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90008af4:	b002      	add	sp, #8
90008af6:	bd10      	pop	{r4, pc}

90008af8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008af8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008afa:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90008afe:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008b00:	2301      	movs	r3, #1
90008b02:	46a4      	mov	ip, r4
90008b04:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90008b06:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008b0a:	4760      	bx	ip

90008b0c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008b0e:	680b      	ldr	r3, [r1, #0]
{
90008b10:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008b12:	4c2a      	ldr	r4, [pc, #168]	; (90008bbc <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90008b18:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90008b1a:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90008b1c:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b1e:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90008b20:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008b22:	2301      	movs	r3, #1
90008b24:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90008b26:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b28:	f005 fd3c 	bl	9000e5a4 <HAL_SDRAM_SendCommand>
90008b2c:	2800      	cmp	r0, #0
90008b2e:	d142      	bne.n	90008bb6 <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90008b30:	f000 ff46 	bl	900099c0 <HAL_GetTick>
90008b34:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90008b36:	f000 ff43 	bl	900099c0 <HAL_GetTick>
90008b3a:	4286      	cmp	r6, r0
90008b3c:	d0fb      	beq.n	90008b36 <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008b3e:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008b40:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90008b42:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b44:	491d      	ldr	r1, [pc, #116]	; (90008bbc <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008b46:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90008b48:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90008b4a:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b4c:	4638      	mov	r0, r7
90008b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90008b52:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90008b54:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b56:	f005 fd25 	bl	9000e5a4 <HAL_SDRAM_SendCommand>
90008b5a:	bb60      	cbnz	r0, 90008bb6 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b5c:	4917      	ldr	r1, [pc, #92]	; (90008bbc <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90008b5e:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
90008b62:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b64:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90008b66:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90008b6a:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90008b70:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b72:	f005 fd17 	bl	9000e5a4 <HAL_SDRAM_SendCommand>
90008b76:	b9f0      	cbnz	r0, 90008bb6 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b78:	4910      	ldr	r1, [pc, #64]	; (90008bbc <MT48LC4M32B2_Init+0xb0>)
90008b7a:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008b7c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90008b80:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90008b82:	696a      	ldr	r2, [r5, #20]
90008b84:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90008b86:	69aa      	ldr	r2, [r5, #24]
90008b88:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008b8a:	69ea      	ldr	r2, [r5, #28]
90008b8c:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90008b8e:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90008b90:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b92:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90008b94:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b9c:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b9e:	f005 fd01 	bl	9000e5a4 <HAL_SDRAM_SendCommand>
90008ba2:	b940      	cbnz	r0, 90008bb6 <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90008ba4:	68a9      	ldr	r1, [r5, #8]
90008ba6:	4638      	mov	r0, r7
90008ba8:	f005 fd1c 	bl	9000e5e4 <HAL_SDRAM_ProgramRefreshRate>
90008bac:	3800      	subs	r0, #0
90008bae:	bf18      	it	ne
90008bb0:	2001      	movne	r0, #1
90008bb2:	4240      	negs	r0, r0
}
90008bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90008bb6:	f04f 30ff 	mov.w	r0, #4294967295
}
90008bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008bbc:	2400d19c 	.word	0x2400d19c

90008bc0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90008bc0:	4a10      	ldr	r2, [pc, #64]	; (90008c04 <BSP_I2C4_DeInit+0x44>)
{
90008bc2:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90008bc4:	6813      	ldr	r3, [r2, #0]
90008bc6:	3b01      	subs	r3, #1
90008bc8:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90008bca:	b10b      	cbz	r3, 90008bd0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90008bcc:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90008bce:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90008bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90008bd4:	480c      	ldr	r0, [pc, #48]	; (90008c08 <BSP_I2C4_DeInit+0x48>)
90008bd6:	f001 fac1 	bl	9000a15c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90008bda:	480b      	ldr	r0, [pc, #44]	; (90008c08 <BSP_I2C4_DeInit+0x48>)
90008bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90008be0:	f001 fabc 	bl	9000a15c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90008be4:	4a09      	ldr	r2, [pc, #36]	; (90008c0c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008be6:	480a      	ldr	r0, [pc, #40]	; (90008c10 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90008be8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90008bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008bf4:	f001 fd5a 	bl	9000a6ac <HAL_I2C_DeInit>
90008bf8:	2800      	cmp	r0, #0
90008bfa:	d0e7      	beq.n	90008bcc <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90008bfc:	f06f 0007 	mvn.w	r0, #7
}
90008c00:	bd08      	pop	{r3, pc}
90008c02:	bf00      	nop
90008c04:	2400d1ac 	.word	0x2400d1ac
90008c08:	58020c00 	.word	0x58020c00
90008c0c:	58024400 	.word	0x58024400
90008c10:	2400dbb4 	.word	0x2400dbb4

90008c14 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90008c14:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90008c16:	2201      	movs	r2, #1
{
90008c18:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90008c1a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90008c1e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90008c22:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90008c26:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90008c2a:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90008c2c:	f001 fce6 	bl	9000a5fc <HAL_I2C_Init>
90008c30:	b108      	cbz	r0, 90008c36 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90008c32:	2001      	movs	r0, #1
}
90008c34:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90008c36:	4601      	mov	r1, r0
90008c38:	4620      	mov	r0, r4
90008c3a:	f001 fff5 	bl	9000ac28 <HAL_I2CEx_ConfigAnalogFilter>
90008c3e:	2800      	cmp	r0, #0
90008c40:	d1f7      	bne.n	90008c32 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90008c42:	4601      	mov	r1, r0
90008c44:	4620      	mov	r0, r4
90008c46:	f002 f819 	bl	9000ac7c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90008c4a:	3800      	subs	r0, #0
90008c4c:	bf18      	it	ne
90008c4e:	2001      	movne	r0, #1
}
90008c50:	bd10      	pop	{r4, pc}
90008c52:	bf00      	nop

90008c54 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90008c54:	4b99      	ldr	r3, [pc, #612]	; (90008ebc <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90008c56:	489a      	ldr	r0, [pc, #616]	; (90008ec0 <BSP_I2C4_Init+0x26c>)
90008c58:	4a9a      	ldr	r2, [pc, #616]	; (90008ec4 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90008c5a:	6819      	ldr	r1, [r3, #0]
{
90008c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008c60:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90008c62:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90008c64:	9103      	str	r1, [sp, #12]
90008c66:	b119      	cbz	r1, 90008c70 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90008c68:	2000      	movs	r0, #0
}
90008c6a:	b01f      	add	sp, #124	; 0x7c
90008c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90008c70:	2201      	movs	r2, #1
90008c72:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90008c74:	f001 ffd2 	bl	9000ac1c <HAL_I2C_GetState>
90008c78:	2800      	cmp	r0, #0
90008c7a:	d1f5      	bne.n	90008c68 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c7c:	4c92      	ldr	r4, [pc, #584]	; (90008ec8 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90008c82:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008c84:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c86:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c8a:	2600      	movs	r6, #0
90008c8c:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c8e:	f043 0308 	orr.w	r3, r3, #8
90008c92:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008c96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008c9a:	f003 0308 	and.w	r3, r3, #8
90008c9e:	9315      	str	r3, [sp, #84]	; 0x54
90008ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008ca2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008ca6:	f043 0308 	orr.w	r3, r3, #8
90008caa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008cae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008cb2:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008cb4:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008cb8:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008cbc:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008cbe:	a918      	add	r1, sp, #96	; 0x60
90008cc0:	4882      	ldr	r0, [pc, #520]	; (90008ecc <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008cc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008cc4:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008cc8:	f001 f916 	bl	90009ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008ccc:	2312      	movs	r3, #18
90008cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008cd2:	a918      	add	r1, sp, #96	; 0x60
90008cd4:	487d      	ldr	r0, [pc, #500]	; (90008ecc <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90008cd6:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008cd8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90008cdc:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008ce0:	f001 f90a 	bl	90009ef8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90008ce4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008cec:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90008cf0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008cf8:	9317      	str	r3, [sp, #92]	; 0x5c
90008cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90008cfc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008d04:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90008d08:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008d10:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008d14:	f004 fca6 	bl	9000d664 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90008d18:	2800      	cmp	r0, #0
90008d1a:	f000 81f6 	beq.w	9000910a <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d1e:	4b6c      	ldr	r3, [pc, #432]	; (90008ed0 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90008d20:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d24:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d26:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008d2a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90008ed8 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d2e:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d30:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90008d34:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d36:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008d38:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d3c:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
90008d40:	4b64      	ldr	r3, [pc, #400]	; (90008ed4 <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90008d42:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008d46:	0079      	lsls	r1, r7, #1
90008d48:	681b      	ldr	r3, [r3, #0]
90008d4a:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
90008d4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
90008d52:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d54:	4699      	mov	r9, r3
90008d56:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d58:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90008d5c:	46b8      	mov	r8, r7
90008d5e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90008d62:	bf94      	ite	ls
90008d64:	2101      	movls	r1, #1
90008d66:	2100      	movhi	r1, #0
90008d68:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90008d6c:	f001 0101 	and.w	r1, r1, #1
90008d70:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90008d74:	bf38      	it	cc
90008d76:	2100      	movcc	r1, #0
90008d78:	429c      	cmp	r4, r3
90008d7a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90008d7e:	9105      	str	r1, [sp, #20]
90008d80:	bf8c      	ite	hi
90008d82:	2100      	movhi	r1, #0
90008d84:	2101      	movls	r1, #1
90008d86:	459c      	cmp	ip, r3
90008d88:	bf38      	it	cc
90008d8a:	2100      	movcc	r1, #0
90008d8c:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90008d90:	9106      	str	r1, [sp, #24]
90008d92:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90008d96:	9104      	str	r1, [sp, #16]
90008d98:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90008d9c:	9111      	str	r1, [sp, #68]	; 0x44
90008d9e:	bf94      	ite	ls
90008da0:	2101      	movls	r1, #1
90008da2:	2100      	movhi	r1, #0
90008da4:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90008da8:	f001 0e01 	and.w	lr, r1, #1
90008dac:	bf38      	it	cc
90008dae:	f04f 0e00 	movcc.w	lr, #0
90008db2:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008db4:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008db8:	f8cd e01c 	str.w	lr, [sp, #28]
90008dbc:	bf8c      	ite	hi
90008dbe:	f04f 0e00 	movhi.w	lr, #0
90008dc2:	f04f 0e01 	movls.w	lr, #1
90008dc6:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008dc8:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008dca:	bf38      	it	cc
90008dcc:	f04f 0e00 	movcc.w	lr, #0
90008dd0:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90008dd4:	bf98      	it	ls
90008dd6:	2101      	movls	r1, #1
90008dd8:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90008ddc:	f8cd e020 	str.w	lr, [sp, #32]
90008de0:	f001 0101 	and.w	r1, r1, #1
90008de4:	bf38      	it	cc
90008de6:	2100      	movcc	r1, #0
90008de8:	4284      	cmp	r4, r0
90008dea:	9109      	str	r1, [sp, #36]	; 0x24
90008dec:	4601      	mov	r1, r0
90008dee:	bf8c      	ite	hi
90008df0:	2000      	movhi	r0, #0
90008df2:	2001      	movls	r0, #1
90008df4:	458c      	cmp	ip, r1
90008df6:	bf38      	it	cc
90008df8:	2000      	movcc	r0, #0
90008dfa:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90008dfe:	900b      	str	r0, [sp, #44]	; 0x2c
90008e00:	bf94      	ite	ls
90008e02:	2001      	movls	r0, #1
90008e04:	2000      	movhi	r0, #0
90008e06:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90008e0a:	f000 0001 	and.w	r0, r0, #1
90008e0e:	bf38      	it	cc
90008e10:	2000      	movcc	r0, #0
90008e12:	900c      	str	r0, [sp, #48]	; 0x30
90008e14:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90008e18:	4284      	cmp	r4, r0
90008e1a:	bf8c      	ite	hi
90008e1c:	f04f 0e00 	movhi.w	lr, #0
90008e20:	f04f 0e01 	movls.w	lr, #1
90008e24:	4584      	cmp	ip, r0
90008e26:	bf38      	it	cc
90008e28:	f04f 0e00 	movcc.w	lr, #0
90008e2c:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90008e30:	4670      	mov	r0, lr
90008e32:	bf94      	ite	ls
90008e34:	2001      	movls	r0, #1
90008e36:	2000      	movhi	r0, #0
90008e38:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90008e3c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90008e40:	f04f 0e00 	mov.w	lr, #0
90008e44:	f000 0001 	and.w	r0, r0, #1
90008e48:	bf38      	it	cc
90008e4a:	2000      	movcc	r0, #0
90008e4c:	900e      	str	r0, [sp, #56]	; 0x38
90008e4e:	9804      	ldr	r0, [sp, #16]
90008e50:	4284      	cmp	r4, r0
90008e52:	4602      	mov	r2, r0
90008e54:	bf8c      	ite	hi
90008e56:	2200      	movhi	r2, #0
90008e58:	2201      	movls	r2, #1
90008e5a:	4584      	cmp	ip, r0
90008e5c:	bf38      	it	cc
90008e5e:	2200      	movcc	r2, #0
90008e60:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90008e64:	920f      	str	r2, [sp, #60]	; 0x3c
90008e66:	bf94      	ite	ls
90008e68:	2201      	movls	r2, #1
90008e6a:	2200      	movhi	r2, #0
90008e6c:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90008e70:	f002 0201 	and.w	r2, r2, #1
90008e74:	bf38      	it	cc
90008e76:	2200      	movcc	r2, #0
90008e78:	9210      	str	r2, [sp, #64]	; 0x40
90008e7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
90008e7c:	4294      	cmp	r4, r2
90008e7e:	4613      	mov	r3, r2
90008e80:	bf8c      	ite	hi
90008e82:	2300      	movhi	r3, #0
90008e84:	2301      	movls	r3, #1
90008e86:	4594      	cmp	ip, r2
90008e88:	bf38      	it	cc
90008e8a:	2300      	movcc	r3, #0
90008e8c:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90008e90:	9311      	str	r3, [sp, #68]	; 0x44
90008e92:	bf94      	ite	ls
90008e94:	2301      	movls	r3, #1
90008e96:	2300      	movhi	r3, #0
90008e98:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90008e9c:	f003 0301 	and.w	r3, r3, #1
90008ea0:	bf38      	it	cc
90008ea2:	2300      	movcc	r3, #0
90008ea4:	9312      	str	r3, [sp, #72]	; 0x48
90008ea6:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90008eaa:	429c      	cmp	r4, r3
90008eac:	bf8c      	ite	hi
90008eae:	2200      	movhi	r2, #0
90008eb0:	2201      	movls	r2, #1
90008eb2:	459c      	cmp	ip, r3
90008eb4:	bf38      	it	cc
90008eb6:	2200      	movcc	r2, #0
90008eb8:	9204      	str	r2, [sp, #16]
90008eba:	e014      	b.n	90008ee6 <BSP_I2C4_Init+0x292>
90008ebc:	2400d1ac 	.word	0x2400d1ac
90008ec0:	2400dbb4 	.word	0x2400dbb4
90008ec4:	58001c00 	.word	0x58001c00
90008ec8:	58024400 	.word	0x58024400
90008ecc:	58020c00 	.word	0x58020c00
90008ed0:	3b9aca00 	.word	0x3b9aca00
90008ed4:	2400dbb0 	.word	0x2400dbb0
90008ed8:	2400d1b0 	.word	0x2400d1b0
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008edc:	f1be 0f10 	cmp.w	lr, #16
90008ee0:	44b8      	add	r8, r7
90008ee2:	f000 826c 	beq.w	900093be <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
90008ee6:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90008eea:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90008eec:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90008ef0:	d3f4      	bcc.n	90008edc <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90008ef2:	ebbb 0205 	subs.w	r2, fp, r5
90008ef6:	bf18      	it	ne
90008ef8:	2201      	movne	r2, #1
90008efa:	2c00      	cmp	r4, #0
90008efc:	bf18      	it	ne
90008efe:	2200      	movne	r2, #0
90008f00:	2a00      	cmp	r2, #0
90008f02:	f040 824a 	bne.w	9000939a <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008f06:	45bc      	cmp	ip, r7
90008f08:	bf34      	ite	cc
90008f0a:	2200      	movcc	r2, #0
90008f0c:	2201      	movcs	r2, #1
90008f0e:	42bc      	cmp	r4, r7
90008f10:	bf88      	it	hi
90008f12:	2200      	movhi	r2, #0
            if(presc != prev_presc)
90008f14:	45ab      	cmp	fp, r5
90008f16:	bf0c      	ite	eq
90008f18:	2200      	moveq	r2, #0
90008f1a:	f002 0201 	andne.w	r2, r2, #1
90008f1e:	2a00      	cmp	r2, #0
90008f20:	f000 80fd 	beq.w	9000911e <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f24:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f28:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f2c:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f2e:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f32:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f36:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f3a:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f3c:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f3e:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f40:	f200 81a5 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90008f44:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f46:	9906      	ldr	r1, [sp, #24]
90008f48:	45ab      	cmp	fp, r5
90008f4a:	bf0c      	ite	eq
90008f4c:	2100      	moveq	r1, #0
90008f4e:	f001 0101 	andne.w	r1, r1, #1
90008f52:	2900      	cmp	r1, #0
90008f54:	f000 80ff 	beq.w	90009156 <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f58:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f5c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f60:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f62:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f66:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f6a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f6e:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f70:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f72:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f74:	f200 818b 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90008f78:	460a      	mov	r2, r1
90008f7a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f7c:	9908      	ldr	r1, [sp, #32]
90008f7e:	45ab      	cmp	fp, r5
90008f80:	bf0c      	ite	eq
90008f82:	2100      	moveq	r1, #0
90008f84:	f001 0101 	andne.w	r1, r1, #1
90008f88:	2900      	cmp	r1, #0
90008f8a:	f000 80ff 	beq.w	9000918c <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f8e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f92:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f96:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f98:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f9c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fa0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fa4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fa6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008fa8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008faa:	f200 8170 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90008fae:	460a      	mov	r2, r1
90008fb0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008fb4:	45ab      	cmp	fp, r5
90008fb6:	bf0c      	ite	eq
90008fb8:	2100      	moveq	r1, #0
90008fba:	f001 0101 	andne.w	r1, r1, #1
90008fbe:	2900      	cmp	r1, #0
90008fc0:	f000 80fe 	beq.w	900091c0 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fc4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008fc8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fcc:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fce:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fd2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fd6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fda:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fdc:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008fde:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fe0:	f200 8155 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90008fe4:	460a      	mov	r2, r1
90008fe6:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
90008fea:	45ab      	cmp	fp, r5
90008fec:	bf0c      	ite	eq
90008fee:	2100      	moveq	r1, #0
90008ff0:	f001 0101 	andne.w	r1, r1, #1
90008ff4:	2900      	cmp	r1, #0
90008ff6:	f000 80fd 	beq.w	900091f4 <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ffa:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008ffe:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009002:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009004:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009008:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000900c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009010:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009012:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009014:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009016:	f200 813a 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
9000901a:	460a      	mov	r2, r1
9000901c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000901e:	990f      	ldr	r1, [sp, #60]	; 0x3c
90009020:	45ab      	cmp	fp, r5
90009022:	bf0c      	ite	eq
90009024:	2100      	moveq	r1, #0
90009026:	f001 0101 	andne.w	r1, r1, #1
9000902a:	2900      	cmp	r1, #0
9000902c:	f000 80fc 	beq.w	90009228 <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009030:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009034:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009038:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000903a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000903e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009042:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009046:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009048:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000904a:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000904c:	f200 811f 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90009050:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009052:	9e11      	ldr	r6, [sp, #68]	; 0x44
90009054:	455d      	cmp	r5, fp
90009056:	bf0c      	ite	eq
90009058:	2600      	moveq	r6, #0
9000905a:	f006 0601 	andne.w	r6, r6, #1
9000905e:	2e00      	cmp	r6, #0
90009060:	f000 80fb 	beq.w	9000925a <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009064:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009068:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000906c:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000906e:	4650      	mov	r0, sl
90009070:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009074:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009078:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000907c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000907e:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009080:	f200 8105 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90009084:	4631      	mov	r1, r6
90009086:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009088:	9e04      	ldr	r6, [sp, #16]
9000908a:	455d      	cmp	r5, fp
9000908c:	bf0c      	ite	eq
9000908e:	2600      	moveq	r6, #0
90009090:	f006 0601 	andne.w	r6, r6, #1
90009094:	2e00      	cmp	r6, #0
90009096:	f000 817c 	beq.w	90009392 <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000909a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000909e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090a2:	4650      	mov	r0, sl
900090a4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900090a8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090ac:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900090b0:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090b2:	f04f 030f 	mov.w	r3, #15
900090b6:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090b8:	f200 80e9 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
900090bc:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900090be:	e70d      	b.n	90008edc <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900090c0:	9a07      	ldr	r2, [sp, #28]
900090c2:	9b08      	ldr	r3, [sp, #32]
900090c4:	3214      	adds	r2, #20
900090c6:	3301      	adds	r3, #1
900090c8:	9207      	str	r2, [sp, #28]
900090ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900090cc:	9308      	str	r3, [sp, #32]
900090ce:	4293      	cmp	r3, r2
900090d0:	f040 80ff 	bne.w	900092d2 <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
900090d4:	297f      	cmp	r1, #127	; 0x7f
900090d6:	d818      	bhi.n	9000910a <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090d8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
900090dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
900090de:	eb01 0283 	add.w	r2, r1, r3, lsl #2
900090e2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090e6:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900090e8:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090ea:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090ec:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090f0:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900090f4:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090f8:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900090fa:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900090fc:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900090fe:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90009102:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90009104:	430b      	orrs	r3, r1
90009106:	4313      	orrs	r3, r2
90009108:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
9000910a:	9903      	ldr	r1, [sp, #12]
9000910c:	48b5      	ldr	r0, [pc, #724]	; (900093e4 <BSP_I2C4_Init+0x790>)
9000910e:	f7ff fd81 	bl	90008c14 <MX_I2C4_Init>
90009112:	2800      	cmp	r0, #0
90009114:	f43f ada8 	beq.w	90008c68 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
90009118:	f06f 0007 	mvn.w	r0, #7
  return ret;
9000911c:	e5a5      	b.n	90008c6a <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
9000911e:	4632      	mov	r2, r6
90009120:	9905      	ldr	r1, [sp, #20]
90009122:	45ab      	cmp	fp, r5
90009124:	bf0c      	ite	eq
90009126:	2100      	moveq	r1, #0
90009128:	f001 0101 	andne.w	r1, r1, #1
9000912c:	2900      	cmp	r1, #0
9000912e:	f43f af0a 	beq.w	90008f46 <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009132:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009136:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000913a:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000913c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009140:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009144:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009148:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000914a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000914c:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000914e:	f200 809e 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90009152:	460a      	mov	r2, r1
90009154:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009156:	9907      	ldr	r1, [sp, #28]
90009158:	45ab      	cmp	fp, r5
9000915a:	bf0c      	ite	eq
9000915c:	2100      	moveq	r1, #0
9000915e:	f001 0101 	andne.w	r1, r1, #1
90009162:	2900      	cmp	r1, #0
90009164:	f43f af0a 	beq.w	90008f7c <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009168:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000916c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009170:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009172:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009176:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000917a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000917e:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009180:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009182:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009184:	f200 8083 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
90009188:	460a      	mov	r2, r1
9000918a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000918c:	9909      	ldr	r1, [sp, #36]	; 0x24
9000918e:	45ab      	cmp	fp, r5
90009190:	bf0c      	ite	eq
90009192:	2100      	moveq	r1, #0
90009194:	f001 0101 	andne.w	r1, r1, #1
90009198:	2900      	cmp	r1, #0
9000919a:	f43f af0a 	beq.w	90008fb2 <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000919e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900091a2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091a6:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091a8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091ac:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091b0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091b4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091b6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900091b8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091ba:	d868      	bhi.n	9000928e <BSP_I2C4_Init+0x63a>
900091bc:	460a      	mov	r2, r1
900091be:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900091c0:	990c      	ldr	r1, [sp, #48]	; 0x30
900091c2:	45ab      	cmp	fp, r5
900091c4:	bf0c      	ite	eq
900091c6:	2100      	moveq	r1, #0
900091c8:	f001 0101 	andne.w	r1, r1, #1
900091cc:	2900      	cmp	r1, #0
900091ce:	f43f af0b 	beq.w	90008fe8 <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091d2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900091d6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091da:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091dc:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091e0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091e4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900091e8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900091ea:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900091ec:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900091ee:	d84e      	bhi.n	9000928e <BSP_I2C4_Init+0x63a>
900091f0:	460a      	mov	r2, r1
900091f2:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900091f4:	990e      	ldr	r1, [sp, #56]	; 0x38
900091f6:	45ab      	cmp	fp, r5
900091f8:	bf0c      	ite	eq
900091fa:	2100      	moveq	r1, #0
900091fc:	f001 0101 	andne.w	r1, r1, #1
90009200:	2900      	cmp	r1, #0
90009202:	f43f af0c 	beq.w	9000901e <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009206:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000920a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000920e:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009210:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009214:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009218:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000921c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000921e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009220:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009222:	d834      	bhi.n	9000928e <BSP_I2C4_Init+0x63a>
90009224:	460a      	mov	r2, r1
90009226:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009228:	9910      	ldr	r1, [sp, #64]	; 0x40
9000922a:	45ab      	cmp	fp, r5
9000922c:	bf0c      	ite	eq
9000922e:	2100      	moveq	r1, #0
90009230:	f001 0101 	andne.w	r1, r1, #1
90009234:	2900      	cmp	r1, #0
90009236:	f000 80ae 	beq.w	90009396 <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000923a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000923e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009242:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009244:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009248:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000924c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009250:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009252:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009254:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009256:	d81a      	bhi.n	9000928e <BSP_I2C4_Init+0x63a>
90009258:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000925a:	9e12      	ldr	r6, [sp, #72]	; 0x48
9000925c:	455d      	cmp	r5, fp
9000925e:	bf0c      	ite	eq
90009260:	2600      	moveq	r6, #0
90009262:	f006 0601 	andne.w	r6, r6, #1
90009266:	2e00      	cmp	r6, #0
90009268:	f43f af0e 	beq.w	90009088 <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000926c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009270:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009274:	4650      	mov	r0, sl
90009276:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000927a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000927e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009282:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009284:	f04f 030e 	mov.w	r3, #14
90009288:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000928a:	f67f af17 	bls.w	900090bc <BSP_I2C4_Init+0x468>
9000928e:	4b56      	ldr	r3, [pc, #344]	; (900093e8 <BSP_I2C4_Init+0x794>)
90009290:	900b      	str	r0, [sp, #44]	; 0x2c
90009292:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90009296:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000929a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9000929c:	f240 4201 	movw	r2, #1025	; 0x401
900092a0:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900092a4:	f640 1ac4 	movw	sl, #2500	; 0x9c4
900092a8:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900092aa:	f240 4b12 	movw	fp, #1042	; 0x412
900092ae:	920d      	str	r2, [sp, #52]	; 0x34
900092b0:	9a02      	ldr	r2, [sp, #8]
900092b2:	4296      	cmp	r6, r2
900092b4:	bf38      	it	cc
900092b6:	4616      	movcc	r6, r2
900092b8:	4a4c      	ldr	r2, [pc, #304]	; (900093ec <BSP_I2C4_Init+0x798>)
900092ba:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900092bc:	2200      	movs	r2, #0
900092be:	9208      	str	r2, [sp, #32]
900092c0:	f04f 32ff 	mov.w	r2, #4294967295
900092c4:	4611      	mov	r1, r2
900092c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
900092ca:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
900092ce:	920c      	str	r2, [sp, #48]	; 0x30
900092d0:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900092d2:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900092d4:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900092d8:	6818      	ldr	r0, [r3, #0]
900092da:	9b02      	ldr	r3, [sp, #8]
900092dc:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900092e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900092e2:	1a1b      	subs	r3, r3, r0
900092e4:	ea4f 0943 	mov.w	r9, r3, lsl #1
900092e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900092ea:	eb03 0e00 	add.w	lr, r3, r0
900092ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900092f0:	4403      	add	r3, r0
900092f2:	9309      	str	r3, [sp, #36]	; 0x24
900092f4:	e006      	b.n	90009304 <BSP_I2C4_Init+0x6b0>
900092f6:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
900092fa:	4486      	add	lr, r0
900092fc:	eba9 0900 	sub.w	r9, r9, r0
90009300:	f43f aede 	beq.w	900090c0 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90009304:	f240 5214 	movw	r2, #1300	; 0x514
90009308:	f8cd 8004 	str.w	r8, [sp, #4]
9000930c:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90009310:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90009314:	4596      	cmp	lr, r2
90009316:	d9ee      	bls.n	900092f6 <BSP_I2C4_Init+0x6a2>
90009318:	9a02      	ldr	r2, [sp, #8]
9000931a:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
9000931e:	d2ea      	bcs.n	900092f6 <BSP_I2C4_Init+0x6a2>
90009320:	f640 0c34 	movw	ip, #2100	; 0x834
90009324:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009326:	f8cd 9018 	str.w	r9, [sp, #24]
9000932a:	2200      	movs	r2, #0
9000932c:	ebac 0c03 	sub.w	ip, ip, r3
90009330:	9b09      	ldr	r3, [sp, #36]	; 0x24
90009332:	4689      	mov	r9, r1
90009334:	4473      	add	r3, lr
90009336:	e9cd e804 	strd	lr, r8, [sp, #16]
9000933a:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000933e:	f8dd e01c 	ldr.w	lr, [sp, #28]
90009342:	e005      	b.n	90009350 <BSP_I2C4_Init+0x6fc>
90009344:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90009348:	4403      	add	r3, r0
9000934a:	eba4 0400 	sub.w	r4, r4, r0
9000934e:	d01a      	beq.n	90009386 <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90009350:	eb0c 0103 	add.w	r1, ip, r3
90009354:	4617      	mov	r7, r2
90009356:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
9000935a:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000935c:	42b1      	cmp	r1, r6
9000935e:	d9f1      	bls.n	90009344 <BSP_I2C4_Init+0x6f0>
90009360:	455d      	cmp	r5, fp
90009362:	d8ef      	bhi.n	90009344 <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90009364:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90009368:	bf28      	it	cs
9000936a:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
9000936c:	458a      	cmp	sl, r1
9000936e:	d9e9      	bls.n	90009344 <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90009370:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009372:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90009376:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90009378:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000937a:	4403      	add	r3, r0
9000937c:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90009380:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009384:	d1e4      	bne.n	90009350 <BSP_I2C4_Init+0x6fc>
90009386:	4649      	mov	r1, r9
90009388:	f8dd 9018 	ldr.w	r9, [sp, #24]
9000938c:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90009390:	e7b1      	b.n	900092f6 <BSP_I2C4_Init+0x6a2>
90009392:	460e      	mov	r6, r1
90009394:	e5a2      	b.n	90008edc <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90009396:	4611      	mov	r1, r2
90009398:	e65b      	b.n	90009052 <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000939a:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000939e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900093a2:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900093a4:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900093a8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900093ac:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900093b0:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900093b2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900093b4:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900093b6:	f63f af6a 	bhi.w	9000928e <BSP_I2C4_Init+0x63a>
900093ba:	46ab      	mov	fp, r5
900093bc:	e6b0      	b.n	90009120 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900093be:	3501      	adds	r5, #1
900093c0:	9b02      	ldr	r3, [sp, #8]
900093c2:	2d10      	cmp	r5, #16
900093c4:	441f      	add	r7, r3
900093c6:	f47f acc7 	bne.w	90008d58 <BSP_I2C4_Init+0x104>
900093ca:	b126      	cbz	r6, 900093d6 <BSP_I2C4_Init+0x782>
900093cc:	4b06      	ldr	r3, [pc, #24]	; (900093e8 <BSP_I2C4_Init+0x794>)
900093ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900093d2:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900093d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900093d8:	2b00      	cmp	r3, #0
900093da:	f43f ae96 	beq.w	9000910a <BSP_I2C4_Init+0x4b6>
900093de:	4b03      	ldr	r3, [pc, #12]	; (900093ec <BSP_I2C4_Init+0x798>)
900093e0:	930b      	str	r3, [sp, #44]	; 0x2c
900093e2:	e75a      	b.n	9000929a <BSP_I2C4_Init+0x646>
900093e4:	2400dbb4 	.word	0x2400dbb4
900093e8:	2400dbb0 	.word	0x2400dbb0
900093ec:	2400d1b0 	.word	0x2400d1b0

900093f0 <BSP_I2C4_WriteReg>:
{
900093f0:	b530      	push	{r4, r5, lr}
900093f2:	4614      	mov	r4, r2
900093f4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900093f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900093fa:	460a      	mov	r2, r1
900093fc:	9301      	str	r3, [sp, #4]
900093fe:	4601      	mov	r1, r0
90009400:	2301      	movs	r3, #1
90009402:	4809      	ldr	r0, [pc, #36]	; (90009428 <BSP_I2C4_WriteReg+0x38>)
90009404:	9502      	str	r5, [sp, #8]
90009406:	9400      	str	r4, [sp, #0]
90009408:	f001 f96a 	bl	9000a6e0 <HAL_I2C_Mem_Write>
9000940c:	b908      	cbnz	r0, 90009412 <BSP_I2C4_WriteReg+0x22>
}
9000940e:	b005      	add	sp, #20
90009410:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90009412:	4805      	ldr	r0, [pc, #20]	; (90009428 <BSP_I2C4_WriteReg+0x38>)
90009414:	f001 fc06 	bl	9000ac24 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90009418:	2804      	cmp	r0, #4
9000941a:	bf0c      	ite	eq
9000941c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90009420:	f06f 0003 	mvnne.w	r0, #3
90009424:	e7f3      	b.n	9000940e <BSP_I2C4_WriteReg+0x1e>
90009426:	bf00      	nop
90009428:	2400dbb4 	.word	0x2400dbb4

9000942c <BSP_I2C4_ReadReg>:
{
9000942c:	b530      	push	{r4, r5, lr}
9000942e:	4614      	mov	r4, r2
90009430:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90009432:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90009436:	460a      	mov	r2, r1
90009438:	9301      	str	r3, [sp, #4]
9000943a:	4601      	mov	r1, r0
9000943c:	2301      	movs	r3, #1
9000943e:	4809      	ldr	r0, [pc, #36]	; (90009464 <BSP_I2C4_ReadReg+0x38>)
90009440:	9502      	str	r5, [sp, #8]
90009442:	9400      	str	r4, [sp, #0]
90009444:	f001 fa80 	bl	9000a948 <HAL_I2C_Mem_Read>
90009448:	b908      	cbnz	r0, 9000944e <BSP_I2C4_ReadReg+0x22>
}
9000944a:	b005      	add	sp, #20
9000944c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000944e:	4805      	ldr	r0, [pc, #20]	; (90009464 <BSP_I2C4_ReadReg+0x38>)
90009450:	f001 fbe8 	bl	9000ac24 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90009454:	2804      	cmp	r0, #4
90009456:	bf0c      	ite	eq
90009458:	f06f 0065 	mvneq.w	r0, #101	; 0x65
9000945c:	f06f 0003 	mvnne.w	r0, #3
90009460:	e7f3      	b.n	9000944a <BSP_I2C4_ReadReg+0x1e>
90009462:	bf00      	nop
90009464:	2400dbb4 	.word	0x2400dbb4

90009468 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90009468:	f000 baaa 	b.w	900099c0 <HAL_GetTick>

9000946c <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
9000946c:	b970      	cbnz	r0, 9000948c <BSP_SDRAM_DeInit+0x20>
{
9000946e:	b510      	push	{r4, lr}
90009470:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90009472:	4808      	ldr	r0, [pc, #32]	; (90009494 <BSP_SDRAM_DeInit+0x28>)
90009474:	f005 f888 	bl	9000e588 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90009478:	207a      	movs	r0, #122	; 0x7a
9000947a:	f000 fb1d 	bl	90009ab8 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
9000947e:	4b06      	ldr	r3, [pc, #24]	; (90009498 <BSP_SDRAM_DeInit+0x2c>)
90009480:	4806      	ldr	r0, [pc, #24]	; (9000949c <BSP_SDRAM_DeInit+0x30>)
90009482:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90009484:	f003 f9a0 	bl	9000c7c8 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90009488:	4620      	mov	r0, r4
}
9000948a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
9000948c:	f06f 0001 	mvn.w	r0, #1
}
90009490:	4770      	bx	lr
90009492:	bf00      	nop
90009494:	2400dc08 	.word	0x2400dc08
90009498:	52000040 	.word	0x52000040
9000949c:	2400dc3c 	.word	0x2400dc3c

900094a0 <MX_SDRAM_BANK2_Init>:
{
900094a0:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900094a2:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900094a4:	2200      	movs	r2, #0
{
900094a6:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
900094a8:	4c13      	ldr	r4, [pc, #76]	; (900094f8 <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900094aa:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900094ac:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900094ae:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
900094b0:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900094b2:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
900094b4:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900094b6:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900094b8:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
900094bc:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
900094be:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900094c0:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
900094c2:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
900094c4:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900094c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900094ca:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900094cc:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900094d0:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900094d2:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900094d4:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
900094d8:	2204      	movs	r2, #4
900094da:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
900094de:	2202      	movs	r2, #2
900094e0:	2302      	movs	r3, #2
900094e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
900094e6:	4b05      	ldr	r3, [pc, #20]	; (900094fc <MX_SDRAM_BANK2_Init+0x5c>)
900094e8:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900094ea:	f005 f823 	bl	9000e534 <HAL_SDRAM_Init>
}
900094ee:	3800      	subs	r0, #0
900094f0:	bf18      	it	ne
900094f2:	2001      	movne	r0, #1
900094f4:	b009      	add	sp, #36	; 0x24
900094f6:	bd30      	pop	{r4, r5, pc}
900094f8:	2400dc08 	.word	0x2400dc08
900094fc:	52004140 	.word	0x52004140

90009500 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90009500:	2800      	cmp	r0, #0
90009502:	f040 80d2 	bne.w	900096aa <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90009506:	4b6c      	ldr	r3, [pc, #432]	; (900096b8 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90009508:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
9000950a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000950e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90009512:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90009514:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90009518:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000951a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000951e:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009520:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009524:	4c65      	ldr	r4, [pc, #404]	; (900096bc <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90009526:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000952a:	4e65      	ldr	r6, [pc, #404]	; (900096c0 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
9000952c:	9201      	str	r2, [sp, #4]
9000952e:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90009530:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90009534:	f042 0201 	orr.w	r2, r2, #1
90009538:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
9000953c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90009540:	f002 0201 	and.w	r2, r2, #1
90009544:	9202      	str	r2, [sp, #8]
90009546:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90009548:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000954c:	f042 0208 	orr.w	r2, r2, #8
90009550:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009558:	f002 0208 	and.w	r2, r2, #8
9000955c:	9203      	str	r2, [sp, #12]
9000955e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90009560:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009564:	f042 0210 	orr.w	r2, r2, #16
90009568:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000956c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009570:	f002 0210 	and.w	r2, r2, #16
90009574:	9204      	str	r2, [sp, #16]
90009576:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90009578:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000957c:	f042 0220 	orr.w	r2, r2, #32
90009580:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009584:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009588:	f002 0220 	and.w	r2, r2, #32
9000958c:	9205      	str	r2, [sp, #20]
9000958e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90009590:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009598:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000959c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900095a0:	f002 0240 	and.w	r2, r2, #64	; 0x40
900095a4:	9206      	str	r2, [sp, #24]
900095a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900095a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900095ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900095b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900095b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900095b8:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900095ba:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
900095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900095c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
900095c4:	2001      	movs	r0, #1
900095c6:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
900095c8:	9307      	str	r3, [sp, #28]
900095ca:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900095cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900095d0:	a908      	add	r1, sp, #32
900095d2:	483c      	ldr	r0, [pc, #240]	; (900096c4 <BSP_SDRAM_Init+0x1c4>)
900095d4:	f000 fc90 	bl	90009ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900095d8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900095dc:	a908      	add	r1, sp, #32
900095de:	483a      	ldr	r0, [pc, #232]	; (900096c8 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900095e0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900095e2:	f000 fc89 	bl	90009ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900095e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900095ea:	a908      	add	r1, sp, #32
900095ec:	4837      	ldr	r0, [pc, #220]	; (900096cc <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900095ee:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900095f0:	f000 fc82 	bl	90009ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900095f4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900095f8:	a908      	add	r1, sp, #32
900095fa:	4835      	ldr	r0, [pc, #212]	; (900096d0 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900095fc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900095fe:	f000 fc7b 	bl	90009ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009602:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90009604:	a908      	add	r1, sp, #32
90009606:	4833      	ldr	r0, [pc, #204]	; (900096d4 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90009608:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
9000960a:	f000 fc75 	bl	90009ef8 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000960e:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90009610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90009614:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90009618:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
9000961a:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
9000961c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000961e:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90009620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90009624:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90009626:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90009628:	4a2b      	ldr	r2, [pc, #172]	; (900096d8 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000962a:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
9000962c:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000962e:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90009630:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90009634:	f640 0308 	movw	r3, #2056	; 0x808
90009638:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000963a:	2320      	movs	r3, #32
9000963c:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000963e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90009642:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90009646:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90009648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
9000964c:	f003 f8bc 	bl	9000c7c8 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90009650:	4620      	mov	r0, r4
90009652:	f003 f83f 	bl	9000c6d4 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90009656:	462a      	mov	r2, r5
90009658:	210f      	movs	r1, #15
9000965a:	207a      	movs	r0, #122	; 0x7a
9000965c:	f000 f9e0 	bl	90009a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90009660:	207a      	movs	r0, #122	; 0x7a
90009662:	f000 fa1b 	bl	90009a9c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90009666:	2210      	movs	r2, #16
90009668:	2104      	movs	r1, #4
9000966a:	4630      	mov	r0, r6
9000966c:	f7ff ff18 	bl	900094a0 <MX_SDRAM_BANK2_Init>
90009670:	b9f0      	cbnz	r0, 900096b0 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90009672:	491a      	ldr	r1, [pc, #104]	; (900096dc <BSP_SDRAM_Init+0x1dc>)
90009674:	2208      	movs	r2, #8
90009676:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90009678:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
9000967a:	e9c1 2300 	strd	r2, r3, [r1]
9000967e:	f240 6203 	movw	r2, #1539	; 0x603
90009682:	2300      	movs	r3, #0
90009684:	e9c1 2302 	strd	r2, r3, [r1, #8]
90009688:	2200      	movs	r2, #0
9000968a:	2330      	movs	r3, #48	; 0x30
9000968c:	e9c1 2304 	strd	r2, r3, [r1, #16]
90009690:	2200      	movs	r2, #0
90009692:	f44f 7300 	mov.w	r3, #512	; 0x200
90009696:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000969a:	f7ff fa37 	bl	90008b0c <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
9000969e:	2800      	cmp	r0, #0
900096a0:	bf18      	it	ne
900096a2:	f06f 0004 	mvnne.w	r0, #4
}
900096a6:	b00e      	add	sp, #56	; 0x38
900096a8:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900096aa:	f06f 0001 	mvn.w	r0, #1
}
900096ae:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
900096b0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900096b4:	e7f7      	b.n	900096a6 <BSP_SDRAM_Init+0x1a6>
900096b6:	bf00      	nop
900096b8:	58024400 	.word	0x58024400
900096bc:	2400dca8 	.word	0x2400dca8
900096c0:	2400dc08 	.word	0x2400dc08
900096c4:	58020c00 	.word	0x58020c00
900096c8:	58021000 	.word	0x58021000
900096cc:	58021400 	.word	0x58021400
900096d0:	58021800 	.word	0x58021800
900096d4:	58021c00 	.word	0x58021c00
900096d8:	52000040 	.word	0x52000040
900096dc:	2400dd18 	.word	0x2400dd18

900096e0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
900096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900096e4:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
900096e6:	2800      	cmp	r0, #0
900096e8:	d16b      	bne.n	900097c2 <BSP_TS_Init+0xe2>
900096ea:	680b      	ldr	r3, [r1, #0]
900096ec:	460c      	mov	r4, r1
900096ee:	1e5a      	subs	r2, r3, #1
900096f0:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
900096f4:	d265      	bcs.n	900097c2 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
900096f6:	684a      	ldr	r2, [r1, #4]
900096f8:	1e51      	subs	r1, r2, #1
900096fa:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
900096fe:	d260      	bcs.n	900097c2 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90009700:	4293      	cmp	r3, r2
90009702:	bf28      	it	cs
90009704:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90009706:	68e2      	ldr	r2, [r4, #12]
90009708:	429a      	cmp	r2, r3
9000970a:	d85a      	bhi.n	900097c2 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
9000970c:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
9000970e:	4b31      	ldr	r3, [pc, #196]	; (900097d4 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009710:	4d31      	ldr	r5, [pc, #196]	; (900097d8 <BSP_TS_Init+0xf8>)
90009712:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90009714:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90009718:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000971a:	4a30      	ldr	r2, [pc, #192]	; (900097dc <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000971c:	4b30      	ldr	r3, [pc, #192]	; (900097e0 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000971e:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90009720:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90009722:	4a30      	ldr	r2, [pc, #192]	; (900097e4 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90009724:	4b30      	ldr	r3, [pc, #192]	; (900097e8 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90009726:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009728:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
9000972a:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
9000972c:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000972e:	f7ff f93f 	bl	900089b0 <FT5336_RegisterBusIO>
90009732:	2800      	cmp	r0, #0
90009734:	d14b      	bne.n	900097ce <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90009736:	a901      	add	r1, sp, #4
90009738:	4628      	mov	r0, r5
9000973a:	f7ff f82f 	bl	9000879c <FT5336_ReadID>
9000973e:	2800      	cmp	r0, #0
90009740:	d145      	bne.n	900097ce <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90009742:	9b01      	ldr	r3, [sp, #4]
90009744:	2b51      	cmp	r3, #81	; 0x51
90009746:	d142      	bne.n	900097ce <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009748:	4b28      	ldr	r3, [pc, #160]	; (900097ec <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000974a:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
9000974c:	4f28      	ldr	r7, [pc, #160]	; (900097f0 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000974e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 900097f8 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90009752:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009754:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90009758:	681b      	ldr	r3, [r3, #0]
9000975a:	4798      	blx	r3
9000975c:	4606      	mov	r6, r0
9000975e:	2800      	cmp	r0, #0
90009760:	d135      	bne.n	900097ce <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009762:	4d24      	ldr	r5, [pc, #144]	; (900097f4 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009764:	a902      	add	r1, sp, #8
90009766:	6838      	ldr	r0, [r7, #0]
90009768:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
9000976c:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009770:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009772:	e9c5 7200 	strd	r7, r2, [r5]
90009776:	68a2      	ldr	r2, [r4, #8]
90009778:	60aa      	str	r2, [r5, #8]
9000977a:	68e2      	ldr	r2, [r4, #12]
9000977c:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
9000977e:	4798      	blx	r3
90009780:	2800      	cmp	r0, #0
90009782:	db18      	blt.n	900097b6 <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90009784:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90009788:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000978c:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000978e:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009792:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009794:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009796:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009798:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000979a:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000979e:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900097a2:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900097a4:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900097a6:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900097a8:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900097aa:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900097ac:	63eb      	str	r3, [r5, #60]	; 0x3c
}
900097ae:	4630      	mov	r0, r6
900097b0:	b008      	add	sp, #32
900097b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
900097b6:	f06f 0604 	mvn.w	r6, #4
}
900097ba:	4630      	mov	r0, r6
900097bc:	b008      	add	sp, #32
900097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
900097c2:	f06f 0601 	mvn.w	r6, #1
}
900097c6:	4630      	mov	r0, r6
900097c8:	b008      	add	sp, #32
900097ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
900097ce:	f04f 36ff 	mov.w	r6, #4294967295
900097d2:	e7ec      	b.n	900097ae <BSP_TS_Init+0xce>
900097d4:	90008c55 	.word	0x90008c55
900097d8:	2400dd38 	.word	0x2400dd38
900097dc:	90008bc1 	.word	0x90008bc1
900097e0:	9000942d 	.word	0x9000942d
900097e4:	900093f1 	.word	0x900093f1
900097e8:	90009469 	.word	0x90009469
900097ec:	24000024 	.word	0x24000024
900097f0:	2400dd60 	.word	0x2400dd60
900097f4:	2400dd64 	.word	0x2400dd64
900097f8:	2400dda4 	.word	0x2400dda4

900097fc <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
900097fc:	2800      	cmp	r0, #0
900097fe:	d157      	bne.n	900098b0 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009800:	4b2d      	ldr	r3, [pc, #180]	; (900098b8 <BSP_TS_GetState+0xbc>)
90009802:	4a2e      	ldr	r2, [pc, #184]	; (900098bc <BSP_TS_GetState+0xc0>)
90009804:	681b      	ldr	r3, [r3, #0]
90009806:	6810      	ldr	r0, [r2, #0]
90009808:	691b      	ldr	r3, [r3, #16]
{
9000980a:	b5f0      	push	{r4, r5, r6, r7, lr}
9000980c:	b085      	sub	sp, #20
9000980e:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90009810:	a901      	add	r1, sp, #4
90009812:	4798      	blx	r3
90009814:	2800      	cmp	r0, #0
90009816:	db41      	blt.n	9000989c <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90009818:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000981a:	4b29      	ldr	r3, [pc, #164]	; (900098c0 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
9000981c:	b93d      	cbnz	r5, 9000982e <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
9000981e:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90009820:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90009824:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90009826:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
9000982a:	b005      	add	sp, #20
9000982c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000982e:	6898      	ldr	r0, [r3, #8]
90009830:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90009832:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90009836:	d435      	bmi.n	900098a4 <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90009838:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
9000983a:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
9000983c:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
9000983e:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90009842:	bf1c      	itt	ne
90009844:	f106 32ff 	addne.w	r2, r6, #4294967295
90009848:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
9000984c:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90009850:	6958      	ldr	r0, [r3, #20]
90009852:	bf18      	it	ne
90009854:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90009856:	681f      	ldr	r7, [r3, #0]
90009858:	fb07 f202 	mul.w	r2, r7, r2
9000985c:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009860:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
90009862:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009864:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90009868:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000986a:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000986c:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000986e:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009870:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90009874:	bf8c      	ite	hi
90009876:	1b90      	subhi	r0, r2, r6
90009878:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000987a:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000987c:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000987e:	bf8c      	ite	hi
90009880:	1b4f      	subhi	r7, r1, r5
90009882:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009884:	42b8      	cmp	r0, r7
90009886:	bf38      	it	cc
90009888:	4638      	movcc	r0, r7
9000988a:	68df      	ldr	r7, [r3, #12]
9000988c:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
9000988e:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009892:	d20a      	bcs.n	900098aa <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90009894:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90009896:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90009898:	b005      	add	sp, #20
9000989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
9000989c:	f06f 0004 	mvn.w	r0, #4
}
900098a0:	b005      	add	sp, #20
900098a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
900098a4:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
900098a6:	463a      	mov	r2, r7
900098a8:	e7c8      	b.n	9000983c <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900098aa:	e9c4 6501 	strd	r6, r5, [r4, #4]
900098ae:	e7bc      	b.n	9000982a <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
900098b0:	f06f 0001 	mvn.w	r0, #1
}
900098b4:	4770      	bx	lr
900098b6:	bf00      	nop
900098b8:	2400dda4 	.word	0x2400dda4
900098bc:	2400dd60 	.word	0x2400dd60
900098c0:	2400dd64 	.word	0x2400dd64

900098c4 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
900098c4:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900098c6:	4c19      	ldr	r4, [pc, #100]	; (9000992c <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900098c8:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
900098ca:	4b19      	ldr	r3, [pc, #100]	; (90009930 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900098cc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900098d0:	4818      	ldr	r0, [pc, #96]	; (90009934 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900098d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
900098d6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
900098da:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900098dc:	4c16      	ldr	r4, [pc, #88]	; (90009938 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
900098de:	f041 0101 	orr.w	r1, r1, #1
900098e2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
900098e4:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
900098e6:	6819      	ldr	r1, [r3, #0]
900098e8:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900098ea:	4914      	ldr	r1, [pc, #80]	; (9000993c <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
900098ec:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
900098ee:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
900098f0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
900098f2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
900098f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
900098f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
900098f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
900098fa:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
900098fc:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
900098fe:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90009900:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90009902:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90009904:	6818      	ldr	r0, [r3, #0]
90009906:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
9000990a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
9000990c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000990e:	6823      	ldr	r3, [r4, #0]
90009910:	4019      	ands	r1, r3
90009912:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90009916:	d203      	bcs.n	90009920 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90009918:	4b09      	ldr	r3, [pc, #36]	; (90009940 <SystemInit+0x7c>)
9000991a:	2201      	movs	r2, #1
9000991c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90009920:	4a08      	ldr	r2, [pc, #32]	; (90009944 <SystemInit+0x80>)
90009922:	4b02      	ldr	r3, [pc, #8]	; (9000992c <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90009924:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90009928:	609a      	str	r2, [r3, #8]
}
9000992a:	4770      	bx	lr
9000992c:	e000ed00 	.word	0xe000ed00
90009930:	58024400 	.word	0x58024400
90009934:	eaf6ed7f 	.word	0xeaf6ed7f
90009938:	5c001000 	.word	0x5c001000
9000993c:	ffff0000 	.word	0xffff0000
90009940:	51008000 	.word	0x51008000
90009944:	90000000 	.word	0x90000000

90009948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90009948:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000994a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000994c:	4c12      	ldr	r4, [pc, #72]	; (90009998 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000994e:	f000 f855 	bl	900099fc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009952:	f003 fc77 	bl	9000d244 <HAL_RCC_GetSysClockFreq>
90009956:	4b11      	ldr	r3, [pc, #68]	; (9000999c <HAL_Init+0x54>)
90009958:	4911      	ldr	r1, [pc, #68]	; (900099a0 <HAL_Init+0x58>)
9000995a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000995c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000995e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009962:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009966:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009968:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000996a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000996e:	490d      	ldr	r1, [pc, #52]	; (900099a4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009970:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009974:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009976:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
9000997a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000997c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000997e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009980:	f7fb f9dc 	bl	90004d3c <HAL_InitTick>
90009984:	b110      	cbz	r0, 9000998c <HAL_Init+0x44>
  {
    return HAL_ERROR;
90009986:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90009988:	4620      	mov	r0, r4
9000998a:	bd10      	pop	{r4, pc}
9000998c:	4604      	mov	r4, r0
  HAL_MspInit();
9000998e:	f7fa ff93 	bl	900048b8 <HAL_MspInit>
}
90009992:	4620      	mov	r0, r4
90009994:	bd10      	pop	{r4, pc}
90009996:	bf00      	nop
90009998:	24000058 	.word	0x24000058
9000999c:	58024400 	.word	0x58024400
900099a0:	9002b730 	.word	0x9002b730
900099a4:	24000054 	.word	0x24000054

900099a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
900099a8:	4a03      	ldr	r2, [pc, #12]	; (900099b8 <HAL_IncTick+0x10>)
900099aa:	4b04      	ldr	r3, [pc, #16]	; (900099bc <HAL_IncTick+0x14>)
900099ac:	6811      	ldr	r1, [r2, #0]
900099ae:	781b      	ldrb	r3, [r3, #0]
900099b0:	440b      	add	r3, r1
900099b2:	6013      	str	r3, [r2, #0]
}
900099b4:	4770      	bx	lr
900099b6:	bf00      	nop
900099b8:	2400dda8 	.word	0x2400dda8
900099bc:	2400005c 	.word	0x2400005c

900099c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900099c0:	4b01      	ldr	r3, [pc, #4]	; (900099c8 <HAL_GetTick+0x8>)
900099c2:	6818      	ldr	r0, [r3, #0]
}
900099c4:	4770      	bx	lr
900099c6:	bf00      	nop
900099c8:	2400dda8 	.word	0x2400dda8

900099cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900099cc:	b538      	push	{r3, r4, r5, lr}
900099ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900099d0:	f7ff fff6 	bl	900099c0 <HAL_GetTick>
900099d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900099d6:	1c63      	adds	r3, r4, #1
900099d8:	d002      	beq.n	900099e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
900099da:	4b04      	ldr	r3, [pc, #16]	; (900099ec <HAL_Delay+0x20>)
900099dc:	781b      	ldrb	r3, [r3, #0]
900099de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
900099e0:	f7ff ffee 	bl	900099c0 <HAL_GetTick>
900099e4:	1b43      	subs	r3, r0, r5
900099e6:	42a3      	cmp	r3, r4
900099e8:	d3fa      	bcc.n	900099e0 <HAL_Delay+0x14>
  {
  }
}
900099ea:	bd38      	pop	{r3, r4, r5, pc}
900099ec:	2400005c 	.word	0x2400005c

900099f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
900099f0:	4b01      	ldr	r3, [pc, #4]	; (900099f8 <HAL_GetREVID+0x8>)
900099f2:	6818      	ldr	r0, [r3, #0]
}
900099f4:	0c00      	lsrs	r0, r0, #16
900099f6:	4770      	bx	lr
900099f8:	5c001000 	.word	0x5c001000

900099fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900099fc:	4906      	ldr	r1, [pc, #24]	; (90009a18 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900099fe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90009a02:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90009a04:	4b05      	ldr	r3, [pc, #20]	; (90009a1c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90009a06:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90009a08:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90009a0c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90009a10:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90009a12:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90009a14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90009a16:	4770      	bx	lr
90009a18:	e000ed00 	.word	0xe000ed00
90009a1c:	05fa0000 	.word	0x05fa0000

90009a20 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90009a20:	4b1b      	ldr	r3, [pc, #108]	; (90009a90 <HAL_NVIC_SetPriority+0x70>)
90009a22:	68db      	ldr	r3, [r3, #12]
90009a24:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90009a28:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90009a2a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009a2e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90009a32:	f1be 0f04 	cmp.w	lr, #4
90009a36:	bf28      	it	cs
90009a38:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009a3c:	f1bc 0f06 	cmp.w	ip, #6
90009a40:	d91a      	bls.n	90009a78 <HAL_NVIC_SetPriority+0x58>
90009a42:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90009a44:	f04f 3cff 	mov.w	ip, #4294967295
90009a48:	fa0c fc03 	lsl.w	ip, ip, r3
90009a4c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90009a50:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90009a54:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90009a56:	fa0c fc0e 	lsl.w	ip, ip, lr
90009a5a:	ea21 010c 	bic.w	r1, r1, ip
90009a5e:	fa01 f103 	lsl.w	r1, r1, r3
90009a62:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90009a66:	db0a      	blt.n	90009a7e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90009a68:	0109      	lsls	r1, r1, #4
90009a6a:	4b0a      	ldr	r3, [pc, #40]	; (90009a94 <HAL_NVIC_SetPriority+0x74>)
90009a6c:	b2c9      	uxtb	r1, r1
90009a6e:	4403      	add	r3, r0
90009a70:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90009a74:	f85d fb04 	ldr.w	pc, [sp], #4
90009a78:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009a7a:	4613      	mov	r3, r2
90009a7c:	e7e8      	b.n	90009a50 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90009a7e:	f000 000f 	and.w	r0, r0, #15
90009a82:	0109      	lsls	r1, r1, #4
90009a84:	4b04      	ldr	r3, [pc, #16]	; (90009a98 <HAL_NVIC_SetPriority+0x78>)
90009a86:	b2c9      	uxtb	r1, r1
90009a88:	4403      	add	r3, r0
90009a8a:	7619      	strb	r1, [r3, #24]
90009a8c:	f85d fb04 	ldr.w	pc, [sp], #4
90009a90:	e000ed00 	.word	0xe000ed00
90009a94:	e000e100 	.word	0xe000e100
90009a98:	e000ecfc 	.word	0xe000ecfc

90009a9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009a9c:	2800      	cmp	r0, #0
90009a9e:	db07      	blt.n	90009ab0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009aa0:	2301      	movs	r3, #1
90009aa2:	f000 011f 	and.w	r1, r0, #31
90009aa6:	4a03      	ldr	r2, [pc, #12]	; (90009ab4 <HAL_NVIC_EnableIRQ+0x18>)
90009aa8:	0940      	lsrs	r0, r0, #5
90009aaa:	408b      	lsls	r3, r1
90009aac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90009ab0:	4770      	bx	lr
90009ab2:	bf00      	nop
90009ab4:	e000e100 	.word	0xe000e100

90009ab8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009ab8:	2800      	cmp	r0, #0
90009aba:	db0c      	blt.n	90009ad6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009abc:	0943      	lsrs	r3, r0, #5
90009abe:	2201      	movs	r2, #1
90009ac0:	f000 001f 	and.w	r0, r0, #31
90009ac4:	4904      	ldr	r1, [pc, #16]	; (90009ad8 <HAL_NVIC_DisableIRQ+0x20>)
90009ac6:	3320      	adds	r3, #32
90009ac8:	4082      	lsls	r2, r0
90009aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90009ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009ad2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90009ad6:	4770      	bx	lr
90009ad8:	e000e100 	.word	0xe000e100

90009adc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90009adc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009ae0:	4b04      	ldr	r3, [pc, #16]	; (90009af4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90009ae2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009ae6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009aea:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90009aec:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90009af0:	4770      	bx	lr
90009af2:	bf00      	nop
90009af4:	e000ed00 	.word	0xe000ed00

90009af8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90009af8:	4b06      	ldr	r3, [pc, #24]	; (90009b14 <HAL_MPU_Enable+0x1c>)
90009afa:	f040 0001 	orr.w	r0, r0, #1
90009afe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90009b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009b04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90009b08:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90009b0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009b0e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90009b12:	4770      	bx	lr
90009b14:	e000ed00 	.word	0xe000ed00

90009b18 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90009b18:	4a17      	ldr	r2, [pc, #92]	; (90009b78 <HAL_MPU_ConfigRegion+0x60>)
90009b1a:	7843      	ldrb	r3, [r0, #1]
90009b1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90009b20:	7801      	ldrb	r1, [r0, #0]
90009b22:	b321      	cbz	r1, 90009b6e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90009b24:	6843      	ldr	r3, [r0, #4]
{
90009b26:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90009b28:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009b2c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009b2e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009b32:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90009b34:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009b38:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90009b3c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009b40:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90009b42:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009b44:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90009b48:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009b4c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90009b50:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009b54:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90009b58:	7a01      	ldrb	r1, [r0, #8]
90009b5a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90009b5e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90009b62:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009b66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90009b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90009b6e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90009b72:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90009b76:	4770      	bx	lr
90009b78:	e000ed00 	.word	0xe000ed00

90009b7c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90009b7c:	2800      	cmp	r0, #0
90009b7e:	d036      	beq.n	90009bee <HAL_CRC_Init+0x72>
{
90009b80:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90009b82:	7f43      	ldrb	r3, [r0, #29]
90009b84:	4604      	mov	r4, r0
90009b86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009b8a:	b363      	cbz	r3, 90009be6 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90009b8c:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009b8e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90009b90:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009b92:	b9f3      	cbnz	r3, 90009bd2 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90009b94:	6823      	ldr	r3, [r4, #0]
90009b96:	4a17      	ldr	r2, [pc, #92]	; (90009bf4 <HAL_CRC_Init+0x78>)
90009b98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90009b9a:	689a      	ldr	r2, [r3, #8]
90009b9c:	f022 0218 	bic.w	r2, r2, #24
90009ba0:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90009ba2:	7962      	ldrb	r2, [r4, #5]
90009ba4:	b18a      	cbz	r2, 90009bca <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90009ba6:	6922      	ldr	r2, [r4, #16]
90009ba8:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009baa:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009bac:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90009bb4:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
90009bb6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009bb8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009bba:	689a      	ldr	r2, [r3, #8]
90009bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90009bc0:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90009bc2:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009bc4:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90009bc6:	7761      	strb	r1, [r4, #29]
}
90009bc8:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009bca:	f04f 32ff 	mov.w	r2, #4294967295
90009bce:	611a      	str	r2, [r3, #16]
90009bd0:	e7eb      	b.n	90009baa <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90009bd2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90009bd6:	4620      	mov	r0, r4
90009bd8:	f000 f80e 	bl	90009bf8 <HAL_CRCEx_Polynomial_Set>
90009bdc:	b908      	cbnz	r0, 90009be2 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009bde:	6823      	ldr	r3, [r4, #0]
90009be0:	e7df      	b.n	90009ba2 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90009be2:	2001      	movs	r0, #1
}
90009be4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90009be6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90009be8:	f7fa fe80 	bl	900048ec <HAL_CRC_MspInit>
90009bec:	e7ce      	b.n	90009b8c <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90009bee:	2001      	movs	r0, #1
}
90009bf0:	4770      	bx	lr
90009bf2:	bf00      	nop
90009bf4:	04c11db7 	.word	0x04c11db7

90009bf8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90009bf8:	07cb      	lsls	r3, r1, #31
90009bfa:	d51a      	bpl.n	90009c32 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009bfc:	231e      	movs	r3, #30
{
90009bfe:	b410      	push	{r4}
90009c00:	e001      	b.n	90009c06 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009c02:	3b01      	subs	r3, #1
90009c04:	d317      	bcc.n	90009c36 <HAL_CRCEx_Polynomial_Set+0x3e>
90009c06:	fa21 fc03 	lsr.w	ip, r1, r3
90009c0a:	f01c 0f01 	tst.w	ip, #1
90009c0e:	d0f8      	beq.n	90009c02 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90009c10:	2a18      	cmp	r2, #24
90009c12:	d811      	bhi.n	90009c38 <HAL_CRCEx_Polynomial_Set+0x40>
90009c14:	e8df f002 	tbb	[pc, r2]
90009c18:	10101016 	.word	0x10101016
90009c1c:	10101010 	.word	0x10101010
90009c20:	10101024 	.word	0x10101024
90009c24:	10101010 	.word	0x10101010
90009c28:	10101021 	.word	0x10101021
90009c2c:	10101010 	.word	0x10101010
90009c30:	14          	.byte	0x14
90009c31:	00          	.byte	0x00
    status =  HAL_ERROR;
90009c32:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90009c34:	4770      	bx	lr
    switch (PolyLength)
90009c36:	b12a      	cbz	r2, 90009c44 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90009c38:	2001      	movs	r0, #1
}
90009c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
90009c3e:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90009c40:	2b06      	cmp	r3, #6
90009c42:	d8f9      	bhi.n	90009c38 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90009c44:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009c46:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90009c48:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009c4a:	68a3      	ldr	r3, [r4, #8]
90009c4c:	f023 0318 	bic.w	r3, r3, #24
90009c50:	4313      	orrs	r3, r2
90009c52:	60a3      	str	r3, [r4, #8]
}
90009c54:	f85d 4b04 	ldr.w	r4, [sp], #4
90009c58:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90009c5a:	2b07      	cmp	r3, #7
90009c5c:	d9f2      	bls.n	90009c44 <HAL_CRCEx_Polynomial_Set+0x4c>
90009c5e:	e7eb      	b.n	90009c38 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90009c60:	2b0f      	cmp	r3, #15
90009c62:	d9ef      	bls.n	90009c44 <HAL_CRCEx_Polynomial_Set+0x4c>
90009c64:	e7e8      	b.n	90009c38 <HAL_CRCEx_Polynomial_Set+0x40>
90009c66:	bf00      	nop

90009c68 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90009c68:	2800      	cmp	r0, #0
90009c6a:	d035      	beq.n	90009cd8 <HAL_DMA2D_Init+0x70>
{
90009c6c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90009c6e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90009c72:	4604      	mov	r4, r0
90009c74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009c78:	b34b      	cbz	r3, 90009cce <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c7a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009c7c:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c7e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009c80:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c84:	69e1      	ldr	r1, [r4, #28]
90009c86:	681d      	ldr	r5, [r3, #0]
90009c88:	4814      	ldr	r0, [pc, #80]	; (90009cdc <HAL_DMA2D_Init+0x74>)
90009c8a:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009c8c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c8e:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009c90:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c92:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009c94:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90009c96:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009c98:	4302      	orrs	r2, r0
90009c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009c9c:	4810      	ldr	r0, [pc, #64]	; (90009ce0 <HAL_DMA2D_Init+0x78>)
90009c9e:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009ca0:	4910      	ldr	r1, [pc, #64]	; (90009ce4 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90009ca2:	4302      	orrs	r2, r0
90009ca4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90009ca8:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009caa:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009cae:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009cb0:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90009cb2:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
90009cb6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90009cba:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90009cbc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90009cc0:	430a      	orrs	r2, r1
90009cc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90009cc4:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90009cc6:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90009cc8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90009ccc:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90009cce:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90009cd2:	f7fa fe23 	bl	9000491c <HAL_DMA2D_MspInit>
90009cd6:	e7d0      	b.n	90009c7a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90009cd8:	2001      	movs	r0, #1
}
90009cda:	4770      	bx	lr
90009cdc:	fff8ffbf 	.word	0xfff8ffbf
90009ce0:	fffffef8 	.word	0xfffffef8
90009ce4:	ffff0000 	.word	0xffff0000

90009ce8 <HAL_DMA2D_LineEventCallback>:
90009ce8:	4770      	bx	lr
90009cea:	bf00      	nop

90009cec <HAL_DMA2D_CLUTLoadingCpltCallback>:
90009cec:	4770      	bx	lr
90009cee:	bf00      	nop

90009cf0 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009cf0:	6803      	ldr	r3, [r0, #0]
{
90009cf2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90009cf4:	685d      	ldr	r5, [r3, #4]
{
90009cf6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90009cf8:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90009cfa:	07ea      	lsls	r2, r5, #31
90009cfc:	d501      	bpl.n	90009d02 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90009cfe:	05f1      	lsls	r1, r6, #23
90009d00:	d456      	bmi.n	90009db0 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90009d02:	06aa      	lsls	r2, r5, #26
90009d04:	d501      	bpl.n	90009d0a <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90009d06:	04b3      	lsls	r3, r6, #18
90009d08:	d43b      	bmi.n	90009d82 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90009d0a:	0728      	lsls	r0, r5, #28
90009d0c:	d501      	bpl.n	90009d12 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90009d0e:	0531      	lsls	r1, r6, #20
90009d10:	d421      	bmi.n	90009d56 <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90009d12:	076a      	lsls	r2, r5, #29
90009d14:	d501      	bpl.n	90009d1a <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90009d16:	0573      	lsls	r3, r6, #21
90009d18:	d472      	bmi.n	90009e00 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90009d1a:	07a8      	lsls	r0, r5, #30
90009d1c:	d501      	bpl.n	90009d22 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90009d1e:	05b1      	lsls	r1, r6, #22
90009d20:	d404      	bmi.n	90009d2c <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90009d22:	06ea      	lsls	r2, r5, #27
90009d24:	d501      	bpl.n	90009d2a <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90009d26:	04f3      	lsls	r3, r6, #19
90009d28:	d457      	bmi.n	90009dda <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90009d2a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90009d2c:	6823      	ldr	r3, [r4, #0]
90009d2e:	681a      	ldr	r2, [r3, #0]
90009d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90009d34:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90009d36:	2202      	movs	r2, #2
90009d38:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009d3a:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009d3e:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009d40:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009d42:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009d46:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90009d4a:	6a23      	ldr	r3, [r4, #32]
90009d4c:	2b00      	cmp	r3, #0
90009d4e:	d0e8      	beq.n	90009d22 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90009d50:	4620      	mov	r0, r4
90009d52:	4798      	blx	r3
90009d54:	e7e5      	b.n	90009d22 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90009d56:	6823      	ldr	r3, [r4, #0]
90009d58:	681a      	ldr	r2, [r3, #0]
90009d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90009d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90009d60:	2208      	movs	r2, #8
90009d62:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009d64:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90009d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009d68:	4313      	orrs	r3, r2
90009d6a:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009d6c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009d70:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009d74:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009d78:	2b00      	cmp	r3, #0
90009d7a:	d0ca      	beq.n	90009d12 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90009d7c:	4620      	mov	r0, r4
90009d7e:	4798      	blx	r3
90009d80:	e7c7      	b.n	90009d12 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90009d82:	6823      	ldr	r3, [r4, #0]
90009d84:	681a      	ldr	r2, [r3, #0]
90009d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90009d8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90009d8c:	2220      	movs	r2, #32
90009d8e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009d90:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90009d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
90009d94:	f043 0302 	orr.w	r3, r3, #2
90009d98:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009d9a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009d9e:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90009da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90009da2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009da6:	2b00      	cmp	r3, #0
90009da8:	d0af      	beq.n	90009d0a <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90009daa:	4620      	mov	r0, r4
90009dac:	4798      	blx	r3
90009dae:	e7ac      	b.n	90009d0a <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90009db0:	681a      	ldr	r2, [r3, #0]
90009db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90009db6:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90009db8:	6e42      	ldr	r2, [r0, #100]	; 0x64
90009dba:	f042 0201 	orr.w	r2, r2, #1
90009dbe:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90009dc0:	2201      	movs	r2, #1
90009dc2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90009dc4:	2304      	movs	r3, #4
90009dc6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90009dca:	2300      	movs	r3, #0
90009dcc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90009dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
90009dd2:	2b00      	cmp	r3, #0
90009dd4:	d095      	beq.n	90009d02 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90009dd6:	4798      	blx	r3
90009dd8:	e793      	b.n	90009d02 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90009dda:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90009ddc:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009dde:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90009de0:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90009de2:	681a      	ldr	r2, [r3, #0]
90009de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90009de8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90009dea:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90009dec:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90009df0:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90009df4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90009df6:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90009dfa:	f7ff ff77 	bl	90009cec <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90009dfe:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009e00:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009e02:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90009e04:	681a      	ldr	r2, [r3, #0]
90009e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90009e0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90009e0c:	2204      	movs	r2, #4
90009e0e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90009e10:	f7ff ff6a 	bl	90009ce8 <HAL_DMA2D_LineEventCallback>
90009e14:	e781      	b.n	90009d1a <HAL_DMA2D_IRQHandler+0x2a>
90009e16:	bf00      	nop

90009e18 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90009e18:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90009e1c:	2a01      	cmp	r2, #1
90009e1e:	d065      	beq.n	90009eec <HAL_DMA2D_ConfigLayer+0xd4>
90009e20:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009e22:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009e26:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009e28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90009e2c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90009e2e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90009e30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90009e34:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90009e38:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009e3a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90009e3c:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90009e3e:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009e40:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009e44:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90009e48:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009e4a:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90009e4e:	ea42 0204 	orr.w	r2, r2, r4
90009e52:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009e56:	d922      	bls.n	90009e9e <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90009e58:	6b45      	ldr	r5, [r0, #52]	; 0x34
90009e5a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90009e5e:	b981      	cbnz	r1, 90009e82 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009e60:	6818      	ldr	r0, [r3, #0]
90009e62:	4923      	ldr	r1, [pc, #140]	; (90009ef0 <HAL_DMA2D_ConfigLayer+0xd8>)
90009e64:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009e66:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009e68:	4029      	ands	r1, r5
90009e6a:	4311      	orrs	r1, r2
90009e6c:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009e6e:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90009e70:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009e72:	2101      	movs	r1, #1

  return HAL_OK;
90009e74:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90009e76:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90009e7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90009e7e:	bc70      	pop	{r4, r5, r6}
90009e80:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009e82:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e84:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90009e86:	d129      	bne.n	90009edc <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e88:	69e5      	ldr	r5, [r4, #28]
90009e8a:	491a      	ldr	r1, [pc, #104]	; (90009ef4 <HAL_DMA2D_ConfigLayer+0xdc>)
90009e8c:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90009e8e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e90:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009e92:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90009e96:	4311      	orrs	r1, r2
90009e98:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009e9a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009e9c:	e7e8      	b.n	90009e70 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90009e9e:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009ea0:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90009ea4:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90009ea6:	b961      	cbnz	r1, 90009ec2 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009ea8:	6819      	ldr	r1, [r3, #0]
90009eaa:	4a11      	ldr	r2, [pc, #68]	; (90009ef0 <HAL_DMA2D_ConfigLayer+0xd8>)
90009eac:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009eae:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009eb0:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009eb2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009eb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90009eb8:	4322      	orrs	r2, r4
90009eba:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90009ebc:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90009ebe:	6288      	str	r0, [r1, #40]	; 0x28
90009ec0:	e7d6      	b.n	90009e70 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009ec2:	6819      	ldr	r1, [r3, #0]
90009ec4:	4a0a      	ldr	r2, [pc, #40]	; (90009ef0 <HAL_DMA2D_ConfigLayer+0xd8>)
90009ec6:	69cd      	ldr	r5, [r1, #28]
90009ec8:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009eca:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009ecc:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90009ece:	6b44      	ldr	r4, [r0, #52]	; 0x34
90009ed0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009ed4:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009ed6:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90009ed8:	620c      	str	r4, [r1, #32]
90009eda:	e7c9      	b.n	90009e70 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009edc:	69e5      	ldr	r5, [r4, #28]
90009ede:	4904      	ldr	r1, [pc, #16]	; (90009ef0 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009ee0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90009ee2:	4029      	ands	r1, r5
90009ee4:	4311      	orrs	r1, r2
90009ee6:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90009ee8:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90009eea:	e7c1      	b.n	90009e70 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90009eec:	2002      	movs	r0, #2
}
90009eee:	4770      	bx	lr
90009ef0:	00ccfff0 	.word	0x00ccfff0
90009ef4:	00c0fff0 	.word	0x00c0fff0

90009ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009efc:	680c      	ldr	r4, [r1, #0]
{
90009efe:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90009f00:	2c00      	cmp	r4, #0
90009f02:	f000 80a7 	beq.w	9000a054 <HAL_GPIO_Init+0x15c>
90009f06:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009f0a:	4f8a      	ldr	r7, [pc, #552]	; (9000a134 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90009f0c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90009f0e:	2201      	movs	r2, #1
90009f10:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90009f12:	ea12 0e04 	ands.w	lr, r2, r4
90009f16:	f000 8096 	beq.w	9000a046 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90009f1a:	684d      	ldr	r5, [r1, #4]
90009f1c:	f005 0903 	and.w	r9, r5, #3
90009f20:	f109 36ff 	add.w	r6, r9, #4294967295
90009f24:	2e01      	cmp	r6, #1
90009f26:	f240 8098 	bls.w	9000a05a <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90009f2a:	f1b9 0f03 	cmp.w	r9, #3
90009f2e:	f040 80d2 	bne.w	9000a0d6 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90009f32:	fa09 f20c 	lsl.w	r2, r9, ip
90009f36:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90009f3a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90009f3c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90009f40:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90009f44:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
90009f48:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90009f4a:	d07c      	beq.n	9000a046 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009f4c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90009f50:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009f54:	f003 0903 	and.w	r9, r3, #3
90009f58:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009f5a:	f042 0202 	orr.w	r2, r2, #2
90009f5e:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009f62:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009f66:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90009f6a:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90009f6e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009f72:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90009f76:	f002 0202 	and.w	r2, r2, #2
90009f7a:	9201      	str	r2, [sp, #4]
90009f7c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90009f7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90009f82:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90009f86:	4e6c      	ldr	r6, [pc, #432]	; (9000a138 <HAL_GPIO_Init+0x240>)
90009f88:	42b0      	cmp	r0, r6
90009f8a:	d028      	beq.n	90009fde <HAL_GPIO_Init+0xe6>
90009f8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90009f90:	42b0      	cmp	r0, r6
90009f92:	f000 80ac 	beq.w	9000a0ee <HAL_GPIO_Init+0x1f6>
90009f96:	4e69      	ldr	r6, [pc, #420]	; (9000a13c <HAL_GPIO_Init+0x244>)
90009f98:	42b0      	cmp	r0, r6
90009f9a:	f000 80ad 	beq.w	9000a0f8 <HAL_GPIO_Init+0x200>
90009f9e:	4e68      	ldr	r6, [pc, #416]	; (9000a140 <HAL_GPIO_Init+0x248>)
90009fa0:	42b0      	cmp	r0, r6
90009fa2:	f000 809f 	beq.w	9000a0e4 <HAL_GPIO_Init+0x1ec>
90009fa6:	4e67      	ldr	r6, [pc, #412]	; (9000a144 <HAL_GPIO_Init+0x24c>)
90009fa8:	42b0      	cmp	r0, r6
90009faa:	f000 80af 	beq.w	9000a10c <HAL_GPIO_Init+0x214>
90009fae:	4e66      	ldr	r6, [pc, #408]	; (9000a148 <HAL_GPIO_Init+0x250>)
90009fb0:	42b0      	cmp	r0, r6
90009fb2:	f000 80b0 	beq.w	9000a116 <HAL_GPIO_Init+0x21e>
90009fb6:	4e65      	ldr	r6, [pc, #404]	; (9000a14c <HAL_GPIO_Init+0x254>)
90009fb8:	42b0      	cmp	r0, r6
90009fba:	f000 80a2 	beq.w	9000a102 <HAL_GPIO_Init+0x20a>
90009fbe:	4e64      	ldr	r6, [pc, #400]	; (9000a150 <HAL_GPIO_Init+0x258>)
90009fc0:	42b0      	cmp	r0, r6
90009fc2:	f000 80ad 	beq.w	9000a120 <HAL_GPIO_Init+0x228>
90009fc6:	4e63      	ldr	r6, [pc, #396]	; (9000a154 <HAL_GPIO_Init+0x25c>)
90009fc8:	42b0      	cmp	r0, r6
90009fca:	f000 80ae 	beq.w	9000a12a <HAL_GPIO_Init+0x232>
90009fce:	4e62      	ldr	r6, [pc, #392]	; (9000a158 <HAL_GPIO_Init+0x260>)
90009fd0:	42b0      	cmp	r0, r6
90009fd2:	bf0c      	ite	eq
90009fd4:	2609      	moveq	r6, #9
90009fd6:	260a      	movne	r6, #10
90009fd8:	fa06 f609 	lsl.w	r6, r6, r9
90009fdc:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90009fde:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90009fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90009fe6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
90009fea:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90009fee:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90009ff0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90009ff4:	bf0c      	ite	eq
90009ff6:	4032      	andeq	r2, r6
          temp |= iocurrent;
90009ff8:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90009ffc:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
9000a000:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
9000a004:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
9000a008:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000a00c:	bf0c      	ite	eq
9000a00e:	4032      	andeq	r2, r6
          temp |= iocurrent;
9000a010:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000a014:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
9000a018:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
9000a01c:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
9000a020:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000a024:	bf0c      	ite	eq
9000a026:	4032      	andeq	r2, r6
          temp |= iocurrent;
9000a028:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000a02c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000a02e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
9000a032:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
9000a036:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
9000a03a:	bf54      	ite	pl
9000a03c:	4032      	andpl	r2, r6
          temp |= iocurrent;
9000a03e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
9000a042:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
9000a046:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000a048:	f10c 0c02 	add.w	ip, ip, #2
9000a04c:	fa34 f203 	lsrs.w	r2, r4, r3
9000a050:	f47f af5d 	bne.w	90009f0e <HAL_GPIO_Init+0x16>
  }
}
9000a054:	b003      	add	sp, #12
9000a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a05a:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
9000a05e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a060:	fa08 f80c 	lsl.w	r8, r8, ip
9000a064:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
9000a068:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a06a:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
9000a06e:	fa06 f60c 	lsl.w	r6, r6, ip
9000a072:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
9000a076:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a078:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
9000a07c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a080:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
9000a082:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a086:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
9000a088:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
9000a08a:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000a08c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000a090:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000a092:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000a096:	fa06 f60c 	lsl.w	r6, r6, ip
9000a09a:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
9000a09e:	fa09 f20c 	lsl.w	r2, r9, ip
9000a0a2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000a0a4:	f47f af49 	bne.w	90009f3a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
9000a0a8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a0ac:	f003 0b07 	and.w	fp, r3, #7
9000a0b0:	260f      	movs	r6, #15
9000a0b2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000a0b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
9000a0ba:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a0be:	fa06 f60b 	lsl.w	r6, r6, fp
9000a0c2:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000a0c6:	690e      	ldr	r6, [r1, #16]
9000a0c8:	fa06 f60b 	lsl.w	r6, r6, fp
9000a0cc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
9000a0d0:	f8c9 6020 	str.w	r6, [r9, #32]
9000a0d4:	e731      	b.n	90009f3a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a0d6:	f04f 0803 	mov.w	r8, #3
9000a0da:	fa08 f80c 	lsl.w	r8, r8, ip
9000a0de:	ea6f 0808 	mvn.w	r8, r8
9000a0e2:	e7d2      	b.n	9000a08a <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000a0e4:	2603      	movs	r6, #3
9000a0e6:	fa06 f609 	lsl.w	r6, r6, r9
9000a0ea:	4332      	orrs	r2, r6
9000a0ec:	e777      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a0ee:	2601      	movs	r6, #1
9000a0f0:	fa06 f609 	lsl.w	r6, r6, r9
9000a0f4:	4332      	orrs	r2, r6
9000a0f6:	e772      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a0f8:	2602      	movs	r6, #2
9000a0fa:	fa06 f609 	lsl.w	r6, r6, r9
9000a0fe:	4332      	orrs	r2, r6
9000a100:	e76d      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a102:	2606      	movs	r6, #6
9000a104:	fa06 f609 	lsl.w	r6, r6, r9
9000a108:	4332      	orrs	r2, r6
9000a10a:	e768      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a10c:	2604      	movs	r6, #4
9000a10e:	fa06 f609 	lsl.w	r6, r6, r9
9000a112:	4332      	orrs	r2, r6
9000a114:	e763      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a116:	2605      	movs	r6, #5
9000a118:	fa06 f609 	lsl.w	r6, r6, r9
9000a11c:	4332      	orrs	r2, r6
9000a11e:	e75e      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a120:	2607      	movs	r6, #7
9000a122:	fa06 f609 	lsl.w	r6, r6, r9
9000a126:	4332      	orrs	r2, r6
9000a128:	e759      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a12a:	2608      	movs	r6, #8
9000a12c:	fa06 f609 	lsl.w	r6, r6, r9
9000a130:	4332      	orrs	r2, r6
9000a132:	e754      	b.n	90009fde <HAL_GPIO_Init+0xe6>
9000a134:	58024400 	.word	0x58024400
9000a138:	58020000 	.word	0x58020000
9000a13c:	58020800 	.word	0x58020800
9000a140:	58020c00 	.word	0x58020c00
9000a144:	58021000 	.word	0x58021000
9000a148:	58021400 	.word	0x58021400
9000a14c:	58021800 	.word	0x58021800
9000a150:	58021c00 	.word	0x58021c00
9000a154:	58022000 	.word	0x58022000
9000a158:	58022400 	.word	0x58022400

9000a15c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000a15c:	2900      	cmp	r1, #0
9000a15e:	f000 80a4 	beq.w	9000a2aa <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
9000a162:	2300      	movs	r3, #0
{
9000a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a168:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9000a2d4 <HAL_GPIO_DeInit+0x178>
9000a16c:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a16e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9000a2d8 <HAL_GPIO_DeInit+0x17c>
9000a172:	f8df a168 	ldr.w	sl, [pc, #360]	; 9000a2dc <HAL_GPIO_DeInit+0x180>
9000a176:	f8df b168 	ldr.w	fp, [pc, #360]	; 9000a2e0 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
9000a17a:	f04f 0e01 	mov.w	lr, #1
9000a17e:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000a182:	ea12 0c01 	ands.w	ip, r2, r1
9000a186:	d06b      	beq.n	9000a260 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a188:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a18c:	f003 0403 	and.w	r4, r3, #3
9000a190:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a192:	4540      	cmp	r0, r8
9000a194:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a196:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a19a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a19c:	fa06 f604 	lsl.w	r6, r6, r4
9000a1a0:	ea07 0706 	and.w	r7, r7, r6
9000a1a4:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a1a6:	d01f      	beq.n	9000a1e8 <HAL_GPIO_DeInit+0x8c>
9000a1a8:	4550      	cmp	r0, sl
9000a1aa:	d01a      	beq.n	9000a1e2 <HAL_GPIO_DeInit+0x86>
9000a1ac:	4558      	cmp	r0, fp
9000a1ae:	d05e      	beq.n	9000a26e <HAL_GPIO_DeInit+0x112>
9000a1b0:	4f43      	ldr	r7, [pc, #268]	; (9000a2c0 <HAL_GPIO_DeInit+0x164>)
9000a1b2:	42b8      	cmp	r0, r7
9000a1b4:	d065      	beq.n	9000a282 <HAL_GPIO_DeInit+0x126>
9000a1b6:	4f43      	ldr	r7, [pc, #268]	; (9000a2c4 <HAL_GPIO_DeInit+0x168>)
9000a1b8:	42b8      	cmp	r0, r7
9000a1ba:	d067      	beq.n	9000a28c <HAL_GPIO_DeInit+0x130>
9000a1bc:	4f42      	ldr	r7, [pc, #264]	; (9000a2c8 <HAL_GPIO_DeInit+0x16c>)
9000a1be:	42b8      	cmp	r0, r7
9000a1c0:	d05a      	beq.n	9000a278 <HAL_GPIO_DeInit+0x11c>
9000a1c2:	4f42      	ldr	r7, [pc, #264]	; (9000a2cc <HAL_GPIO_DeInit+0x170>)
9000a1c4:	42b8      	cmp	r0, r7
9000a1c6:	d06b      	beq.n	9000a2a0 <HAL_GPIO_DeInit+0x144>
9000a1c8:	4f41      	ldr	r7, [pc, #260]	; (9000a2d0 <HAL_GPIO_DeInit+0x174>)
9000a1ca:	42b8      	cmp	r0, r7
9000a1cc:	d06e      	beq.n	9000a2ac <HAL_GPIO_DeInit+0x150>
9000a1ce:	f8df e114 	ldr.w	lr, [pc, #276]	; 9000a2e4 <HAL_GPIO_DeInit+0x188>
9000a1d2:	4570      	cmp	r0, lr
9000a1d4:	d05f      	beq.n	9000a296 <HAL_GPIO_DeInit+0x13a>
9000a1d6:	f8df e110 	ldr.w	lr, [pc, #272]	; 9000a2e8 <HAL_GPIO_DeInit+0x18c>
9000a1da:	4570      	cmp	r0, lr
9000a1dc:	d06b      	beq.n	9000a2b6 <HAL_GPIO_DeInit+0x15a>
9000a1de:	f04f 0e0a 	mov.w	lr, #10
9000a1e2:	fa0e f404 	lsl.w	r4, lr, r4
9000a1e6:	e000      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a1e8:	2400      	movs	r4, #0
9000a1ea:	9f01      	ldr	r7, [sp, #4]
9000a1ec:	42a7      	cmp	r7, r4
9000a1ee:	d119      	bne.n	9000a224 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
9000a1f0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
9000a1f4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
9000a1f8:	ea27 070c 	bic.w	r7, r7, ip
9000a1fc:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
9000a200:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
9000a204:	ea27 070c 	bic.w	r7, r7, ip
9000a208:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
9000a20c:	6867      	ldr	r7, [r4, #4]
9000a20e:	ea27 070c 	bic.w	r7, r7, ip
9000a212:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
9000a214:	6827      	ldr	r7, [r4, #0]
9000a216:	ea27 070c 	bic.w	r7, r7, ip
9000a21a:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
9000a21c:	68ac      	ldr	r4, [r5, #8]
9000a21e:	ea24 0406 	bic.w	r4, r4, r6
9000a222:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a224:	005d      	lsls	r5, r3, #1
9000a226:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a228:	f003 0607 	and.w	r6, r3, #7
9000a22c:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a22e:	40ac      	lsls	r4, r5
9000a230:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a232:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a234:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a236:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a238:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a23a:	08dd      	lsrs	r5, r3, #3
9000a23c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
9000a240:	6a2e      	ldr	r6, [r5, #32]
9000a242:	ea26 0607 	bic.w	r6, r6, r7
9000a246:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000a248:	68c5      	ldr	r5, [r0, #12]
9000a24a:	ea25 0504 	bic.w	r5, r5, r4
9000a24e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
9000a250:	6845      	ldr	r5, [r0, #4]
9000a252:	ea25 0202 	bic.w	r2, r5, r2
9000a256:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a258:	6882      	ldr	r2, [r0, #8]
9000a25a:	ea22 0204 	bic.w	r2, r2, r4
9000a25e:	6082      	str	r2, [r0, #8]
    }

    position++;
9000a260:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
9000a262:	fa31 f203 	lsrs.w	r2, r1, r3
9000a266:	d188      	bne.n	9000a17a <HAL_GPIO_DeInit+0x1e>
  }
}
9000a268:	b003      	add	sp, #12
9000a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a26e:	f04f 0e02 	mov.w	lr, #2
9000a272:	fa0e f404 	lsl.w	r4, lr, r4
9000a276:	e7b8      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a278:	f04f 0e05 	mov.w	lr, #5
9000a27c:	fa0e f404 	lsl.w	r4, lr, r4
9000a280:	e7b3      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a282:	f04f 0e03 	mov.w	lr, #3
9000a286:	fa0e f404 	lsl.w	r4, lr, r4
9000a28a:	e7ae      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a28c:	f04f 0e04 	mov.w	lr, #4
9000a290:	fa0e f404 	lsl.w	r4, lr, r4
9000a294:	e7a9      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a296:	f04f 0e08 	mov.w	lr, #8
9000a29a:	fa0e f404 	lsl.w	r4, lr, r4
9000a29e:	e7a4      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a2a0:	f04f 0e06 	mov.w	lr, #6
9000a2a4:	fa0e f404 	lsl.w	r4, lr, r4
9000a2a8:	e79f      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a2aa:	4770      	bx	lr
9000a2ac:	f04f 0e07 	mov.w	lr, #7
9000a2b0:	fa0e f404 	lsl.w	r4, lr, r4
9000a2b4:	e799      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a2b6:	f04f 0e09 	mov.w	lr, #9
9000a2ba:	fa0e f404 	lsl.w	r4, lr, r4
9000a2be:	e794      	b.n	9000a1ea <HAL_GPIO_DeInit+0x8e>
9000a2c0:	58020c00 	.word	0x58020c00
9000a2c4:	58021000 	.word	0x58021000
9000a2c8:	58021400 	.word	0x58021400
9000a2cc:	58021800 	.word	0x58021800
9000a2d0:	58021c00 	.word	0x58021c00
9000a2d4:	58000400 	.word	0x58000400
9000a2d8:	58020000 	.word	0x58020000
9000a2dc:	58020400 	.word	0x58020400
9000a2e0:	58020800 	.word	0x58020800
9000a2e4:	58022000 	.word	0x58022000
9000a2e8:	58022400 	.word	0x58022400

9000a2ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
9000a2ec:	6903      	ldr	r3, [r0, #16]
9000a2ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
9000a2f0:	bf14      	ite	ne
9000a2f2:	2001      	movne	r0, #1
9000a2f4:	2000      	moveq	r0, #0
9000a2f6:	4770      	bx	lr

9000a2f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
9000a2f8:	b902      	cbnz	r2, 9000a2fc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000a2fa:	0409      	lsls	r1, r1, #16
9000a2fc:	6181      	str	r1, [r0, #24]
  }
}
9000a2fe:	4770      	bx	lr

9000a300 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
9000a300:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000a302:	ea01 0203 	and.w	r2, r1, r3
9000a306:	ea21 0103 	bic.w	r1, r1, r3
9000a30a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000a30e:	6181      	str	r1, [r0, #24]
}
9000a310:	4770      	bx	lr
9000a312:	bf00      	nop

9000a314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a318:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a31a:	f04f 0820 	mov.w	r8, #32
{
9000a31e:	4605      	mov	r5, r0
9000a320:	460e      	mov	r6, r1
9000a322:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a324:	6998      	ldr	r0, [r3, #24]
9000a326:	f010 0902 	ands.w	r9, r0, #2
9000a32a:	f040 809e 	bne.w	9000a46a <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
9000a32e:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a330:	f014 0410 	ands.w	r4, r4, #16
9000a334:	d068      	beq.n	9000a408 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a336:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
9000a338:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
9000a33a:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a33c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a33e:	1c71      	adds	r1, r6, #1
9000a340:	699a      	ldr	r2, [r3, #24]
9000a342:	d163      	bne.n	9000a40c <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
9000a344:	0690      	lsls	r0, r2, #26
9000a346:	f100 8093 	bmi.w	9000a470 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a34a:	f1ba 0f00 	cmp.w	sl, #0
9000a34e:	d104      	bne.n	9000a35a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a350:	699c      	ldr	r4, [r3, #24]
9000a352:	06a1      	lsls	r1, r4, #26
9000a354:	d5fc      	bpl.n	9000a350 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a356:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000a35a:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
9000a35e:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000a360:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a362:	05d0      	lsls	r0, r2, #23
9000a364:	d530      	bpl.n	9000a3c8 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a366:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a36a:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a36c:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a370:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a372:	d504      	bpl.n	9000a37e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a374:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a378:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a37c:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a37e:	0591      	lsls	r1, r2, #22
9000a380:	d504      	bpl.n	9000a38c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a382:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a386:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a38a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a38c:	699a      	ldr	r2, [r3, #24]
9000a38e:	0790      	lsls	r0, r2, #30
9000a390:	d501      	bpl.n	9000a396 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
9000a392:	2200      	movs	r2, #0
9000a394:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a396:	699a      	ldr	r2, [r3, #24]
9000a398:	07d1      	lsls	r1, r2, #31
9000a39a:	d403      	bmi.n	9000a3a4 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a39c:	699a      	ldr	r2, [r3, #24]
9000a39e:	f042 0201 	orr.w	r2, r2, #1
9000a3a2:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000a3a4:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a3a6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a3a8:	4834      	ldr	r0, [pc, #208]	; (9000a47c <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a3aa:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
9000a3ac:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a3ae:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a3b0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a3b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a3b4:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a3b8:	4323      	orrs	r3, r4
9000a3ba:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a3bc:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a3c0:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
9000a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a3c8:	0550      	lsls	r0, r2, #21
9000a3ca:	d4d3      	bmi.n	9000a374 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a3cc:	0592      	lsls	r2, r2, #22
9000a3ce:	d4d8      	bmi.n	9000a382 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
9000a3d0:	2900      	cmp	r1, #0
9000a3d2:	d1db      	bne.n	9000a38c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
9000a3d4:	1c72      	adds	r2, r6, #1
9000a3d6:	d0a5      	beq.n	9000a324 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a3d8:	f7ff faf2 	bl	900099c0 <HAL_GetTick>
9000a3dc:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a3de:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a3e0:	42b0      	cmp	r0, r6
9000a3e2:	d801      	bhi.n	9000a3e8 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
9000a3e4:	2e00      	cmp	r6, #0
9000a3e6:	d19d      	bne.n	9000a324 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a3e8:	699a      	ldr	r2, [r3, #24]
9000a3ea:	f012 0202 	ands.w	r2, r2, #2
9000a3ee:	d199      	bne.n	9000a324 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a3f0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a3f2:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000a3f4:	2001      	movs	r0, #1
9000a3f6:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a3fa:	430b      	orrs	r3, r1
9000a3fc:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a3fe:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a402:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
9000a406:	e7dd      	b.n	9000a3c4 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
9000a408:	4621      	mov	r1, r4
9000a40a:	e7a9      	b.n	9000a360 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a40c:	0692      	lsls	r2, r2, #26
9000a40e:	d42f      	bmi.n	9000a470 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a410:	f1ba 0f00 	cmp.w	sl, #0
9000a414:	d1a1      	bne.n	9000a35a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a416:	f7ff fad3 	bl	900099c0 <HAL_GetTick>
9000a41a:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a41c:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a41e:	4286      	cmp	r6, r0
9000a420:	d301      	bcc.n	9000a426 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
9000a422:	2e00      	cmp	r6, #0
9000a424:	d18b      	bne.n	9000a33e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a426:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a428:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a42c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a42e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a430:	0409      	lsls	r1, r1, #16
9000a432:	d50b      	bpl.n	9000a44c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
9000a434:	0441      	lsls	r1, r0, #17
9000a436:	d409      	bmi.n	9000a44c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
9000a438:	2a20      	cmp	r2, #32
9000a43a:	d007      	beq.n	9000a44c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a43c:	685a      	ldr	r2, [r3, #4]
9000a43e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a442:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a444:	f7ff fabc 	bl	900099c0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a448:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
9000a44a:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a44c:	699a      	ldr	r2, [r3, #24]
9000a44e:	0690      	lsls	r0, r2, #26
9000a450:	f53f af75 	bmi.w	9000a33e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a454:	f7ff fab4 	bl	900099c0 <HAL_GetTick>
9000a458:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a45a:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a45c:	2819      	cmp	r0, #25
9000a45e:	d9f5      	bls.n	9000a44c <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a460:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
9000a464:	f04f 0a01 	mov.w	sl, #1
9000a468:	e769      	b.n	9000a33e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
9000a46a:	2000      	movs	r0, #0
}
9000a46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
9000a470:	f1ba 0f00 	cmp.w	sl, #0
9000a474:	f43f af6f 	beq.w	9000a356 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
9000a478:	e76f      	b.n	9000a35a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a47a:	bf00      	nop
9000a47c:	fe00e800 	.word	0xfe00e800

9000a480 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
9000a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a484:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a486:	6802      	ldr	r2, [r0, #0]
{
9000a488:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a48a:	6991      	ldr	r1, [r2, #24]
9000a48c:	068c      	lsls	r4, r1, #26
9000a48e:	d469      	bmi.n	9000a564 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
9000a490:	4606      	mov	r6, r0
9000a492:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a494:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
9000a498:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a49a:	f014 0410 	ands.w	r4, r4, #16
9000a49e:	d064      	beq.n	9000a56a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
9000a4a0:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a4a2:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
9000a4a4:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a4a6:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
9000a4aa:	46aa      	mov	sl, r5
9000a4ac:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a4ae:	699a      	ldr	r2, [r3, #24]
9000a4b0:	d15d      	bne.n	9000a56e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
9000a4b2:	0690      	lsls	r0, r2, #26
9000a4b4:	f100 8083 	bmi.w	9000a5be <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000a4b8:	f1ba 0f00 	cmp.w	sl, #0
9000a4bc:	d104      	bne.n	9000a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
9000a4be:	699c      	ldr	r4, [r3, #24]
9000a4c0:	06a1      	lsls	r1, r4, #26
9000a4c2:	d5fc      	bpl.n	9000a4be <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a4c4:	2220      	movs	r2, #32
9000a4c6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
9000a4c8:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
9000a4cc:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
9000a4ce:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a4d0:	05d0      	lsls	r0, r2, #23
9000a4d2:	d530      	bpl.n	9000a536 <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a4d4:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a4d8:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a4da:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a4de:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a4e0:	d504      	bpl.n	9000a4ec <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a4e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a4e6:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a4ea:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a4ec:	0591      	lsls	r1, r2, #22
9000a4ee:	d504      	bpl.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a4f4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a4f8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a4fa:	699a      	ldr	r2, [r3, #24]
9000a4fc:	0795      	lsls	r5, r2, #30
9000a4fe:	d501      	bpl.n	9000a504 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
9000a500:	2200      	movs	r2, #0
9000a502:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a504:	699a      	ldr	r2, [r3, #24]
9000a506:	07d0      	lsls	r0, r2, #31
9000a508:	d403      	bmi.n	9000a512 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a50a:	699a      	ldr	r2, [r3, #24]
9000a50c:	f042 0201 	orr.w	r2, r2, #1
9000a510:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000a512:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a514:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a516:	4837      	ldr	r0, [pc, #220]	; (9000a5f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a518:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
9000a51a:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a51c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a51e:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a520:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
9000a522:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a526:	4323      	orrs	r3, r4
9000a528:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a52a:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a52e:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a536:	0550      	lsls	r0, r2, #21
9000a538:	d4d3      	bmi.n	9000a4e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a53a:	0592      	lsls	r2, r2, #22
9000a53c:	d4d8      	bmi.n	9000a4f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
9000a53e:	2900      	cmp	r1, #0
9000a540:	d1db      	bne.n	9000a4fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a542:	f7ff fa3d 	bl	900099c0 <HAL_GetTick>
9000a546:	eba0 0008 	sub.w	r0, r0, r8
9000a54a:	42b8      	cmp	r0, r7
9000a54c:	d801      	bhi.n	9000a552 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
9000a54e:	2f00      	cmp	r7, #0
9000a550:	d132      	bne.n	9000a5b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a552:	6832      	ldr	r2, [r6, #0]
9000a554:	6991      	ldr	r1, [r2, #24]
9000a556:	4613      	mov	r3, r2
9000a558:	f011 0120 	ands.w	r1, r1, #32
9000a55c:	d034      	beq.n	9000a5c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a55e:	6991      	ldr	r1, [r2, #24]
9000a560:	0689      	lsls	r1, r1, #26
9000a562:	d599      	bpl.n	9000a498 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
9000a564:	2000      	movs	r0, #0
}
9000a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
9000a56a:	4621      	mov	r1, r4
9000a56c:	e7af      	b.n	9000a4ce <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a56e:	0692      	lsls	r2, r2, #26
9000a570:	d425      	bmi.n	9000a5be <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
9000a572:	f1ba 0f00 	cmp.w	sl, #0
9000a576:	d1a7      	bne.n	9000a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a578:	f7ff fa22 	bl	900099c0 <HAL_GetTick>
9000a57c:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a57e:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a580:	4287      	cmp	r7, r0
9000a582:	d301      	bcc.n	9000a588 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
9000a584:	2f00      	cmp	r7, #0
9000a586:	d191      	bne.n	9000a4ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a588:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a58a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a58e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a590:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a592:	0409      	lsls	r1, r1, #16
9000a594:	d503      	bpl.n	9000a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
9000a596:	0441      	lsls	r1, r0, #17
9000a598:	d401      	bmi.n	9000a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000a59a:	2a20      	cmp	r2, #32
9000a59c:	d121      	bne.n	9000a5e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a59e:	699a      	ldr	r2, [r3, #24]
9000a5a0:	0690      	lsls	r0, r2, #26
9000a5a2:	d483      	bmi.n	9000a4ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a5a4:	f7ff fa0c 	bl	900099c0 <HAL_GetTick>
9000a5a8:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a5aa:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a5ac:	2819      	cmp	r0, #25
9000a5ae:	d9f6      	bls.n	9000a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a5b0:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000a5b2:	f04f 0a01 	mov.w	sl, #1
9000a5b6:	e779      	b.n	9000a4ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a5b8:	6833      	ldr	r3, [r6, #0]
9000a5ba:	461a      	mov	r2, r3
9000a5bc:	e7cf      	b.n	9000a55e <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
9000a5be:	f1ba 0f00 	cmp.w	sl, #0
9000a5c2:	f43f af7f 	beq.w	9000a4c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
9000a5c6:	e77f      	b.n	9000a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a5c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a5ca:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
9000a5cc:	2001      	movs	r0, #1
9000a5ce:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a5d2:	4313      	orrs	r3, r2
9000a5d4:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a5d6:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a5da:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a5e2:	685a      	ldr	r2, [r3, #4]
9000a5e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a5e8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a5ea:	f7ff f9e9 	bl	900099c0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a5ee:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000a5f0:	4604      	mov	r4, r0
9000a5f2:	e7d4      	b.n	9000a59e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
9000a5f4:	fe00e800 	.word	0xfe00e800

9000a5f8 <HAL_I2C_MspInit>:
}
9000a5f8:	4770      	bx	lr
9000a5fa:	bf00      	nop

9000a5fc <HAL_I2C_Init>:
  if (hi2c == NULL)
9000a5fc:	2800      	cmp	r0, #0
9000a5fe:	d04e      	beq.n	9000a69e <HAL_I2C_Init+0xa2>
{
9000a600:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000a602:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000a606:	4604      	mov	r4, r0
9000a608:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a60c:	2b00      	cmp	r3, #0
9000a60e:	d041      	beq.n	9000a694 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
9000a610:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a612:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a614:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a616:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000a61a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a61c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a620:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000a622:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a626:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
9000a628:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000a62a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000a62c:	689a      	ldr	r2, [r3, #8]
9000a62e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000a632:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a634:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000a636:	d029      	beq.n	9000a68c <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a638:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a63c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000a63e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a640:	d102      	bne.n	9000a648 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000a642:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000a646:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a648:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
9000a64a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a64e:	4915      	ldr	r1, [pc, #84]	; (9000a6a4 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a650:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000a652:	4301      	orrs	r1, r0
9000a654:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000a656:	68d9      	ldr	r1, [r3, #12]
9000a658:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
9000a65c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
9000a65e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a662:	4302      	orrs	r2, r0
9000a664:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a668:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000a66c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a66e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a670:	4301      	orrs	r1, r0
  return HAL_OK;
9000a672:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000a674:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000a676:	6819      	ldr	r1, [r3, #0]
9000a678:	f041 0101 	orr.w	r1, r1, #1
9000a67c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a67e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000a680:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000a684:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a686:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a68a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000a68c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a690:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000a692:	e7d9      	b.n	9000a648 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000a694:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000a698:	f7ff ffae 	bl	9000a5f8 <HAL_I2C_MspInit>
9000a69c:	e7b8      	b.n	9000a610 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000a69e:	2001      	movs	r0, #1
}
9000a6a0:	4770      	bx	lr
9000a6a2:	bf00      	nop
9000a6a4:	02008000 	.word	0x02008000

9000a6a8 <HAL_I2C_MspDeInit>:
9000a6a8:	4770      	bx	lr
9000a6aa:	bf00      	nop

9000a6ac <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000a6ac:	b1b0      	cbz	r0, 9000a6dc <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000a6ae:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a6b0:	2324      	movs	r3, #36	; 0x24
{
9000a6b2:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000a6b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
9000a6b8:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000a6ba:	6813      	ldr	r3, [r2, #0]
9000a6bc:	f023 0301 	bic.w	r3, r3, #1
9000a6c0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000a6c2:	f7ff fff1 	bl	9000a6a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a6c6:	2300      	movs	r3, #0
9000a6c8:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000a6ca:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000a6cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
9000a6d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000a6d4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000a6d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000a6da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000a6dc:	2001      	movs	r0, #1
}
9000a6de:	4770      	bx	lr

9000a6e0 <HAL_I2C_Mem_Write>:
{
9000a6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a6e4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a6e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a6ea:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a6ee:	2b20      	cmp	r3, #32
{
9000a6f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a6f2:	d132      	bne.n	9000a75a <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000a6f4:	9b08      	ldr	r3, [sp, #32]
9000a6f6:	4604      	mov	r4, r0
9000a6f8:	b34b      	cbz	r3, 9000a74e <HAL_I2C_Mem_Write+0x6e>
9000a6fa:	f1ba 0f00 	cmp.w	sl, #0
9000a6fe:	d026      	beq.n	9000a74e <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
9000a700:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a704:	2b01      	cmp	r3, #1
9000a706:	d028      	beq.n	9000a75a <HAL_I2C_Mem_Write+0x7a>
9000a708:	2301      	movs	r3, #1
9000a70a:	460e      	mov	r6, r1
9000a70c:	4691      	mov	r9, r2
9000a70e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a712:	f7ff f955 	bl	900099c0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a716:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000a718:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a71a:	699a      	ldr	r2, [r3, #24]
9000a71c:	0411      	lsls	r1, r2, #16
9000a71e:	d51f      	bpl.n	9000a760 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a720:	f7ff f94e 	bl	900099c0 <HAL_GetTick>
9000a724:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a726:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a728:	2819      	cmp	r0, #25
9000a72a:	d9f6      	bls.n	9000a71a <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a72c:	699a      	ldr	r2, [r3, #24]
9000a72e:	0412      	lsls	r2, r2, #16
9000a730:	d5f3      	bpl.n	9000a71a <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a732:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a734:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a736:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a738:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a73a:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a73c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a740:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a742:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a746:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000a74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a74e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a752:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a754:	6463      	str	r3, [r4, #68]	; 0x44
}
9000a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000a75a:	2002      	movs	r0, #2
}
9000a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000a760:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a762:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a764:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a768:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000a76a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a76e:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a770:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a772:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a778:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a77a:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000a77c:	496d      	ldr	r1, [pc, #436]	; (9000a934 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
9000a77e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a782:	685a      	ldr	r2, [r3, #4]
9000a784:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a786:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
9000a78a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000a78e:	496a      	ldr	r1, [pc, #424]	; (9000a938 <HAL_I2C_Mem_Write+0x258>)
9000a790:	4332      	orrs	r2, r6
9000a792:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a794:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000a796:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a798:	4639      	mov	r1, r7
9000a79a:	f7ff fdbb 	bl	9000a314 <I2C_WaitOnTXISFlagUntilTimeout>
9000a79e:	2800      	cmp	r0, #0
9000a7a0:	d175      	bne.n	9000a88e <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000a7a2:	f1b8 0f01 	cmp.w	r8, #1
9000a7a6:	d00a      	beq.n	9000a7be <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a7a8:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000a7ac:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a7ae:	4639      	mov	r1, r7
9000a7b0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000a7b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a7b4:	462a      	mov	r2, r5
9000a7b6:	f7ff fdad 	bl	9000a314 <I2C_WaitOnTXISFlagUntilTimeout>
9000a7ba:	2800      	cmp	r0, #0
9000a7bc:	d167      	bne.n	9000a88e <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000a7be:	fa5f f389 	uxtb.w	r3, r9
9000a7c2:	6822      	ldr	r2, [r4, #0]
9000a7c4:	6293      	str	r3, [r2, #40]	; 0x28
9000a7c6:	1c78      	adds	r0, r7, #1
9000a7c8:	d14a      	bne.n	9000a860 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a7ca:	6993      	ldr	r3, [r2, #24]
9000a7cc:	0619      	lsls	r1, r3, #24
9000a7ce:	d5fc      	bpl.n	9000a7ca <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a7d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a7d2:	b29b      	uxth	r3, r3
9000a7d4:	2bff      	cmp	r3, #255	; 0xff
9000a7d6:	f240 808a 	bls.w	9000a8ee <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a7da:	6853      	ldr	r3, [r2, #4]
9000a7dc:	4957      	ldr	r1, [pc, #348]	; (9000a93c <HAL_I2C_Mem_Write+0x25c>)
9000a7de:	400b      	ands	r3, r1
9000a7e0:	4957      	ldr	r1, [pc, #348]	; (9000a940 <HAL_I2C_Mem_Write+0x260>)
9000a7e2:	4333      	orrs	r3, r6
9000a7e4:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000a7e6:	23ff      	movs	r3, #255	; 0xff
9000a7e8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a7ea:	6051      	str	r1, [r2, #4]
9000a7ec:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9000a93c <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a7f0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000a7f4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9000a940 <HAL_I2C_Mem_Write+0x260>
9000a7f8:	e004      	b.n	9000a804 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000a7fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a7fc:	b29b      	uxth	r3, r3
9000a7fe:	2b00      	cmp	r3, #0
9000a800:	f000 8083 	beq.w	9000a90a <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a804:	462a      	mov	r2, r5
9000a806:	4639      	mov	r1, r7
9000a808:	4620      	mov	r0, r4
9000a80a:	f7ff fd83 	bl	9000a314 <I2C_WaitOnTXISFlagUntilTimeout>
9000a80e:	2800      	cmp	r0, #0
9000a810:	d16b      	bne.n	9000a8ea <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a812:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a814:	6821      	ldr	r1, [r4, #0]
9000a816:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000a81a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000a81c:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000a81e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000a820:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000a822:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000a824:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000a826:	3a01      	subs	r2, #1
      hi2c->XferSize--;
9000a828:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000a82a:	b292      	uxth	r2, r2
9000a82c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000a82e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
9000a830:	b292      	uxth	r2, r2
9000a832:	2a00      	cmp	r2, #0
9000a834:	d0e1      	beq.n	9000a7fa <HAL_I2C_Mem_Write+0x11a>
9000a836:	2b00      	cmp	r3, #0
9000a838:	d1df      	bne.n	9000a7fa <HAL_I2C_Mem_Write+0x11a>
9000a83a:	1c78      	adds	r0, r7, #1
9000a83c:	d12c      	bne.n	9000a898 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a83e:	698b      	ldr	r3, [r1, #24]
9000a840:	061a      	lsls	r2, r3, #24
9000a842:	d5fc      	bpl.n	9000a83e <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000a844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a846:	b29b      	uxth	r3, r3
9000a848:	2bff      	cmp	r3, #255	; 0xff
9000a84a:	d940      	bls.n	9000a8ce <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
9000a84c:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000a84e:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a852:	ea03 0308 	and.w	r3, r3, r8
9000a856:	4333      	orrs	r3, r6
9000a858:	ea43 0309 	orr.w	r3, r3, r9
9000a85c:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000a85e:	e7cc      	b.n	9000a7fa <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a860:	6993      	ldr	r3, [r2, #24]
9000a862:	061b      	lsls	r3, r3, #24
9000a864:	d4b4      	bmi.n	9000a7d0 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a866:	f7ff f8ab 	bl	900099c0 <HAL_GetTick>
9000a86a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a86c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a86e:	4287      	cmp	r7, r0
9000a870:	d301      	bcc.n	9000a876 <HAL_I2C_Mem_Write+0x196>
9000a872:	2f00      	cmp	r7, #0
9000a874:	d1a7      	bne.n	9000a7c6 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a876:	6993      	ldr	r3, [r2, #24]
9000a878:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a87c:	d1a3      	bne.n	9000a7c6 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a87e:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a880:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a882:	430a      	orrs	r2, r1
9000a884:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a886:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a88a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000a88e:	2300      	movs	r3, #0
      return HAL_ERROR;
9000a890:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000a892:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000a896:	e75e      	b.n	9000a756 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a898:	698b      	ldr	r3, [r1, #24]
9000a89a:	061b      	lsls	r3, r3, #24
9000a89c:	d4d2      	bmi.n	9000a844 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a89e:	f7ff f88f 	bl	900099c0 <HAL_GetTick>
9000a8a2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a8a4:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a8a6:	4287      	cmp	r7, r0
9000a8a8:	d301      	bcc.n	9000a8ae <HAL_I2C_Mem_Write+0x1ce>
9000a8aa:	2f00      	cmp	r7, #0
9000a8ac:	d1c5      	bne.n	9000a83a <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a8ae:	698b      	ldr	r3, [r1, #24]
9000a8b0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000a8b4:	d1c1      	bne.n	9000a83a <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a8b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a8b8:	2120      	movs	r1, #32
          return HAL_ERROR;
9000a8ba:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000a8bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a8c0:	430a      	orrs	r2, r1
9000a8c2:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a8c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a8c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000a8cc:	e743      	b.n	9000a756 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000a8ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000a8d0:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a8d2:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000a8d4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a8d6:	684b      	ldr	r3, [r1, #4]
9000a8d8:	ea03 0308 	and.w	r3, r3, r8
9000a8dc:	4333      	orrs	r3, r6
9000a8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000a8e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a8e6:	604b      	str	r3, [r1, #4]
}
9000a8e8:	e787      	b.n	9000a7fa <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000a8ea:	2001      	movs	r0, #1
9000a8ec:	e733      	b.n	9000a756 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000a8ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a8f0:	4812      	ldr	r0, [pc, #72]	; (9000a93c <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000a8f2:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a8f4:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000a8f6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000a8f8:	6853      	ldr	r3, [r2, #4]
9000a8fa:	4003      	ands	r3, r0
9000a8fc:	4333      	orrs	r3, r6
9000a8fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000a902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000a906:	6053      	str	r3, [r2, #4]
}
9000a908:	e770      	b.n	9000a7ec <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000a90a:	462a      	mov	r2, r5
9000a90c:	4639      	mov	r1, r7
9000a90e:	4620      	mov	r0, r4
9000a910:	f7ff fdb6 	bl	9000a480 <I2C_WaitOnSTOPFlagUntilTimeout>
9000a914:	2800      	cmp	r0, #0
9000a916:	d1e8      	bne.n	9000a8ea <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a918:	6823      	ldr	r3, [r4, #0]
9000a91a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000a91c:	4d09      	ldr	r5, [pc, #36]	; (9000a944 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a91e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000a920:	685a      	ldr	r2, [r3, #4]
9000a922:	402a      	ands	r2, r5
9000a924:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000a926:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000a92a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000a92e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000a932:	e710      	b.n	9000a756 <HAL_I2C_Mem_Write+0x76>
9000a934:	fc009800 	.word	0xfc009800
9000a938:	01002000 	.word	0x01002000
9000a93c:	fc009c00 	.word	0xfc009c00
9000a940:	01ff0000 	.word	0x01ff0000
9000a944:	fe00e800 	.word	0xfe00e800

9000a948 <HAL_I2C_Mem_Read>:
{
9000a948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a94c:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a94e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000a952:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a956:	2b20      	cmp	r3, #32
{
9000a958:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
9000a95a:	d137      	bne.n	9000a9cc <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
9000a95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000a95e:	4683      	mov	fp, r0
9000a960:	b36b      	cbz	r3, 9000a9be <HAL_I2C_Mem_Read+0x76>
9000a962:	f1b9 0f00 	cmp.w	r9, #0
9000a966:	d02a      	beq.n	9000a9be <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
9000a968:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000a96c:	2b01      	cmp	r3, #1
9000a96e:	d02d      	beq.n	9000a9cc <HAL_I2C_Mem_Read+0x84>
9000a970:	2301      	movs	r3, #1
9000a972:	460f      	mov	r7, r1
9000a974:	4690      	mov	r8, r2
9000a976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000a97a:	f7ff f821 	bl	900099c0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a97e:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
9000a982:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000a984:	699a      	ldr	r2, [r3, #24]
9000a986:	0410      	lsls	r0, r2, #16
9000a988:	d523      	bpl.n	9000a9d2 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a98a:	f7ff f819 	bl	900099c0 <HAL_GetTick>
9000a98e:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a990:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a994:	2819      	cmp	r0, #25
9000a996:	d9f5      	bls.n	9000a984 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000a998:	699a      	ldr	r2, [r3, #24]
9000a99a:	0411      	lsls	r1, r2, #16
9000a99c:	d5f2      	bpl.n	9000a984 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a99e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a9a2:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a9a4:	2200      	movs	r2, #0
      return HAL_ERROR;
9000a9a6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a9a8:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000a9aa:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a9ae:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a9b2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a9b6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000a9ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a9be:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000a9c2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000a9c4:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
9000a9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000a9cc:	2002      	movs	r0, #2
}
9000a9ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
9000a9d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a9d4:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000a9d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000a9da:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000a9dc:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a9e0:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000a9e2:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a9e6:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000a9e8:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000a9ec:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000a9f0:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
9000a9f4:	4983      	ldr	r1, [pc, #524]	; (9000ac04 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
9000a9f6:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000a9fa:	685a      	ldr	r2, [r3, #4]
9000a9fc:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000a9fe:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000aa00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000aa04:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000aa06:	433a      	orrs	r2, r7
9000aa08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000aa0c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000aa0e:	4632      	mov	r2, r6
9000aa10:	f7ff fc80 	bl	9000a314 <I2C_WaitOnTXISFlagUntilTimeout>
9000aa14:	2800      	cmp	r0, #0
9000aa16:	f040 8091 	bne.w	9000ab3c <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000aa1a:	2c01      	cmp	r4, #1
9000aa1c:	d00c      	beq.n	9000aa38 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000aa1e:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000aa22:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000aa26:	4629      	mov	r1, r5
9000aa28:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000aa2a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000aa2c:	4632      	mov	r2, r6
9000aa2e:	f7ff fc71 	bl	9000a314 <I2C_WaitOnTXISFlagUntilTimeout>
9000aa32:	2800      	cmp	r0, #0
9000aa34:	f040 8082 	bne.w	9000ab3c <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000aa38:	fa5f f388 	uxtb.w	r3, r8
9000aa3c:	f8db 4000 	ldr.w	r4, [fp]
9000aa40:	62a3      	str	r3, [r4, #40]	; 0x28
9000aa42:	1c6a      	adds	r2, r5, #1
9000aa44:	d160      	bne.n	9000ab08 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aa46:	69a3      	ldr	r3, [r4, #24]
9000aa48:	065b      	lsls	r3, r3, #25
9000aa4a:	d5fc      	bpl.n	9000aa46 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000aa4c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000aa50:	b29b      	uxth	r3, r3
9000aa52:	2bff      	cmp	r3, #255	; 0xff
9000aa54:	f240 80ae 	bls.w	9000abb4 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000aa58:	6863      	ldr	r3, [r4, #4]
9000aa5a:	4a6a      	ldr	r2, [pc, #424]	; (9000ac04 <HAL_I2C_Mem_Read+0x2bc>)
9000aa5c:	4013      	ands	r3, r2
9000aa5e:	4a6a      	ldr	r2, [pc, #424]	; (9000ac08 <HAL_I2C_Mem_Read+0x2c0>)
9000aa60:	433b      	orrs	r3, r7
9000aa62:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000aa64:	23ff      	movs	r3, #255	; 0xff
9000aa66:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000aa6a:	6062      	str	r2, [r4, #4]
9000aa6c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000ac14 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000aa70:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000aa74:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000ac18 <HAL_I2C_Mem_Read+0x2d0>
9000aa78:	1c69      	adds	r1, r5, #1
9000aa7a:	d127      	bne.n	9000aacc <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aa7c:	69a3      	ldr	r3, [r4, #24]
9000aa7e:	075a      	lsls	r2, r3, #29
9000aa80:	d5fc      	bpl.n	9000aa7c <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000aa82:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000aa84:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
9000aa88:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000aa8a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000aa8e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
9000aa92:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000aa94:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000aa96:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000aa98:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
9000aa9c:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
9000aaa0:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000aaa4:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aaa6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000aaaa:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aaac:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000aaae:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aab2:	b10a      	cbz	r2, 9000aab8 <HAL_I2C_Mem_Read+0x170>
9000aab4:	2b00      	cmp	r3, #0
9000aab6:	d046      	beq.n	9000ab46 <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
9000aab8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000aabc:	b29b      	uxth	r3, r3
9000aabe:	2b00      	cmp	r3, #0
9000aac0:	f000 8088 	beq.w	9000abd4 <HAL_I2C_Mem_Read+0x28c>
9000aac4:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aac6:	f8db 4000 	ldr.w	r4, [fp]
9000aaca:	d0d7      	beq.n	9000aa7c <HAL_I2C_Mem_Read+0x134>
9000aacc:	69a3      	ldr	r3, [r4, #24]
9000aace:	075b      	lsls	r3, r3, #29
9000aad0:	d4d7      	bmi.n	9000aa82 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aad2:	f7fe ff75 	bl	900099c0 <HAL_GetTick>
9000aad6:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aad8:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aadc:	4285      	cmp	r5, r0
9000aade:	d301      	bcc.n	9000aae4 <HAL_I2C_Mem_Read+0x19c>
9000aae0:	2d00      	cmp	r5, #0
9000aae2:	d1c9      	bne.n	9000aa78 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aae4:	69a3      	ldr	r3, [r4, #24]
9000aae6:	f013 0304 	ands.w	r3, r3, #4
9000aaea:	d1c5      	bne.n	9000aa78 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aaec:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aaf0:	2120      	movs	r1, #32
          return HAL_ERROR;
9000aaf2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000aaf4:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aaf8:	430a      	orrs	r2, r1
9000aafa:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aafe:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000ab02:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
9000ab06:	e75f      	b.n	9000a9c8 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ab08:	69a3      	ldr	r3, [r4, #24]
9000ab0a:	0658      	lsls	r0, r3, #25
9000ab0c:	d49e      	bmi.n	9000aa4c <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab0e:	f7fe ff57 	bl	900099c0 <HAL_GetTick>
9000ab12:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab14:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab18:	4285      	cmp	r5, r0
9000ab1a:	d301      	bcc.n	9000ab20 <HAL_I2C_Mem_Read+0x1d8>
9000ab1c:	2d00      	cmp	r5, #0
9000ab1e:	d190      	bne.n	9000aa42 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab20:	69a3      	ldr	r3, [r4, #24]
9000ab22:	f013 0340 	ands.w	r3, r3, #64	; 0x40
9000ab26:	d18c      	bne.n	9000aa42 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ab28:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000ab2c:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ab2e:	430a      	orrs	r2, r1
9000ab30:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000ab34:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000ab38:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000ab3c:	2300      	movs	r3, #0
      return HAL_ERROR;
9000ab3e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000ab40:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
9000ab44:	e740      	b.n	9000a9c8 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ab46:	f8db 2000 	ldr.w	r2, [fp]
9000ab4a:	1c68      	adds	r0, r5, #1
9000ab4c:	d111      	bne.n	9000ab72 <HAL_I2C_Mem_Read+0x22a>
9000ab4e:	6993      	ldr	r3, [r2, #24]
9000ab50:	0619      	lsls	r1, r3, #24
9000ab52:	d5fc      	bpl.n	9000ab4e <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000ab54:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000ab58:	b29b      	uxth	r3, r3
9000ab5a:	2bff      	cmp	r3, #255	; 0xff
9000ab5c:	d91a      	bls.n	9000ab94 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
9000ab5e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000ab60:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ab64:	ea03 0308 	and.w	r3, r3, r8
9000ab68:	433b      	orrs	r3, r7
9000ab6a:	ea43 0309 	orr.w	r3, r3, r9
9000ab6e:	6053      	str	r3, [r2, #4]
}
9000ab70:	e7a2      	b.n	9000aab8 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ab72:	6993      	ldr	r3, [r2, #24]
9000ab74:	061b      	lsls	r3, r3, #24
9000ab76:	d4ed      	bmi.n	9000ab54 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab78:	f7fe ff22 	bl	900099c0 <HAL_GetTick>
9000ab7c:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab7e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab82:	4285      	cmp	r5, r0
9000ab84:	d301      	bcc.n	9000ab8a <HAL_I2C_Mem_Read+0x242>
9000ab86:	2d00      	cmp	r5, #0
9000ab88:	d1df      	bne.n	9000ab4a <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab8a:	6993      	ldr	r3, [r2, #24]
9000ab8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000ab90:	d1db      	bne.n	9000ab4a <HAL_I2C_Mem_Read+0x202>
9000ab92:	e7ab      	b.n	9000aaec <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
9000ab94:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000ab98:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000ab9a:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000ab9c:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000aba0:	6853      	ldr	r3, [r2, #4]
9000aba2:	ea03 0308 	and.w	r3, r3, r8
9000aba6:	433b      	orrs	r3, r7
9000aba8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000abac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000abb0:	6053      	str	r3, [r2, #4]
}
9000abb2:	e781      	b.n	9000aab8 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
9000abb4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000abb8:	4912      	ldr	r1, [pc, #72]	; (9000ac04 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
9000abba:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000abbc:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
9000abbe:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000abc2:	6863      	ldr	r3, [r4, #4]
9000abc4:	400b      	ands	r3, r1
9000abc6:	433b      	orrs	r3, r7
9000abc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000abcc:	4a0f      	ldr	r2, [pc, #60]	; (9000ac0c <HAL_I2C_Mem_Read+0x2c4>)
9000abce:	431a      	orrs	r2, r3
9000abd0:	6062      	str	r2, [r4, #4]
}
9000abd2:	e74b      	b.n	9000aa6c <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000abd4:	4632      	mov	r2, r6
9000abd6:	4629      	mov	r1, r5
9000abd8:	4658      	mov	r0, fp
9000abda:	f7ff fc51 	bl	9000a480 <I2C_WaitOnSTOPFlagUntilTimeout>
9000abde:	b970      	cbnz	r0, 9000abfe <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000abe0:	f8db 3000 	ldr.w	r3, [fp]
9000abe4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000abe6:	4c0a      	ldr	r4, [pc, #40]	; (9000ac10 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000abe8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000abea:	685a      	ldr	r2, [r3, #4]
9000abec:	4022      	ands	r2, r4
9000abee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000abf0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000abf4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000abf8:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
9000abfc:	e6e4      	b.n	9000a9c8 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000abfe:	2001      	movs	r0, #1
9000ac00:	e6e2      	b.n	9000a9c8 <HAL_I2C_Mem_Read+0x80>
9000ac02:	bf00      	nop
9000ac04:	fc009800 	.word	0xfc009800
9000ac08:	01ff2400 	.word	0x01ff2400
9000ac0c:	02002400 	.word	0x02002400
9000ac10:	fe00e800 	.word	0xfe00e800
9000ac14:	fc009c00 	.word	0xfc009c00
9000ac18:	01ff0000 	.word	0x01ff0000

9000ac1c <HAL_I2C_GetState>:
  return hi2c->State;
9000ac1c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
9000ac20:	4770      	bx	lr
9000ac22:	bf00      	nop

9000ac24 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
9000ac24:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
9000ac26:	4770      	bx	lr

9000ac28 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000ac28:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000ac2c:	2a20      	cmp	r2, #32
9000ac2e:	d123      	bne.n	9000ac78 <HAL_I2CEx_ConfigAnalogFilter+0x50>
9000ac30:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000ac34:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000ac38:	4603      	mov	r3, r0
9000ac3a:	2a01      	cmp	r2, #1
9000ac3c:	d01c      	beq.n	9000ac78 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000ac3e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000ac40:	2024      	movs	r0, #36	; 0x24
{
9000ac42:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
9000ac44:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000ac48:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000ac4c:	6810      	ldr	r0, [r2, #0]
9000ac4e:	f020 0001 	bic.w	r0, r0, #1
9000ac52:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000ac54:	6810      	ldr	r0, [r2, #0]
9000ac56:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000ac5a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000ac5c:	6810      	ldr	r0, [r2, #0]
9000ac5e:	4301      	orrs	r1, r0

    return HAL_OK;
9000ac60:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
9000ac62:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000ac64:	6811      	ldr	r1, [r2, #0]
9000ac66:	f041 0101 	orr.w	r1, r1, #1
9000ac6a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000ac6c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000ac70:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000ac74:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000ac78:	2002      	movs	r0, #2
}
9000ac7a:	4770      	bx	lr

9000ac7c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000ac7c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000ac80:	2a20      	cmp	r2, #32
9000ac82:	d122      	bne.n	9000acca <HAL_I2CEx_ConfigDigitalFilter+0x4e>
9000ac84:	4603      	mov	r3, r0
{
9000ac86:	b500      	push	{lr}
9000ac88:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000ac8c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000ac90:	2a01      	cmp	r2, #1
9000ac92:	d01c      	beq.n	9000acce <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000ac94:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000ac96:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000ac98:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000ac9c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
9000aca0:	6810      	ldr	r0, [r2, #0]
9000aca2:	f020 0001 	bic.w	r0, r0, #1
9000aca6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000aca8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000acaa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000acae:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
9000acb2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
9000acb4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000acb6:	6811      	ldr	r1, [r2, #0]
9000acb8:	f041 0101 	orr.w	r1, r1, #1
9000acbc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000acbe:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000acc2:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000acc6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000acca:	2002      	movs	r0, #2
}
9000accc:	4770      	bx	lr
    return HAL_BUSY;
9000acce:	2002      	movs	r0, #2
}
9000acd0:	f85d fb04 	ldr.w	pc, [sp], #4

9000acd4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
9000acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000acd8:	460d      	mov	r5, r1
9000acda:	4614      	mov	r4, r2
9000acdc:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000acde:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
9000ace0:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
9000ace2:	2701      	movs	r7, #1
  p = 0;
9000ace4:	f04f 0800 	mov.w	r8, #0
9000ace8:	e006      	b.n	9000acf8 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000acea:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000acee:	eb06 0308 	add.w	r3, r6, r8
9000acf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000acf6:	d837      	bhi.n	9000ad68 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
9000acf8:	eb05 0008 	add.w	r0, r5, r8
9000acfc:	4632      	mov	r2, r6
9000acfe:	4639      	mov	r1, r7
    while (i != 0UL)
9000ad00:	b116      	cbz	r6, 9000ad08 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
9000ad02:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
9000ad04:	f01c ffaa 	bl	90027c5c <memset>
  for (l = 0; l < 16UL; l++)
9000ad08:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000ad0a:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000ad0e:	d1ec      	bne.n	9000acea <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
9000ad10:	2300      	movs	r3, #0
9000ad12:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
9000ad16:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000ad1a:	7828      	ldrb	r0, [r5, #0]
9000ad1c:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000ad1e:	b300      	cbz	r0, 9000ad62 <JPEG_Bits_To_SizeCodes+0x8e>
9000ad20:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000ad24:	2701      	movs	r7, #1
  p = 0;
9000ad26:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
9000ad28:	4288      	cmp	r0, r1
9000ad2a:	d10f      	bne.n	9000ad4c <JPEG_Bits_To_SizeCodes+0x78>
9000ad2c:	eb02 0008 	add.w	r0, r2, r8
9000ad30:	1c56      	adds	r6, r2, #1
9000ad32:	eb05 0c02 	add.w	ip, r5, r2
9000ad36:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000ad3a:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000ad3c:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
9000ad40:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
9000ad42:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000ad46:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000ad48:	458e      	cmp	lr, r1
9000ad4a:	d0f7      	beq.n	9000ad3c <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000ad4c:	291f      	cmp	r1, #31
9000ad4e:	d80b      	bhi.n	9000ad68 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000ad50:	fa07 f001 	lsl.w	r0, r7, r1
9000ad54:	4298      	cmp	r0, r3
9000ad56:	d907      	bls.n	9000ad68 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000ad58:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000ad5a:	005b      	lsls	r3, r3, #1
    si++;
9000ad5c:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000ad5e:	2800      	cmp	r0, #0
9000ad60:	d1e2      	bne.n	9000ad28 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
9000ad62:	2000      	movs	r0, #0
}
9000ad64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000ad68:	2001      	movs	r0, #1
}
9000ad6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000ad6e:	bf00      	nop

9000ad70 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
9000ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ad72:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000ad76:	460d      	mov	r5, r1
9000ad78:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000ad7a:	ab01      	add	r3, sp, #4
9000ad7c:	aa43      	add	r2, sp, #268	; 0x10c
9000ad7e:	a902      	add	r1, sp, #8
9000ad80:	f7ff ffa8 	bl	9000acd4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000ad84:	b9d0      	cbnz	r0, 9000adbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000ad86:	9f01      	ldr	r7, [sp, #4]
9000ad88:	b1c7      	cbz	r7, 9000adbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000ad8a:	370f      	adds	r7, #15
9000ad8c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
9000ad90:	a902      	add	r1, sp, #8
9000ad92:	f104 0c0f 	add.w	ip, r4, #15
9000ad96:	4427      	add	r7, r4
9000ad98:	e009      	b.n	9000adae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000ad9a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000ad9e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000ada0:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000ada4:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000ada8:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000adaa:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000adac:	d006      	beq.n	9000adbc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000adae:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000adb2:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000adb4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000adb8:	d9ef      	bls.n	9000ad9a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000adba:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000adbc:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
9000adc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000adc2:	bf00      	nop

9000adc4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
9000adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000adc8:	6804      	ldr	r4, [r0, #0]
{
9000adca:	b093      	sub	sp, #76	; 0x4c
9000adcc:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000adce:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
9000add2:	429a      	cmp	r2, r3
9000add4:	f000 809d 	beq.w	9000af12 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000add8:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000addc:	429a      	cmp	r2, r3
9000adde:	d003      	beq.n	9000ade8 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
9000ade0:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000ade2:	b013      	add	sp, #76	; 0x4c
9000ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000ade8:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000adec:	a903      	add	r1, sp, #12
9000adee:	f7ff ffbf 	bl	9000ad70 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
9000adf2:	2800      	cmp	r0, #0
9000adf4:	d1f5      	bne.n	9000ade2 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
9000adf6:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adfa:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000adfe:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
9000ae02:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae04:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
9000ae08:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae0a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
9000ae0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae12:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
9000ae16:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae1a:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
9000ae1e:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae20:	f89d 9015 	ldrb.w	r9, [sp, #21]
9000ae24:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae28:	f89d c014 	ldrb.w	ip, [sp, #20]
9000ae2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae30:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae34:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae38:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae3c:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae3e:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae42:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9000ae46:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
9000ae4a:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae4e:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae52:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae56:	f89d 7011 	ldrb.w	r7, [sp, #17]
9000ae5a:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae5e:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
9000ae60:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae64:	f89d 2010 	ldrb.w	r2, [sp, #16]
9000ae68:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae6c:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
9000ae6e:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae72:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae74:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
9000ae78:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae7c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae80:	f89d 600f 	ldrb.w	r6, [sp, #15]
9000ae84:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae88:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae8c:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae8e:	9b01      	ldr	r3, [sp, #4]
9000ae90:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae94:	f89d 500d 	ldrb.w	r5, [sp, #13]
9000ae98:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000ae9c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
9000aea0:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aea4:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
9000aea6:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aeaa:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aeae:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9000aeb2:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aeb6:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aeba:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aebe:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
9000aec2:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
9000aec6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000aeca:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aece:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
9000aed2:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aed4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000aed8:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000aeda:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000aede:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aee2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
9000aee6:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aee8:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000aeec:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000aeee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000aef2:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aef6:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000aefa:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000aefc:	f89d 3018 	ldrb.w	r3, [sp, #24]
9000af00:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
9000af04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000af08:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000af0c:	b013      	add	sp, #76	; 0x4c
9000af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000af12:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
9000af16:	e769      	b.n	9000adec <JPEG_Set_HuffDC_Mem+0x28>

9000af18 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000af18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000af1c:	6804      	ldr	r4, [r0, #0]
{
9000af1e:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
9000af22:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000af24:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
9000af28:	429a      	cmp	r2, r3
9000af2a:	d042      	beq.n	9000afb2 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000af2c:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
9000af30:	429a      	cmp	r2, r3
9000af32:	d004      	beq.n	9000af3e <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000af34:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000af36:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000af3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000af3e:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000af42:	4628      	mov	r0, r5
9000af44:	466b      	mov	r3, sp
9000af46:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000af4a:	a901      	add	r1, sp, #4
9000af4c:	f7ff fec2 	bl	9000acd4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000af50:	2800      	cmp	r0, #0
9000af52:	d1f0      	bne.n	9000af36 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000af54:	9b00      	ldr	r3, [sp, #0]
9000af56:	b37b      	cbz	r3, 9000afb8 <JPEG_Set_HuffAC_Mem+0xa0>
9000af58:	330f      	adds	r3, #15
9000af5a:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000af5e:	f10d 0c04 	add.w	ip, sp, #4
9000af62:	f105 020f 	add.w	r2, r5, #15
9000af66:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000af6a:	ae42      	add	r6, sp, #264	; 0x108
9000af6c:	e011      	b.n	9000af92 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
9000af6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000af72:	2ba1      	cmp	r3, #161	; 0xa1
9000af74:	d8de      	bhi.n	9000af34 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000af76:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000af7a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000af7e:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000af82:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000af84:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000af88:	4631      	mov	r1, r6
9000af8a:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000af8e:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
9000af90:	d013      	beq.n	9000afba <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
9000af92:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000af96:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000af98:	2900      	cmp	r1, #0
9000af9a:	d0ec      	beq.n	9000af76 <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
9000af9c:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
9000af9e:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000afa2:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000afa4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
9000afa8:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000afac:	d1df      	bne.n	9000af6e <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
9000afae:	23a1      	movs	r3, #161	; 0xa1
9000afb0:	e7e1      	b.n	9000af76 <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000afb2:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000afb6:	e7c4      	b.n	9000af42 <JPEG_Set_HuffAC_Mem+0x2a>
9000afb8:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000afba:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000afbe:	4a1a      	ldr	r2, [pc, #104]	; (9000b028 <JPEG_Set_HuffAC_Mem+0x110>)
9000afc0:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000afc4:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000afc8:	6023      	str	r3, [r4, #0]
9000afca:	6063      	str	r3, [r4, #4]
9000afcc:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
9000afd0:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000afd2:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000afd6:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000afd8:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000afdc:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
9000afe0:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000afe2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000afe6:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000afe8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000afec:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000afee:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aff2:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000aff6:	0212      	lsls	r2, r2, #8
9000aff8:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000affc:	021b      	lsls	r3, r3, #8
9000affe:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b002:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000b006:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b00c:	433a      	orrs	r2, r7
    while (i > 1UL)
9000b00e:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b010:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000b014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b018:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000b01c:	d1e7      	bne.n	9000afee <JPEG_Set_HuffAC_Mem+0xd6>
}
9000b01e:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000b022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000b026:	bf00      	nop
9000b028:	0fd10fd0 	.word	0x0fd10fd0

9000b02c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000b02c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b02e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000b032:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b034:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b036:	f003 0303 	and.w	r3, r3, #3
9000b03a:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000b03c:	6803      	ldr	r3, [r0, #0]
9000b03e:	685a      	ldr	r2, [r3, #4]
9000b040:	bf0c      	ite	eq
9000b042:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000b046:	f022 0208 	bicne.w	r2, r2, #8
9000b04a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b04c:	681a      	ldr	r2, [r3, #0]
9000b04e:	f022 0201 	bic.w	r2, r2, #1
9000b052:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b056:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b05a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000b05c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b05e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000b062:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000b064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000b06a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b06e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b072:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000b074:	681a      	ldr	r2, [r3, #0]
9000b076:	f042 0201 	orr.w	r2, r2, #1
9000b07a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b07c:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000b07e:	f002 020c 	and.w	r2, r2, #12
9000b082:	2a08      	cmp	r2, #8
9000b084:	d00a      	beq.n	9000b09c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b086:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000b088:	f002 020c 	and.w	r2, r2, #12
9000b08c:	2a0c      	cmp	r2, #12
9000b08e:	d000      	beq.n	9000b092 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
9000b090:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b094:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b098:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b09a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000b09c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b09e:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000b0a2:	631a      	str	r2, [r3, #48]	; 0x30
9000b0a4:	4770      	bx	lr
9000b0a6:	bf00      	nop

9000b0a8 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b0a8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b0aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
9000b0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b0ae:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
9000b0b0:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b0b2:	42aa      	cmp	r2, r5
9000b0b4:	d32d      	bcc.n	9000b112 <JPEG_DMA_StartProcess+0x6a>
9000b0b6:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b0b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b0ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b0bc:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b0be:	42b3      	cmp	r3, r6
9000b0c0:	d327      	bcc.n	9000b112 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b0c2:	4f1b      	ldr	r7, [pc, #108]	; (9000b130 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b0c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 9000b13c <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b0c8:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b0ca:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b0ce:	4919      	ldr	r1, [pc, #100]	; (9000b134 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b0d0:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b0d2:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000b0d4:	4918      	ldr	r1, [pc, #96]	; (9000b138 <JPEG_DMA_StartProcess+0x90>)
9000b0d6:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000b0d8:	b1a5      	cbz	r5, 9000b104 <JPEG_DMA_StartProcess+0x5c>
9000b0da:	b19e      	cbz	r6, 9000b104 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b0dc:	fbb2 f1f5 	udiv	r1, r2, r5
9000b0e0:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b0e4:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b0e6:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b0e8:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b0ea:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b0ec:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000b0ee:	fbb3 f2f6 	udiv	r2, r3, r6
9000b0f2:	fb06 3212 	mls	r2, r6, r2, r3
9000b0f6:	1a9b      	subs	r3, r3, r2
9000b0f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b0fa:	9500      	str	r5, [sp, #0]
9000b0fc:	69e2      	ldr	r2, [r4, #28]
9000b0fe:	f001 fbb5 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b102:	b148      	cbz	r0, 9000b118 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b104:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000b106:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b108:	f043 0304 	orr.w	r3, r3, #4
9000b10c:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000b10e:	b003      	add	sp, #12
9000b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b112:	2001      	movs	r0, #1
}
9000b114:	b003      	add	sp, #12
9000b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b118:	6822      	ldr	r2, [r4, #0]
9000b11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b11c:	69a1      	ldr	r1, [r4, #24]
9000b11e:	3240      	adds	r2, #64	; 0x40
9000b120:	9500      	str	r5, [sp, #0]
9000b122:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b124:	f001 fba2 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b128:	2800      	cmp	r0, #0
9000b12a:	d0f3      	beq.n	9000b114 <JPEG_DMA_StartProcess+0x6c>
9000b12c:	e7ea      	b.n	9000b104 <JPEG_DMA_StartProcess+0x5c>
9000b12e:	bf00      	nop
9000b130:	9000b661 	.word	0x9000b661
9000b134:	9000b8d9 	.word	0x9000b8d9
9000b138:	9000b959 	.word	0x9000b959
9000b13c:	9000b68d 	.word	0x9000b68d

9000b140 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b140:	6803      	ldr	r3, [r0, #0]
9000b142:	685a      	ldr	r2, [r3, #4]
9000b144:	f002 0203 	and.w	r2, r2, #3
9000b148:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000b14a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000b14e:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b150:	f000 8094 	beq.w	9000b27c <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000b154:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b156:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000b158:	f014 0403 	ands.w	r4, r4, #3
9000b15c:	d172      	bne.n	9000b244 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b15e:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b160:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b162:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b164:	68da      	ldr	r2, [r3, #12]
9000b166:	0c12      	lsrs	r2, r2, #16
9000b168:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000b16a:	4a5f      	ldr	r2, [pc, #380]	; (9000b2e8 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000b16c:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000b170:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
9000b174:	2600      	movs	r6, #0
9000b176:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b17a:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000b17e:	f241 3488 	movw	r4, #5000	; 0x1388
9000b182:	e033      	b.n	9000b1ec <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b184:	f892 8001 	ldrb.w	r8, [r2, #1]
9000b188:	fb0e f707 	mul.w	r7, lr, r7
9000b18c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b18e:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b192:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b196:	2f64      	cmp	r7, #100	; 0x64
9000b198:	d961      	bls.n	9000b25e <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000b19a:	fbb4 f7f7 	udiv	r7, r4, r7
9000b19e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b1a0:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000b1a4:	2f01      	cmp	r7, #1
9000b1a6:	d03d      	beq.n	9000b224 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b1a8:	f892 8002 	ldrb.w	r8, [r2, #2]
9000b1ac:	fb0e f707 	mul.w	r7, lr, r7
9000b1b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b1b2:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b1b6:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b1ba:	2f64      	cmp	r7, #100	; 0x64
9000b1bc:	d94a      	bls.n	9000b254 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
9000b1be:	fbb4 f7f7 	udiv	r7, r4, r7
9000b1c2:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b1c4:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000b1c6:	2b01      	cmp	r3, #1
9000b1c8:	d030      	beq.n	9000b22c <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b1ca:	78d7      	ldrb	r7, [r2, #3]
9000b1cc:	fb0e f303 	mul.w	r3, lr, r3
9000b1d0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b1d2:	5dcf      	ldrb	r7, [r1, r7]
9000b1d4:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000b1d8:	2b64      	cmp	r3, #100	; 0x64
9000b1da:	d94a      	bls.n	9000b272 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000b1dc:	fbb4 f3f3 	udiv	r3, r4, r3
9000b1e0:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b1e2:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000b1e4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b1e8:	4295      	cmp	r5, r2
9000b1ea:	d025      	beq.n	9000b238 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000b1ec:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b1f0:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000b1f2:	2f01      	cmp	r7, #1
9000b1f4:	d02c      	beq.n	9000b250 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b1f6:	f892 8000 	ldrb.w	r8, [r2]
9000b1fa:	fb0e f707 	mul.w	r7, lr, r7
9000b1fe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b200:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b204:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b208:	2f64      	cmp	r7, #100	; 0x64
9000b20a:	d92d      	bls.n	9000b268 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
9000b20c:	fbb4 f7f7 	udiv	r7, r4, r7
9000b210:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b212:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000b216:	2f01      	cmp	r7, #1
9000b218:	d1b4      	bne.n	9000b184 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b21a:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000b21e:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b220:	2f01      	cmp	r7, #1
9000b222:	d1c1      	bne.n	9000b1a8 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b224:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000b226:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b228:	2b01      	cmp	r3, #1
9000b22a:	d1ce      	bne.n	9000b1ca <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b22c:	3204      	adds	r2, #4
        quality += 100UL;
9000b22e:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000b230:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b234:	4295      	cmp	r5, r2
9000b236:	d1d9      	bne.n	9000b1ec <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
9000b238:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000b23a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000b23c:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000b240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000b244:	f002 0203 	and.w	r2, r2, #3
9000b248:	2a03      	cmp	r2, #3
9000b24a:	d14a      	bne.n	9000b2e2 <HAL_JPEG_GetInfo.part.0+0x1a2>
9000b24c:	2430      	movs	r4, #48	; 0x30
9000b24e:	e016      	b.n	9000b27e <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
9000b250:	3664      	adds	r6, #100	; 0x64
9000b252:	e7de      	b.n	9000b212 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
9000b254:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b258:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b25c:	e7b2      	b.n	9000b1c4 <HAL_JPEG_GetInfo.part.0+0x84>
9000b25e:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b262:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b266:	e79b      	b.n	9000b1a0 <HAL_JPEG_GetInfo.part.0+0x60>
9000b268:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b26c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b270:	e7cf      	b.n	9000b212 <HAL_JPEG_GetInfo.part.0+0xd2>
9000b272:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000b276:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000b27a:	e7b2      	b.n	9000b1e2 <HAL_JPEG_GetInfo.part.0+0xa2>
9000b27c:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b27e:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b280:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b284:	0c12      	lsrs	r2, r2, #16
9000b286:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b28a:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b28c:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b28e:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b290:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b292:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b294:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b298:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b29c:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b2a0:	ea4f 1215 	mov.w	r2, r5, lsr #4
9000b2a4:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b2a8:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b2ac:	d108      	bne.n	9000b2c0 <HAL_JPEG_GetInfo.part.0+0x180>
9000b2ae:	2d01      	cmp	r5, #1
9000b2b0:	d106      	bne.n	9000b2c0 <HAL_JPEG_GetInfo.part.0+0x180>
9000b2b2:	f016 0f0f 	tst.w	r6, #15
9000b2b6:	bf0c      	ite	eq
9000b2b8:	2401      	moveq	r4, #1
9000b2ba:	2400      	movne	r4, #0
9000b2bc:	0064      	lsls	r4, r4, #1
9000b2be:	e754      	b.n	9000b16a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b2c0:	ea42 020c 	orr.w	r2, r2, ip
9000b2c4:	f012 040f 	ands.w	r4, r2, #15
9000b2c8:	f43f af4f 	beq.w	9000b16a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b2cc:	ea4c 0206 	orr.w	r2, ip, r6
9000b2d0:	f3c2 0203 	ubfx	r2, r2, #0, #4
9000b2d4:	2d03      	cmp	r5, #3
9000b2d6:	bf08      	it	eq
9000b2d8:	2a00      	cmpeq	r2, #0
9000b2da:	bf0c      	ite	eq
9000b2dc:	2401      	moveq	r4, #1
9000b2de:	2400      	movne	r4, #0
9000b2e0:	e743      	b.n	9000b16a <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
9000b2e2:	2001      	movs	r0, #1
}
9000b2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000b2e8:	9002b960 	.word	0x9002b960

9000b2ec <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000b2ec:	2800      	cmp	r0, #0
9000b2ee:	f000 810b 	beq.w	9000b508 <HAL_JPEG_Init+0x21c>
{
9000b2f2:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000b2f4:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000b2f8:	4604      	mov	r4, r0
9000b2fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b2fe:	2b00      	cmp	r3, #0
9000b300:	f000 80fd 	beq.w	9000b4fe <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000b304:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b306:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
9000b308:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b30a:	4880      	ldr	r0, [pc, #512]	; (9000b50c <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b30c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000b310:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b312:	f041 0101 	orr.w	r1, r1, #1
9000b316:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b318:	6811      	ldr	r1, [r2, #0]
9000b31a:	f021 0101 	bic.w	r1, r1, #1
9000b31e:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b320:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b322:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000b326:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000b328:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b32a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000b32e:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000b330:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b332:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000b336:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b338:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000b33a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000b33e:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b340:	4973      	ldr	r1, [pc, #460]	; (9000b510 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b342:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b344:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000b346:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b348:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b34c:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000b350:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000b354:	4b6f      	ldr	r3, [pc, #444]	; (9000b514 <HAL_JPEG_Init+0x228>)
9000b356:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000b35a:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b35e:	486e      	ldr	r0, [pc, #440]	; (9000b518 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b360:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b364:	4b6d      	ldr	r3, [pc, #436]	; (9000b51c <HAL_JPEG_Init+0x230>)
9000b366:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000b36a:	496d      	ldr	r1, [pc, #436]	; (9000b520 <HAL_JPEG_Init+0x234>)
9000b36c:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b370:	4b6c      	ldr	r3, [pc, #432]	; (9000b524 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b372:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b376:	486c      	ldr	r0, [pc, #432]	; (9000b528 <HAL_JPEG_Init+0x23c>)
9000b378:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
9000b37c:	496b      	ldr	r1, [pc, #428]	; (9000b52c <HAL_JPEG_Init+0x240>)
9000b37e:	4b6c      	ldr	r3, [pc, #432]	; (9000b530 <HAL_JPEG_Init+0x244>)
9000b380:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000b384:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000b388:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b38c:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
9000b390:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000b394:	4967      	ldr	r1, [pc, #412]	; (9000b534 <HAL_JPEG_Init+0x248>)
9000b396:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000b398:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b39c:	430b      	orrs	r3, r1
  *address = value;
9000b39e:	4966      	ldr	r1, [pc, #408]	; (9000b538 <HAL_JPEG_Init+0x24c>)
9000b3a0:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000b3a4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b3a8:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
9000b3ac:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b3ae:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b3b2:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000b3b4:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b3b8:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
9000b3bc:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b3be:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b3c2:	ea43 030c 	orr.w	r3, r3, ip
9000b3c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b3ca:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b3ce:	d1eb      	bne.n	9000b3a8 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000b3d0:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3d4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000b3d8:	4856      	ldr	r0, [pc, #344]	; (9000b534 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3da:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000b3dc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000b3de:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000b3e2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000b3e6:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b3ea:	4003      	ands	r3, r0
  *address = value;
9000b3ec:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b3f0:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000b3f4:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
9000b3f8:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b3fc:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000b400:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b404:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000b406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b40a:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000b40e:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b412:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b414:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b416:	4b49      	ldr	r3, [pc, #292]	; (9000b53c <HAL_JPEG_Init+0x250>)
  *address = value;
9000b418:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b41c:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b420:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
9000b424:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000b428:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000b42c:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b430:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000b432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000b436:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000b43a:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000b43e:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b440:	483f      	ldr	r0, [pc, #252]	; (9000b540 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b442:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b444:	4b3f      	ldr	r3, [pc, #252]	; (9000b544 <HAL_JPEG_Init+0x258>)
  *address = value;
9000b446:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b44a:	493f      	ldr	r1, [pc, #252]	; (9000b548 <HAL_JPEG_Init+0x25c>)
9000b44c:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000b450:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b454:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000b458:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000b45c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b460:	493a      	ldr	r1, [pc, #232]	; (9000b54c <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000b462:	b29b      	uxth	r3, r3
9000b464:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b46c:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b470:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000b474:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b476:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b47a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
9000b47c:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b480:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000b484:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b486:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000b48a:	ea43 030e 	orr.w	r3, r3, lr
9000b48e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b492:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b496:	d1eb      	bne.n	9000b470 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000b498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
9000b49c:	4926      	ldr	r1, [pc, #152]	; (9000b538 <HAL_JPEG_Init+0x24c>)
9000b49e:	4620      	mov	r0, r4
9000b4a0:	f7ff fd3a 	bl	9000af18 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b4a4:	b118      	cbz	r0, 9000b4ae <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b4a6:	2301      	movs	r3, #1
    return HAL_ERROR;
9000b4a8:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b4aa:	6523      	str	r3, [r4, #80]	; 0x50
}
9000b4ac:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
9000b4ae:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
9000b4b0:	4620      	mov	r0, r4
9000b4b2:	4926      	ldr	r1, [pc, #152]	; (9000b54c <HAL_JPEG_Init+0x260>)
9000b4b4:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000b4b8:	f7ff fd2e 	bl	9000af18 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b4bc:	2800      	cmp	r0, #0
9000b4be:	d1f2      	bne.n	9000b4a6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000b4c0:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000b4c2:	4620      	mov	r0, r4
9000b4c4:	4922      	ldr	r1, [pc, #136]	; (9000b550 <HAL_JPEG_Init+0x264>)
9000b4c6:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000b4ca:	f7ff fc7b 	bl	9000adc4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000b4ce:	2800      	cmp	r0, #0
9000b4d0:	d1e9      	bne.n	9000b4a6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000b4d2:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000b4d4:	4620      	mov	r0, r4
9000b4d6:	491f      	ldr	r1, [pc, #124]	; (9000b554 <HAL_JPEG_Init+0x268>)
9000b4d8:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000b4dc:	f7ff fc72 	bl	9000adc4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000b4e0:	2800      	cmp	r0, #0
9000b4e2:	d1e0      	bne.n	9000b4a6 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b4e4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b4e6:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b4e8:	6853      	ldr	r3, [r2, #4]
9000b4ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b4ee:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000b4f0:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000b4f2:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b4f4:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
9000b4f8:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000b4fa:	6560      	str	r0, [r4, #84]	; 0x54
}
9000b4fc:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000b4fe:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000b502:	f7f9 fa2f 	bl	90004964 <HAL_JPEG_MspInit>
9000b506:	e6fd      	b.n	9000b304 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
9000b508:	2001      	movs	r0, #1
}
9000b50a:	4770      	bx	lr
9000b50c:	9002b920 	.word	0x9002b920
9000b510:	9002b8a8 	.word	0x9002b8a8
9000b514:	01050100 	.word	0x01050100
9000b518:	0b0a0908 	.word	0x0b0a0908
9000b51c:	07060504 	.word	0x07060504
9000b520:	03020100 	.word	0x03020100
9000b524:	7d010000 	.word	0x7d010000
9000b528:	04040505 	.word	0x04040505
9000b52c:	03040203 	.word	0x03040203
9000b530:	03010200 	.word	0x03010200
9000b534:	ffff0000 	.word	0xffff0000
9000b538:	9002b7f4 	.word	0x9002b7f4
9000b53c:	09080706 	.word	0x09080706
9000b540:	01000404 	.word	0x01000404
9000b544:	04040201 	.word	0x04040201
9000b548:	05070403 	.word	0x05070403
9000b54c:	9002b740 	.word	0x9002b740
9000b550:	9002b904 	.word	0x9002b904
9000b554:	9002b8e8 	.word	0x9002b8e8

9000b558 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b558:	2b00      	cmp	r3, #0
9000b55a:	bf18      	it	ne
9000b55c:	2900      	cmpne	r1, #0
9000b55e:	d03b      	beq.n	9000b5d8 <HAL_JPEG_Decode_DMA+0x80>
{
9000b560:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b562:	fab0 f580 	clz	r5, r0
9000b566:	4604      	mov	r4, r0
9000b568:	096d      	lsrs	r5, r5, #5
9000b56a:	b330      	cbz	r0, 9000b5ba <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
9000b56c:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
9000b570:	f1bc 0f01 	cmp.w	ip, #1
9000b574:	d02e      	beq.n	9000b5d4 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b576:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000b57a:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b57e:	45f4      	cmp	ip, lr
9000b580:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000b584:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b588:	d119      	bne.n	9000b5be <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000b58a:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
9000b58c:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
9000b590:	9b04      	ldr	r3, [sp, #16]
9000b592:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000b594:	2304      	movs	r3, #4
9000b596:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000b59a:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b59c:	f023 030f 	bic.w	r3, r3, #15
9000b5a0:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000b5a2:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b5a4:	f043 030e 	orr.w	r3, r3, #14
9000b5a8:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000b5aa:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
9000b5ac:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
9000b5ae:	f7ff fd3d 	bl	9000b02c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000b5b2:	f7ff fd79 	bl	9000b0a8 <JPEG_DMA_StartProcess>
9000b5b6:	b930      	cbnz	r0, 9000b5c6 <HAL_JPEG_Decode_DMA+0x6e>
}
9000b5b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b5ba:	2001      	movs	r0, #1
}
9000b5bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000b5be:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000b5c0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000b5c4:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b5c6:	2306      	movs	r3, #6
      return HAL_ERROR;
9000b5c8:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000b5ca:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b5ce:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000b5d2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000b5d4:	2002      	movs	r0, #2
}
9000b5d6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b5d8:	2001      	movs	r0, #1
}
9000b5da:	4770      	bx	lr

9000b5dc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b5dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b5de:	f003 030c 	and.w	r3, r3, #12
9000b5e2:	2b0c      	cmp	r3, #12
9000b5e4:	d01a      	beq.n	9000b61c <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b5e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b5e8:	f003 030c 	and.w	r3, r3, #12
9000b5ec:	2b08      	cmp	r3, #8
9000b5ee:	d001      	beq.n	9000b5f4 <HAL_JPEG_Pause+0x18>
}
9000b5f0:	2000      	movs	r0, #0
9000b5f2:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b5f4:	07ca      	lsls	r2, r1, #31
9000b5f6:	d41f      	bmi.n	9000b638 <HAL_JPEG_Pause+0x5c>
9000b5f8:	f04f 3cff 	mov.w	ip, #4294967295
9000b5fc:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b600:	078b      	lsls	r3, r1, #30
9000b602:	d504      	bpl.n	9000b60e <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b604:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b606:	4694      	mov	ip, r2
9000b608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b60c:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b60e:	6802      	ldr	r2, [r0, #0]
}
9000b610:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000b612:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b614:	ea03 030c 	and.w	r3, r3, ip
9000b618:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b61a:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b61c:	07cb      	lsls	r3, r1, #31
9000b61e:	d503      	bpl.n	9000b628 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b620:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b626:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b628:	0789      	lsls	r1, r1, #30
9000b62a:	d5e1      	bpl.n	9000b5f0 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000b62c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b62e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000b632:	6543      	str	r3, [r0, #84]	; 0x54
}
9000b634:	2000      	movs	r0, #0
9000b636:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000b638:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b63a:	f06f 0c06 	mvn.w	ip, #6
9000b63e:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000b642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000b646:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b648:	e7da      	b.n	9000b600 <HAL_JPEG_Pause+0x24>
9000b64a:	bf00      	nop

9000b64c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000b64c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000b64e:	6282      	str	r2, [r0, #40]	; 0x28
}
9000b650:	4770      	bx	lr
9000b652:	bf00      	nop

9000b654 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000b654:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000b656:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000b658:	4770      	bx	lr
9000b65a:	bf00      	nop

9000b65c <HAL_JPEG_EncodeCpltCallback>:
9000b65c:	4770      	bx	lr
9000b65e:	bf00      	nop

9000b660 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b660:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b662:	2101      	movs	r1, #1
{
9000b664:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b666:	6803      	ldr	r3, [r0, #0]
9000b668:	681a      	ldr	r2, [r3, #0]
9000b66a:	f022 0201 	bic.w	r2, r2, #1
9000b66e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b672:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b676:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b678:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b67c:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000b67e:	f043 0304 	orr.w	r3, r3, #4
9000b682:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000b684:	f7f6 f8ea 	bl	9000185c <HAL_JPEG_ErrorCallback>
}
9000b688:	bd08      	pop	{r3, pc}
9000b68a:	bf00      	nop

9000b68c <JPEG_MDMAInCpltCallback>:
{
9000b68c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b68e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b690:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b694:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b696:	6822      	ldr	r2, [r4, #0]
9000b698:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b69a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
9000b69e:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000b6a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b6a2:	400b      	ands	r3, r1
9000b6a4:	2b0c      	cmp	r3, #12
9000b6a6:	d001      	beq.n	9000b6ac <JPEG_MDMAInCpltCallback+0x20>
}
9000b6a8:	b003      	add	sp, #12
9000b6aa:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b6ac:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b6ae:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b6b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b6b2:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b6b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b6b6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b6ba:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b6bc:	1a9b      	subs	r3, r3, r2
9000b6be:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000b6c0:	6a21      	ldr	r1, [r4, #32]
9000b6c2:	f7f6 f863 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000b6c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b6c8:	42ab      	cmp	r3, r5
9000b6ca:	d311      	bcc.n	9000b6f0 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
9000b6cc:	b305      	cbz	r5, 9000b710 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b6ce:	fbb3 f2f5 	udiv	r2, r3, r5
9000b6d2:	fb05 3212 	mls	r2, r5, r2, r3
9000b6d6:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b6d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b6da:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b6dc:	04d1      	lsls	r1, r2, #19
9000b6de:	d400      	bmi.n	9000b6e2 <JPEG_MDMAInCpltCallback+0x56>
9000b6e0:	b963      	cbnz	r3, 9000b6fc <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b6e2:	6822      	ldr	r2, [r4, #0]
9000b6e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b6e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
9000b6ea:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b6ec:	b003      	add	sp, #12
9000b6ee:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000b6f0:	b1cb      	cbz	r3, 9000b726 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000b6f2:	0798      	lsls	r0, r3, #30
9000b6f4:	d119      	bne.n	9000b72a <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b6f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b6f8:	04d2      	lsls	r2, r2, #19
9000b6fa:	d4f2      	bmi.n	9000b6e2 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b6fc:	6822      	ldr	r2, [r4, #0]
9000b6fe:	2501      	movs	r5, #1
9000b700:	69a1      	ldr	r1, [r4, #24]
9000b702:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b704:	3240      	adds	r2, #64	; 0x40
9000b706:	9500      	str	r5, [sp, #0]
9000b708:	f001 f8b0 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b70c:	2800      	cmp	r0, #0
9000b70e:	d0e8      	beq.n	9000b6e2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b710:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b712:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000b714:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b716:	f043 0304 	orr.w	r3, r3, #4
9000b71a:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b71c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000b720:	f7f6 f89c 	bl	9000185c <HAL_JPEG_ErrorCallback>
        return;
9000b724:	e7c0      	b.n	9000b6a8 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000b726:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b728:	e7db      	b.n	9000b6e2 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
9000b72a:	f023 0303 	bic.w	r3, r3, #3
9000b72e:	3304      	adds	r3, #4
9000b730:	e7d2      	b.n	9000b6d8 <JPEG_MDMAInCpltCallback+0x4c>
9000b732:	bf00      	nop

9000b734 <JPEG_DMA_PollResidualData>:
{
9000b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b736:	6802      	ldr	r2, [r0, #0]
9000b738:	2610      	movs	r6, #16
{
9000b73a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b73c:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b73e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000b742:	d11d      	bne.n	9000b780 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000b744:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b746:	06df      	lsls	r7, r3, #27
9000b748:	d51a      	bpl.n	9000b780 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000b74a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b74c:	69e7      	ldr	r7, [r4, #28]
9000b74e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b750:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b752:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000b754:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b756:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000b758:	6a67      	ldr	r7, [r4, #36]	; 0x24
9000b75a:	69e2      	ldr	r2, [r4, #28]
9000b75c:	443a      	add	r2, r7
9000b75e:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000b760:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b762:	69e2      	ldr	r2, [r4, #28]
9000b764:	4402      	add	r2, r0
9000b766:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000b768:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000b76a:	69e2      	ldr	r2, [r4, #28]
9000b76c:	440a      	add	r2, r1
9000b76e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
9000b770:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000b774:	3304      	adds	r3, #4
9000b776:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b778:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b77a:	4293      	cmp	r3, r2
9000b77c:	d021      	beq.n	9000b7c2 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b77e:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
9000b780:	3e01      	subs	r6, #1
9000b782:	d1db      	bne.n	9000b73c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000b784:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b786:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000b788:	06d8      	lsls	r0, r3, #27
9000b78a:	d501      	bpl.n	9000b790 <JPEG_DMA_PollResidualData+0x5c>
9000b78c:	048b      	lsls	r3, r1, #18
9000b78e:	d417      	bmi.n	9000b7c0 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b790:	6813      	ldr	r3, [r2, #0]
9000b792:	f023 0301 	bic.w	r3, r3, #1
9000b796:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
9000b798:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b79a:	b9eb      	cbnz	r3, 9000b7d8 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
9000b79c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000b79e:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b7a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b7a2:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b7a4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b7a8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b7ac:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b7b0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b7b2:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b7b4:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b7b6:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b7ba:	d00a      	beq.n	9000b7d2 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b7bc:	f7ff ff4e 	bl	9000b65c <HAL_JPEG_EncodeCpltCallback>
}
9000b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b7c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b7c4:	4620      	mov	r0, r4
9000b7c6:	69e1      	ldr	r1, [r4, #28]
9000b7c8:	f7f6 f800 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000b7cc:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000b7ce:	6265      	str	r5, [r4, #36]	; 0x24
9000b7d0:	e7d6      	b.n	9000b780 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b7d2:	f7f6 f845 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b7d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b7da:	4620      	mov	r0, r4
9000b7dc:	69e1      	ldr	r1, [r4, #28]
9000b7de:	f7f5 fff5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000b7e2:	2300      	movs	r3, #0
9000b7e4:	6263      	str	r3, [r4, #36]	; 0x24
9000b7e6:	e7d9      	b.n	9000b79c <JPEG_DMA_PollResidualData+0x68>

9000b7e8 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
9000b7e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b7ea:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000b7ee:	d028      	beq.n	9000b842 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b7f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b7f2:	f003 030c 	and.w	r3, r3, #12
9000b7f6:	2b0c      	cmp	r3, #12
{
9000b7f8:	b570      	push	{r4, r5, r6, lr}
9000b7fa:	4604      	mov	r4, r0
9000b7fc:	b082      	sub	sp, #8
9000b7fe:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b800:	d007      	beq.n	9000b812 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b802:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b804:	f003 030c 	and.w	r3, r3, #12
9000b808:	2b08      	cmp	r3, #8
9000b80a:	d037      	beq.n	9000b87c <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000b80c:	2000      	movs	r0, #0
}
9000b80e:	b002      	add	sp, #8
9000b810:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b812:	07c8      	lsls	r0, r1, #31
9000b814:	d417      	bmi.n	9000b846 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b816:	07a9      	lsls	r1, r5, #30
9000b818:	d5f8      	bpl.n	9000b80c <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b81a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b81c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b820:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b822:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b824:	041a      	lsls	r2, r3, #16
9000b826:	d453      	bmi.n	9000b8d0 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b828:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b82a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000b82c:	2a00      	cmp	r2, #0
9000b82e:	d13e      	bne.n	9000b8ae <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b830:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b832:	2206      	movs	r2, #6
          return HAL_ERROR;
9000b834:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b836:	f043 0304 	orr.w	r3, r3, #4
9000b83a:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b83c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
9000b840:	e7e5      	b.n	9000b80e <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000b842:	2001      	movs	r0, #1
}
9000b844:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b846:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b848:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b84a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b84e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b850:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000b852:	2a00      	cmp	r2, #0
9000b854:	d0ec      	beq.n	9000b830 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000b856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b858:	fbb3 f1f2 	udiv	r1, r3, r2
9000b85c:	fb02 3211 	mls	r2, r2, r1, r3
9000b860:	1a9b      	subs	r3, r3, r2
9000b862:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000b864:	2b00      	cmp	r3, #0
9000b866:	d0d6      	beq.n	9000b816 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b868:	6822      	ldr	r2, [r4, #0]
9000b86a:	2601      	movs	r6, #1
9000b86c:	3240      	adds	r2, #64	; 0x40
9000b86e:	9600      	str	r6, [sp, #0]
9000b870:	69a1      	ldr	r1, [r4, #24]
9000b872:	f000 fffb 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b876:	2800      	cmp	r0, #0
9000b878:	d0cd      	beq.n	9000b816 <HAL_JPEG_Resume+0x2e>
9000b87a:	e7d9      	b.n	9000b830 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000b87c:	f011 0101 	ands.w	r1, r1, #1
9000b880:	d013      	beq.n	9000b8aa <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b882:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b884:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000b886:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000b888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b88c:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000b88e:	07ab      	lsls	r3, r5, #30
9000b890:	d504      	bpl.n	9000b89c <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b892:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000b894:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000b896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000b89a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b89c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000b89e:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000b8a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b8a2:	430b      	orrs	r3, r1
9000b8a4:	6313      	str	r3, [r2, #48]	; 0x30
}
9000b8a6:	b002      	add	sp, #8
9000b8a8:	bd70      	pop	{r4, r5, r6, pc}
9000b8aa:	2228      	movs	r2, #40	; 0x28
9000b8ac:	e7ef      	b.n	9000b88e <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b8ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b8b0:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b8b2:	fbb3 f1f2 	udiv	r1, r3, r2
9000b8b6:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b8ba:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b8bc:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b8be:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000b8c0:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b8c2:	9500      	str	r5, [sp, #0]
9000b8c4:	69e2      	ldr	r2, [r4, #28]
9000b8c6:	f000 ffd1 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b8ca:	2800      	cmp	r0, #0
9000b8cc:	d09e      	beq.n	9000b80c <HAL_JPEG_Resume+0x24>
9000b8ce:	e7af      	b.n	9000b830 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
9000b8d0:	4620      	mov	r0, r4
9000b8d2:	f7ff ff2f 	bl	9000b734 <JPEG_DMA_PollResidualData>
9000b8d6:	e799      	b.n	9000b80c <HAL_JPEG_Resume+0x24>

9000b8d8 <JPEG_MDMAOutCpltCallback>:
{
9000b8d8:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b8da:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b8dc:	f248 010c 	movw	r1, #32780	; 0x800c
{
9000b8e0:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b8e2:	6823      	ldr	r3, [r4, #0]
9000b8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b8e6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b8ea:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000b8ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000b8ee:	400a      	ands	r2, r1
9000b8f0:	2a0c      	cmp	r2, #12
9000b8f2:	d001      	beq.n	9000b8f8 <JPEG_MDMAOutCpltCallback+0x20>
}
9000b8f4:	b003      	add	sp, #12
9000b8f6:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000b8f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000b8fa:	0692      	lsls	r2, r2, #26
9000b8fc:	d505      	bpl.n	9000b90a <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b900:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b904:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b906:	b003      	add	sp, #12
9000b908:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b90a:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b90c:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b90e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b910:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b912:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b914:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000b918:	1a9b      	subs	r3, r3, r2
9000b91a:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b91c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b91e:	f7f5 ff55 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b922:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b924:	049b      	lsls	r3, r3, #18
9000b926:	d501      	bpl.n	9000b92c <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b928:	6823      	ldr	r3, [r4, #0]
9000b92a:	e7e8      	b.n	9000b8fe <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b92c:	6821      	ldr	r1, [r4, #0]
9000b92e:	2501      	movs	r5, #1
9000b930:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b932:	69e2      	ldr	r2, [r4, #28]
9000b934:	3144      	adds	r1, #68	; 0x44
9000b936:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000b938:	9500      	str	r5, [sp, #0]
9000b93a:	f000 ff97 	bl	9000c86c <HAL_MDMA_Start_IT>
9000b93e:	2800      	cmp	r0, #0
9000b940:	d0f2      	beq.n	9000b928 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b942:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b944:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
9000b946:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b948:	f043 0304 	orr.w	r3, r3, #4
9000b94c:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b94e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000b952:	f7f5 ff83 	bl	9000185c <HAL_JPEG_ErrorCallback>
          return;
9000b956:	e7cd      	b.n	9000b8f4 <JPEG_MDMAOutCpltCallback+0x1c>

9000b958 <JPEG_MDMAOutAbortCallback>:
{
9000b958:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000b95a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000b95c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b95e:	041a      	lsls	r2, r3, #16
9000b960:	d400      	bmi.n	9000b964 <JPEG_MDMAOutAbortCallback+0xc>
}
9000b962:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000b964:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b966:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b968:	681b      	ldr	r3, [r3, #0]
9000b96a:	695b      	ldr	r3, [r3, #20]
9000b96c:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000b970:	1ad3      	subs	r3, r2, r3
9000b972:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000b974:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b976:	429a      	cmp	r2, r3
9000b978:	d025      	beq.n	9000b9c6 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000b97a:	6822      	ldr	r2, [r4, #0]
9000b97c:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000b97e:	f015 0510 	ands.w	r5, r5, #16
9000b982:	d118      	bne.n	9000b9b6 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
9000b984:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000b986:	bb4b      	cbnz	r3, 9000b9dc <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b988:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000b98a:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b98c:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b98e:	f023 0301 	bic.w	r3, r3, #1
9000b992:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000b994:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b996:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b998:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000b99c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b9a0:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b9a4:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b9a6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000b9a8:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000b9aa:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b9ae:	d012      	beq.n	9000b9d6 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000b9b0:	f7ff fe54 	bl	9000b65c <HAL_JPEG_EncodeCpltCallback>
}
9000b9b4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000b9b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000b9b8:	049b      	lsls	r3, r3, #18
9000b9ba:	d4d2      	bmi.n	9000b962 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000b9bc:	4620      	mov	r0, r4
}
9000b9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000b9c2:	f7ff beb7 	b.w	9000b734 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b9c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9c8:	4620      	mov	r0, r4
9000b9ca:	69e1      	ldr	r1, [r4, #28]
9000b9cc:	f7f5 fefe 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000b9d0:	2300      	movs	r3, #0
9000b9d2:	6263      	str	r3, [r4, #36]	; 0x24
9000b9d4:	e7d1      	b.n	9000b97a <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000b9d6:	f7f5 ff43 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
}
9000b9da:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000b9dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000b9de:	4620      	mov	r0, r4
9000b9e0:	69e1      	ldr	r1, [r4, #28]
9000b9e2:	f7f5 fef3 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b9e6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000b9e8:	6265      	str	r5, [r4, #36]	; 0x24
9000b9ea:	e7cd      	b.n	9000b988 <JPEG_MDMAOutAbortCallback+0x30>

9000b9ec <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b9ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b9ee:	f003 0303 	and.w	r3, r3, #3
9000b9f2:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000b9f4:	6803      	ldr	r3, [r0, #0]
{
9000b9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b9fa:	4604      	mov	r4, r0
9000b9fc:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b9fe:	d01f      	beq.n	9000ba40 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000ba00:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000ba02:	04d7      	lsls	r7, r2, #19
9000ba04:	d407      	bmi.n	9000ba16 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000ba06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ba08:	0796      	lsls	r6, r2, #30
9000ba0a:	f100 811d 	bmi.w	9000bc48 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
9000ba0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ba10:	0750      	lsls	r0, r2, #29
9000ba12:	f100 81b1 	bmi.w	9000bd78 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000ba16:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000ba18:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000ba1c:	d107      	bne.n	9000ba2e <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000ba1e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000ba20:	f016 0608 	ands.w	r6, r6, #8
9000ba24:	d14c      	bne.n	9000bac0 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000ba26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ba28:	06d2      	lsls	r2, r2, #27
9000ba2a:	f100 81e3 	bmi.w	9000bdf4 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000ba2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ba30:	f002 0238 	and.w	r2, r2, #56	; 0x38
9000ba34:	2a20      	cmp	r2, #32
9000ba36:	d01a      	beq.n	9000ba6e <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000ba38:	2000      	movs	r0, #0
}
9000ba3a:	b002      	add	sp, #8
9000ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000ba40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ba42:	0652      	lsls	r2, r2, #25
9000ba44:	d5dc      	bpl.n	9000ba00 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000ba46:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000ba48:	9101      	str	r1, [sp, #4]
9000ba4a:	f7ff fb79 	bl	9000b140 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000ba4e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000ba50:	9901      	ldr	r1, [sp, #4]
9000ba52:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000ba54:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000ba56:	f7f5 fe47 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000ba5a:	6823      	ldr	r3, [r4, #0]
9000ba5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000ba5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000ba62:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000ba64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000ba66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000ba6a:	639a      	str	r2, [r3, #56]	; 0x38
9000ba6c:	e7c8      	b.n	9000ba00 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000ba6e:	681a      	ldr	r2, [r3, #0]
9000ba70:	f022 0201 	bic.w	r2, r2, #1
9000ba74:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000ba76:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000ba78:	f002 020c 	and.w	r2, r2, #12
9000ba7c:	2a08      	cmp	r2, #8
9000ba7e:	f000 81e6 	beq.w	9000be4e <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000ba82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000ba84:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000ba88:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000ba8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ba8c:	2b00      	cmp	r3, #0
9000ba8e:	f040 81e3 	bne.w	9000be58 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000ba92:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000ba94:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000ba96:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000ba98:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000ba9a:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000ba9e:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000baa0:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
9000baa4:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000baa8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000baaa:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000baac:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bab0:	f000 81c9 	beq.w	9000be46 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000bab4:	f7ff fdd2 	bl	9000b65c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000bab8:	4628      	mov	r0, r5
}
9000baba:	b002      	add	sp, #8
9000babc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000bac0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000bac4:	3220      	adds	r2, #32
9000bac6:	4296      	cmp	r6, r2
9000bac8:	f0c0 81e4 	bcc.w	9000be94 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000bacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bace:	69e1      	ldr	r1, [r4, #28]
9000bad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bad2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bad6:	69e2      	ldr	r2, [r4, #28]
9000bad8:	440a      	add	r2, r1
9000bada:	0a19      	lsrs	r1, r3, #8
9000badc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bade:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bae0:	69e2      	ldr	r2, [r4, #28]
9000bae2:	440a      	add	r2, r1
9000bae4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bae6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bae8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000baea:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000baec:	69e2      	ldr	r2, [r4, #28]
9000baee:	440a      	add	r2, r1
9000baf0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000baf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000baf4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000baf6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000baf8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bafa:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bafc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bafe:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb00:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb02:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb04:	69e2      	ldr	r2, [r4, #28]
9000bb06:	440a      	add	r2, r1
9000bb08:	0a19      	lsrs	r1, r3, #8
9000bb0a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb0e:	69e2      	ldr	r2, [r4, #28]
9000bb10:	440a      	add	r2, r1
9000bb12:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb14:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb16:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb18:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb1a:	69e2      	ldr	r2, [r4, #28]
9000bb1c:	440a      	add	r2, r1
9000bb1e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb22:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb24:	3304      	adds	r3, #4
9000bb26:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb28:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb2c:	69e1      	ldr	r1, [r4, #28]
9000bb2e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb30:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb32:	69e2      	ldr	r2, [r4, #28]
9000bb34:	440a      	add	r2, r1
9000bb36:	0a19      	lsrs	r1, r3, #8
9000bb38:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb3c:	69e2      	ldr	r2, [r4, #28]
9000bb3e:	440a      	add	r2, r1
9000bb40:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb42:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb44:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb46:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb48:	69e2      	ldr	r2, [r4, #28]
9000bb4a:	440a      	add	r2, r1
9000bb4c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb50:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb52:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb54:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bb56:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb58:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb5c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb60:	69e2      	ldr	r2, [r4, #28]
9000bb62:	440a      	add	r2, r1
9000bb64:	0a19      	lsrs	r1, r3, #8
9000bb66:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb68:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb6a:	69e2      	ldr	r2, [r4, #28]
9000bb6c:	440a      	add	r2, r1
9000bb6e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb70:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb72:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb74:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb76:	69e2      	ldr	r2, [r4, #28]
9000bb78:	440a      	add	r2, r1
9000bb7a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bb7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bb7e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bb80:	3304      	adds	r3, #4
9000bb82:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bb84:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bb86:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bb88:	69e1      	ldr	r1, [r4, #28]
9000bb8a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bb8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb8e:	69e2      	ldr	r2, [r4, #28]
9000bb90:	440a      	add	r2, r1
9000bb92:	0a19      	lsrs	r1, r3, #8
9000bb94:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bb96:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb98:	69e2      	ldr	r2, [r4, #28]
9000bb9a:	440a      	add	r2, r1
9000bb9c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bb9e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bba0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bba4:	69e2      	ldr	r2, [r4, #28]
9000bba6:	440a      	add	r2, r1
9000bba8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bbaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bbac:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bbae:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bbb0:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bbb2:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bbb4:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bbb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bbb8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bbba:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bbbc:	69e2      	ldr	r2, [r4, #28]
9000bbbe:	440a      	add	r2, r1
9000bbc0:	0a19      	lsrs	r1, r3, #8
9000bbc2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bbc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bbc6:	69e2      	ldr	r2, [r4, #28]
9000bbc8:	440a      	add	r2, r1
9000bbca:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bbcc:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bbce:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bbd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bbd2:	69e2      	ldr	r2, [r4, #28]
9000bbd4:	440a      	add	r2, r1
9000bbd6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bbda:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bbdc:	3304      	adds	r3, #4
9000bbde:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bbe0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bbe2:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bbe4:	69e1      	ldr	r1, [r4, #28]
9000bbe6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bbe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bbea:	69e2      	ldr	r2, [r4, #28]
9000bbec:	440a      	add	r2, r1
9000bbee:	0a19      	lsrs	r1, r3, #8
9000bbf0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bbf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bbf4:	69e2      	ldr	r2, [r4, #28]
9000bbf6:	440a      	add	r2, r1
9000bbf8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bbfa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bbfc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bbfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bc00:	69e2      	ldr	r2, [r4, #28]
9000bc02:	440a      	add	r2, r1
9000bc04:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bc08:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bc0a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bc0c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bc0e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bc10:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bc12:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bc14:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bc16:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bc18:	69e2      	ldr	r2, [r4, #28]
9000bc1a:	440a      	add	r2, r1
9000bc1c:	0a19      	lsrs	r1, r3, #8
9000bc1e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bc20:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bc22:	69e2      	ldr	r2, [r4, #28]
9000bc24:	440a      	add	r2, r1
9000bc26:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bc28:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bc2a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bc2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bc2e:	69e2      	ldr	r2, [r4, #28]
9000bc30:	440a      	add	r2, r1
9000bc32:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bc36:	3304      	adds	r3, #4
9000bc38:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bc3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bc3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000bc3e:	429a      	cmp	r2, r3
9000bc40:	f000 82ae 	beq.w	9000c1a0 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000bc44:	6823      	ldr	r3, [r4, #0]
9000bc46:	e6f2      	b.n	9000ba2e <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000bc48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bc4a:	2a00      	cmp	r2, #0
9000bc4c:	f000 810c 	beq.w	9000be68 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bc50:	6a21      	ldr	r1, [r4, #32]
9000bc52:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bc54:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bc56:	f240 81a4 	bls.w	9000bfa2 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bc5a:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bc5c:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000bc5e:	04cd      	lsls	r5, r1, #19
9000bc60:	f53f aed9 	bmi.w	9000ba16 <JPEG_Process+0x2a>
9000bc64:	2a00      	cmp	r2, #0
9000bc66:	f43f aed6 	beq.w	9000ba16 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000bc6a:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000bc6c:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
9000bc70:	f240 8203 	bls.w	9000c07a <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc74:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000bc76:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc78:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc7a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc7c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc7e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc80:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bc82:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc84:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bc88:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc8a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc8e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bc90:	6a21      	ldr	r1, [r4, #32]
9000bc92:	3104      	adds	r1, #4
9000bc94:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bc96:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc98:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bc9a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bc9c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bc9e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bca0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bca2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bca4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bca8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcaa:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcae:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bcb0:	6a21      	ldr	r1, [r4, #32]
9000bcb2:	3104      	adds	r1, #4
9000bcb4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bcb6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcb8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcba:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcbc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcbe:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcc0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bcc2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcc4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bcc8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcce:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bcd0:	6a21      	ldr	r1, [r4, #32]
9000bcd2:	3104      	adds	r1, #4
9000bcd4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bcd6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcd8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcda:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcdc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcde:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bce0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bce2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bce4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bce8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcea:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcee:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bcf0:	6a21      	ldr	r1, [r4, #32]
9000bcf2:	3104      	adds	r1, #4
9000bcf4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bcf6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcf8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bcfa:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bcfc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bcfe:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd00:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bd02:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd04:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bd08:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd0a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd0e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bd10:	6a21      	ldr	r1, [r4, #32]
9000bd12:	3104      	adds	r1, #4
9000bd14:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bd16:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd18:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd1a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd1c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd1e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd20:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bd22:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd24:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bd28:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd2a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd2e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bd30:	6a21      	ldr	r1, [r4, #32]
9000bd32:	3104      	adds	r1, #4
9000bd34:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bd36:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd38:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd3a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd3c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd3e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd40:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bd42:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd44:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000bd48:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd4a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd4e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bd50:	6a21      	ldr	r1, [r4, #32]
9000bd52:	3104      	adds	r1, #4
9000bd54:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000bd56:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd58:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd5a:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd5c:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000bd5e:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd60:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000bd62:	7849      	ldrb	r1, [r1, #1]
9000bd64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000bd68:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000bd6a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bd6e:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000bd70:	6a22      	ldr	r2, [r4, #32]
9000bd72:	3204      	adds	r2, #4
9000bd74:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000bd76:	e64e      	b.n	9000ba16 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000bd78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bd7a:	2a00      	cmp	r2, #0
9000bd7c:	d074      	beq.n	9000be68 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bd7e:	6a21      	ldr	r1, [r4, #32]
9000bd80:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000bd82:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000bd84:	f200 8164 	bhi.w	9000c050 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000bd88:	428a      	cmp	r2, r1
9000bd8a:	f040 810c 	bne.w	9000bfa6 <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bd8e:	6a21      	ldr	r1, [r4, #32]
9000bd90:	4620      	mov	r0, r4
9000bd92:	f7f5 fcfb 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000bd96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000bd98:	2a04      	cmp	r2, #4
9000bd9a:	d902      	bls.n	9000bda2 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000bd9c:	f022 0203 	bic.w	r2, r2, #3
9000bda0:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000bda2:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000bda4:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000bda6:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bda8:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000bdaa:	04c9      	lsls	r1, r1, #19
9000bdac:	f53f ae33 	bmi.w	9000ba16 <JPEG_Process+0x2a>
9000bdb0:	2a00      	cmp	r2, #0
9000bdb2:	f43f ae30 	beq.w	9000ba16 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000bdb6:	0891      	lsrs	r1, r2, #2
9000bdb8:	f040 8203 	bne.w	9000c1c2 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bdbc:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bdbe:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000bdc0:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bdc2:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000bdc4:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bdc8:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000bdca:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bdcc:	d010      	beq.n	9000bdf0 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bdce:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bdd0:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bdd2:	5c69      	ldrb	r1, [r5, r1]
9000bdd4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000bdd8:	6a21      	ldr	r1, [r4, #32]
9000bdda:	f101 0101 	add.w	r1, r1, #1
9000bdde:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000bde0:	d106      	bne.n	9000bdf0 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bde2:	6a22      	ldr	r2, [r4, #32]
9000bde4:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
9000bde6:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000bde8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000bdec:	3201      	adds	r2, #1
9000bdee:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000bdf0:	6418      	str	r0, [r3, #64]	; 0x40
9000bdf2:	e610      	b.n	9000ba16 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000bdf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bdf6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000bdf8:	3204      	adds	r2, #4
9000bdfa:	4295      	cmp	r5, r2
9000bdfc:	f0c0 80d5 	bcc.w	9000bfaa <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
9000be00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000be02:	69e1      	ldr	r1, [r4, #28]
9000be04:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be06:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000be08:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000be0a:	69e2      	ldr	r2, [r4, #28]
9000be0c:	440a      	add	r2, r1
9000be0e:	0a19      	lsrs	r1, r3, #8
9000be10:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000be12:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000be14:	69e2      	ldr	r2, [r4, #28]
9000be16:	440a      	add	r2, r1
9000be18:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000be1a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000be1c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000be1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000be20:	69e2      	ldr	r2, [r4, #28]
9000be22:	440a      	add	r2, r1
9000be24:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000be26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000be28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000be2a:	3304      	adds	r3, #4
9000be2c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000be2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000be30:	429a      	cmp	r2, r3
9000be32:	f47f af07 	bne.w	9000bc44 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000be36:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be38:	4620      	mov	r0, r4
9000be3a:	69e1      	ldr	r1, [r4, #28]
9000be3c:	f7f5 fcc6 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000be40:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000be42:	6266      	str	r6, [r4, #36]	; 0x24
9000be44:	e5f3      	b.n	9000ba2e <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000be46:	f7f5 fd0b 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000be4a:	4628      	mov	r0, r5
9000be4c:	e5f5      	b.n	9000ba3a <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000be4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000be50:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000be54:	631a      	str	r2, [r3, #48]	; 0x30
9000be56:	e614      	b.n	9000ba82 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000be58:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be5a:	4620      	mov	r0, r4
9000be5c:	69e1      	ldr	r1, [r4, #28]
9000be5e:	f7f5 fcb5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000be62:	2300      	movs	r3, #0
9000be64:	6263      	str	r3, [r4, #36]	; 0x24
9000be66:	e614      	b.n	9000ba92 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000be68:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000be6a:	f002 020c 	and.w	r2, r2, #12
9000be6e:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000be70:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000be72:	f000 80fd 	beq.w	9000c070 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000be76:	f002 020c 	and.w	r2, r2, #12
9000be7a:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000be7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000be7e:	f47f adca 	bne.w	9000ba16 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000be82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000be86:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000be88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000be8a:	f022 0206 	bic.w	r2, r2, #6
9000be8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000be90:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000be92:	e5c0      	b.n	9000ba16 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000be94:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000be96:	4296      	cmp	r6, r2
9000be98:	f67f adc9 	bls.w	9000ba2e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000be9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000be9e:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
9000bea0:	0880      	lsrs	r0, r0, #2
9000bea2:	d020      	beq.n	9000bee6 <JPEG_Process+0x4fa>
9000bea4:	4629      	mov	r1, r5
9000bea6:	e000      	b.n	9000beaa <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000bea8:	6823      	ldr	r3, [r4, #0]
9000beaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000beac:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000beae:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000beb0:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000beb2:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000beb4:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000beb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000beb8:	69e2      	ldr	r2, [r4, #28]
9000beba:	4432      	add	r2, r6
9000bebc:	ea4f 2613 	mov.w	r6, r3, lsr #8
9000bec0:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bec2:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000bec4:	69e2      	ldr	r2, [r4, #28]
9000bec6:	4432      	add	r2, r6
9000bec8:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000becc:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bed0:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bed2:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000bed4:	69e2      	ldr	r2, [r4, #28]
9000bed6:	4432      	add	r2, r6
9000bed8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000beda:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bedc:	f103 0304 	add.w	r3, r3, #4
9000bee0:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000bee2:	d1e1      	bne.n	9000bea8 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000bee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bee8:	42b3      	cmp	r3, r6
9000beea:	f000 8161 	beq.w	9000c1b0 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000beee:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bef2:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000bef4:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
9000bef8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000befa:	d00e      	beq.n	9000bf1a <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000befc:	f005 0303 	and.w	r3, r5, #3
9000bf00:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf02:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000bf04:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000bf06:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000bf08:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000bf0a:	fa27 f303 	lsr.w	r3, r7, r3
9000bf0e:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000bf10:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf12:	f103 0301 	add.w	r3, r3, #1
9000bf16:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000bf18:	d1f0      	bne.n	9000befc <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000bf1a:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bf1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf20:	69e1      	ldr	r1, [r4, #28]
9000bf22:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000bf24:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bf28:	f7f5 fc50 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bf2c:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000bf2e:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000bf32:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bf34:	f63f ae86 	bhi.w	9000bc44 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf38:	ea4f 03c8 	mov.w	r3, r8, lsl #3
9000bf3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf3e:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000bf40:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf44:	fa27 f003 	lsr.w	r0, r7, r3
9000bf48:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
9000bf4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf4c:	f102 0201 	add.w	r2, r2, #1
9000bf50:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bf52:	f43f ae77 	beq.w	9000bc44 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf56:	f103 0208 	add.w	r2, r3, #8
9000bf5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf5c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000bf5e:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf62:	fa27 f202 	lsr.w	r2, r7, r2
9000bf66:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
9000bf68:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf6a:	f102 0201 	add.w	r2, r2, #1
9000bf6e:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bf70:	f108 0202 	add.w	r2, r8, #2
9000bf74:	f43f ae66 	beq.w	9000bc44 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf78:	3310      	adds	r3, #16
9000bf7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf7c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000bf7e:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf80:	fa27 f303 	lsr.w	r3, r7, r3
9000bf84:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000bf86:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf88:	f103 0301 	add.w	r3, r3, #1
9000bf8c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bf8e:	f47f ae59 	bne.w	9000bc44 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000bf92:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf94:	0e3f      	lsrs	r7, r7, #24
9000bf96:	69e2      	ldr	r2, [r4, #28]
9000bf98:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000bf9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bf9c:	3301      	adds	r3, #1
9000bf9e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000bfa0:	e650      	b.n	9000bc44 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000bfa2:	428a      	cmp	r2, r1
9000bfa4:	d056      	beq.n	9000c054 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000bfa6:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bfa8:	e535      	b.n	9000ba16 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000bfaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bfac:	4295      	cmp	r5, r2
9000bfae:	f67f ad3e 	bls.w	9000ba2e <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000bfb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000bfb4:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000bfb6:	0880      	lsrs	r0, r0, #2
9000bfb8:	d020      	beq.n	9000bffc <JPEG_Process+0x610>
9000bfba:	4631      	mov	r1, r6
9000bfbc:	e000      	b.n	9000bfc0 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000bfbe:	6823      	ldr	r3, [r4, #0]
9000bfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000bfc2:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bfc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bfc6:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000bfc8:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bfca:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bfcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bfce:	69e2      	ldr	r2, [r4, #28]
9000bfd0:	442a      	add	r2, r5
9000bfd2:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000bfd6:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bfda:	69e2      	ldr	r2, [r4, #28]
9000bfdc:	442a      	add	r2, r5
9000bfde:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfe2:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfe6:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfe8:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000bfea:	69e2      	ldr	r2, [r4, #28]
9000bfec:	442a      	add	r2, r5
9000bfee:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bff2:	f103 0304 	add.w	r3, r3, #4
9000bff6:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000bff8:	d1e1      	bne.n	9000bfbe <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000bffa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000bffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bffe:	429d      	cmp	r5, r3
9000c000:	f000 80d6 	beq.w	9000c1b0 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000c004:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000c008:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000c00a:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000c00e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000c010:	d00e      	beq.n	9000c030 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c012:	f006 0303 	and.w	r3, r6, #3
9000c016:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c018:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000c01a:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c01c:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000c01e:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c020:	fa27 f303 	lsr.w	r3, r7, r3
9000c024:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c028:	f103 0301 	add.w	r3, r3, #1
9000c02c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000c02e:	d1f0      	bne.n	9000c012 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
9000c030:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c034:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c036:	69e1      	ldr	r1, [r4, #28]
9000c038:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000c03a:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c03e:	f7f5 fbc5 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c042:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000c044:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
9000c048:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c04a:	f67f af75 	bls.w	9000bf38 <JPEG_Process+0x54c>
9000c04e:	e5f9      	b.n	9000bc44 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000c050:	1a52      	subs	r2, r2, r1
9000c052:	e6a9      	b.n	9000bda8 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000c054:	6a21      	ldr	r1, [r4, #32]
9000c056:	4620      	mov	r0, r4
9000c058:	f7f5 fb98 	bl	9000178c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000c05c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c05e:	2a04      	cmp	r2, #4
9000c060:	d902      	bls.n	9000c068 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000c062:	f022 0203 	bic.w	r2, r2, #3
9000c066:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000c068:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c06a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000c06c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000c06e:	e5f5      	b.n	9000bc5c <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000c070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000c074:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c076:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000c078:	e4cd      	b.n	9000ba16 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000c07a:	2a03      	cmp	r2, #3
9000c07c:	f240 80a4 	bls.w	9000c1c8 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
9000c080:	2900      	cmp	r1, #0
9000c082:	f43f acc8 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c086:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c088:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c08a:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c08c:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c090:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c092:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c094:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c096:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c09a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c09c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c0a0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0a4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0a8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c0aa:	6a20      	ldr	r0, [r4, #32]
9000c0ac:	f100 0004 	add.w	r0, r0, #4
9000c0b0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0b2:	f43f acb0 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c0b6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0b8:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0ba:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0be:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0c0:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0c2:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0c4:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0c8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0ca:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c0ce:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0d2:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0d6:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c0d8:	6a20      	ldr	r0, [r4, #32]
9000c0da:	f100 0004 	add.w	r0, r0, #4
9000c0de:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0e0:	f43f ac99 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c0e4:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c0e6:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0e8:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0ec:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0ee:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0f0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0f2:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0f6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0f8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c0fc:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c100:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c104:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c106:	6a20      	ldr	r0, [r4, #32]
9000c108:	f100 0004 	add.w	r0, r0, #4
9000c10c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c10e:	f43f ac82 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c112:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c114:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c116:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c11a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c11c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c11e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c120:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c124:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c126:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c12a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c12e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c132:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c134:	6a20      	ldr	r0, [r4, #32]
9000c136:	f100 0004 	add.w	r0, r0, #4
9000c13a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c13c:	f43f ac6b 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c140:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c142:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c144:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c148:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c14a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c14c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c14e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c152:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c154:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c158:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c15c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c160:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c162:	6a20      	ldr	r0, [r4, #32]
9000c164:	f100 0004 	add.w	r0, r0, #4
9000c168:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c16a:	f43f ac54 	beq.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c16e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c170:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c172:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c176:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c178:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c17a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c17c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c180:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c182:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c186:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c18a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c18e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c190:	6a20      	ldr	r0, [r4, #32]
9000c192:	f100 0004 	add.w	r0, r0, #4
9000c196:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c198:	f47f ac3d 	bne.w	9000ba16 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c19c:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c19e:	e5db      	b.n	9000bd58 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c1a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c1a2:	4620      	mov	r0, r4
9000c1a4:	69e1      	ldr	r1, [r4, #28]
9000c1a6:	f7f5 fb11 	bl	900017cc <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c1aa:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c1ac:	6265      	str	r5, [r4, #36]	; 0x24
9000c1ae:	e43e      	b.n	9000ba2e <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c1b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c1b2:	4620      	mov	r0, r4
9000c1b4:	69e1      	ldr	r1, [r4, #28]
9000c1b6:	f7f5 fb09 	bl	900017cc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c1ba:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c1bc:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c1be:	6262      	str	r2, [r4, #36]	; 0x24
9000c1c0:	e435      	b.n	9000ba2e <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000c1c2:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c1c4:	69a0      	ldr	r0, [r4, #24]
9000c1c6:	e5c7      	b.n	9000bd58 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1c8:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1ca:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000c1cc:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1ce:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000c1d0:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1d4:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000c1d6:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1d8:	d010      	beq.n	9000c1fc <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1da:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1dc:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1de:	5c28      	ldrb	r0, [r5, r0]
9000c1e0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000c1e4:	6a20      	ldr	r0, [r4, #32]
9000c1e6:	f100 0001 	add.w	r0, r0, #1
9000c1ea:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1ec:	d106      	bne.n	9000c1fc <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1ee:	6a22      	ldr	r2, [r4, #32]
9000c1f0:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000c1f2:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000c1f8:	3201      	adds	r2, #1
9000c1fa:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000c1fc:	6419      	str	r1, [r3, #64]	; 0x40
9000c1fe:	e40a      	b.n	9000ba16 <JPEG_Process+0x2a>

9000c200 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000c200:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000c204:	3b03      	subs	r3, #3
9000c206:	2b01      	cmp	r3, #1
9000c208:	d900      	bls.n	9000c20c <HAL_JPEG_IRQHandler+0xc>
9000c20a:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c20c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c20e:	f003 030c 	and.w	r3, r3, #12
9000c212:	2b08      	cmp	r3, #8
{
9000c214:	b530      	push	{r4, r5, lr}
9000c216:	4604      	mov	r4, r0
9000c218:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c21a:	d006      	beq.n	9000c22a <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000c21c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c21e:	f003 030c 	and.w	r3, r3, #12
9000c222:	2b0c      	cmp	r3, #12
9000c224:	d006      	beq.n	9000c234 <HAL_JPEG_IRQHandler+0x34>
}
9000c226:	b003      	add	sp, #12
9000c228:	bd30      	pop	{r4, r5, pc}
9000c22a:	b003      	add	sp, #12
9000c22c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000c230:	f7ff bbdc 	b.w	9000b9ec <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c234:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c236:	f003 0303 	and.w	r3, r3, #3
9000c23a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c23c:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c23e:	d045      	beq.n	9000c2cc <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000c240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c242:	0692      	lsls	r2, r2, #26
9000c244:	d5ef      	bpl.n	9000c226 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c246:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c248:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c24a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000c24e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c250:	681a      	ldr	r2, [r3, #0]
9000c252:	f022 0201 	bic.w	r2, r2, #1
9000c256:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000c258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c25a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000c25e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000c260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c262:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000c266:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c268:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c26c:	2b02      	cmp	r3, #2
9000c26e:	d052      	beq.n	9000c316 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000c270:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000c272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c276:	2b02      	cmp	r3, #2
9000c278:	d03f      	beq.n	9000c2fa <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000c27a:	6803      	ldr	r3, [r0, #0]
9000c27c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000c27e:	695b      	ldr	r3, [r3, #20]
9000c280:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000c284:	1ad3      	subs	r3, r2, r3
9000c286:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000c288:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c28a:	429a      	cmp	r2, r3
9000c28c:	d046      	beq.n	9000c31c <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000c28e:	6822      	ldr	r2, [r4, #0]
9000c290:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000c292:	f015 0510 	ands.w	r5, r5, #16
9000c296:	d135      	bne.n	9000c304 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000c298:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c29a:	2b00      	cmp	r3, #0
9000c29c:	d149      	bne.n	9000c332 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c29e:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000c2a0:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c2a2:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c2a4:	f023 0301 	bic.w	r3, r3, #1
9000c2a8:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000c2aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c2ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c2ae:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000c2b2:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c2b6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c2ba:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c2bc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c2be:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c2c0:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c2c4:	d032      	beq.n	9000c32c <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000c2c6:	f7ff f9c9 	bl	9000b65c <HAL_JPEG_EncodeCpltCallback>
9000c2ca:	e7ac      	b.n	9000c226 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c2cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c2ce:	0651      	lsls	r1, r2, #25
9000c2d0:	d5b6      	bpl.n	9000c240 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000c2d2:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000c2d4:	9101      	str	r1, [sp, #4]
9000c2d6:	f7fe ff33 	bl	9000b140 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000c2da:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c2dc:	9901      	ldr	r1, [sp, #4]
9000c2de:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000c2e0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c2e2:	f7f5 fa01 	bl	900016e8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000c2e6:	6823      	ldr	r3, [r4, #0]
9000c2e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c2ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000c2ee:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000c2f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c2f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000c2f6:	639a      	str	r2, [r3, #56]	; 0x38
9000c2f8:	e7a2      	b.n	9000c240 <HAL_JPEG_IRQHandler+0x40>
}
9000c2fa:	b003      	add	sp, #12
9000c2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000c300:	f000 bb30 	b.w	9000c964 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000c304:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000c306:	049b      	lsls	r3, r3, #18
9000c308:	d48d      	bmi.n	9000c226 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000c30a:	4620      	mov	r0, r4
}
9000c30c:	b003      	add	sp, #12
9000c30e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000c312:	f7ff ba0f 	b.w	9000b734 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000c316:	f000 fb25 	bl	9000c964 <HAL_MDMA_Abort_IT>
9000c31a:	e7a9      	b.n	9000c270 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c31c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c31e:	4620      	mov	r0, r4
9000c320:	69e1      	ldr	r1, [r4, #28]
9000c322:	f7f5 fa53 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000c326:	2300      	movs	r3, #0
9000c328:	6263      	str	r3, [r4, #36]	; 0x24
9000c32a:	e7b0      	b.n	9000c28e <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c32c:	f7f5 fa98 	bl	90001860 <HAL_JPEG_DecodeCpltCallback>
9000c330:	e779      	b.n	9000c226 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c332:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c334:	4620      	mov	r0, r4
9000c336:	69e1      	ldr	r1, [r4, #28]
9000c338:	f7f5 fa48 	bl	900017cc <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c33c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c33e:	6265      	str	r5, [r4, #36]	; 0x24
9000c340:	e7ad      	b.n	9000c29e <HAL_JPEG_IRQHandler+0x9e>
9000c342:	bf00      	nop

9000c344 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000c344:	2800      	cmp	r0, #0
9000c346:	d067      	beq.n	9000c418 <HAL_LTDC_Init+0xd4>
{
9000c348:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000c34a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000c34e:	4604      	mov	r4, r0
9000c350:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000c354:	2b00      	cmp	r3, #0
9000c356:	d05a      	beq.n	9000c40e <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c358:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c35a:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c35c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c360:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c364:	4302      	orrs	r2, r0
9000c366:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c368:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c36a:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c36c:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c36e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c372:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c374:	4929      	ldr	r1, [pc, #164]	; (9000c41c <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c376:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c378:	6998      	ldr	r0, [r3, #24]
9000c37a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000c37c:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c37e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c380:	689a      	ldr	r2, [r3, #8]
9000c382:	400a      	ands	r2, r1
9000c384:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000c386:	689a      	ldr	r2, [r3, #8]
9000c388:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c38c:	69a0      	ldr	r0, [r4, #24]
9000c38e:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000c390:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000c392:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000c394:	68da      	ldr	r2, [r3, #12]
9000c396:	400a      	ands	r2, r1
9000c398:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c39a:	68da      	ldr	r2, [r3, #12]
9000c39c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c3a0:	6a20      	ldr	r0, [r4, #32]
9000c3a2:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000c3a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c3a6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000c3a8:	691a      	ldr	r2, [r3, #16]
9000c3aa:	400a      	ands	r2, r1
9000c3ac:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c3ae:	691a      	ldr	r2, [r3, #16]
9000c3b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c3b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c3b6:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000c3b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c3ba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000c3bc:	695a      	ldr	r2, [r3, #20]
9000c3be:	400a      	ands	r2, r1
9000c3c0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000c3c2:	695a      	ldr	r2, [r3, #20]
9000c3c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000c3c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000c3ca:	430a      	orrs	r2, r1
9000c3cc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000c3d0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c3d4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000c3d8:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c3dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c3de:	6add      	ldr	r5, [r3, #44]	; 0x2c
9000c3e0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000c3e4:	432a      	orrs	r2, r5
9000c3e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c3ea:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c3ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000c3f0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000c3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c3f4:	f042 0206 	orr.w	r2, r2, #6
9000c3f8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000c3fa:	699a      	ldr	r2, [r3, #24]
9000c3fc:	f042 0201 	orr.w	r2, r2, #1
9000c400:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000c402:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c404:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000c408:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000c40c:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000c40e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000c412:	f7f8 fb33 	bl	90004a7c <HAL_LTDC_MspInit>
9000c416:	e79f      	b.n	9000c358 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000c418:	2001      	movs	r0, #1
}
9000c41a:	4770      	bx	lr
9000c41c:	f000f800 	.word	0xf000f800

9000c420 <HAL_LTDC_ErrorCallback>:
9000c420:	4770      	bx	lr
9000c422:	bf00      	nop

9000c424 <HAL_LTDC_ReloadEventCallback>:
9000c424:	4770      	bx	lr
9000c426:	bf00      	nop

9000c428 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c428:	6803      	ldr	r3, [r0, #0]
{
9000c42a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c42c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000c42e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000c430:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000c432:	076a      	lsls	r2, r5, #29
9000c434:	d501      	bpl.n	9000c43a <HAL_LTDC_IRQHandler+0x12>
9000c436:	0771      	lsls	r1, r6, #29
9000c438:	d41d      	bmi.n	9000c476 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000c43a:	07aa      	lsls	r2, r5, #30
9000c43c:	d501      	bpl.n	9000c442 <HAL_LTDC_IRQHandler+0x1a>
9000c43e:	07b3      	lsls	r3, r6, #30
9000c440:	d42d      	bmi.n	9000c49e <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000c442:	07e8      	lsls	r0, r5, #31
9000c444:	d501      	bpl.n	9000c44a <HAL_LTDC_IRQHandler+0x22>
9000c446:	07f1      	lsls	r1, r6, #31
9000c448:	d440      	bmi.n	9000c4cc <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000c44a:	072a      	lsls	r2, r5, #28
9000c44c:	d501      	bpl.n	9000c452 <HAL_LTDC_IRQHandler+0x2a>
9000c44e:	0733      	lsls	r3, r6, #28
9000c450:	d400      	bmi.n	9000c454 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000c452:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c454:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c456:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000c458:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000c45a:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c45c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c45e:	f022 0208 	bic.w	r2, r2, #8
9000c462:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c464:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c466:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000c468:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c46c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c470:	f7ff ffd8 	bl	9000c424 <HAL_LTDC_ReloadEventCallback>
}
9000c474:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000c476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c478:	f022 0204 	bic.w	r2, r2, #4
9000c47c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000c47e:	2204      	movs	r2, #4
9000c480:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000c482:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000c486:	f043 0301 	orr.w	r3, r3, #1
9000c48a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c48e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c490:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c494:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c498:	f7ff ffc2 	bl	9000c420 <HAL_LTDC_ErrorCallback>
9000c49c:	e7cd      	b.n	9000c43a <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c49e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000c4a0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c4a4:	f022 0202 	bic.w	r2, r2, #2
9000c4a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000c4aa:	2202      	movs	r2, #2
9000c4ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c4ae:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000c4b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000c4b4:	f043 0302 	orr.w	r3, r3, #2
9000c4b8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c4bc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c4be:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c4c2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c4c6:	f7ff ffab 	bl	9000c420 <HAL_LTDC_ErrorCallback>
9000c4ca:	e7ba      	b.n	9000c442 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c4cc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000c4ce:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c4d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c4d2:	f022 0201 	bic.w	r2, r2, #1
9000c4d6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000c4d8:	2201      	movs	r2, #1
9000c4da:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000c4dc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000c4de:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c4e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000c4e6:	f7f6 f9ef 	bl	900028c8 <HAL_LTDC_LineEventCallback>
9000c4ea:	e7ae      	b.n	9000c44a <HAL_LTDC_IRQHandler+0x22>

9000c4ec <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000c4ec:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000c4f0:	2b01      	cmp	r3, #1
9000c4f2:	f000 80c0 	beq.w	9000c676 <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c4f6:	2302      	movs	r3, #2
{
9000c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c4fc:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c500:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c504:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000c508:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c50a:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c50e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c510:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c514:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c516:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000c51a:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c51c:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000c520:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c522:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c526:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c52a:	f8df a160 	ldr.w	sl, [pc, #352]	; 9000c68c <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c52e:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000c532:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000c536:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c53a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c53e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c540:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c542:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c548:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c54c:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c54e:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c550:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c554:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c556:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c558:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c55c:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000c560:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c562:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c564:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000c568:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c56c:	440b      	add	r3, r1
9000c56e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c572:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c576:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c57a:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c57e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c582:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c586:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c588:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c58c:	68ab      	ldr	r3, [r5, #8]
9000c58e:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000c592:	3301      	adds	r3, #1
9000c594:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000c598:	4403      	add	r3, r0
9000c59a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c59e:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c5a0:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000c5a4:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000c5a8:	f023 0307 	bic.w	r3, r3, #7
9000c5ac:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c5b0:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c5b4:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000c5b8:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000c5ba:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000c5be:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000c5c2:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000c5c6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000c5ca:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000c5ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000c5d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000c5d6:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000c5da:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000c5de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000c5e2:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000c5e6:	696b      	ldr	r3, [r5, #20]
9000c5e8:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c5ec:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c5f0:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c5f2:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c5f6:	6a28      	ldr	r0, [r5, #32]
9000c5f8:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c5fa:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000c5fe:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000c602:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000c606:	2300      	movs	r3, #0
9000c608:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000c60c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000c60e:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c612:	bb59      	cbnz	r1, 9000c66c <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000c614:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c616:	1abf      	subs	r7, r7, r2
9000c618:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000c61a:	fb03 f707 	mul.w	r7, r3, r7
9000c61e:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c622:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c624:	3707      	adds	r7, #7
9000c626:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000c62a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000c62e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000c632:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000c636:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000c63a:	4b12      	ldr	r3, [pc, #72]	; (9000c684 <HAL_LTDC_ConfigLayer+0x198>)
9000c63c:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000c640:	400b      	ands	r3, r1
9000c642:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000c646:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c64a:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000c64c:	f859 3006 	ldr.w	r3, [r9, r6]
9000c650:	4313      	orrs	r3, r2
9000c652:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000c656:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000c658:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000c65c:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000c65e:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000c662:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000c666:	b003      	add	sp, #12
9000c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000c66c:	3901      	subs	r1, #1
9000c66e:	2906      	cmp	r1, #6
9000c670:	d903      	bls.n	9000c67a <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000c672:	2301      	movs	r3, #1
9000c674:	e7cf      	b.n	9000c616 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000c676:	2002      	movs	r0, #2
}
9000c678:	4770      	bx	lr
9000c67a:	4b03      	ldr	r3, [pc, #12]	; (9000c688 <HAL_LTDC_ConfigLayer+0x19c>)
9000c67c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
9000c680:	e7c9      	b.n	9000c616 <HAL_LTDC_ConfigLayer+0x12a>
9000c682:	bf00      	nop
9000c684:	fffff800 	.word	0xfffff800
9000c688:	9002b9a0 	.word	0x9002b9a0
9000c68c:	fffff8f8 	.word	0xfffff8f8

9000c690 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000c690:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000c694:	2a01      	cmp	r2, #1
9000c696:	d019      	beq.n	9000c6cc <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c698:	6802      	ldr	r2, [r0, #0]
9000c69a:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c69c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000c69e:	f04f 0c00 	mov.w	ip, #0
{
9000c6a2:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c6a4:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c6a8:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000c6aa:	4c09      	ldr	r4, [pc, #36]	; (9000c6d0 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c6ac:	f020 0001 	bic.w	r0, r0, #1
9000c6b0:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c6b2:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000c6b4:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000c6b6:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000c6b8:	4301      	orrs	r1, r0
9000c6ba:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000c6bc:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000c6c0:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000c6c2:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000c6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c6ca:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000c6cc:	2002      	movs	r0, #2
}
9000c6ce:	4770      	bx	lr
9000c6d0:	50001000 	.word	0x50001000

9000c6d4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000c6d4:	b538      	push	{r3, r4, r5, lr}
9000c6d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000c6d8:	f7fd f972 	bl	900099c0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000c6dc:	2c00      	cmp	r4, #0
9000c6de:	d05a      	beq.n	9000c796 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000c6e0:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c6e2:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000c6e4:	2100      	movs	r1, #0
9000c6e6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000c6e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000c6ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000c6f0:	68da      	ldr	r2, [r3, #12]
9000c6f2:	f022 0201 	bic.w	r2, r2, #1
9000c6f6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c6f8:	e005      	b.n	9000c706 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000c6fa:	f7fd f961 	bl	900099c0 <HAL_GetTick>
9000c6fe:	1b43      	subs	r3, r0, r5
9000c700:	2b05      	cmp	r3, #5
9000c702:	d841      	bhi.n	9000c788 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000c704:	6823      	ldr	r3, [r4, #0]
9000c706:	68da      	ldr	r2, [r3, #12]
9000c708:	07d2      	lsls	r2, r2, #31
9000c70a:	d4f6      	bmi.n	9000c6fa <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c70c:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000c710:	69e0      	ldr	r0, [r4, #28]
9000c712:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c714:	68e1      	ldr	r1, [r4, #12]
9000c716:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c718:	4302      	orrs	r2, r0
9000c71a:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c71c:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000c71e:	4302      	orrs	r2, r0
9000c720:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c722:	4302      	orrs	r2, r0
9000c724:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000c726:	4302      	orrs	r2, r0
9000c728:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000c72a:	4302      	orrs	r2, r0
9000c72c:	68a0      	ldr	r0, [r4, #8]
9000c72e:	4302      	orrs	r2, r0
9000c730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000c732:	3801      	subs	r0, #1
9000c734:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c738:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000c73a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c73c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000c740:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c742:	d103      	bne.n	9000c74c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000c744:	691a      	ldr	r2, [r3, #16]
9000c746:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000c74a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000c74c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c74e:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000c750:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000c752:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000c754:	db30      	blt.n	9000c7b8 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000c756:	b292      	uxth	r2, r2
9000c758:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000c75a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000c75c:	2a00      	cmp	r2, #0
9000c75e:	db1c      	blt.n	9000c79a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c760:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c762:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c766:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c76a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c76c:	d021      	beq.n	9000c7b2 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000c76e:	b2c0      	uxtb	r0, r0
9000c770:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000c772:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000c774:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000c776:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000c778:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c77a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000c77c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000c77e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000c782:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000c786:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c788:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c78a:	2303      	movs	r3, #3
      return HAL_ERROR;
9000c78c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000c78e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000c790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000c794:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000c796:	2001      	movs	r0, #1
}
9000c798:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c79a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000c79c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c79e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000c7a2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000c7a6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000c7a8:	6a19      	ldr	r1, [r3, #32]
9000c7aa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000c7ae:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000c7b0:	d1dd      	bne.n	9000c76e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000c7b2:	2200      	movs	r2, #0
9000c7b4:	629a      	str	r2, [r3, #40]	; 0x28
9000c7b6:	e7dc      	b.n	9000c772 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c7b8:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000c7ba:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c7bc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c7c0:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000c7c2:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000c7c4:	621a      	str	r2, [r3, #32]
9000c7c6:	e7c8      	b.n	9000c75a <HAL_MDMA_Init+0x86>

9000c7c8 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000c7c8:	b1f8      	cbz	r0, 9000c80a <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000c7ca:	6802      	ldr	r2, [r0, #0]
9000c7cc:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000c7ce:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000c7d0:	68d0      	ldr	r0, [r2, #12]
{
9000c7d2:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000c7d4:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c7d8:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000c7da:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000c7dc:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000c7de:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000c7e0:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000c7e2:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000c7e4:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000c7e6:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000c7e8:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000c7ea:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000c7ec:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000c7ee:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000c7f0:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000c7f2:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c7f4:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000c7f6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000c7fa:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000c7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000c802:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000c804:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000c808:	4770      	bx	lr
    return HAL_ERROR;
9000c80a:	2001      	movs	r0, #1
}
9000c80c:	4770      	bx	lr
9000c80e:	bf00      	nop

9000c810 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000c810:	b310      	cbz	r0, 9000c858 <HAL_MDMA_ConfigPostRequestMask+0x48>
9000c812:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
9000c814:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c818:	2801      	cmp	r0, #1
9000c81a:	d01f      	beq.n	9000c85c <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
9000c81c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000c81e:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c822:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
9000c826:	45f4      	cmp	ip, lr
9000c828:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
9000c82c:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c830:	d004      	beq.n	9000c83c <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000c832:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
9000c834:	2200      	movs	r2, #0
9000c836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
9000c83a:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000c83c:	681d      	ldr	r5, [r3, #0]
9000c83e:	692c      	ldr	r4, [r5, #16]
9000c840:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000c844:	d1f6      	bne.n	9000c834 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
9000c846:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000c848:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c84a:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000c84c:	b941      	cbnz	r1, 9000c860 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c84e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c852:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000c854:	612a      	str	r2, [r5, #16]
9000c856:	e7ed      	b.n	9000c834 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
9000c858:	2001      	movs	r0, #1
9000c85a:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000c85c:	2002      	movs	r0, #2
}
9000c85e:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c860:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000c864:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000c866:	612a      	str	r2, [r5, #16]
9000c868:	e7e4      	b.n	9000c834 <HAL_MDMA_ConfigPostRequestMask+0x24>
9000c86a:	bf00      	nop

9000c86c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000c86c:	2800      	cmp	r0, #0
9000c86e:	d06f      	beq.n	9000c950 <HAL_MDMA_Start_IT+0xe4>
9000c870:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000c872:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000c876:	2801      	cmp	r0, #1
9000c878:	d072      	beq.n	9000c960 <HAL_MDMA_Start_IT+0xf4>
9000c87a:	2001      	movs	r0, #1
9000c87c:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000c880:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000c884:	2801      	cmp	r0, #1
9000c886:	d004      	beq.n	9000c892 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000c888:	2300      	movs	r3, #0
    return HAL_BUSY;
9000c88a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000c88c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000c890:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c892:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c894:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c898:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000c89c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c89e:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000c8a0:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c8a4:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000c8a8:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c8ac:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000c8b0:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c8b4:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000c8b8:	68e5      	ldr	r5, [r4, #12]
9000c8ba:	f025 0501 	bic.w	r5, r5, #1
9000c8be:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000c8c0:	6965      	ldr	r5, [r4, #20]
9000c8c2:	ea00 0005 	and.w	r0, r0, r5
9000c8c6:	ea40 0003 	orr.w	r0, r0, r3
9000c8ca:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000c8cc:	6963      	ldr	r3, [r4, #20]
9000c8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000c8d2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000c8d6:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000c8d8:	f04f 031f 	mov.w	r3, #31
9000c8dc:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000c8de:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000c8e0:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000c8e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c8e4:	bf0c      	ite	eq
9000c8e6:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c8ea:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000c8ee:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000c8f2:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000c8f6:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000c8f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000c8fa:	bf0c      	ite	eq
9000c8fc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000c900:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000c904:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000c906:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000c90a:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000c90c:	68e3      	ldr	r3, [r4, #12]
9000c90e:	f043 0306 	orr.w	r3, r3, #6
9000c912:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000c914:	b11a      	cbz	r2, 9000c91e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000c916:	68e3      	ldr	r3, [r4, #12]
9000c918:	f043 0310 	orr.w	r3, r3, #16
9000c91c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000c91e:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000c922:	b11b      	cbz	r3, 9000c92c <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000c924:	68e3      	ldr	r3, [r4, #12]
9000c926:	f043 0308 	orr.w	r3, r3, #8
9000c92a:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000c92c:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000c930:	b11b      	cbz	r3, 9000c93a <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000c932:	68e3      	ldr	r3, [r4, #12]
9000c934:	f043 0320 	orr.w	r3, r3, #32
9000c938:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000c93a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c93c:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000c940:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c944:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000c948:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000c94a:	d003      	beq.n	9000c954 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000c94c:	2000      	movs	r0, #0
}
9000c94e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000c950:	2001      	movs	r0, #1
9000c952:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c954:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000c956:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000c958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000c95c:	60e3      	str	r3, [r4, #12]
}
9000c95e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000c960:	2002      	movs	r0, #2
}
9000c962:	4770      	bx	lr

9000c964 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000c964:	4603      	mov	r3, r0
9000c966:	b188      	cbz	r0, 9000c98c <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000c968:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000c96c:	2a02      	cmp	r2, #2
9000c96e:	d003      	beq.n	9000c978 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c970:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000c972:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000c974:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000c976:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000c978:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c97a:	2104      	movs	r1, #4
  return HAL_OK;
9000c97c:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000c97e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000c982:	68d3      	ldr	r3, [r2, #12]
9000c984:	f023 0301 	bic.w	r3, r3, #1
9000c988:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000c98a:	4770      	bx	lr
    return HAL_ERROR;
9000c98c:	2001      	movs	r0, #1
}
9000c98e:	4770      	bx	lr

9000c990 <HAL_MDMA_IRQHandler>:
{
9000c990:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000c992:	2300      	movs	r3, #0
{
9000c994:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c996:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000c99a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000c99c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c99e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000c9a0:	4b57      	ldr	r3, [pc, #348]	; (9000cb00 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c9a2:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c9a4:	4a57      	ldr	r2, [pc, #348]	; (9000cb04 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000c9a6:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000c9a8:	6823      	ldr	r3, [r4, #0]
9000c9aa:	441a      	add	r2, r3
9000c9ac:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000c9b0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000c9b4:	4202      	tst	r2, r0
9000c9b6:	f000 80a0 	beq.w	9000cafa <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000c9ba:	681a      	ldr	r2, [r3, #0]
9000c9bc:	07d1      	lsls	r1, r2, #31
9000c9be:	d529      	bpl.n	9000ca14 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000c9c0:	68da      	ldr	r2, [r3, #12]
9000c9c2:	0792      	lsls	r2, r2, #30
9000c9c4:	d526      	bpl.n	9000ca14 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000c9c6:	68da      	ldr	r2, [r3, #12]
9000c9c8:	f022 0202 	bic.w	r2, r2, #2
9000c9cc:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000c9ce:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c9d0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000c9d2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000c9d4:	bf54      	ite	pl
9000c9d6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000c9da:	f041 0102 	orrmi.w	r1, r1, #2
9000c9de:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000c9e0:	0591      	lsls	r1, r2, #22
9000c9e2:	d503      	bpl.n	9000c9ec <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000c9e4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c9e6:	f041 0104 	orr.w	r1, r1, #4
9000c9ea:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000c9ec:	05d0      	lsls	r0, r2, #23
9000c9ee:	d503      	bpl.n	9000c9f8 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000c9f0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c9f2:	f041 0108 	orr.w	r1, r1, #8
9000c9f6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000c9f8:	0551      	lsls	r1, r2, #21
9000c9fa:	d503      	bpl.n	9000ca04 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000c9fc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000c9fe:	f041 0110 	orr.w	r1, r1, #16
9000ca02:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000ca04:	0510      	lsls	r0, r2, #20
9000ca06:	d503      	bpl.n	9000ca10 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000ca08:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000ca0a:	f042 0220 	orr.w	r2, r2, #32
9000ca0e:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000ca10:	2201      	movs	r2, #1
9000ca12:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000ca14:	681a      	ldr	r2, [r3, #0]
9000ca16:	06d1      	lsls	r1, r2, #27
9000ca18:	d509      	bpl.n	9000ca2e <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000ca1a:	68da      	ldr	r2, [r3, #12]
9000ca1c:	0692      	lsls	r2, r2, #26
9000ca1e:	d506      	bpl.n	9000ca2e <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000ca20:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000ca22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000ca24:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000ca26:	b112      	cbz	r2, 9000ca2e <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000ca28:	4620      	mov	r0, r4
9000ca2a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000ca2c:	6823      	ldr	r3, [r4, #0]
9000ca2e:	681a      	ldr	r2, [r3, #0]
9000ca30:	0710      	lsls	r0, r2, #28
9000ca32:	d509      	bpl.n	9000ca48 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000ca34:	68da      	ldr	r2, [r3, #12]
9000ca36:	06d1      	lsls	r1, r2, #27
9000ca38:	d506      	bpl.n	9000ca48 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ca3a:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000ca3c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ca3e:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000ca40:	b112      	cbz	r2, 9000ca48 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000ca42:	4620      	mov	r0, r4
9000ca44:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000ca46:	6823      	ldr	r3, [r4, #0]
9000ca48:	681a      	ldr	r2, [r3, #0]
9000ca4a:	0752      	lsls	r2, r2, #29
9000ca4c:	d509      	bpl.n	9000ca62 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000ca4e:	68da      	ldr	r2, [r3, #12]
9000ca50:	0710      	lsls	r0, r2, #28
9000ca52:	d506      	bpl.n	9000ca62 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000ca54:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ca56:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000ca58:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ca5a:	b112      	cbz	r2, 9000ca62 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000ca5c:	4620      	mov	r0, r4
9000ca5e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000ca60:	6823      	ldr	r3, [r4, #0]
9000ca62:	681a      	ldr	r2, [r3, #0]
9000ca64:	0791      	lsls	r1, r2, #30
9000ca66:	d516      	bpl.n	9000ca96 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000ca68:	68da      	ldr	r2, [r3, #12]
9000ca6a:	0752      	lsls	r2, r2, #29
9000ca6c:	d513      	bpl.n	9000ca96 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000ca6e:	68da      	ldr	r2, [r3, #12]
9000ca70:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000ca74:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000ca76:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000ca7a:	2a04      	cmp	r2, #4
9000ca7c:	d034      	beq.n	9000cae8 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ca7e:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000ca80:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ca82:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000ca84:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000ca86:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000ca88:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000ca8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000ca90:	b10b      	cbz	r3, 9000ca96 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000ca92:	4620      	mov	r0, r4
9000ca94:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000ca96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000ca98:	2b00      	cmp	r3, #0
9000ca9a:	d02e      	beq.n	9000cafa <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000ca9c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000ca9e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000caa0:	4b19      	ldr	r3, [pc, #100]	; (9000cb08 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000caa2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000caa6:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000caaa:	68cb      	ldr	r3, [r1, #12]
9000caac:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000cab0:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000cab2:	60cb      	str	r3, [r1, #12]
9000cab4:	e002      	b.n	9000cabc <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000cab6:	68cb      	ldr	r3, [r1, #12]
9000cab8:	07d8      	lsls	r0, r3, #31
9000caba:	d504      	bpl.n	9000cac6 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000cabc:	9b01      	ldr	r3, [sp, #4]
9000cabe:	3301      	adds	r3, #1
9000cac0:	4293      	cmp	r3, r2
9000cac2:	9301      	str	r3, [sp, #4]
9000cac4:	d9f7      	bls.n	9000cab6 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000cac6:	2300      	movs	r3, #0
9000cac8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000cacc:	68cb      	ldr	r3, [r1, #12]
9000cace:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000cad0:	bf4c      	ite	mi
9000cad2:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000cad4:	2301      	movpl	r3, #1
9000cad6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000cada:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000cadc:	b16b      	cbz	r3, 9000cafa <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000cade:	4620      	mov	r0, r4
}
9000cae0:	b003      	add	sp, #12
9000cae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000cae6:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000cae8:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000caea:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000caec:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000caee:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000caf2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000caf6:	2b00      	cmp	r3, #0
9000caf8:	d1f1      	bne.n	9000cade <HAL_MDMA_IRQHandler+0x14e>
}
9000cafa:	b003      	add	sp, #12
9000cafc:	bd30      	pop	{r4, r5, pc}
9000cafe:	bf00      	nop
9000cb00:	24000054 	.word	0x24000054
9000cb04:	adffffc0 	.word	0xadffffc0
9000cb08:	1b4e81b5 	.word	0x1b4e81b5

9000cb0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000cb0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000cb0e:	4c10      	ldr	r4, [pc, #64]	; (9000cb50 <HAL_PWREx_ConfigSupply+0x44>)
9000cb10:	68e3      	ldr	r3, [r4, #12]
9000cb12:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000cb16:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000cb18:	d105      	bne.n	9000cb26 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000cb1a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000cb1e:	1a18      	subs	r0, r3, r0
9000cb20:	bf18      	it	ne
9000cb22:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000cb24:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000cb26:	f023 0307 	bic.w	r3, r3, #7
9000cb2a:	4303      	orrs	r3, r0
9000cb2c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000cb2e:	f7fc ff47 	bl	900099c0 <HAL_GetTick>
9000cb32:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000cb34:	e005      	b.n	9000cb42 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000cb36:	f7fc ff43 	bl	900099c0 <HAL_GetTick>
9000cb3a:	1b40      	subs	r0, r0, r5
9000cb3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000cb40:	d804      	bhi.n	9000cb4c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000cb42:	6863      	ldr	r3, [r4, #4]
9000cb44:	049b      	lsls	r3, r3, #18
9000cb46:	d5f6      	bpl.n	9000cb36 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000cb48:	2000      	movs	r0, #0
}
9000cb4a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000cb4c:	2001      	movs	r0, #1
}
9000cb4e:	bd38      	pop	{r3, r4, r5, pc}
9000cb50:	58024800 	.word	0x58024800

9000cb54 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cb54:	4b3b      	ldr	r3, [pc, #236]	; (9000cc44 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000cb56:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cb58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cb5a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cb5c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000cb5e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cb62:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cb64:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000cb68:	d038      	beq.n	9000cbdc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cb6a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cb6e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cb72:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cb76:	fb05 f101 	mul.w	r1, r5, r1
9000cb7a:	2a01      	cmp	r2, #1
9000cb7c:	ee07 1a90 	vmov	s15, r1
9000cb80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000cb84:	d002      	beq.n	9000cb8c <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000cb86:	2a02      	cmp	r2, #2
9000cb88:	d04e      	beq.n	9000cc28 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000cb8a:	b34a      	cbz	r2, 9000cbe0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cb8c:	ee07 0a90 	vmov	s15, r0
9000cb90:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000cc48 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000cb94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cb9a:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000cb9e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000cc4c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000cba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000cba6:	ee07 3a90 	vmov	s15, r3
9000cbaa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000cbae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cbb2:	eee7 7a25 	vfma.f32	s15, s14, s11
9000cbb6:	ee77 7a86 	vadd.f32	s15, s15, s12
9000cbba:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000cbbe:	4b21      	ldr	r3, [pc, #132]	; (9000cc44 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000cbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cbc2:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000cbc6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000cbc8:	ee07 3a90 	vmov	s15, r3
9000cbcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000cbd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000cbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000cbd8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000cbdc:	bc30      	pop	{r4, r5}
9000cbde:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cbe0:	681a      	ldr	r2, [r3, #0]
9000cbe2:	0692      	lsls	r2, r2, #26
9000cbe4:	d527      	bpl.n	9000cc36 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cbe6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cbe8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cbec:	4a18      	ldr	r2, [pc, #96]	; (9000cc50 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cbee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000cbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cbf4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cbf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cbfc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000cc4c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000cc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cc04:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cc06:	ee06 3a90 	vmov	s13, r3
9000cc0a:	ee06 2a10 	vmov	s12, r2
9000cc0e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000cc12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000cc16:	eee7 6a05 	vfma.f32	s13, s14, s10
9000cc1a:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000cc1e:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000cc22:	ee66 6a87 	vmul.f32	s13, s13, s14
9000cc26:	e7ca      	b.n	9000cbbe <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cc28:	ee07 0a90 	vmov	s15, r0
9000cc2c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000cc54 <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000cc30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cc34:	e7b0      	b.n	9000cb98 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cc36:	ee07 0a90 	vmov	s15, r0
9000cc3a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000cc58 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000cc3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cc42:	e7a9      	b.n	9000cb98 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000cc44:	58024400 	.word	0x58024400
9000cc48:	4a742400 	.word	0x4a742400
9000cc4c:	39000000 	.word	0x39000000
9000cc50:	03d09000 	.word	0x03d09000
9000cc54:	4bbebc20 	.word	0x4bbebc20
9000cc58:	4c742400 	.word	0x4c742400

9000cc5c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000cc5c:	2800      	cmp	r0, #0
9000cc5e:	f000 81e8 	beq.w	9000d032 <HAL_RCC_OscConfig+0x3d6>
{
9000cc62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000cc64:	6803      	ldr	r3, [r0, #0]
9000cc66:	4604      	mov	r4, r0
9000cc68:	07d9      	lsls	r1, r3, #31
9000cc6a:	d52e      	bpl.n	9000ccca <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cc6c:	49a4      	ldr	r1, [pc, #656]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cc6e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000cc70:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cc72:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000cc76:	2a10      	cmp	r2, #16
9000cc78:	f000 8107 	beq.w	9000ce8a <HAL_RCC_OscConfig+0x22e>
9000cc7c:	2a18      	cmp	r2, #24
9000cc7e:	f000 80ff 	beq.w	9000ce80 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cc82:	6863      	ldr	r3, [r4, #4]
9000cc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cc88:	f000 812a 	beq.w	9000cee0 <HAL_RCC_OscConfig+0x284>
9000cc8c:	2b00      	cmp	r3, #0
9000cc8e:	f000 8168 	beq.w	9000cf62 <HAL_RCC_OscConfig+0x306>
9000cc92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000cc96:	4b9a      	ldr	r3, [pc, #616]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cc98:	681a      	ldr	r2, [r3, #0]
9000cc9a:	f000 8289 	beq.w	9000d1b0 <HAL_RCC_OscConfig+0x554>
9000cc9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000cca2:	601a      	str	r2, [r3, #0]
9000cca4:	681a      	ldr	r2, [r3, #0]
9000cca6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000ccaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000ccac:	f7fc fe88 	bl	900099c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ccb0:	4e93      	ldr	r6, [pc, #588]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000ccb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ccb4:	e005      	b.n	9000ccc2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000ccb6:	f7fc fe83 	bl	900099c0 <HAL_GetTick>
9000ccba:	1b40      	subs	r0, r0, r5
9000ccbc:	2864      	cmp	r0, #100	; 0x64
9000ccbe:	f200 814e 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ccc2:	6833      	ldr	r3, [r6, #0]
9000ccc4:	039b      	lsls	r3, r3, #14
9000ccc6:	d5f6      	bpl.n	9000ccb6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000ccc8:	6823      	ldr	r3, [r4, #0]
9000ccca:	079d      	lsls	r5, r3, #30
9000cccc:	f100 808a 	bmi.w	9000cde4 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ccd0:	06d9      	lsls	r1, r3, #27
9000ccd2:	d533      	bpl.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ccd4:	4a8a      	ldr	r2, [pc, #552]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000ccd6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ccd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ccda:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000ccde:	2b08      	cmp	r3, #8
9000cce0:	f000 80e3 	beq.w	9000ceaa <HAL_RCC_OscConfig+0x24e>
9000cce4:	2b18      	cmp	r3, #24
9000cce6:	f000 80db 	beq.w	9000cea0 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000ccea:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000ccec:	4d84      	ldr	r5, [pc, #528]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000ccee:	2b00      	cmp	r3, #0
9000ccf0:	f000 816f 	beq.w	9000cfd2 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000ccf4:	682b      	ldr	r3, [r5, #0]
9000ccf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000ccfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ccfc:	f7fc fe60 	bl	900099c0 <HAL_GetTick>
9000cd00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000cd02:	e005      	b.n	9000cd10 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000cd04:	f7fc fe5c 	bl	900099c0 <HAL_GetTick>
9000cd08:	1b80      	subs	r0, r0, r6
9000cd0a:	2802      	cmp	r0, #2
9000cd0c:	f200 8127 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000cd10:	682b      	ldr	r3, [r5, #0]
9000cd12:	05db      	lsls	r3, r3, #23
9000cd14:	d5f6      	bpl.n	9000cd04 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000cd16:	f7fc fe6b 	bl	900099f0 <HAL_GetREVID>
9000cd1a:	f241 0303 	movw	r3, #4099	; 0x1003
9000cd1e:	4298      	cmp	r0, r3
9000cd20:	f200 826d 	bhi.w	9000d1fe <HAL_RCC_OscConfig+0x5a2>
9000cd24:	6a22      	ldr	r2, [r4, #32]
9000cd26:	686b      	ldr	r3, [r5, #4]
9000cd28:	2a20      	cmp	r2, #32
9000cd2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000cd2e:	bf0c      	ite	eq
9000cd30:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000cd34:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000cd38:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cd3a:	6823      	ldr	r3, [r4, #0]
9000cd3c:	071d      	lsls	r5, r3, #28
9000cd3e:	d516      	bpl.n	9000cd6e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000cd40:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000cd42:	4d6f      	ldr	r5, [pc, #444]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000cd44:	2b00      	cmp	r3, #0
9000cd46:	f000 8122 	beq.w	9000cf8e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000cd4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cd4c:	f043 0301 	orr.w	r3, r3, #1
9000cd50:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000cd52:	f7fc fe35 	bl	900099c0 <HAL_GetTick>
9000cd56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000cd58:	e005      	b.n	9000cd66 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000cd5a:	f7fc fe31 	bl	900099c0 <HAL_GetTick>
9000cd5e:	1b80      	subs	r0, r0, r6
9000cd60:	2802      	cmp	r0, #2
9000cd62:	f200 80fc 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000cd66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cd68:	0798      	lsls	r0, r3, #30
9000cd6a:	d5f6      	bpl.n	9000cd5a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000cd6c:	6823      	ldr	r3, [r4, #0]
9000cd6e:	069a      	lsls	r2, r3, #26
9000cd70:	d516      	bpl.n	9000cda0 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000cd72:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000cd74:	4d62      	ldr	r5, [pc, #392]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000cd76:	2b00      	cmp	r3, #0
9000cd78:	f000 811a 	beq.w	9000cfb0 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000cd7c:	682b      	ldr	r3, [r5, #0]
9000cd7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000cd82:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000cd84:	f7fc fe1c 	bl	900099c0 <HAL_GetTick>
9000cd88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000cd8a:	e005      	b.n	9000cd98 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000cd8c:	f7fc fe18 	bl	900099c0 <HAL_GetTick>
9000cd90:	1b80      	subs	r0, r0, r6
9000cd92:	2802      	cmp	r0, #2
9000cd94:	f200 80e3 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000cd98:	682b      	ldr	r3, [r5, #0]
9000cd9a:	049f      	lsls	r7, r3, #18
9000cd9c:	d5f6      	bpl.n	9000cd8c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000cd9e:	6823      	ldr	r3, [r4, #0]
9000cda0:	0759      	lsls	r1, r3, #29
9000cda2:	f100 80a3 	bmi.w	9000ceec <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000cda6:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000cda8:	b1d0      	cbz	r0, 9000cde0 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000cdaa:	4d55      	ldr	r5, [pc, #340]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cdac:	692b      	ldr	r3, [r5, #16]
9000cdae:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000cdb2:	2b18      	cmp	r3, #24
9000cdb4:	f000 81ae 	beq.w	9000d114 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000cdb8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000cdba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000cdbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000cdc0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000cdc2:	f000 8142 	beq.w	9000d04a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000cdc6:	f7fc fdfb 	bl	900099c0 <HAL_GetTick>
9000cdca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cdcc:	e005      	b.n	9000cdda <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000cdce:	f7fc fdf7 	bl	900099c0 <HAL_GetTick>
9000cdd2:	1b00      	subs	r0, r0, r4
9000cdd4:	2802      	cmp	r0, #2
9000cdd6:	f200 80c2 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000cdda:	682b      	ldr	r3, [r5, #0]
9000cddc:	019b      	lsls	r3, r3, #6
9000cdde:	d4f6      	bmi.n	9000cdce <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000cde0:	2000      	movs	r0, #0
}
9000cde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000cde4:	4a46      	ldr	r2, [pc, #280]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cde6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000cde8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000cdea:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000cdee:	d12d      	bne.n	9000ce4c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000cdf0:	4b43      	ldr	r3, [pc, #268]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cdf2:	68e2      	ldr	r2, [r4, #12]
9000cdf4:	681b      	ldr	r3, [r3, #0]
9000cdf6:	0759      	lsls	r1, r3, #29
9000cdf8:	d501      	bpl.n	9000cdfe <HAL_RCC_OscConfig+0x1a2>
9000cdfa:	2a00      	cmp	r2, #0
9000cdfc:	d04e      	beq.n	9000ce9c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000cdfe:	4d40      	ldr	r5, [pc, #256]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000ce00:	682b      	ldr	r3, [r5, #0]
9000ce02:	f023 0319 	bic.w	r3, r3, #25
9000ce06:	4313      	orrs	r3, r2
9000ce08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ce0a:	f7fc fdd9 	bl	900099c0 <HAL_GetTick>
9000ce0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ce10:	e005      	b.n	9000ce1e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000ce12:	f7fc fdd5 	bl	900099c0 <HAL_GetTick>
9000ce16:	1b80      	subs	r0, r0, r6
9000ce18:	2802      	cmp	r0, #2
9000ce1a:	f200 80a0 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ce1e:	682b      	ldr	r3, [r5, #0]
9000ce20:	075b      	lsls	r3, r3, #29
9000ce22:	d5f6      	bpl.n	9000ce12 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000ce24:	f7fc fde4 	bl	900099f0 <HAL_GetREVID>
9000ce28:	f241 0303 	movw	r3, #4099	; 0x1003
9000ce2c:	4298      	cmp	r0, r3
9000ce2e:	f200 80f7 	bhi.w	9000d020 <HAL_RCC_OscConfig+0x3c4>
9000ce32:	6922      	ldr	r2, [r4, #16]
9000ce34:	686b      	ldr	r3, [r5, #4]
9000ce36:	2a40      	cmp	r2, #64	; 0x40
9000ce38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000ce3c:	bf0c      	ite	eq
9000ce3e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000ce42:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000ce46:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ce48:	6823      	ldr	r3, [r4, #0]
9000ce4a:	e741      	b.n	9000ccd0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000ce4c:	2b18      	cmp	r3, #24
9000ce4e:	f000 80e3 	beq.w	9000d018 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ce52:	4d2b      	ldr	r5, [pc, #172]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000ce54:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ce56:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000ce58:	2a00      	cmp	r2, #0
9000ce5a:	f000 80cc 	beq.w	9000cff6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ce5e:	f023 0319 	bic.w	r3, r3, #25
9000ce62:	4313      	orrs	r3, r2
9000ce64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ce66:	f7fc fdab 	bl	900099c0 <HAL_GetTick>
9000ce6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ce6c:	e004      	b.n	9000ce78 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000ce6e:	f7fc fda7 	bl	900099c0 <HAL_GetTick>
9000ce72:	1b80      	subs	r0, r0, r6
9000ce74:	2802      	cmp	r0, #2
9000ce76:	d872      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ce78:	682b      	ldr	r3, [r5, #0]
9000ce7a:	075f      	lsls	r7, r3, #29
9000ce7c:	d5f7      	bpl.n	9000ce6e <HAL_RCC_OscConfig+0x212>
9000ce7e:	e7d1      	b.n	9000ce24 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000ce80:	f001 0103 	and.w	r1, r1, #3
9000ce84:	2902      	cmp	r1, #2
9000ce86:	f47f aefc 	bne.w	9000cc82 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000ce8a:	4a1d      	ldr	r2, [pc, #116]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000ce8c:	6812      	ldr	r2, [r2, #0]
9000ce8e:	0392      	lsls	r2, r2, #14
9000ce90:	f57f af1b 	bpl.w	9000ccca <HAL_RCC_OscConfig+0x6e>
9000ce94:	6862      	ldr	r2, [r4, #4]
9000ce96:	2a00      	cmp	r2, #0
9000ce98:	f47f af17 	bne.w	9000ccca <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000ce9c:	2001      	movs	r0, #1
}
9000ce9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000cea0:	f002 0203 	and.w	r2, r2, #3
9000cea4:	2a01      	cmp	r2, #1
9000cea6:	f47f af20 	bne.w	9000ccea <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000ceaa:	4b15      	ldr	r3, [pc, #84]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000ceac:	681b      	ldr	r3, [r3, #0]
9000ceae:	05da      	lsls	r2, r3, #23
9000ceb0:	d502      	bpl.n	9000ceb8 <HAL_RCC_OscConfig+0x25c>
9000ceb2:	69e3      	ldr	r3, [r4, #28]
9000ceb4:	2b80      	cmp	r3, #128	; 0x80
9000ceb6:	d1f1      	bne.n	9000ce9c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ceb8:	f7fc fd9a 	bl	900099f0 <HAL_GetREVID>
9000cebc:	f241 0303 	movw	r3, #4099	; 0x1003
9000cec0:	4298      	cmp	r0, r3
9000cec2:	f200 80b8 	bhi.w	9000d036 <HAL_RCC_OscConfig+0x3da>
9000cec6:	6a22      	ldr	r2, [r4, #32]
9000cec8:	2a20      	cmp	r2, #32
9000ceca:	f000 81a7 	beq.w	9000d21c <HAL_RCC_OscConfig+0x5c0>
9000cece:	490c      	ldr	r1, [pc, #48]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000ced0:	684b      	ldr	r3, [r1, #4]
9000ced2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000ced6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000ceda:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cedc:	6823      	ldr	r3, [r4, #0]
9000cede:	e72d      	b.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cee0:	4a07      	ldr	r2, [pc, #28]	; (9000cf00 <HAL_RCC_OscConfig+0x2a4>)
9000cee2:	6813      	ldr	r3, [r2, #0]
9000cee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000cee8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000ceea:	e6df      	b.n	9000ccac <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000ceec:	4d05      	ldr	r5, [pc, #20]	; (9000cf04 <HAL_RCC_OscConfig+0x2a8>)
9000ceee:	682b      	ldr	r3, [r5, #0]
9000cef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000cef4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000cef6:	f7fc fd63 	bl	900099c0 <HAL_GetTick>
9000cefa:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000cefc:	e009      	b.n	9000cf12 <HAL_RCC_OscConfig+0x2b6>
9000cefe:	bf00      	nop
9000cf00:	58024400 	.word	0x58024400
9000cf04:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000cf08:	f7fc fd5a 	bl	900099c0 <HAL_GetTick>
9000cf0c:	1b80      	subs	r0, r0, r6
9000cf0e:	2864      	cmp	r0, #100	; 0x64
9000cf10:	d825      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000cf12:	682b      	ldr	r3, [r5, #0]
9000cf14:	05da      	lsls	r2, r3, #23
9000cf16:	d5f7      	bpl.n	9000cf08 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000cf18:	68a3      	ldr	r3, [r4, #8]
9000cf1a:	2b01      	cmp	r3, #1
9000cf1c:	f000 8178 	beq.w	9000d210 <HAL_RCC_OscConfig+0x5b4>
9000cf20:	2b00      	cmp	r3, #0
9000cf22:	f000 8153 	beq.w	9000d1cc <HAL_RCC_OscConfig+0x570>
9000cf26:	2b05      	cmp	r3, #5
9000cf28:	4ba5      	ldr	r3, [pc, #660]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
9000cf2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000cf2c:	f000 817f 	beq.w	9000d22e <HAL_RCC_OscConfig+0x5d2>
9000cf30:	f022 0201 	bic.w	r2, r2, #1
9000cf34:	671a      	str	r2, [r3, #112]	; 0x70
9000cf36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000cf38:	f022 0204 	bic.w	r2, r2, #4
9000cf3c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000cf3e:	f7fc fd3f 	bl	900099c0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000cf42:	4e9f      	ldr	r6, [pc, #636]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cf44:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000cf48:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000cf4a:	e004      	b.n	9000cf56 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000cf4c:	f7fc fd38 	bl	900099c0 <HAL_GetTick>
9000cf50:	1b40      	subs	r0, r0, r5
9000cf52:	42b8      	cmp	r0, r7
9000cf54:	d803      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000cf56:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000cf58:	079b      	lsls	r3, r3, #30
9000cf5a:	d5f7      	bpl.n	9000cf4c <HAL_RCC_OscConfig+0x2f0>
9000cf5c:	e723      	b.n	9000cda6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000cf5e:	2003      	movs	r0, #3
}
9000cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000cf62:	4d97      	ldr	r5, [pc, #604]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
9000cf64:	682b      	ldr	r3, [r5, #0]
9000cf66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000cf6a:	602b      	str	r3, [r5, #0]
9000cf6c:	682b      	ldr	r3, [r5, #0]
9000cf6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000cf72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cf74:	f7fc fd24 	bl	900099c0 <HAL_GetTick>
9000cf78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000cf7a:	e004      	b.n	9000cf86 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000cf7c:	f7fc fd20 	bl	900099c0 <HAL_GetTick>
9000cf80:	1b80      	subs	r0, r0, r6
9000cf82:	2864      	cmp	r0, #100	; 0x64
9000cf84:	d8eb      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000cf86:	682b      	ldr	r3, [r5, #0]
9000cf88:	039f      	lsls	r7, r3, #14
9000cf8a:	d4f7      	bmi.n	9000cf7c <HAL_RCC_OscConfig+0x320>
9000cf8c:	e69c      	b.n	9000ccc8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000cf8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cf90:	f023 0301 	bic.w	r3, r3, #1
9000cf94:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000cf96:	f7fc fd13 	bl	900099c0 <HAL_GetTick>
9000cf9a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000cf9c:	e004      	b.n	9000cfa8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000cf9e:	f7fc fd0f 	bl	900099c0 <HAL_GetTick>
9000cfa2:	1b80      	subs	r0, r0, r6
9000cfa4:	2802      	cmp	r0, #2
9000cfa6:	d8da      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000cfa8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000cfaa:	0799      	lsls	r1, r3, #30
9000cfac:	d4f7      	bmi.n	9000cf9e <HAL_RCC_OscConfig+0x342>
9000cfae:	e6dd      	b.n	9000cd6c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000cfb0:	682b      	ldr	r3, [r5, #0]
9000cfb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000cfb6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000cfb8:	f7fc fd02 	bl	900099c0 <HAL_GetTick>
9000cfbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000cfbe:	e004      	b.n	9000cfca <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000cfc0:	f7fc fcfe 	bl	900099c0 <HAL_GetTick>
9000cfc4:	1b80      	subs	r0, r0, r6
9000cfc6:	2802      	cmp	r0, #2
9000cfc8:	d8c9      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000cfca:	682b      	ldr	r3, [r5, #0]
9000cfcc:	0498      	lsls	r0, r3, #18
9000cfce:	d4f7      	bmi.n	9000cfc0 <HAL_RCC_OscConfig+0x364>
9000cfd0:	e6e5      	b.n	9000cd9e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000cfd2:	682b      	ldr	r3, [r5, #0]
9000cfd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cfd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cfda:	f7fc fcf1 	bl	900099c0 <HAL_GetTick>
9000cfde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000cfe0:	e004      	b.n	9000cfec <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000cfe2:	f7fc fced 	bl	900099c0 <HAL_GetTick>
9000cfe6:	1b80      	subs	r0, r0, r6
9000cfe8:	2802      	cmp	r0, #2
9000cfea:	d8b8      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000cfec:	682b      	ldr	r3, [r5, #0]
9000cfee:	05df      	lsls	r7, r3, #23
9000cff0:	d4f7      	bmi.n	9000cfe2 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000cff2:	6823      	ldr	r3, [r4, #0]
9000cff4:	e6a2      	b.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000cff6:	f023 0301 	bic.w	r3, r3, #1
9000cffa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000cffc:	f7fc fce0 	bl	900099c0 <HAL_GetTick>
9000d000:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000d002:	e004      	b.n	9000d00e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000d004:	f7fc fcdc 	bl	900099c0 <HAL_GetTick>
9000d008:	1b80      	subs	r0, r0, r6
9000d00a:	2802      	cmp	r0, #2
9000d00c:	d8a7      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000d00e:	682b      	ldr	r3, [r5, #0]
9000d010:	0758      	lsls	r0, r3, #29
9000d012:	d4f7      	bmi.n	9000d004 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d014:	6823      	ldr	r3, [r4, #0]
9000d016:	e65b      	b.n	9000ccd0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000d018:	0790      	lsls	r0, r2, #30
9000d01a:	f47f af1a 	bne.w	9000ce52 <HAL_RCC_OscConfig+0x1f6>
9000d01e:	e6e7      	b.n	9000cdf0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000d020:	686b      	ldr	r3, [r5, #4]
9000d022:	6922      	ldr	r2, [r4, #16]
9000d024:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000d028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000d02c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d02e:	6823      	ldr	r3, [r4, #0]
9000d030:	e64e      	b.n	9000ccd0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000d032:	2001      	movs	r0, #1
}
9000d034:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d036:	4a62      	ldr	r2, [pc, #392]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
9000d038:	6a21      	ldr	r1, [r4, #32]
9000d03a:	68d3      	ldr	r3, [r2, #12]
9000d03c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000d040:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000d044:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d046:	6823      	ldr	r3, [r4, #0]
9000d048:	e678      	b.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000d04a:	f7fc fcb9 	bl	900099c0 <HAL_GetTick>
9000d04e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d050:	e004      	b.n	9000d05c <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d052:	f7fc fcb5 	bl	900099c0 <HAL_GetTick>
9000d056:	1b80      	subs	r0, r0, r6
9000d058:	2802      	cmp	r0, #2
9000d05a:	d880      	bhi.n	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d05c:	682b      	ldr	r3, [r5, #0]
9000d05e:	0199      	lsls	r1, r3, #6
9000d060:	d4f7      	bmi.n	9000d052 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000d062:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000d064:	4b57      	ldr	r3, [pc, #348]	; (9000d1c4 <HAL_RCC_OscConfig+0x568>)
9000d066:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000d068:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d06a:	4957      	ldr	r1, [pc, #348]	; (9000d1c8 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d06c:	4e54      	ldr	r6, [pc, #336]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000d06e:	4313      	orrs	r3, r2
9000d070:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d072:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000d076:	62ab      	str	r3, [r5, #40]	; 0x28
9000d078:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000d07c:	3b01      	subs	r3, #1
9000d07e:	3a01      	subs	r2, #1
9000d080:	025b      	lsls	r3, r3, #9
9000d082:	0412      	lsls	r2, r2, #16
9000d084:	b29b      	uxth	r3, r3
9000d086:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d08a:	4313      	orrs	r3, r2
9000d08c:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000d08e:	3a01      	subs	r2, #1
9000d090:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d094:	4313      	orrs	r3, r2
9000d096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000d098:	3a01      	subs	r2, #1
9000d09a:	0612      	lsls	r2, r2, #24
9000d09c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d0a0:	4313      	orrs	r3, r2
9000d0a2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000d0a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0a6:	f023 0301 	bic.w	r3, r3, #1
9000d0aa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d0ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000d0ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000d0b0:	4011      	ands	r1, r2
9000d0b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000d0b6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000d0b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d0bc:	f023 030c 	bic.w	r3, r3, #12
9000d0c0:	4313      	orrs	r3, r2
9000d0c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000d0c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000d0c8:	f023 0302 	bic.w	r3, r3, #2
9000d0cc:	4313      	orrs	r3, r2
9000d0ce:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000d0d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000d0d6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d0d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000d0de:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000d0e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000d0e6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000d0e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d0ea:	f043 0301 	orr.w	r3, r3, #1
9000d0ee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000d0f0:	682b      	ldr	r3, [r5, #0]
9000d0f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000d0f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d0f8:	f7fc fc62 	bl	900099c0 <HAL_GetTick>
9000d0fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d0fe:	e005      	b.n	9000d10c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d100:	f7fc fc5e 	bl	900099c0 <HAL_GetTick>
9000d104:	1b00      	subs	r0, r0, r4
9000d106:	2802      	cmp	r0, #2
9000d108:	f63f af29 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d10c:	6833      	ldr	r3, [r6, #0]
9000d10e:	019a      	lsls	r2, r3, #6
9000d110:	d5f6      	bpl.n	9000d100 <HAL_RCC_OscConfig+0x4a4>
9000d112:	e665      	b.n	9000cde0 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d114:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000d116:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000d118:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d11a:	f43f ae62 	beq.w	9000cde2 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d11e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d122:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000d124:	428b      	cmp	r3, r1
9000d126:	f47f aeb9 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d12a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d12e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d130:	429a      	cmp	r2, r3
9000d132:	f47f aeb3 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d136:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d138:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000d13c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d13e:	429a      	cmp	r2, r3
9000d140:	f47f aeac 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d144:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000d146:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000d14a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d14c:	429a      	cmp	r2, r3
9000d14e:	f47f aea5 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d154:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000d158:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d15a:	429a      	cmp	r2, r3
9000d15c:	f47f ae9e 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000d160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d162:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000d166:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d168:	429e      	cmp	r6, r3
9000d16a:	f47f ae97 	bne.w	9000ce9c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d16e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d170:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d172:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d176:	429a      	cmp	r2, r3
9000d178:	f43f ae32 	beq.w	9000cde0 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000d17c:	4a10      	ldr	r2, [pc, #64]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
9000d17e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d180:	f023 0301 	bic.w	r3, r3, #1
9000d184:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000d186:	f7fc fc1b 	bl	900099c0 <HAL_GetTick>
9000d18a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000d18c:	f7fc fc18 	bl	900099c0 <HAL_GetTick>
9000d190:	42a8      	cmp	r0, r5
9000d192:	d0fb      	beq.n	9000d18c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d194:	4a0a      	ldr	r2, [pc, #40]	; (9000d1c0 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000d196:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d198:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000d19a:	4b0b      	ldr	r3, [pc, #44]	; (9000d1c8 <HAL_RCC_OscConfig+0x56c>)
9000d19c:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000d19e:	4023      	ands	r3, r4
9000d1a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000d1a4:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000d1a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d1a8:	f043 0301 	orr.w	r3, r3, #1
9000d1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d1b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000d1b4:	601a      	str	r2, [r3, #0]
9000d1b6:	681a      	ldr	r2, [r3, #0]
9000d1b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000d1bc:	601a      	str	r2, [r3, #0]
9000d1be:	e575      	b.n	9000ccac <HAL_RCC_OscConfig+0x50>
9000d1c0:	58024400 	.word	0x58024400
9000d1c4:	fffffc0c 	.word	0xfffffc0c
9000d1c8:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d1cc:	4d1c      	ldr	r5, [pc, #112]	; (9000d240 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d1ce:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d1d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d1d4:	f023 0301 	bic.w	r3, r3, #1
9000d1d8:	672b      	str	r3, [r5, #112]	; 0x70
9000d1da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d1dc:	f023 0304 	bic.w	r3, r3, #4
9000d1e0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000d1e2:	f7fc fbed 	bl	900099c0 <HAL_GetTick>
9000d1e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d1e8:	e005      	b.n	9000d1f6 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d1ea:	f7fc fbe9 	bl	900099c0 <HAL_GetTick>
9000d1ee:	1b80      	subs	r0, r0, r6
9000d1f0:	42b8      	cmp	r0, r7
9000d1f2:	f63f aeb4 	bhi.w	9000cf5e <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d1f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d1f8:	0798      	lsls	r0, r3, #30
9000d1fa:	d4f6      	bmi.n	9000d1ea <HAL_RCC_OscConfig+0x58e>
9000d1fc:	e5d3      	b.n	9000cda6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d1fe:	68eb      	ldr	r3, [r5, #12]
9000d200:	6a22      	ldr	r2, [r4, #32]
9000d202:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000d206:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000d20a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d20c:	6823      	ldr	r3, [r4, #0]
9000d20e:	e595      	b.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d210:	4a0b      	ldr	r2, [pc, #44]	; (9000d240 <HAL_RCC_OscConfig+0x5e4>)
9000d212:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000d214:	f043 0301 	orr.w	r3, r3, #1
9000d218:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000d21a:	e690      	b.n	9000cf3e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d21c:	4a08      	ldr	r2, [pc, #32]	; (9000d240 <HAL_RCC_OscConfig+0x5e4>)
9000d21e:	6853      	ldr	r3, [r2, #4]
9000d220:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000d224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000d228:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d22a:	6823      	ldr	r3, [r4, #0]
9000d22c:	e586      	b.n	9000cd3c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d22e:	f042 0204 	orr.w	r2, r2, #4
9000d232:	671a      	str	r2, [r3, #112]	; 0x70
9000d234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000d236:	f042 0201 	orr.w	r2, r2, #1
9000d23a:	671a      	str	r2, [r3, #112]	; 0x70
9000d23c:	e67f      	b.n	9000cf3e <HAL_RCC_OscConfig+0x2e2>
9000d23e:	bf00      	nop
9000d240:	58024400 	.word	0x58024400

9000d244 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d244:	4a47      	ldr	r2, [pc, #284]	; (9000d364 <HAL_RCC_GetSysClockFreq+0x120>)
9000d246:	6913      	ldr	r3, [r2, #16]
9000d248:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d24c:	2b10      	cmp	r3, #16
9000d24e:	d004      	beq.n	9000d25a <HAL_RCC_GetSysClockFreq+0x16>
9000d250:	2b18      	cmp	r3, #24
9000d252:	d00d      	beq.n	9000d270 <HAL_RCC_GetSysClockFreq+0x2c>
9000d254:	b11b      	cbz	r3, 9000d25e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000d256:	4844      	ldr	r0, [pc, #272]	; (9000d368 <HAL_RCC_GetSysClockFreq+0x124>)
9000d258:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d25a:	4844      	ldr	r0, [pc, #272]	; (9000d36c <HAL_RCC_GetSysClockFreq+0x128>)
9000d25c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d25e:	6813      	ldr	r3, [r2, #0]
9000d260:	0699      	lsls	r1, r3, #26
9000d262:	d54a      	bpl.n	9000d2fa <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d264:	6813      	ldr	r3, [r2, #0]
9000d266:	4842      	ldr	r0, [pc, #264]	; (9000d370 <HAL_RCC_GetSysClockFreq+0x12c>)
9000d268:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d26c:	40d8      	lsrs	r0, r3
9000d26e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d270:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000d272:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d274:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d276:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000d278:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d27c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d27e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000d282:	d038      	beq.n	9000d2f6 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d284:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d288:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d28c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d290:	fb05 f101 	mul.w	r1, r5, r1
9000d294:	2b01      	cmp	r3, #1
9000d296:	ee07 1a90 	vmov	s15, r1
9000d29a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000d29e:	d002      	beq.n	9000d2a6 <HAL_RCC_GetSysClockFreq+0x62>
9000d2a0:	2b02      	cmp	r3, #2
9000d2a2:	d02c      	beq.n	9000d2fe <HAL_RCC_GetSysClockFreq+0xba>
9000d2a4:	b393      	cbz	r3, 9000d30c <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d2a6:	ee07 0a90 	vmov	s15, r0
9000d2aa:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000d374 <HAL_RCC_GetSysClockFreq+0x130>
9000d2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d2b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000d2b4:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000d2b8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000d378 <HAL_RCC_GetSysClockFreq+0x134>
9000d2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000d2c0:	ee07 3a90 	vmov	s15, r3
9000d2c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000d2c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d2cc:	eee7 7a25 	vfma.f32	s15, s14, s11
9000d2d0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000d2d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000d2d8:	4b22      	ldr	r3, [pc, #136]	; (9000d364 <HAL_RCC_GetSysClockFreq+0x120>)
9000d2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d2dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000d2e0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000d2e2:	ee07 3a90 	vmov	s15, r3
9000d2e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000d2ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000d2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000d2f2:	ee17 0a90 	vmov	r0, s15
}
9000d2f6:	bc30      	pop	{r4, r5}
9000d2f8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d2fa:	481d      	ldr	r0, [pc, #116]	; (9000d370 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000d2fc:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d2fe:	ee07 0a90 	vmov	s15, r0
9000d302:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000d37c <HAL_RCC_GetSysClockFreq+0x138>
9000d306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d30a:	e7d2      	b.n	9000d2b2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d30c:	6813      	ldr	r3, [r2, #0]
9000d30e:	069b      	lsls	r3, r3, #26
9000d310:	d520      	bpl.n	9000d354 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d312:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d314:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d318:	4915      	ldr	r1, [pc, #84]	; (9000d370 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d31a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000d31e:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d320:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d328:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000d378 <HAL_RCC_GetSysClockFreq+0x134>
9000d32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d330:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d332:	ee06 3a90 	vmov	s13, r3
9000d336:	ee06 1a10 	vmov	s12, r1
9000d33a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000d33e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000d342:	eee7 6a05 	vfma.f32	s13, s14, s10
9000d346:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000d34a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000d34e:	ee66 6a87 	vmul.f32	s13, s13, s14
9000d352:	e7c1      	b.n	9000d2d8 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d354:	ee07 0a90 	vmov	s15, r0
9000d358:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000d380 <HAL_RCC_GetSysClockFreq+0x13c>
9000d35c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d360:	e7a7      	b.n	9000d2b2 <HAL_RCC_GetSysClockFreq+0x6e>
9000d362:	bf00      	nop
9000d364:	58024400 	.word	0x58024400
9000d368:	003d0900 	.word	0x003d0900
9000d36c:	017d7840 	.word	0x017d7840
9000d370:	03d09000 	.word	0x03d09000
9000d374:	4a742400 	.word	0x4a742400
9000d378:	39000000 	.word	0x39000000
9000d37c:	4bbebc20 	.word	0x4bbebc20
9000d380:	4c742400 	.word	0x4c742400

9000d384 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000d384:	2800      	cmp	r0, #0
9000d386:	f000 810c 	beq.w	9000d5a2 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d38a:	4a8c      	ldr	r2, [pc, #560]	; (9000d5bc <HAL_RCC_ClockConfig+0x238>)
9000d38c:	6813      	ldr	r3, [r2, #0]
9000d38e:	f003 030f 	and.w	r3, r3, #15
9000d392:	428b      	cmp	r3, r1
{
9000d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d398:	4604      	mov	r4, r0
9000d39a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d39c:	d20c      	bcs.n	9000d3b8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d39e:	6813      	ldr	r3, [r2, #0]
9000d3a0:	f023 030f 	bic.w	r3, r3, #15
9000d3a4:	430b      	orrs	r3, r1
9000d3a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d3a8:	6813      	ldr	r3, [r2, #0]
9000d3aa:	f003 030f 	and.w	r3, r3, #15
9000d3ae:	428b      	cmp	r3, r1
9000d3b0:	d002      	beq.n	9000d3b8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000d3b2:	2001      	movs	r0, #1
}
9000d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d3b8:	6823      	ldr	r3, [r4, #0]
9000d3ba:	075f      	lsls	r7, r3, #29
9000d3bc:	d50b      	bpl.n	9000d3d6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d3be:	4980      	ldr	r1, [pc, #512]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d3c0:	6920      	ldr	r0, [r4, #16]
9000d3c2:	698a      	ldr	r2, [r1, #24]
9000d3c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d3c8:	4290      	cmp	r0, r2
9000d3ca:	d904      	bls.n	9000d3d6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d3cc:	698a      	ldr	r2, [r1, #24]
9000d3ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d3d2:	4302      	orrs	r2, r0
9000d3d4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d3d6:	071e      	lsls	r6, r3, #28
9000d3d8:	d50b      	bpl.n	9000d3f2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d3da:	4979      	ldr	r1, [pc, #484]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d3dc:	6960      	ldr	r0, [r4, #20]
9000d3de:	69ca      	ldr	r2, [r1, #28]
9000d3e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d3e4:	4290      	cmp	r0, r2
9000d3e6:	d904      	bls.n	9000d3f2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d3e8:	69ca      	ldr	r2, [r1, #28]
9000d3ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d3ee:	4302      	orrs	r2, r0
9000d3f0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d3f2:	06d8      	lsls	r0, r3, #27
9000d3f4:	d50b      	bpl.n	9000d40e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d3f6:	4972      	ldr	r1, [pc, #456]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d3f8:	69a0      	ldr	r0, [r4, #24]
9000d3fa:	69ca      	ldr	r2, [r1, #28]
9000d3fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d400:	4290      	cmp	r0, r2
9000d402:	d904      	bls.n	9000d40e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d404:	69ca      	ldr	r2, [r1, #28]
9000d406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d40a:	4302      	orrs	r2, r0
9000d40c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d40e:	0699      	lsls	r1, r3, #26
9000d410:	d50b      	bpl.n	9000d42a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d412:	496b      	ldr	r1, [pc, #428]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d414:	69e0      	ldr	r0, [r4, #28]
9000d416:	6a0a      	ldr	r2, [r1, #32]
9000d418:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d41c:	4290      	cmp	r0, r2
9000d41e:	d904      	bls.n	9000d42a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d420:	6a0a      	ldr	r2, [r1, #32]
9000d422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d426:	4302      	orrs	r2, r0
9000d428:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d42a:	079a      	lsls	r2, r3, #30
9000d42c:	f140 80ab 	bpl.w	9000d586 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d430:	4863      	ldr	r0, [pc, #396]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d432:	68e1      	ldr	r1, [r4, #12]
9000d434:	6982      	ldr	r2, [r0, #24]
9000d436:	f002 020f 	and.w	r2, r2, #15
9000d43a:	4291      	cmp	r1, r2
9000d43c:	d904      	bls.n	9000d448 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000d43e:	6982      	ldr	r2, [r0, #24]
9000d440:	f022 020f 	bic.w	r2, r2, #15
9000d444:	430a      	orrs	r2, r1
9000d446:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000d448:	07d8      	lsls	r0, r3, #31
9000d44a:	d530      	bpl.n	9000d4ae <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000d44c:	4a5c      	ldr	r2, [pc, #368]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d44e:	68a1      	ldr	r1, [r4, #8]
9000d450:	6993      	ldr	r3, [r2, #24]
9000d452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000d456:	430b      	orrs	r3, r1
9000d458:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d45a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d45c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d45e:	2902      	cmp	r1, #2
9000d460:	f000 80a1 	beq.w	9000d5a6 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000d464:	2903      	cmp	r1, #3
9000d466:	f000 8098 	beq.w	9000d59a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000d46a:	2901      	cmp	r1, #1
9000d46c:	f000 80a1 	beq.w	9000d5b2 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d470:	0758      	lsls	r0, r3, #29
9000d472:	d59e      	bpl.n	9000d3b2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d474:	4e52      	ldr	r6, [pc, #328]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d476:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d47a:	6933      	ldr	r3, [r6, #16]
9000d47c:	f023 0307 	bic.w	r3, r3, #7
9000d480:	430b      	orrs	r3, r1
9000d482:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000d484:	f7fc fa9c 	bl	900099c0 <HAL_GetTick>
9000d488:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d48a:	e005      	b.n	9000d498 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d48c:	f7fc fa98 	bl	900099c0 <HAL_GetTick>
9000d490:	1bc0      	subs	r0, r0, r7
9000d492:	4540      	cmp	r0, r8
9000d494:	f200 808b 	bhi.w	9000d5ae <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d498:	6933      	ldr	r3, [r6, #16]
9000d49a:	6862      	ldr	r2, [r4, #4]
9000d49c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d4a0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000d4a4:	d1f2      	bne.n	9000d48c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d4a6:	6823      	ldr	r3, [r4, #0]
9000d4a8:	0799      	lsls	r1, r3, #30
9000d4aa:	d506      	bpl.n	9000d4ba <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d4ac:	68e1      	ldr	r1, [r4, #12]
9000d4ae:	4844      	ldr	r0, [pc, #272]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d4b0:	6982      	ldr	r2, [r0, #24]
9000d4b2:	f002 020f 	and.w	r2, r2, #15
9000d4b6:	428a      	cmp	r2, r1
9000d4b8:	d869      	bhi.n	9000d58e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000d4ba:	4940      	ldr	r1, [pc, #256]	; (9000d5bc <HAL_RCC_ClockConfig+0x238>)
9000d4bc:	680a      	ldr	r2, [r1, #0]
9000d4be:	f002 020f 	and.w	r2, r2, #15
9000d4c2:	42aa      	cmp	r2, r5
9000d4c4:	d90a      	bls.n	9000d4dc <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d4c6:	680a      	ldr	r2, [r1, #0]
9000d4c8:	f022 020f 	bic.w	r2, r2, #15
9000d4cc:	432a      	orrs	r2, r5
9000d4ce:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d4d0:	680a      	ldr	r2, [r1, #0]
9000d4d2:	f002 020f 	and.w	r2, r2, #15
9000d4d6:	42aa      	cmp	r2, r5
9000d4d8:	f47f af6b 	bne.w	9000d3b2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d4dc:	075a      	lsls	r2, r3, #29
9000d4de:	d50b      	bpl.n	9000d4f8 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d4e0:	4937      	ldr	r1, [pc, #220]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d4e2:	6920      	ldr	r0, [r4, #16]
9000d4e4:	698a      	ldr	r2, [r1, #24]
9000d4e6:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d4ea:	4290      	cmp	r0, r2
9000d4ec:	d204      	bcs.n	9000d4f8 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d4ee:	698a      	ldr	r2, [r1, #24]
9000d4f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d4f4:	4302      	orrs	r2, r0
9000d4f6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d4f8:	071f      	lsls	r7, r3, #28
9000d4fa:	d50b      	bpl.n	9000d514 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d4fc:	4930      	ldr	r1, [pc, #192]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d4fe:	6960      	ldr	r0, [r4, #20]
9000d500:	69ca      	ldr	r2, [r1, #28]
9000d502:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d506:	4290      	cmp	r0, r2
9000d508:	d204      	bcs.n	9000d514 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d50a:	69ca      	ldr	r2, [r1, #28]
9000d50c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d510:	4302      	orrs	r2, r0
9000d512:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d514:	06de      	lsls	r6, r3, #27
9000d516:	d50b      	bpl.n	9000d530 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d518:	4929      	ldr	r1, [pc, #164]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d51a:	69a0      	ldr	r0, [r4, #24]
9000d51c:	69ca      	ldr	r2, [r1, #28]
9000d51e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d522:	4290      	cmp	r0, r2
9000d524:	d204      	bcs.n	9000d530 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d526:	69ca      	ldr	r2, [r1, #28]
9000d528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d52c:	4302      	orrs	r2, r0
9000d52e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d530:	069d      	lsls	r5, r3, #26
9000d532:	d50b      	bpl.n	9000d54c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d534:	4a22      	ldr	r2, [pc, #136]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d536:	69e1      	ldr	r1, [r4, #28]
9000d538:	6a13      	ldr	r3, [r2, #32]
9000d53a:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000d53e:	4299      	cmp	r1, r3
9000d540:	d204      	bcs.n	9000d54c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d542:	6a13      	ldr	r3, [r2, #32]
9000d544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000d548:	430b      	orrs	r3, r1
9000d54a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d54c:	f7ff fe7a 	bl	9000d244 <HAL_RCC_GetSysClockFreq>
9000d550:	4a1b      	ldr	r2, [pc, #108]	; (9000d5c0 <HAL_RCC_ClockConfig+0x23c>)
9000d552:	4603      	mov	r3, r0
9000d554:	481b      	ldr	r0, [pc, #108]	; (9000d5c4 <HAL_RCC_ClockConfig+0x240>)
9000d556:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d558:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d55a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000d55e:	4d1a      	ldr	r5, [pc, #104]	; (9000d5c8 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d560:	f002 020f 	and.w	r2, r2, #15
9000d564:	4c19      	ldr	r4, [pc, #100]	; (9000d5cc <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d566:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d568:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d56a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000d56e:	4818      	ldr	r0, [pc, #96]	; (9000d5d0 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d570:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d574:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000d576:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000d578:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d57a:	40d3      	lsrs	r3, r2
9000d57c:	6023      	str	r3, [r4, #0]
}
9000d57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000d582:	f7f7 bbdb 	b.w	90004d3c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000d586:	07da      	lsls	r2, r3, #31
9000d588:	f53f af60 	bmi.w	9000d44c <HAL_RCC_ClockConfig+0xc8>
9000d58c:	e795      	b.n	9000d4ba <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000d58e:	6982      	ldr	r2, [r0, #24]
9000d590:	f022 020f 	bic.w	r2, r2, #15
9000d594:	430a      	orrs	r2, r1
9000d596:	6182      	str	r2, [r0, #24]
9000d598:	e78f      	b.n	9000d4ba <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d59a:	019f      	lsls	r7, r3, #6
9000d59c:	f53f af6a 	bmi.w	9000d474 <HAL_RCC_ClockConfig+0xf0>
9000d5a0:	e707      	b.n	9000d3b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000d5a2:	2001      	movs	r0, #1
}
9000d5a4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d5a6:	039b      	lsls	r3, r3, #14
9000d5a8:	f53f af64 	bmi.w	9000d474 <HAL_RCC_ClockConfig+0xf0>
9000d5ac:	e701      	b.n	9000d3b2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000d5ae:	2003      	movs	r0, #3
9000d5b0:	e700      	b.n	9000d3b4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000d5b2:	05de      	lsls	r6, r3, #23
9000d5b4:	f53f af5e 	bmi.w	9000d474 <HAL_RCC_ClockConfig+0xf0>
9000d5b8:	e6fb      	b.n	9000d3b2 <HAL_RCC_ClockConfig+0x2e>
9000d5ba:	bf00      	nop
9000d5bc:	52002000 	.word	0x52002000
9000d5c0:	58024400 	.word	0x58024400
9000d5c4:	9002b730 	.word	0x9002b730
9000d5c8:	24000054 	.word	0x24000054
9000d5cc:	24000058 	.word	0x24000058
9000d5d0:	24000060 	.word	0x24000060

9000d5d4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d5d4:	4a1c      	ldr	r2, [pc, #112]	; (9000d648 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000d5d6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d5d8:	6913      	ldr	r3, [r2, #16]
9000d5da:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d5de:	2b10      	cmp	r3, #16
9000d5e0:	d021      	beq.n	9000d626 <HAL_RCC_GetPCLK1Freq+0x52>
9000d5e2:	2b18      	cmp	r3, #24
9000d5e4:	d02a      	beq.n	9000d63c <HAL_RCC_GetPCLK1Freq+0x68>
9000d5e6:	b303      	cbz	r3, 9000d62a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d5e8:	4818      	ldr	r0, [pc, #96]	; (9000d64c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5ea:	4a17      	ldr	r2, [pc, #92]	; (9000d648 <HAL_RCC_GetPCLK1Freq+0x74>)
9000d5ec:	4918      	ldr	r1, [pc, #96]	; (9000d650 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000d5ee:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d5f0:	4c18      	ldr	r4, [pc, #96]	; (9000d654 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5f2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d5f6:	4d18      	ldr	r5, [pc, #96]	; (9000d658 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d5f8:	5ccb      	ldrb	r3, [r1, r3]
9000d5fa:	f003 031f 	and.w	r3, r3, #31
9000d5fe:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d600:	6993      	ldr	r3, [r2, #24]
9000d602:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d606:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d608:	5ccb      	ldrb	r3, [r1, r3]
9000d60a:	f003 031f 	and.w	r3, r3, #31
9000d60e:	fa20 f303 	lsr.w	r3, r0, r3
9000d612:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000d614:	69d2      	ldr	r2, [r2, #28]
9000d616:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000d61a:	5c88      	ldrb	r0, [r1, r2]
9000d61c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000d620:	fa23 f000 	lsr.w	r0, r3, r0
9000d624:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d626:	480d      	ldr	r0, [pc, #52]	; (9000d65c <HAL_RCC_GetPCLK1Freq+0x88>)
9000d628:	e7df      	b.n	9000d5ea <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d62a:	6813      	ldr	r3, [r2, #0]
9000d62c:	069b      	lsls	r3, r3, #26
9000d62e:	d508      	bpl.n	9000d642 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d630:	6813      	ldr	r3, [r2, #0]
9000d632:	480b      	ldr	r0, [pc, #44]	; (9000d660 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d634:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d638:	40d8      	lsrs	r0, r3
9000d63a:	e7d6      	b.n	9000d5ea <HAL_RCC_GetPCLK1Freq+0x16>
9000d63c:	f7ff fa8a 	bl	9000cb54 <HAL_RCC_GetSysClockFreq.part.0>
9000d640:	e7d3      	b.n	9000d5ea <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d642:	4807      	ldr	r0, [pc, #28]	; (9000d660 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000d644:	e7d1      	b.n	9000d5ea <HAL_RCC_GetPCLK1Freq+0x16>
9000d646:	bf00      	nop
9000d648:	58024400 	.word	0x58024400
9000d64c:	003d0900 	.word	0x003d0900
9000d650:	9002b730 	.word	0x9002b730
9000d654:	24000058 	.word	0x24000058
9000d658:	24000054 	.word	0x24000054
9000d65c:	017d7840 	.word	0x017d7840
9000d660:	03d09000 	.word	0x03d09000

9000d664 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d664:	4a1c      	ldr	r2, [pc, #112]	; (9000d6d8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000d666:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d668:	6913      	ldr	r3, [r2, #16]
9000d66a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d66e:	2b10      	cmp	r3, #16
9000d670:	d021      	beq.n	9000d6b6 <HAL_RCC_GetPCLK2Freq+0x52>
9000d672:	2b18      	cmp	r3, #24
9000d674:	d02a      	beq.n	9000d6cc <HAL_RCC_GetPCLK2Freq+0x68>
9000d676:	b303      	cbz	r3, 9000d6ba <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000d678:	4818      	ldr	r0, [pc, #96]	; (9000d6dc <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d67a:	4a17      	ldr	r2, [pc, #92]	; (9000d6d8 <HAL_RCC_GetPCLK2Freq+0x74>)
9000d67c:	4918      	ldr	r1, [pc, #96]	; (9000d6e0 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000d67e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d680:	4c18      	ldr	r4, [pc, #96]	; (9000d6e4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d682:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000d686:	4d18      	ldr	r5, [pc, #96]	; (9000d6e8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000d688:	5ccb      	ldrb	r3, [r1, r3]
9000d68a:	f003 031f 	and.w	r3, r3, #31
9000d68e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d690:	6993      	ldr	r3, [r2, #24]
9000d692:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000d696:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d698:	5ccb      	ldrb	r3, [r1, r3]
9000d69a:	f003 031f 	and.w	r3, r3, #31
9000d69e:	fa20 f303 	lsr.w	r3, r0, r3
9000d6a2:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000d6a4:	69d2      	ldr	r2, [r2, #28]
9000d6a6:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000d6aa:	5c88      	ldrb	r0, [r1, r2]
9000d6ac:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000d6b0:	fa23 f000 	lsr.w	r0, r3, r0
9000d6b4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d6b6:	480d      	ldr	r0, [pc, #52]	; (9000d6ec <HAL_RCC_GetPCLK2Freq+0x88>)
9000d6b8:	e7df      	b.n	9000d67a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d6ba:	6813      	ldr	r3, [r2, #0]
9000d6bc:	069b      	lsls	r3, r3, #26
9000d6be:	d508      	bpl.n	9000d6d2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d6c0:	6813      	ldr	r3, [r2, #0]
9000d6c2:	480b      	ldr	r0, [pc, #44]	; (9000d6f0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d6c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d6c8:	40d8      	lsrs	r0, r3
9000d6ca:	e7d6      	b.n	9000d67a <HAL_RCC_GetPCLK2Freq+0x16>
9000d6cc:	f7ff fa42 	bl	9000cb54 <HAL_RCC_GetSysClockFreq.part.0>
9000d6d0:	e7d3      	b.n	9000d67a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d6d2:	4807      	ldr	r0, [pc, #28]	; (9000d6f0 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000d6d4:	e7d1      	b.n	9000d67a <HAL_RCC_GetPCLK2Freq+0x16>
9000d6d6:	bf00      	nop
9000d6d8:	58024400 	.word	0x58024400
9000d6dc:	003d0900 	.word	0x003d0900
9000d6e0:	9002b730 	.word	0x9002b730
9000d6e4:	24000058 	.word	0x24000058
9000d6e8:	24000054 	.word	0x24000054
9000d6ec:	017d7840 	.word	0x017d7840
9000d6f0:	03d09000 	.word	0x03d09000

9000d6f4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d6f4:	4b13      	ldr	r3, [pc, #76]	; (9000d744 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000d6f6:	223f      	movs	r2, #63	; 0x3f
9000d6f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000d6fa:	691a      	ldr	r2, [r3, #16]
9000d6fc:	f002 0207 	and.w	r2, r2, #7
9000d700:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000d702:	699a      	ldr	r2, [r3, #24]
9000d704:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000d708:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000d70a:	699a      	ldr	r2, [r3, #24]
9000d70c:	f002 020f 	and.w	r2, r2, #15
9000d710:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000d712:	699a      	ldr	r2, [r3, #24]
9000d714:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d718:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000d71a:	69da      	ldr	r2, [r3, #28]
9000d71c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d720:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000d722:	69da      	ldr	r2, [r3, #28]
9000d724:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d728:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d72a:	6a1b      	ldr	r3, [r3, #32]
{
9000d72c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d72e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d732:	4c05      	ldr	r4, [pc, #20]	; (9000d748 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000d734:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d736:	6823      	ldr	r3, [r4, #0]
}
9000d738:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000d73c:	f003 030f 	and.w	r3, r3, #15
9000d740:	600b      	str	r3, [r1, #0]
}
9000d742:	4770      	bx	lr
9000d744:	58024400 	.word	0x58024400
9000d748:	52002000 	.word	0x52002000

9000d74c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d74e:	4c3a      	ldr	r4, [pc, #232]	; (9000d838 <RCCEx_PLL2_Config+0xec>)
9000d750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d752:	f003 0303 	and.w	r3, r3, #3
9000d756:	2b03      	cmp	r3, #3
9000d758:	d067      	beq.n	9000d82a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000d75a:	6823      	ldr	r3, [r4, #0]
9000d75c:	4606      	mov	r6, r0
9000d75e:	460f      	mov	r7, r1
9000d760:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000d764:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d766:	f7fc f92b 	bl	900099c0 <HAL_GetTick>
9000d76a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d76c:	e004      	b.n	9000d778 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d76e:	f7fc f927 	bl	900099c0 <HAL_GetTick>
9000d772:	1b43      	subs	r3, r0, r5
9000d774:	2b02      	cmp	r3, #2
9000d776:	d856      	bhi.n	9000d826 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000d778:	6823      	ldr	r3, [r4, #0]
9000d77a:	011a      	lsls	r2, r3, #4
9000d77c:	d4f7      	bmi.n	9000d76e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000d77e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d780:	6832      	ldr	r2, [r6, #0]
9000d782:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000d786:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000d78a:	62a3      	str	r3, [r4, #40]	; 0x28
9000d78c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d790:	3b01      	subs	r3, #1
9000d792:	3a01      	subs	r2, #1
9000d794:	025b      	lsls	r3, r3, #9
9000d796:	0412      	lsls	r2, r2, #16
9000d798:	b29b      	uxth	r3, r3
9000d79a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d79e:	4313      	orrs	r3, r2
9000d7a0:	6872      	ldr	r2, [r6, #4]
9000d7a2:	3a01      	subs	r2, #1
9000d7a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d7a8:	4313      	orrs	r3, r2
9000d7aa:	6932      	ldr	r2, [r6, #16]
9000d7ac:	3a01      	subs	r2, #1
9000d7ae:	0612      	lsls	r2, r2, #24
9000d7b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d7b4:	4313      	orrs	r3, r2
9000d7b6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000d7b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d7ba:	6972      	ldr	r2, [r6, #20]
9000d7bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d7c0:	4313      	orrs	r3, r2
9000d7c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d7c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d7c6:	69b3      	ldr	r3, [r6, #24]
9000d7c8:	f022 0220 	bic.w	r2, r2, #32
9000d7cc:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d7ce:	4b1b      	ldr	r3, [pc, #108]	; (9000d83c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000d7d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000d7d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d7d4:	f022 0210 	bic.w	r2, r2, #16
9000d7d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000d7da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000d7dc:	69f2      	ldr	r2, [r6, #28]
9000d7de:	400b      	ands	r3, r1
9000d7e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d7e4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000d7e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d7e8:	f043 0310 	orr.w	r3, r3, #16
9000d7ec:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d7ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d7f0:	b1ef      	cbz	r7, 9000d82e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d7f2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000d7f4:	bf0c      	ite	eq
9000d7f6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000d7fa:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000d7fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000d800:	4c0d      	ldr	r4, [pc, #52]	; (9000d838 <RCCEx_PLL2_Config+0xec>)
9000d802:	6823      	ldr	r3, [r4, #0]
9000d804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000d808:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d80a:	f7fc f8d9 	bl	900099c0 <HAL_GetTick>
9000d80e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d810:	e004      	b.n	9000d81c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000d812:	f7fc f8d5 	bl	900099c0 <HAL_GetTick>
9000d816:	1b40      	subs	r0, r0, r5
9000d818:	2802      	cmp	r0, #2
9000d81a:	d804      	bhi.n	9000d826 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000d81c:	6823      	ldr	r3, [r4, #0]
9000d81e:	011b      	lsls	r3, r3, #4
9000d820:	d5f7      	bpl.n	9000d812 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000d822:	2000      	movs	r0, #0
}
9000d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d826:	2003      	movs	r0, #3
}
9000d828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d82a:	2001      	movs	r0, #1
}
9000d82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000d82e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000d832:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d834:	e7e4      	b.n	9000d800 <RCCEx_PLL2_Config+0xb4>
9000d836:	bf00      	nop
9000d838:	58024400 	.word	0x58024400
9000d83c:	ffff0007 	.word	0xffff0007

9000d840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000d840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000d842:	4c3a      	ldr	r4, [pc, #232]	; (9000d92c <RCCEx_PLL3_Config+0xec>)
9000d844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d846:	f003 0303 	and.w	r3, r3, #3
9000d84a:	2b03      	cmp	r3, #3
9000d84c:	d067      	beq.n	9000d91e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000d84e:	6823      	ldr	r3, [r4, #0]
9000d850:	4606      	mov	r6, r0
9000d852:	460f      	mov	r7, r1
9000d854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000d858:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d85a:	f7fc f8b1 	bl	900099c0 <HAL_GetTick>
9000d85e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d860:	e004      	b.n	9000d86c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d862:	f7fc f8ad 	bl	900099c0 <HAL_GetTick>
9000d866:	1b43      	subs	r3, r0, r5
9000d868:	2b02      	cmp	r3, #2
9000d86a:	d856      	bhi.n	9000d91a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000d86c:	6823      	ldr	r3, [r4, #0]
9000d86e:	009a      	lsls	r2, r3, #2
9000d870:	d4f7      	bmi.n	9000d862 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000d872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000d874:	6832      	ldr	r2, [r6, #0]
9000d876:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000d87a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000d87e:	62a3      	str	r3, [r4, #40]	; 0x28
9000d880:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000d884:	3b01      	subs	r3, #1
9000d886:	3a01      	subs	r2, #1
9000d888:	025b      	lsls	r3, r3, #9
9000d88a:	0412      	lsls	r2, r2, #16
9000d88c:	b29b      	uxth	r3, r3
9000d88e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d892:	4313      	orrs	r3, r2
9000d894:	6872      	ldr	r2, [r6, #4]
9000d896:	3a01      	subs	r2, #1
9000d898:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d89c:	4313      	orrs	r3, r2
9000d89e:	6932      	ldr	r2, [r6, #16]
9000d8a0:	3a01      	subs	r2, #1
9000d8a2:	0612      	lsls	r2, r2, #24
9000d8a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d8a8:	4313      	orrs	r3, r2
9000d8aa:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000d8ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d8ae:	6972      	ldr	r2, [r6, #20]
9000d8b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000d8b4:	4313      	orrs	r3, r2
9000d8b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d8b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d8ba:	69b3      	ldr	r3, [r6, #24]
9000d8bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000d8c0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d8c2:	4b1b      	ldr	r3, [pc, #108]	; (9000d930 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000d8c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000d8c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d8c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000d8cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000d8ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000d8d0:	69f2      	ldr	r2, [r6, #28]
9000d8d2:	400b      	ands	r3, r1
9000d8d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000d8d8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000d8da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d8e0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d8e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000d8e4:	b1ef      	cbz	r7, 9000d922 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000d8e6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000d8e8:	bf0c      	ite	eq
9000d8ea:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000d8ee:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000d8f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000d8f4:	4c0d      	ldr	r4, [pc, #52]	; (9000d92c <RCCEx_PLL3_Config+0xec>)
9000d8f6:	6823      	ldr	r3, [r4, #0]
9000d8f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000d8fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000d8fe:	f7fc f85f 	bl	900099c0 <HAL_GetTick>
9000d902:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d904:	e004      	b.n	9000d910 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000d906:	f7fc f85b 	bl	900099c0 <HAL_GetTick>
9000d90a:	1b40      	subs	r0, r0, r5
9000d90c:	2802      	cmp	r0, #2
9000d90e:	d804      	bhi.n	9000d91a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000d910:	6823      	ldr	r3, [r4, #0]
9000d912:	009b      	lsls	r3, r3, #2
9000d914:	d5f7      	bpl.n	9000d906 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000d916:	2000      	movs	r0, #0
}
9000d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000d91a:	2003      	movs	r0, #3
}
9000d91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000d91e:	2001      	movs	r0, #1
}
9000d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000d922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000d926:	62e3      	str	r3, [r4, #44]	; 0x2c
9000d928:	e7e4      	b.n	9000d8f4 <RCCEx_PLL3_Config+0xb4>
9000d92a:	bf00      	nop
9000d92c:	58024400 	.word	0x58024400
9000d930:	ffff0007 	.word	0xffff0007

9000d934 <HAL_RCCEx_PeriphCLKConfig>:
{
9000d934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d938:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000d93c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000d93e:	011d      	lsls	r5, r3, #4
9000d940:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000d944:	d523      	bpl.n	9000d98e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d946:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000d948:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000d94c:	f000 8553 	beq.w	9000e3f6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000d950:	d812      	bhi.n	9000d978 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000d952:	2900      	cmp	r1, #0
9000d954:	f000 85a9 	beq.w	9000e4aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000d958:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000d95c:	f040 85a2 	bne.w	9000e4a4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000d960:	2102      	movs	r1, #2
9000d962:	3008      	adds	r0, #8
9000d964:	f7ff fef2 	bl	9000d74c <RCCEx_PLL2_Config>
9000d968:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000d96a:	2e00      	cmp	r6, #0
9000d96c:	f040 8522 	bne.w	9000e3b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d970:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d972:	e9d4 3200 	ldrd	r3, r2, [r4]
9000d976:	e003      	b.n	9000d980 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000d978:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000d97c:	f040 8592 	bne.w	9000e4a4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000d980:	4dae      	ldr	r5, [pc, #696]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d982:	2600      	movs	r6, #0
9000d984:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000d986:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000d98a:	4301      	orrs	r1, r0
9000d98c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000d98e:	05d8      	lsls	r0, r3, #23
9000d990:	d50a      	bpl.n	9000d9a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000d992:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000d994:	2904      	cmp	r1, #4
9000d996:	d806      	bhi.n	9000d9a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000d998:	e8df f011 	tbh	[pc, r1, lsl #1]
9000d99c:	053d0536 	.word	0x053d0536
9000d9a0:	0323051a 	.word	0x0323051a
9000d9a4:	0323      	.short	0x0323
9000d9a6:	2601      	movs	r6, #1
9000d9a8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000d9aa:	0599      	lsls	r1, r3, #22
9000d9ac:	d51d      	bpl.n	9000d9ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000d9ae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000d9b0:	2980      	cmp	r1, #128	; 0x80
9000d9b2:	f000 8516 	beq.w	9000e3e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000d9b6:	f200 80f9 	bhi.w	9000dbac <HAL_RCCEx_PeriphCLKConfig+0x278>
9000d9ba:	2900      	cmp	r1, #0
9000d9bc:	f000 8433 	beq.w	9000e226 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000d9c0:	2940      	cmp	r1, #64	; 0x40
9000d9c2:	f040 80fa 	bne.w	9000dbba <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000d9c6:	2100      	movs	r1, #0
9000d9c8:	f104 0008 	add.w	r0, r4, #8
9000d9cc:	f7ff febe 	bl	9000d74c <RCCEx_PLL2_Config>
9000d9d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d9d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000d9d6:	2d00      	cmp	r5, #0
9000d9d8:	f040 83fe 	bne.w	9000e1d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000d9dc:	4f97      	ldr	r7, [pc, #604]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000d9de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000d9e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000d9e2:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000d9e6:	4301      	orrs	r1, r0
9000d9e8:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000d9ea:	055f      	lsls	r7, r3, #21
9000d9ec:	d521      	bpl.n	9000da32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000d9ee:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000d9f2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000d9f6:	f000 8521 	beq.w	9000e43c <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000d9fa:	f200 80e1 	bhi.w	9000dbc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000d9fe:	2900      	cmp	r1, #0
9000da00:	f000 8418 	beq.w	9000e234 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000da04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000da08:	f040 80e2 	bne.w	9000dbd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000da0c:	2100      	movs	r1, #0
9000da0e:	f104 0008 	add.w	r0, r4, #8
9000da12:	f7ff fe9b 	bl	9000d74c <RCCEx_PLL2_Config>
9000da16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000da18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da1c:	2d00      	cmp	r5, #0
9000da1e:	f040 83e2 	bne.w	9000e1e6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000da22:	4f86      	ldr	r7, [pc, #536]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da24:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000da28:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000da2a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000da2e:	4301      	orrs	r1, r0
9000da30:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000da32:	0518      	lsls	r0, r3, #20
9000da34:	d521      	bpl.n	9000da7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000da36:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000da3a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000da3e:	f000 84bd 	beq.w	9000e3bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000da42:	f200 80c8 	bhi.w	9000dbd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000da46:	2900      	cmp	r1, #0
9000da48:	f000 83e7 	beq.w	9000e21a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000da4c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000da50:	f040 80c9 	bne.w	9000dbe6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000da54:	2100      	movs	r1, #0
9000da56:	f104 0008 	add.w	r0, r4, #8
9000da5a:	f7ff fe77 	bl	9000d74c <RCCEx_PLL2_Config>
9000da5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000da60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000da64:	2d00      	cmp	r5, #0
9000da66:	f040 83b5 	bne.w	9000e1d4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000da6a:	4f74      	ldr	r7, [pc, #464]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da6c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000da70:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000da72:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000da76:	4301      	orrs	r1, r0
9000da78:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000da7a:	0199      	lsls	r1, r3, #6
9000da7c:	d518      	bpl.n	9000dab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000da7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000da80:	2920      	cmp	r1, #32
9000da82:	f000 841f 	beq.w	9000e2c4 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000da86:	f200 80b1 	bhi.w	9000dbec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000da8a:	b139      	cbz	r1, 9000da9c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000da8c:	2910      	cmp	r1, #16
9000da8e:	f040 80b0 	bne.w	9000dbf2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000da92:	486a      	ldr	r0, [pc, #424]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000da94:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000da96:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000da9a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000da9c:	2d00      	cmp	r5, #0
9000da9e:	f040 83d8 	bne.w	9000e252 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000daa2:	4f66      	ldr	r7, [pc, #408]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000daa4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000daa6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000daa8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000daac:	4301      	orrs	r1, r0
9000daae:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000dab0:	04df      	lsls	r7, r3, #19
9000dab2:	d51f      	bpl.n	9000daf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000dab4:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000dab6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000daba:	f000 84b5 	beq.w	9000e428 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000dabe:	f200 809b 	bhi.w	9000dbf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000dac2:	2900      	cmp	r1, #0
9000dac4:	f000 83a3 	beq.w	9000e20e <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000dac8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000dacc:	f040 809c 	bne.w	9000dc08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dad0:	2100      	movs	r1, #0
9000dad2:	f104 0008 	add.w	r0, r4, #8
9000dad6:	f7ff fe39 	bl	9000d74c <RCCEx_PLL2_Config>
9000dada:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000dadc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dae0:	2d00      	cmp	r5, #0
9000dae2:	f040 837b 	bne.w	9000e1dc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000dae6:	4f55      	ldr	r7, [pc, #340]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000dae8:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000daea:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000daec:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000daf0:	4301      	orrs	r1, r0
9000daf2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000daf4:	0498      	lsls	r0, r3, #18
9000daf6:	d51d      	bpl.n	9000db34 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000daf8:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000dafa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000dafe:	f000 8410 	beq.w	9000e322 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000db02:	f200 8084 	bhi.w	9000dc0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000db06:	b159      	cbz	r1, 9000db20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000db08:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000db0c:	f040 8087 	bne.w	9000dc1e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000db10:	2101      	movs	r1, #1
9000db12:	f104 0008 	add.w	r0, r4, #8
9000db16:	f7ff fe19 	bl	9000d74c <RCCEx_PLL2_Config>
9000db1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000db1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000db20:	2d00      	cmp	r5, #0
9000db22:	f040 839a 	bne.w	9000e25a <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000db26:	4f45      	ldr	r7, [pc, #276]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000db28:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000db2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000db2c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000db30:	4301      	orrs	r1, r0
9000db32:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000db34:	0459      	lsls	r1, r3, #17
9000db36:	d51d      	bpl.n	9000db74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000db38:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000db3c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000db40:	f000 83fb 	beq.w	9000e33a <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000db44:	d86e      	bhi.n	9000dc24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000db46:	b151      	cbz	r1, 9000db5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000db48:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000db4c:	d172      	bne.n	9000dc34 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000db4e:	2101      	movs	r1, #1
9000db50:	f104 0008 	add.w	r0, r4, #8
9000db54:	f7ff fdfa 	bl	9000d74c <RCCEx_PLL2_Config>
9000db58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000db5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000db5e:	2d00      	cmp	r5, #0
9000db60:	f040 837f 	bne.w	9000e262 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000db64:	4f35      	ldr	r7, [pc, #212]	; (9000dc3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000db66:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000db6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000db6c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000db70:	4301      	orrs	r1, r0
9000db72:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000db74:	041f      	lsls	r7, r3, #16
9000db76:	d50d      	bpl.n	9000db94 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000db78:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000db7a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000db7e:	f000 83c8 	beq.w	9000e312 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000db82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000db86:	f000 823b 	beq.w	9000e000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000db8a:	2900      	cmp	r1, #0
9000db8c:	f000 8240 	beq.w	9000e010 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000db90:	2601      	movs	r6, #1
9000db92:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000db94:	01d8      	lsls	r0, r3, #7
9000db96:	d562      	bpl.n	9000dc5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000db98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000db9a:	2903      	cmp	r1, #3
9000db9c:	f200 84bf 	bhi.w	9000e51e <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000dba0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dba4:	004e0053 	.word	0x004e0053
9000dba8:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000dbac:	29c0      	cmp	r1, #192	; 0xc0
9000dbae:	f43f af12 	beq.w	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000dbb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000dbb6:	f43f af0e 	beq.w	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000dbba:	2601      	movs	r6, #1
9000dbbc:	4635      	mov	r5, r6
9000dbbe:	e714      	b.n	9000d9ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000dbc0:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000dbc4:	f43f af2a 	beq.w	9000da1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000dbc8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000dbcc:	f43f af26 	beq.w	9000da1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000dbd0:	2601      	movs	r6, #1
9000dbd2:	4635      	mov	r5, r6
9000dbd4:	e72d      	b.n	9000da32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000dbd6:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000dbda:	f43f af43 	beq.w	9000da64 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000dbde:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000dbe2:	f43f af3f 	beq.w	9000da64 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000dbe6:	2601      	movs	r6, #1
9000dbe8:	4635      	mov	r5, r6
9000dbea:	e746      	b.n	9000da7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000dbec:	2930      	cmp	r1, #48	; 0x30
9000dbee:	f43f af55 	beq.w	9000da9c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000dbf2:	2601      	movs	r6, #1
9000dbf4:	4635      	mov	r5, r6
9000dbf6:	e75b      	b.n	9000dab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000dbf8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000dbfc:	f43f af70 	beq.w	9000dae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000dc00:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000dc04:	f43f af6c 	beq.w	9000dae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000dc08:	2601      	movs	r6, #1
9000dc0a:	4635      	mov	r5, r6
9000dc0c:	e772      	b.n	9000daf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000dc0e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000dc12:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000dc16:	d083      	beq.n	9000db20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000dc18:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000dc1c:	d080      	beq.n	9000db20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000dc1e:	2601      	movs	r6, #1
9000dc20:	4635      	mov	r5, r6
9000dc22:	e787      	b.n	9000db34 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000dc24:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000dc28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000dc2c:	d097      	beq.n	9000db5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000dc2e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000dc32:	d094      	beq.n	9000db5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000dc34:	2601      	movs	r6, #1
9000dc36:	4635      	mov	r5, r6
9000dc38:	e79c      	b.n	9000db74 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000dc3a:	bf00      	nop
9000dc3c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000dc40:	4839      	ldr	r0, [pc, #228]	; (9000dd28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000dc42:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000dc44:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000dc48:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000dc4a:	2d00      	cmp	r5, #0
9000dc4c:	f040 8303 	bne.w	9000e256 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000dc50:	4f35      	ldr	r7, [pc, #212]	; (9000dd28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000dc52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000dc54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000dc56:	f021 0103 	bic.w	r1, r1, #3
9000dc5a:	4301      	orrs	r1, r0
9000dc5c:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000dc5e:	0259      	lsls	r1, r3, #9
9000dc60:	f100 826a 	bmi.w	9000e138 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000dc64:	07d8      	lsls	r0, r3, #31
9000dc66:	d52f      	bpl.n	9000dcc8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000dc68:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000dc6a:	2928      	cmp	r1, #40	; 0x28
9000dc6c:	d82a      	bhi.n	9000dcc4 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000dc6e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dc72:	020a      	.short	0x020a
9000dc74:	00290029 	.word	0x00290029
9000dc78:	00290029 	.word	0x00290029
9000dc7c:	00290029 	.word	0x00290029
9000dc80:	02020029 	.word	0x02020029
9000dc84:	00290029 	.word	0x00290029
9000dc88:	00290029 	.word	0x00290029
9000dc8c:	00290029 	.word	0x00290029
9000dc90:	04070029 	.word	0x04070029
9000dc94:	00290029 	.word	0x00290029
9000dc98:	00290029 	.word	0x00290029
9000dc9c:	00290029 	.word	0x00290029
9000dca0:	020a0029 	.word	0x020a0029
9000dca4:	00290029 	.word	0x00290029
9000dca8:	00290029 	.word	0x00290029
9000dcac:	00290029 	.word	0x00290029
9000dcb0:	020a0029 	.word	0x020a0029
9000dcb4:	00290029 	.word	0x00290029
9000dcb8:	00290029 	.word	0x00290029
9000dcbc:	00290029 	.word	0x00290029
9000dcc0:	020a0029 	.word	0x020a0029
9000dcc4:	2601      	movs	r6, #1
9000dcc6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000dcc8:	0799      	lsls	r1, r3, #30
9000dcca:	d51d      	bpl.n	9000dd08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000dccc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000dcce:	2905      	cmp	r1, #5
9000dcd0:	f200 8421 	bhi.w	9000e516 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000dcd4:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dcd8:	0006000e 	.word	0x0006000e
9000dcdc:	000e03c8 	.word	0x000e03c8
9000dce0:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dce4:	2101      	movs	r1, #1
9000dce6:	f104 0008 	add.w	r0, r4, #8
9000dcea:	f7ff fd2f 	bl	9000d74c <RCCEx_PLL2_Config>
9000dcee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000dcf0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dcf4:	2d00      	cmp	r5, #0
9000dcf6:	f040 82b8 	bne.w	9000e26a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000dcfa:	4f0b      	ldr	r7, [pc, #44]	; (9000dd28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000dcfc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000dcfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dd00:	f021 0107 	bic.w	r1, r1, #7
9000dd04:	4301      	orrs	r1, r0
9000dd06:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000dd08:	075f      	lsls	r7, r3, #29
9000dd0a:	d522      	bpl.n	9000dd52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000dd0c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000dd10:	2905      	cmp	r1, #5
9000dd12:	f200 8408 	bhi.w	9000e526 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000dd16:	e8df f011 	tbh	[pc, r1, lsl #1]
9000dd1a:	0011      	.short	0x0011
9000dd1c:	039b0009 	.word	0x039b0009
9000dd20:	00110011 	.word	0x00110011
9000dd24:	0011      	.short	0x0011
9000dd26:	bf00      	nop
9000dd28:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000dd2c:	2101      	movs	r1, #1
9000dd2e:	f104 0008 	add.w	r0, r4, #8
9000dd32:	f7ff fd0b 	bl	9000d74c <RCCEx_PLL2_Config>
9000dd36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000dd38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd3c:	2d00      	cmp	r5, #0
9000dd3e:	f040 8286 	bne.w	9000e24e <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000dd42:	4fae      	ldr	r7, [pc, #696]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dd44:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000dd48:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000dd4a:	f021 0107 	bic.w	r1, r1, #7
9000dd4e:	4301      	orrs	r1, r0
9000dd50:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000dd52:	0698      	lsls	r0, r3, #26
9000dd54:	d51f      	bpl.n	9000dd96 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000dd56:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000dd5a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000dd5e:	f000 82f7 	beq.w	9000e350 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000dd62:	f200 810b 	bhi.w	9000df7c <HAL_RCCEx_PeriphCLKConfig+0x648>
9000dd66:	b159      	cbz	r1, 9000dd80 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000dd68:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000dd6c:	f040 8110 	bne.w	9000df90 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dd70:	2100      	movs	r1, #0
9000dd72:	f104 0008 	add.w	r0, r4, #8
9000dd76:	f7ff fce9 	bl	9000d74c <RCCEx_PLL2_Config>
9000dd7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000dd7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dd80:	2d00      	cmp	r5, #0
9000dd82:	f040 8260 	bne.w	9000e246 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000dd86:	4f9d      	ldr	r7, [pc, #628]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dd88:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000dd8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000dd8e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000dd92:	4301      	orrs	r1, r0
9000dd94:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000dd96:	0659      	lsls	r1, r3, #25
9000dd98:	d51f      	bpl.n	9000ddda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000dd9a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000dd9e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000dda2:	f000 829b 	beq.w	9000e2dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000dda6:	f200 80f6 	bhi.w	9000df96 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000ddaa:	b159      	cbz	r1, 9000ddc4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000ddac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000ddb0:	f040 80fb 	bne.w	9000dfaa <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ddb4:	2100      	movs	r1, #0
9000ddb6:	f104 0008 	add.w	r0, r4, #8
9000ddba:	f7ff fcc7 	bl	9000d74c <RCCEx_PLL2_Config>
9000ddbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000ddc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ddc4:	2d00      	cmp	r5, #0
9000ddc6:	f040 824e 	bne.w	9000e266 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000ddca:	4f8c      	ldr	r7, [pc, #560]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000ddcc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000ddd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ddd2:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000ddd6:	4301      	orrs	r1, r0
9000ddd8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000ddda:	061f      	lsls	r7, r3, #24
9000dddc:	d51f      	bpl.n	9000de1e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000ddde:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000dde2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000dde6:	f000 8289 	beq.w	9000e2fc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000ddea:	f200 80e1 	bhi.w	9000dfb0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000ddee:	b159      	cbz	r1, 9000de08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000ddf0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000ddf4:	f040 80e6 	bne.w	9000dfc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ddf8:	2100      	movs	r1, #0
9000ddfa:	f104 0008 	add.w	r0, r4, #8
9000ddfe:	f7ff fca5 	bl	9000d74c <RCCEx_PLL2_Config>
9000de02:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000de04:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000de08:	2d00      	cmp	r5, #0
9000de0a:	f040 8228 	bne.w	9000e25e <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000de0e:	4f7b      	ldr	r7, [pc, #492]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de10:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000de14:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000de16:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000de1a:	4301      	orrs	r1, r0
9000de1c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000de1e:	0718      	lsls	r0, r3, #28
9000de20:	d50b      	bpl.n	9000de3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000de22:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000de26:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000de2a:	f000 82a9 	beq.w	9000e380 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000de2e:	4f73      	ldr	r7, [pc, #460]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de30:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000de32:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000de36:	4301      	orrs	r1, r0
9000de38:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000de3a:	06d9      	lsls	r1, r3, #27
9000de3c:	d50b      	bpl.n	9000de56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000de3e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000de42:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000de46:	f000 82a8 	beq.w	9000e39a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000de4a:	4f6c      	ldr	r7, [pc, #432]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000de4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000de4e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000de52:	4301      	orrs	r1, r0
9000de54:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000de56:	031f      	lsls	r7, r3, #12
9000de58:	d50e      	bpl.n	9000de78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000de5a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000de5e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000de62:	f000 80f4 	beq.w	9000e04e <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000de66:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000de6a:	f000 80f8 	beq.w	9000e05e <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000de6e:	2900      	cmp	r1, #0
9000de70:	f000 821c 	beq.w	9000e2ac <HAL_RCCEx_PeriphCLKConfig+0x978>
9000de74:	2601      	movs	r6, #1
9000de76:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000de78:	0358      	lsls	r0, r3, #13
9000de7a:	d50f      	bpl.n	9000de9c <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000de7c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000de80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000de84:	f000 80cf 	beq.w	9000e026 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000de88:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000de8c:	f000 80d3 	beq.w	9000e036 <HAL_RCCEx_PeriphCLKConfig+0x702>
9000de90:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000de94:	f000 8202 	beq.w	9000e29c <HAL_RCCEx_PeriphCLKConfig+0x968>
9000de98:	2601      	movs	r6, #1
9000de9a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000de9c:	03d9      	lsls	r1, r3, #15
9000de9e:	d509      	bpl.n	9000deb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000dea0:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000dea2:	2900      	cmp	r1, #0
9000dea4:	f000 81f1 	beq.w	9000e28a <HAL_RCCEx_PeriphCLKConfig+0x956>
9000dea8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000deac:	f000 819d 	beq.w	9000e1ea <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000deb0:	2601      	movs	r6, #1
9000deb2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000deb4:	009f      	lsls	r7, r3, #2
9000deb6:	f100 80f1 	bmi.w	9000e09c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000deba:	0398      	lsls	r0, r3, #14
9000debc:	d50c      	bpl.n	9000ded8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000debe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000dec2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000dec6:	f000 81d8 	beq.w	9000e27a <HAL_RCCEx_PeriphCLKConfig+0x946>
9000deca:	d97e      	bls.n	9000dfca <HAL_RCCEx_PeriphCLKConfig+0x696>
9000decc:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000ded0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000ded4:	d07b      	beq.n	9000dfce <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000ded6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000ded8:	02d9      	lsls	r1, r3, #11
9000deda:	d506      	bpl.n	9000deea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000dedc:	4847      	ldr	r0, [pc, #284]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dede:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000dee0:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000dee2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000dee6:	4329      	orrs	r1, r5
9000dee8:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000deea:	00df      	lsls	r7, r3, #3
9000deec:	d507      	bpl.n	9000defe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000deee:	4843      	ldr	r0, [pc, #268]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000def0:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000def4:	6901      	ldr	r1, [r0, #16]
9000def6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000defa:	4329      	orrs	r1, r5
9000defc:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000defe:	029d      	lsls	r5, r3, #10
9000df00:	d506      	bpl.n	9000df10 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000df02:	483e      	ldr	r0, [pc, #248]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df04:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000df06:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000df08:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000df0c:	4329      	orrs	r1, r5
9000df0e:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000df10:	0058      	lsls	r0, r3, #1
9000df12:	d509      	bpl.n	9000df28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000df14:	4939      	ldr	r1, [pc, #228]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df16:	6908      	ldr	r0, [r1, #16]
9000df18:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000df1c:	6108      	str	r0, [r1, #16]
9000df1e:	6908      	ldr	r0, [r1, #16]
9000df20:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000df24:	4328      	orrs	r0, r5
9000df26:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000df28:	2b00      	cmp	r3, #0
9000df2a:	da06      	bge.n	9000df3a <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000df2c:	4833      	ldr	r0, [pc, #204]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df2e:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000df30:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000df32:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000df36:	4329      	orrs	r1, r5
9000df38:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000df3a:	0219      	lsls	r1, r3, #8
9000df3c:	d507      	bpl.n	9000df4e <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000df3e:	492f      	ldr	r1, [pc, #188]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000df40:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000df44:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000df46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000df4a:	4303      	orrs	r3, r0
9000df4c:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000df4e:	07d3      	lsls	r3, r2, #31
9000df50:	f100 80b0 	bmi.w	9000e0b4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000df54:	0797      	lsls	r7, r2, #30
9000df56:	f100 80ba 	bmi.w	9000e0ce <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000df5a:	0755      	lsls	r5, r2, #29
9000df5c:	f100 80c4 	bmi.w	9000e0e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000df60:	0710      	lsls	r0, r2, #28
9000df62:	f100 80ce 	bmi.w	9000e102 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000df66:	06d1      	lsls	r1, r2, #27
9000df68:	f100 80d8 	bmi.w	9000e11c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000df6c:	0692      	lsls	r2, r2, #26
9000df6e:	f100 8125 	bmi.w	9000e1bc <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000df72:	1e30      	subs	r0, r6, #0
9000df74:	bf18      	it	ne
9000df76:	2001      	movne	r0, #1
}
9000df78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000df7c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000df80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000df84:	f43f aefc 	beq.w	9000dd80 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000df88:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000df8c:	f43f aef8 	beq.w	9000dd80 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000df90:	2601      	movs	r6, #1
9000df92:	4635      	mov	r5, r6
9000df94:	e6ff      	b.n	9000dd96 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000df96:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000df9a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000df9e:	f43f af11 	beq.w	9000ddc4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000dfa2:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000dfa6:	f43f af0d 	beq.w	9000ddc4 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000dfaa:	2601      	movs	r6, #1
9000dfac:	4635      	mov	r5, r6
9000dfae:	e714      	b.n	9000ddda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000dfb0:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000dfb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000dfb8:	f43f af26 	beq.w	9000de08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000dfbc:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000dfc0:	f43f af22 	beq.w	9000de08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000dfc4:	2601      	movs	r6, #1
9000dfc6:	4635      	mov	r5, r6
9000dfc8:	e729      	b.n	9000de1e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000dfca:	2900      	cmp	r1, #0
9000dfcc:	d183      	bne.n	9000ded6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000dfce:	2d00      	cmp	r5, #0
9000dfd0:	f040 8151 	bne.w	9000e276 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000dfd4:	4d09      	ldr	r5, [pc, #36]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dfd6:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000dfd8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000dfdc:	4301      	orrs	r1, r0
9000dfde:	6569      	str	r1, [r5, #84]	; 0x54
9000dfe0:	e77a      	b.n	9000ded8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000dfe2:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000dfe4:	2d00      	cmp	r5, #0
9000dfe6:	f040 80fb 	bne.w	9000e1e0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000dfea:	4f04      	ldr	r7, [pc, #16]	; (9000dffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000dfec:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000dfee:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000dff0:	f021 0107 	bic.w	r1, r1, #7
9000dff4:	4301      	orrs	r1, r0
9000dff6:	6539      	str	r1, [r7, #80]	; 0x50
9000dff8:	e4d7      	b.n	9000d9aa <HAL_RCCEx_PeriphCLKConfig+0x76>
9000dffa:	bf00      	nop
9000dffc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e000:	2101      	movs	r1, #1
9000e002:	f104 0008 	add.w	r0, r4, #8
9000e006:	f7ff fba1 	bl	9000d74c <RCCEx_PLL2_Config>
9000e00a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000e00c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e010:	2d00      	cmp	r5, #0
9000e012:	f040 811a 	bne.w	9000e24a <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000e016:	4fb7      	ldr	r7, [pc, #732]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e018:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000e01a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000e01c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000e020:	4301      	orrs	r1, r0
9000e022:	6539      	str	r1, [r7, #80]	; 0x50
9000e024:	e5b6      	b.n	9000db94 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e026:	2101      	movs	r1, #1
9000e028:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e02c:	f7ff fc08 	bl	9000d840 <RCCEx_PLL3_Config>
9000e030:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000e032:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e036:	2d00      	cmp	r5, #0
9000e038:	f040 811b 	bne.w	9000e272 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000e03c:	4fad      	ldr	r7, [pc, #692]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e03e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000e042:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e044:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000e048:	4301      	orrs	r1, r0
9000e04a:	6579      	str	r1, [r7, #84]	; 0x54
9000e04c:	e726      	b.n	9000de9c <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e04e:	2102      	movs	r1, #2
9000e050:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e054:	f7ff fbf4 	bl	9000d840 <RCCEx_PLL3_Config>
9000e058:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e05a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e05e:	2d00      	cmp	r5, #0
9000e060:	f040 8105 	bne.w	9000e26e <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000e064:	4fa3      	ldr	r7, [pc, #652]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e066:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000e06a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e06c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000e070:	4301      	orrs	r1, r0
9000e072:	65b9      	str	r1, [r7, #88]	; 0x58
9000e074:	e700      	b.n	9000de78 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e076:	2101      	movs	r1, #1
9000e078:	f104 0008 	add.w	r0, r4, #8
9000e07c:	f7ff fb66 	bl	9000d74c <RCCEx_PLL2_Config>
9000e080:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e082:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e086:	2d00      	cmp	r5, #0
9000e088:	f040 80db 	bne.w	9000e242 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000e08c:	4f99      	ldr	r7, [pc, #612]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e08e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000e090:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e092:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000e096:	4301      	orrs	r1, r0
9000e098:	6579      	str	r1, [r7, #84]	; 0x54
9000e09a:	e615      	b.n	9000dcc8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e09c:	2102      	movs	r1, #2
9000e09e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e0a2:	f7ff fbcd 	bl	9000d840 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000e0a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e0aa:	2800      	cmp	r0, #0
9000e0ac:	f43f af05 	beq.w	9000deba <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000e0b0:	2601      	movs	r6, #1
9000e0b2:	e702      	b.n	9000deba <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e0b4:	2100      	movs	r1, #0
9000e0b6:	f104 0008 	add.w	r0, r4, #8
9000e0ba:	f7ff fb47 	bl	9000d74c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e0be:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e0c0:	2800      	cmp	r0, #0
9000e0c2:	f43f af47 	beq.w	9000df54 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e0c6:	0797      	lsls	r7, r2, #30
9000e0c8:	4606      	mov	r6, r0
9000e0ca:	f57f af46 	bpl.w	9000df5a <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e0ce:	2101      	movs	r1, #1
9000e0d0:	f104 0008 	add.w	r0, r4, #8
9000e0d4:	f7ff fb3a 	bl	9000d74c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e0d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e0da:	2800      	cmp	r0, #0
9000e0dc:	f43f af3d 	beq.w	9000df5a <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e0e0:	0755      	lsls	r5, r2, #29
9000e0e2:	4606      	mov	r6, r0
9000e0e4:	f57f af3c 	bpl.w	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e0e8:	2102      	movs	r1, #2
9000e0ea:	f104 0008 	add.w	r0, r4, #8
9000e0ee:	f7ff fb2d 	bl	9000d74c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e0f2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e0f4:	2800      	cmp	r0, #0
9000e0f6:	f43f af33 	beq.w	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e0fa:	4606      	mov	r6, r0
9000e0fc:	0710      	lsls	r0, r2, #28
9000e0fe:	f57f af32 	bpl.w	9000df66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e102:	2100      	movs	r1, #0
9000e104:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e108:	f7ff fb9a 	bl	9000d840 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e10c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e10e:	2800      	cmp	r0, #0
9000e110:	f43f af29 	beq.w	9000df66 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e114:	06d1      	lsls	r1, r2, #27
9000e116:	4606      	mov	r6, r0
9000e118:	f57f af28 	bpl.w	9000df6c <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e11c:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000e120:	2101      	movs	r1, #1
9000e122:	4628      	mov	r0, r5
9000e124:	f7ff fb8c 	bl	9000d840 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e128:	2800      	cmp	r0, #0
9000e12a:	f000 80c9 	beq.w	9000e2c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e12e:	6863      	ldr	r3, [r4, #4]
9000e130:	069b      	lsls	r3, r3, #26
9000e132:	d54c      	bpl.n	9000e1ce <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000e134:	4606      	mov	r6, r0
9000e136:	e043      	b.n	9000e1c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000e138:	4f6f      	ldr	r7, [pc, #444]	; (9000e2f8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000e13a:	683b      	ldr	r3, [r7, #0]
9000e13c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000e140:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000e142:	f7fb fc3d 	bl	900099c0 <HAL_GetTick>
9000e146:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e148:	e006      	b.n	9000e158 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000e14a:	f7fb fc39 	bl	900099c0 <HAL_GetTick>
9000e14e:	eba0 0008 	sub.w	r0, r0, r8
9000e152:	2864      	cmp	r0, #100	; 0x64
9000e154:	f200 81a0 	bhi.w	9000e498 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e158:	683b      	ldr	r3, [r7, #0]
9000e15a:	05da      	lsls	r2, r3, #23
9000e15c:	d5f5      	bpl.n	9000e14a <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000e15e:	2d00      	cmp	r5, #0
9000e160:	f040 81d4 	bne.w	9000e50c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000e164:	4a63      	ldr	r2, [pc, #396]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e166:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e16a:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000e16c:	4059      	eors	r1, r3
9000e16e:	f411 7f40 	tst.w	r1, #768	; 0x300
9000e172:	d00b      	beq.n	9000e18c <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e174:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000e176:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e178:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000e17c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000e180:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000e182:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000e184:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000e188:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000e18a:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000e18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000e190:	f000 819e 	beq.w	9000e4d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e194:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000e198:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000e19c:	f000 81ac 	beq.w	9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000e1a0:	4954      	ldr	r1, [pc, #336]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e1a2:	690a      	ldr	r2, [r1, #16]
9000e1a4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000e1a8:	610a      	str	r2, [r1, #16]
9000e1aa:	4852      	ldr	r0, [pc, #328]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e1ac:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000e1b0:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000e1b2:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e1b4:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e1b8:	6701      	str	r1, [r0, #112]	; 0x70
9000e1ba:	e553      	b.n	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e1bc:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e1c0:	2102      	movs	r1, #2
9000e1c2:	4628      	mov	r0, r5
9000e1c4:	f7ff fb3c 	bl	9000d840 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e1c8:	2800      	cmp	r0, #0
9000e1ca:	f43f aed2 	beq.w	9000df72 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000e1ce:	2001      	movs	r0, #1
}
9000e1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000e1d4:	462e      	mov	r6, r5
9000e1d6:	e450      	b.n	9000da7a <HAL_RCCEx_PeriphCLKConfig+0x146>
9000e1d8:	462e      	mov	r6, r5
9000e1da:	e406      	b.n	9000d9ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000e1dc:	462e      	mov	r6, r5
9000e1de:	e489      	b.n	9000daf4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000e1e0:	462e      	mov	r6, r5
9000e1e2:	f7ff bbe2 	b.w	9000d9aa <HAL_RCCEx_PeriphCLKConfig+0x76>
9000e1e6:	462e      	mov	r6, r5
9000e1e8:	e423      	b.n	9000da32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e1ea:	2102      	movs	r1, #2
9000e1ec:	f104 0008 	add.w	r0, r4, #8
9000e1f0:	f7ff faac 	bl	9000d74c <RCCEx_PLL2_Config>
9000e1f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000e1f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e1fa:	2d00      	cmp	r5, #0
9000e1fc:	d14c      	bne.n	9000e298 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000e1fe:	4f3d      	ldr	r7, [pc, #244]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e200:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000e202:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000e204:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000e208:	4301      	orrs	r1, r0
9000e20a:	64f9      	str	r1, [r7, #76]	; 0x4c
9000e20c:	e652      	b.n	9000deb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e20e:	4839      	ldr	r0, [pc, #228]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e210:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e212:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e216:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e218:	e462      	b.n	9000dae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e21a:	4836      	ldr	r0, [pc, #216]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e21c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e21e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e222:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e224:	e41e      	b.n	9000da64 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e226:	4833      	ldr	r0, [pc, #204]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e228:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e22a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e22e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e230:	f7ff bbd1 	b.w	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e234:	482f      	ldr	r0, [pc, #188]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e236:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e238:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e23c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e23e:	f7ff bbed 	b.w	9000da1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000e242:	462e      	mov	r6, r5
9000e244:	e540      	b.n	9000dcc8 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000e246:	462e      	mov	r6, r5
9000e248:	e5a5      	b.n	9000dd96 <HAL_RCCEx_PeriphCLKConfig+0x462>
9000e24a:	462e      	mov	r6, r5
9000e24c:	e4a2      	b.n	9000db94 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000e24e:	462e      	mov	r6, r5
9000e250:	e57f      	b.n	9000dd52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000e252:	462e      	mov	r6, r5
9000e254:	e42c      	b.n	9000dab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000e256:	462e      	mov	r6, r5
9000e258:	e501      	b.n	9000dc5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000e25a:	462e      	mov	r6, r5
9000e25c:	e46a      	b.n	9000db34 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000e25e:	462e      	mov	r6, r5
9000e260:	e5dd      	b.n	9000de1e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000e262:	462e      	mov	r6, r5
9000e264:	e486      	b.n	9000db74 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000e266:	462e      	mov	r6, r5
9000e268:	e5b7      	b.n	9000ddda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000e26a:	462e      	mov	r6, r5
9000e26c:	e54c      	b.n	9000dd08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000e26e:	462e      	mov	r6, r5
9000e270:	e602      	b.n	9000de78 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000e272:	462e      	mov	r6, r5
9000e274:	e612      	b.n	9000de9c <HAL_RCCEx_PeriphCLKConfig+0x568>
9000e276:	462e      	mov	r6, r5
9000e278:	e62e      	b.n	9000ded8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e27a:	4f1e      	ldr	r7, [pc, #120]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e27e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e282:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000e284:	2d00      	cmp	r5, #0
9000e286:	d1f6      	bne.n	9000e276 <HAL_RCCEx_PeriphCLKConfig+0x942>
9000e288:	e6a4      	b.n	9000dfd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e28a:	481a      	ldr	r0, [pc, #104]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e28c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e28e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e292:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e294:	2d00      	cmp	r5, #0
9000e296:	d0b2      	beq.n	9000e1fe <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000e298:	462e      	mov	r6, r5
9000e29a:	e60b      	b.n	9000deb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e29c:	4815      	ldr	r0, [pc, #84]	; (9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000e29e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e2a0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e2a4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e2a6:	2d00      	cmp	r5, #0
9000e2a8:	d1e3      	bne.n	9000e272 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000e2aa:	e6c7      	b.n	9000e03c <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e2ac:	f104 0008 	add.w	r0, r4, #8
9000e2b0:	f7ff fa4c 	bl	9000d74c <RCCEx_PLL2_Config>
9000e2b4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e2b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2ba:	2d00      	cmp	r5, #0
9000e2bc:	d1d7      	bne.n	9000e26e <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000e2be:	e6d1      	b.n	9000e064 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e2c0:	6862      	ldr	r2, [r4, #4]
9000e2c2:	e653      	b.n	9000df6c <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e2c4:	2102      	movs	r1, #2
9000e2c6:	f104 0008 	add.w	r0, r4, #8
9000e2ca:	f7ff fa3f 	bl	9000d74c <RCCEx_PLL2_Config>
9000e2ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000e2d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2d4:	2d00      	cmp	r5, #0
9000e2d6:	d1bc      	bne.n	9000e252 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000e2d8:	f7ff bbe3 	b.w	9000daa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e2dc:	2102      	movs	r1, #2
9000e2de:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e2e2:	f7ff faad 	bl	9000d840 <RCCEx_PLL3_Config>
9000e2e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000e2e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2ec:	2d00      	cmp	r5, #0
9000e2ee:	d1ba      	bne.n	9000e266 <HAL_RCCEx_PeriphCLKConfig+0x932>
9000e2f0:	e56b      	b.n	9000ddca <HAL_RCCEx_PeriphCLKConfig+0x496>
9000e2f2:	bf00      	nop
9000e2f4:	58024400 	.word	0x58024400
9000e2f8:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e2fc:	2102      	movs	r1, #2
9000e2fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e302:	f7ff fa9d 	bl	9000d840 <RCCEx_PLL3_Config>
9000e306:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000e308:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e30c:	2d00      	cmp	r5, #0
9000e30e:	d1a6      	bne.n	9000e25e <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000e310:	e57d      	b.n	9000de0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e312:	4886      	ldr	r0, [pc, #536]	; (9000e52c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e314:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e316:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e31a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e31c:	2d00      	cmp	r5, #0
9000e31e:	d194      	bne.n	9000e24a <HAL_RCCEx_PeriphCLKConfig+0x916>
9000e320:	e679      	b.n	9000e016 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e322:	2101      	movs	r1, #1
9000e324:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e328:	f7ff fa8a 	bl	9000d840 <RCCEx_PLL3_Config>
9000e32c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000e32e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e332:	2d00      	cmp	r5, #0
9000e334:	d191      	bne.n	9000e25a <HAL_RCCEx_PeriphCLKConfig+0x926>
9000e336:	f7ff bbf6 	b.w	9000db26 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e33a:	2101      	movs	r1, #1
9000e33c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e340:	f7ff fa7e 	bl	9000d840 <RCCEx_PLL3_Config>
9000e344:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000e346:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e34a:	2d00      	cmp	r5, #0
9000e34c:	d189      	bne.n	9000e262 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000e34e:	e409      	b.n	9000db64 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e350:	2102      	movs	r1, #2
9000e352:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e356:	f7ff fa73 	bl	9000d840 <RCCEx_PLL3_Config>
9000e35a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000e35c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e360:	2d00      	cmp	r5, #0
9000e362:	f47f af70 	bne.w	9000e246 <HAL_RCCEx_PeriphCLKConfig+0x912>
9000e366:	e50e      	b.n	9000dd86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e368:	2102      	movs	r1, #2
9000e36a:	f104 0008 	add.w	r0, r4, #8
9000e36e:	f7ff f9ed 	bl	9000d74c <RCCEx_PLL2_Config>
9000e372:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000e374:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e378:	2d00      	cmp	r5, #0
9000e37a:	f47f af6c 	bne.w	9000e256 <HAL_RCCEx_PeriphCLKConfig+0x922>
9000e37e:	e467      	b.n	9000dc50 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e380:	2102      	movs	r1, #2
9000e382:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e386:	f7ff fa5b 	bl	9000d840 <RCCEx_PLL3_Config>
9000e38a:	2800      	cmp	r0, #0
9000e38c:	f040 8094 	bne.w	9000e4b8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e390:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e394:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e398:	e549      	b.n	9000de2e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e39a:	2102      	movs	r1, #2
9000e39c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3a0:	f7ff fa4e 	bl	9000d840 <RCCEx_PLL3_Config>
9000e3a4:	2800      	cmp	r0, #0
9000e3a6:	f040 808d 	bne.w	9000e4c4 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e3aa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e3ae:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e3b2:	e54a      	b.n	9000de4a <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000e3b4:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e3b8:	f7ff bae9 	b.w	9000d98e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e3bc:	2100      	movs	r1, #0
9000e3be:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3c2:	f7ff fa3d 	bl	9000d840 <RCCEx_PLL3_Config>
9000e3c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000e3c8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e3cc:	f7ff bb4a 	b.w	9000da64 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e3d0:	2100      	movs	r1, #0
9000e3d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3d6:	f7ff fa33 	bl	9000d840 <RCCEx_PLL3_Config>
9000e3da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e3dc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e3e0:	e600      	b.n	9000dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e3e2:	2100      	movs	r1, #0
9000e3e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e3e8:	f7ff fa2a 	bl	9000d840 <RCCEx_PLL3_Config>
9000e3ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000e3ee:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e3f2:	f7ff baf0 	b.w	9000d9d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e3f6:	2102      	movs	r1, #2
9000e3f8:	3028      	adds	r0, #40	; 0x28
9000e3fa:	f7ff fa21 	bl	9000d840 <RCCEx_PLL3_Config>
9000e3fe:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000e400:	2e00      	cmp	r6, #0
9000e402:	f43f aab5 	beq.w	9000d970 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000e406:	e7d5      	b.n	9000e3b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e408:	4848      	ldr	r0, [pc, #288]	; (9000e52c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000e40a:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e40c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e40e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e412:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e414:	e5e6      	b.n	9000dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e416:	2100      	movs	r1, #0
9000e418:	f104 0008 	add.w	r0, r4, #8
9000e41c:	f7ff f996 	bl	9000d74c <RCCEx_PLL2_Config>
9000e420:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e422:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e426:	e5dd      	b.n	9000dfe4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e428:	2100      	movs	r1, #0
9000e42a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e42e:	f7ff fa07 	bl	9000d840 <RCCEx_PLL3_Config>
9000e432:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000e434:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e438:	f7ff bb52 	b.w	9000dae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e43c:	2100      	movs	r1, #0
9000e43e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e442:	f7ff f9fd 	bl	9000d840 <RCCEx_PLL3_Config>
9000e446:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000e448:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e44c:	f7ff bae6 	b.w	9000da1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e450:	2101      	movs	r1, #1
9000e452:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e456:	f7ff f9f3 	bl	9000d840 <RCCEx_PLL3_Config>
9000e45a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000e45c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e460:	2d00      	cmp	r5, #0
9000e462:	f47f aef4 	bne.w	9000e24e <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000e466:	e46c      	b.n	9000dd42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e468:	2101      	movs	r1, #1
9000e46a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e46e:	f7ff f9e7 	bl	9000d840 <RCCEx_PLL3_Config>
9000e472:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000e474:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e478:	2d00      	cmp	r5, #0
9000e47a:	f47f aef6 	bne.w	9000e26a <HAL_RCCEx_PeriphCLKConfig+0x936>
9000e47e:	e43c      	b.n	9000dcfa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e480:	2101      	movs	r1, #1
9000e482:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e486:	f7ff f9db 	bl	9000d840 <RCCEx_PLL3_Config>
9000e48a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e48c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e490:	2d00      	cmp	r5, #0
9000e492:	f47f aed6 	bne.w	9000e242 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000e496:	e5f9      	b.n	9000e08c <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000e498:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e49a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e49e:	4635      	mov	r5, r6
9000e4a0:	f7ff bbe0 	b.w	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000e4a4:	2601      	movs	r6, #1
9000e4a6:	f7ff ba72 	b.w	9000d98e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e4aa:	4d20      	ldr	r5, [pc, #128]	; (9000e52c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e4ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e4ae:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e4b2:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000e4b4:	f7ff ba64 	b.w	9000d980 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e4b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000e4bc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e4be:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e4c2:	e4b4      	b.n	9000de2e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e4c4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000e4c8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e4ca:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e4ce:	e4bc      	b.n	9000de4a <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000e4d0:	f7fb fa76 	bl	900099c0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e4d4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000e52c <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000e4d8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e4da:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e4de:	e004      	b.n	9000e4ea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e4e0:	f7fb fa6e 	bl	900099c0 <HAL_GetTick>
9000e4e4:	1bc0      	subs	r0, r0, r7
9000e4e6:	4548      	cmp	r0, r9
9000e4e8:	d8d6      	bhi.n	9000e498 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e4ea:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000e4ee:	079b      	lsls	r3, r3, #30
9000e4f0:	d5f6      	bpl.n	9000e4e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e4f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e4f6:	e64d      	b.n	9000e194 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000e4f8:	480c      	ldr	r0, [pc, #48]	; (9000e52c <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000e4fa:	4a0d      	ldr	r2, [pc, #52]	; (9000e530 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000e4fc:	6901      	ldr	r1, [r0, #16]
9000e4fe:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000e502:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000e506:	430a      	orrs	r2, r1
9000e508:	6102      	str	r2, [r0, #16]
9000e50a:	e64e      	b.n	9000e1aa <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e50c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e510:	462e      	mov	r6, r5
9000e512:	f7ff bba7 	b.w	9000dc64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000e516:	2601      	movs	r6, #1
9000e518:	4635      	mov	r5, r6
9000e51a:	f7ff bbf5 	b.w	9000dd08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000e51e:	2601      	movs	r6, #1
9000e520:	4635      	mov	r5, r6
9000e522:	f7ff bb9c 	b.w	9000dc5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000e526:	2601      	movs	r6, #1
9000e528:	4635      	mov	r5, r6
9000e52a:	e412      	b.n	9000dd52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000e52c:	58024400 	.word	0x58024400
9000e530:	00ffffcf 	.word	0x00ffffcf

9000e534 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000e534:	b318      	cbz	r0, 9000e57e <HAL_SDRAM_Init+0x4a>
{
9000e536:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000e538:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000e53c:	4604      	mov	r4, r0
9000e53e:	460d      	mov	r5, r1
9000e540:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e544:	b1b3      	cbz	r3, 9000e574 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000e546:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e548:	2302      	movs	r3, #2
9000e54a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000e54e:	f851 0b04 	ldr.w	r0, [r1], #4
9000e552:	f000 fa39 	bl	9000e9c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000e556:	6862      	ldr	r2, [r4, #4]
9000e558:	4629      	mov	r1, r5
9000e55a:	6820      	ldr	r0, [r4, #0]
9000e55c:	f000 fa72 	bl	9000ea44 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000e560:	4a08      	ldr	r2, [pc, #32]	; (9000e584 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000e562:	2101      	movs	r1, #1

  return HAL_OK;
9000e564:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000e566:	6813      	ldr	r3, [r2, #0]
9000e568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000e56c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000e56e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000e572:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000e574:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000e578:	f7f6 fb2e 	bl	90004bd8 <HAL_SDRAM_MspInit>
9000e57c:	e7e3      	b.n	9000e546 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000e57e:	2001      	movs	r0, #1
}
9000e580:	4770      	bx	lr
9000e582:	bf00      	nop
9000e584:	52004000 	.word	0x52004000

9000e588 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000e588:	b510      	push	{r4, lr}
9000e58a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000e58c:	f7f6 fba0 	bl	90004cd0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000e590:	e9d4 0100 	ldrd	r0, r1, [r4]
9000e594:	f000 faa4 	bl	9000eae0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000e598:	2000      	movs	r0, #0
9000e59a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000e59e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000e5a2:	bd10      	pop	{r4, pc}

9000e5a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000e5a4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e5a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e5aa:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000e5ac:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000e5ae:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000e5b0:	d004      	beq.n	9000e5bc <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000e5b2:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000e5b6:	2e01      	cmp	r6, #1
9000e5b8:	d001      	beq.n	9000e5be <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000e5ba:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e5bc:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e5be:	2302      	movs	r3, #2
9000e5c0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e5c2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e5c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000e5c8:	f000 fa9e 	bl	9000eb08 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000e5cc:	682b      	ldr	r3, [r5, #0]
9000e5ce:	2b02      	cmp	r3, #2
9000e5d0:	d003      	beq.n	9000e5da <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000e5d2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000e5d4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000e5d8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e5da:	2305      	movs	r3, #5
  return HAL_OK;
9000e5dc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000e5de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000e5e2:	bd70      	pop	{r4, r5, r6, pc}

9000e5e4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000e5e4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e5e6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000e5ea:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000e5ec:	2b02      	cmp	r3, #2
9000e5ee:	b2d8      	uxtb	r0, r3
9000e5f0:	d005      	beq.n	9000e5fe <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000e5f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000e5f6:	2b01      	cmp	r3, #1
9000e5f8:	b2dd      	uxtb	r5, r3
9000e5fa:	d001      	beq.n	9000e600 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000e5fc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000e5fe:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e600:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e602:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000e604:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000e608:	f000 fa96 	bl	9000eb38 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000e60c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000e60e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000e612:	bd38      	pop	{r3, r4, r5, pc}

9000e614 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000e614:	4770      	bx	lr
9000e616:	bf00      	nop

9000e618 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000e618:	2800      	cmp	r0, #0
9000e61a:	f000 80a5 	beq.w	9000e768 <HAL_TIM_Base_Init+0x150>
{
9000e61e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000e620:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e624:	4604      	mov	r4, r0
9000e626:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000e62a:	2b00      	cmp	r3, #0
9000e62c:	d076      	beq.n	9000e71c <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000e62e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e630:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e632:	494e      	ldr	r1, [pc, #312]	; (9000e76c <HAL_TIM_Base_Init+0x154>)
9000e634:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000e638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e63c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000e640:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e642:	fab1 f181 	clz	r1, r1
9000e646:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000e64a:	d027      	beq.n	9000e69c <HAL_TIM_Base_Init+0x84>
9000e64c:	bb31      	cbnz	r1, 9000e69c <HAL_TIM_Base_Init+0x84>
9000e64e:	4848      	ldr	r0, [pc, #288]	; (9000e770 <HAL_TIM_Base_Init+0x158>)
9000e650:	4d48      	ldr	r5, [pc, #288]	; (9000e774 <HAL_TIM_Base_Init+0x15c>)
9000e652:	4282      	cmp	r2, r0
9000e654:	d067      	beq.n	9000e726 <HAL_TIM_Base_Init+0x10e>
9000e656:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e65a:	4282      	cmp	r2, r0
9000e65c:	d063      	beq.n	9000e726 <HAL_TIM_Base_Init+0x10e>
9000e65e:	1b55      	subs	r5, r2, r5
9000e660:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000e664:	fab5 f585 	clz	r5, r5
9000e668:	4282      	cmp	r2, r0
9000e66a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000e66e:	d063      	beq.n	9000e738 <HAL_TIM_Base_Init+0x120>
9000e670:	2d00      	cmp	r5, #0
9000e672:	d161      	bne.n	9000e738 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e674:	4840      	ldr	r0, [pc, #256]	; (9000e778 <HAL_TIM_Base_Init+0x160>)
9000e676:	4941      	ldr	r1, [pc, #260]	; (9000e77c <HAL_TIM_Base_Init+0x164>)
9000e678:	428a      	cmp	r2, r1
9000e67a:	bf18      	it	ne
9000e67c:	4282      	cmpne	r2, r0
9000e67e:	d065      	beq.n	9000e74c <HAL_TIM_Base_Init+0x134>
9000e680:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000e684:	428a      	cmp	r2, r1
9000e686:	d061      	beq.n	9000e74c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e688:	69a0      	ldr	r0, [r4, #24]
9000e68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e68e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e690:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e692:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000e694:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e696:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e698:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e69a:	e023      	b.n	9000e6e4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e69c:	4d35      	ldr	r5, [pc, #212]	; (9000e774 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e6a2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e6a4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000e6a6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e6a8:	fab5 f585 	clz	r5, r5
9000e6ac:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e6ae:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e6b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e6b4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e6b6:	69a0      	ldr	r0, [r4, #24]
9000e6b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e6bc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000e6be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e6c0:	68e3      	ldr	r3, [r4, #12]
9000e6c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e6c4:	6863      	ldr	r3, [r4, #4]
9000e6c6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e6c8:	b951      	cbnz	r1, 9000e6e0 <HAL_TIM_Base_Init+0xc8>
9000e6ca:	b94d      	cbnz	r5, 9000e6e0 <HAL_TIM_Base_Init+0xc8>
9000e6cc:	492a      	ldr	r1, [pc, #168]	; (9000e778 <HAL_TIM_Base_Init+0x160>)
9000e6ce:	4b2b      	ldr	r3, [pc, #172]	; (9000e77c <HAL_TIM_Base_Init+0x164>)
9000e6d0:	429a      	cmp	r2, r3
9000e6d2:	bf18      	it	ne
9000e6d4:	428a      	cmpne	r2, r1
9000e6d6:	d003      	beq.n	9000e6e0 <HAL_TIM_Base_Init+0xc8>
9000e6d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000e6dc:	429a      	cmp	r2, r3
9000e6de:	d101      	bne.n	9000e6e4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000e6e0:	6963      	ldr	r3, [r4, #20]
9000e6e2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000e6e4:	2301      	movs	r3, #1
  return HAL_OK;
9000e6e6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000e6e8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000e6ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e6ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000e6f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000e6f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000e6fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000e6fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000e702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000e706:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e70e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000e712:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000e716:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000e71a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000e71c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000e720:	f7ff ff78 	bl	9000e614 <HAL_TIM_Base_MspInit>
9000e724:	e783      	b.n	9000e62e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e726:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e72c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e72e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000e732:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e734:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e736:	e7ba      	b.n	9000e6ae <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000e738:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000e73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000e73e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000e740:	480f      	ldr	r0, [pc, #60]	; (9000e780 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000e742:	4282      	cmp	r2, r0
9000e744:	d0b3      	beq.n	9000e6ae <HAL_TIM_Base_Init+0x96>
9000e746:	2d00      	cmp	r5, #0
9000e748:	d1b1      	bne.n	9000e6ae <HAL_TIM_Base_Init+0x96>
9000e74a:	e793      	b.n	9000e674 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e74c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000e74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e752:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000e754:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e756:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000e758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000e75c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000e75e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000e760:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000e762:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000e764:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000e766:	e7b1      	b.n	9000e6cc <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000e768:	2001      	movs	r0, #1
}
9000e76a:	4770      	bx	lr
9000e76c:	40010000 	.word	0x40010000
9000e770:	40000400 	.word	0x40000400
9000e774:	40010400 	.word	0x40010400
9000e778:	40014000 	.word	0x40014000
9000e77c:	40014400 	.word	0x40014400
9000e780:	40000c00 	.word	0x40000c00

9000e784 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000e784:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000e788:	2b01      	cmp	r3, #1
9000e78a:	d141      	bne.n	9000e810 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e78c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000e78e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e790:	4b24      	ldr	r3, [pc, #144]	; (9000e824 <HAL_TIM_Base_Start_IT+0xa0>)
9000e792:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000e796:	bf18      	it	ne
9000e798:	429a      	cmpne	r2, r3
{
9000e79a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e79c:	bf0c      	ite	eq
9000e79e:	2301      	moveq	r3, #1
9000e7a0:	2300      	movne	r3, #0
9000e7a2:	4d21      	ldr	r5, [pc, #132]	; (9000e828 <HAL_TIM_Base_Start_IT+0xa4>)
9000e7a4:	4c21      	ldr	r4, [pc, #132]	; (9000e82c <HAL_TIM_Base_Start_IT+0xa8>)
9000e7a6:	42aa      	cmp	r2, r5
9000e7a8:	bf08      	it	eq
9000e7aa:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000e7ae:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e7b2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e7b4:	42a2      	cmp	r2, r4
9000e7b6:	bf08      	it	eq
9000e7b8:	f043 0301 	orreq.w	r3, r3, #1
9000e7bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e7c0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e7c4:	481a      	ldr	r0, [pc, #104]	; (9000e830 <HAL_TIM_Base_Start_IT+0xac>)
9000e7c6:	42a2      	cmp	r2, r4
9000e7c8:	bf08      	it	eq
9000e7ca:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000e7ce:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000e7d0:	4282      	cmp	r2, r0
9000e7d2:	bf08      	it	eq
9000e7d4:	f043 0301 	orreq.w	r3, r3, #1
9000e7d8:	4916      	ldr	r1, [pc, #88]	; (9000e834 <HAL_TIM_Base_Start_IT+0xb0>)
9000e7da:	428a      	cmp	r2, r1
9000e7dc:	bf08      	it	eq
9000e7de:	f043 0301 	orreq.w	r3, r3, #1
9000e7e2:	b933      	cbnz	r3, 9000e7f2 <HAL_TIM_Base_Start_IT+0x6e>
9000e7e4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000e7e8:	1a10      	subs	r0, r2, r0
9000e7ea:	fab0 f080 	clz	r0, r0
9000e7ee:	0940      	lsrs	r0, r0, #5
9000e7f0:	b198      	cbz	r0, 9000e81a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000e7f2:	6891      	ldr	r1, [r2, #8]
9000e7f4:	4b10      	ldr	r3, [pc, #64]	; (9000e838 <HAL_TIM_Base_Start_IT+0xb4>)
9000e7f6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000e7f8:	2b06      	cmp	r3, #6
9000e7fa:	d00b      	beq.n	9000e814 <HAL_TIM_Base_Start_IT+0x90>
9000e7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000e800:	d008      	beq.n	9000e814 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000e802:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000e804:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000e806:	f043 0301 	orr.w	r3, r3, #1
9000e80a:	6013      	str	r3, [r2, #0]
}
9000e80c:	bc30      	pop	{r4, r5}
9000e80e:	4770      	bx	lr
    return HAL_ERROR;
9000e810:	2001      	movs	r0, #1
}
9000e812:	4770      	bx	lr
  return HAL_OK;
9000e814:	2000      	movs	r0, #0
}
9000e816:	bc30      	pop	{r4, r5}
9000e818:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000e81a:	6813      	ldr	r3, [r2, #0]
9000e81c:	f043 0301 	orr.w	r3, r3, #1
9000e820:	6013      	str	r3, [r2, #0]
9000e822:	e7f3      	b.n	9000e80c <HAL_TIM_Base_Start_IT+0x88>
9000e824:	40010000 	.word	0x40010000
9000e828:	40000400 	.word	0x40000400
9000e82c:	40000800 	.word	0x40000800
9000e830:	40010400 	.word	0x40010400
9000e834:	40001800 	.word	0x40001800
9000e838:	00010007 	.word	0x00010007

9000e83c <HAL_TIM_OC_DelayElapsedCallback>:
9000e83c:	4770      	bx	lr
9000e83e:	bf00      	nop

9000e840 <HAL_TIM_IC_CaptureCallback>:
9000e840:	4770      	bx	lr
9000e842:	bf00      	nop

9000e844 <HAL_TIM_PWM_PulseFinishedCallback>:
9000e844:	4770      	bx	lr
9000e846:	bf00      	nop

9000e848 <HAL_TIM_TriggerCallback>:
9000e848:	4770      	bx	lr
9000e84a:	bf00      	nop

9000e84c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e84c:	6803      	ldr	r3, [r0, #0]
9000e84e:	691a      	ldr	r2, [r3, #16]
9000e850:	0791      	lsls	r1, r2, #30
{
9000e852:	b510      	push	{r4, lr}
9000e854:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000e856:	d502      	bpl.n	9000e85e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000e858:	68da      	ldr	r2, [r3, #12]
9000e85a:	0792      	lsls	r2, r2, #30
9000e85c:	d468      	bmi.n	9000e930 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e85e:	691a      	ldr	r2, [r3, #16]
9000e860:	0752      	lsls	r2, r2, #29
9000e862:	d502      	bpl.n	9000e86a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000e864:	68da      	ldr	r2, [r3, #12]
9000e866:	0750      	lsls	r0, r2, #29
9000e868:	d44f      	bmi.n	9000e90a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e86a:	691a      	ldr	r2, [r3, #16]
9000e86c:	0711      	lsls	r1, r2, #28
9000e86e:	d502      	bpl.n	9000e876 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000e870:	68da      	ldr	r2, [r3, #12]
9000e872:	0712      	lsls	r2, r2, #28
9000e874:	d437      	bmi.n	9000e8e6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e876:	691a      	ldr	r2, [r3, #16]
9000e878:	06d0      	lsls	r0, r2, #27
9000e87a:	d502      	bpl.n	9000e882 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000e87c:	68da      	ldr	r2, [r3, #12]
9000e87e:	06d1      	lsls	r1, r2, #27
9000e880:	d41e      	bmi.n	9000e8c0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e882:	691a      	ldr	r2, [r3, #16]
9000e884:	07d2      	lsls	r2, r2, #31
9000e886:	d502      	bpl.n	9000e88e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000e888:	68da      	ldr	r2, [r3, #12]
9000e88a:	07d0      	lsls	r0, r2, #31
9000e88c:	d469      	bmi.n	9000e962 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e88e:	691a      	ldr	r2, [r3, #16]
9000e890:	0611      	lsls	r1, r2, #24
9000e892:	d502      	bpl.n	9000e89a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e894:	68da      	ldr	r2, [r3, #12]
9000e896:	0612      	lsls	r2, r2, #24
9000e898:	d46b      	bmi.n	9000e972 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e89a:	691a      	ldr	r2, [r3, #16]
9000e89c:	05d0      	lsls	r0, r2, #23
9000e89e:	d502      	bpl.n	9000e8a6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000e8a0:	68da      	ldr	r2, [r3, #12]
9000e8a2:	0611      	lsls	r1, r2, #24
9000e8a4:	d46d      	bmi.n	9000e982 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e8a6:	691a      	ldr	r2, [r3, #16]
9000e8a8:	0652      	lsls	r2, r2, #25
9000e8aa:	d502      	bpl.n	9000e8b2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000e8ac:	68da      	ldr	r2, [r3, #12]
9000e8ae:	0650      	lsls	r0, r2, #25
9000e8b0:	d46f      	bmi.n	9000e992 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e8b2:	691a      	ldr	r2, [r3, #16]
9000e8b4:	0691      	lsls	r1, r2, #26
9000e8b6:	d502      	bpl.n	9000e8be <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000e8b8:	68da      	ldr	r2, [r3, #12]
9000e8ba:	0692      	lsls	r2, r2, #26
9000e8bc:	d449      	bmi.n	9000e952 <HAL_TIM_IRQHandler+0x106>
}
9000e8be:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e8c0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e8c4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000e8c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000e8c8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000e8ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000e8cc:	69db      	ldr	r3, [r3, #28]
9000e8ce:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e8d2:	d16f      	bne.n	9000e9b4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e8d4:	f7ff ffb2 	bl	9000e83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e8d8:	4620      	mov	r0, r4
9000e8da:	f7ff ffb3 	bl	9000e844 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e8de:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000e8e0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e8e2:	7722      	strb	r2, [r4, #28]
9000e8e4:	e7cd      	b.n	9000e882 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e8e6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e8ea:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000e8ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000e8ee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000e8f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000e8f2:	69db      	ldr	r3, [r3, #28]
9000e8f4:	079b      	lsls	r3, r3, #30
9000e8f6:	d15a      	bne.n	9000e9ae <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e8f8:	f7ff ffa0 	bl	9000e83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e8fc:	4620      	mov	r0, r4
9000e8fe:	f7ff ffa1 	bl	9000e844 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e902:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000e904:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e906:	7722      	strb	r2, [r4, #28]
9000e908:	e7b5      	b.n	9000e876 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e90a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e90e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000e910:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000e912:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000e914:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000e916:	699b      	ldr	r3, [r3, #24]
9000e918:	f413 7f40 	tst.w	r3, #768	; 0x300
9000e91c:	d144      	bne.n	9000e9a8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000e91e:	f7ff ff8d 	bl	9000e83c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e922:	4620      	mov	r0, r4
9000e924:	f7ff ff8e 	bl	9000e844 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e928:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000e92a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e92c:	7722      	strb	r2, [r4, #28]
9000e92e:	e79c      	b.n	9000e86a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e930:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e934:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000e936:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000e938:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000e93a:	699b      	ldr	r3, [r3, #24]
9000e93c:	0799      	lsls	r1, r3, #30
9000e93e:	d130      	bne.n	9000e9a2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000e940:	f7ff ff7c 	bl	9000e83c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000e944:	4620      	mov	r0, r4
9000e946:	f7ff ff7d 	bl	9000e844 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e94a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000e94c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000e94e:	7722      	strb	r2, [r4, #28]
9000e950:	e785      	b.n	9000e85e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e952:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000e956:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000e958:	611a      	str	r2, [r3, #16]
}
9000e95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000e95e:	f000 b82d 	b.w	9000e9bc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e962:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000e966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000e968:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000e96a:	f7f5 ff99 	bl	900048a0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000e96e:	6823      	ldr	r3, [r4, #0]
9000e970:	e78d      	b.n	9000e88e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e972:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000e976:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000e978:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000e97a:	f000 f821 	bl	9000e9c0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000e97e:	6823      	ldr	r3, [r4, #0]
9000e980:	e78b      	b.n	9000e89a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e982:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000e986:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000e988:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000e98a:	f000 f81b 	bl	9000e9c4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000e98e:	6823      	ldr	r3, [r4, #0]
9000e990:	e789      	b.n	9000e8a6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e992:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000e996:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000e998:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000e99a:	f7ff ff55 	bl	9000e848 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000e99e:	6823      	ldr	r3, [r4, #0]
9000e9a0:	e787      	b.n	9000e8b2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000e9a2:	f7ff ff4d 	bl	9000e840 <HAL_TIM_IC_CaptureCallback>
9000e9a6:	e7d0      	b.n	9000e94a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000e9a8:	f7ff ff4a 	bl	9000e840 <HAL_TIM_IC_CaptureCallback>
9000e9ac:	e7bc      	b.n	9000e928 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000e9ae:	f7ff ff47 	bl	9000e840 <HAL_TIM_IC_CaptureCallback>
9000e9b2:	e7a6      	b.n	9000e902 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000e9b4:	f7ff ff44 	bl	9000e840 <HAL_TIM_IC_CaptureCallback>
9000e9b8:	e791      	b.n	9000e8de <HAL_TIM_IRQHandler+0x92>
9000e9ba:	bf00      	nop

9000e9bc <HAL_TIMEx_CommutCallback>:
9000e9bc:	4770      	bx	lr
9000e9be:	bf00      	nop

9000e9c0 <HAL_TIMEx_BreakCallback>:
9000e9c0:	4770      	bx	lr
9000e9c2:	bf00      	nop

9000e9c4 <HAL_TIMEx_Break2Callback>:
9000e9c4:	4770      	bx	lr
9000e9c6:	bf00      	nop

9000e9c8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e9c8:	680b      	ldr	r3, [r1, #0]
{
9000e9ca:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000e9cc:	b9d3      	cbnz	r3, 9000ea04 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e9ce:	6804      	ldr	r4, [r0, #0]
9000e9d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000e9d4:	684a      	ldr	r2, [r1, #4]
9000e9d6:	4023      	ands	r3, r4
9000e9d8:	4313      	orrs	r3, r2
9000e9da:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000e9de:	4323      	orrs	r3, r4
9000e9e0:	4313      	orrs	r3, r2
9000e9e2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000e9e6:	4323      	orrs	r3, r4
9000e9e8:	4313      	orrs	r3, r2
9000e9ea:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000e9ee:	4323      	orrs	r3, r4
9000e9f0:	4313      	orrs	r3, r2
9000e9f2:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000e9f6:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000e9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000e9fc:	4313      	orrs	r3, r2
9000e9fe:	6003      	str	r3, [r0, #0]
}
9000ea00:	2000      	movs	r0, #0
9000ea02:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ea04:	6802      	ldr	r2, [r0, #0]
9000ea06:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000ea0a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000ea0e:	4322      	orrs	r2, r4
9000ea10:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000ea12:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ea14:	4b0a      	ldr	r3, [pc, #40]	; (9000ea40 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000ea16:	4322      	orrs	r2, r4
9000ea18:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ea1a:	6842      	ldr	r2, [r0, #4]
9000ea1c:	4013      	ands	r3, r2
9000ea1e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000ea22:	4323      	orrs	r3, r4
9000ea24:	4313      	orrs	r3, r2
9000ea26:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000ea2a:	4323      	orrs	r3, r4
9000ea2c:	4313      	orrs	r3, r2
9000ea2e:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000ea32:	4323      	orrs	r3, r4
}
9000ea34:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000ea38:	4313      	orrs	r3, r2
9000ea3a:	6043      	str	r3, [r0, #4]
}
9000ea3c:	2000      	movs	r0, #0
9000ea3e:	4770      	bx	lr
9000ea40:	ffff8000 	.word	0xffff8000

9000ea44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000ea44:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000ea46:	bb0a      	cbnz	r2, 9000ea8c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea48:	6883      	ldr	r3, [r0, #8]
9000ea4a:	e9d1 2400 	ldrd	r2, r4, [r1]
9000ea4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000ea52:	3c01      	subs	r4, #1
9000ea54:	3a01      	subs	r2, #1
9000ea56:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000ea5a:	4313      	orrs	r3, r2
9000ea5c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000ea60:	3c01      	subs	r4, #1
9000ea62:	3a01      	subs	r2, #1
9000ea64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000ea68:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000ea6c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000ea70:	698a      	ldr	r2, [r1, #24]
9000ea72:	3d01      	subs	r5, #1
9000ea74:	1e61      	subs	r1, r4, #1
9000ea76:	3a01      	subs	r2, #1
9000ea78:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000ea7c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000ea80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000ea84:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea86:	6083      	str	r3, [r0, #8]
}
9000ea88:	2000      	movs	r0, #0
9000ea8a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea8c:	6885      	ldr	r5, [r0, #8]
9000ea8e:	68ca      	ldr	r2, [r1, #12]
9000ea90:	4b12      	ldr	r3, [pc, #72]	; (9000eadc <FMC_SDRAM_Timing_Init+0x98>)
9000ea92:	1e54      	subs	r4, r2, #1
9000ea94:	694a      	ldr	r2, [r1, #20]
9000ea96:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ea98:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000ea9a:	3a01      	subs	r2, #1
9000ea9c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000eaa0:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000eaa4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000eaa8:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000eaac:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000eaae:	68c3      	ldr	r3, [r0, #12]
9000eab0:	3c01      	subs	r4, #1
9000eab2:	3a01      	subs	r2, #1
9000eab4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000eab8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000eabc:	690c      	ldr	r4, [r1, #16]
9000eabe:	4313      	orrs	r3, r2
9000eac0:	698a      	ldr	r2, [r1, #24]
9000eac2:	1e61      	subs	r1, r4, #1
9000eac4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000eac8:	3a01      	subs	r2, #1
9000eaca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000eace:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000ead2:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000ead4:	60c3      	str	r3, [r0, #12]
}
9000ead6:	2000      	movs	r0, #0
9000ead8:	4770      	bx	lr
9000eada:	bf00      	nop
9000eadc:	ff0f0fff 	.word	0xff0f0fff

9000eae0 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000eae0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000eae2:	2200      	movs	r2, #0
{
9000eae4:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000eae6:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000eaea:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000eaee:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000eaf2:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000eaf6:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000eaf8:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000eafc:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000eafe:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000eb00:	619a      	str	r2, [r3, #24]
}
9000eb02:	bc30      	pop	{r4, r5}
9000eb04:	4770      	bx	lr
9000eb06:	bf00      	nop

9000eb08 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000eb08:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000eb0a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000eb0e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000eb10:	6900      	ldr	r0, [r0, #16]
9000eb12:	4323      	orrs	r3, r4
9000eb14:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000eb18:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000eb1c:	4c05      	ldr	r4, [pc, #20]	; (9000eb34 <FMC_SDRAM_SendCommand+0x2c>)
9000eb1e:	3901      	subs	r1, #1
9000eb20:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000eb22:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000eb24:	4323      	orrs	r3, r4
}
9000eb26:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000eb2a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000eb2e:	6113      	str	r3, [r2, #16]
}
9000eb30:	4770      	bx	lr
9000eb32:	bf00      	nop
9000eb34:	ffc00000 	.word	0xffc00000

9000eb38 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000eb38:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000eb3a:	4b05      	ldr	r3, [pc, #20]	; (9000eb50 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000eb3c:	2000      	movs	r0, #0
{
9000eb3e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000eb40:	6954      	ldr	r4, [r2, #20]
9000eb42:	4023      	ands	r3, r4
}
9000eb44:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000eb48:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000eb4c:	6151      	str	r1, [r2, #20]
}
9000eb4e:	4770      	bx	lr
9000eb50:	ffffc001 	.word	0xffffc001

9000eb54 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
9000eb54:	b510      	push	{r4, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
9000eb56:	f003 f94d 	bl	90011df4 <pvTimerGetTimerID>

  if (callb != NULL) {
9000eb5a:	b120      	cbz	r0, 9000eb66 <TimerCallback+0x12>
    callb->func (callb->arg);
9000eb5c:	e9d0 3000 	ldrd	r3, r0, [r0]
  }
}
9000eb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    callb->func (callb->arg);
9000eb64:	4718      	bx	r3
}
9000eb66:	bd10      	pop	{r4, pc}

9000eb68 <SysTick_Handler>:
void SysTick_Handler (void) {
9000eb68:	b508      	push	{r3, lr}
  SysTick->CTRL;
9000eb6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eb6e:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000eb70:	f002 fd32 	bl	900115d8 <xTaskGetSchedulerState>
9000eb74:	2801      	cmp	r0, #1
9000eb76:	d100      	bne.n	9000eb7a <SysTick_Handler+0x12>
}
9000eb78:	bd08      	pop	{r3, pc}
9000eb7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000eb7e:	f000 bd31 	b.w	9000f5e4 <xPortSysTickHandler>
9000eb82:	bf00      	nop

9000eb84 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000eb84:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
9000eb88:	b92b      	cbnz	r3, 9000eb96 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
9000eb8a:	4b06      	ldr	r3, [pc, #24]	; (9000eba4 <osKernelInitialize+0x20>)
9000eb8c:	6818      	ldr	r0, [r3, #0]
9000eb8e:	b928      	cbnz	r0, 9000eb9c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
9000eb90:	2201      	movs	r2, #1
9000eb92:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000eb94:	4770      	bx	lr
    stat = osErrorISR;
9000eb96:	f06f 0005 	mvn.w	r0, #5
9000eb9a:	4770      	bx	lr
      stat = osError;
9000eb9c:	f04f 30ff 	mov.w	r0, #4294967295
}
9000eba0:	4770      	bx	lr
9000eba2:	bf00      	nop
9000eba4:	2400e00c 	.word	0x2400e00c

9000eba8 <osKernelStart>:
osStatus_t osKernelStart (void) {
9000eba8:	b510      	push	{r4, lr}
9000ebaa:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000ebae:	b974      	cbnz	r4, 9000ebce <osKernelStart+0x26>
    if (KernelState == osKernelReady) {
9000ebb0:	4b08      	ldr	r3, [pc, #32]	; (9000ebd4 <osKernelStart+0x2c>)
9000ebb2:	681a      	ldr	r2, [r3, #0]
9000ebb4:	2a01      	cmp	r2, #1
9000ebb6:	d107      	bne.n	9000ebc8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000ebb8:	4907      	ldr	r1, [pc, #28]	; (9000ebd8 <osKernelStart+0x30>)
      KernelState = osKernelRunning;
9000ebba:	2202      	movs	r2, #2
9000ebbc:	77cc      	strb	r4, [r1, #31]
9000ebbe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
9000ebc0:	f002 fa98 	bl	900110f4 <vTaskStartScheduler>
      stat = osOK;
9000ebc4:	4620      	mov	r0, r4
}
9000ebc6:	bd10      	pop	{r4, pc}
      stat = osError;
9000ebc8:	f04f 30ff 	mov.w	r0, #4294967295
}
9000ebcc:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ebce:	f06f 0005 	mvn.w	r0, #5
}
9000ebd2:	bd10      	pop	{r4, pc}
9000ebd4:	2400e00c 	.word	0x2400e00c
9000ebd8:	e000ed00 	.word	0xe000ed00

9000ebdc <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000ebdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  hTask = NULL;
9000ebde:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000ebe0:	b087      	sub	sp, #28
9000ebe2:	4614      	mov	r4, r2
  hTask = NULL;
9000ebe4:	9505      	str	r5, [sp, #20]
9000ebe6:	f3ef 8205 	mrs	r2, IPSR
  if (!IS_IRQ() && (func != NULL)) {
9000ebea:	bb5a      	cbnz	r2, 9000ec44 <osThreadNew+0x68>
9000ebec:	4606      	mov	r6, r0
9000ebee:	b348      	cbz	r0, 9000ec44 <osThreadNew+0x68>
    if (attr != NULL) {
9000ebf0:	b1e4      	cbz	r4, 9000ec2c <osThreadNew+0x50>
      if (attr->priority != osPriorityNone) {
9000ebf2:	69a7      	ldr	r7, [r4, #24]
9000ebf4:	bb4f      	cbnz	r7, 9000ec4a <osThreadNew+0x6e>
9000ebf6:	2718      	movs	r7, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000ebf8:	6863      	ldr	r3, [r4, #4]
9000ebfa:	07db      	lsls	r3, r3, #31
9000ebfc:	d422      	bmi.n	9000ec44 <osThreadNew+0x68>
      if (attr->stack_size > 0U) {
9000ebfe:	6963      	ldr	r3, [r4, #20]
9000ec00:	b33b      	cbz	r3, 9000ec52 <osThreadNew+0x76>
        stack = attr->stack_size / sizeof(StackType_t);
9000ec02:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000ec06:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000ec08:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000ec0a:	b338      	cbz	r0, 9000ec5c <osThreadNew+0x80>
9000ec0c:	68e2      	ldr	r2, [r4, #12]
9000ec0e:	2a5f      	cmp	r2, #95	; 0x5f
9000ec10:	d918      	bls.n	9000ec44 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000ec12:	6924      	ldr	r4, [r4, #16]
9000ec14:	b1b3      	cbz	r3, 9000ec44 <osThreadNew+0x68>
9000ec16:	b1ac      	cbz	r4, 9000ec44 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000ec18:	460b      	mov	r3, r1
9000ec1a:	4662      	mov	r2, ip
9000ec1c:	4629      	mov	r1, r5
9000ec1e:	9700      	str	r7, [sp, #0]
9000ec20:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000ec24:	4630      	mov	r0, r6
9000ec26:	f002 f8c9 	bl	90010dbc <xTaskCreateStatic>
9000ec2a:	e00c      	b.n	9000ec46 <osThreadNew+0x6a>
9000ec2c:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000ec2e:	2718      	movs	r7, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000ec30:	460b      	mov	r3, r1
9000ec32:	4621      	mov	r1, r4
9000ec34:	ac05      	add	r4, sp, #20
9000ec36:	4630      	mov	r0, r6
9000ec38:	9700      	str	r7, [sp, #0]
9000ec3a:	9401      	str	r4, [sp, #4]
9000ec3c:	f002 f968 	bl	90010f10 <xTaskCreate>
9000ec40:	2801      	cmp	r0, #1
9000ec42:	d009      	beq.n	9000ec58 <osThreadNew+0x7c>
        return (NULL);
9000ec44:	2000      	movs	r0, #0
}
9000ec46:	b007      	add	sp, #28
9000ec48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000ec4a:	1e7a      	subs	r2, r7, #1
9000ec4c:	2a37      	cmp	r2, #55	; 0x37
9000ec4e:	d9d3      	bls.n	9000ebf8 <osThreadNew+0x1c>
9000ec50:	e7f8      	b.n	9000ec44 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000ec52:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000ec56:	e7d6      	b.n	9000ec06 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000ec58:	9805      	ldr	r0, [sp, #20]
9000ec5a:	e7f4      	b.n	9000ec46 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000ec5c:	68e3      	ldr	r3, [r4, #12]
9000ec5e:	2b00      	cmp	r3, #0
9000ec60:	d1f1      	bne.n	9000ec46 <osThreadNew+0x6a>
9000ec62:	6923      	ldr	r3, [r4, #16]
9000ec64:	2b00      	cmp	r3, #0
9000ec66:	d1ee      	bne.n	9000ec46 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000ec68:	fa1f f28c 	uxth.w	r2, ip
9000ec6c:	462c      	mov	r4, r5
9000ec6e:	e7df      	b.n	9000ec30 <osThreadNew+0x54>

9000ec70 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
9000ec70:	b510      	push	{r4, lr}
9000ec72:	f3ef 8405 	mrs	r4, IPSR
  if (IS_IRQ()) {
9000ec76:	b92c      	cbnz	r4, 9000ec84 <osDelay+0x14>
    if (ticks != 0U) {
9000ec78:	b900      	cbnz	r0, 9000ec7c <osDelay+0xc>
}
9000ec7a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000ec7c:	f002 f9e4 	bl	90011048 <vTaskDelay>
    stat = osOK;
9000ec80:	4620      	mov	r0, r4
}
9000ec82:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ec84:	f06f 0005 	mvn.w	r0, #5
}
9000ec88:	bd10      	pop	{r4, pc}
9000ec8a:	bf00      	nop

9000ec8c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
9000ec8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ec90:	461c      	mov	r4, r3
9000ec92:	b082      	sub	sp, #8
9000ec94:	f3ef 8305 	mrs	r3, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
9000ec98:	b9bb      	cbnz	r3, 9000ecca <osTimerNew+0x3e>
9000ec9a:	4605      	mov	r5, r0
9000ec9c:	b1a8      	cbz	r0, 9000ecca <osTimerNew+0x3e>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
9000ec9e:	2008      	movs	r0, #8
9000eca0:	460e      	mov	r6, r1
9000eca2:	4617      	mov	r7, r2
9000eca4:	f000 fa5e 	bl	9000f164 <pvPortMalloc>

    if (callb != NULL) {
9000eca8:	4680      	mov	r8, r0
9000ecaa:	b170      	cbz	r0, 9000ecca <osTimerNew+0x3e>
      callb->func = func;
      callb->arg  = argument;

      if (type == osTimerOnce) {
9000ecac:	3e00      	subs	r6, #0
      callb->arg  = argument;
9000ecae:	e9c0 5700 	strd	r5, r7, [r0]
      if (type == osTimerOnce) {
9000ecb2:	bf18      	it	ne
9000ecb4:	2601      	movne	r6, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
9000ecb6:	b1ec      	cbz	r4, 9000ecf4 <osTimerNew+0x68>
        if (attr->name != NULL) {
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000ecb8:	68a3      	ldr	r3, [r4, #8]
        if (attr->name != NULL) {
9000ecba:	6820      	ldr	r0, [r4, #0]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
9000ecbc:	b1b3      	cbz	r3, 9000ecec <osTimerNew+0x60>
9000ecbe:	68e2      	ldr	r2, [r4, #12]
9000ecc0:	2a2b      	cmp	r2, #43	; 0x2b
9000ecc2:	d806      	bhi.n	9000ecd2 <osTimerNew+0x46>
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
9000ecc4:	4640      	mov	r0, r8
9000ecc6:	f000 fb0b 	bl	9000f2e0 <vPortFree>
9000ecca:	2000      	movs	r0, #0
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
9000eccc:	b002      	add	sp, #8
9000ecce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
9000ecd2:	4c0e      	ldr	r4, [pc, #56]	; (9000ed0c <osTimerNew+0x80>)
9000ecd4:	4632      	mov	r2, r6
9000ecd6:	2101      	movs	r1, #1
9000ecd8:	e9cd 4300 	strd	r4, r3, [sp]
9000ecdc:	4643      	mov	r3, r8
9000ecde:	f002 ffd5 	bl	90011c8c <xTimerCreateStatic>
      if ((hTimer == NULL) && (callb != NULL)) {
9000ece2:	2800      	cmp	r0, #0
9000ece4:	d0ee      	beq.n	9000ecc4 <osTimerNew+0x38>
}
9000ece6:	b002      	add	sp, #8
9000ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ecec:	68e3      	ldr	r3, [r4, #12]
9000ecee:	2b00      	cmp	r3, #0
9000ecf0:	d1e8      	bne.n	9000ecc4 <osTimerNew+0x38>
9000ecf2:	4604      	mov	r4, r0
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
9000ecf4:	4d05      	ldr	r5, [pc, #20]	; (9000ed0c <osTimerNew+0x80>)
9000ecf6:	4643      	mov	r3, r8
9000ecf8:	4632      	mov	r2, r6
9000ecfa:	4620      	mov	r0, r4
9000ecfc:	2101      	movs	r1, #1
9000ecfe:	9500      	str	r5, [sp, #0]
9000ed00:	f002 ff5c 	bl	90011bbc <xTimerCreate>
      if ((hTimer == NULL) && (callb != NULL)) {
9000ed04:	2800      	cmp	r0, #0
9000ed06:	d1ee      	bne.n	9000ece6 <osTimerNew+0x5a>
9000ed08:	e7dc      	b.n	9000ecc4 <osTimerNew+0x38>
9000ed0a:	bf00      	nop
9000ed0c:	9000eb55 	.word	0x9000eb55

9000ed10 <osTimerStart>:
9000ed10:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
9000ed14:	b973      	cbnz	r3, 9000ed34 <osTimerStart+0x24>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
9000ed16:	b510      	push	{r4, lr}
9000ed18:	b082      	sub	sp, #8
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
9000ed1a:	b170      	cbz	r0, 9000ed3a <osTimerStart+0x2a>
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
9000ed1c:	460a      	mov	r2, r1
9000ed1e:	9300      	str	r3, [sp, #0]
9000ed20:	2104      	movs	r1, #4
9000ed22:	f003 f833 	bl	90011d8c <xTimerGenericCommand>
      stat = osOK;
    } else {
      stat = osErrorResource;
9000ed26:	2801      	cmp	r0, #1
9000ed28:	bf0c      	ite	eq
9000ed2a:	2000      	moveq	r0, #0
9000ed2c:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
9000ed30:	b002      	add	sp, #8
9000ed32:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ed34:	f06f 0005 	mvn.w	r0, #5
}
9000ed38:	4770      	bx	lr
    stat = osErrorParameter;
9000ed3a:	f06f 0003 	mvn.w	r0, #3
9000ed3e:	e7f7      	b.n	9000ed30 <osTimerStart+0x20>

9000ed40 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000ed40:	b570      	push	{r4, r5, r6, lr}
9000ed42:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000ed46:	b9db      	cbnz	r3, 9000ed80 <osMutexNew+0x40>
    if (attr != NULL) {
9000ed48:	4604      	mov	r4, r0
9000ed4a:	b1e0      	cbz	r0, 9000ed86 <osMutexNew+0x46>
      type = attr->attr_bits;
9000ed4c:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000ed4e:	0733      	lsls	r3, r6, #28
9000ed50:	d416      	bmi.n	9000ed80 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ed52:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000ed54:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ed58:	68c3      	ldr	r3, [r0, #12]
9000ed5a:	b181      	cbz	r1, 9000ed7e <osMutexNew+0x3e>
9000ed5c:	2b4f      	cmp	r3, #79	; 0x4f
9000ed5e:	d90f      	bls.n	9000ed80 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000ed60:	b31e      	cbz	r6, 9000edaa <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000ed62:	2004      	movs	r0, #4
9000ed64:	f001 f850 	bl	9000fe08 <xQueueCreateMutexStatic>
9000ed68:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000ed6a:	b14d      	cbz	r5, 9000ed80 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000ed6c:	6821      	ldr	r1, [r4, #0]
9000ed6e:	4628      	mov	r0, r5
9000ed70:	f001 fd80 	bl	90010874 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ed74:	b12e      	cbz	r6, 9000ed82 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000ed76:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000ed7a:	4628      	mov	r0, r5
9000ed7c:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ed7e:	b163      	cbz	r3, 9000ed9a <osMutexNew+0x5a>
  hMutex = NULL;
9000ed80:	2500      	movs	r5, #0
}
9000ed82:	4628      	mov	r0, r5
9000ed84:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000ed86:	2001      	movs	r0, #1
9000ed88:	f001 f8ae 	bl	9000fee8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ed8c:	4605      	mov	r5, r0
9000ed8e:	2800      	cmp	r0, #0
9000ed90:	d0f6      	beq.n	9000ed80 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000ed92:	4621      	mov	r1, r4
9000ed94:	f001 fd6e 	bl	90010874 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ed98:	e7f3      	b.n	9000ed82 <osMutexNew+0x42>
            if (rmtx != 0U) {
9000ed9a:	b15e      	cbz	r6, 9000edb4 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000ed9c:	2004      	movs	r0, #4
9000ed9e:	f001 f8a3 	bl	9000fee8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000eda2:	4605      	mov	r5, r0
9000eda4:	2800      	cmp	r0, #0
9000eda6:	d1e1      	bne.n	9000ed6c <osMutexNew+0x2c>
9000eda8:	e7ea      	b.n	9000ed80 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000edaa:	2001      	movs	r0, #1
9000edac:	f001 f82c 	bl	9000fe08 <xQueueCreateMutexStatic>
9000edb0:	4605      	mov	r5, r0
9000edb2:	e7da      	b.n	9000ed6a <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000edb4:	2001      	movs	r0, #1
9000edb6:	f001 f897 	bl	9000fee8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000edba:	4605      	mov	r5, r0
9000edbc:	e7d5      	b.n	9000ed6a <osMutexNew+0x2a>
9000edbe:	bf00      	nop

9000edc0 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000edc0:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000edc4:	f000 0301 	and.w	r3, r0, #1
9000edc8:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000edcc:	b9a8      	cbnz	r0, 9000edfa <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000edce:	b1ba      	cbz	r2, 9000ee00 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000edd0:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000edd2:	b510      	push	{r4, lr}
9000edd4:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000edd6:	b953      	cbnz	r3, 9000edee <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000edd8:	f001 fafe 	bl	900103d8 <xQueueSemaphoreTake>
9000eddc:	2801      	cmp	r0, #1
9000edde:	d00a      	beq.n	9000edf6 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000ede0:	2c00      	cmp	r4, #0
9000ede2:	bf14      	ite	ne
9000ede4:	f06f 0001 	mvnne.w	r0, #1
9000ede8:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000edec:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000edee:	f001 fc7b 	bl	900106e8 <xQueueTakeMutexRecursive>
9000edf2:	2801      	cmp	r0, #1
9000edf4:	d1f4      	bne.n	9000ede0 <osMutexAcquire+0x20>
  stat = osOK;
9000edf6:	2000      	movs	r0, #0
}
9000edf8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000edfa:	f06f 0005 	mvn.w	r0, #5
9000edfe:	4770      	bx	lr
    stat = osErrorParameter;
9000ee00:	f06f 0003 	mvn.w	r0, #3
}
9000ee04:	4770      	bx	lr
9000ee06:	bf00      	nop

9000ee08 <osMutexRelease>:
9000ee08:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000ee0c:	b9ba      	cbnz	r2, 9000ee3e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000ee0e:	b510      	push	{r4, lr}
9000ee10:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000ee14:	b1b4      	cbz	r4, 9000ee44 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000ee16:	f000 0301 	and.w	r3, r0, #1
9000ee1a:	b943      	cbnz	r3, 9000ee2e <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000ee1c:	461a      	mov	r2, r3
9000ee1e:	4619      	mov	r1, r3
9000ee20:	4620      	mov	r0, r4
9000ee22:	f000 fe6f 	bl	9000fb04 <xQueueGenericSend>
9000ee26:	2801      	cmp	r0, #1
9000ee28:	d106      	bne.n	9000ee38 <osMutexRelease+0x30>
  stat = osOK;
9000ee2a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000ee2c:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000ee2e:	4620      	mov	r0, r4
9000ee30:	f001 f83a 	bl	9000fea8 <xQueueGiveMutexRecursive>
9000ee34:	2801      	cmp	r0, #1
9000ee36:	d0f8      	beq.n	9000ee2a <osMutexRelease+0x22>
        stat = osErrorResource;
9000ee38:	f06f 0002 	mvn.w	r0, #2
}
9000ee3c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ee3e:	f06f 0005 	mvn.w	r0, #5
}
9000ee42:	4770      	bx	lr
    stat = osErrorParameter;
9000ee44:	f06f 0003 	mvn.w	r0, #3
}
9000ee48:	bd10      	pop	{r4, pc}
9000ee4a:	bf00      	nop

9000ee4c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ee4e:	b083      	sub	sp, #12
9000ee50:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000ee54:	b98e      	cbnz	r6, 9000ee7a <osSemaphoreNew+0x2e>
9000ee56:	4605      	mov	r5, r0
9000ee58:	b178      	cbz	r0, 9000ee7a <osSemaphoreNew+0x2e>
9000ee5a:	4288      	cmp	r0, r1
9000ee5c:	460f      	mov	r7, r1
9000ee5e:	d30c      	bcc.n	9000ee7a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000ee60:	4614      	mov	r4, r2
9000ee62:	b182      	cbz	r2, 9000ee86 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ee64:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000ee68:	b15a      	cbz	r2, 9000ee82 <osSemaphoreNew+0x36>
9000ee6a:	2b4f      	cmp	r3, #79	; 0x4f
9000ee6c:	d905      	bls.n	9000ee7a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000ee6e:	2801      	cmp	r0, #1
9000ee70:	d032      	beq.n	9000eed8 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000ee72:	f000 fd9f 	bl	9000f9b4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000ee76:	4605      	mov	r5, r0
9000ee78:	b978      	cbnz	r0, 9000ee9a <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000ee7a:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000ee7c:	4628      	mov	r0, r5
9000ee7e:	b003      	add	sp, #12
9000ee80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ee82:	2b00      	cmp	r3, #0
9000ee84:	d1f9      	bne.n	9000ee7a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000ee86:	2d01      	cmp	r5, #1
9000ee88:	d00f      	beq.n	9000eeaa <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000ee8a:	4628      	mov	r0, r5
9000ee8c:	4639      	mov	r1, r7
9000ee8e:	f000 fdf3 	bl	9000fa78 <xQueueCreateCountingSemaphore>
9000ee92:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000ee94:	2d00      	cmp	r5, #0
9000ee96:	d0f0      	beq.n	9000ee7a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000ee98:	b104      	cbz	r4, 9000ee9c <osSemaphoreNew+0x50>
          name = attr->name;
9000ee9a:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000ee9c:	4628      	mov	r0, r5
9000ee9e:	4621      	mov	r1, r4
9000eea0:	f001 fce8 	bl	90010874 <vQueueAddToRegistry>
}
9000eea4:	4628      	mov	r0, r5
9000eea6:	b003      	add	sp, #12
9000eea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000eeaa:	4628      	mov	r0, r5
9000eeac:	2203      	movs	r2, #3
9000eeae:	2100      	movs	r1, #0
9000eeb0:	f000 fd3e 	bl	9000f930 <xQueueGenericCreate>
9000eeb4:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000eeb6:	2d00      	cmp	r5, #0
9000eeb8:	d0df      	beq.n	9000ee7a <osSemaphoreNew+0x2e>
9000eeba:	2f00      	cmp	r7, #0
9000eebc:	d0ea      	beq.n	9000ee94 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000eebe:	2300      	movs	r3, #0
9000eec0:	4628      	mov	r0, r5
9000eec2:	461a      	mov	r2, r3
9000eec4:	4619      	mov	r1, r3
9000eec6:	f000 fe1d 	bl	9000fb04 <xQueueGenericSend>
9000eeca:	2801      	cmp	r0, #1
9000eecc:	d0e4      	beq.n	9000ee98 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000eece:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000eed0:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000eed2:	f001 fc89 	bl	900107e8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000eed6:	e7d1      	b.n	9000ee7c <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000eed8:	4613      	mov	r3, r2
9000eeda:	2203      	movs	r2, #3
9000eedc:	4631      	mov	r1, r6
9000eede:	9200      	str	r2, [sp, #0]
9000eee0:	4632      	mov	r2, r6
9000eee2:	f000 fcb9 	bl	9000f858 <xQueueGenericCreateStatic>
9000eee6:	4605      	mov	r5, r0
9000eee8:	e7e5      	b.n	9000eeb6 <osSemaphoreNew+0x6a>
9000eeea:	bf00      	nop

9000eeec <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000eeec:	b370      	cbz	r0, 9000ef4c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000eeee:	b510      	push	{r4, lr}
9000eef0:	460c      	mov	r4, r1
9000eef2:	b082      	sub	sp, #8
9000eef4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000eef8:	b1c3      	cbz	r3, 9000ef2c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000eefa:	bb21      	cbnz	r1, 9000ef46 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000eefc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000eefe:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000ef00:	f001 fc12 	bl	90010728 <xQueueReceiveFromISR>
9000ef04:	2801      	cmp	r0, #1
9000ef06:	d11a      	bne.n	9000ef3e <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000ef08:	9b01      	ldr	r3, [sp, #4]
9000ef0a:	b913      	cbnz	r3, 9000ef12 <osSemaphoreAcquire+0x26>
  stat = osOK;
9000ef0c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000ef0e:	b002      	add	sp, #8
9000ef10:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000ef12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ef16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ef1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ef1e:	f3bf 8f4f 	dsb	sy
9000ef22:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ef26:	4620      	mov	r0, r4
}
9000ef28:	b002      	add	sp, #8
9000ef2a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000ef2c:	f001 fa54 	bl	900103d8 <xQueueSemaphoreTake>
9000ef30:	2801      	cmp	r0, #1
9000ef32:	d0eb      	beq.n	9000ef0c <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000ef34:	b11c      	cbz	r4, 9000ef3e <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000ef36:	f06f 0001 	mvn.w	r0, #1
}
9000ef3a:	b002      	add	sp, #8
9000ef3c:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000ef3e:	f06f 0002 	mvn.w	r0, #2
}
9000ef42:	b002      	add	sp, #8
9000ef44:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000ef46:	f06f 0003 	mvn.w	r0, #3
9000ef4a:	e7e0      	b.n	9000ef0e <osSemaphoreAcquire+0x22>
9000ef4c:	f06f 0003 	mvn.w	r0, #3
}
9000ef50:	4770      	bx	lr
9000ef52:	bf00      	nop

9000ef54 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000ef54:	b330      	cbz	r0, 9000efa4 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000ef56:	b510      	push	{r4, lr}
9000ef58:	b082      	sub	sp, #8
9000ef5a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000ef5e:	b1ab      	cbz	r3, 9000ef8c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000ef60:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000ef62:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000ef64:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000ef66:	f001 f861 	bl	9001002c <xQueueGiveFromISR>
9000ef6a:	2801      	cmp	r0, #1
9000ef6c:	d117      	bne.n	9000ef9e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000ef6e:	9b01      	ldr	r3, [sp, #4]
9000ef70:	b193      	cbz	r3, 9000ef98 <osSemaphoreRelease+0x44>
9000ef72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ef7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ef7e:	f3bf 8f4f 	dsb	sy
9000ef82:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000ef86:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000ef88:	b002      	add	sp, #8
9000ef8a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000ef8c:	461a      	mov	r2, r3
9000ef8e:	4619      	mov	r1, r3
9000ef90:	f000 fdb8 	bl	9000fb04 <xQueueGenericSend>
9000ef94:	2801      	cmp	r0, #1
9000ef96:	d102      	bne.n	9000ef9e <osSemaphoreRelease+0x4a>
  stat = osOK;
9000ef98:	2000      	movs	r0, #0
}
9000ef9a:	b002      	add	sp, #8
9000ef9c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000ef9e:	f06f 0002 	mvn.w	r0, #2
9000efa2:	e7fa      	b.n	9000ef9a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000efa4:	f06f 0003 	mvn.w	r0, #3
}
9000efa8:	4770      	bx	lr
9000efaa:	bf00      	nop

9000efac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000efac:	b5f0      	push	{r4, r5, r6, r7, lr}
9000efae:	b083      	sub	sp, #12
9000efb0:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000efb4:	b987      	cbnz	r7, 9000efd8 <osMessageQueueNew+0x2c>
9000efb6:	4605      	mov	r5, r0
9000efb8:	b170      	cbz	r0, 9000efd8 <osMessageQueueNew+0x2c>
9000efba:	b169      	cbz	r1, 9000efd8 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000efbc:	4614      	mov	r4, r2
9000efbe:	b17a      	cbz	r2, 9000efe0 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000efc0:	6893      	ldr	r3, [r2, #8]
9000efc2:	b1cb      	cbz	r3, 9000eff8 <osMessageQueueNew+0x4c>
9000efc4:	68d2      	ldr	r2, [r2, #12]
9000efc6:	2a4f      	cmp	r2, #79	; 0x4f
9000efc8:	d906      	bls.n	9000efd8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000efca:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000efcc:	b122      	cbz	r2, 9000efd8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000efce:	fb01 f505 	mul.w	r5, r1, r5
9000efd2:	6966      	ldr	r6, [r4, #20]
9000efd4:	42ae      	cmp	r6, r5
9000efd6:	d21f      	bcs.n	9000f018 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000efd8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000efda:	4628      	mov	r0, r5
9000efdc:	b003      	add	sp, #12
9000efde:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000efe0:	f000 fca6 	bl	9000f930 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000efe4:	4605      	mov	r5, r0
9000efe6:	2800      	cmp	r0, #0
9000efe8:	d0f6      	beq.n	9000efd8 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000efea:	4628      	mov	r0, r5
9000efec:	4621      	mov	r1, r4
9000efee:	f001 fc41 	bl	90010874 <vQueueAddToRegistry>
}
9000eff2:	4628      	mov	r0, r5
9000eff4:	b003      	add	sp, #12
9000eff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000eff8:	68d3      	ldr	r3, [r2, #12]
9000effa:	2b00      	cmp	r3, #0
9000effc:	d1ec      	bne.n	9000efd8 <osMessageQueueNew+0x2c>
9000effe:	6913      	ldr	r3, [r2, #16]
9000f000:	2b00      	cmp	r3, #0
9000f002:	d1e9      	bne.n	9000efd8 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000f004:	6952      	ldr	r2, [r2, #20]
9000f006:	2a00      	cmp	r2, #0
9000f008:	d1e6      	bne.n	9000efd8 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000f00a:	f000 fc91 	bl	9000f930 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000f00e:	4605      	mov	r5, r0
9000f010:	2800      	cmp	r0, #0
9000f012:	d0e1      	beq.n	9000efd8 <osMessageQueueNew+0x2c>
        name = attr->name;
9000f014:	6824      	ldr	r4, [r4, #0]
9000f016:	e7e8      	b.n	9000efea <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000f018:	9700      	str	r7, [sp, #0]
9000f01a:	f000 fc1d 	bl	9000f858 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000f01e:	4605      	mov	r5, r0
9000f020:	2800      	cmp	r0, #0
9000f022:	d1f7      	bne.n	9000f014 <osMessageQueueNew+0x68>
9000f024:	e7d8      	b.n	9000efd8 <osMessageQueueNew+0x2c>
9000f026:	bf00      	nop

9000f028 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000f028:	b530      	push	{r4, r5, lr}
9000f02a:	461c      	mov	r4, r3
9000f02c:	b083      	sub	sp, #12
9000f02e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000f032:	b30b      	cbz	r3, 9000f078 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000f034:	3c00      	subs	r4, #0
9000f036:	bf18      	it	ne
9000f038:	2401      	movne	r4, #1
9000f03a:	2900      	cmp	r1, #0
9000f03c:	bf08      	it	eq
9000f03e:	f044 0401 	orreq.w	r4, r4, #1
9000f042:	bb7c      	cbnz	r4, 9000f0a4 <osMessageQueuePut+0x7c>
9000f044:	fab0 f480 	clz	r4, r0
9000f048:	0964      	lsrs	r4, r4, #5
9000f04a:	b358      	cbz	r0, 9000f0a4 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000f04c:	4623      	mov	r3, r4
9000f04e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000f050:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000f052:	f000 ff81 	bl	9000ff58 <xQueueGenericSendFromISR>
9000f056:	2801      	cmp	r0, #1
9000f058:	d120      	bne.n	9000f09c <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000f05a:	9b01      	ldr	r3, [sp, #4]
9000f05c:	b1db      	cbz	r3, 9000f096 <osMessageQueuePut+0x6e>
9000f05e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f066:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f06a:	f3bf 8f4f 	dsb	sy
9000f06e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000f072:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000f074:	b003      	add	sp, #12
9000f076:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000f078:	b1a0      	cbz	r0, 9000f0a4 <osMessageQueuePut+0x7c>
9000f07a:	fab1 f381 	clz	r3, r1
9000f07e:	095b      	lsrs	r3, r3, #5
9000f080:	b181      	cbz	r1, 9000f0a4 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000f082:	4622      	mov	r2, r4
9000f084:	f000 fd3e 	bl	9000fb04 <xQueueGenericSend>
9000f088:	2801      	cmp	r0, #1
9000f08a:	d004      	beq.n	9000f096 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000f08c:	b134      	cbz	r4, 9000f09c <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000f08e:	f06f 0001 	mvn.w	r0, #1
}
9000f092:	b003      	add	sp, #12
9000f094:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000f096:	2000      	movs	r0, #0
}
9000f098:	b003      	add	sp, #12
9000f09a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000f09c:	f06f 0002 	mvn.w	r0, #2
}
9000f0a0:	b003      	add	sp, #12
9000f0a2:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000f0a4:	f06f 0003 	mvn.w	r0, #3
9000f0a8:	e7e4      	b.n	9000f074 <osMessageQueuePut+0x4c>
9000f0aa:	bf00      	nop

9000f0ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000f0ac:	b530      	push	{r4, r5, lr}
9000f0ae:	461c      	mov	r4, r3
9000f0b0:	b083      	sub	sp, #12
9000f0b2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000f0b6:	b303      	cbz	r3, 9000f0fa <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000f0b8:	3c00      	subs	r4, #0
9000f0ba:	bf18      	it	ne
9000f0bc:	2401      	movne	r4, #1
9000f0be:	2900      	cmp	r1, #0
9000f0c0:	bf08      	it	eq
9000f0c2:	f044 0401 	orreq.w	r4, r4, #1
9000f0c6:	bb5c      	cbnz	r4, 9000f120 <osMessageQueueGet+0x74>
9000f0c8:	fab0 f480 	clz	r4, r0
9000f0cc:	0964      	lsrs	r4, r4, #5
9000f0ce:	b338      	cbz	r0, 9000f120 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000f0d0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000f0d2:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000f0d4:	f001 fb28 	bl	90010728 <xQueueReceiveFromISR>
9000f0d8:	2801      	cmp	r0, #1
9000f0da:	d11d      	bne.n	9000f118 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000f0dc:	9b01      	ldr	r3, [sp, #4]
9000f0de:	b1c3      	cbz	r3, 9000f112 <osMessageQueueGet+0x66>
9000f0e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f0e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f0ec:	f3bf 8f4f 	dsb	sy
9000f0f0:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000f0f4:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000f0f6:	b003      	add	sp, #12
9000f0f8:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000f0fa:	b188      	cbz	r0, 9000f120 <osMessageQueueGet+0x74>
9000f0fc:	b181      	cbz	r1, 9000f120 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000f0fe:	4622      	mov	r2, r4
9000f100:	f000 ffec 	bl	900100dc <xQueueReceive>
9000f104:	2801      	cmp	r0, #1
9000f106:	d004      	beq.n	9000f112 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000f108:	b134      	cbz	r4, 9000f118 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000f10a:	f06f 0001 	mvn.w	r0, #1
}
9000f10e:	b003      	add	sp, #12
9000f110:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000f112:	2000      	movs	r0, #0
}
9000f114:	b003      	add	sp, #12
9000f116:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000f118:	f06f 0002 	mvn.w	r0, #2
}
9000f11c:	b003      	add	sp, #12
9000f11e:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000f120:	f06f 0003 	mvn.w	r0, #3
9000f124:	e7e7      	b.n	9000f0f6 <osMessageQueueGet+0x4a>
9000f126:	bf00      	nop

9000f128 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000f128:	4b04      	ldr	r3, [pc, #16]	; (9000f13c <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000f12a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000f12c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000f12e:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000f130:	4c03      	ldr	r4, [pc, #12]	; (9000f140 <vApplicationGetIdleTaskMemory+0x18>)
9000f132:	600c      	str	r4, [r1, #0]
}
9000f134:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000f138:	6013      	str	r3, [r2, #0]
}
9000f13a:	4770      	bx	lr
9000f13c:	2400dfac 	.word	0x2400dfac
9000f140:	2400ddac 	.word	0x2400ddac

9000f144 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000f144:	4b05      	ldr	r3, [pc, #20]	; (9000f15c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000f146:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000f148:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000f14a:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000f14e:	4c04      	ldr	r4, [pc, #16]	; (9000f160 <vApplicationGetTimerTaskMemory+0x1c>)
9000f150:	600c      	str	r4, [r1, #0]
}
9000f152:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000f156:	6013      	str	r3, [r2, #0]
}
9000f158:	4770      	bx	lr
9000f15a:	bf00      	nop
9000f15c:	2400e410 	.word	0x2400e410
9000f160:	2400e010 	.word	0x2400e010

9000f164 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f168:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000f16a:	f002 f85f 	bl	9001122c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000f16e:	4a54      	ldr	r2, [pc, #336]	; (9000f2c0 <pvPortMalloc+0x15c>)
9000f170:	6816      	ldr	r6, [r2, #0]
9000f172:	2e00      	cmp	r6, #0
9000f174:	d06f      	beq.n	9000f256 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000f176:	4b53      	ldr	r3, [pc, #332]	; (9000f2c4 <pvPortMalloc+0x160>)
9000f178:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000f17a:	423d      	tst	r5, r7
9000f17c:	d12e      	bne.n	9000f1dc <pvPortMalloc+0x78>
9000f17e:	b36d      	cbz	r5, 9000f1dc <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000f180:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000f184:	076d      	lsls	r5, r5, #29
9000f186:	d002      	beq.n	9000f18e <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000f188:	f024 0407 	bic.w	r4, r4, #7
9000f18c:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000f18e:	b32c      	cbz	r4, 9000f1dc <pvPortMalloc+0x78>
9000f190:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000f2dc <pvPortMalloc+0x178>
9000f194:	f8dc 5000 	ldr.w	r5, [ip]
9000f198:	42a5      	cmp	r5, r4
9000f19a:	d31f      	bcc.n	9000f1dc <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000f19c:	484a      	ldr	r0, [pc, #296]	; (9000f2c8 <pvPortMalloc+0x164>)
9000f19e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000f1a0:	e003      	b.n	9000f1aa <pvPortMalloc+0x46>
9000f1a2:	681a      	ldr	r2, [r3, #0]
9000f1a4:	b122      	cbz	r2, 9000f1b0 <pvPortMalloc+0x4c>
9000f1a6:	4618      	mov	r0, r3
9000f1a8:	4613      	mov	r3, r2
9000f1aa:	6859      	ldr	r1, [r3, #4]
9000f1ac:	42a1      	cmp	r1, r4
9000f1ae:	d3f8      	bcc.n	9000f1a2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000f1b0:	42b3      	cmp	r3, r6
9000f1b2:	d013      	beq.n	9000f1dc <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000f1b4:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f1b6:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000f1b8:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f1bc:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000f1be:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000f1c2:	d929      	bls.n	9000f218 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000f1c4:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000f1c6:	0748      	lsls	r0, r1, #29
9000f1c8:	d00f      	beq.n	9000f1ea <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f1ce:	f383 8811 	msr	BASEPRI, r3
9000f1d2:	f3bf 8f6f 	isb	sy
9000f1d6:	f3bf 8f4f 	dsb	sy
9000f1da:	e7fe      	b.n	9000f1da <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000f1dc:	f04f 0800 	mov.w	r8, #0
9000f1e0:	f002 f82c 	bl	9001123c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000f1e4:	4640      	mov	r0, r8
9000f1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000f1ea:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f1ec:	4a36      	ldr	r2, [pc, #216]	; (9000f2c8 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000f1ee:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f1f0:	4614      	mov	r4, r2
9000f1f2:	6812      	ldr	r2, [r2, #0]
9000f1f4:	4291      	cmp	r1, r2
9000f1f6:	d8fb      	bhi.n	9000f1f0 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000f1f8:	6860      	ldr	r0, [r4, #4]
9000f1fa:	eb04 0e00 	add.w	lr, r4, r0
9000f1fe:	4571      	cmp	r1, lr
9000f200:	d04a      	beq.n	9000f298 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f202:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f206:	eb01 000e 	add.w	r0, r1, lr
9000f20a:	4282      	cmp	r2, r0
9000f20c:	d050      	beq.n	9000f2b0 <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000f20e:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f210:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000f212:	bf18      	it	ne
9000f214:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f216:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f218:	4a2c      	ldr	r2, [pc, #176]	; (9000f2cc <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f21a:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000f21c:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f21e:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000f220:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000f224:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000f226:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000f22a:	bf38      	it	cc
9000f22c:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000f22e:	4a28      	ldr	r2, [pc, #160]	; (9000f2d0 <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000f230:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000f234:	6813      	ldr	r3, [r2, #0]
9000f236:	3301      	adds	r3, #1
9000f238:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000f23a:	f001 ffff 	bl	9001123c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000f23e:	f018 0f07 	tst.w	r8, #7
9000f242:	d0cf      	beq.n	9000f1e4 <pvPortMalloc+0x80>
9000f244:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f248:	f383 8811 	msr	BASEPRI, r3
9000f24c:	f3bf 8f6f 	isb	sy
9000f250:	f3bf 8f4f 	dsb	sy
9000f254:	e7fe      	b.n	9000f254 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000f256:	4b1f      	ldr	r3, [pc, #124]	; (9000f2d4 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000f258:	075e      	lsls	r6, r3, #29
9000f25a:	d117      	bne.n	9000f28c <pvPortMalloc+0x128>
9000f25c:	4e1e      	ldr	r6, [pc, #120]	; (9000f2d8 <pvPortMalloc+0x174>)
9000f25e:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000f260:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000f262:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000f266:	4818      	ldr	r0, [pc, #96]	; (9000f2c8 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000f268:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000f26c:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000f26e:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000f270:	4a16      	ldr	r2, [pc, #88]	; (9000f2cc <pvPortMalloc+0x168>)
9000f272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000f274:	4a19      	ldr	r2, [pc, #100]	; (9000f2dc <pvPortMalloc+0x178>)
9000f276:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000f278:	4a12      	ldr	r2, [pc, #72]	; (9000f2c4 <pvPortMalloc+0x160>)
9000f27a:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000f27c:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000f27e:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000f282:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000f286:	e9c1 6300 	strd	r6, r3, [r1]
}
9000f28a:	e776      	b.n	9000f17a <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000f28c:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000f28e:	4e12      	ldr	r6, [pc, #72]	; (9000f2d8 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000f290:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000f294:	460b      	mov	r3, r1
9000f296:	e7e3      	b.n	9000f260 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f298:	6849      	ldr	r1, [r1, #4]
9000f29a:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f29e:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f2a2:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2a6:	428a      	cmp	r2, r1
9000f2a8:	d001      	beq.n	9000f2ae <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2aa:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000f2ac:	e7b3      	b.n	9000f216 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f2ae:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000f2b0:	42b2      	cmp	r2, r6
9000f2b2:	d0ac      	beq.n	9000f20e <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f2b4:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2b6:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f2b8:	4470      	add	r0, lr
9000f2ba:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f2bc:	e7a7      	b.n	9000f20e <pvPortMalloc+0xaa>
9000f2be:	bf00      	nop
9000f2c0:	2400e470 	.word	0x2400e470
9000f2c4:	24026b14 	.word	0x24026b14
9000f2c8:	24026b28 	.word	0x24026b28
9000f2cc:	24026b1c 	.word	0x24026b1c
9000f2d0:	24026b20 	.word	0x24026b20
9000f2d4:	2400e474 	.word	0x2400e474
9000f2d8:	24026b14 	.word	0x24026b14
9000f2dc:	24026b18 	.word	0x24026b18

9000f2e0 <vPortFree>:
	if( pv != NULL )
9000f2e0:	b1d0      	cbz	r0, 9000f318 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000f2e2:	4a2c      	ldr	r2, [pc, #176]	; (9000f394 <vPortFree+0xb4>)
9000f2e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000f2e8:	6812      	ldr	r2, [r2, #0]
9000f2ea:	4213      	tst	r3, r2
9000f2ec:	d00b      	beq.n	9000f306 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000f2ee:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000f2f2:	b191      	cbz	r1, 9000f31a <vPortFree+0x3a>
9000f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f2f8:	f383 8811 	msr	BASEPRI, r3
9000f2fc:	f3bf 8f6f 	isb	sy
9000f300:	f3bf 8f4f 	dsb	sy
9000f304:	e7fe      	b.n	9000f304 <vPortFree+0x24>
9000f306:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f30a:	f383 8811 	msr	BASEPRI, r3
9000f30e:	f3bf 8f6f 	isb	sy
9000f312:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000f316:	e7fe      	b.n	9000f316 <vPortFree+0x36>
9000f318:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f31a:	ea23 0302 	bic.w	r3, r3, r2
{
9000f31e:	b530      	push	{r4, r5, lr}
9000f320:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f322:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000f326:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f32a:	4d1b      	ldr	r5, [pc, #108]	; (9000f398 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000f32c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000f32e:	f001 ff7d 	bl	9001122c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f332:	9801      	ldr	r0, [sp, #4]
9000f334:	682a      	ldr	r2, [r5, #0]
9000f336:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f33a:	4b18      	ldr	r3, [pc, #96]	; (9000f39c <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000f33c:	440a      	add	r2, r1
9000f33e:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000f340:	461a      	mov	r2, r3
9000f342:	681b      	ldr	r3, [r3, #0]
9000f344:	429c      	cmp	r4, r3
9000f346:	d8fb      	bhi.n	9000f340 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000f348:	6850      	ldr	r0, [r2, #4]
9000f34a:	eb02 0c00 	add.w	ip, r2, r0
9000f34e:	4564      	cmp	r4, ip
9000f350:	d00f      	beq.n	9000f372 <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f352:	1860      	adds	r0, r4, r1
9000f354:	4283      	cmp	r3, r0
9000f356:	d014      	beq.n	9000f382 <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000f358:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f35a:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000f35c:	bf18      	it	ne
9000f35e:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000f360:	4a0f      	ldr	r2, [pc, #60]	; (9000f3a0 <vPortFree+0xc0>)
9000f362:	6813      	ldr	r3, [r2, #0]
9000f364:	3301      	adds	r3, #1
9000f366:	6013      	str	r3, [r2, #0]
}
9000f368:	b003      	add	sp, #12
9000f36a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000f36e:	f001 bf65 	b.w	9001123c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f372:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f374:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000f376:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f378:	4283      	cmp	r3, r0
9000f37a:	d001      	beq.n	9000f380 <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f37c:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000f37e:	e7ef      	b.n	9000f360 <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000f380:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000f382:	4808      	ldr	r0, [pc, #32]	; (9000f3a4 <vPortFree+0xc4>)
9000f384:	6800      	ldr	r0, [r0, #0]
9000f386:	4283      	cmp	r3, r0
9000f388:	d0e6      	beq.n	9000f358 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f38a:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000f38e:	4401      	add	r1, r0
9000f390:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000f392:	e7e1      	b.n	9000f358 <vPortFree+0x78>
9000f394:	24026b14 	.word	0x24026b14
9000f398:	24026b18 	.word	0x24026b18
9000f39c:	24026b28 	.word	0x24026b28
9000f3a0:	24026b24 	.word	0x24026b24
9000f3a4:	2400e470 	.word	0x2400e470

9000f3a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f3a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000f3ac:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000f3b0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000f3b2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000f3b4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f3b6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000f3b8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000f3bc:	4770      	bx	lr
9000f3be:	bf00      	nop

9000f3c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000f3c0:	2300      	movs	r3, #0
9000f3c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000f3c4:	4770      	bx	lr
9000f3c6:	bf00      	nop

9000f3c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000f3c8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000f3ca:	6802      	ldr	r2, [r0, #0]
{
9000f3cc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000f3ce:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000f3d0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000f3d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000f3d4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000f3d6:	689c      	ldr	r4, [r3, #8]
9000f3d8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000f3da:	6099      	str	r1, [r3, #8]
}
9000f3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000f3e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000f3e2:	6002      	str	r2, [r0, #0]
}
9000f3e4:	4770      	bx	lr
9000f3e6:	bf00      	nop

9000f3e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000f3e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000f3ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000f3ec:	1c6b      	adds	r3, r5, #1
9000f3ee:	d010      	beq.n	9000f412 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000f3f0:	f100 0308 	add.w	r3, r0, #8
9000f3f4:	461c      	mov	r4, r3
9000f3f6:	685b      	ldr	r3, [r3, #4]
9000f3f8:	681a      	ldr	r2, [r3, #0]
9000f3fa:	42aa      	cmp	r2, r5
9000f3fc:	d9fa      	bls.n	9000f3f4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000f3fe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000f400:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000f402:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000f404:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000f406:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000f408:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000f40a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000f40c:	6002      	str	r2, [r0, #0]
}
9000f40e:	bc30      	pop	{r4, r5}
9000f410:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000f412:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000f414:	6863      	ldr	r3, [r4, #4]
9000f416:	e7f2      	b.n	9000f3fe <vListInsert+0x16>

9000f418 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000f418:	6903      	ldr	r3, [r0, #16]
{
9000f41a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000f41c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000f41e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000f422:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000f424:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000f428:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000f42a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000f42c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000f430:	bf08      	it	eq
9000f432:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000f434:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000f436:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000f438:	3a01      	subs	r2, #1
9000f43a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000f43c:	6818      	ldr	r0, [r3, #0]
}
9000f43e:	4770      	bx	lr

9000f440 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000f440:	4808      	ldr	r0, [pc, #32]	; (9000f464 <prvPortStartFirstTask+0x24>)
9000f442:	6800      	ldr	r0, [r0, #0]
9000f444:	6800      	ldr	r0, [r0, #0]
9000f446:	f380 8808 	msr	MSP, r0
9000f44a:	f04f 0000 	mov.w	r0, #0
9000f44e:	f380 8814 	msr	CONTROL, r0
9000f452:	b662      	cpsie	i
9000f454:	b661      	cpsie	f
9000f456:	f3bf 8f4f 	dsb	sy
9000f45a:	f3bf 8f6f 	isb	sy
9000f45e:	df00      	svc	0
9000f460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000f462:	0000      	.short	0x0000
9000f464:	e000ed08 	.word	0xe000ed08

9000f468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000f468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000f478 <vPortEnableVFP+0x10>
9000f46c:	6801      	ldr	r1, [r0, #0]
9000f46e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000f472:	6001      	str	r1, [r0, #0]
9000f474:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000f476:	0000      	.short	0x0000
9000f478:	e000ed88 	.word	0xe000ed88

9000f47c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000f47c:	4b0e      	ldr	r3, [pc, #56]	; (9000f4b8 <prvTaskExitError+0x3c>)
{
9000f47e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000f480:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000f482:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000f484:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000f486:	3301      	adds	r3, #1
9000f488:	d008      	beq.n	9000f49c <prvTaskExitError+0x20>
9000f48a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f48e:	f383 8811 	msr	BASEPRI, r3
9000f492:	f3bf 8f6f 	isb	sy
9000f496:	f3bf 8f4f 	dsb	sy
9000f49a:	e7fe      	b.n	9000f49a <prvTaskExitError+0x1e>
9000f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4a0:	f383 8811 	msr	BASEPRI, r3
9000f4a4:	f3bf 8f6f 	isb	sy
9000f4a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f4ac:	9b01      	ldr	r3, [sp, #4]
9000f4ae:	2b00      	cmp	r3, #0
9000f4b0:	d0fc      	beq.n	9000f4ac <prvTaskExitError+0x30>
}
9000f4b2:	b002      	add	sp, #8
9000f4b4:	4770      	bx	lr
9000f4b6:	bf00      	nop
9000f4b8:	24000064 	.word	0x24000064

9000f4bc <pxPortInitialiseStack>:
{
9000f4bc:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000f4be:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000f4c2:	4809      	ldr	r0, [pc, #36]	; (9000f4e8 <pxPortInitialiseStack+0x2c>)
{
9000f4c4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000f4c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000f4ca:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000f4ce:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000f4d2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000f4d6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000f4da:	f06f 0102 	mvn.w	r1, #2
}
9000f4de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000f4e2:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000f4e6:	4770      	bx	lr
9000f4e8:	9000f47d 	.word	0x9000f47d
9000f4ec:	00000000 	.word	0x00000000

9000f4f0 <SVC_Handler>:
	__asm volatile (
9000f4f0:	4b07      	ldr	r3, [pc, #28]	; (9000f510 <pxCurrentTCBConst2>)
9000f4f2:	6819      	ldr	r1, [r3, #0]
9000f4f4:	6808      	ldr	r0, [r1, #0]
9000f4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f4fa:	f380 8809 	msr	PSP, r0
9000f4fe:	f3bf 8f6f 	isb	sy
9000f502:	f04f 0000 	mov.w	r0, #0
9000f506:	f380 8811 	msr	BASEPRI, r0
9000f50a:	4770      	bx	lr
9000f50c:	f3af 8000 	nop.w

9000f510 <pxCurrentTCBConst2>:
9000f510:	24026b78 	.word	0x24026b78

9000f514 <vPortEnterCritical>:
9000f514:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f518:	f383 8811 	msr	BASEPRI, r3
9000f51c:	f3bf 8f6f 	isb	sy
9000f520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000f524:	4a0b      	ldr	r2, [pc, #44]	; (9000f554 <vPortEnterCritical+0x40>)
9000f526:	6813      	ldr	r3, [r2, #0]
9000f528:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000f52a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000f52c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000f52e:	d000      	beq.n	9000f532 <vPortEnterCritical+0x1e>
}
9000f530:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000f532:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f536:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000f53a:	b2db      	uxtb	r3, r3
9000f53c:	2b00      	cmp	r3, #0
9000f53e:	d0f7      	beq.n	9000f530 <vPortEnterCritical+0x1c>
9000f540:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f544:	f383 8811 	msr	BASEPRI, r3
9000f548:	f3bf 8f6f 	isb	sy
9000f54c:	f3bf 8f4f 	dsb	sy
9000f550:	e7fe      	b.n	9000f550 <vPortEnterCritical+0x3c>
9000f552:	bf00      	nop
9000f554:	24000064 	.word	0x24000064

9000f558 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000f558:	4a08      	ldr	r2, [pc, #32]	; (9000f57c <vPortExitCritical+0x24>)
9000f55a:	6813      	ldr	r3, [r2, #0]
9000f55c:	b943      	cbnz	r3, 9000f570 <vPortExitCritical+0x18>
9000f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f562:	f383 8811 	msr	BASEPRI, r3
9000f566:	f3bf 8f6f 	isb	sy
9000f56a:	f3bf 8f4f 	dsb	sy
9000f56e:	e7fe      	b.n	9000f56e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000f570:	3b01      	subs	r3, #1
9000f572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000f574:	b90b      	cbnz	r3, 9000f57a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000f576:	f383 8811 	msr	BASEPRI, r3
}
9000f57a:	4770      	bx	lr
9000f57c:	24000064 	.word	0x24000064

9000f580 <PendSV_Handler>:
	__asm volatile
9000f580:	f3ef 8009 	mrs	r0, PSP
9000f584:	f3bf 8f6f 	isb	sy
9000f588:	4b15      	ldr	r3, [pc, #84]	; (9000f5e0 <pxCurrentTCBConst>)
9000f58a:	681a      	ldr	r2, [r3, #0]
9000f58c:	f01e 0f10 	tst.w	lr, #16
9000f590:	bf08      	it	eq
9000f592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000f596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f59a:	6010      	str	r0, [r2, #0]
9000f59c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000f5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
9000f5a4:	f380 8811 	msr	BASEPRI, r0
9000f5a8:	f3bf 8f4f 	dsb	sy
9000f5ac:	f3bf 8f6f 	isb	sy
9000f5b0:	f001 fe80 	bl	900112b4 <vTaskSwitchContext>
9000f5b4:	f04f 0000 	mov.w	r0, #0
9000f5b8:	f380 8811 	msr	BASEPRI, r0
9000f5bc:	bc09      	pop	{r0, r3}
9000f5be:	6819      	ldr	r1, [r3, #0]
9000f5c0:	6808      	ldr	r0, [r1, #0]
9000f5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f5c6:	f01e 0f10 	tst.w	lr, #16
9000f5ca:	bf08      	it	eq
9000f5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000f5d0:	f380 8809 	msr	PSP, r0
9000f5d4:	f3bf 8f6f 	isb	sy
9000f5d8:	4770      	bx	lr
9000f5da:	bf00      	nop
9000f5dc:	f3af 8000 	nop.w

9000f5e0 <pxCurrentTCBConst>:
9000f5e0:	24026b78 	.word	0x24026b78

9000f5e4 <xPortSysTickHandler>:
{
9000f5e4:	b508      	push	{r3, lr}
	__asm volatile
9000f5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f5ea:	f383 8811 	msr	BASEPRI, r3
9000f5ee:	f3bf 8f6f 	isb	sy
9000f5f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000f5f6:	f001 fe37 	bl	90011268 <xTaskIncrementTick>
9000f5fa:	b128      	cbz	r0, 9000f608 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000f5fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f604:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000f608:	2300      	movs	r3, #0
9000f60a:	f383 8811 	msr	BASEPRI, r3
}
9000f60e:	bd08      	pop	{r3, pc}

9000f610 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f610:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000f614:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f616:	4806      	ldr	r0, [pc, #24]	; (9000f630 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000f618:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f61a:	4906      	ldr	r1, [pc, #24]	; (9000f634 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000f61c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f61e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f620:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000f622:	fba1 1303 	umull	r1, r3, r1, r3
9000f626:	099b      	lsrs	r3, r3, #6
9000f628:	3b01      	subs	r3, #1
9000f62a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000f62c:	6110      	str	r0, [r2, #16]
}
9000f62e:	4770      	bx	lr
9000f630:	24000054 	.word	0x24000054
9000f634:	10624dd3 	.word	0x10624dd3

9000f638 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f638:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f63c:	4a48      	ldr	r2, [pc, #288]	; (9000f760 <xPortStartScheduler+0x128>)
9000f63e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000f642:	4291      	cmp	r1, r2
9000f644:	d041      	beq.n	9000f6ca <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f646:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000f64a:	4b46      	ldr	r3, [pc, #280]	; (9000f764 <xPortStartScheduler+0x12c>)
9000f64c:	429a      	cmp	r2, r3
9000f64e:	d033      	beq.n	9000f6b8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f650:	4b45      	ldr	r3, [pc, #276]	; (9000f768 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f652:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f654:	4945      	ldr	r1, [pc, #276]	; (9000f76c <xPortStartScheduler+0x134>)
{
9000f656:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f658:	781a      	ldrb	r2, [r3, #0]
{
9000f65a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f65c:	4c44      	ldr	r4, [pc, #272]	; (9000f770 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000f65e:	b2d2      	uxtb	r2, r2
9000f660:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f662:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000f664:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f666:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000f668:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000f66a:	b2db      	uxtb	r3, r3
9000f66c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f670:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f674:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f678:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f67c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000f67e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f680:	d511      	bpl.n	9000f6a6 <xPortStartScheduler+0x6e>
9000f682:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f684:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000f688:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f68a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000f68c:	005b      	lsls	r3, r3, #1
9000f68e:	b2db      	uxtb	r3, r3
9000f690:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000f694:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000f698:	0609      	lsls	r1, r1, #24
9000f69a:	d4f3      	bmi.n	9000f684 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000f69c:	2803      	cmp	r0, #3
9000f69e:	6020      	str	r0, [r4, #0]
9000f6a0:	f88d 3007 	strb.w	r3, [sp, #7]
9000f6a4:	d01a      	beq.n	9000f6dc <xPortStartScheduler+0xa4>
	__asm volatile
9000f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6aa:	f383 8811 	msr	BASEPRI, r3
9000f6ae:	f3bf 8f6f 	isb	sy
9000f6b2:	f3bf 8f4f 	dsb	sy
9000f6b6:	e7fe      	b.n	9000f6b6 <xPortStartScheduler+0x7e>
9000f6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6bc:	f383 8811 	msr	BASEPRI, r3
9000f6c0:	f3bf 8f6f 	isb	sy
9000f6c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000f6c8:	e7fe      	b.n	9000f6c8 <xPortStartScheduler+0x90>
9000f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6ce:	f383 8811 	msr	BASEPRI, r3
9000f6d2:	f3bf 8f6f 	isb	sy
9000f6d6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000f6da:	e7fe      	b.n	9000f6da <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f6dc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f6de:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f6e2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f6e6:	4a20      	ldr	r2, [pc, #128]	; (9000f768 <xPortStartScheduler+0x130>)
9000f6e8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000f6ea:	4e22      	ldr	r6, [pc, #136]	; (9000f774 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000f6ec:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000f6ee:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000f6f0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000f6f2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f6f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000f6fa:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000f6fe:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000f702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000f706:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000f70a:	f7ff ff81 	bl	9000f610 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000f70e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000f710:	f7ff feaa 	bl	9000f468 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000f714:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000f718:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000f71c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000f720:	f7ff fe8e 	bl	9000f440 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000f724:	f001 fdc6 	bl	900112b4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000f728:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000f72a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000f72c:	3301      	adds	r3, #1
9000f72e:	d008      	beq.n	9000f742 <xPortStartScheduler+0x10a>
9000f730:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f734:	f383 8811 	msr	BASEPRI, r3
9000f738:	f3bf 8f6f 	isb	sy
9000f73c:	f3bf 8f4f 	dsb	sy
9000f740:	e7fe      	b.n	9000f740 <xPortStartScheduler+0x108>
9000f742:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f746:	f383 8811 	msr	BASEPRI, r3
9000f74a:	f3bf 8f6f 	isb	sy
9000f74e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000f752:	9b03      	ldr	r3, [sp, #12]
9000f754:	2b00      	cmp	r3, #0
9000f756:	d0fc      	beq.n	9000f752 <xPortStartScheduler+0x11a>
}
9000f758:	2000      	movs	r0, #0
9000f75a:	b004      	add	sp, #16
9000f75c:	bd70      	pop	{r4, r5, r6, pc}
9000f75e:	bf00      	nop
9000f760:	410fc271 	.word	0x410fc271
9000f764:	410fc270 	.word	0x410fc270
9000f768:	e000e400 	.word	0xe000e400
9000f76c:	24026b30 	.word	0x24026b30
9000f770:	24026b34 	.word	0x24026b34
9000f774:	24000064 	.word	0x24000064

9000f778 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000f778:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000f77c:	2b0f      	cmp	r3, #15
9000f77e:	d90e      	bls.n	9000f79e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f780:	4911      	ldr	r1, [pc, #68]	; (9000f7c8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f782:	4a12      	ldr	r2, [pc, #72]	; (9000f7cc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000f784:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000f786:	7812      	ldrb	r2, [r2, #0]
9000f788:	429a      	cmp	r2, r3
9000f78a:	d908      	bls.n	9000f79e <vPortValidateInterruptPriority+0x26>
9000f78c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f790:	f383 8811 	msr	BASEPRI, r3
9000f794:	f3bf 8f6f 	isb	sy
9000f798:	f3bf 8f4f 	dsb	sy
9000f79c:	e7fe      	b.n	9000f79c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000f79e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f7a2:	4a0b      	ldr	r2, [pc, #44]	; (9000f7d0 <vPortValidateInterruptPriority+0x58>)
9000f7a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000f7a8:	6812      	ldr	r2, [r2, #0]
9000f7aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000f7ae:	4293      	cmp	r3, r2
9000f7b0:	d908      	bls.n	9000f7c4 <vPortValidateInterruptPriority+0x4c>
9000f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7b6:	f383 8811 	msr	BASEPRI, r3
9000f7ba:	f3bf 8f6f 	isb	sy
9000f7be:	f3bf 8f4f 	dsb	sy
9000f7c2:	e7fe      	b.n	9000f7c2 <vPortValidateInterruptPriority+0x4a>
	}
9000f7c4:	4770      	bx	lr
9000f7c6:	bf00      	nop
9000f7c8:	e000e3f0 	.word	0xe000e3f0
9000f7cc:	24026b30 	.word	0x24026b30
9000f7d0:	24026b34 	.word	0x24026b34

9000f7d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000f7d4:	b570      	push	{r4, r5, r6, lr}
9000f7d6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f7d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000f7da:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000f7dc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000f7de:	b92a      	cbnz	r2, 9000f7ec <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000f7e0:	6805      	ldr	r5, [r0, #0]
9000f7e2:	b365      	cbz	r5, 9000f83e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f7e4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f7e6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f7e8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000f7ea:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000f7ec:	b97d      	cbnz	r5, 9000f80e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000f7ee:	6840      	ldr	r0, [r0, #4]
9000f7f0:	f018 fb15 	bl	90027e1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f7f4:	6863      	ldr	r3, [r4, #4]
9000f7f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f7f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f7fa:	68a2      	ldr	r2, [r4, #8]
9000f7fc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000f7fe:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f800:	d319      	bcc.n	9000f836 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f802:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f804:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f806:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000f808:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f80a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f80c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000f80e:	68c0      	ldr	r0, [r0, #12]
9000f810:	f018 fb05 	bl	90027e1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f814:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000f816:	68e3      	ldr	r3, [r4, #12]
9000f818:	4251      	negs	r1, r2
9000f81a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f81c:	6822      	ldr	r2, [r4, #0]
9000f81e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000f820:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000f822:	d202      	bcs.n	9000f82a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000f824:	68a3      	ldr	r3, [r4, #8]
9000f826:	440b      	add	r3, r1
9000f828:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000f82a:	2d02      	cmp	r5, #2
9000f82c:	d00d      	beq.n	9000f84a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f82e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f830:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f832:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f834:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f836:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000f838:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f83a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000f83c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f83e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000f840:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000f842:	f001 ff1f 	bl	90011684 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000f846:	60a5      	str	r5, [r4, #8]
9000f848:	e7ce      	b.n	9000f7e8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000f84a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000f84c:	f04f 0000 	mov.w	r0, #0
9000f850:	bf38      	it	cc
9000f852:	2601      	movcc	r6, #1
9000f854:	e7c8      	b.n	9000f7e8 <prvCopyDataToQueue+0x14>
9000f856:	bf00      	nop

9000f858 <xQueueGenericCreateStatic>:
	{
9000f858:	b530      	push	{r4, r5, lr}
9000f85a:	b083      	sub	sp, #12
9000f85c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f860:	b940      	cbnz	r0, 9000f874 <xQueueGenericCreateStatic+0x1c>
9000f862:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f866:	f383 8811 	msr	BASEPRI, r3
9000f86a:	f3bf 8f6f 	isb	sy
9000f86e:	f3bf 8f4f 	dsb	sy
9000f872:	e7fe      	b.n	9000f872 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000f874:	461d      	mov	r5, r3
9000f876:	b153      	cbz	r3, 9000f88e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000f878:	b30a      	cbz	r2, 9000f8be <xQueueGenericCreateStatic+0x66>
9000f87a:	b989      	cbnz	r1, 9000f8a0 <xQueueGenericCreateStatic+0x48>
9000f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f880:	f383 8811 	msr	BASEPRI, r3
9000f884:	f3bf 8f6f 	isb	sy
9000f888:	f3bf 8f4f 	dsb	sy
9000f88c:	e7fe      	b.n	9000f88c <xQueueGenericCreateStatic+0x34>
9000f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f892:	f383 8811 	msr	BASEPRI, r3
9000f896:	f3bf 8f6f 	isb	sy
9000f89a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000f89e:	e7fe      	b.n	9000f89e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f8a0:	b16a      	cbz	r2, 9000f8be <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f8a2:	2350      	movs	r3, #80	; 0x50
9000f8a4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f8a6:	9b01      	ldr	r3, [sp, #4]
9000f8a8:	2b50      	cmp	r3, #80	; 0x50
9000f8aa:	d013      	beq.n	9000f8d4 <xQueueGenericCreateStatic+0x7c>
9000f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8b0:	f383 8811 	msr	BASEPRI, r3
9000f8b4:	f3bf 8f6f 	isb	sy
9000f8b8:	f3bf 8f4f 	dsb	sy
9000f8bc:	e7fe      	b.n	9000f8bc <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000f8be:	2900      	cmp	r1, #0
9000f8c0:	d0ef      	beq.n	9000f8a2 <xQueueGenericCreateStatic+0x4a>
9000f8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8c6:	f383 8811 	msr	BASEPRI, r3
9000f8ca:	f3bf 8f6f 	isb	sy
9000f8ce:	f3bf 8f4f 	dsb	sy
9000f8d2:	e7fe      	b.n	9000f8d2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f8d4:	2900      	cmp	r1, #0
9000f8d6:	bf08      	it	eq
9000f8d8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000f8da:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000f8dc:	6429      	str	r1, [r5, #64]	; 0x40
9000f8de:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000f8e0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000f8e2:	2201      	movs	r2, #1
9000f8e4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000f8e8:	f7ff fe14 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8ec:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8ee:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f8f0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f8f2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8f4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000f8f8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8fc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f8fe:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f900:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f902:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000f904:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f906:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f90a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000f90c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f910:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f914:	f7ff fd48 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f918:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f91c:	f7ff fd44 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000f920:	f7ff fe1a 	bl	9000f558 <vPortExitCritical>
	}
9000f924:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000f926:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000f92a:	b003      	add	sp, #12
9000f92c:	bd30      	pop	{r4, r5, pc}
9000f92e:	bf00      	nop

9000f930 <xQueueGenericCreate>:
	{
9000f930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000f932:	b940      	cbnz	r0, 9000f946 <xQueueGenericCreate+0x16>
9000f934:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f938:	f383 8811 	msr	BASEPRI, r3
9000f93c:	f3bf 8f6f 	isb	sy
9000f940:	f3bf 8f4f 	dsb	sy
9000f944:	e7fe      	b.n	9000f944 <xQueueGenericCreate+0x14>
9000f946:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f948:	fb01 f000 	mul.w	r0, r1, r0
9000f94c:	460e      	mov	r6, r1
9000f94e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000f950:	3050      	adds	r0, #80	; 0x50
9000f952:	f7ff fc07 	bl	9000f164 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000f956:	4604      	mov	r4, r0
9000f958:	b340      	cbz	r0, 9000f9ac <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000f95a:	2300      	movs	r3, #0
9000f95c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000f960:	b336      	cbz	r6, 9000f9b0 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f962:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000f966:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000f968:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000f96c:	f7ff fdd2 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f970:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f972:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000f976:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f978:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000f97c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f980:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f982:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f984:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f986:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f988:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000f98a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000f98c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000f98e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000f990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000f994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000f998:	f7ff fd06 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000f99c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000f9a0:	f7ff fd02 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000f9a4:	f7ff fdd8 	bl	9000f558 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000f9a8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000f9ac:	4620      	mov	r0, r4
9000f9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000f9b0:	4603      	mov	r3, r0
9000f9b2:	e7d8      	b.n	9000f966 <xQueueGenericCreate+0x36>

9000f9b4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000f9b4:	b940      	cbnz	r0, 9000f9c8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000f9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9ba:	f383 8811 	msr	BASEPRI, r3
9000f9be:	f3bf 8f6f 	isb	sy
9000f9c2:	f3bf 8f4f 	dsb	sy
9000f9c6:	e7fe      	b.n	9000f9c6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000f9c8:	4288      	cmp	r0, r1
9000f9ca:	d208      	bcs.n	9000f9de <xQueueCreateCountingSemaphoreStatic+0x2a>
9000f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9d0:	f383 8811 	msr	BASEPRI, r3
9000f9d4:	f3bf 8f6f 	isb	sy
9000f9d8:	f3bf 8f4f 	dsb	sy
9000f9dc:	e7fe      	b.n	9000f9dc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000f9de:	b530      	push	{r4, r5, lr}
9000f9e0:	4615      	mov	r5, r2
9000f9e2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000f9e4:	2a00      	cmp	r2, #0
9000f9e6:	d03d      	beq.n	9000fa64 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000f9e8:	2350      	movs	r3, #80	; 0x50
9000f9ea:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000f9ec:	9b03      	ldr	r3, [sp, #12]
9000f9ee:	2b50      	cmp	r3, #80	; 0x50
9000f9f0:	d008      	beq.n	9000fa04 <xQueueCreateCountingSemaphoreStatic+0x50>
9000f9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9f6:	f383 8811 	msr	BASEPRI, r3
9000f9fa:	f3bf 8f6f 	isb	sy
9000f9fe:	f3bf 8f4f 	dsb	sy
9000fa02:	e7fe      	b.n	9000fa02 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000fa04:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fa06:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fa08:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000fa0a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fa0c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000fa10:	6414      	str	r4, [r2, #64]	; 0x40
9000fa12:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000fa14:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000fa16:	f7ff fd7d 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa1a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fa1c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000fa1e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa20:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000fa24:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa28:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa2c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa2e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa30:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000fa32:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fa34:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fa38:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000fa3c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fa40:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fa44:	f7ff fcb0 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000fa48:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000fa4c:	f7ff fcac 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000fa50:	f7ff fd82 	bl	9000f558 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000fa54:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000fa56:	9901      	ldr	r1, [sp, #4]
	}
9000fa58:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000fa5a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000fa5e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000fa60:	b005      	add	sp, #20
9000fa62:	bd30      	pop	{r4, r5, pc}
9000fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa68:	f383 8811 	msr	BASEPRI, r3
9000fa6c:	f3bf 8f6f 	isb	sy
9000fa70:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000fa74:	e7fe      	b.n	9000fa74 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000fa76:	bf00      	nop

9000fa78 <xQueueCreateCountingSemaphore>:
	{
9000fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000fa7a:	b940      	cbnz	r0, 9000fa8e <xQueueCreateCountingSemaphore+0x16>
9000fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa80:	f383 8811 	msr	BASEPRI, r3
9000fa84:	f3bf 8f6f 	isb	sy
9000fa88:	f3bf 8f4f 	dsb	sy
9000fa8c:	e7fe      	b.n	9000fa8c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000fa8e:	4288      	cmp	r0, r1
9000fa90:	4604      	mov	r4, r0
9000fa92:	460e      	mov	r6, r1
9000fa94:	d208      	bcs.n	9000faa8 <xQueueCreateCountingSemaphore+0x30>
9000fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa9a:	f383 8811 	msr	BASEPRI, r3
9000fa9e:	f3bf 8f6f 	isb	sy
9000faa2:	f3bf 8f4f 	dsb	sy
9000faa6:	e7fe      	b.n	9000faa6 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000faa8:	2050      	movs	r0, #80	; 0x50
9000faaa:	f7ff fb5b 	bl	9000f164 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000faae:	4605      	mov	r5, r0
9000fab0:	b330      	cbz	r0, 9000fb00 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fab2:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fab4:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000fab6:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fab8:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000fabc:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000fabe:	f7ff fd29 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fac2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fac4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fac6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000faca:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000facc:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000fad0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fad4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fad6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fad8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fada:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000fadc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fade:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000fae0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fae4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fae8:	f7ff fc5e 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000faec:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000faf0:	f7ff fc5a 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000faf4:	f7ff fd30 	bl	9000f558 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000faf8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000fafa:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000fafc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000fb00:	4628      	mov	r0, r5
9000fb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000fb04 <xQueueGenericSend>:
{
9000fb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000fb08:	b084      	sub	sp, #16
9000fb0a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000fb0c:	2800      	cmp	r0, #0
9000fb0e:	f000 8103 	beq.w	9000fd18 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fb12:	4688      	mov	r8, r1
9000fb14:	4604      	mov	r4, r0
9000fb16:	461f      	mov	r7, r3
9000fb18:	2900      	cmp	r1, #0
9000fb1a:	f000 8097 	beq.w	9000fc4c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000fb1e:	2f02      	cmp	r7, #2
9000fb20:	d10b      	bne.n	9000fb3a <xQueueGenericSend+0x36>
9000fb22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fb24:	2b01      	cmp	r3, #1
9000fb26:	d008      	beq.n	9000fb3a <xQueueGenericSend+0x36>
9000fb28:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb2c:	f383 8811 	msr	BASEPRI, r3
9000fb30:	f3bf 8f6f 	isb	sy
9000fb34:	f3bf 8f4f 	dsb	sy
9000fb38:	e7fe      	b.n	9000fb38 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fb3a:	f001 fd4d 	bl	900115d8 <xTaskGetSchedulerState>
9000fb3e:	2800      	cmp	r0, #0
9000fb40:	f000 80f3 	beq.w	9000fd2a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fb44:	f1a7 0902 	sub.w	r9, r7, #2
9000fb48:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fb4a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fb4e:	fab9 f989 	clz	r9, r9
9000fb52:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000fb56:	f7ff fcdd 	bl	9000f514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fb5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000fb5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fb5e:	429a      	cmp	r2, r3
9000fb60:	f0c0 80f0 	bcc.w	9000fd44 <xQueueGenericSend+0x240>
9000fb64:	f1b9 0f00 	cmp.w	r9, #0
9000fb68:	f040 80ec 	bne.w	9000fd44 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000fb6c:	9b01      	ldr	r3, [sp, #4]
9000fb6e:	2b00      	cmp	r3, #0
9000fb70:	f000 8101 	beq.w	9000fd76 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000fb74:	2d00      	cmp	r5, #0
9000fb76:	f000 80cb 	beq.w	9000fd10 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000fb7a:	f7ff fced 	bl	9000f558 <vPortExitCritical>
		vTaskSuspendAll();
9000fb7e:	f001 fb55 	bl	9001122c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000fb82:	f7ff fcc7 	bl	9000f514 <vPortEnterCritical>
9000fb86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fb8a:	2bff      	cmp	r3, #255	; 0xff
9000fb8c:	d102      	bne.n	9000fb94 <xQueueGenericSend+0x90>
9000fb8e:	2300      	movs	r3, #0
9000fb90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000fb94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fb98:	2bff      	cmp	r3, #255	; 0xff
9000fb9a:	d102      	bne.n	9000fba2 <xQueueGenericSend+0x9e>
9000fb9c:	2300      	movs	r3, #0
9000fb9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000fba2:	f7ff fcd9 	bl	9000f558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000fba6:	a901      	add	r1, sp, #4
9000fba8:	a802      	add	r0, sp, #8
9000fbaa:	f001 fcc1 	bl	90011530 <xTaskCheckForTimeOut>
9000fbae:	2800      	cmp	r0, #0
9000fbb0:	f040 80e5 	bne.w	9000fd7e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000fbb4:	f7ff fcae 	bl	9000f514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000fbb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000fbba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000fbbc:	429a      	cmp	r2, r3
9000fbbe:	d052      	beq.n	9000fc66 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000fbc0:	f7ff fcca 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fbc4:	f7ff fca6 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fbc8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000fbcc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbce:	2d00      	cmp	r5, #0
9000fbd0:	dc04      	bgt.n	9000fbdc <xQueueGenericSend+0xd8>
9000fbd2:	e011      	b.n	9000fbf8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000fbd4:	1e6a      	subs	r2, r5, #1
9000fbd6:	b2d3      	uxtb	r3, r2
9000fbd8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbda:	b16b      	cbz	r3, 9000fbf8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbde:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fbe0:	b153      	cbz	r3, 9000fbf8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fbe2:	f001 fc4f 	bl	90011484 <xTaskRemoveFromEventList>
9000fbe6:	2800      	cmp	r0, #0
9000fbe8:	d0f4      	beq.n	9000fbd4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000fbea:	f001 fce9 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
9000fbee:	1e6a      	subs	r2, r5, #1
9000fbf0:	b2d3      	uxtb	r3, r2
9000fbf2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fbf4:	2b00      	cmp	r3, #0
9000fbf6:	d1f1      	bne.n	9000fbdc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000fbf8:	23ff      	movs	r3, #255	; 0xff
9000fbfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fbfe:	f7ff fcab 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fc02:	f7ff fc87 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fc06:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000fc0a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc0c:	2d00      	cmp	r5, #0
9000fc0e:	dd14      	ble.n	9000fc3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc10:	f104 0a10 	add.w	sl, r4, #16
9000fc14:	e003      	b.n	9000fc1e <xQueueGenericSend+0x11a>
				--cRxLock;
9000fc16:	1e6a      	subs	r2, r5, #1
9000fc18:	b2d3      	uxtb	r3, r2
9000fc1a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc1c:	b16b      	cbz	r3, 9000fc3a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc1e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc20:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fc22:	b153      	cbz	r3, 9000fc3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fc24:	f001 fc2e 	bl	90011484 <xTaskRemoveFromEventList>
9000fc28:	2800      	cmp	r0, #0
9000fc2a:	d0f4      	beq.n	9000fc16 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000fc2c:	f001 fcc8 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
9000fc30:	1e6a      	subs	r2, r5, #1
9000fc32:	b2d3      	uxtb	r3, r2
9000fc34:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fc36:	2b00      	cmp	r3, #0
9000fc38:	d1f1      	bne.n	9000fc1e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000fc3a:	23ff      	movs	r3, #255	; 0xff
9000fc3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fc40:	f7ff fc8a 	bl	9000f558 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000fc44:	f001 fafa 	bl	9001123c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000fc48:	2501      	movs	r5, #1
9000fc4a:	e784      	b.n	9000fb56 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000fc4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000fc4e:	2b00      	cmp	r3, #0
9000fc50:	f43f af65 	beq.w	9000fb1e <xQueueGenericSend+0x1a>
9000fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc58:	f383 8811 	msr	BASEPRI, r3
9000fc5c:	f3bf 8f6f 	isb	sy
9000fc60:	f3bf 8f4f 	dsb	sy
9000fc64:	e7fe      	b.n	9000fc64 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000fc66:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000fc6a:	f7ff fc75 	bl	9000f558 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000fc6e:	9901      	ldr	r1, [sp, #4]
9000fc70:	4650      	mov	r0, sl
9000fc72:	f001 fb79 	bl	90011368 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000fc76:	f7ff fc4d 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fc7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fc7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc80:	2d00      	cmp	r5, #0
9000fc82:	dc04      	bgt.n	9000fc8e <xQueueGenericSend+0x18a>
9000fc84:	e011      	b.n	9000fcaa <xQueueGenericSend+0x1a6>
			--cTxLock;
9000fc86:	1e6b      	subs	r3, r5, #1
9000fc88:	b2da      	uxtb	r2, r3
9000fc8a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fc8c:	b16a      	cbz	r2, 9000fcaa <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc90:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fc92:	b153      	cbz	r3, 9000fcaa <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fc94:	f001 fbf6 	bl	90011484 <xTaskRemoveFromEventList>
9000fc98:	2800      	cmp	r0, #0
9000fc9a:	d0f4      	beq.n	9000fc86 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000fc9c:	f001 fc90 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
9000fca0:	1e6b      	subs	r3, r5, #1
9000fca2:	b2da      	uxtb	r2, r3
9000fca4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fca6:	2a00      	cmp	r2, #0
9000fca8:	d1f1      	bne.n	9000fc8e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000fcaa:	23ff      	movs	r3, #255	; 0xff
9000fcac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fcb0:	f7ff fc52 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fcb4:	f7ff fc2e 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fcb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fcbc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcbe:	2d00      	cmp	r5, #0
9000fcc0:	dc04      	bgt.n	9000fccc <xQueueGenericSend+0x1c8>
9000fcc2:	e011      	b.n	9000fce8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000fcc4:	1e6b      	subs	r3, r5, #1
9000fcc6:	b2da      	uxtb	r2, r3
9000fcc8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fcca:	b16a      	cbz	r2, 9000fce8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fccc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcce:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fcd0:	b153      	cbz	r3, 9000fce8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fcd2:	f001 fbd7 	bl	90011484 <xTaskRemoveFromEventList>
9000fcd6:	2800      	cmp	r0, #0
9000fcd8:	d0f4      	beq.n	9000fcc4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000fcda:	f001 fc71 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
9000fcde:	1e6b      	subs	r3, r5, #1
9000fce0:	b2da      	uxtb	r2, r3
9000fce2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fce4:	2a00      	cmp	r2, #0
9000fce6:	d1f1      	bne.n	9000fccc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000fce8:	23ff      	movs	r3, #255	; 0xff
9000fcea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fcee:	f7ff fc33 	bl	9000f558 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000fcf2:	f001 faa3 	bl	9001123c <xTaskResumeAll>
9000fcf6:	2800      	cmp	r0, #0
9000fcf8:	d1a6      	bne.n	9000fc48 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000fcfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fd02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fd06:	f3bf 8f4f 	dsb	sy
9000fd0a:	f3bf 8f6f 	isb	sy
9000fd0e:	e79b      	b.n	9000fc48 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000fd10:	a802      	add	r0, sp, #8
9000fd12:	f001 fc01 	bl	90011518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000fd16:	e730      	b.n	9000fb7a <xQueueGenericSend+0x76>
9000fd18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd1c:	f383 8811 	msr	BASEPRI, r3
9000fd20:	f3bf 8f6f 	isb	sy
9000fd24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000fd28:	e7fe      	b.n	9000fd28 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000fd2a:	9b01      	ldr	r3, [sp, #4]
9000fd2c:	2b00      	cmp	r3, #0
9000fd2e:	f43f af09 	beq.w	9000fb44 <xQueueGenericSend+0x40>
9000fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd36:	f383 8811 	msr	BASEPRI, r3
9000fd3a:	f3bf 8f6f 	isb	sy
9000fd3e:	f3bf 8f4f 	dsb	sy
9000fd42:	e7fe      	b.n	9000fd42 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000fd44:	463a      	mov	r2, r7
9000fd46:	4641      	mov	r1, r8
9000fd48:	4620      	mov	r0, r4
9000fd4a:	f7ff fd43 	bl	9000f7d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fd4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000fd50:	2b00      	cmp	r3, #0
9000fd52:	d152      	bne.n	9000fdfa <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000fd54:	b148      	cbz	r0, 9000fd6a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000fd56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000fd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fd5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000fd62:	f3bf 8f4f 	dsb	sy
9000fd66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000fd6a:	f7ff fbf5 	bl	9000f558 <vPortExitCritical>
				return pdPASS;
9000fd6e:	2001      	movs	r0, #1
}
9000fd70:	b004      	add	sp, #16
9000fd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000fd76:	f7ff fbef 	bl	9000f558 <vPortExitCritical>
					return errQUEUE_FULL;
9000fd7a:	4648      	mov	r0, r9
9000fd7c:	e7f8      	b.n	9000fd70 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000fd7e:	f7ff fbc9 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000fd82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000fd86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fd88:	2d00      	cmp	r5, #0
9000fd8a:	dd10      	ble.n	9000fdae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd8c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000fd90:	e003      	b.n	9000fd9a <xQueueGenericSend+0x296>
			--cTxLock;
9000fd92:	1e6b      	subs	r3, r5, #1
9000fd94:	b2da      	uxtb	r2, r3
9000fd96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000fd98:	b14a      	cbz	r2, 9000fdae <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fd9c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000fd9e:	b133      	cbz	r3, 9000fdae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fda0:	f001 fb70 	bl	90011484 <xTaskRemoveFromEventList>
9000fda4:	2800      	cmp	r0, #0
9000fda6:	d0f4      	beq.n	9000fd92 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000fda8:	f001 fc0a 	bl	900115c0 <vTaskMissedYield>
9000fdac:	e7f1      	b.n	9000fd92 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000fdae:	23ff      	movs	r3, #255	; 0xff
9000fdb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000fdb4:	f7ff fbd0 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9000fdb8:	f7ff fbac 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000fdbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000fdc0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fdc2:	2d00      	cmp	r5, #0
9000fdc4:	dd10      	ble.n	9000fde8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fdc6:	f104 0610 	add.w	r6, r4, #16
9000fdca:	e003      	b.n	9000fdd4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000fdcc:	1e6b      	subs	r3, r5, #1
9000fdce:	b2da      	uxtb	r2, r3
9000fdd0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000fdd2:	b14a      	cbz	r2, 9000fde8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fdd4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fdd6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000fdd8:	b133      	cbz	r3, 9000fde8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000fdda:	f001 fb53 	bl	90011484 <xTaskRemoveFromEventList>
9000fdde:	2800      	cmp	r0, #0
9000fde0:	d0f4      	beq.n	9000fdcc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000fde2:	f001 fbed 	bl	900115c0 <vTaskMissedYield>
9000fde6:	e7f1      	b.n	9000fdcc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000fde8:	23ff      	movs	r3, #255	; 0xff
9000fdea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000fdee:	f7ff fbb3 	bl	9000f558 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000fdf2:	f001 fa23 	bl	9001123c <xTaskResumeAll>
			return errQUEUE_FULL;
9000fdf6:	2000      	movs	r0, #0
9000fdf8:	e7ba      	b.n	9000fd70 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000fdfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fdfe:	f001 fb41 	bl	90011484 <xTaskRemoveFromEventList>
9000fe02:	2800      	cmp	r0, #0
9000fe04:	d0b1      	beq.n	9000fd6a <xQueueGenericSend+0x266>
9000fe06:	e7a6      	b.n	9000fd56 <xQueueGenericSend+0x252>

9000fe08 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000fe08:	b179      	cbz	r1, 9000fe2a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000fe0a:	2350      	movs	r3, #80	; 0x50
	{
9000fe0c:	b570      	push	{r4, r5, r6, lr}
9000fe0e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000fe10:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000fe12:	9b01      	ldr	r3, [sp, #4]
9000fe14:	2b50      	cmp	r3, #80	; 0x50
9000fe16:	d011      	beq.n	9000fe3c <xQueueCreateMutexStatic+0x34>
9000fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe1c:	f383 8811 	msr	BASEPRI, r3
9000fe20:	f3bf 8f6f 	isb	sy
9000fe24:	f3bf 8f4f 	dsb	sy
9000fe28:	e7fe      	b.n	9000fe28 <xQueueCreateMutexStatic+0x20>
9000fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe2e:	f383 8811 	msr	BASEPRI, r3
9000fe32:	f3bf 8f6f 	isb	sy
9000fe36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000fe3a:	e7fe      	b.n	9000fe3a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000fe3c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fe3e:	2301      	movs	r3, #1
9000fe40:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fe42:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000fe44:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000fe48:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000fe4a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000fe4c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000fe50:	f7ff fb60 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe54:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000fe56:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000fe58:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000fe5a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000fe5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000fe60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe64:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000fe68:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe6c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe6e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe70:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fe72:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000fe76:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000fe7a:	f7ff fa95 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000fe7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000fe82:	f7ff fa91 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000fe86:	f7ff fb67 	bl	9000f558 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000fe8a:	4633      	mov	r3, r6
9000fe8c:	4632      	mov	r2, r6
9000fe8e:	4631      	mov	r1, r6
9000fe90:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000fe92:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000fe96:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000fe98:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000fe9a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000fe9c:	f7ff fe32 	bl	9000fb04 <xQueueGenericSend>
	}
9000fea0:	4620      	mov	r0, r4
9000fea2:	b002      	add	sp, #8
9000fea4:	bd70      	pop	{r4, r5, r6, pc}
9000fea6:	bf00      	nop

9000fea8 <xQueueGiveMutexRecursive>:
	{
9000fea8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000feaa:	b138      	cbz	r0, 9000febc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000feac:	6885      	ldr	r5, [r0, #8]
9000feae:	4604      	mov	r4, r0
9000feb0:	f001 fb8c 	bl	900115cc <xTaskGetCurrentTaskHandle>
9000feb4:	4285      	cmp	r5, r0
9000feb6:	d00a      	beq.n	9000fece <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000feb8:	2000      	movs	r0, #0
	}
9000feba:	bd38      	pop	{r3, r4, r5, pc}
9000febc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fec0:	f383 8811 	msr	BASEPRI, r3
9000fec4:	f3bf 8f6f 	isb	sy
9000fec8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000fecc:	e7fe      	b.n	9000fecc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000fece:	68e3      	ldr	r3, [r4, #12]
9000fed0:	3b01      	subs	r3, #1
9000fed2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000fed4:	b10b      	cbz	r3, 9000feda <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000fed6:	2001      	movs	r0, #1
	}
9000fed8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000feda:	461a      	mov	r2, r3
9000fedc:	4619      	mov	r1, r3
9000fede:	4620      	mov	r0, r4
9000fee0:	f7ff fe10 	bl	9000fb04 <xQueueGenericSend>
			xReturn = pdPASS;
9000fee4:	2001      	movs	r0, #1
	}
9000fee6:	bd38      	pop	{r3, r4, r5, pc}

9000fee8 <xQueueCreateMutex>:
	{
9000fee8:	b570      	push	{r4, r5, r6, lr}
9000feea:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000feec:	2050      	movs	r0, #80	; 0x50
9000feee:	f7ff f939 	bl	9000f164 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000fef2:	4604      	mov	r4, r0
9000fef4:	b370      	cbz	r0, 9000ff54 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fef6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000fef8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000fefa:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000fefc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000ff00:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000ff04:	f7ff fb06 	bl	9000f514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff08:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000ff0a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ff0c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000ff10:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff12:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000ff16:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff1a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff1c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff1e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000ff20:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000ff22:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000ff26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000ff2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000ff2e:	f7ff fa3b 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000ff32:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ff36:	f7ff fa37 	bl	9000f3a8 <vListInitialise>
	taskEXIT_CRITICAL();
9000ff3a:	f7ff fb0d 	bl	9000f558 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ff3e:	4633      	mov	r3, r6
9000ff40:	4632      	mov	r2, r6
9000ff42:	4631      	mov	r1, r6
9000ff44:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000ff46:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000ff4a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000ff4c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000ff4e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000ff50:	f7ff fdd8 	bl	9000fb04 <xQueueGenericSend>
	}
9000ff54:	4620      	mov	r0, r4
9000ff56:	bd70      	pop	{r4, r5, r6, pc}

9000ff58 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000ff58:	2800      	cmp	r0, #0
9000ff5a:	d04e      	beq.n	9000fffa <xQueueGenericSendFromISR+0xa2>
{
9000ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ff60:	460e      	mov	r6, r1
9000ff62:	4604      	mov	r4, r0
9000ff64:	4617      	mov	r7, r2
9000ff66:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ff68:	b339      	cbz	r1, 9000ffba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000ff6a:	2d02      	cmp	r5, #2
9000ff6c:	d10b      	bne.n	9000ff86 <xQueueGenericSendFromISR+0x2e>
9000ff6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ff70:	2b01      	cmp	r3, #1
9000ff72:	d008      	beq.n	9000ff86 <xQueueGenericSendFromISR+0x2e>
9000ff74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff78:	f383 8811 	msr	BASEPRI, r3
9000ff7c:	f3bf 8f6f 	isb	sy
9000ff80:	f3bf 8f4f 	dsb	sy
9000ff84:	e7fe      	b.n	9000ff84 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ff86:	f7ff fbf7 	bl	9000f778 <vPortValidateInterruptPriority>
	__asm volatile
9000ff8a:	f3ef 8811 	mrs	r8, BASEPRI
9000ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff92:	f383 8811 	msr	BASEPRI, r3
9000ff96:	f3bf 8f6f 	isb	sy
9000ff9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000ff9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000ffa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000ffa2:	429a      	cmp	r2, r3
9000ffa4:	d315      	bcc.n	9000ffd2 <xQueueGenericSendFromISR+0x7a>
9000ffa6:	f1a5 0002 	sub.w	r0, r5, #2
9000ffaa:	fab0 f080 	clz	r0, r0
9000ffae:	0940      	lsrs	r0, r0, #5
9000ffb0:	b978      	cbnz	r0, 9000ffd2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000ffb2:	f388 8811 	msr	BASEPRI, r8
}
9000ffb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ffba:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000ffbc:	2b00      	cmp	r3, #0
9000ffbe:	d0d4      	beq.n	9000ff6a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000ffc0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ffc4:	f383 8811 	msr	BASEPRI, r3
9000ffc8:	f3bf 8f6f 	isb	sy
9000ffcc:	f3bf 8f4f 	dsb	sy
9000ffd0:	e7fe      	b.n	9000ffd0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ffd2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000ffd4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ffd8:	4631      	mov	r1, r6
9000ffda:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000ffdc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ffde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000ffe0:	f7ff fbf8 	bl	9000f7d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000ffe4:	1c6b      	adds	r3, r5, #1
9000ffe6:	d011      	beq.n	9001000c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ffe8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000ffea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000ffec:	b25b      	sxtb	r3, r3
9000ffee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000fff2:	f388 8811 	msr	BASEPRI, r8
}
9000fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000fffa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fffe:	f383 8811 	msr	BASEPRI, r3
90010002:	f3bf 8f6f 	isb	sy
90010006:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9001000a:	e7fe      	b.n	9001000a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001000c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001000e:	b90b      	cbnz	r3, 90010014 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
90010010:	2001      	movs	r0, #1
90010012:	e7ce      	b.n	9000ffb2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010014:	f104 0024 	add.w	r0, r4, #36	; 0x24
90010018:	f001 fa34 	bl	90011484 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9001001c:	2800      	cmp	r0, #0
9001001e:	d0f7      	beq.n	90010010 <xQueueGenericSendFromISR+0xb8>
90010020:	2f00      	cmp	r7, #0
90010022:	d0f5      	beq.n	90010010 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
90010024:	2301      	movs	r3, #1
			xReturn = pdPASS;
90010026:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
90010028:	603b      	str	r3, [r7, #0]
9001002a:	e7c2      	b.n	9000ffb2 <xQueueGenericSendFromISR+0x5a>

9001002c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9001002c:	b360      	cbz	r0, 90010088 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9001002e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
90010030:	b570      	push	{r4, r5, r6, lr}
90010032:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
90010034:	b143      	cbz	r3, 90010048 <xQueueGiveFromISR+0x1c>
90010036:	f04f 0350 	mov.w	r3, #80	; 0x50
9001003a:	f383 8811 	msr	BASEPRI, r3
9001003e:	f3bf 8f6f 	isb	sy
90010042:	f3bf 8f4f 	dsb	sy
90010046:	e7fe      	b.n	90010046 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
90010048:	6803      	ldr	r3, [r0, #0]
9001004a:	460d      	mov	r5, r1
9001004c:	b32b      	cbz	r3, 9001009a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9001004e:	f7ff fb93 	bl	9000f778 <vPortValidateInterruptPriority>
	__asm volatile
90010052:	f3ef 8611 	mrs	r6, BASEPRI
90010056:	f04f 0350 	mov.w	r3, #80	; 0x50
9001005a:	f383 8811 	msr	BASEPRI, r3
9001005e:	f3bf 8f6f 	isb	sy
90010062:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90010066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
90010068:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9001006a:	429a      	cmp	r2, r3
9001006c:	d921      	bls.n	900100b2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9001006e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90010072:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
90010074:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90010076:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
90010078:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9001007a:	d01e      	beq.n	900100ba <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9001007c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9001007e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90010080:	b25b      	sxtb	r3, r3
90010082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90010086:	e015      	b.n	900100b4 <xQueueGiveFromISR+0x88>
	__asm volatile
90010088:	f04f 0350 	mov.w	r3, #80	; 0x50
9001008c:	f383 8811 	msr	BASEPRI, r3
90010090:	f3bf 8f6f 	isb	sy
90010094:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010098:	e7fe      	b.n	90010098 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9001009a:	6883      	ldr	r3, [r0, #8]
9001009c:	2b00      	cmp	r3, #0
9001009e:	d0d6      	beq.n	9001004e <xQueueGiveFromISR+0x22>
900100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900100a4:	f383 8811 	msr	BASEPRI, r3
900100a8:	f3bf 8f6f 	isb	sy
900100ac:	f3bf 8f4f 	dsb	sy
900100b0:	e7fe      	b.n	900100b0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
900100b2:	2000      	movs	r0, #0
	__asm volatile
900100b4:	f386 8811 	msr	BASEPRI, r6
}
900100b8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900100ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
900100bc:	b90b      	cbnz	r3, 900100c2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
900100be:	2001      	movs	r0, #1
900100c0:	e7f8      	b.n	900100b4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900100c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
900100c6:	f001 f9dd 	bl	90011484 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
900100ca:	2d00      	cmp	r5, #0
900100cc:	d0f7      	beq.n	900100be <xQueueGiveFromISR+0x92>
900100ce:	2800      	cmp	r0, #0
900100d0:	d0f5      	beq.n	900100be <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
900100d2:	2301      	movs	r3, #1
			xReturn = pdPASS;
900100d4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
900100d6:	602b      	str	r3, [r5, #0]
900100d8:	e7ec      	b.n	900100b4 <xQueueGiveFromISR+0x88>
900100da:	bf00      	nop

900100dc <xQueueReceive>:
{
900100dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900100e0:	b085      	sub	sp, #20
900100e2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
900100e4:	2800      	cmp	r0, #0
900100e6:	f000 815c 	beq.w	900103a2 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
900100ea:	460f      	mov	r7, r1
900100ec:	4604      	mov	r4, r0
900100ee:	2900      	cmp	r1, #0
900100f0:	d079      	beq.n	900101e6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900100f2:	f001 fa71 	bl	900115d8 <xTaskGetSchedulerState>
900100f6:	2800      	cmp	r0, #0
900100f8:	f000 8081 	beq.w	900101fe <xQueueReceive+0x122>
		taskENTER_CRITICAL();
900100fc:	f7ff fa0a 	bl	9000f514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90010100:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90010102:	2d00      	cmp	r5, #0
90010104:	f040 8138 	bne.w	90010378 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
90010108:	9b01      	ldr	r3, [sp, #4]
9001010a:	2b00      	cmp	r3, #0
9001010c:	f000 80d5 	beq.w	900102ba <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
90010110:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010112:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
90010116:	a802      	add	r0, sp, #8
90010118:	f001 f9fe 	bl	90011518 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9001011c:	f7ff fa1c 	bl	9000f558 <vPortExitCritical>
		vTaskSuspendAll();
90010120:	f001 f884 	bl	9001122c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90010124:	f7ff f9f6 	bl	9000f514 <vPortEnterCritical>
90010128:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001012c:	2bff      	cmp	r3, #255	; 0xff
9001012e:	d101      	bne.n	90010134 <xQueueReceive+0x58>
90010130:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
90010134:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010138:	2bff      	cmp	r3, #255	; 0xff
9001013a:	d101      	bne.n	90010140 <xQueueReceive+0x64>
9001013c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
90010140:	f7ff fa0a 	bl	9000f558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90010144:	a901      	add	r1, sp, #4
90010146:	a802      	add	r0, sp, #8
90010148:	f001 f9f2 	bl	90011530 <xTaskCheckForTimeOut>
9001014c:	2800      	cmp	r0, #0
9001014e:	d163      	bne.n	90010218 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
90010150:	f7ff f9e0 	bl	9000f514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90010154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010156:	2b00      	cmp	r3, #0
90010158:	f000 80b5 	beq.w	900102c6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9001015c:	f7ff f9fc 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010160:	f7ff f9d8 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90010164:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010168:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001016a:	2d00      	cmp	r5, #0
9001016c:	dc04      	bgt.n	90010178 <xQueueReceive+0x9c>
9001016e:	e011      	b.n	90010194 <xQueueReceive+0xb8>
			--cTxLock;
90010170:	1e6b      	subs	r3, r5, #1
90010172:	b2da      	uxtb	r2, r3
90010174:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010176:	b16a      	cbz	r2, 90010194 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010178:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001017a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001017c:	b153      	cbz	r3, 90010194 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001017e:	f001 f981 	bl	90011484 <xTaskRemoveFromEventList>
90010182:	2800      	cmp	r0, #0
90010184:	d0f4      	beq.n	90010170 <xQueueReceive+0x94>
						vTaskMissedYield();
90010186:	f001 fa1b 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
9001018a:	1e6b      	subs	r3, r5, #1
9001018c:	b2da      	uxtb	r2, r3
9001018e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010190:	2a00      	cmp	r2, #0
90010192:	d1f1      	bne.n	90010178 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
90010194:	23ff      	movs	r3, #255	; 0xff
90010196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001019a:	f7ff f9dd 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9001019e:	f7ff f9b9 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
900101a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
900101a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101a8:	2d00      	cmp	r5, #0
900101aa:	dd14      	ble.n	900101d6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101ac:	f104 0910 	add.w	r9, r4, #16
900101b0:	e003      	b.n	900101ba <xQueueReceive+0xde>
				--cRxLock;
900101b2:	1e6b      	subs	r3, r5, #1
900101b4:	b2da      	uxtb	r2, r3
900101b6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101b8:	b16a      	cbz	r2, 900101d6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900101ba:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101bc:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900101be:	b153      	cbz	r3, 900101d6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900101c0:	f001 f960 	bl	90011484 <xTaskRemoveFromEventList>
900101c4:	2800      	cmp	r0, #0
900101c6:	d0f4      	beq.n	900101b2 <xQueueReceive+0xd6>
					vTaskMissedYield();
900101c8:	f001 f9fa 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
900101cc:	1e6b      	subs	r3, r5, #1
900101ce:	b2da      	uxtb	r2, r3
900101d0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900101d2:	2a00      	cmp	r2, #0
900101d4:	d1f1      	bne.n	900101ba <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
900101d6:	23ff      	movs	r3, #255	; 0xff
900101d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900101dc:	f7ff f9bc 	bl	9000f558 <vPortExitCritical>
				( void ) xTaskResumeAll();
900101e0:	f001 f82c 	bl	9001123c <xTaskResumeAll>
		taskENTER_CRITICAL();
900101e4:	e060      	b.n	900102a8 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
900101e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
900101e8:	2b00      	cmp	r3, #0
900101ea:	d082      	beq.n	900100f2 <xQueueReceive+0x16>
	__asm volatile
900101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
900101f0:	f383 8811 	msr	BASEPRI, r3
900101f4:	f3bf 8f6f 	isb	sy
900101f8:	f3bf 8f4f 	dsb	sy
900101fc:	e7fe      	b.n	900101fc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900101fe:	9b01      	ldr	r3, [sp, #4]
90010200:	2b00      	cmp	r3, #0
90010202:	f43f af7b 	beq.w	900100fc <xQueueReceive+0x20>
90010206:	f04f 0350 	mov.w	r3, #80	; 0x50
9001020a:	f383 8811 	msr	BASEPRI, r3
9001020e:	f3bf 8f6f 	isb	sy
90010212:	f3bf 8f4f 	dsb	sy
90010216:	e7fe      	b.n	90010216 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
90010218:	f7ff f97c 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001021c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010220:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010222:	2d00      	cmp	r5, #0
90010224:	dc04      	bgt.n	90010230 <xQueueReceive+0x154>
90010226:	e011      	b.n	9001024c <xQueueReceive+0x170>
			--cTxLock;
90010228:	1e6b      	subs	r3, r5, #1
9001022a:	b2da      	uxtb	r2, r3
9001022c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001022e:	b16a      	cbz	r2, 9001024c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010230:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010232:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010234:	b153      	cbz	r3, 9001024c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010236:	f001 f925 	bl	90011484 <xTaskRemoveFromEventList>
9001023a:	2800      	cmp	r0, #0
9001023c:	d0f4      	beq.n	90010228 <xQueueReceive+0x14c>
						vTaskMissedYield();
9001023e:	f001 f9bf 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
90010242:	1e6b      	subs	r3, r5, #1
90010244:	b2da      	uxtb	r2, r3
90010246:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010248:	2a00      	cmp	r2, #0
9001024a:	d1f1      	bne.n	90010230 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9001024c:	23ff      	movs	r3, #255	; 0xff
9001024e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90010252:	f7ff f981 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010256:	f7ff f95d 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001025a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001025e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010260:	2d00      	cmp	r5, #0
90010262:	dd14      	ble.n	9001028e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010264:	f104 0910 	add.w	r9, r4, #16
90010268:	e003      	b.n	90010272 <xQueueReceive+0x196>
				--cRxLock;
9001026a:	1e6b      	subs	r3, r5, #1
9001026c:	b2da      	uxtb	r2, r3
9001026e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010270:	b16a      	cbz	r2, 9001028e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010272:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010274:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010276:	b153      	cbz	r3, 9001028e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010278:	f001 f904 	bl	90011484 <xTaskRemoveFromEventList>
9001027c:	2800      	cmp	r0, #0
9001027e:	d0f4      	beq.n	9001026a <xQueueReceive+0x18e>
					vTaskMissedYield();
90010280:	f001 f99e 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
90010284:	1e6b      	subs	r3, r5, #1
90010286:	b2da      	uxtb	r2, r3
90010288:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001028a:	2a00      	cmp	r2, #0
9001028c:	d1f1      	bne.n	90010272 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9001028e:	23ff      	movs	r3, #255	; 0xff
90010290:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010294:	f7ff f960 	bl	9000f558 <vPortExitCritical>
			( void ) xTaskResumeAll();
90010298:	f000 ffd0 	bl	9001123c <xTaskResumeAll>
	taskENTER_CRITICAL();
9001029c:	f7ff f93a 	bl	9000f514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900102a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900102a2:	b153      	cbz	r3, 900102ba <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
900102a4:	f7ff f958 	bl	9000f558 <vPortExitCritical>
		taskENTER_CRITICAL();
900102a8:	f7ff f934 	bl	9000f514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900102ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900102ae:	2d00      	cmp	r5, #0
900102b0:	d162      	bne.n	90010378 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
900102b2:	9b01      	ldr	r3, [sp, #4]
900102b4:	2b00      	cmp	r3, #0
900102b6:	f47f af31 	bne.w	9001011c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
900102ba:	f7ff f94d 	bl	9000f558 <vPortExitCritical>
					return errQUEUE_EMPTY;
900102be:	2000      	movs	r0, #0
}
900102c0:	b005      	add	sp, #20
900102c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
900102c6:	f7ff f947 	bl	9000f558 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900102ca:	9901      	ldr	r1, [sp, #4]
900102cc:	4630      	mov	r0, r6
900102ce:	f001 f84b 	bl	90011368 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
900102d2:	f7ff f91f 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900102d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900102da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900102dc:	2d00      	cmp	r5, #0
900102de:	dc04      	bgt.n	900102ea <xQueueReceive+0x20e>
900102e0:	e011      	b.n	90010306 <xQueueReceive+0x22a>
			--cTxLock;
900102e2:	1e6b      	subs	r3, r5, #1
900102e4:	b2da      	uxtb	r2, r3
900102e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900102e8:	b16a      	cbz	r2, 90010306 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900102ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900102ec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900102ee:	b153      	cbz	r3, 90010306 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900102f0:	f001 f8c8 	bl	90011484 <xTaskRemoveFromEventList>
900102f4:	2800      	cmp	r0, #0
900102f6:	d0f4      	beq.n	900102e2 <xQueueReceive+0x206>
						vTaskMissedYield();
900102f8:	f001 f962 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
900102fc:	1e6b      	subs	r3, r5, #1
900102fe:	b2da      	uxtb	r2, r3
90010300:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010302:	2a00      	cmp	r2, #0
90010304:	d1f1      	bne.n	900102ea <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
90010306:	23ff      	movs	r3, #255	; 0xff
90010308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001030c:	f7ff f924 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010310:	f7ff f900 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90010314:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010318:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001031a:	2d00      	cmp	r5, #0
9001031c:	dd14      	ble.n	90010348 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001031e:	f104 0910 	add.w	r9, r4, #16
90010322:	e003      	b.n	9001032c <xQueueReceive+0x250>
				--cRxLock;
90010324:	1e6b      	subs	r3, r5, #1
90010326:	b2da      	uxtb	r2, r3
90010328:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001032a:	b16a      	cbz	r2, 90010348 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001032c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001032e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010330:	b153      	cbz	r3, 90010348 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010332:	f001 f8a7 	bl	90011484 <xTaskRemoveFromEventList>
90010336:	2800      	cmp	r0, #0
90010338:	d0f4      	beq.n	90010324 <xQueueReceive+0x248>
					vTaskMissedYield();
9001033a:	f001 f941 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
9001033e:	1e6b      	subs	r3, r5, #1
90010340:	b2da      	uxtb	r2, r3
90010342:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010344:	2a00      	cmp	r2, #0
90010346:	d1f1      	bne.n	9001032c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
90010348:	23ff      	movs	r3, #255	; 0xff
9001034a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9001034e:	f7ff f903 	bl	9000f558 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90010352:	f000 ff73 	bl	9001123c <xTaskResumeAll>
90010356:	2800      	cmp	r0, #0
90010358:	d1a6      	bne.n	900102a8 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9001035a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9001035e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010362:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010366:	f3bf 8f4f 	dsb	sy
9001036a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9001036e:	f7ff f8d1 	bl	9000f514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90010372:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90010374:	2d00      	cmp	r5, #0
90010376:	d09c      	beq.n	900102b2 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90010378:	6c22      	ldr	r2, [r4, #64]	; 0x40
9001037a:	b152      	cbz	r2, 90010392 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9001037c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9001037e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010380:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010382:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010384:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010386:	d301      	bcc.n	9001038c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90010388:	6821      	ldr	r1, [r4, #0]
9001038a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9001038c:	4638      	mov	r0, r7
9001038e:	f017 fd46 	bl	90027e1e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90010392:	3d01      	subs	r5, #1
90010394:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010396:	6923      	ldr	r3, [r4, #16]
90010398:	b963      	cbnz	r3, 900103b4 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9001039a:	f7ff f8dd 	bl	9000f558 <vPortExitCritical>
				return pdPASS;
9001039e:	2001      	movs	r0, #1
900103a0:	e78e      	b.n	900102c0 <xQueueReceive+0x1e4>
900103a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900103a6:	f383 8811 	msr	BASEPRI, r3
900103aa:	f3bf 8f6f 	isb	sy
900103ae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
900103b2:	e7fe      	b.n	900103b2 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900103b4:	f104 0010 	add.w	r0, r4, #16
900103b8:	f001 f864 	bl	90011484 <xTaskRemoveFromEventList>
900103bc:	2800      	cmp	r0, #0
900103be:	d0ec      	beq.n	9001039a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
900103c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900103c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900103c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900103cc:	f3bf 8f4f 	dsb	sy
900103d0:	f3bf 8f6f 	isb	sy
900103d4:	e7e1      	b.n	9001039a <xQueueReceive+0x2be>
900103d6:	bf00      	nop

900103d8 <xQueueSemaphoreTake>:
{
900103d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900103dc:	b084      	sub	sp, #16
900103de:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
900103e0:	2800      	cmp	r0, #0
900103e2:	d05c      	beq.n	9001049e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
900103e4:	6c07      	ldr	r7, [r0, #64]	; 0x40
900103e6:	4604      	mov	r4, r0
900103e8:	b147      	cbz	r7, 900103fc <xQueueSemaphoreTake+0x24>
900103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
900103ee:	f383 8811 	msr	BASEPRI, r3
900103f2:	f3bf 8f6f 	isb	sy
900103f6:	f3bf 8f4f 	dsb	sy
900103fa:	e7fe      	b.n	900103fa <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900103fc:	f001 f8ec 	bl	900115d8 <xTaskGetSchedulerState>
90010400:	4605      	mov	r5, r0
90010402:	2800      	cmp	r0, #0
90010404:	d054      	beq.n	900104b0 <xQueueSemaphoreTake+0xd8>
90010406:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010408:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9001040c:	f7ff f882 	bl	9000f514 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90010410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
90010412:	2b00      	cmp	r3, #0
90010414:	f040 8149 	bne.w	900106aa <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
90010418:	9b01      	ldr	r3, [sp, #4]
9001041a:	2b00      	cmp	r3, #0
9001041c:	f000 813a 	beq.w	90010694 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
90010420:	2d00      	cmp	r5, #0
90010422:	f000 809d 	beq.w	90010560 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
90010426:	f7ff f897 	bl	9000f558 <vPortExitCritical>
		vTaskSuspendAll();
9001042a:	f000 feff 	bl	9001122c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9001042e:	f7ff f871 	bl	9000f514 <vPortEnterCritical>
90010432:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010436:	2bff      	cmp	r3, #255	; 0xff
90010438:	d102      	bne.n	90010440 <xQueueSemaphoreTake+0x68>
9001043a:	2300      	movs	r3, #0
9001043c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
90010440:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010444:	2bff      	cmp	r3, #255	; 0xff
90010446:	d102      	bne.n	9001044e <xQueueSemaphoreTake+0x76>
90010448:	2300      	movs	r3, #0
9001044a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9001044e:	f7ff f883 	bl	9000f558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90010452:	a901      	add	r1, sp, #4
90010454:	a802      	add	r0, sp, #8
90010456:	f001 f86b 	bl	90011530 <xTaskCheckForTimeOut>
9001045a:	2800      	cmp	r0, #0
9001045c:	d135      	bne.n	900104ca <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9001045e:	f7ff f859 	bl	9000f514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90010462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010464:	2b00      	cmp	r3, #0
90010466:	f000 80a4 	beq.w	900105b2 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9001046a:	f7ff f875 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
9001046e:	f7ff f851 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90010472:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90010476:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010478:	2d00      	cmp	r5, #0
9001047a:	dc05      	bgt.n	90010488 <xQueueSemaphoreTake+0xb0>
9001047c:	e074      	b.n	90010568 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9001047e:	1e6b      	subs	r3, r5, #1
90010480:	b2da      	uxtb	r2, r3
90010482:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010484:	2a00      	cmp	r2, #0
90010486:	d06f      	beq.n	90010568 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010488:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001048a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001048c:	2b00      	cmp	r3, #0
9001048e:	d06b      	beq.n	90010568 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010490:	f000 fff8 	bl	90011484 <xTaskRemoveFromEventList>
90010494:	2800      	cmp	r0, #0
90010496:	d0f2      	beq.n	9001047e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
90010498:	f001 f892 	bl	900115c0 <vTaskMissedYield>
9001049c:	e7ef      	b.n	9001047e <xQueueSemaphoreTake+0xa6>
9001049e:	f04f 0350 	mov.w	r3, #80	; 0x50
900104a2:	f383 8811 	msr	BASEPRI, r3
900104a6:	f3bf 8f6f 	isb	sy
900104aa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
900104ae:	e7fe      	b.n	900104ae <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900104b0:	9b01      	ldr	r3, [sp, #4]
900104b2:	2b00      	cmp	r3, #0
900104b4:	f000 80d4 	beq.w	90010660 <xQueueSemaphoreTake+0x288>
900104b8:	f04f 0350 	mov.w	r3, #80	; 0x50
900104bc:	f383 8811 	msr	BASEPRI, r3
900104c0:	f3bf 8f6f 	isb	sy
900104c4:	f3bf 8f4f 	dsb	sy
900104c8:	e7fe      	b.n	900104c8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
900104ca:	f7ff f823 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900104ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900104d2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900104d4:	2d00      	cmp	r5, #0
900104d6:	dc04      	bgt.n	900104e2 <xQueueSemaphoreTake+0x10a>
900104d8:	e011      	b.n	900104fe <xQueueSemaphoreTake+0x126>
			--cTxLock;
900104da:	1e6b      	subs	r3, r5, #1
900104dc:	b2da      	uxtb	r2, r3
900104de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900104e0:	b16a      	cbz	r2, 900104fe <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900104e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900104e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900104e6:	b153      	cbz	r3, 900104fe <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900104e8:	f000 ffcc 	bl	90011484 <xTaskRemoveFromEventList>
900104ec:	2800      	cmp	r0, #0
900104ee:	d0f4      	beq.n	900104da <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
900104f0:	f001 f866 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
900104f4:	1e6b      	subs	r3, r5, #1
900104f6:	b2da      	uxtb	r2, r3
900104f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900104fa:	2a00      	cmp	r2, #0
900104fc:	d1f1      	bne.n	900104e2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
900104fe:	23ff      	movs	r3, #255	; 0xff
90010500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90010504:	f7ff f828 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010508:	f7ff f804 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001050c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010510:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010512:	2d00      	cmp	r5, #0
90010514:	dd14      	ble.n	90010540 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010516:	f104 0810 	add.w	r8, r4, #16
9001051a:	e003      	b.n	90010524 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9001051c:	1e6b      	subs	r3, r5, #1
9001051e:	b2da      	uxtb	r2, r3
90010520:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010522:	b16a      	cbz	r2, 90010540 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010524:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010526:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010528:	b153      	cbz	r3, 90010540 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001052a:	f000 ffab 	bl	90011484 <xTaskRemoveFromEventList>
9001052e:	2800      	cmp	r0, #0
90010530:	d0f4      	beq.n	9001051c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
90010532:	f001 f845 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
90010536:	1e6b      	subs	r3, r5, #1
90010538:	b2da      	uxtb	r2, r3
9001053a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001053c:	2a00      	cmp	r2, #0
9001053e:	d1f1      	bne.n	90010524 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
90010540:	23ff      	movs	r3, #255	; 0xff
90010542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010546:	f7ff f807 	bl	9000f558 <vPortExitCritical>
			( void ) xTaskResumeAll();
9001054a:	f000 fe77 	bl	9001123c <xTaskResumeAll>
	taskENTER_CRITICAL();
9001054e:	f7fe ffe1 	bl	9000f514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90010552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010554:	2b00      	cmp	r3, #0
90010556:	d07c      	beq.n	90010652 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
90010558:	f7fe fffe 	bl	9000f558 <vPortExitCritical>
	return xReturn;
9001055c:	2501      	movs	r5, #1
9001055e:	e755      	b.n	9001040c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
90010560:	a802      	add	r0, sp, #8
90010562:	f000 ffd9 	bl	90011518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90010566:	e75e      	b.n	90010426 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
90010568:	23ff      	movs	r3, #255	; 0xff
9001056a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001056e:	f7fe fff3 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010572:	f7fe ffcf 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90010576:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001057a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001057c:	2d00      	cmp	r5, #0
9001057e:	dd10      	ble.n	900105a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010580:	f104 0810 	add.w	r8, r4, #16
90010584:	e003      	b.n	9001058e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
90010586:	1e6b      	subs	r3, r5, #1
90010588:	b2da      	uxtb	r2, r3
9001058a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001058c:	b14a      	cbz	r2, 900105a2 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001058e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010590:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010592:	b133      	cbz	r3, 900105a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010594:	f000 ff76 	bl	90011484 <xTaskRemoveFromEventList>
90010598:	2800      	cmp	r0, #0
9001059a:	d0f4      	beq.n	90010586 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9001059c:	f001 f810 	bl	900115c0 <vTaskMissedYield>
900105a0:	e7f1      	b.n	90010586 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
900105a2:	23ff      	movs	r3, #255	; 0xff
900105a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900105a8:	f7fe ffd6 	bl	9000f558 <vPortExitCritical>
				( void ) xTaskResumeAll();
900105ac:	f000 fe46 	bl	9001123c <xTaskResumeAll>
900105b0:	e7d4      	b.n	9001055c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
900105b2:	f7fe ffd1 	bl	9000f558 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900105b6:	6823      	ldr	r3, [r4, #0]
900105b8:	2b00      	cmp	r3, #0
900105ba:	d062      	beq.n	90010682 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900105bc:	9901      	ldr	r1, [sp, #4]
900105be:	4630      	mov	r0, r6
900105c0:	f000 fed2 	bl	90011368 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
900105c4:	f7fe ffa6 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900105c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900105cc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900105ce:	2d00      	cmp	r5, #0
900105d0:	dc04      	bgt.n	900105dc <xQueueSemaphoreTake+0x204>
900105d2:	e00d      	b.n	900105f0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
900105d4:	1e6b      	subs	r3, r5, #1
900105d6:	b2da      	uxtb	r2, r3
900105d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900105da:	b14a      	cbz	r2, 900105f0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900105dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900105de:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900105e0:	b133      	cbz	r3, 900105f0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900105e2:	f000 ff4f 	bl	90011484 <xTaskRemoveFromEventList>
900105e6:	2800      	cmp	r0, #0
900105e8:	d0f4      	beq.n	900105d4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
900105ea:	f000 ffe9 	bl	900115c0 <vTaskMissedYield>
900105ee:	e7f1      	b.n	900105d4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
900105f0:	23ff      	movs	r3, #255	; 0xff
900105f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900105f6:	f7fe ffaf 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
900105fa:	f7fe ff8b 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
900105fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90010602:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010604:	2d00      	cmp	r5, #0
90010606:	dd10      	ble.n	9001062a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010608:	f104 0810 	add.w	r8, r4, #16
9001060c:	e003      	b.n	90010616 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9001060e:	1e6b      	subs	r3, r5, #1
90010610:	b2da      	uxtb	r2, r3
90010612:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010614:	b14a      	cbz	r2, 9001062a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010616:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010618:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001061a:	b133      	cbz	r3, 9001062a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001061c:	f000 ff32 	bl	90011484 <xTaskRemoveFromEventList>
90010620:	2800      	cmp	r0, #0
90010622:	d0f4      	beq.n	9001060e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
90010624:	f000 ffcc 	bl	900115c0 <vTaskMissedYield>
90010628:	e7f1      	b.n	9001060e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9001062a:	23ff      	movs	r3, #255	; 0xff
9001062c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90010630:	f7fe ff92 	bl	9000f558 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90010634:	f000 fe02 	bl	9001123c <xTaskResumeAll>
90010638:	2800      	cmp	r0, #0
9001063a:	d18f      	bne.n	9001055c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9001063c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010644:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010648:	f3bf 8f4f 	dsb	sy
9001064c:	f3bf 8f6f 	isb	sy
90010650:	e784      	b.n	9001055c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
90010652:	f7fe ff81 	bl	9000f558 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
90010656:	b92f      	cbnz	r7, 90010664 <xQueueSemaphoreTake+0x28c>
}
90010658:	4638      	mov	r0, r7
9001065a:	b004      	add	sp, #16
9001065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90010660:	4607      	mov	r7, r0
90010662:	e6d1      	b.n	90010408 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
90010664:	f7fe ff56 	bl	9000f514 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90010668:	6a61      	ldr	r1, [r4, #36]	; 0x24
9001066a:	b119      	cbz	r1, 90010674 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9001066c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9001066e:	6819      	ldr	r1, [r3, #0]
90010670:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90010674:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
90010676:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90010678:	f001 f84a 	bl	90011710 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9001067c:	f7fe ff6c 	bl	9000f558 <vPortExitCritical>
90010680:	e7ea      	b.n	90010658 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
90010682:	f7fe ff47 	bl	9000f514 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
90010686:	68a0      	ldr	r0, [r4, #8]
90010688:	f000 ffb6 	bl	900115f8 <xTaskPriorityInherit>
9001068c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9001068e:	f7fe ff63 	bl	9000f558 <vPortExitCritical>
90010692:	e793      	b.n	900105bc <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
90010694:	2f00      	cmp	r7, #0
90010696:	d0f1      	beq.n	9001067c <xQueueSemaphoreTake+0x2a4>
90010698:	f04f 0350 	mov.w	r3, #80	; 0x50
9001069c:	f383 8811 	msr	BASEPRI, r3
900106a0:	f3bf 8f6f 	isb	sy
900106a4:	f3bf 8f4f 	dsb	sy
900106a8:	e7fe      	b.n	900106a8 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
900106aa:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900106ac:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
900106ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900106b0:	b12a      	cbz	r2, 900106be <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900106b2:	6923      	ldr	r3, [r4, #16]
900106b4:	b93b      	cbnz	r3, 900106c6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
900106b6:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
900106b8:	f7fe ff4e 	bl	9000f558 <vPortExitCritical>
				return pdPASS;
900106bc:	e7cc      	b.n	90010658 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
900106be:	f001 f87b 	bl	900117b8 <pvTaskIncrementMutexHeldCount>
900106c2:	60a0      	str	r0, [r4, #8]
900106c4:	e7f5      	b.n	900106b2 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900106c6:	f104 0010 	add.w	r0, r4, #16
900106ca:	f000 fedb 	bl	90011484 <xTaskRemoveFromEventList>
900106ce:	2800      	cmp	r0, #0
900106d0:	d0f1      	beq.n	900106b6 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
900106d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900106d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900106da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900106de:	f3bf 8f4f 	dsb	sy
900106e2:	f3bf 8f6f 	isb	sy
900106e6:	e7e6      	b.n	900106b6 <xQueueSemaphoreTake+0x2de>

900106e8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
900106e8:	b1a8      	cbz	r0, 90010716 <xQueueTakeMutexRecursive+0x2e>
	{
900106ea:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900106ec:	6886      	ldr	r6, [r0, #8]
900106ee:	4604      	mov	r4, r0
900106f0:	460d      	mov	r5, r1
900106f2:	f000 ff6b 	bl	900115cc <xTaskGetCurrentTaskHandle>
900106f6:	4286      	cmp	r6, r0
900106f8:	d008      	beq.n	9001070c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
900106fa:	4629      	mov	r1, r5
900106fc:	4620      	mov	r0, r4
900106fe:	f7ff fe6b 	bl	900103d8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
90010702:	b110      	cbz	r0, 9001070a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010704:	68e3      	ldr	r3, [r4, #12]
90010706:	3301      	adds	r3, #1
90010708:	60e3      	str	r3, [r4, #12]
	}
9001070a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9001070c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9001070e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90010710:	4403      	add	r3, r0
90010712:	60e3      	str	r3, [r4, #12]
	}
90010714:	bd70      	pop	{r4, r5, r6, pc}
90010716:	f04f 0350 	mov.w	r3, #80	; 0x50
9001071a:	f383 8811 	msr	BASEPRI, r3
9001071e:	f3bf 8f6f 	isb	sy
90010722:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
90010726:	e7fe      	b.n	90010726 <xQueueTakeMutexRecursive+0x3e>

90010728 <xQueueReceiveFromISR>:
{
90010728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9001072c:	b310      	cbz	r0, 90010774 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001072e:	460e      	mov	r6, r1
90010730:	4604      	mov	r4, r0
90010732:	4617      	mov	r7, r2
90010734:	b191      	cbz	r1, 9001075c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90010736:	f7ff f81f 	bl	9000f778 <vPortValidateInterruptPriority>
	__asm volatile
9001073a:	f3ef 8911 	mrs	r9, BASEPRI
9001073e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010742:	f383 8811 	msr	BASEPRI, r3
90010746:	f3bf 8f6f 	isb	sy
9001074a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9001074e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90010750:	b9cd      	cbnz	r5, 90010786 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
90010752:	4628      	mov	r0, r5
	__asm volatile
90010754:	f389 8811 	msr	BASEPRI, r9
}
90010758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001075c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9001075e:	2b00      	cmp	r3, #0
90010760:	d0e9      	beq.n	90010736 <xQueueReceiveFromISR+0xe>
	__asm volatile
90010762:	f04f 0350 	mov.w	r3, #80	; 0x50
90010766:	f383 8811 	msr	BASEPRI, r3
9001076a:	f3bf 8f6f 	isb	sy
9001076e:	f3bf 8f4f 	dsb	sy
90010772:	e7fe      	b.n	90010772 <xQueueReceiveFromISR+0x4a>
90010774:	f04f 0350 	mov.w	r3, #80	; 0x50
90010778:	f383 8811 	msr	BASEPRI, r3
9001077c:	f3bf 8f6f 	isb	sy
90010780:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010784:	e7fe      	b.n	90010784 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
90010786:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9001078a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9001078c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90010790:	b142      	cbz	r2, 900107a4 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010792:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010794:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90010796:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90010798:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9001079a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9001079c:	d215      	bcs.n	900107ca <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9001079e:	4630      	mov	r0, r6
900107a0:	f017 fb3d 	bl	90027e1e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900107a4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
900107a6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900107aa:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
900107ac:	d009      	beq.n	900107c2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
900107ae:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
900107b2:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
900107b4:	b25b      	sxtb	r3, r3
900107b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
900107ba:	f389 8811 	msr	BASEPRI, r9
}
900107be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900107c2:	6923      	ldr	r3, [r4, #16]
900107c4:	b923      	cbnz	r3, 900107d0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
900107c6:	2001      	movs	r0, #1
900107c8:	e7c4      	b.n	90010754 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
900107ca:	6821      	ldr	r1, [r4, #0]
900107cc:	60e1      	str	r1, [r4, #12]
900107ce:	e7e6      	b.n	9001079e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900107d0:	f104 0010 	add.w	r0, r4, #16
900107d4:	f000 fe56 	bl	90011484 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
900107d8:	2f00      	cmp	r7, #0
900107da:	d0f4      	beq.n	900107c6 <xQueueReceiveFromISR+0x9e>
900107dc:	2800      	cmp	r0, #0
900107de:	d0f2      	beq.n	900107c6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
900107e0:	2301      	movs	r3, #1
			xReturn = pdPASS;
900107e2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
900107e4:	603b      	str	r3, [r7, #0]
900107e6:	e7b5      	b.n	90010754 <xQueueReceiveFromISR+0x2c>

900107e8 <vQueueDelete>:
	configASSERT( pxQueue );
900107e8:	b1e0      	cbz	r0, 90010824 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
900107ea:	4b21      	ldr	r3, [pc, #132]	; (90010870 <vQueueDelete+0x88>)
900107ec:	685a      	ldr	r2, [r3, #4]
900107ee:	4290      	cmp	r0, r2
900107f0:	d02b      	beq.n	9001084a <vQueueDelete+0x62>
900107f2:	68da      	ldr	r2, [r3, #12]
900107f4:	4290      	cmp	r0, r2
900107f6:	d02a      	beq.n	9001084e <vQueueDelete+0x66>
900107f8:	695a      	ldr	r2, [r3, #20]
900107fa:	4290      	cmp	r0, r2
900107fc:	d029      	beq.n	90010852 <vQueueDelete+0x6a>
900107fe:	69da      	ldr	r2, [r3, #28]
90010800:	4290      	cmp	r0, r2
90010802:	d028      	beq.n	90010856 <vQueueDelete+0x6e>
90010804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010806:	4290      	cmp	r0, r2
90010808:	d027      	beq.n	9001085a <vQueueDelete+0x72>
9001080a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9001080c:	4290      	cmp	r0, r2
9001080e:	d014      	beq.n	9001083a <vQueueDelete+0x52>
90010810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90010812:	4290      	cmp	r0, r2
90010814:	d023      	beq.n	9001085e <vQueueDelete+0x76>
90010816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90010818:	4290      	cmp	r0, r2
9001081a:	d022      	beq.n	90010862 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9001081c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
90010820:	b14b      	cbz	r3, 90010836 <vQueueDelete+0x4e>
}
90010822:	4770      	bx	lr
	__asm volatile
90010824:	f04f 0350 	mov.w	r3, #80	; 0x50
90010828:	f383 8811 	msr	BASEPRI, r3
9001082c:	f3bf 8f6f 	isb	sy
90010830:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90010834:	e7fe      	b.n	90010834 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
90010836:	f7fe bd53 	b.w	9000f2e0 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001083a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9001083c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90010840:	ed9f 7b09 	vldr	d7, [pc, #36]	; 90010868 <vQueueDelete+0x80>
90010844:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
90010848:	e7e8      	b.n	9001081c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9001084a:	2200      	movs	r2, #0
9001084c:	e7f6      	b.n	9001083c <vQueueDelete+0x54>
9001084e:	2201      	movs	r2, #1
90010850:	e7f4      	b.n	9001083c <vQueueDelete+0x54>
90010852:	2202      	movs	r2, #2
90010854:	e7f2      	b.n	9001083c <vQueueDelete+0x54>
90010856:	2203      	movs	r2, #3
90010858:	e7f0      	b.n	9001083c <vQueueDelete+0x54>
9001085a:	2204      	movs	r2, #4
9001085c:	e7ee      	b.n	9001083c <vQueueDelete+0x54>
9001085e:	2206      	movs	r2, #6
90010860:	e7ec      	b.n	9001083c <vQueueDelete+0x54>
90010862:	2207      	movs	r2, #7
90010864:	e7ea      	b.n	9001083c <vQueueDelete+0x54>
90010866:	bf00      	nop
	...
90010870:	24026b38 	.word	0x24026b38

90010874 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
90010874:	4b12      	ldr	r3, [pc, #72]	; (900108c0 <vQueueAddToRegistry+0x4c>)
90010876:	681a      	ldr	r2, [r3, #0]
90010878:	b17a      	cbz	r2, 9001089a <vQueueAddToRegistry+0x26>
9001087a:	689a      	ldr	r2, [r3, #8]
9001087c:	b162      	cbz	r2, 90010898 <vQueueAddToRegistry+0x24>
9001087e:	691a      	ldr	r2, [r3, #16]
90010880:	b192      	cbz	r2, 900108a8 <vQueueAddToRegistry+0x34>
90010882:	699a      	ldr	r2, [r3, #24]
90010884:	b192      	cbz	r2, 900108ac <vQueueAddToRegistry+0x38>
90010886:	6a1a      	ldr	r2, [r3, #32]
90010888:	b192      	cbz	r2, 900108b0 <vQueueAddToRegistry+0x3c>
9001088a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9001088c:	b192      	cbz	r2, 900108b4 <vQueueAddToRegistry+0x40>
9001088e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90010890:	b192      	cbz	r2, 900108b8 <vQueueAddToRegistry+0x44>
90010892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90010894:	b192      	cbz	r2, 900108bc <vQueueAddToRegistry+0x48>
	}
90010896:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90010898:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9001089a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9001089e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
900108a2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
900108a6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900108a8:	2202      	movs	r2, #2
900108aa:	e7f6      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108ac:	2203      	movs	r2, #3
900108ae:	e7f4      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108b0:	2204      	movs	r2, #4
900108b2:	e7f2      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108b4:	2205      	movs	r2, #5
900108b6:	e7f0      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108b8:	2206      	movs	r2, #6
900108ba:	e7ee      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108bc:	2207      	movs	r2, #7
900108be:	e7ec      	b.n	9001089a <vQueueAddToRegistry+0x26>
900108c0:	24026b38 	.word	0x24026b38

900108c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
900108c4:	b570      	push	{r4, r5, r6, lr}
900108c6:	4605      	mov	r5, r0
900108c8:	460e      	mov	r6, r1
900108ca:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
900108cc:	f7fe fe22 	bl	9000f514 <vPortEnterCritical>
900108d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
900108d4:	2bff      	cmp	r3, #255	; 0xff
900108d6:	d102      	bne.n	900108de <vQueueWaitForMessageRestricted+0x1a>
900108d8:	2300      	movs	r3, #0
900108da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
900108de:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
900108e2:	2bff      	cmp	r3, #255	; 0xff
900108e4:	d102      	bne.n	900108ec <vQueueWaitForMessageRestricted+0x28>
900108e6:	2300      	movs	r3, #0
900108e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
900108ec:	f7fe fe34 	bl	9000f558 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
900108f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
900108f2:	2b00      	cmp	r3, #0
900108f4:	d043      	beq.n	9001097e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
900108f6:	f7fe fe0d 	bl	9000f514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900108fa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
900108fe:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010900:	2c00      	cmp	r4, #0
90010902:	dd14      	ble.n	9001092e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010904:	f105 0624 	add.w	r6, r5, #36	; 0x24
90010908:	e003      	b.n	90010912 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9001090a:	1e63      	subs	r3, r4, #1
9001090c:	b2da      	uxtb	r2, r3
9001090e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90010910:	b16a      	cbz	r2, 9001092e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010914:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90010916:	b153      	cbz	r3, 9001092e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90010918:	f000 fdb4 	bl	90011484 <xTaskRemoveFromEventList>
9001091c:	2800      	cmp	r0, #0
9001091e:	d0f4      	beq.n	9001090a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
90010920:	f000 fe4e 	bl	900115c0 <vTaskMissedYield>
			--cTxLock;
90010924:	1e63      	subs	r3, r4, #1
90010926:	b2da      	uxtb	r2, r3
90010928:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001092a:	2a00      	cmp	r2, #0
9001092c:	d1f1      	bne.n	90010912 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9001092e:	23ff      	movs	r3, #255	; 0xff
90010930:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
90010934:	f7fe fe10 	bl	9000f558 <vPortExitCritical>
	taskENTER_CRITICAL();
90010938:	f7fe fdec 	bl	9000f514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001093c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
90010940:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010942:	2c00      	cmp	r4, #0
90010944:	dd14      	ble.n	90010970 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010946:	f105 0610 	add.w	r6, r5, #16
9001094a:	e003      	b.n	90010954 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9001094c:	1e63      	subs	r3, r4, #1
9001094e:	b2da      	uxtb	r2, r3
90010950:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90010952:	b16a      	cbz	r2, 90010970 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010954:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90010956:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90010958:	b153      	cbz	r3, 90010970 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001095a:	f000 fd93 	bl	90011484 <xTaskRemoveFromEventList>
9001095e:	2800      	cmp	r0, #0
90010960:	d0f4      	beq.n	9001094c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
90010962:	f000 fe2d 	bl	900115c0 <vTaskMissedYield>
				--cRxLock;
90010966:	1e63      	subs	r3, r4, #1
90010968:	b2da      	uxtb	r2, r3
9001096a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001096c:	2a00      	cmp	r2, #0
9001096e:	d1f1      	bne.n	90010954 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
90010970:	23ff      	movs	r3, #255	; 0xff
90010972:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
90010976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9001097a:	f7fe bded 	b.w	9000f558 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9001097e:	4622      	mov	r2, r4
90010980:	4631      	mov	r1, r6
90010982:	f105 0024 	add.w	r0, r5, #36	; 0x24
90010986:	f000 fd33 	bl	900113f0 <vTaskPlaceOnEventListRestricted>
9001098a:	e7b4      	b.n	900108f6 <vQueueWaitForMessageRestricted+0x32>

9001098c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9001098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90010990:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90010992:	f7fe fdbf 	bl	9000f514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90010996:	4a34      	ldr	r2, [pc, #208]	; (90010a68 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
90010998:	4e34      	ldr	r6, [pc, #208]	; (90010a6c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9001099a:	6813      	ldr	r3, [r2, #0]
9001099c:	3301      	adds	r3, #1
9001099e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
900109a0:	6833      	ldr	r3, [r6, #0]
900109a2:	2b00      	cmp	r3, #0
900109a4:	d032      	beq.n	90010a0c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
900109a6:	4c32      	ldr	r4, [pc, #200]	; (90010a70 <prvAddNewTaskToReadyList+0xe4>)
900109a8:	6823      	ldr	r3, [r4, #0]
900109aa:	b33b      	cbz	r3, 900109fc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
900109ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
900109ae:	4f31      	ldr	r7, [pc, #196]	; (90010a74 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
900109b0:	4a31      	ldr	r2, [pc, #196]	; (90010a78 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
900109b2:	4932      	ldr	r1, [pc, #200]	; (90010a7c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
900109b4:	6813      	ldr	r3, [r2, #0]
900109b6:	3301      	adds	r3, #1
900109b8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
900109ba:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
900109bc:	680b      	ldr	r3, [r1, #0]
900109be:	4283      	cmp	r3, r0
900109c0:	d200      	bcs.n	900109c4 <prvAddNewTaskToReadyList+0x38>
900109c2:	6008      	str	r0, [r1, #0]
900109c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900109c8:	1d29      	adds	r1, r5, #4
900109ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
900109ce:	f7fe fcfb 	bl	9000f3c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
900109d2:	f7fe fdc1 	bl	9000f558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
900109d6:	6823      	ldr	r3, [r4, #0]
900109d8:	b173      	cbz	r3, 900109f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
900109da:	6832      	ldr	r2, [r6, #0]
900109dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900109de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900109e0:	429a      	cmp	r2, r3
900109e2:	d209      	bcs.n	900109f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
900109e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900109e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900109ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900109f0:	f3bf 8f4f 	dsb	sy
900109f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900109f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
900109fc:	6833      	ldr	r3, [r6, #0]
900109fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010a02:	4f1c      	ldr	r7, [pc, #112]	; (90010a74 <prvAddNewTaskToReadyList+0xe8>)
90010a04:	4283      	cmp	r3, r0
90010a06:	d8d3      	bhi.n	900109b0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
90010a08:	6035      	str	r5, [r6, #0]
90010a0a:	e7d1      	b.n	900109b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
90010a0c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
90010a0e:	6813      	ldr	r3, [r2, #0]
90010a10:	2b01      	cmp	r3, #1
90010a12:	d003      	beq.n	90010a1c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90010a14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90010a16:	4f17      	ldr	r7, [pc, #92]	; (90010a74 <prvAddNewTaskToReadyList+0xe8>)
90010a18:	4c15      	ldr	r4, [pc, #84]	; (90010a70 <prvAddNewTaskToReadyList+0xe4>)
90010a1a:	e7c9      	b.n	900109b0 <prvAddNewTaskToReadyList+0x24>
90010a1c:	4f15      	ldr	r7, [pc, #84]	; (90010a74 <prvAddNewTaskToReadyList+0xe8>)
90010a1e:	463c      	mov	r4, r7
90010a20:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010a24:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90010a26:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90010a28:	f7fe fcbe 	bl	9000f3a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90010a2c:	45a0      	cmp	r8, r4
90010a2e:	d1f9      	bne.n	90010a24 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
90010a30:	f8df 9060 	ldr.w	r9, [pc, #96]	; 90010a94 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
90010a34:	f8df 8060 	ldr.w	r8, [pc, #96]	; 90010a98 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
90010a38:	4648      	mov	r0, r9
90010a3a:	4c0d      	ldr	r4, [pc, #52]	; (90010a70 <prvAddNewTaskToReadyList+0xe4>)
90010a3c:	f7fe fcb4 	bl	9000f3a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90010a40:	4640      	mov	r0, r8
90010a42:	f7fe fcb1 	bl	9000f3a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
90010a46:	480e      	ldr	r0, [pc, #56]	; (90010a80 <prvAddNewTaskToReadyList+0xf4>)
90010a48:	f7fe fcae 	bl	9000f3a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
90010a4c:	480d      	ldr	r0, [pc, #52]	; (90010a84 <prvAddNewTaskToReadyList+0xf8>)
90010a4e:	f7fe fcab 	bl	9000f3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90010a52:	480d      	ldr	r0, [pc, #52]	; (90010a88 <prvAddNewTaskToReadyList+0xfc>)
90010a54:	f7fe fca8 	bl	9000f3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90010a58:	4b0c      	ldr	r3, [pc, #48]	; (90010a8c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
90010a5a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
90010a5c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90010a60:	4b0b      	ldr	r3, [pc, #44]	; (90010a90 <prvAddNewTaskToReadyList+0x104>)
90010a62:	f8c3 8000 	str.w	r8, [r3]
}
90010a66:	e7a3      	b.n	900109b0 <prvAddNewTaskToReadyList+0x24>
90010a68:	24026fe4 	.word	0x24026fe4
90010a6c:	24026b78 	.word	0x24026b78
90010a70:	24027040 	.word	0x24027040
90010a74:	24026b84 	.word	0x24026b84
90010a78:	24026ff0 	.word	0x24026ff0
90010a7c:	24026ff4 	.word	0x24026ff4
90010a80:	2402702c 	.word	0x2402702c
90010a84:	24027058 	.word	0x24027058
90010a88:	24027044 	.word	0x24027044
90010a8c:	24026b7c 	.word	0x24026b7c
90010a90:	24026b80 	.word	0x24026b80
90010a94:	24026ff8 	.word	0x24026ff8
90010a98:	2402700c 	.word	0x2402700c

90010a9c <prvIdleTask>:
{
90010a9c:	b580      	push	{r7, lr}
90010a9e:	4c22      	ldr	r4, [pc, #136]	; (90010b28 <prvIdleTask+0x8c>)
				taskYIELD();
90010aa0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90010aa4:	4e21      	ldr	r6, [pc, #132]	; (90010b2c <prvIdleTask+0x90>)
90010aa6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
90010aaa:	4d21      	ldr	r5, [pc, #132]	; (90010b30 <prvIdleTask+0x94>)
90010aac:	4f21      	ldr	r7, [pc, #132]	; (90010b34 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90010aae:	6823      	ldr	r3, [r4, #0]
90010ab0:	b353      	cbz	r3, 90010b08 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
90010ab2:	f7fe fd2f 	bl	9000f514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010ab6:	68f3      	ldr	r3, [r6, #12]
90010ab8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010abc:	f10a 0004 	add.w	r0, sl, #4
90010ac0:	f7fe fcaa 	bl	9000f418 <uxListRemove>
				--uxCurrentNumberOfTasks;
90010ac4:	682b      	ldr	r3, [r5, #0]
90010ac6:	3b01      	subs	r3, #1
90010ac8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
90010aca:	6823      	ldr	r3, [r4, #0]
90010acc:	3b01      	subs	r3, #1
90010ace:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
90010ad0:	f7fe fd42 	bl	9000f558 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90010ad4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
90010ad8:	b163      	cbz	r3, 90010af4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90010ada:	2b01      	cmp	r3, #1
90010adc:	d020      	beq.n	90010b20 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90010ade:	2b02      	cmp	r3, #2
90010ae0:	d0e5      	beq.n	90010aae <prvIdleTask+0x12>
90010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
90010ae6:	f383 8811 	msr	BASEPRI, r3
90010aea:	f3bf 8f6f 	isb	sy
90010aee:	f3bf 8f4f 	dsb	sy
90010af2:	e7fe      	b.n	90010af2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
90010af4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
90010af8:	f7fe fbf2 	bl	9000f2e0 <vPortFree>
				vPortFree( pxTCB );
90010afc:	4650      	mov	r0, sl
90010afe:	f7fe fbef 	bl	9000f2e0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90010b02:	6823      	ldr	r3, [r4, #0]
90010b04:	2b00      	cmp	r3, #0
90010b06:	d1d4      	bne.n	90010ab2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90010b08:	683b      	ldr	r3, [r7, #0]
90010b0a:	2b01      	cmp	r3, #1
90010b0c:	d905      	bls.n	90010b1a <prvIdleTask+0x7e>
				taskYIELD();
90010b0e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
90010b12:	f3bf 8f4f 	dsb	sy
90010b16:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
90010b1a:	f7f3 fab1 	bl	90004080 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
90010b1e:	e7c6      	b.n	90010aae <prvIdleTask+0x12>
				vPortFree( pxTCB );
90010b20:	4650      	mov	r0, sl
90010b22:	f7fe fbdd 	bl	9000f2e0 <vPortFree>
90010b26:	e7c2      	b.n	90010aae <prvIdleTask+0x12>
90010b28:	24026fe8 	.word	0x24026fe8
90010b2c:	24027058 	.word	0x24027058
90010b30:	24026fe4 	.word	0x24026fe4
90010b34:	24026b84 	.word	0x24026b84

90010b38 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010b38:	4b4a      	ldr	r3, [pc, #296]	; (90010c64 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
90010b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010b3e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
90010b40:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90010b42:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
90010b44:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90010b46:	2e00      	cmp	r6, #0
90010b48:	d040      	beq.n	90010bcc <xTaskIncrementTick.part.0+0x94>
90010b4a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 90010c78 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
90010b4e:	f8db 3000 	ldr.w	r3, [fp]
90010b52:	429e      	cmp	r6, r3
90010b54:	d347      	bcc.n	90010be6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010b56:	4f44      	ldr	r7, [pc, #272]	; (90010c68 <xTaskIncrementTick.part.0+0x130>)
90010b58:	683b      	ldr	r3, [r7, #0]
90010b5a:	681d      	ldr	r5, [r3, #0]
90010b5c:	2d00      	cmp	r5, #0
90010b5e:	d077      	beq.n	90010c50 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
90010b60:	2500      	movs	r5, #0
90010b62:	f8df 9118 	ldr.w	r9, [pc, #280]	; 90010c7c <xTaskIncrementTick.part.0+0x144>
90010b66:	f8df a118 	ldr.w	sl, [pc, #280]	; 90010c80 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
90010b6a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 90010c84 <xTaskIncrementTick.part.0+0x14c>
90010b6e:	e022      	b.n	90010bb6 <xTaskIncrementTick.part.0+0x7e>
90010b70:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010b72:	f7fe fc51 	bl	9000f418 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90010b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010b78:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90010b7c:	9901      	ldr	r1, [sp, #4]
90010b7e:	b113      	cbz	r3, 90010b86 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010b80:	f7fe fc4a 	bl	9000f418 <uxListRemove>
90010b84:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
90010b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010b88:	f8d8 2000 	ldr.w	r2, [r8]
90010b8c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90010b90:	4293      	cmp	r3, r2
90010b92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010b96:	d901      	bls.n	90010b9c <xTaskIncrementTick.part.0+0x64>
90010b98:	f8c8 3000 	str.w	r3, [r8]
90010b9c:	f7fe fc14 	bl	9000f3c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010ba0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010ba4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010ba6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90010ba8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010baa:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
90010bac:	4291      	cmp	r1, r2
90010bae:	bf28      	it	cs
90010bb0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010bb2:	2b00      	cmp	r3, #0
90010bb4:	d050      	beq.n	90010c58 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010bb6:	683b      	ldr	r3, [r7, #0]
90010bb8:	68db      	ldr	r3, [r3, #12]
90010bba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
90010bbc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010bbe:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
90010bc0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010bc2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
90010bc4:	d2d4      	bcs.n	90010b70 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
90010bc6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
90010bca:	e011      	b.n	90010bf0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
90010bcc:	4b26      	ldr	r3, [pc, #152]	; (90010c68 <xTaskIncrementTick.part.0+0x130>)
90010bce:	681a      	ldr	r2, [r3, #0]
90010bd0:	6812      	ldr	r2, [r2, #0]
90010bd2:	b30a      	cbz	r2, 90010c18 <xTaskIncrementTick.part.0+0xe0>
90010bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
90010bd8:	f383 8811 	msr	BASEPRI, r3
90010bdc:	f3bf 8f6f 	isb	sy
90010be0:	f3bf 8f4f 	dsb	sy
90010be4:	e7fe      	b.n	90010be4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
90010be6:	2500      	movs	r5, #0
90010be8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 90010c7c <xTaskIncrementTick.part.0+0x144>
90010bec:	f8df a090 	ldr.w	sl, [pc, #144]	; 90010c80 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010bf0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
90010bf4:	491d      	ldr	r1, [pc, #116]	; (90010c6c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90010bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90010bfc:	009b      	lsls	r3, r3, #2
90010bfe:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
90010c02:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
90010c04:	2a02      	cmp	r2, #2
90010c06:	bf28      	it	cs
90010c08:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
90010c0a:	2b00      	cmp	r3, #0
}
90010c0c:	bf0c      	ite	eq
90010c0e:	4628      	moveq	r0, r5
90010c10:	2001      	movne	r0, #1
90010c12:	b003      	add	sp, #12
90010c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
90010c18:	4a15      	ldr	r2, [pc, #84]	; (90010c70 <xTaskIncrementTick.part.0+0x138>)
90010c1a:	6818      	ldr	r0, [r3, #0]
90010c1c:	6811      	ldr	r1, [r2, #0]
90010c1e:	6019      	str	r1, [r3, #0]
90010c20:	4914      	ldr	r1, [pc, #80]	; (90010c74 <xTaskIncrementTick.part.0+0x13c>)
90010c22:	6010      	str	r0, [r2, #0]
90010c24:	680a      	ldr	r2, [r1, #0]
90010c26:	3201      	adds	r2, #1
90010c28:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010c2a:	681a      	ldr	r2, [r3, #0]
90010c2c:	6812      	ldr	r2, [r2, #0]
90010c2e:	b932      	cbnz	r2, 90010c3e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90010c30:	f8df b044 	ldr.w	fp, [pc, #68]	; 90010c78 <xTaskIncrementTick.part.0+0x140>
90010c34:	f04f 33ff 	mov.w	r3, #4294967295
90010c38:	f8cb 3000 	str.w	r3, [fp]
90010c3c:	e787      	b.n	90010b4e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010c3e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010c40:	f8df b034 	ldr.w	fp, [pc, #52]	; 90010c78 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010c44:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010c46:	68db      	ldr	r3, [r3, #12]
90010c48:	685b      	ldr	r3, [r3, #4]
90010c4a:	f8cb 3000 	str.w	r3, [fp]
	}
}
90010c4e:	e77e      	b.n	90010b4e <xTaskIncrementTick.part.0+0x16>
90010c50:	f8df 9028 	ldr.w	r9, [pc, #40]	; 90010c7c <xTaskIncrementTick.part.0+0x144>
90010c54:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010c80 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010c58:	f04f 33ff 	mov.w	r3, #4294967295
90010c5c:	f8cb 3000 	str.w	r3, [fp]
					break;
90010c60:	e7c6      	b.n	90010bf0 <xTaskIncrementTick.part.0+0xb8>
90010c62:	bf00      	nop
90010c64:	2402706c 	.word	0x2402706c
90010c68:	24026b7c 	.word	0x24026b7c
90010c6c:	24027070 	.word	0x24027070
90010c70:	24026b80 	.word	0x24026b80
90010c74:	24027024 	.word	0x24027024
90010c78:	24027020 	.word	0x24027020
90010c7c:	24026b84 	.word	0x24026b84
90010c80:	24026b78 	.word	0x24026b78
90010c84:	24026ff4 	.word	0x24026ff4

90010c88 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
90010c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
90010c8c:	4d41      	ldr	r5, [pc, #260]	; (90010d94 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
90010c8e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
90010c90:	f7fe fc40 	bl	9000f514 <vPortEnterCritical>
		--uxSchedulerSuspended;
90010c94:	682b      	ldr	r3, [r5, #0]
90010c96:	3b01      	subs	r3, #1
90010c98:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010c9a:	682b      	ldr	r3, [r5, #0]
90010c9c:	2b00      	cmp	r3, #0
90010c9e:	d161      	bne.n	90010d64 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90010ca0:	4b3d      	ldr	r3, [pc, #244]	; (90010d98 <xTaskResumeAll.part.0+0x110>)
90010ca2:	681b      	ldr	r3, [r3, #0]
90010ca4:	2b00      	cmp	r3, #0
90010ca6:	d05d      	beq.n	90010d64 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010ca8:	4e3c      	ldr	r6, [pc, #240]	; (90010d9c <xTaskResumeAll.part.0+0x114>)
90010caa:	6833      	ldr	r3, [r6, #0]
90010cac:	2b00      	cmp	r3, #0
90010cae:	d06e      	beq.n	90010d8e <xTaskResumeAll.part.0+0x106>
90010cb0:	4f3b      	ldr	r7, [pc, #236]	; (90010da0 <xTaskResumeAll.part.0+0x118>)
90010cb2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 90010db0 <xTaskResumeAll.part.0+0x128>
90010cb6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 90010db4 <xTaskResumeAll.part.0+0x12c>
90010cba:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 90010db8 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010cbe:	68f3      	ldr	r3, [r6, #12]
90010cc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010cc2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90010cc6:	f104 0018 	add.w	r0, r4, #24
90010cca:	f7fe fba5 	bl	9000f418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90010cce:	4658      	mov	r0, fp
90010cd0:	f7fe fba2 	bl	9000f418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90010cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90010cd6:	683a      	ldr	r2, [r7, #0]
90010cd8:	4659      	mov	r1, fp
90010cda:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90010cde:	4293      	cmp	r3, r2
90010ce0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90010ce4:	d900      	bls.n	90010ce8 <xTaskResumeAll.part.0+0x60>
90010ce6:	603b      	str	r3, [r7, #0]
90010ce8:	f7fe fb6e 	bl	9000f3c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90010cec:	f8d8 3000 	ldr.w	r3, [r8]
90010cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90010cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90010cf4:	429a      	cmp	r2, r3
90010cf6:	d33d      	bcc.n	90010d74 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
90010cf8:	2301      	movs	r3, #1
90010cfa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010cfe:	6833      	ldr	r3, [r6, #0]
90010d00:	2b00      	cmp	r3, #0
90010d02:	d1dc      	bne.n	90010cbe <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010d04:	4b27      	ldr	r3, [pc, #156]	; (90010da4 <xTaskResumeAll.part.0+0x11c>)
90010d06:	681a      	ldr	r2, [r3, #0]
90010d08:	6812      	ldr	r2, [r2, #0]
90010d0a:	2a00      	cmp	r2, #0
90010d0c:	d03a      	beq.n	90010d84 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d0e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010d10:	4b25      	ldr	r3, [pc, #148]	; (90010da8 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90010d12:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90010d14:	68d2      	ldr	r2, [r2, #12]
90010d16:	6852      	ldr	r2, [r2, #4]
90010d18:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
90010d1a:	4e24      	ldr	r6, [pc, #144]	; (90010dac <xTaskResumeAll.part.0+0x124>)
90010d1c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
90010d1e:	b194      	cbz	r4, 90010d46 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
90010d20:	2701      	movs	r7, #1
90010d22:	e006      	b.n	90010d32 <xTaskResumeAll.part.0+0xaa>
90010d24:	f7ff ff08 	bl	90010b38 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
90010d28:	b108      	cbz	r0, 90010d2e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
90010d2a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010d2e:	3c01      	subs	r4, #1
90010d30:	d008      	beq.n	90010d44 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90010d32:	682b      	ldr	r3, [r5, #0]
90010d34:	2b00      	cmp	r3, #0
90010d36:	d0f5      	beq.n	90010d24 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
90010d38:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010d3a:	3c01      	subs	r4, #1
		++xPendedTicks;
90010d3c:	f103 0301 	add.w	r3, r3, #1
90010d40:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90010d42:	d1f6      	bne.n	90010d32 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
90010d44:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
90010d46:	f8da 3000 	ldr.w	r3, [sl]
90010d4a:	b15b      	cbz	r3, 90010d64 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
90010d4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010d58:	f3bf 8f4f 	dsb	sy
90010d5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
90010d60:	2001      	movs	r0, #1
90010d62:	e000      	b.n	90010d66 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
90010d64:	2000      	movs	r0, #0
90010d66:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90010d68:	f7fe fbf6 	bl	9000f558 <vPortExitCritical>
}
90010d6c:	9801      	ldr	r0, [sp, #4]
90010d6e:	b003      	add	sp, #12
90010d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90010d74:	6833      	ldr	r3, [r6, #0]
90010d76:	2b00      	cmp	r3, #0
90010d78:	d1a1      	bne.n	90010cbe <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90010d7a:	4b0a      	ldr	r3, [pc, #40]	; (90010da4 <xTaskResumeAll.part.0+0x11c>)
90010d7c:	681a      	ldr	r2, [r3, #0]
90010d7e:	6812      	ldr	r2, [r2, #0]
90010d80:	2a00      	cmp	r2, #0
90010d82:	d1c4      	bne.n	90010d0e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
90010d84:	4b08      	ldr	r3, [pc, #32]	; (90010da8 <xTaskResumeAll.part.0+0x120>)
90010d86:	f04f 32ff 	mov.w	r2, #4294967295
90010d8a:	601a      	str	r2, [r3, #0]
90010d8c:	e7c5      	b.n	90010d1a <xTaskResumeAll.part.0+0x92>
90010d8e:	f8df a028 	ldr.w	sl, [pc, #40]	; 90010db8 <xTaskResumeAll.part.0+0x130>
90010d92:	e7c2      	b.n	90010d1a <xTaskResumeAll.part.0+0x92>
90010d94:	24026fec 	.word	0x24026fec
90010d98:	24026fe4 	.word	0x24026fe4
90010d9c:	2402702c 	.word	0x2402702c
90010da0:	24026ff4 	.word	0x24026ff4
90010da4:	24026b7c 	.word	0x24026b7c
90010da8:	24027020 	.word	0x24027020
90010dac:	24027028 	.word	0x24027028
90010db0:	24026b84 	.word	0x24026b84
90010db4:	24026b78 	.word	0x24026b78
90010db8:	24027070 	.word	0x24027070

90010dbc <xTaskCreateStatic>:
	{
90010dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90010dc0:	b083      	sub	sp, #12
90010dc2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
90010dc4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
90010dc8:	b1bb      	cbz	r3, 90010dfa <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
90010dca:	b16c      	cbz	r4, 90010de8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
90010dcc:	2360      	movs	r3, #96	; 0x60
90010dce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
90010dd0:	9b01      	ldr	r3, [sp, #4]
90010dd2:	2b60      	cmp	r3, #96	; 0x60
90010dd4:	d01a      	beq.n	90010e0c <xTaskCreateStatic+0x50>
90010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
90010dda:	f383 8811 	msr	BASEPRI, r3
90010dde:	f3bf 8f6f 	isb	sy
90010de2:	f3bf 8f4f 	dsb	sy
90010de6:	e7fe      	b.n	90010de6 <xTaskCreateStatic+0x2a>
90010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
90010dec:	f383 8811 	msr	BASEPRI, r3
90010df0:	f3bf 8f6f 	isb	sy
90010df4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90010df8:	e7fe      	b.n	90010df8 <xTaskCreateStatic+0x3c>
90010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
90010dfe:	f383 8811 	msr	BASEPRI, r3
90010e02:	f3bf 8f6f 	isb	sy
90010e06:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90010e0a:	e7fe      	b.n	90010e0a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010e0e:	0096      	lsls	r6, r2, #2
90010e10:	4607      	mov	r7, r0
90010e12:	460d      	mov	r5, r1
90010e14:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90010e16:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90010e18:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010e1a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010e1c:	4632      	mov	r2, r6
90010e1e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90010e20:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010e24:	f016 ff1a 	bl	90027c5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010e28:	1f32      	subs	r2, r6, #4
90010e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
90010e2c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90010e2e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
90010e32:	2d00      	cmp	r5, #0
90010e34:	d069      	beq.n	90010f0a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e36:	782b      	ldrb	r3, [r5, #0]
90010e38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010e3c:	2b00      	cmp	r3, #0
90010e3e:	d03b      	beq.n	90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e40:	786b      	ldrb	r3, [r5, #1]
90010e42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010e46:	2b00      	cmp	r3, #0
90010e48:	d036      	beq.n	90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e4a:	78ab      	ldrb	r3, [r5, #2]
90010e4c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90010e50:	b393      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e52:	78eb      	ldrb	r3, [r5, #3]
90010e54:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010e58:	b373      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e5a:	792b      	ldrb	r3, [r5, #4]
90010e5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90010e60:	b353      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e62:	796b      	ldrb	r3, [r5, #5]
90010e64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010e68:	b333      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e6a:	79ab      	ldrb	r3, [r5, #6]
90010e6c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90010e70:	b313      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e72:	79eb      	ldrb	r3, [r5, #7]
90010e74:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010e78:	b1f3      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e7a:	7a2b      	ldrb	r3, [r5, #8]
90010e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
90010e80:	b1d3      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e82:	7a6b      	ldrb	r3, [r5, #9]
90010e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010e88:	b1b3      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e8a:	7aab      	ldrb	r3, [r5, #10]
90010e8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010e90:	b193      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e92:	7aeb      	ldrb	r3, [r5, #11]
90010e94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010e98:	b173      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010e9a:	7b2b      	ldrb	r3, [r5, #12]
90010e9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010ea0:	b153      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010ea2:	7b6b      	ldrb	r3, [r5, #13]
90010ea4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010ea8:	b133      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010eaa:	7bab      	ldrb	r3, [r5, #14]
90010eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010eb0:	b113      	cbz	r3, 90010eb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010eb2:	7beb      	ldrb	r3, [r5, #15]
90010eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010eb8:	2300      	movs	r3, #0
90010eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90010ebe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
90010ec0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010ec2:	1d20      	adds	r0, r4, #4
90010ec4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010ec6:	6526      	str	r6, [r4, #80]	; 0x50
90010ec8:	bf28      	it	cs
90010eca:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90010ecc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90010ece:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010ed0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010ed4:	f7fe fa74 	bl	9000f3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010ed8:	f104 0018 	add.w	r0, r4, #24
90010edc:	f7fe fa70 	bl	9000f3c0 <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010ee0:	4642      	mov	r2, r8
90010ee2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
90010ee4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010ee6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010ee8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90010eea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90010eec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90010eee:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90010ef0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010ef4:	f7fe fae2 	bl	9000f4bc <pxPortInitialiseStack>
90010ef8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
90010efa:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90010efc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90010efe:	f7ff fd45 	bl	9001098c <prvAddNewTaskToReadyList>
	}
90010f02:	4620      	mov	r0, r4
90010f04:	b003      	add	sp, #12
90010f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90010f0a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90010f0e:	e7d6      	b.n	90010ebe <xTaskCreateStatic+0x102>

90010f10 <xTaskCreate>:
	{
90010f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90010f14:	0096      	lsls	r6, r2, #2
	{
90010f16:	4680      	mov	r8, r0
90010f18:	460d      	mov	r5, r1
90010f1a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90010f1c:	4630      	mov	r0, r6
90010f1e:	f7fe f921 	bl	9000f164 <pvPortMalloc>
			if( pxStack != NULL )
90010f22:	2800      	cmp	r0, #0
90010f24:	f000 8083 	beq.w	9001102e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90010f28:	4607      	mov	r7, r0
90010f2a:	2060      	movs	r0, #96	; 0x60
90010f2c:	f7fe f91a 	bl	9000f164 <pvPortMalloc>
				if( pxNewTCB != NULL )
90010f30:	4604      	mov	r4, r0
90010f32:	2800      	cmp	r0, #0
90010f34:	d07f      	beq.n	90011036 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010f36:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90010f38:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010f3a:	4632      	mov	r2, r6
90010f3c:	4638      	mov	r0, r7
90010f3e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90010f40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90010f44:	f016 fe8a 	bl	90027c5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010f48:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
90010f4c:	2d00      	cmp	r5, #0
90010f4e:	d078      	beq.n	90011042 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f50:	782b      	ldrb	r3, [r5, #0]
90010f52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90010f56:	2b00      	cmp	r3, #0
90010f58:	d03b      	beq.n	90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f5a:	786b      	ldrb	r3, [r5, #1]
90010f5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
90010f60:	2b00      	cmp	r3, #0
90010f62:	d036      	beq.n	90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f64:	78ab      	ldrb	r3, [r5, #2]
90010f66:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90010f6a:	b393      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f6c:	78eb      	ldrb	r3, [r5, #3]
90010f6e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90010f72:	b373      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f74:	792b      	ldrb	r3, [r5, #4]
90010f76:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90010f7a:	b353      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f7c:	796b      	ldrb	r3, [r5, #5]
90010f7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
90010f82:	b333      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f84:	79ab      	ldrb	r3, [r5, #6]
90010f86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90010f8a:	b313      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f8c:	79eb      	ldrb	r3, [r5, #7]
90010f8e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
90010f92:	b1f3      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f94:	7a2b      	ldrb	r3, [r5, #8]
90010f96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
90010f9a:	b1d3      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010f9c:	7a6b      	ldrb	r3, [r5, #9]
90010f9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
90010fa2:	b1b3      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fa4:	7aab      	ldrb	r3, [r5, #10]
90010fa6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
90010faa:	b193      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fac:	7aeb      	ldrb	r3, [r5, #11]
90010fae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
90010fb2:	b173      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fb4:	7b2b      	ldrb	r3, [r5, #12]
90010fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
90010fba:	b153      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fbc:	7b6b      	ldrb	r3, [r5, #13]
90010fbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
90010fc2:	b133      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fc4:	7bab      	ldrb	r3, [r5, #14]
90010fc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
90010fca:	b113      	cbz	r3, 90010fd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90010fcc:	7beb      	ldrb	r3, [r5, #15]
90010fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90010fd2:	2300      	movs	r3, #0
90010fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90010fd8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
90010fda:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010fdc:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010fde:	3e04      	subs	r6, #4
90010fe0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90010fe2:	6527      	str	r7, [r4, #80]	; 0x50
90010fe4:	bf28      	it	cs
90010fe6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90010fe8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90010fea:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010fec:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90010ff0:	f7fe f9e6 	bl	9000f3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90010ff4:	f104 0018 	add.w	r0, r4, #24
90010ff8:	f7fe f9e2 	bl	9000f3c0 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90010ffc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
90011000:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90011002:	464a      	mov	r2, r9
90011004:	4641      	mov	r1, r8
90011006:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001100a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9001100c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9001100e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90011010:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90011012:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90011016:	f7fe fa51 	bl	9000f4bc <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9001101a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9001101c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9001101e:	b103      	cbz	r3, 90011022 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90011020:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90011022:	4620      	mov	r0, r4
90011024:	f7ff fcb2 	bl	9001098c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90011028:	2001      	movs	r0, #1
	}
9001102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9001102e:	f04f 30ff 	mov.w	r0, #4294967295
	}
90011032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
90011036:	4638      	mov	r0, r7
90011038:	f7fe f952 	bl	9000f2e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9001103c:	f04f 30ff 	mov.w	r0, #4294967295
90011040:	e7f3      	b.n	9001102a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90011042:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90011046:	e7c7      	b.n	90010fd8 <xTaskCreate+0xc8>

90011048 <vTaskDelay>:
	{
90011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9001104a:	b950      	cbnz	r0, 90011062 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9001104c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90011050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90011054:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90011058:	f3bf 8f4f 	dsb	sy
9001105c:	f3bf 8f6f 	isb	sy
	}
90011060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90011062:	4d1e      	ldr	r5, [pc, #120]	; (900110dc <vTaskDelay+0x94>)
90011064:	682b      	ldr	r3, [r5, #0]
90011066:	b143      	cbz	r3, 9001107a <vTaskDelay+0x32>
90011068:	f04f 0350 	mov.w	r3, #80	; 0x50
9001106c:	f383 8811 	msr	BASEPRI, r3
90011070:	f3bf 8f6f 	isb	sy
90011074:	f3bf 8f4f 	dsb	sy
90011078:	e7fe      	b.n	90011078 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9001107a:	682b      	ldr	r3, [r5, #0]
9001107c:	4604      	mov	r4, r0
9001107e:	3301      	adds	r3, #1
90011080:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90011082:	4b17      	ldr	r3, [pc, #92]	; (900110e0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011084:	4e17      	ldr	r6, [pc, #92]	; (900110e4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90011086:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011088:	6830      	ldr	r0, [r6, #0]
9001108a:	3004      	adds	r0, #4
9001108c:	f7fe f9c4 	bl	9000f418 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90011090:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90011092:	6833      	ldr	r3, [r6, #0]
90011094:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90011096:	d315      	bcc.n	900110c4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011098:	4b13      	ldr	r3, [pc, #76]	; (900110e8 <vTaskDelay+0xa0>)
9001109a:	6818      	ldr	r0, [r3, #0]
9001109c:	6831      	ldr	r1, [r6, #0]
9001109e:	3104      	adds	r1, #4
900110a0:	f7fe f9a2 	bl	9000f3e8 <vListInsert>
	configASSERT( uxSchedulerSuspended );
900110a4:	682b      	ldr	r3, [r5, #0]
900110a6:	b943      	cbnz	r3, 900110ba <vTaskDelay+0x72>
900110a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900110ac:	f383 8811 	msr	BASEPRI, r3
900110b0:	f3bf 8f6f 	isb	sy
900110b4:	f3bf 8f4f 	dsb	sy
900110b8:	e7fe      	b.n	900110b8 <vTaskDelay+0x70>
900110ba:	f7ff fde5 	bl	90010c88 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
900110be:	2800      	cmp	r0, #0
900110c0:	d0c4      	beq.n	9001104c <vTaskDelay+0x4>
	}
900110c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900110c4:	4b09      	ldr	r3, [pc, #36]	; (900110ec <vTaskDelay+0xa4>)
900110c6:	6818      	ldr	r0, [r3, #0]
900110c8:	6831      	ldr	r1, [r6, #0]
900110ca:	3104      	adds	r1, #4
900110cc:	f7fe f98c 	bl	9000f3e8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
900110d0:	4b07      	ldr	r3, [pc, #28]	; (900110f0 <vTaskDelay+0xa8>)
900110d2:	681a      	ldr	r2, [r3, #0]
900110d4:	4294      	cmp	r4, r2
900110d6:	d2e5      	bcs.n	900110a4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
900110d8:	601c      	str	r4, [r3, #0]
900110da:	e7e3      	b.n	900110a4 <vTaskDelay+0x5c>
900110dc:	24026fec 	.word	0x24026fec
900110e0:	2402706c 	.word	0x2402706c
900110e4:	24026b78 	.word	0x24026b78
900110e8:	24026b80 	.word	0x24026b80
900110ec:	24026b7c 	.word	0x24026b7c
900110f0:	24027020 	.word	0x24027020

900110f4 <vTaskStartScheduler>:
{
900110f4:	b570      	push	{r4, r5, r6, lr}
900110f6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
900110f8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900110fa:	4668      	mov	r0, sp
900110fc:	aa02      	add	r2, sp, #8
900110fe:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
90011100:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90011104:	f7fe f810 	bl	9000f128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90011108:	9d00      	ldr	r5, [sp, #0]
9001110a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9001110e:	b1b8      	cbz	r0, 90011140 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
90011110:	b16d      	cbz	r5, 9001112e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
90011112:	2260      	movs	r2, #96	; 0x60
90011114:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
90011116:	9a03      	ldr	r2, [sp, #12]
90011118:	2a60      	cmp	r2, #96	; 0x60
9001111a:	d01a      	beq.n	90011152 <vTaskStartScheduler+0x5e>
9001111c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011120:	f383 8811 	msr	BASEPRI, r3
90011124:	f3bf 8f6f 	isb	sy
90011128:	f3bf 8f4f 	dsb	sy
9001112c:	e7fe      	b.n	9001112c <vTaskStartScheduler+0x38>
9001112e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011132:	f383 8811 	msr	BASEPRI, r3
90011136:	f3bf 8f6f 	isb	sy
9001113a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9001113e:	e7fe      	b.n	9001113e <vTaskStartScheduler+0x4a>
90011140:	f04f 0350 	mov.w	r3, #80	; 0x50
90011144:	f383 8811 	msr	BASEPRI, r3
90011148:	f3bf 8f6f 	isb	sy
9001114c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90011150:	e7fe      	b.n	90011150 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90011152:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90011154:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90011156:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90011158:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001115a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9001115c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90011160:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90011162:	f016 fd7b 	bl	90027c5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90011166:	1f33      	subs	r3, r6, #4
90011168:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001116a:	492a      	ldr	r1, [pc, #168]	; (90011214 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9001116c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9001116e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90011170:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
90011174:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90011176:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9001117a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9001117e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
90011180:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90011184:	f7fe f91c 	bl	9000f3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90011188:	f105 0018 	add.w	r0, r5, #24
9001118c:	f7fe f918 	bl	9000f3c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011190:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90011192:	4622      	mov	r2, r4
90011194:	4920      	ldr	r1, [pc, #128]	; (90011218 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
90011196:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90011198:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001119a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9001119c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9001119e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
900111a0:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
900111a2:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900111a6:	f7fe f989 	bl	9000f4bc <pxPortInitialiseStack>
900111aa:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
900111ac:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
900111ae:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
900111b0:	f7ff fbec 	bl	9001098c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
900111b4:	f000 fca4 	bl	90011b00 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
900111b8:	2801      	cmp	r0, #1
900111ba:	d00c      	beq.n	900111d6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
900111bc:	3001      	adds	r0, #1
900111be:	d001      	beq.n	900111c4 <vTaskStartScheduler+0xd0>
}
900111c0:	b004      	add	sp, #16
900111c2:	bd70      	pop	{r4, r5, r6, pc}
900111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
900111c8:	f383 8811 	msr	BASEPRI, r3
900111cc:	f3bf 8f6f 	isb	sy
900111d0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
900111d4:	e7fe      	b.n	900111d4 <vTaskStartScheduler+0xe0>
900111d6:	f04f 0350 	mov.w	r3, #80	; 0x50
900111da:	f383 8811 	msr	BASEPRI, r3
900111de:	f3bf 8f6f 	isb	sy
900111e2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
900111e6:	4b0d      	ldr	r3, [pc, #52]	; (9001121c <vTaskStartScheduler+0x128>)
900111e8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
900111ec:	490c      	ldr	r1, [pc, #48]	; (90011220 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
900111ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
900111f0:	4b0c      	ldr	r3, [pc, #48]	; (90011224 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
900111f2:	4a0d      	ldr	r2, [pc, #52]	; (90011228 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
900111f4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
900111f6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
900111f8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
900111fa:	b143      	cbz	r3, 9001120e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
900111fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900111fe:	b10b      	cbz	r3, 90011204 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
90011200:	2000      	movs	r0, #0
90011202:	4798      	blx	r3
}
90011204:	b004      	add	sp, #16
90011206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9001120a:	f7fe ba15 	b.w	9000f638 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9001120e:	6813      	ldr	r3, [r2, #0]
90011210:	e7f4      	b.n	900111fc <vTaskStartScheduler+0x108>
90011212:	bf00      	nop
90011214:	454c4449 	.word	0x454c4449
90011218:	90010a9d 	.word	0x90010a9d
9001121c:	24027020 	.word	0x24027020
90011220:	24027040 	.word	0x24027040
90011224:	2402706c 	.word	0x2402706c
90011228:	24026b78 	.word	0x24026b78

9001122c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9001122c:	4a02      	ldr	r2, [pc, #8]	; (90011238 <vTaskSuspendAll+0xc>)
9001122e:	6813      	ldr	r3, [r2, #0]
90011230:	3301      	adds	r3, #1
90011232:	6013      	str	r3, [r2, #0]
}
90011234:	4770      	bx	lr
90011236:	bf00      	nop
90011238:	24026fec 	.word	0x24026fec

9001123c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9001123c:	4b06      	ldr	r3, [pc, #24]	; (90011258 <xTaskResumeAll+0x1c>)
9001123e:	681b      	ldr	r3, [r3, #0]
90011240:	b943      	cbnz	r3, 90011254 <xTaskResumeAll+0x18>
90011242:	f04f 0350 	mov.w	r3, #80	; 0x50
90011246:	f383 8811 	msr	BASEPRI, r3
9001124a:	f3bf 8f6f 	isb	sy
9001124e:	f3bf 8f4f 	dsb	sy
90011252:	e7fe      	b.n	90011252 <xTaskResumeAll+0x16>
90011254:	f7ff bd18 	b.w	90010c88 <xTaskResumeAll.part.0>
90011258:	24026fec 	.word	0x24026fec

9001125c <xTaskGetTickCount>:
		xTicks = xTickCount;
9001125c:	4b01      	ldr	r3, [pc, #4]	; (90011264 <xTaskGetTickCount+0x8>)
9001125e:	6818      	ldr	r0, [r3, #0]
}
90011260:	4770      	bx	lr
90011262:	bf00      	nop
90011264:	2402706c 	.word	0x2402706c

90011268 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90011268:	4b05      	ldr	r3, [pc, #20]	; (90011280 <xTaskIncrementTick+0x18>)
9001126a:	681b      	ldr	r3, [r3, #0]
9001126c:	b90b      	cbnz	r3, 90011272 <xTaskIncrementTick+0xa>
9001126e:	f7ff bc63 	b.w	90010b38 <xTaskIncrementTick.part.0>
		++xPendedTicks;
90011272:	4a04      	ldr	r2, [pc, #16]	; (90011284 <xTaskIncrementTick+0x1c>)
}
90011274:	2000      	movs	r0, #0
		++xPendedTicks;
90011276:	6813      	ldr	r3, [r2, #0]
90011278:	3301      	adds	r3, #1
9001127a:	6013      	str	r3, [r2, #0]
}
9001127c:	4770      	bx	lr
9001127e:	bf00      	nop
90011280:	24026fec 	.word	0x24026fec
90011284:	24027028 	.word	0x24027028

90011288 <vTaskSetApplicationTaskTag>:
	{
90011288:	b538      	push	{r3, r4, r5, lr}
9001128a:	460d      	mov	r5, r1
		if( xTask == NULL )
9001128c:	b138      	cbz	r0, 9001129e <vTaskSetApplicationTaskTag+0x16>
9001128e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
90011290:	f7fe f940 	bl	9000f514 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90011294:	6565      	str	r5, [r4, #84]	; 0x54
	}
90011296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9001129a:	f7fe b95d 	b.w	9000f558 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9001129e:	4b04      	ldr	r3, [pc, #16]	; (900112b0 <vTaskSetApplicationTaskTag+0x28>)
900112a0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
900112a2:	f7fe f937 	bl	9000f514 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
900112a6:	6565      	str	r5, [r4, #84]	; 0x54
	}
900112a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
900112ac:	f7fe b954 	b.w	9000f558 <vPortExitCritical>
900112b0:	24026b78 	.word	0x24026b78

900112b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
900112b4:	4b27      	ldr	r3, [pc, #156]	; (90011354 <vTaskSwitchContext+0xa0>)
900112b6:	681b      	ldr	r3, [r3, #0]
900112b8:	b11b      	cbz	r3, 900112c2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
900112ba:	4b27      	ldr	r3, [pc, #156]	; (90011358 <vTaskSwitchContext+0xa4>)
900112bc:	2201      	movs	r2, #1
900112be:	601a      	str	r2, [r3, #0]
900112c0:	4770      	bx	lr
{
900112c2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
900112c4:	4a24      	ldr	r2, [pc, #144]	; (90011358 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
900112c6:	4c25      	ldr	r4, [pc, #148]	; (9001135c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
900112c8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
900112ca:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
900112cc:	2b00      	cmp	r3, #0
900112ce:	d036      	beq.n	9001133e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
900112d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900112d2:	b10b      	cbz	r3, 900112d8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
900112d4:	2001      	movs	r0, #1
900112d6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900112d8:	4d21      	ldr	r5, [pc, #132]	; (90011360 <vTaskSwitchContext+0xac>)
900112da:	4922      	ldr	r1, [pc, #136]	; (90011364 <vTaskSwitchContext+0xb0>)
900112dc:	682b      	ldr	r3, [r5, #0]
900112de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900112e2:	0098      	lsls	r0, r3, #2
900112e4:	0092      	lsls	r2, r2, #2
900112e6:	588a      	ldr	r2, [r1, r2]
900112e8:	b942      	cbnz	r2, 900112fc <vTaskSwitchContext+0x48>
900112ea:	b1fb      	cbz	r3, 9001132c <vTaskSwitchContext+0x78>
900112ec:	3b01      	subs	r3, #1
900112ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900112f2:	0098      	lsls	r0, r3, #2
900112f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900112f8:	2a00      	cmp	r2, #0
900112fa:	d0f6      	beq.n	900112ea <vTaskSwitchContext+0x36>
900112fc:	4418      	add	r0, r3
900112fe:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
90011302:	f8dc 1004 	ldr.w	r1, [ip, #4]
90011306:	4662      	mov	r2, ip
90011308:	6849      	ldr	r1, [r1, #4]
9001130a:	3208      	adds	r2, #8
9001130c:	4291      	cmp	r1, r2
9001130e:	f8cc 1004 	str.w	r1, [ip, #4]
90011312:	d01b      	beq.n	9001134c <vTaskSwitchContext+0x98>
90011314:	68ca      	ldr	r2, [r1, #12]
90011316:	6022      	str	r2, [r4, #0]
90011318:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9001131a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9001131c:	b1a3      	cbz	r3, 90011348 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9001131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90011320:	b11b      	cbz	r3, 9001132a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
90011322:	2000      	movs	r0, #0
}
90011324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
90011328:	4718      	bx	r3
}
9001132a:	bd70      	pop	{r4, r5, r6, pc}
9001132c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011330:	f383 8811 	msr	BASEPRI, r3
90011334:	f3bf 8f6f 	isb	sy
90011338:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001133c:	e7fe      	b.n	9001133c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9001133e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
90011340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90011342:	2b00      	cmp	r3, #0
90011344:	d1c6      	bne.n	900112d4 <vTaskSwitchContext+0x20>
90011346:	e7c7      	b.n	900112d8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
90011348:	6823      	ldr	r3, [r4, #0]
9001134a:	e7e8      	b.n	9001131e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9001134c:	6849      	ldr	r1, [r1, #4]
9001134e:	f8cc 1004 	str.w	r1, [ip, #4]
90011352:	e7df      	b.n	90011314 <vTaskSwitchContext+0x60>
90011354:	24026fec 	.word	0x24026fec
90011358:	24027070 	.word	0x24027070
9001135c:	24026b78 	.word	0x24026b78
90011360:	24026ff4 	.word	0x24026ff4
90011364:	24026b84 	.word	0x24026b84

90011368 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
90011368:	b1f0      	cbz	r0, 900113a8 <vTaskPlaceOnEventList+0x40>
{
9001136a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9001136c:	4d1a      	ldr	r5, [pc, #104]	; (900113d8 <vTaskPlaceOnEventList+0x70>)
9001136e:	460c      	mov	r4, r1
90011370:	6829      	ldr	r1, [r5, #0]
90011372:	3118      	adds	r1, #24
90011374:	f7fe f838 	bl	9000f3e8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
90011378:	4b18      	ldr	r3, [pc, #96]	; (900113dc <vTaskPlaceOnEventList+0x74>)
9001137a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001137c:	6828      	ldr	r0, [r5, #0]
9001137e:	3004      	adds	r0, #4
90011380:	f7fe f84a 	bl	9000f418 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90011384:	1c63      	adds	r3, r4, #1
90011386:	d020      	beq.n	900113ca <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
90011388:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9001138a:	682b      	ldr	r3, [r5, #0]
9001138c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9001138e:	d214      	bcs.n	900113ba <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011390:	4b13      	ldr	r3, [pc, #76]	; (900113e0 <vTaskPlaceOnEventList+0x78>)
90011392:	6818      	ldr	r0, [r3, #0]
90011394:	6829      	ldr	r1, [r5, #0]
90011396:	3104      	adds	r1, #4
90011398:	f7fe f826 	bl	9000f3e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9001139c:	4b11      	ldr	r3, [pc, #68]	; (900113e4 <vTaskPlaceOnEventList+0x7c>)
9001139e:	681a      	ldr	r2, [r3, #0]
900113a0:	4294      	cmp	r4, r2
900113a2:	d200      	bcs.n	900113a6 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
900113a4:	601c      	str	r4, [r3, #0]
}
900113a6:	bd70      	pop	{r4, r5, r6, pc}
900113a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900113ac:	f383 8811 	msr	BASEPRI, r3
900113b0:	f3bf 8f6f 	isb	sy
900113b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
900113b8:	e7fe      	b.n	900113b8 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113ba:	4b0b      	ldr	r3, [pc, #44]	; (900113e8 <vTaskPlaceOnEventList+0x80>)
900113bc:	6818      	ldr	r0, [r3, #0]
900113be:	6829      	ldr	r1, [r5, #0]
}
900113c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113c4:	3104      	adds	r1, #4
900113c6:	f7fe b80f 	b.w	9000f3e8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113ca:	6829      	ldr	r1, [r5, #0]
900113cc:	4807      	ldr	r0, [pc, #28]	; (900113ec <vTaskPlaceOnEventList+0x84>)
900113ce:	3104      	adds	r1, #4
}
900113d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
900113d4:	f7fd bff8 	b.w	9000f3c8 <vListInsertEnd>
900113d8:	24026b78 	.word	0x24026b78
900113dc:	2402706c 	.word	0x2402706c
900113e0:	24026b7c 	.word	0x24026b7c
900113e4:	24027020 	.word	0x24027020
900113e8:	24026b80 	.word	0x24026b80
900113ec:	24027044 	.word	0x24027044

900113f0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
900113f0:	b358      	cbz	r0, 9001144a <vTaskPlaceOnEventListRestricted+0x5a>
	{
900113f2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
900113f4:	4e1d      	ldr	r6, [pc, #116]	; (9001146c <vTaskPlaceOnEventListRestricted+0x7c>)
900113f6:	460c      	mov	r4, r1
900113f8:	4615      	mov	r5, r2
900113fa:	6831      	ldr	r1, [r6, #0]
900113fc:	3118      	adds	r1, #24
900113fe:	f7fd ffe3 	bl	9000f3c8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
90011402:	b165      	cbz	r5, 9001141e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
90011404:	4b1a      	ldr	r3, [pc, #104]	; (90011470 <vTaskPlaceOnEventListRestricted+0x80>)
90011406:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011408:	6830      	ldr	r0, [r6, #0]
9001140a:	3004      	adds	r0, #4
9001140c:	f7fe f804 	bl	9000f418 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011410:	6831      	ldr	r1, [r6, #0]
90011412:	4818      	ldr	r0, [pc, #96]	; (90011474 <vTaskPlaceOnEventListRestricted+0x84>)
90011414:	3104      	adds	r1, #4
	}
90011416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001141a:	f7fd bfd5 	b.w	9000f3c8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9001141e:	4b14      	ldr	r3, [pc, #80]	; (90011470 <vTaskPlaceOnEventListRestricted+0x80>)
90011420:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90011422:	6830      	ldr	r0, [r6, #0]
90011424:	3004      	adds	r0, #4
90011426:	f7fd fff7 	bl	9000f418 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9001142a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9001142c:	6833      	ldr	r3, [r6, #0]
9001142e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90011430:	d214      	bcs.n	9001145c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011432:	4b11      	ldr	r3, [pc, #68]	; (90011478 <vTaskPlaceOnEventListRestricted+0x88>)
90011434:	6818      	ldr	r0, [r3, #0]
90011436:	6831      	ldr	r1, [r6, #0]
90011438:	3104      	adds	r1, #4
9001143a:	f7fd ffd5 	bl	9000f3e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9001143e:	4b0f      	ldr	r3, [pc, #60]	; (9001147c <vTaskPlaceOnEventListRestricted+0x8c>)
90011440:	681a      	ldr	r2, [r3, #0]
90011442:	4294      	cmp	r4, r2
90011444:	d200      	bcs.n	90011448 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
90011446:	601c      	str	r4, [r3, #0]
	}
90011448:	bd70      	pop	{r4, r5, r6, pc}
9001144a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001144e:	f383 8811 	msr	BASEPRI, r3
90011452:	f3bf 8f6f 	isb	sy
90011456:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9001145a:	e7fe      	b.n	9001145a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001145c:	4b08      	ldr	r3, [pc, #32]	; (90011480 <vTaskPlaceOnEventListRestricted+0x90>)
9001145e:	6818      	ldr	r0, [r3, #0]
90011460:	6831      	ldr	r1, [r6, #0]
	}
90011462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90011466:	3104      	adds	r1, #4
90011468:	f7fd bfbe 	b.w	9000f3e8 <vListInsert>
9001146c:	24026b78 	.word	0x24026b78
90011470:	2402706c 	.word	0x2402706c
90011474:	24027044 	.word	0x24027044
90011478:	24026b7c 	.word	0x24026b7c
9001147c:	24027020 	.word	0x24027020
90011480:	24026b80 	.word	0x24026b80

90011484 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011484:	68c3      	ldr	r3, [r0, #12]
{
90011486:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90011488:	68dc      	ldr	r4, [r3, #12]
{
9001148a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9001148c:	b35c      	cbz	r4, 900114e6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9001148e:	f104 0518 	add.w	r5, r4, #24
90011492:	4628      	mov	r0, r5
90011494:	f7fd ffc0 	bl	9000f418 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90011498:	4b19      	ldr	r3, [pc, #100]	; (90011500 <xTaskRemoveFromEventList+0x7c>)
9001149a:	681b      	ldr	r3, [r3, #0]
9001149c:	b17b      	cbz	r3, 900114be <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9001149e:	4629      	mov	r1, r5
900114a0:	4818      	ldr	r0, [pc, #96]	; (90011504 <xTaskRemoveFromEventList+0x80>)
900114a2:	f7fd ff91 	bl	9000f3c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
900114a6:	4b18      	ldr	r3, [pc, #96]	; (90011508 <xTaskRemoveFromEventList+0x84>)
900114a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900114aa:	681b      	ldr	r3, [r3, #0]
900114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900114ae:	429a      	cmp	r2, r3
900114b0:	d922      	bls.n	900114f8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
900114b2:	2301      	movs	r3, #1
900114b4:	4a15      	ldr	r2, [pc, #84]	; (9001150c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
900114b6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
900114b8:	6013      	str	r3, [r2, #0]
}
900114ba:	b003      	add	sp, #12
900114bc:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
900114be:	1d21      	adds	r1, r4, #4
900114c0:	4608      	mov	r0, r1
900114c2:	9101      	str	r1, [sp, #4]
900114c4:	f7fd ffa8 	bl	9000f418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
900114c8:	4a11      	ldr	r2, [pc, #68]	; (90011510 <xTaskRemoveFromEventList+0x8c>)
900114ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900114cc:	6810      	ldr	r0, [r2, #0]
900114ce:	9901      	ldr	r1, [sp, #4]
900114d0:	4283      	cmp	r3, r0
900114d2:	d900      	bls.n	900114d6 <xTaskRemoveFromEventList+0x52>
900114d4:	6013      	str	r3, [r2, #0]
900114d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
900114da:	480e      	ldr	r0, [pc, #56]	; (90011514 <xTaskRemoveFromEventList+0x90>)
900114dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
900114e0:	f7fd ff72 	bl	9000f3c8 <vListInsertEnd>
900114e4:	e7df      	b.n	900114a6 <xTaskRemoveFromEventList+0x22>
900114e6:	f04f 0350 	mov.w	r3, #80	; 0x50
900114ea:	f383 8811 	msr	BASEPRI, r3
900114ee:	f3bf 8f6f 	isb	sy
900114f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
900114f6:	e7fe      	b.n	900114f6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
900114f8:	2000      	movs	r0, #0
}
900114fa:	b003      	add	sp, #12
900114fc:	bd30      	pop	{r4, r5, pc}
900114fe:	bf00      	nop
90011500:	24026fec 	.word	0x24026fec
90011504:	2402702c 	.word	0x2402702c
90011508:	24026b78 	.word	0x24026b78
9001150c:	24027070 	.word	0x24027070
90011510:	24026ff4 	.word	0x24026ff4
90011514:	24026b84 	.word	0x24026b84

90011518 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90011518:	4a03      	ldr	r2, [pc, #12]	; (90011528 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9001151a:	4b04      	ldr	r3, [pc, #16]	; (9001152c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9001151c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001151e:	681b      	ldr	r3, [r3, #0]
90011520:	e9c0 2300 	strd	r2, r3, [r0]
}
90011524:	4770      	bx	lr
90011526:	bf00      	nop
90011528:	24027024 	.word	0x24027024
9001152c:	2402706c 	.word	0x2402706c

90011530 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
90011530:	b328      	cbz	r0, 9001157e <xTaskCheckForTimeOut+0x4e>
{
90011532:	b5f0      	push	{r4, r5, r6, r7, lr}
90011534:	460d      	mov	r5, r1
90011536:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90011538:	b1c1      	cbz	r1, 9001156c <xTaskCheckForTimeOut+0x3c>
9001153a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9001153c:	f7fd ffea 	bl	9000f514 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
90011540:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
90011542:	4a1d      	ldr	r2, [pc, #116]	; (900115b8 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
90011544:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
90011546:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
90011548:	d030      	beq.n	900115ac <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9001154a:	f8df c070 	ldr.w	ip, [pc, #112]	; 900115bc <xTaskCheckForTimeOut+0x8c>
9001154e:	6826      	ldr	r6, [r4, #0]
90011550:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90011554:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90011556:	42be      	cmp	r6, r7
90011558:	d01a      	beq.n	90011590 <xTaskCheckForTimeOut+0x60>
9001155a:	4288      	cmp	r0, r1
9001155c:	d818      	bhi.n	90011590 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9001155e:	2001      	movs	r0, #1
90011560:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90011562:	f7fd fff9 	bl	9000f558 <vPortExitCritical>
}
90011566:	9801      	ldr	r0, [sp, #4]
90011568:	b003      	add	sp, #12
9001156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001156c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011570:	f383 8811 	msr	BASEPRI, r3
90011574:	f3bf 8f6f 	isb	sy
90011578:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9001157c:	e7fe      	b.n	9001157c <xTaskCheckForTimeOut+0x4c>
9001157e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011582:	f383 8811 	msr	BASEPRI, r3
90011586:	f3bf 8f6f 	isb	sy
9001158a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9001158e:	e7fe      	b.n	9001158e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90011590:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90011594:	4573      	cmp	r3, lr
90011596:	d90b      	bls.n	900115b0 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
90011598:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9001159a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001159e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
900115a0:	4403      	add	r3, r0
			xReturn = pdFALSE;
900115a2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
900115a4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
900115a6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
900115aa:	e7d9      	b.n	90011560 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
900115ac:	2000      	movs	r0, #0
900115ae:	e7d7      	b.n	90011560 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
900115b0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
900115b2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
900115b4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
900115b6:	e7d3      	b.n	90011560 <xTaskCheckForTimeOut+0x30>
900115b8:	2402706c 	.word	0x2402706c
900115bc:	24027024 	.word	0x24027024

900115c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
900115c0:	4b01      	ldr	r3, [pc, #4]	; (900115c8 <vTaskMissedYield+0x8>)
900115c2:	2201      	movs	r2, #1
900115c4:	601a      	str	r2, [r3, #0]
}
900115c6:	4770      	bx	lr
900115c8:	24027070 	.word	0x24027070

900115cc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
900115cc:	4b01      	ldr	r3, [pc, #4]	; (900115d4 <xTaskGetCurrentTaskHandle+0x8>)
900115ce:	6818      	ldr	r0, [r3, #0]
	}
900115d0:	4770      	bx	lr
900115d2:	bf00      	nop
900115d4:	24026b78 	.word	0x24026b78

900115d8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
900115d8:	4b05      	ldr	r3, [pc, #20]	; (900115f0 <xTaskGetSchedulerState+0x18>)
900115da:	681b      	ldr	r3, [r3, #0]
900115dc:	b133      	cbz	r3, 900115ec <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900115de:	4b05      	ldr	r3, [pc, #20]	; (900115f4 <xTaskGetSchedulerState+0x1c>)
900115e0:	6818      	ldr	r0, [r3, #0]
900115e2:	fab0 f080 	clz	r0, r0
900115e6:	0940      	lsrs	r0, r0, #5
900115e8:	0040      	lsls	r0, r0, #1
900115ea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
900115ec:	2001      	movs	r0, #1
	}
900115ee:	4770      	bx	lr
900115f0:	24027040 	.word	0x24027040
900115f4:	24026fec 	.word	0x24026fec

900115f8 <xTaskPriorityInherit>:
	{
900115f8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
900115fa:	4604      	mov	r4, r0
	{
900115fc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
900115fe:	b1c8      	cbz	r0, 90011634 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90011600:	4d1d      	ldr	r5, [pc, #116]	; (90011678 <xTaskPriorityInherit+0x80>)
90011602:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90011604:	682a      	ldr	r2, [r5, #0]
90011606:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011608:	4293      	cmp	r3, r2
9001160a:	d215      	bcs.n	90011638 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001160c:	6982      	ldr	r2, [r0, #24]
9001160e:	2a00      	cmp	r2, #0
90011610:	db04      	blt.n	9001161c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011612:	682a      	ldr	r2, [r5, #0]
90011614:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90011616:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9001161a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9001161c:	4e17      	ldr	r6, [pc, #92]	; (9001167c <xTaskPriorityInherit+0x84>)
9001161e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90011622:	6962      	ldr	r2, [r4, #20]
90011624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90011628:	429a      	cmp	r2, r3
9001162a:	d00e      	beq.n	9001164a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001162c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001162e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011632:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90011634:	b002      	add	sp, #8
90011636:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90011638:	682b      	ldr	r3, [r5, #0]
9001163a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001163e:	4298      	cmp	r0, r3
90011640:	bf2c      	ite	cs
90011642:	2000      	movcs	r0, #0
90011644:	2001      	movcc	r0, #1
	}
90011646:	b002      	add	sp, #8
90011648:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001164a:	1d21      	adds	r1, r4, #4
9001164c:	4608      	mov	r0, r1
9001164e:	9101      	str	r1, [sp, #4]
90011650:	f7fd fee2 	bl	9000f418 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011654:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
90011656:	4b0a      	ldr	r3, [pc, #40]	; (90011680 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011658:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9001165a:	681a      	ldr	r2, [r3, #0]
9001165c:	9901      	ldr	r1, [sp, #4]
9001165e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90011660:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90011662:	d900      	bls.n	90011666 <xTaskPriorityInherit+0x6e>
90011664:	6018      	str	r0, [r3, #0]
90011666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9001166a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9001166e:	f7fd feab 	bl	9000f3c8 <vListInsertEnd>
				xReturn = pdTRUE;
90011672:	2001      	movs	r0, #1
90011674:	e7de      	b.n	90011634 <xTaskPriorityInherit+0x3c>
90011676:	bf00      	nop
90011678:	24026b78 	.word	0x24026b78
9001167c:	24026b84 	.word	0x24026b84
90011680:	24026ff4 	.word	0x24026ff4

90011684 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
90011684:	b318      	cbz	r0, 900116ce <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
90011686:	4b1f      	ldr	r3, [pc, #124]	; (90011704 <xTaskPriorityDisinherit+0x80>)
	{
90011688:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9001168a:	681c      	ldr	r4, [r3, #0]
	{
9001168c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9001168e:	4284      	cmp	r4, r0
90011690:	d008      	beq.n	900116a4 <xTaskPriorityDisinherit+0x20>
90011692:	f04f 0350 	mov.w	r3, #80	; 0x50
90011696:	f383 8811 	msr	BASEPRI, r3
9001169a:	f3bf 8f6f 	isb	sy
9001169e:	f3bf 8f4f 	dsb	sy
900116a2:	e7fe      	b.n	900116a2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
900116a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
900116a6:	b14b      	cbz	r3, 900116bc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900116a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
900116aa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900116ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
900116ae:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
900116b0:	4291      	cmp	r1, r2
900116b2:	d000      	beq.n	900116b6 <xTaskPriorityDisinherit+0x32>
900116b4:	b16b      	cbz	r3, 900116d2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
900116b6:	2000      	movs	r0, #0
	}
900116b8:	b002      	add	sp, #8
900116ba:	bd10      	pop	{r4, pc}
900116bc:	f04f 0350 	mov.w	r3, #80	; 0x50
900116c0:	f383 8811 	msr	BASEPRI, r3
900116c4:	f3bf 8f6f 	isb	sy
900116c8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900116cc:	e7fe      	b.n	900116cc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
900116ce:	2000      	movs	r0, #0
	}
900116d0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900116d2:	1d21      	adds	r1, r4, #4
900116d4:	4608      	mov	r0, r1
900116d6:	9101      	str	r1, [sp, #4]
900116d8:	f7fd fe9e 	bl	9000f418 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900116dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
900116de:	4b0a      	ldr	r3, [pc, #40]	; (90011708 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900116e0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
900116e4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900116e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900116e8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
900116ea:	681a      	ldr	r2, [r3, #0]
900116ec:	4290      	cmp	r0, r2
900116ee:	d900      	bls.n	900116f2 <xTaskPriorityDisinherit+0x6e>
900116f0:	6018      	str	r0, [r3, #0]
900116f2:	4b06      	ldr	r3, [pc, #24]	; (9001170c <xTaskPriorityDisinherit+0x88>)
900116f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900116f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900116fc:	f7fd fe64 	bl	9000f3c8 <vListInsertEnd>
					xReturn = pdTRUE;
90011700:	2001      	movs	r0, #1
		return xReturn;
90011702:	e7d9      	b.n	900116b8 <xTaskPriorityDisinherit+0x34>
90011704:	24026b78 	.word	0x24026b78
90011708:	24026ff4 	.word	0x24026ff4
9001170c:	24026b84 	.word	0x24026b84

90011710 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
90011710:	2800      	cmp	r0, #0
90011712:	d040      	beq.n	90011796 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
90011714:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
90011716:	b530      	push	{r4, r5, lr}
90011718:	4604      	mov	r4, r0
9001171a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9001171c:	b153      	cbz	r3, 90011734 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9001171e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
90011720:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90011722:	4281      	cmp	r1, r0
90011724:	bf38      	it	cc
90011726:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90011728:	2b01      	cmp	r3, #1
9001172a:	d101      	bne.n	90011730 <vTaskPriorityDisinheritAfterTimeout+0x20>
9001172c:	428a      	cmp	r2, r1
9001172e:	d10a      	bne.n	90011746 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
90011730:	b003      	add	sp, #12
90011732:	bd30      	pop	{r4, r5, pc}
90011734:	f04f 0350 	mov.w	r3, #80	; 0x50
90011738:	f383 8811 	msr	BASEPRI, r3
9001173c:	f3bf 8f6f 	isb	sy
90011740:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
90011744:	e7fe      	b.n	90011744 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
90011746:	4b19      	ldr	r3, [pc, #100]	; (900117ac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
90011748:	681b      	ldr	r3, [r3, #0]
9001174a:	42a3      	cmp	r3, r4
9001174c:	d024      	beq.n	90011798 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001174e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
90011750:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90011752:	2b00      	cmp	r3, #0
90011754:	db02      	blt.n	9001175c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011756:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9001175a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9001175c:	4d14      	ldr	r5, [pc, #80]	; (900117b0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9001175e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
90011762:	6961      	ldr	r1, [r4, #20]
90011764:	eb05 0382 	add.w	r3, r5, r2, lsl #2
90011768:	4299      	cmp	r1, r3
9001176a:	d1e1      	bne.n	90011730 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001176c:	1d21      	adds	r1, r4, #4
9001176e:	4608      	mov	r0, r1
90011770:	9101      	str	r1, [sp, #4]
90011772:	f7fd fe51 	bl	9000f418 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
90011776:	4b0f      	ldr	r3, [pc, #60]	; (900117b4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
90011778:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9001177a:	681a      	ldr	r2, [r3, #0]
9001177c:	9901      	ldr	r1, [sp, #4]
9001177e:	4290      	cmp	r0, r2
90011780:	d900      	bls.n	90011784 <vTaskPriorityDisinheritAfterTimeout+0x74>
90011782:	6018      	str	r0, [r3, #0]
90011784:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90011788:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9001178c:	b003      	add	sp, #12
9001178e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
90011792:	f7fd be19 	b.w	9000f3c8 <vListInsertEnd>
90011796:	4770      	bx	lr
90011798:	f04f 0350 	mov.w	r3, #80	; 0x50
9001179c:	f383 8811 	msr	BASEPRI, r3
900117a0:	f3bf 8f6f 	isb	sy
900117a4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
900117a8:	e7fe      	b.n	900117a8 <vTaskPriorityDisinheritAfterTimeout+0x98>
900117aa:	bf00      	nop
900117ac:	24026b78 	.word	0x24026b78
900117b0:	24026b84 	.word	0x24026b84
900117b4:	24026ff4 	.word	0x24026ff4

900117b8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
900117b8:	4b04      	ldr	r3, [pc, #16]	; (900117cc <pvTaskIncrementMutexHeldCount+0x14>)
900117ba:	681a      	ldr	r2, [r3, #0]
900117bc:	b11a      	cbz	r2, 900117c6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
900117be:	6819      	ldr	r1, [r3, #0]
900117c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
900117c2:	3201      	adds	r2, #1
900117c4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
900117c6:	6818      	ldr	r0, [r3, #0]
	}
900117c8:	4770      	bx	lr
900117ca:	bf00      	nop
900117cc:	24026b78 	.word	0x24026b78

900117d0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
900117d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900117d4:	4e22      	ldr	r6, [pc, #136]	; (90011860 <prvSwitchTimerLists+0x90>)
900117d6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
900117d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90011868 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
900117dc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900117e0:	e00d      	b.n	900117fe <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900117e2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900117e4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900117e6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900117e8:	1d25      	adds	r5, r4, #4
900117ea:	4628      	mov	r0, r5
900117ec:	f7fd fe14 	bl	9000f418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900117f0:	6a23      	ldr	r3, [r4, #32]
900117f2:	4620      	mov	r0, r4
900117f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900117f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900117fa:	075b      	lsls	r3, r3, #29
900117fc:	d40a      	bmi.n	90011814 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900117fe:	6833      	ldr	r3, [r6, #0]
90011800:	681a      	ldr	r2, [r3, #0]
90011802:	2a00      	cmp	r2, #0
90011804:	d1ed      	bne.n	900117e2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90011806:	4a17      	ldr	r2, [pc, #92]	; (90011864 <prvSwitchTimerLists+0x94>)
90011808:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9001180a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9001180c:	6031      	str	r1, [r6, #0]
}
9001180e:	b005      	add	sp, #20
90011810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011814:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011816:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90011818:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9001181a:	429f      	cmp	r7, r3
9001181c:	d205      	bcs.n	9001182a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001181e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90011820:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011822:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011824:	f7fd fde0 	bl	9000f3e8 <vListInsert>
90011828:	e7e9      	b.n	900117fe <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9001182a:	f8d9 3000 	ldr.w	r3, [r9]
9001182e:	b16b      	cbz	r3, 9001184c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011830:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011832:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011836:	f7ff fecf 	bl	900115d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001183a:	2300      	movs	r3, #0
9001183c:	4669      	mov	r1, sp
9001183e:	f8d9 0000 	ldr.w	r0, [r9]
90011842:	461a      	mov	r2, r3
90011844:	f7fe f95e 	bl	9000fb04 <xQueueGenericSend>
				configASSERT( xResult );
90011848:	2800      	cmp	r0, #0
9001184a:	d1d8      	bne.n	900117fe <prvSwitchTimerLists+0x2e>
9001184c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011850:	f383 8811 	msr	BASEPRI, r3
90011854:	f3bf 8f6f 	isb	sy
90011858:	f3bf 8f4f 	dsb	sy
9001185c:	e7fe      	b.n	9001185c <prvSwitchTimerLists+0x8c>
9001185e:	bf00      	nop
90011860:	24027074 	.word	0x24027074
90011864:	24027078 	.word	0x24027078
90011868:	24027198 	.word	0x24027198

9001186c <prvTimerTask>:
{
9001186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011870:	4e9f      	ldr	r6, [pc, #636]	; (90011af0 <prvTimerTask+0x284>)
90011872:	b089      	sub	sp, #36	; 0x24
90011874:	4d9f      	ldr	r5, [pc, #636]	; (90011af4 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
90011876:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9001187a:	4c9f      	ldr	r4, [pc, #636]	; (90011af8 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9001187c:	6833      	ldr	r3, [r6, #0]
9001187e:	681f      	ldr	r7, [r3, #0]
90011880:	2f00      	cmp	r7, #0
90011882:	f000 80b2 	beq.w	900119ea <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90011886:	68db      	ldr	r3, [r3, #12]
90011888:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9001188a:	f7ff fccf 	bl	9001122c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001188e:	f7ff fce5 	bl	9001125c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90011892:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90011894:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90011896:	4290      	cmp	r0, r2
90011898:	f0c0 80af 	bcc.w	900119fa <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9001189c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9001189e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900118a0:	f200 80d0 	bhi.w	90011a44 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
900118a4:	f7ff fcca 	bl	9001123c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900118a8:	6832      	ldr	r2, [r6, #0]
900118aa:	68d2      	ldr	r2, [r2, #12]
900118ac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900118b0:	f10b 0804 	add.w	r8, fp, #4
900118b4:	4640      	mov	r0, r8
900118b6:	f7fd fdaf 	bl	9000f418 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900118ba:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
900118be:	0741      	lsls	r1, r0, #29
900118c0:	f100 80d0 	bmi.w	90011a64 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900118c4:	f020 0001 	bic.w	r0, r0, #1
900118c8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900118cc:	f8db 3020 	ldr.w	r3, [fp, #32]
900118d0:	4658      	mov	r0, fp
900118d2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900118d4:	2200      	movs	r2, #0
900118d6:	4669      	mov	r1, sp
900118d8:	6820      	ldr	r0, [r4, #0]
900118da:	f7fe fbff 	bl	900100dc <xQueueReceive>
900118de:	2800      	cmp	r0, #0
900118e0:	d0cc      	beq.n	9001187c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
900118e2:	9b00      	ldr	r3, [sp, #0]
900118e4:	2b00      	cmp	r3, #0
900118e6:	db77      	blt.n	900119d8 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
900118e8:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
900118ea:	697b      	ldr	r3, [r7, #20]
900118ec:	b113      	cbz	r3, 900118f4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900118ee:	1d38      	adds	r0, r7, #4
900118f0:	f7fd fd92 	bl	9000f418 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
900118f4:	f7ff fcb2 	bl	9001125c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900118f8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900118fa:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
900118fc:	4298      	cmp	r0, r3
900118fe:	f0c0 8083 	bcc.w	90011a08 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
90011902:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90011904:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90011908:	2b09      	cmp	r3, #9
9001190a:	d8e3      	bhi.n	900118d4 <prvTimerTask+0x68>
9001190c:	e8df f003 	tbb	[pc, r3]
90011910:	54050505 	.word	0x54050505
90011914:	05055b3e 	.word	0x05055b3e
90011918:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001191a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001191e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011920:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011924:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90011926:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001192a:	9b01      	ldr	r3, [sp, #4]
9001192c:	1899      	adds	r1, r3, r2
9001192e:	bf2c      	ite	cs
90011930:	2001      	movcs	r0, #1
90011932:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90011934:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011936:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90011938:	f200 8086 	bhi.w	90011a48 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001193c:	eba8 0303 	sub.w	r3, r8, r3
90011940:	429a      	cmp	r2, r3
90011942:	f200 80c0 	bhi.w	90011ac6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90011946:	6a3b      	ldr	r3, [r7, #32]
90011948:	4638      	mov	r0, r7
9001194a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9001194c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90011950:	075b      	lsls	r3, r3, #29
90011952:	d5bf      	bpl.n	900118d4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90011954:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90011956:	9901      	ldr	r1, [sp, #4]
90011958:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9001195a:	b172      	cbz	r2, 9001197a <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001195c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9001195e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
90011962:	2300      	movs	r3, #0
90011964:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011966:	f7ff fe37 	bl	900115d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001196a:	2300      	movs	r3, #0
9001196c:	a904      	add	r1, sp, #16
9001196e:	6820      	ldr	r0, [r4, #0]
90011970:	461a      	mov	r2, r3
90011972:	f7fe f8c7 	bl	9000fb04 <xQueueGenericSend>
							configASSERT( xResult );
90011976:	2800      	cmp	r0, #0
90011978:	d1ac      	bne.n	900118d4 <prvTimerTask+0x68>
9001197a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001197e:	f383 8811 	msr	BASEPRI, r3
90011982:	f3bf 8f6f 	isb	sy
90011986:	f3bf 8f4f 	dsb	sy
9001198a:	e7fe      	b.n	9001198a <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001198c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90011990:	f043 0301 	orr.w	r3, r3, #1
90011994:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90011998:	9b01      	ldr	r3, [sp, #4]
9001199a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9001199c:	2b00      	cmp	r3, #0
9001199e:	f000 809e 	beq.w	90011ade <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
900119a2:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900119a4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900119a6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
900119a8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900119aa:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
900119ac:	d856      	bhi.n	90011a5c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900119ae:	4b53      	ldr	r3, [pc, #332]	; (90011afc <prvTimerTask+0x290>)
900119b0:	6818      	ldr	r0, [r3, #0]
900119b2:	f7fd fd19 	bl	9000f3e8 <vListInsert>
	return xProcessTimerNow;
900119b6:	e78d      	b.n	900118d4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900119b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900119bc:	f023 0301 	bic.w	r3, r3, #1
900119c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900119c4:	e786      	b.n	900118d4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900119c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900119ca:	079a      	lsls	r2, r3, #30
900119cc:	d572      	bpl.n	90011ab4 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900119ce:	f023 0301 	bic.w	r3, r3, #1
900119d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
900119d6:	e77d      	b.n	900118d4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900119d8:	9b01      	ldr	r3, [sp, #4]
900119da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
900119de:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900119e0:	9b00      	ldr	r3, [sp, #0]
900119e2:	2b00      	cmp	r3, #0
900119e4:	f6ff af76 	blt.w	900118d4 <prvTimerTask+0x68>
900119e8:	e77e      	b.n	900118e8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
900119ea:	f7ff fc1f 	bl	9001122c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900119ee:	f7ff fc35 	bl	9001125c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900119f2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900119f4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900119f6:	4282      	cmp	r2, r0
900119f8:	d909      	bls.n	90011a0e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
900119fa:	f7ff fee9 	bl	900117d0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900119fe:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
90011a02:	f7ff fc1b 	bl	9001123c <xTaskResumeAll>
90011a06:	e765      	b.n	900118d4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
90011a08:	f7ff fee2 	bl	900117d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
90011a0c:	e779      	b.n	90011902 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90011a0e:	4b3b      	ldr	r3, [pc, #236]	; (90011afc <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
90011a10:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90011a14:	681a      	ldr	r2, [r3, #0]
90011a16:	6812      	ldr	r2, [r2, #0]
90011a18:	fab2 f282 	clz	r2, r2
90011a1c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
90011a1e:	eba7 010a 	sub.w	r1, r7, sl
90011a22:	6820      	ldr	r0, [r4, #0]
90011a24:	f7fe ff4e 	bl	900108c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90011a28:	f7ff fc08 	bl	9001123c <xTaskResumeAll>
90011a2c:	2800      	cmp	r0, #0
90011a2e:	f47f af51 	bne.w	900118d4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90011a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90011a36:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
90011a3a:	f3bf 8f4f 	dsb	sy
90011a3e:	f3bf 8f6f 	isb	sy
90011a42:	e747      	b.n	900118d4 <prvTimerTask+0x68>
90011a44:	2200      	movs	r2, #0
90011a46:	e7ea      	b.n	90011a1e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90011a48:	4543      	cmp	r3, r8
90011a4a:	d902      	bls.n	90011a52 <prvTimerTask+0x1e6>
90011a4c:	2800      	cmp	r0, #0
90011a4e:	f43f af7a 	beq.w	90011946 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011a52:	1d39      	adds	r1, r7, #4
90011a54:	6830      	ldr	r0, [r6, #0]
90011a56:	f7fd fcc7 	bl	9000f3e8 <vListInsert>
	return xProcessTimerNow;
90011a5a:	e73b      	b.n	900118d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011a5c:	6830      	ldr	r0, [r6, #0]
90011a5e:	f7fd fcc3 	bl	9000f3e8 <vListInsert>
90011a62:	e737      	b.n	900118d4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90011a64:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90011a68:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90011a6c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
90011a6e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90011a70:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90011a74:	d322      	bcc.n	90011abc <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011a76:	ebaa 0307 	sub.w	r3, sl, r7
90011a7a:	429a      	cmp	r2, r3
90011a7c:	d829      	bhi.n	90011ad2 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
90011a7e:	6823      	ldr	r3, [r4, #0]
90011a80:	b17b      	cbz	r3, 90011aa2 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
90011a82:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90011a84:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011a86:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
90011a8a:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011a8c:	f7ff fda4 	bl	900115d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011a90:	2300      	movs	r3, #0
90011a92:	a904      	add	r1, sp, #16
90011a94:	6820      	ldr	r0, [r4, #0]
90011a96:	461a      	mov	r2, r3
90011a98:	f7fe f834 	bl	9000fb04 <xQueueGenericSend>
			configASSERT( xResult );
90011a9c:	2800      	cmp	r0, #0
90011a9e:	f47f af15 	bne.w	900118cc <prvTimerTask+0x60>
90011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
90011aa6:	f383 8811 	msr	BASEPRI, r3
90011aaa:	f3bf 8f6f 	isb	sy
90011aae:	f3bf 8f4f 	dsb	sy
90011ab2:	e7fe      	b.n	90011ab2 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90011ab4:	4638      	mov	r0, r7
90011ab6:	f7fd fc13 	bl	9000f2e0 <vPortFree>
90011aba:	e70b      	b.n	900118d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90011abc:	4641      	mov	r1, r8
90011abe:	6830      	ldr	r0, [r6, #0]
90011ac0:	f7fd fc92 	bl	9000f3e8 <vListInsert>
	return xProcessTimerNow;
90011ac4:	e702      	b.n	900118cc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011ac6:	4b0d      	ldr	r3, [pc, #52]	; (90011afc <prvTimerTask+0x290>)
90011ac8:	1d39      	adds	r1, r7, #4
90011aca:	6818      	ldr	r0, [r3, #0]
90011acc:	f7fd fc8c 	bl	9000f3e8 <vListInsert>
	return xProcessTimerNow;
90011ad0:	e700      	b.n	900118d4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90011ad2:	4b0a      	ldr	r3, [pc, #40]	; (90011afc <prvTimerTask+0x290>)
90011ad4:	4641      	mov	r1, r8
90011ad6:	6818      	ldr	r0, [r3, #0]
90011ad8:	f7fd fc86 	bl	9000f3e8 <vListInsert>
	return xProcessTimerNow;
90011adc:	e6f6      	b.n	900118cc <prvTimerTask+0x60>
90011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
90011ae2:	f383 8811 	msr	BASEPRI, r3
90011ae6:	f3bf 8f6f 	isb	sy
90011aea:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90011aee:	e7fe      	b.n	90011aee <prvTimerTask+0x282>
90011af0:	24027074 	.word	0x24027074
90011af4:	24027144 	.word	0x24027144
90011af8:	24027198 	.word	0x24027198
90011afc:	24027078 	.word	0x24027078

90011b00 <xTimerCreateTimerTask>:
{
90011b00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
90011b02:	4c23      	ldr	r4, [pc, #140]	; (90011b90 <xTimerCreateTimerTask+0x90>)
{
90011b04:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90011b06:	f7fd fd05 	bl	9000f514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011b0a:	6825      	ldr	r5, [r4, #0]
90011b0c:	b335      	cbz	r5, 90011b5c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
90011b0e:	f7fd fd23 	bl	9000f558 <vPortExitCritical>
	if( xTimerQueue != NULL )
90011b12:	6823      	ldr	r3, [r4, #0]
90011b14:	b1cb      	cbz	r3, 90011b4a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90011b16:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011b18:	aa07      	add	r2, sp, #28
90011b1a:	a906      	add	r1, sp, #24
90011b1c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011b1e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90011b20:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90011b24:	f7fd fb0e 	bl	9000f144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90011b28:	4623      	mov	r3, r4
90011b2a:	9a07      	ldr	r2, [sp, #28]
90011b2c:	9500      	str	r5, [sp, #0]
90011b2e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90011b32:	e9cd 1001 	strd	r1, r0, [sp, #4]
90011b36:	4917      	ldr	r1, [pc, #92]	; (90011b94 <xTimerCreateTimerTask+0x94>)
90011b38:	4817      	ldr	r0, [pc, #92]	; (90011b98 <xTimerCreateTimerTask+0x98>)
90011b3a:	f7ff f93f 	bl	90010dbc <xTaskCreateStatic>
90011b3e:	4b17      	ldr	r3, [pc, #92]	; (90011b9c <xTimerCreateTimerTask+0x9c>)
90011b40:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90011b42:	b110      	cbz	r0, 90011b4a <xTimerCreateTimerTask+0x4a>
}
90011b44:	2001      	movs	r0, #1
90011b46:	b009      	add	sp, #36	; 0x24
90011b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
90011b4e:	f383 8811 	msr	BASEPRI, r3
90011b52:	f3bf 8f6f 	isb	sy
90011b56:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
90011b5a:	e7fe      	b.n	90011b5a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
90011b5c:	4f10      	ldr	r7, [pc, #64]	; (90011ba0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
90011b5e:	4e11      	ldr	r6, [pc, #68]	; (90011ba4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90011b60:	4638      	mov	r0, r7
90011b62:	f7fd fc21 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011b66:	4630      	mov	r0, r6
90011b68:	f7fd fc1e 	bl	9000f3a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90011b6c:	4a0e      	ldr	r2, [pc, #56]	; (90011ba8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011b6e:	9500      	str	r5, [sp, #0]
90011b70:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90011b72:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011b74:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90011b76:	4a0d      	ldr	r2, [pc, #52]	; (90011bac <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011b78:	4b0d      	ldr	r3, [pc, #52]	; (90011bb0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
90011b7a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011b7c:	4a0d      	ldr	r2, [pc, #52]	; (90011bb4 <xTimerCreateTimerTask+0xb4>)
90011b7e:	f7fd fe6b 	bl	9000f858 <xQueueGenericCreateStatic>
90011b82:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90011b84:	2800      	cmp	r0, #0
90011b86:	d0c2      	beq.n	90011b0e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011b88:	490b      	ldr	r1, [pc, #44]	; (90011bb8 <xTimerCreateTimerTask+0xb8>)
90011b8a:	f7fe fe73 	bl	90010874 <vQueueAddToRegistry>
90011b8e:	e7be      	b.n	90011b0e <xTimerCreateTimerTask+0xe>
90011b90:	24027198 	.word	0x24027198
90011b94:	9002b9c4 	.word	0x9002b9c4
90011b98:	9001186d 	.word	0x9001186d
90011b9c:	2402719c 	.word	0x2402719c
90011ba0:	2402711c 	.word	0x2402711c
90011ba4:	24027130 	.word	0x24027130
90011ba8:	24027074 	.word	0x24027074
90011bac:	24027078 	.word	0x24027078
90011bb0:	24027148 	.word	0x24027148
90011bb4:	2402707c 	.word	0x2402707c
90011bb8:	9002b9bc 	.word	0x9002b9bc

90011bbc <xTimerCreate>:
	{
90011bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011bc0:	4607      	mov	r7, r0
90011bc2:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
90011bc4:	202c      	movs	r0, #44	; 0x2c
	{
90011bc6:	4688      	mov	r8, r1
90011bc8:	4616      	mov	r6, r2
90011bca:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
90011bcc:	f7fd faca 	bl	9000f164 <pvPortMalloc>
		if( pxNewTimer != NULL )
90011bd0:	4604      	mov	r4, r0
90011bd2:	b1e8      	cbz	r0, 90011c10 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
90011bd4:	2300      	movs	r3, #0
90011bd6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011bda:	f1b8 0f00 	cmp.w	r8, #0
90011bde:	d01b      	beq.n	90011c18 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
90011be0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 90011c80 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
90011be4:	f7fd fc96 	bl	9000f514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011be8:	f8d9 3000 	ldr.w	r3, [r9]
90011bec:	b1eb      	cbz	r3, 90011c2a <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
90011bee:	f7fd fcb3 	bl	9000f558 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011bf4:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011bf6:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011bf8:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
90011bfa:	e9c4 8506 	strd	r8, r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011bfe:	f7fd fbdf 	bl	9000f3c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
90011c02:	b12e      	cbz	r6, 90011c10 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011c04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90011c08:	f043 0304 	orr.w	r3, r3, #4
90011c0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
90011c10:	4620      	mov	r0, r4
90011c12:	b005      	add	sp, #20
90011c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011c18:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c1c:	f383 8811 	msr	BASEPRI, r3
90011c20:	f3bf 8f6f 	isb	sy
90011c24:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011c28:	e7fe      	b.n	90011c28 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
90011c2a:	f8df b058 	ldr.w	fp, [pc, #88]	; 90011c84 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
90011c2e:	f8df a058 	ldr.w	sl, [pc, #88]	; 90011c88 <xTimerCreate+0xcc>
			vListInitialise( &xActiveTimerList1 );
90011c32:	4658      	mov	r0, fp
90011c34:	9303      	str	r3, [sp, #12]
90011c36:	f7fd fbb7 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011c3a:	4650      	mov	r0, sl
90011c3c:	f7fd fbb4 	bl	9000f3a8 <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011c40:	9b03      	ldr	r3, [sp, #12]
90011c42:	4a0a      	ldr	r2, [pc, #40]	; (90011c6c <xTimerCreate+0xb0>)
90011c44:	2110      	movs	r1, #16
90011c46:	9300      	str	r3, [sp, #0]
90011c48:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
90011c4a:	4b09      	ldr	r3, [pc, #36]	; (90011c70 <xTimerCreate+0xb4>)
90011c4c:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
90011c50:	4b08      	ldr	r3, [pc, #32]	; (90011c74 <xTimerCreate+0xb8>)
90011c52:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011c56:	4b08      	ldr	r3, [pc, #32]	; (90011c78 <xTimerCreate+0xbc>)
90011c58:	f7fd fdfe 	bl	9000f858 <xQueueGenericCreateStatic>
90011c5c:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
90011c60:	2800      	cmp	r0, #0
90011c62:	d0c4      	beq.n	90011bee <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011c64:	4905      	ldr	r1, [pc, #20]	; (90011c7c <xTimerCreate+0xc0>)
90011c66:	f7fe fe05 	bl	90010874 <vQueueAddToRegistry>
90011c6a:	e7c0      	b.n	90011bee <xTimerCreate+0x32>
90011c6c:	2402707c 	.word	0x2402707c
90011c70:	24027074 	.word	0x24027074
90011c74:	24027078 	.word	0x24027078
90011c78:	24027148 	.word	0x24027148
90011c7c:	9002b9bc 	.word	0x9002b9bc
90011c80:	24027198 	.word	0x24027198
90011c84:	2402711c 	.word	0x2402711c
90011c88:	24027130 	.word	0x24027130

90011c8c <xTimerCreateStatic>:
	{
90011c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
90011c90:	242c      	movs	r4, #44	; 0x2c
	{
90011c92:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
90011c94:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
90011c96:	9c03      	ldr	r4, [sp, #12]
90011c98:	2c2c      	cmp	r4, #44	; 0x2c
90011c9a:	d008      	beq.n	90011cae <xTimerCreateStatic+0x22>
90011c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011ca0:	f383 8811 	msr	BASEPRI, r3
90011ca4:	f3bf 8f6f 	isb	sy
90011ca8:	f3bf 8f4f 	dsb	sy
90011cac:	e7fe      	b.n	90011cac <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90011cae:	461d      	mov	r5, r3
90011cb0:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
90011cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011cb4:	b343      	cbz	r3, 90011d08 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
90011cb6:	4616      	mov	r6, r2
90011cb8:	461a      	mov	r2, r3
90011cba:	2302      	movs	r3, #2
90011cbc:	460f      	mov	r7, r1
90011cbe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011cc2:	b351      	cbz	r1, 90011d1a <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
90011cc4:	4c29      	ldr	r4, [pc, #164]	; (90011d6c <xTimerCreateStatic+0xe0>)
90011cc6:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
90011cc8:	f7fd fc24 	bl	9000f514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90011ccc:	f8d4 b000 	ldr.w	fp, [r4]
90011cd0:	f1bb 0f00 	cmp.w	fp, #0
90011cd4:	d02a      	beq.n	90011d2c <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
90011cd6:	f7fd fc3f 	bl	9000f558 <vPortExitCritical>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011cde:	1d18      	adds	r0, r3, #4
		pxNewTimer->pcTimerName = pcTimerName;
90011ce0:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
90011ce4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pvTimerID = pvTimerID;
90011ce6:	e9c3 7506 	strd	r7, r5, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
90011cea:	f7fd fb69 	bl	9000f3c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
90011cee:	b13e      	cbz	r6, 90011d00 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
90011cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90011cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90011cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90011cf8:	f043 0304 	orr.w	r3, r3, #4
90011cfc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
90011d00:	980f      	ldr	r0, [sp, #60]	; 0x3c
90011d02:	b005      	add	sp, #20
90011d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d0c:	f383 8811 	msr	BASEPRI, r3
90011d10:	f3bf 8f6f 	isb	sy
90011d14:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
90011d18:	e7fe      	b.n	90011d18 <xTimerCreateStatic+0x8c>
90011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d1e:	f383 8811 	msr	BASEPRI, r3
90011d22:	f3bf 8f6f 	isb	sy
90011d26:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
90011d2a:	e7fe      	b.n	90011d2a <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
90011d2c:	f8df a054 	ldr.w	sl, [pc, #84]	; 90011d84 <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
90011d30:	f8df 9054 	ldr.w	r9, [pc, #84]	; 90011d88 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
90011d34:	4650      	mov	r0, sl
90011d36:	f7fd fb37 	bl	9000f3a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90011d3a:	4648      	mov	r0, r9
90011d3c:	f7fd fb34 	bl	9000f3a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90011d40:	4a0b      	ldr	r2, [pc, #44]	; (90011d70 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
90011d42:	4b0c      	ldr	r3, [pc, #48]	; (90011d74 <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011d44:	2110      	movs	r1, #16
90011d46:	f8cd b000 	str.w	fp, [sp]
90011d4a:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
90011d4c:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
90011d50:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90011d54:	4a08      	ldr	r2, [pc, #32]	; (90011d78 <xTimerCreateStatic+0xec>)
90011d56:	4b09      	ldr	r3, [pc, #36]	; (90011d7c <xTimerCreateStatic+0xf0>)
90011d58:	f7fd fd7e 	bl	9000f858 <xQueueGenericCreateStatic>
90011d5c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90011d5e:	2800      	cmp	r0, #0
90011d60:	d0b9      	beq.n	90011cd6 <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90011d62:	4907      	ldr	r1, [pc, #28]	; (90011d80 <xTimerCreateStatic+0xf4>)
90011d64:	f7fe fd86 	bl	90010874 <vQueueAddToRegistry>
90011d68:	e7b5      	b.n	90011cd6 <xTimerCreateStatic+0x4a>
90011d6a:	bf00      	nop
90011d6c:	24027198 	.word	0x24027198
90011d70:	24027074 	.word	0x24027074
90011d74:	24027078 	.word	0x24027078
90011d78:	2402707c 	.word	0x2402707c
90011d7c:	24027148 	.word	0x24027148
90011d80:	9002b9bc 	.word	0x9002b9bc
90011d84:	2402711c 	.word	0x2402711c
90011d88:	24027130 	.word	0x24027130

90011d8c <xTimerGenericCommand>:
	configASSERT( xTimer );
90011d8c:	b1c8      	cbz	r0, 90011dc2 <xTimerGenericCommand+0x36>
{
90011d8e:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
90011d90:	4e17      	ldr	r6, [pc, #92]	; (90011df0 <xTimerGenericCommand+0x64>)
{
90011d92:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
90011d94:	6834      	ldr	r4, [r6, #0]
90011d96:	b18c      	cbz	r4, 90011dbc <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011d98:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90011d9a:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
90011d9c:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
90011da0:	dc18      	bgt.n	90011dd4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011da2:	f7ff fc19 	bl	900115d8 <xTaskGetSchedulerState>
90011da6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011da8:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90011dac:	d01a      	beq.n	90011de4 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
90011dae:	4669      	mov	r1, sp
90011db0:	461a      	mov	r2, r3
90011db2:	6830      	ldr	r0, [r6, #0]
90011db4:	f7fd fea6 	bl	9000fb04 <xQueueGenericSend>
}
90011db8:	b004      	add	sp, #16
90011dba:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
90011dbc:	4620      	mov	r0, r4
}
90011dbe:	b004      	add	sp, #16
90011dc0:	bd70      	pop	{r4, r5, r6, pc}
90011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
90011dc6:	f383 8811 	msr	BASEPRI, r3
90011dca:	f3bf 8f6f 	isb	sy
90011dce:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
90011dd2:	e7fe      	b.n	90011dd2 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90011dd4:	461a      	mov	r2, r3
90011dd6:	4669      	mov	r1, sp
90011dd8:	2300      	movs	r3, #0
90011dda:	4620      	mov	r0, r4
90011ddc:	f7fe f8bc 	bl	9000ff58 <xQueueGenericSendFromISR>
}
90011de0:	b004      	add	sp, #16
90011de2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90011de4:	9a08      	ldr	r2, [sp, #32]
90011de6:	4669      	mov	r1, sp
90011de8:	6830      	ldr	r0, [r6, #0]
90011dea:	f7fd fe8b 	bl	9000fb04 <xQueueGenericSend>
90011dee:	e7e6      	b.n	90011dbe <xTimerGenericCommand+0x32>
90011df0:	24027198 	.word	0x24027198

90011df4 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
90011df4:	b158      	cbz	r0, 90011e0e <pvTimerGetTimerID+0x1a>
{
90011df6:	b510      	push	{r4, lr}
90011df8:	4604      	mov	r4, r0
90011dfa:	b082      	sub	sp, #8

	taskENTER_CRITICAL();
90011dfc:	f7fd fb8a 	bl	9000f514 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
90011e00:	69e0      	ldr	r0, [r4, #28]
90011e02:	9001      	str	r0, [sp, #4]
	}
	taskEXIT_CRITICAL();
90011e04:	f7fd fba8 	bl	9000f558 <vPortExitCritical>

	return pvReturn;
}
90011e08:	9801      	ldr	r0, [sp, #4]
90011e0a:	b002      	add	sp, #8
90011e0c:	bd10      	pop	{r4, pc}
90011e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011e12:	f383 8811 	msr	BASEPRI, r3
90011e16:	f3bf 8f6f 	isb	sy
90011e1a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
90011e1e:	e7fe      	b.n	90011e1e <pvTimerGetTimerID+0x2a>

90011e20 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90011e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011e24:	4c82      	ldr	r4, [pc, #520]	; (90012030 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
90011e26:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011e28:	fba4 4303 	umull	r4, r3, r4, r3
{  
90011e2c:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011e2e:	0a19      	lsrs	r1, r3, #8
{  
90011e30:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90011e32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
90011e36:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90011e38:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90011e3c:	4293      	cmp	r3, r2
90011e3e:	930f      	str	r3, [sp, #60]	; 0x3c
90011e40:	f240 80f1 	bls.w	90012026 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e44:	4b7b      	ldr	r3, [pc, #492]	; (90012034 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
90011e46:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90012044 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011e4e:	691b      	ldr	r3, [r3, #16]
90011e50:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90012048 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
90011e54:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011e56:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011e58:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e5a:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011e5c:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e5e:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
90011e60:	f04f 0e02 	mov.w	lr, #2
90011e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
90011e66:	f502 7080 	add.w	r0, r2, #256	; 0x100
90011e6a:	9204      	str	r2, [sp, #16]
90011e6c:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e6e:	3101      	adds	r1, #1
90011e70:	9006      	str	r0, [sp, #24]
90011e72:	980e      	ldr	r0, [sp, #56]	; 0x38
90011e74:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011e76:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90011e78:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90011e7c:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90011e80:	fb01 f202 	mul.w	r2, r1, r2
90011e84:	005b      	lsls	r3, r3, #1
90011e86:	eb03 1302 	add.w	r3, r3, r2, lsl #4
90011e8a:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90011e8c:	e009      	b.n	90011ea2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011e8e:	9b05      	ldr	r3, [sp, #20]
90011e90:	9a01      	ldr	r2, [sp, #4]
90011e92:	4293      	cmp	r3, r2
90011e94:	d80f      	bhi.n	90011eb6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90011e96:	f1be 0f10 	cmp.w	lr, #16
90011e9a:	f000 80bb 	beq.w	90012014 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
90011e9e:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90011ea2:	f1be 0f0a 	cmp.w	lr, #10
90011ea6:	d1f2      	bne.n	90011e8e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90011ea8:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90011eaa:	9a01      	ldr	r2, [sp, #4]
90011eac:	3380      	adds	r3, #128	; 0x80
90011eae:	9304      	str	r3, [sp, #16]
90011eb0:	9b05      	ldr	r3, [sp, #20]
90011eb2:	4293      	cmp	r3, r2
90011eb4:	d9f3      	bls.n	90011e9e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90011eb6:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011eb8:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
90011eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011ebc:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
90011ebe:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90011ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
90011ec2:	9a04      	ldr	r2, [sp, #16]
90011ec4:	1859      	adds	r1, r3, r1
90011ec6:	f103 0c10 	add.w	ip, r3, #16
90011eca:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
90011ece:	3330      	adds	r3, #48	; 0x30
90011ed0:	4696      	mov	lr, r2
90011ed2:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90011ed4:	9307      	str	r3, [sp, #28]
90011ed6:	9b03      	ldr	r3, [sp, #12]
90011ed8:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
90011edc:	4674      	mov	r4, lr
    currentMCU++;
90011ede:	9e02      	ldr	r6, [sp, #8]
90011ee0:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ee2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90011ee6:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011ee8:	4953      	ldr	r1, [pc, #332]	; (90012038 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
90011eea:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011eec:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011ef0:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011ef2:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90011ef6:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011ef8:	4950      	ldr	r1, [pc, #320]	; (9001203c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
90011efa:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90011efe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f02:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011f06:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90011f08:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90011f0a:	4b4d      	ldr	r3, [pc, #308]	; (90012040 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
90011f0c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f10:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011f14:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f18:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f1a:	eb03 0b02 	add.w	fp, r3, r2
90011f1e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f22:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f24:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f28:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f2c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f30:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f34:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90011f38:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90011f3c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
90011f40:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90011f44:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f48:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f4c:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011f50:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f52:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f56:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f5a:	ea4f 0292 	mov.w	r2, r2, lsr #2
90011f5e:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f62:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f66:	ea4f 1242 	mov.w	r2, r2, lsl #5
90011f6a:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011f6e:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90011f72:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90011f76:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f7a:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f7e:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90011f82:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f84:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f88:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f8c:	ea4f 0292 	mov.w	r2, r2, lsr #2
90011f90:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011f94:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011f98:	ea4f 1242 	mov.w	r2, r2, lsl #5
90011f9c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90011fa0:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90011fa4:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90011fa8:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011faa:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fac:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90011fae:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fb0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fb4:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fb8:	ea4f 0393 	mov.w	r3, r3, lsr #2
90011fbc:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90011fc0:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90011fc4:	ea4f 1343 	mov.w	r3, r3, lsl #5
90011fc8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90011fcc:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
90011fd0:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90011fd4:	d185      	bne.n	90011ee2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011fd6:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90011fd8:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
90011fdc:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90011fe0:	3310      	adds	r3, #16
90011fe2:	9302      	str	r3, [sp, #8]
            pChrom++;
90011fe4:	9b03      	ldr	r3, [sp, #12]
90011fe6:	3304      	adds	r3, #4
90011fe8:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
90011fea:	9b07      	ldr	r3, [sp, #28]
90011fec:	4563      	cmp	r3, ip
90011fee:	f47f af72 	bne.w	90011ed6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
90011ff2:	9b06      	ldr	r3, [sp, #24]
90011ff4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90011ff8:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90011ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
90011ffc:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90012000:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
90012002:	9b04      	ldr	r3, [sp, #16]
90012004:	f103 0310 	add.w	r3, r3, #16
90012008:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9001200a:	9b01      	ldr	r3, [sp, #4]
9001200c:	4413      	add	r3, r2
9001200e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90012010:	f47f af45 	bne.w	90011e9e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90012014:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90012016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90012018:	f503 73c0 	add.w	r3, r3, #384	; 0x180
9001201c:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9001201e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90012020:	4293      	cmp	r3, r2
90012022:	f47f af1c 	bne.w	90011e5e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
90012026:	ee17 0a90 	vmov	r0, s15
9001202a:	b011      	add	sp, #68	; 0x44
9001202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012030:	aaaaaaab 	.word	0xaaaaaaab
90012034:	240281a0 	.word	0x240281a0
90012038:	240275a0 	.word	0x240275a0
9001203c:	240271a0 	.word	0x240271a0
90012040:	24027da0 	.word	0x24027da0
90012044:	240279a0 	.word	0x240279a0
90012048:	9002b9cc 	.word	0x9002b9cc

9001204c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9001204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90012050:	0a1c      	lsrs	r4, r3, #8
{  
90012052:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90012054:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90012058:	ee07 4a90 	vmov	s15, r4
{  
9001205c:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9001205e:	429a      	cmp	r2, r3
{  
90012060:	9007      	str	r0, [sp, #28]
90012062:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90012064:	930b      	str	r3, [sp, #44]	; 0x2c
90012066:	f080 814a 	bcs.w	900122fe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001206a:	4ba7      	ldr	r3, [pc, #668]	; (90012308 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
9001206c:	4da7      	ldr	r5, [pc, #668]	; (9001230c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
9001206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90012070:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90012310 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90012074:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012078:	691b      	ldr	r3, [r3, #16]
9001207a:	f8df a298 	ldr.w	sl, [pc, #664]	; 90012314 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
9001207e:	f8df b298 	ldr.w	fp, [pc, #664]	; 90012318 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90012082:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9001231c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012086:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012088:	9301      	str	r3, [sp, #4]
9001208a:	e008      	b.n	9001209e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9001208c:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9001208e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90012090:	f503 7380 	add.w	r3, r3, #256	; 0x100
90012094:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90012096:	9b08      	ldr	r3, [sp, #32]
90012098:	4293      	cmp	r3, r2
9001209a:	f000 8130 	beq.w	900122fe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001209e:	9a07      	ldr	r2, [sp, #28]
900120a0:	9908      	ldr	r1, [sp, #32]
900120a2:	f102 0080 	add.w	r0, r2, #128	; 0x80
900120a6:	010b      	lsls	r3, r1, #4
900120a8:	3101      	adds	r1, #1
    currentMCU++;
900120aa:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900120ae:	980a      	ldr	r0, [sp, #40]	; 0x28
900120b0:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900120b2:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900120b4:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900120b8:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900120bc:	fb01 f202 	mul.w	r2, r1, r2
900120c0:	005b      	lsls	r3, r3, #1
900120c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
900120c6:	9300      	str	r3, [sp, #0]
    currentMCU++;
900120c8:	2308      	movs	r3, #8
900120ca:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900120cc:	e9dd 2300 	ldrd	r2, r3, [sp]
900120d0:	4293      	cmp	r3, r2
900120d2:	d9db      	bls.n	9001208c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
900120d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900120d6:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
900120d8:	9a03      	ldr	r2, [sp, #12]
900120da:	f102 0140 	add.w	r1, r2, #64	; 0x40
900120de:	9a02      	ldr	r2, [sp, #8]
900120e0:	f103 0020 	add.w	r0, r3, #32
900120e4:	3204      	adds	r2, #4
900120e6:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900120e8:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
900120ec:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900120ee:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
900120f2:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900120f4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
900120f8:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
900120fa:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900120fe:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012102:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012104:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90012108:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001210c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001210e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012110:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012114:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012118:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001211c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012120:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012122:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012126:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001212a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9001212e:	08e4      	lsrs	r4, r4, #3
90012130:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012134:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90012138:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001213c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90012140:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90012144:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012146:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012148:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001214a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001214e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90012152:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012156:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012158:	08c0      	lsrs	r0, r0, #3
9001215a:	08a4      	lsrs	r4, r4, #2
9001215c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90012160:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90012164:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012168:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001216c:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012170:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90012174:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012178:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001217c:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001217e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90012182:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012186:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012188:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001218a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001218e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012192:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012196:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001219a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001219c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121a0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900121a4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900121a8:	08e4      	lsrs	r4, r4, #3
900121aa:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900121ae:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900121b2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900121b6:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
900121ba:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900121be:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121c0:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121c2:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121c4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121c8:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900121cc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121d0:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900121d2:	08c0      	lsrs	r0, r0, #3
900121d4:	08a4      	lsrs	r4, r4, #2
900121d6:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900121da:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900121de:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900121e2:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900121e6:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
900121ea:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900121ee:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900121f2:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900121f6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900121fa:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900121fc:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012200:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012202:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012204:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012208:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001220c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90012210:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012214:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012216:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001221a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001221e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90012222:	08e4      	lsrs	r4, r4, #3
90012224:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012228:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9001222c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012230:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90012234:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90012238:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001223a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001223c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001223e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012242:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90012246:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001224a:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001224c:	08c0      	lsrs	r0, r0, #3
9001224e:	08a4      	lsrs	r4, r4, #2
90012250:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90012254:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90012258:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001225c:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012260:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012264:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90012268:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001226c:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012270:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012272:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90012276:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001227a:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001227c:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001227e:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012282:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012286:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001228a:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001228e:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012290:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012294:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90012298:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9001229c:	08e4      	lsrs	r4, r4, #3
9001229e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900122a2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900122a6:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900122aa:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
900122ae:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900122b2:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900122b4:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900122b6:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900122b8:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900122bc:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900122c0:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900122c4:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900122c6:	08c0      	lsrs	r0, r0, #3
900122c8:	08a4      	lsrs	r4, r4, #2
900122ca:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900122ce:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900122d2:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
900122d6:	9804      	ldr	r0, [sp, #16]
900122d8:	4283      	cmp	r3, r0
900122da:	f47f af05 	bne.w	900120e8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
900122de:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900122e0:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
900122e2:	3308      	adds	r3, #8
900122e4:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
900122e6:	9b03      	ldr	r3, [sp, #12]
900122e8:	3308      	adds	r3, #8
900122ea:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900122ec:	9b00      	ldr	r3, [sp, #0]
900122ee:	4413      	add	r3, r2
900122f0:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
900122f2:	9b05      	ldr	r3, [sp, #20]
900122f4:	3b01      	subs	r3, #1
900122f6:	9305      	str	r3, [sp, #20]
900122f8:	f47f aee8 	bne.w	900120cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
900122fc:	e6c6      	b.n	9001208c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
900122fe:	ee17 0a90 	vmov	r0, s15
90012302:	b00d      	add	sp, #52	; 0x34
90012304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012308:	240281a0 	.word	0x240281a0
9001230c:	240271a0 	.word	0x240271a0
90012310:	24027da0 	.word	0x24027da0
90012314:	240279a0 	.word	0x240279a0
90012318:	240275a0 	.word	0x240275a0
9001231c:	9002b9cc 	.word	0x9002b9cc

90012320 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90012320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012324:	4cb6      	ldr	r4, [pc, #728]	; (90012600 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
90012326:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012328:	fba4 4303 	umull	r4, r3, r4, r3
{  
9001232c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9001232e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90012330:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90012334:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90012338:	429a      	cmp	r2, r3
9001233a:	9306      	str	r3, [sp, #24]
{  
9001233c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90012340:	f080 8158 	bcs.w	900125f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012344:	4baf      	ldr	r3, [pc, #700]	; (90012604 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012346:	4cb0      	ldr	r4, [pc, #704]	; (90012608 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001234a:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90012610 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001234e:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012352:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012354:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90012614 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012358:	48ac      	ldr	r0, [pc, #688]	; (9001260c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
9001235a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90012618 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001235e:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012360:	9300      	str	r3, [sp, #0]
90012362:	e007      	b.n	90012374 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90012364:	9b04      	ldr	r3, [sp, #16]
90012366:	33c0      	adds	r3, #192	; 0xc0
90012368:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9001236a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
9001236e:	4293      	cmp	r3, r2
90012370:	f000 8140 	beq.w	900125f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012374:	9e05      	ldr	r6, [sp, #20]
90012376:	9f07      	ldr	r7, [sp, #28]
90012378:	00f2      	lsls	r2, r6, #3
9001237a:	3601      	adds	r6, #1
9001237c:	9904      	ldr	r1, [sp, #16]
9001237e:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012380:	9e03      	ldr	r6, [sp, #12]
90012382:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012386:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9001238a:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001238e:	fb06 f505 	mul.w	r5, r6, r5
90012392:	0052      	lsls	r2, r2, #1
90012394:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
90012398:	2508      	movs	r5, #8
9001239a:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001239c:	9d00      	ldr	r5, [sp, #0]
9001239e:	4295      	cmp	r5, r2
900123a0:	d9e0      	bls.n	90012364 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900123a2:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
900123a6:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900123a8:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
900123ac:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
900123ae:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123b2:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123b6:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
900123ba:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900123bc:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123c0:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123c4:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900123c6:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123c8:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123ca:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900123ce:	eb05 4929 	add.w	r9, r5, r9, asr #16
900123d2:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123d6:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900123d8:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
900123dc:	08ed      	lsrs	r5, r5, #3
900123de:	08bf      	lsrs	r7, r7, #2
900123e0:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
900123e4:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900123e6:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900123ea:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900123ec:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900123f0:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
900123f4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900123f8:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900123fc:	4425      	add	r5, r4
900123fe:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012402:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012406:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001240a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001240c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001240e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012410:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012414:	eb05 4929 	add.w	r9, r5, r9, asr #16
90012418:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001241c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001241e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90012422:	08ed      	lsrs	r5, r5, #3
90012424:	08bf      	lsrs	r7, r7, #2
90012426:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9001242a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001242c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90012430:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
90012432:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012434:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90012438:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001243c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001243e:	4427      	add	r7, r4
90012440:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90012444:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012446:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001244a:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001244c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012450:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012454:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012458:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001245c:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001245e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012462:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012464:	eb07 4626 	add.w	r6, r7, r6, asr #16
90012468:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9001246c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012470:	08fe      	lsrs	r6, r7, #3
90012472:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90012476:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9001247a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001247e:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012480:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90012484:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90012488:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001248c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012490:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90012494:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012496:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001249a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001249e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900124a0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124a2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124a4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124a8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900124ac:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124b0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124b4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900124b8:	08fe      	lsrs	r6, r7, #3
900124ba:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900124be:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900124c2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900124c6:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900124c8:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900124cc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
900124d0:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124d4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124d8:	4427      	add	r7, r4
900124da:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900124de:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124e2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124e6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900124e8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900124ea:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124ec:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124f0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900124f4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900124f8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900124fc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012500:	08fe      	lsrs	r6, r7, #3
90012502:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90012506:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9001250a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001250e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012510:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90012514:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012518:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9001251c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001251e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012522:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012526:	44b9      	add	r9, r7
90012528:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001252c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012530:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012534:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012538:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001253a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001253c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90012540:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90012544:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012548:	08fe      	lsrs	r6, r7, #3
9001254a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9001254e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90012552:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90012556:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90012558:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001255c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
90012560:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012564:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012568:	4427      	add	r7, r4
9001256a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001256e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90012572:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012576:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90012578:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001257a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001257c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90012580:	eb07 4626 	add.w	r6, r7, r6, asr #16
90012584:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90012588:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001258c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90012590:	08fe      	lsrs	r6, r7, #3
90012592:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90012596:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9001259a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001259e:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900125a0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900125a4:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900125a8:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900125ac:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900125b0:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900125b2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900125b6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900125ba:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900125be:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900125c0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900125c2:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900125c4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900125c8:	eb07 4626 	add.w	r6, r7, r6, asr #16
900125cc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900125d0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900125d4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900125d8:	08fe      	lsrs	r6, r7, #3
900125da:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900125de:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900125e2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900125e6:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
900125e8:	9d01      	ldr	r5, [sp, #4]
900125ea:	3d01      	subs	r5, #1
900125ec:	9501      	str	r5, [sp, #4]
900125ee:	f47f aed5 	bne.w	9001239c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
900125f2:	e6b7      	b.n	90012364 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
900125f4:	ee17 0a90 	vmov	r0, s15
900125f8:	b009      	add	sp, #36	; 0x24
900125fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900125fe:	bf00      	nop
90012600:	aaaaaaab 	.word	0xaaaaaaab
90012604:	240281a0 	.word	0x240281a0
90012608:	9002b9cc 	.word	0x9002b9cc
9001260c:	240279a0 	.word	0x240279a0
90012610:	24027da0 	.word	0x24027da0
90012614:	240271a0 	.word	0x240271a0
90012618:	240275a0 	.word	0x240275a0

9001261c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9001261c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90012620:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012624:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90012626:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90012628:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001262c:	f080 8088 	bcs.w	90012740 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012630:	4b45      	ldr	r3, [pc, #276]	; (90012748 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012632:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012636:	691e      	ldr	r6, [r3, #16]
90012638:	e003      	b.n	90012642 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9001263a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
9001263c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90012640:	d07e      	beq.n	90012740 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012642:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90012644:	4604      	mov	r4, r0
90012646:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001264a:	3201      	adds	r2, #1
9001264c:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90012650:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012654:	fb08 f505 	mul.w	r5, r8, r5
90012658:	005b      	lsls	r3, r3, #1
9001265a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001265e:	429e      	cmp	r6, r3
90012660:	d9eb      	bls.n	9001263a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90012662:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90012666:	18cd      	adds	r5, r1, r3
          pLum++;
90012668:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
9001266a:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001266e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012672:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012676:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001267a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001267e:	ea47 070c 	orr.w	r7, r7, ip
90012682:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90012684:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90012686:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001268a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001268e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012692:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012696:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001269a:	ea47 070c 	orr.w	r7, r7, ip
9001269e:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900126a0:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900126a4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900126a8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900126ac:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900126b0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900126b4:	ea47 070c 	orr.w	r7, r7, ip
900126b8:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
900126ba:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900126be:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900126c2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900126c6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900126ca:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900126ce:	ea47 070c 	orr.w	r7, r7, ip
900126d2:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
900126d4:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900126d8:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900126dc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900126e0:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900126e4:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900126e8:	ea47 070c 	orr.w	r7, r7, ip
900126ec:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
900126ee:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900126f2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900126f6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900126fa:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900126fe:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012702:	ea47 070c 	orr.w	r7, r7, ip
90012706:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90012708:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001270c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90012710:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90012714:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012718:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001271c:	ea47 070c 	orr.w	r7, r7, ip
90012720:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90012722:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90012726:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001272a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001272e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90012732:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90012736:	ea47 070c 	orr.w	r7, r7, ip
9001273a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9001273c:	d18f      	bne.n	9001265e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9001273e:	e77c      	b.n	9001263a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90012740:	ee17 0a90 	vmov	r0, s15
90012744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012748:	240281a0 	.word	0x240281a0

9001274c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9001274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90012750:	0a1c      	lsrs	r4, r3, #8
{  
90012752:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90012754:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90012758:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9001275c:	429a      	cmp	r2, r3
9001275e:	9300      	str	r3, [sp, #0]
90012760:	f080 8129 	bcs.w	900129b6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012764:	4b96      	ldr	r3, [pc, #600]	; (900129c0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012766:	f8df c25c 	ldr.w	ip, [pc, #604]	; 900129c4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001276a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001276c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90012770:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012772:	9401      	str	r4, [sp, #4]
90012774:	e005      	b.n	90012782 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
90012776:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90012778:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
9001277c:	429a      	cmp	r2, r3
9001277e:	f000 811a 	beq.w	900129b6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90012782:	00d3      	lsls	r3, r2, #3
90012784:	9c01      	ldr	r4, [sp, #4]
90012786:	3201      	adds	r2, #1
    currentMCU++;
90012788:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001278c:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90012790:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
90012794:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90012796:	fb08 f505 	mul.w	r5, r8, r5
9001279a:	0064      	lsls	r4, r4, #1
9001279c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900127a0:	42a6      	cmp	r6, r4
900127a2:	d9e8      	bls.n	90012776 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
900127a4:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
900127a8:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900127aa:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900127ae:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
900127b2:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900127b6:	fb19 f90a 	smulbb	r9, r9, sl
900127ba:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127be:	f813 5c08 	ldrb.w	r5, [r3, #-8]
900127c2:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127c6:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900127ca:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127ce:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900127d2:	ea4f 2595 	mov.w	r5, r5, lsr #10
900127d6:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900127da:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
900127de:	fb19 f90a 	smulbb	r9, r9, sl
900127e2:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900127e6:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900127ea:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900127ec:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900127ee:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
900127f0:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900127f4:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
900127f8:	fb19 f90a 	smulbb	r9, r9, sl
900127fc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012800:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90012804:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012808:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001280c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012810:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012814:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012818:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001281c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90012820:	fb19 f90a 	smulbb	r9, r9, sl
90012824:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012828:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001282c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001282e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90012830:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012834:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90012838:	fb19 f90a 	smulbb	r9, r9, sl
9001283c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012840:	f813 5c06 	ldrb.w	r5, [r3, #-6]
90012844:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012848:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001284c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012850:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012854:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012858:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001285c:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
90012860:	fb19 f90a 	smulbb	r9, r9, sl
90012864:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012868:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001286c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001286e:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
90012870:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012874:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
90012878:	fb19 f90a 	smulbb	r9, r9, sl
9001287c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012880:	f813 5c05 	ldrb.w	r5, [r3, #-5]
90012884:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012888:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001288c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012890:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012894:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012898:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001289c:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
900128a0:	fb19 f90a 	smulbb	r9, r9, sl
900128a4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128a8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900128ac:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900128ae:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
900128b0:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900128b4:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
900128b8:	fb19 f90a 	smulbb	r9, r9, sl
900128bc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900128c0:	f813 5c04 	ldrb.w	r5, [r3, #-4]
900128c4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128c8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900128cc:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128d0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900128d4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900128d8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900128dc:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
900128e0:	fb19 f90a 	smulbb	r9, r9, sl
900128e4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900128e8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900128ec:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900128ee:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
900128f0:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900128f4:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
900128f8:	fb19 f90a 	smulbb	r9, r9, sl
900128fc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012900:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90012904:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012908:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001290c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012910:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012914:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012918:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001291c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90012920:	fb19 f90a 	smulbb	r9, r9, sl
90012924:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012928:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001292c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001292e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90012930:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012934:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90012938:	fb19 f90a 	smulbb	r9, r9, sl
9001293c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012940:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
90012944:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012948:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001294c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012950:	ea4f 2555 	mov.w	r5, r5, lsr #9
90012954:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012958:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001295c:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
90012960:	fb19 f90a 	smulbb	r9, r9, sl
90012964:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012968:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9001296c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001296e:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
90012970:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90012974:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
90012978:	fb19 f90a 	smulbb	r9, r9, sl
9001297c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90012980:	f813 5c01 	ldrb.w	r5, [r3, #-1]
90012984:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012988:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001298c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90012990:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90012994:	ea4f 2595 	mov.w	r5, r5, lsr #10
90012998:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9001299c:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
900129a0:	fb19 f90a 	smulbb	r9, r9, sl
900129a4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900129a8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900129ac:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900129ae:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
900129b0:	f47f aef6 	bne.w	900127a0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
900129b4:	e6df      	b.n	90012776 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
900129b6:	ee17 0a90 	vmov	r0, s15
900129ba:	b003      	add	sp, #12
900129bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900129c0:	240281a0 	.word	0x240281a0
900129c4:	80808081 	.word	0x80808081

900129c8 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
900129c8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900129ca:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900129cc:	6805      	ldr	r5, [r0, #0]
900129ce:	4c3e      	ldr	r4, [pc, #248]	; (90012ac8 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
900129d0:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
900129d2:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
900129d4:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
900129d6:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900129da:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
900129de:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900129e0:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
900129e4:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
900129e6:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
900129e8:	d027      	beq.n	90012a3a <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
900129ea:	b9ed      	cbnz	r5, 90012a28 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
900129ec:	4837      	ldr	r0, [pc, #220]	; (90012acc <JPEG_GetDecodeColorConvertFunc+0x104>)
900129ee:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
900129f0:	f013 0107 	ands.w	r1, r3, #7
900129f4:	d02b      	beq.n	90012a4e <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
900129f6:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
900129fa:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
900129fc:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900129fe:	4419      	add	r1, r3
90012a00:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a02:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a04:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a06:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012a08:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
90012a0c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90012a0e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90012a12:	fb05 6611 	mls	r6, r5, r1, r6
90012a16:	b106      	cbz	r6, 90012a1a <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90012a18:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90012a1a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90012a1e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90012a20:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90012a22:	6013      	str	r3, [r2, #0]
}
90012a24:	bcf0      	pop	{r4, r5, r6, r7}
90012a26:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90012a28:	2d30      	cmp	r5, #48	; 0x30
90012a2a:	d119      	bne.n	90012a60 <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90012a2c:	4828      	ldr	r0, [pc, #160]	; (90012ad0 <JPEG_GetDecodeColorConvertFunc+0x108>)
90012a2e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90012a30:	f013 0107 	ands.w	r1, r3, #7
90012a34:	d1df      	bne.n	900129f6 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90012a36:	6161      	str	r1, [r4, #20]
90012a38:	e00a      	b.n	90012a50 <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90012a3a:	2f01      	cmp	r7, #1
90012a3c:	d024      	beq.n	90012a88 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90012a3e:	2f02      	cmp	r7, #2
90012a40:	d011      	beq.n	90012a66 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90012a42:	4824      	ldr	r0, [pc, #144]	; (90012ad4 <JPEG_GetDecodeColorConvertFunc+0x10c>)
90012a44:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90012a46:	f013 0107 	ands.w	r1, r3, #7
90012a4a:	d1d4      	bne.n	900129f6 <JPEG_GetDecodeColorConvertFunc+0x2e>
90012a4c:	e7f3      	b.n	90012a36 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90012a4e:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a50:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
90012a52:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012a54:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a56:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a58:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012a5a:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012a5e:	e7d6      	b.n	90012a0e <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
90012a60:	2001      	movs	r0, #1
}
90012a62:	bcf0      	pop	{r4, r5, r6, r7}
90012a64:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90012a66:	481c      	ldr	r0, [pc, #112]	; (90012ad8 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90012a68:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90012a6a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90012a6c:	f013 010f 	ands.w	r1, r3, #15
90012a70:	d022      	beq.n	90012ab8 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012a72:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
90012a76:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012a78:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012a7a:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
90012a7c:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012a7e:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a80:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a82:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a84:	62a1      	str	r1, [r4, #40]	; 0x28
90012a86:	e7c1      	b.n	90012a0c <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90012a88:	4814      	ldr	r0, [pc, #80]	; (90012adc <JPEG_GetDecodeColorConvertFunc+0x114>)
90012a8a:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90012a8c:	f013 010f 	ands.w	r1, r3, #15
90012a90:	d107      	bne.n	90012aa2 <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90012a92:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a94:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012a96:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012a98:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012a9a:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012a9c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012aa0:	e7b5      	b.n	90012a0e <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90012aa2:	f1c1 0110 	rsb	r1, r1, #16
90012aa6:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90012aa8:	4419      	add	r1, r3
90012aaa:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012aac:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012aae:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012ab0:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90012ab2:	e9c4 5507 	strd	r5, r5, [r4, #28]
90012ab6:	e7a9      	b.n	90012a0c <JPEG_GetDecodeColorConvertFunc+0x44>
90012ab8:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90012aba:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012abc:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
90012abe:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90012ac2:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90012ac4:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90012ac6:	e7a2      	b.n	90012a0e <JPEG_GetDecodeColorConvertFunc+0x46>
90012ac8:	240281a0 	.word	0x240281a0
90012acc:	9001261d 	.word	0x9001261d
90012ad0:	9001274d 	.word	0x9001274d
90012ad4:	90012321 	.word	0x90012321
90012ad8:	9001204d 	.word	0x9001204d
90012adc:	90011e21 	.word	0x90011e21

90012ae0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90012ae0:	8880      	ldrh	r0, [r0, #4]
90012ae2:	4770      	bx	lr

90012ae4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90012ae4:	b570      	push	{r4, r5, r6, lr}
90012ae6:	6803      	ldr	r3, [r0, #0]
90012ae8:	460c      	mov	r4, r1
90012aea:	2100      	movs	r1, #0
90012aec:	4605      	mov	r5, r0
90012aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012af0:	4798      	blx	r3
90012af2:	4606      	mov	r6, r0
90012af4:	682b      	ldr	r3, [r5, #0]
90012af6:	4628      	mov	r0, r5
90012af8:	1ba4      	subs	r4, r4, r6
90012afa:	6a1b      	ldr	r3, [r3, #32]
90012afc:	b2a4      	uxth	r4, r4
90012afe:	4798      	blx	r3
90012b00:	fbb4 f0f0 	udiv	r0, r4, r0
90012b04:	bd70      	pop	{r4, r5, r6, pc}

90012b06 <_ZN8touchgfx17AbstractPartition5clearEv>:
90012b06:	2300      	movs	r3, #0
90012b08:	8083      	strh	r3, [r0, #4]
90012b0a:	4770      	bx	lr

90012b0c <_ZN8touchgfx17AbstractPartition8allocateEt>:
90012b0c:	b510      	push	{r4, lr}
90012b0e:	6803      	ldr	r3, [r0, #0]
90012b10:	4604      	mov	r4, r0
90012b12:	8881      	ldrh	r1, [r0, #4]
90012b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012b16:	4798      	blx	r3
90012b18:	88a3      	ldrh	r3, [r4, #4]
90012b1a:	3301      	adds	r3, #1
90012b1c:	80a3      	strh	r3, [r4, #4]
90012b1e:	bd10      	pop	{r4, pc}

90012b20 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90012b20:	6803      	ldr	r3, [r0, #0]
90012b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012b24:	4718      	bx	r3

90012b26 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90012b26:	4770      	bx	lr

90012b28 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90012b28:	4a02      	ldr	r2, [pc, #8]	; (90012b34 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90012b2a:	6002      	str	r2, [r0, #0]
90012b2c:	2200      	movs	r2, #0
90012b2e:	8082      	strh	r2, [r0, #4]
90012b30:	4770      	bx	lr
90012b32:	bf00      	nop
90012b34:	9002bcd4 	.word	0x9002bcd4

90012b38 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90012b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012b3a:	2000      	movs	r0, #0
90012b3c:	b12b      	cbz	r3, 90012b4a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90012b3e:	b920      	cbnz	r0, 90012b4a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90012b40:	1a5a      	subs	r2, r3, r1
90012b42:	699b      	ldr	r3, [r3, #24]
90012b44:	4250      	negs	r0, r2
90012b46:	4150      	adcs	r0, r2
90012b48:	e7f8      	b.n	90012b3c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
90012b4a:	4770      	bx	lr

90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
90012b4c:	2300      	movs	r3, #0
90012b4e:	6148      	str	r0, [r1, #20]
90012b50:	618b      	str	r3, [r1, #24]
90012b52:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012b54:	b913      	cbnz	r3, 90012b5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90012b56:	6281      	str	r1, [r0, #40]	; 0x28
90012b58:	4770      	bx	lr
90012b5a:	4613      	mov	r3, r2
90012b5c:	699a      	ldr	r2, [r3, #24]
90012b5e:	2a00      	cmp	r2, #0
90012b60:	d1fb      	bne.n	90012b5a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90012b62:	6199      	str	r1, [r3, #24]
90012b64:	4770      	bx	lr

90012b66 <_ZN8touchgfx9Container9removeAllEv>:
90012b66:	2200      	movs	r2, #0
90012b68:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012b6a:	b123      	cbz	r3, 90012b76 <_ZN8touchgfx9Container9removeAllEv+0x10>
90012b6c:	6999      	ldr	r1, [r3, #24]
90012b6e:	6281      	str	r1, [r0, #40]	; 0x28
90012b70:	e9c3 2205 	strd	r2, r2, [r3, #20]
90012b74:	e7f8      	b.n	90012b68 <_ZN8touchgfx9Container9removeAllEv+0x2>
90012b76:	4770      	bx	lr

90012b78 <_ZN8touchgfx9Container6unlinkEv>:
90012b78:	2300      	movs	r3, #0
90012b7a:	6283      	str	r3, [r0, #40]	; 0x28
90012b7c:	4770      	bx	lr

90012b7e <_ZNK8touchgfx9Container12getSolidRectEv>:
90012b7e:	2200      	movs	r2, #0
90012b80:	8002      	strh	r2, [r0, #0]
90012b82:	8042      	strh	r2, [r0, #2]
90012b84:	8082      	strh	r2, [r0, #4]
90012b86:	80c2      	strh	r2, [r0, #6]
90012b88:	4770      	bx	lr

90012b8a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90012b8a:	b570      	push	{r4, r5, r6, lr}
90012b8c:	460d      	mov	r5, r1
90012b8e:	4616      	mov	r6, r2
90012b90:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012b92:	b13c      	cbz	r4, 90012ba4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90012b94:	6823      	ldr	r3, [r4, #0]
90012b96:	4620      	mov	r0, r4
90012b98:	4632      	mov	r2, r6
90012b9a:	4629      	mov	r1, r5
90012b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90012b9e:	4798      	blx	r3
90012ba0:	69a4      	ldr	r4, [r4, #24]
90012ba2:	e7f6      	b.n	90012b92 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90012ba4:	bd70      	pop	{r4, r5, r6, pc}

90012ba6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90012ba6:	b538      	push	{r3, r4, r5, lr}
90012ba8:	460d      	mov	r5, r1
90012baa:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012bac:	b134      	cbz	r4, 90012bbc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
90012bae:	682b      	ldr	r3, [r5, #0]
90012bb0:	4621      	mov	r1, r4
90012bb2:	4628      	mov	r0, r5
90012bb4:	689b      	ldr	r3, [r3, #8]
90012bb6:	4798      	blx	r3
90012bb8:	69a4      	ldr	r4, [r4, #24]
90012bba:	e7f7      	b.n	90012bac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90012bbc:	bd38      	pop	{r3, r4, r5, pc}

90012bbe <_ZN8touchgfx9ContainerD1Ev>:
90012bbe:	4770      	bx	lr

90012bc0 <_ZN8touchgfx9ContainerD0Ev>:
90012bc0:	b510      	push	{r4, lr}
90012bc2:	4604      	mov	r4, r0
90012bc4:	212c      	movs	r1, #44	; 0x2c
90012bc6:	f014 fd66 	bl	90027696 <_ZdlPvj>
90012bca:	4620      	mov	r0, r4
90012bcc:	bd10      	pop	{r4, pc}

90012bce <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
90012bce:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012bd0:	b19b      	cbz	r3, 90012bfa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90012bd2:	428b      	cmp	r3, r1
90012bd4:	d109      	bne.n	90012bea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90012bd6:	699a      	ldr	r2, [r3, #24]
90012bd8:	2100      	movs	r1, #0
90012bda:	6159      	str	r1, [r3, #20]
90012bdc:	6282      	str	r2, [r0, #40]	; 0x28
90012bde:	b902      	cbnz	r2, 90012be2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90012be0:	4770      	bx	lr
90012be2:	6199      	str	r1, [r3, #24]
90012be4:	4770      	bx	lr
90012be6:	4613      	mov	r3, r2
90012be8:	b13a      	cbz	r2, 90012bfa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90012bea:	699a      	ldr	r2, [r3, #24]
90012bec:	428a      	cmp	r2, r1
90012bee:	d1fa      	bne.n	90012be6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90012bf0:	698a      	ldr	r2, [r1, #24]
90012bf2:	619a      	str	r2, [r3, #24]
90012bf4:	2300      	movs	r3, #0
90012bf6:	e9c1 3305 	strd	r3, r3, [r1, #20]
90012bfa:	4770      	bx	lr

90012bfc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
90012bfc:	b410      	push	{r4}
90012bfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
90012c00:	4604      	mov	r4, r0
90012c02:	b92b      	cbnz	r3, 90012c10 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90012c04:	6803      	ldr	r3, [r0, #0]
90012c06:	4611      	mov	r1, r2
90012c08:	f85d 4b04 	ldr.w	r4, [sp], #4
90012c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90012c0e:	4718      	bx	r3
90012c10:	b941      	cbnz	r1, 90012c24 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
90012c12:	6193      	str	r3, [r2, #24]
90012c14:	6282      	str	r2, [r0, #40]	; 0x28
90012c16:	6154      	str	r4, [r2, #20]
90012c18:	f85d 4b04 	ldr.w	r4, [sp], #4
90012c1c:	4770      	bx	lr
90012c1e:	4603      	mov	r3, r0
90012c20:	2800      	cmp	r0, #0
90012c22:	d0f9      	beq.n	90012c18 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90012c24:	4299      	cmp	r1, r3
90012c26:	6998      	ldr	r0, [r3, #24]
90012c28:	d1f9      	bne.n	90012c1e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
90012c2a:	6190      	str	r0, [r2, #24]
90012c2c:	618a      	str	r2, [r1, #24]
90012c2e:	e7f2      	b.n	90012c16 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90012c30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90012c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012c34:	461f      	mov	r7, r3
90012c36:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90012c3a:	460d      	mov	r5, r1
90012c3c:	4616      	mov	r6, r2
90012c3e:	b103      	cbz	r3, 90012c42 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90012c40:	6038      	str	r0, [r7, #0]
90012c42:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012c44:	b314      	cbz	r4, 90012c8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
90012c46:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012c4a:	b1eb      	cbz	r3, 90012c88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012c4c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90012c50:	428d      	cmp	r5, r1
90012c52:	db19      	blt.n	90012c88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012c54:	b289      	uxth	r1, r1
90012c56:	8923      	ldrh	r3, [r4, #8]
90012c58:	440b      	add	r3, r1
90012c5a:	b21b      	sxth	r3, r3
90012c5c:	429d      	cmp	r5, r3
90012c5e:	da13      	bge.n	90012c88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012c60:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90012c64:	4296      	cmp	r6, r2
90012c66:	db0f      	blt.n	90012c88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012c68:	b292      	uxth	r2, r2
90012c6a:	8963      	ldrh	r3, [r4, #10]
90012c6c:	4413      	add	r3, r2
90012c6e:	b21b      	sxth	r3, r3
90012c70:	429e      	cmp	r6, r3
90012c72:	da09      	bge.n	90012c88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90012c74:	6823      	ldr	r3, [r4, #0]
90012c76:	1ab2      	subs	r2, r6, r2
90012c78:	1a69      	subs	r1, r5, r1
90012c7a:	4620      	mov	r0, r4
90012c7c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90012c80:	b212      	sxth	r2, r2
90012c82:	463b      	mov	r3, r7
90012c84:	b209      	sxth	r1, r1
90012c86:	47c0      	blx	r8
90012c88:	69a4      	ldr	r4, [r4, #24]
90012c8a:	e7db      	b.n	90012c44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
90012c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012c90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012c94:	4c6d      	ldr	r4, [pc, #436]	; (90012e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90012c96:	b0a1      	sub	sp, #132	; 0x84
90012c98:	4606      	mov	r6, r0
90012c9a:	6824      	ldr	r4, [r4, #0]
90012c9c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90012c9e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90012ca2:	2400      	movs	r4, #0
90012ca4:	9303      	str	r3, [sp, #12]
90012ca6:	802c      	strh	r4, [r5, #0]
90012ca8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
90012caa:	802c      	strh	r4, [r5, #0]
90012cac:	601c      	str	r4, [r3, #0]
90012cae:	e9cd 1201 	strd	r1, r2, [sp, #4]
90012cb2:	f7ff ffbd 	bl	90012c30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012cb6:	f1b9 0f03 	cmp.w	r9, #3
90012cba:	f340 80c1 	ble.w	90012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
90012cbe:	4631      	mov	r1, r6
90012cc0:	a80c      	add	r0, sp, #48	; 0x30
90012cc2:	f006 fb95 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012cc6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90012cca:	9306      	str	r3, [sp, #24]
90012ccc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90012cd0:	9307      	str	r3, [sp, #28]
90012cd2:	9b03      	ldr	r3, [sp, #12]
90012cd4:	f8d3 a000 	ldr.w	sl, [r3]
90012cd8:	f1ba 0f00 	cmp.w	sl, #0
90012cdc:	f000 80b3 	beq.w	90012e46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90012ce0:	4651      	mov	r1, sl
90012ce2:	a810      	add	r0, sp, #64	; 0x40
90012ce4:	f006 fb84 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012ce8:	2002      	movs	r0, #2
90012cea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
90012cee:	9b01      	ldr	r3, [sp, #4]
90012cf0:	9a06      	ldr	r2, [sp, #24]
90012cf2:	fb91 f1f0 	sdiv	r1, r1, r0
90012cf6:	189d      	adds	r5, r3, r2
90012cf8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
90012cfc:	9a07      	ldr	r2, [sp, #28]
90012cfe:	4419      	add	r1, r3
90012d00:	9b02      	ldr	r3, [sp, #8]
90012d02:	4413      	add	r3, r2
90012d04:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90012d08:	1a6d      	subs	r5, r5, r1
90012d0a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
90012d0e:	fb92 f2f0 	sdiv	r2, r2, r0
90012d12:	440a      	add	r2, r1
90012d14:	1a9b      	subs	r3, r3, r2
90012d16:	435b      	muls	r3, r3
90012d18:	fb05 3505 	mla	r5, r5, r5, r3
90012d1c:	4f4c      	ldr	r7, [pc, #304]	; (90012e50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
90012d1e:	ac10      	add	r4, sp, #64	; 0x40
90012d20:	f1b9 0f0c 	cmp.w	r9, #12
90012d24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012d28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012d2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90012d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90012d30:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
90012d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90012d38:	f04f 0303 	mov.w	r3, #3
90012d3c:	bfd8      	it	le
90012d3e:	f109 32ff 	addle.w	r2, r9, #4294967295
90012d42:	f04f 0400 	mov.w	r4, #0
90012d46:	f8cd 9000 	str.w	r9, [sp]
90012d4a:	bfcc      	ite	gt
90012d4c:	4698      	movgt	r8, r3
90012d4e:	fb92 f8f3 	sdivle	r8, r2, r3
90012d52:	1c63      	adds	r3, r4, #1
90012d54:	aa10      	add	r2, sp, #64	; 0x40
90012d56:	f004 0401 	and.w	r4, r4, #1
90012d5a:	f04f 0b00 	mov.w	fp, #0
90012d5e:	9308      	str	r3, [sp, #32]
90012d60:	9b00      	ldr	r3, [sp, #0]
90012d62:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90012d66:	fb93 f3f8 	sdiv	r3, r3, r8
90012d6a:	3404      	adds	r4, #4
90012d6c:	b29b      	uxth	r3, r3
90012d6e:	9304      	str	r3, [sp, #16]
90012d70:	9a04      	ldr	r2, [sp, #16]
90012d72:	f854 3c04 	ldr.w	r3, [r4, #-4]
90012d76:	fb13 f302 	smulbb	r3, r3, r2
90012d7a:	9a01      	ldr	r2, [sp, #4]
90012d7c:	b29b      	uxth	r3, r3
90012d7e:	1899      	adds	r1, r3, r2
90012d80:	9305      	str	r3, [sp, #20]
90012d82:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90012d86:	b209      	sxth	r1, r1
90012d88:	4299      	cmp	r1, r3
90012d8a:	db4d      	blt.n	90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d8c:	8932      	ldrh	r2, [r6, #8]
90012d8e:	4413      	add	r3, r2
90012d90:	b21b      	sxth	r3, r3
90012d92:	4299      	cmp	r1, r3
90012d94:	da48      	bge.n	90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012d96:	9b04      	ldr	r3, [sp, #16]
90012d98:	6827      	ldr	r7, [r4, #0]
90012d9a:	fb17 f703 	smulbb	r7, r7, r3
90012d9e:	9b02      	ldr	r3, [sp, #8]
90012da0:	b2bf      	uxth	r7, r7
90012da2:	18fa      	adds	r2, r7, r3
90012da4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90012da8:	b212      	sxth	r2, r2
90012daa:	429a      	cmp	r2, r3
90012dac:	db3c      	blt.n	90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012dae:	8970      	ldrh	r0, [r6, #10]
90012db0:	4403      	add	r3, r0
90012db2:	b21b      	sxth	r3, r3
90012db4:	429a      	cmp	r2, r3
90012db6:	da37      	bge.n	90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012db8:	2300      	movs	r3, #0
90012dba:	4630      	mov	r0, r6
90012dbc:	930b      	str	r3, [sp, #44]	; 0x2c
90012dbe:	ab0b      	add	r3, sp, #44	; 0x2c
90012dc0:	f7ff ff36 	bl	90012c30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90012dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012dc6:	b37a      	cbz	r2, 90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012dc8:	4552      	cmp	r2, sl
90012dca:	d02d      	beq.n	90012e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90012dcc:	4611      	mov	r1, r2
90012dce:	a80e      	add	r0, sp, #56	; 0x38
90012dd0:	9209      	str	r2, [sp, #36]	; 0x24
90012dd2:	f006 fb0d 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012dd6:	f04f 0e02 	mov.w	lr, #2
90012dda:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
90012dde:	9a06      	ldr	r2, [sp, #24]
90012de0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90012de4:	9b01      	ldr	r3, [sp, #4]
90012de6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
90012dea:	4413      	add	r3, r2
90012dec:	9a07      	ldr	r2, [sp, #28]
90012dee:	fb91 f1fe 	sdiv	r1, r1, lr
90012df2:	fb9c fcfe 	sdiv	ip, ip, lr
90012df6:	4401      	add	r1, r0
90012df8:	1a58      	subs	r0, r3, r1
90012dfa:	9b02      	ldr	r3, [sp, #8]
90012dfc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90012e00:	4413      	add	r3, r2
90012e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
90012e04:	448c      	add	ip, r1
90012e06:	eba3 030c 	sub.w	r3, r3, ip
90012e0a:	435b      	muls	r3, r3
90012e0c:	fb00 3300 	mla	r3, r0, r0, r3
90012e10:	42ab      	cmp	r3, r5
90012e12:	d208      	bcs.n	90012e26 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90012e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
90012e16:	461d      	mov	r5, r3
90012e18:	9803      	ldr	r0, [sp, #12]
90012e1a:	6001      	str	r1, [r0, #0]
90012e1c:	992a      	ldr	r1, [sp, #168]	; 0xa8
90012e1e:	9805      	ldr	r0, [sp, #20]
90012e20:	8008      	strh	r0, [r1, #0]
90012e22:	992b      	ldr	r1, [sp, #172]	; 0xac
90012e24:	800f      	strh	r7, [r1, #0]
90012e26:	4692      	mov	sl, r2
90012e28:	f10b 0b01 	add.w	fp, fp, #1
90012e2c:	3408      	adds	r4, #8
90012e2e:	f1bb 0f04 	cmp.w	fp, #4
90012e32:	d19d      	bne.n	90012d70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
90012e34:	9b00      	ldr	r3, [sp, #0]
90012e36:	9c08      	ldr	r4, [sp, #32]
90012e38:	444b      	add	r3, r9
90012e3a:	4544      	cmp	r4, r8
90012e3c:	9300      	str	r3, [sp, #0]
90012e3e:	d188      	bne.n	90012d52 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90012e40:	b021      	add	sp, #132	; 0x84
90012e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012e46:	f04f 35ff 	mov.w	r5, #4294967295
90012e4a:	e767      	b.n	90012d1c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
90012e4c:	240281ec 	.word	0x240281ec
90012e50:	900287b4 	.word	0x900287b4

90012e54 <_ZN8touchgfx4RectaNERKS0_>:
90012e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012e58:	f9b1 7000 	ldrsh.w	r7, [r1]
90012e5c:	888c      	ldrh	r4, [r1, #4]
90012e5e:	f9b0 9000 	ldrsh.w	r9, [r0]
90012e62:	443c      	add	r4, r7
90012e64:	b2a4      	uxth	r4, r4
90012e66:	fa0f f884 	sxth.w	r8, r4
90012e6a:	45c1      	cmp	r9, r8
90012e6c:	da2f      	bge.n	90012ece <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012e6e:	8882      	ldrh	r2, [r0, #4]
90012e70:	444a      	add	r2, r9
90012e72:	b292      	uxth	r2, r2
90012e74:	fa0f fe82 	sxth.w	lr, r2
90012e78:	4577      	cmp	r7, lr
90012e7a:	da28      	bge.n	90012ece <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012e7c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90012e80:	88cb      	ldrh	r3, [r1, #6]
90012e82:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90012e86:	442b      	add	r3, r5
90012e88:	b21b      	sxth	r3, r3
90012e8a:	429e      	cmp	r6, r3
90012e8c:	da1f      	bge.n	90012ece <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012e8e:	88c3      	ldrh	r3, [r0, #6]
90012e90:	4433      	add	r3, r6
90012e92:	b29b      	uxth	r3, r3
90012e94:	fa0f fc83 	sxth.w	ip, r3
90012e98:	4565      	cmp	r5, ip
90012e9a:	da18      	bge.n	90012ece <_ZN8touchgfx4RectaNERKS0_+0x7a>
90012e9c:	454f      	cmp	r7, r9
90012e9e:	bfb8      	it	lt
90012ea0:	464f      	movlt	r7, r9
90012ea2:	42b5      	cmp	r5, r6
90012ea4:	bfb8      	it	lt
90012ea6:	4635      	movlt	r5, r6
90012ea8:	45f0      	cmp	r8, lr
90012eaa:	bfd8      	it	le
90012eac:	4622      	movle	r2, r4
90012eae:	1bd2      	subs	r2, r2, r7
90012eb0:	8082      	strh	r2, [r0, #4]
90012eb2:	884a      	ldrh	r2, [r1, #2]
90012eb4:	88c9      	ldrh	r1, [r1, #6]
90012eb6:	8007      	strh	r7, [r0, #0]
90012eb8:	440a      	add	r2, r1
90012eba:	8045      	strh	r5, [r0, #2]
90012ebc:	b292      	uxth	r2, r2
90012ebe:	b211      	sxth	r1, r2
90012ec0:	458c      	cmp	ip, r1
90012ec2:	bfa8      	it	ge
90012ec4:	4613      	movge	r3, r2
90012ec6:	1b5b      	subs	r3, r3, r5
90012ec8:	80c3      	strh	r3, [r0, #6]
90012eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012ece:	2300      	movs	r3, #0
90012ed0:	8003      	strh	r3, [r0, #0]
90012ed2:	8043      	strh	r3, [r0, #2]
90012ed4:	8083      	strh	r3, [r0, #4]
90012ed6:	80c3      	strh	r3, [r0, #6]
90012ed8:	e7f7      	b.n	90012eca <_ZN8touchgfx4RectaNERKS0_+0x76>

90012eda <_ZNK8touchgfx4Rect7isEmptyEv>:
90012eda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90012ede:	2b00      	cmp	r3, #0
90012ee0:	dd06      	ble.n	90012ef0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90012ee2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90012ee6:	2800      	cmp	r0, #0
90012ee8:	bfcc      	ite	gt
90012eea:	2000      	movgt	r0, #0
90012eec:	2001      	movle	r0, #1
90012eee:	4770      	bx	lr
90012ef0:	2001      	movs	r0, #1
90012ef2:	4770      	bx	lr

90012ef4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90012ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012ef8:	2300      	movs	r3, #0
90012efa:	4604      	mov	r4, r0
90012efc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90012efe:	8003      	strh	r3, [r0, #0]
90012f00:	8043      	strh	r3, [r0, #2]
90012f02:	8083      	strh	r3, [r0, #4]
90012f04:	80c3      	strh	r3, [r0, #6]
90012f06:	2d00      	cmp	r5, #0
90012f08:	d040      	beq.n	90012f8c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
90012f0a:	1d28      	adds	r0, r5, #4
90012f0c:	f7ff ffe5 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90012f10:	b988      	cbnz	r0, 90012f36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90012f12:	4620      	mov	r0, r4
90012f14:	f7ff ffe1 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90012f18:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90012f1c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90012f20:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90012f24:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90012f28:	b138      	cbz	r0, 90012f3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90012f2a:	8022      	strh	r2, [r4, #0]
90012f2c:	8063      	strh	r3, [r4, #2]
90012f2e:	f8a4 e004 	strh.w	lr, [r4, #4]
90012f32:	f8a4 c006 	strh.w	ip, [r4, #6]
90012f36:	69ad      	ldr	r5, [r5, #24]
90012f38:	e7e5      	b.n	90012f06 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90012f3a:	f9b4 0000 	ldrsh.w	r0, [r4]
90012f3e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90012f42:	4290      	cmp	r0, r2
90012f44:	4607      	mov	r7, r0
90012f46:	f8b4 8004 	ldrh.w	r8, [r4, #4]
90012f4a:	460e      	mov	r6, r1
90012f4c:	bfa8      	it	ge
90012f4e:	4617      	movge	r7, r2
90012f50:	4299      	cmp	r1, r3
90012f52:	4472      	add	r2, lr
90012f54:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90012f58:	bfa8      	it	ge
90012f5a:	461e      	movge	r6, r3
90012f5c:	4440      	add	r0, r8
90012f5e:	4471      	add	r1, lr
90012f60:	4463      	add	r3, ip
90012f62:	b200      	sxth	r0, r0
90012f64:	8027      	strh	r7, [r4, #0]
90012f66:	b212      	sxth	r2, r2
90012f68:	8066      	strh	r6, [r4, #2]
90012f6a:	b209      	sxth	r1, r1
90012f6c:	b21b      	sxth	r3, r3
90012f6e:	4290      	cmp	r0, r2
90012f70:	bfac      	ite	ge
90012f72:	ebc7 0200 	rsbge	r2, r7, r0
90012f76:	ebc7 0202 	rsblt	r2, r7, r2
90012f7a:	4299      	cmp	r1, r3
90012f7c:	bfac      	ite	ge
90012f7e:	ebc6 0301 	rsbge	r3, r6, r1
90012f82:	ebc6 0303 	rsblt	r3, r6, r3
90012f86:	80a2      	strh	r2, [r4, #4]
90012f88:	80e3      	strh	r3, [r4, #6]
90012f8a:	e7d4      	b.n	90012f36 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90012f8c:	4620      	mov	r0, r4
90012f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90012f92 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90012f92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90012f96:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90012f9a:	b383      	cbz	r3, 90012ffe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012f9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
90012f9e:	b374      	cbz	r4, 90012ffe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90012fa0:	f9b1 5000 	ldrsh.w	r5, [r1]
90012fa4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90012fa8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90012fac:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90012fb0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90012fb4:	b303      	cbz	r3, 90012ff8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012fb6:	4668      	mov	r0, sp
90012fb8:	1d21      	adds	r1, r4, #4
90012fba:	f8ad 5000 	strh.w	r5, [sp]
90012fbe:	f8ad 6002 	strh.w	r6, [sp, #2]
90012fc2:	f8ad 7004 	strh.w	r7, [sp, #4]
90012fc6:	f8ad 8006 	strh.w	r8, [sp, #6]
90012fca:	f7ff ff43 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90012fce:	4668      	mov	r0, sp
90012fd0:	f7ff ff83 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90012fd4:	b980      	cbnz	r0, 90012ff8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90012fd6:	f8bd 3000 	ldrh.w	r3, [sp]
90012fda:	4669      	mov	r1, sp
90012fdc:	88a2      	ldrh	r2, [r4, #4]
90012fde:	4620      	mov	r0, r4
90012fe0:	1a9b      	subs	r3, r3, r2
90012fe2:	88e2      	ldrh	r2, [r4, #6]
90012fe4:	f8ad 3000 	strh.w	r3, [sp]
90012fe8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90012fec:	1a9b      	subs	r3, r3, r2
90012fee:	f8ad 3002 	strh.w	r3, [sp, #2]
90012ff2:	6823      	ldr	r3, [r4, #0]
90012ff4:	689b      	ldr	r3, [r3, #8]
90012ff6:	4798      	blx	r3
90012ff8:	69a4      	ldr	r4, [r4, #24]
90012ffa:	2c00      	cmp	r4, #0
90012ffc:	d1d8      	bne.n	90012fb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90012ffe:	b002      	add	sp, #8
90013000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90013004 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90013004:	b573      	push	{r0, r1, r4, r5, r6, lr}
90013006:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
9001300a:	460d      	mov	r5, r1
9001300c:	4616      	mov	r6, r2
9001300e:	b323      	cbz	r3, 9001305a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90013010:	6a84      	ldr	r4, [r0, #40]	; 0x28
90013012:	b314      	cbz	r4, 9001305a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90013014:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90013018:	b1eb      	cbz	r3, 90013056 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001301a:	6828      	ldr	r0, [r5, #0]
9001301c:	466b      	mov	r3, sp
9001301e:	6869      	ldr	r1, [r5, #4]
90013020:	c303      	stmia	r3!, {r0, r1}
90013022:	4668      	mov	r0, sp
90013024:	1d21      	adds	r1, r4, #4
90013026:	f7ff ff15 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001302a:	4668      	mov	r0, sp
9001302c:	f7ff ff55 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90013030:	b988      	cbnz	r0, 90013056 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90013032:	f8bd 3000 	ldrh.w	r3, [sp]
90013036:	4669      	mov	r1, sp
90013038:	88a2      	ldrh	r2, [r4, #4]
9001303a:	4620      	mov	r0, r4
9001303c:	1a9b      	subs	r3, r3, r2
9001303e:	88e2      	ldrh	r2, [r4, #6]
90013040:	f8ad 3000 	strh.w	r3, [sp]
90013044:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013048:	1a9b      	subs	r3, r3, r2
9001304a:	4632      	mov	r2, r6
9001304c:	f8ad 3002 	strh.w	r3, [sp, #2]
90013050:	6823      	ldr	r3, [r4, #0]
90013052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90013054:	4798      	blx	r3
90013056:	69a4      	ldr	r4, [r4, #24]
90013058:	e7db      	b.n	90013012 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
9001305a:	b002      	add	sp, #8
9001305c:	bd70      	pop	{r4, r5, r6, pc}

9001305e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
9001305e:	6803      	ldr	r3, [r0, #0]
90013060:	b513      	push	{r0, r1, r4, lr}
90013062:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90013066:	2300      	movs	r3, #0
90013068:	e9cd 3300 	strd	r3, r3, [sp]
9001306c:	466b      	mov	r3, sp
9001306e:	47a0      	blx	r4
90013070:	b002      	add	sp, #8
90013072:	bd10      	pop	{r4, pc}

90013074 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90013074:	2301      	movs	r3, #1
90013076:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
9001307a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001307e:	4770      	bx	lr

90013080 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90013080:	2301      	movs	r3, #1
90013082:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90013086:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
9001308a:	4770      	bx	lr

9001308c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
9001308c:	6843      	ldr	r3, [r0, #4]
9001308e:	2201      	movs	r2, #1
90013090:	725a      	strb	r2, [r3, #9]
90013092:	6840      	ldr	r0, [r0, #4]
90013094:	6803      	ldr	r3, [r0, #0]
90013096:	691b      	ldr	r3, [r3, #16]
90013098:	4718      	bx	r3

9001309a <_ZN8touchgfx3HAL8flushDMAEv>:
9001309a:	6840      	ldr	r0, [r0, #4]
9001309c:	6803      	ldr	r3, [r0, #0]
9001309e:	689b      	ldr	r3, [r3, #8]
900130a0:	4718      	bx	r3

900130a2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
900130a2:	b530      	push	{r4, r5, lr}
900130a4:	b08b      	sub	sp, #44	; 0x2c
900130a6:	6804      	ldr	r4, [r0, #0]
900130a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
900130ac:	9509      	str	r5, [sp, #36]	; 0x24
900130ae:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
900130b2:	9508      	str	r5, [sp, #32]
900130b4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
900130b8:	9507      	str	r5, [sp, #28]
900130ba:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
900130be:	9506      	str	r5, [sp, #24]
900130c0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
900130c4:	9505      	str	r5, [sp, #20]
900130c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
900130ca:	9504      	str	r5, [sp, #16]
900130cc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
900130d0:	9503      	str	r5, [sp, #12]
900130d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
900130d6:	9502      	str	r5, [sp, #8]
900130d8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
900130dc:	e9cd 3500 	strd	r3, r5, [sp]
900130e0:	4613      	mov	r3, r2
900130e2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
900130e4:	2200      	movs	r2, #0
900130e6:	47a0      	blx	r4
900130e8:	b00b      	add	sp, #44	; 0x2c
900130ea:	bd30      	pop	{r4, r5, pc}

900130ec <_ZN8touchgfx3HAL10beginFrameEv>:
900130ec:	4b04      	ldr	r3, [pc, #16]	; (90013100 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
900130ee:	781b      	ldrb	r3, [r3, #0]
900130f0:	b123      	cbz	r3, 900130fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
900130f2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
900130f6:	f080 0001 	eor.w	r0, r0, #1
900130fa:	4770      	bx	lr
900130fc:	2001      	movs	r0, #1
900130fe:	4770      	bx	lr
90013100:	240281ea 	.word	0x240281ea

90013104 <_ZN8touchgfx3HAL8endFrameEv>:
90013104:	b510      	push	{r4, lr}
90013106:	4604      	mov	r4, r0
90013108:	6840      	ldr	r0, [r0, #4]
9001310a:	6803      	ldr	r3, [r0, #0]
9001310c:	689b      	ldr	r3, [r3, #8]
9001310e:	4798      	blx	r3
90013110:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90013114:	b113      	cbz	r3, 9001311c <_ZN8touchgfx3HAL8endFrameEv+0x18>
90013116:	2301      	movs	r3, #1
90013118:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
9001311c:	bd10      	pop	{r4, pc}

9001311e <_ZN8touchgfx3HAL10initializeEv>:
9001311e:	b510      	push	{r4, lr}
90013120:	4604      	mov	r4, r0
90013122:	f7ee fc17 	bl	90001954 <_ZN8touchgfx10OSWrappers10initializeEv>
90013126:	f7ed f9fb 	bl	90000520 <_ZN8touchgfx4GPIO4initEv>
9001312a:	6860      	ldr	r0, [r4, #4]
9001312c:	6803      	ldr	r3, [r0, #0]
9001312e:	68db      	ldr	r3, [r3, #12]
90013130:	4798      	blx	r3
90013132:	68e0      	ldr	r0, [r4, #12]
90013134:	6803      	ldr	r3, [r0, #0]
90013136:	689b      	ldr	r3, [r3, #8]
90013138:	4798      	blx	r3
9001313a:	6823      	ldr	r3, [r4, #0]
9001313c:	4620      	mov	r0, r4
9001313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90013140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013144:	4718      	bx	r3
	...

90013148 <_ZN8touchgfx3HAL4tickEv>:
90013148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
9001314a:	6803      	ldr	r3, [r0, #0]
9001314c:	4604      	mov	r4, r0
9001314e:	4d5b      	ldr	r5, [pc, #364]	; (900132bc <_ZN8touchgfx3HAL4tickEv+0x174>)
90013150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90013154:	4798      	blx	r3
90013156:	2800      	cmp	r0, #0
90013158:	f000 8095 	beq.w	90013286 <_ZN8touchgfx3HAL4tickEv+0x13e>
9001315c:	2001      	movs	r0, #1
9001315e:	2600      	movs	r6, #0
90013160:	f7ed fa08 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90013164:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90013168:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
9001316c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90013170:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90013174:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90013178:	b133      	cbz	r3, 90013188 <_ZN8touchgfx3HAL4tickEv+0x40>
9001317a:	6823      	ldr	r3, [r4, #0]
9001317c:	4620      	mov	r0, r4
9001317e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90013182:	4798      	blx	r3
90013184:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90013188:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
9001318c:	2601      	movs	r6, #1
9001318e:	6862      	ldr	r2, [r4, #4]
90013190:	f083 0301 	eor.w	r3, r3, #1
90013194:	702e      	strb	r6, [r5, #0]
90013196:	7253      	strb	r3, [r2, #9]
90013198:	f005 f800 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
9001319c:	6803      	ldr	r3, [r0, #0]
9001319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900131a0:	4798      	blx	r3
900131a2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
900131a6:	b90b      	cbnz	r3, 900131ac <_ZN8touchgfx3HAL4tickEv+0x64>
900131a8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
900131ac:	f004 fff6 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
900131b0:	6803      	ldr	r3, [r0, #0]
900131b2:	695b      	ldr	r3, [r3, #20]
900131b4:	4798      	blx	r3
900131b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
900131b8:	6803      	ldr	r3, [r0, #0]
900131ba:	691b      	ldr	r3, [r3, #16]
900131bc:	4798      	blx	r3
900131be:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
900131c2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
900131c6:	3b01      	subs	r3, #1
900131c8:	b2db      	uxtb	r3, r3
900131ca:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
900131ce:	b10a      	cbz	r2, 900131d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
900131d0:	2b00      	cmp	r3, #0
900131d2:	d1eb      	bne.n	900131ac <_ZN8touchgfx3HAL4tickEv+0x64>
900131d4:	4a3a      	ldr	r2, [pc, #232]	; (900132c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
900131d6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
900131da:	7813      	ldrb	r3, [r2, #0]
900131dc:	3301      	adds	r3, #1
900131de:	b25b      	sxtb	r3, r3
900131e0:	4299      	cmp	r1, r3
900131e2:	7013      	strb	r3, [r2, #0]
900131e4:	dc10      	bgt.n	90013208 <_ZN8touchgfx3HAL4tickEv+0xc0>
900131e6:	2300      	movs	r3, #0
900131e8:	68e0      	ldr	r0, [r4, #12]
900131ea:	a902      	add	r1, sp, #8
900131ec:	7013      	strb	r3, [r2, #0]
900131ee:	aa03      	add	r2, sp, #12
900131f0:	6803      	ldr	r3, [r0, #0]
900131f2:	68db      	ldr	r3, [r3, #12]
900131f4:	4798      	blx	r3
900131f6:	6823      	ldr	r3, [r4, #0]
900131f8:	2800      	cmp	r0, #0
900131fa:	d050      	beq.n	9001329e <_ZN8touchgfx3HAL4tickEv+0x156>
900131fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90013200:	4620      	mov	r0, r4
90013202:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90013206:	4798      	blx	r3
90013208:	2300      	movs	r3, #0
9001320a:	6960      	ldr	r0, [r4, #20]
9001320c:	f88d 3007 	strb.w	r3, [sp, #7]
90013210:	b158      	cbz	r0, 9001322a <_ZN8touchgfx3HAL4tickEv+0xe2>
90013212:	6803      	ldr	r3, [r0, #0]
90013214:	f10d 0107 	add.w	r1, sp, #7
90013218:	68db      	ldr	r3, [r3, #12]
9001321a:	4798      	blx	r3
9001321c:	b128      	cbz	r0, 9001322a <_ZN8touchgfx3HAL4tickEv+0xe2>
9001321e:	6da0      	ldr	r0, [r4, #88]	; 0x58
90013220:	f89d 1007 	ldrb.w	r1, [sp, #7]
90013224:	6803      	ldr	r3, [r0, #0]
90013226:	68db      	ldr	r3, [r3, #12]
90013228:	4798      	blx	r3
9001322a:	f104 001c 	add.w	r0, r4, #28
9001322e:	f013 fe5b 	bl	90026ee8 <_ZN8touchgfx8Gestures4tickEv>
90013232:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90013236:	b30b      	cbz	r3, 9001327c <_ZN8touchgfx3HAL4tickEv+0x134>
90013238:	6920      	ldr	r0, [r4, #16]
9001323a:	6803      	ldr	r3, [r0, #0]
9001323c:	691b      	ldr	r3, [r3, #16]
9001323e:	4798      	blx	r3
90013240:	6f23      	ldr	r3, [r4, #112]	; 0x70
90013242:	4606      	mov	r6, r0
90013244:	b903      	cbnz	r3, 90013248 <_ZN8touchgfx3HAL4tickEv+0x100>
90013246:	6720      	str	r0, [r4, #112]	; 0x70
90013248:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001324a:	4a1e      	ldr	r2, [pc, #120]	; (900132c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
9001324c:	1af3      	subs	r3, r6, r3
9001324e:	4293      	cmp	r3, r2
90013250:	d914      	bls.n	9001327c <_ZN8touchgfx3HAL4tickEv+0x134>
90013252:	6920      	ldr	r0, [r4, #16]
90013254:	6803      	ldr	r3, [r0, #0]
90013256:	699b      	ldr	r3, [r3, #24]
90013258:	4798      	blx	r3
9001325a:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001325c:	2264      	movs	r2, #100	; 0x64
9001325e:	1af3      	subs	r3, r6, r3
90013260:	fbb3 f3f2 	udiv	r3, r3, r2
90013264:	fbb0 f0f3 	udiv	r0, r0, r3
90013268:	2800      	cmp	r0, #0
9001326a:	dc1d      	bgt.n	900132a8 <_ZN8touchgfx3HAL4tickEv+0x160>
9001326c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90013270:	6920      	ldr	r0, [r4, #16]
90013272:	2100      	movs	r1, #0
90013274:	6803      	ldr	r3, [r0, #0]
90013276:	69db      	ldr	r3, [r3, #28]
90013278:	4798      	blx	r3
9001327a:	6726      	str	r6, [r4, #112]	; 0x70
9001327c:	f004 ff8e 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
90013280:	6803      	ldr	r3, [r0, #0]
90013282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013284:	4798      	blx	r3
90013286:	6823      	ldr	r3, [r4, #0]
90013288:	4620      	mov	r0, r4
9001328a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9001328e:	4798      	blx	r3
90013290:	2001      	movs	r0, #1
90013292:	f7ed f9a3 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90013296:	2300      	movs	r3, #0
90013298:	702b      	strb	r3, [r5, #0]
9001329a:	b004      	add	sp, #16
9001329c:	bd70      	pop	{r4, r5, r6, pc}
9001329e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900132a2:	4620      	mov	r0, r4
900132a4:	4798      	blx	r3
900132a6:	e7af      	b.n	90013208 <_ZN8touchgfx3HAL4tickEv+0xc0>
900132a8:	2863      	cmp	r0, #99	; 0x63
900132aa:	bfcb      	itete	gt
900132ac:	2300      	movgt	r3, #0
900132ae:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
900132b2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
900132b6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
900132ba:	e7d9      	b.n	90013270 <_ZN8touchgfx3HAL4tickEv+0x128>
900132bc:	240281f0 	.word	0x240281f0
900132c0:	240281f1 	.word	0x240281f1
900132c4:	05f5e100 	.word	0x05f5e100

900132c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
900132c8:	f7ee bb76 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

900132cc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
900132cc:	6581      	str	r1, [r0, #88]	; 0x58
900132ce:	301c      	adds	r0, #28
900132d0:	f013 be08 	b.w	90026ee4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

900132d4 <_ZN8touchgfx3HAL5touchEll>:
900132d4:	b530      	push	{r4, r5, lr}
900132d6:	b087      	sub	sp, #28
900132d8:	4604      	mov	r4, r0
900132da:	a804      	add	r0, sp, #16
900132dc:	e9cd 1204 	strd	r1, r2, [sp, #16]
900132e0:	f004 fda0 	bl	90017e24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
900132e4:	9b04      	ldr	r3, [sp, #16]
900132e6:	a906      	add	r1, sp, #24
900132e8:	a803      	add	r0, sp, #12
900132ea:	f8ad 300c 	strh.w	r3, [sp, #12]
900132ee:	9b05      	ldr	r3, [sp, #20]
900132f0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
900132f4:	f004 fde8 	bl	90017ec8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
900132f8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
900132fc:	f104 001c 	add.w	r0, r4, #28
90013300:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90013304:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90013308:	b189      	cbz	r1, 9001332e <_ZN8touchgfx3HAL5touchEll+0x5a>
9001330a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
9001330e:	9300      	str	r3, [sp, #0]
90013310:	4613      	mov	r3, r2
90013312:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90013316:	462a      	mov	r2, r5
90013318:	f013 fdf4 	bl	90026f04 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
9001331c:	b128      	cbz	r0, 9001332a <_ZN8touchgfx3HAL5touchEll+0x56>
9001331e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90013322:	65e3      	str	r3, [r4, #92]	; 0x5c
90013324:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90013328:	6623      	str	r3, [r4, #96]	; 0x60
9001332a:	b007      	add	sp, #28
9001332c:	bd30      	pop	{r4, r5, pc}
9001332e:	f013 fe29 	bl	90026f84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90013332:	2301      	movs	r3, #1
90013334:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90013338:	e7f1      	b.n	9001331e <_ZN8touchgfx3HAL5touchEll+0x4a>

9001333a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
9001333a:	b510      	push	{r4, lr}
9001333c:	2b00      	cmp	r3, #0
9001333e:	d046      	beq.n	900133ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90013340:	ea81 0002 	eor.w	r0, r1, r2
90013344:	07c4      	lsls	r4, r0, #31
90013346:	d508      	bpl.n	9001335a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90013348:	440b      	add	r3, r1
9001334a:	3a01      	subs	r2, #1
9001334c:	428b      	cmp	r3, r1
9001334e:	d93e      	bls.n	900133ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90013350:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90013354:	f801 0b01 	strb.w	r0, [r1], #1
90013358:	e7f8      	b.n	9001334c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
9001335a:	07d0      	lsls	r0, r2, #31
9001335c:	bf42      	ittt	mi
9001335e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90013362:	f103 33ff 	addmi.w	r3, r3, #4294967295
90013366:	f801 0b01 	strbmi.w	r0, [r1], #1
9001336a:	2b01      	cmp	r3, #1
9001336c:	d911      	bls.n	90013392 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001336e:	ea81 0402 	eor.w	r4, r1, r2
90013372:	4610      	mov	r0, r2
90013374:	07a4      	lsls	r4, r4, #30
90013376:	d022      	beq.n	900133be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90013378:	f023 0401 	bic.w	r4, r3, #1
9001337c:	440c      	add	r4, r1
9001337e:	428c      	cmp	r4, r1
90013380:	4602      	mov	r2, r0
90013382:	d904      	bls.n	9001338e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90013384:	8812      	ldrh	r2, [r2, #0]
90013386:	3002      	adds	r0, #2
90013388:	f821 2b02 	strh.w	r2, [r1], #2
9001338c:	e7f7      	b.n	9001337e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
9001338e:	f003 0301 	and.w	r3, r3, #1
90013392:	f023 0003 	bic.w	r0, r3, #3
90013396:	4408      	add	r0, r1
90013398:	4288      	cmp	r0, r1
9001339a:	4614      	mov	r4, r2
9001339c:	d904      	bls.n	900133a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
9001339e:	6824      	ldr	r4, [r4, #0]
900133a0:	3204      	adds	r2, #4
900133a2:	f841 4b04 	str.w	r4, [r1], #4
900133a6:	e7f7      	b.n	90013398 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
900133a8:	f003 0303 	and.w	r3, r3, #3
900133ac:	3a01      	subs	r2, #1
900133ae:	440b      	add	r3, r1
900133b0:	428b      	cmp	r3, r1
900133b2:	d90c      	bls.n	900133ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900133b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900133b8:	f801 0b01 	strb.w	r0, [r1], #1
900133bc:	e7f8      	b.n	900133b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
900133be:	0790      	lsls	r0, r2, #30
900133c0:	d0e7      	beq.n	90013392 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900133c2:	f832 0b02 	ldrh.w	r0, [r2], #2
900133c6:	3b02      	subs	r3, #2
900133c8:	f821 0b02 	strh.w	r0, [r1], #2
900133cc:	e7e1      	b.n	90013392 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900133ce:	2001      	movs	r0, #1
900133d0:	bd10      	pop	{r4, pc}

900133d2 <_ZN8touchgfx3HAL7noTouchEv>:
900133d2:	b510      	push	{r4, lr}
900133d4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
900133d8:	4604      	mov	r4, r0
900133da:	b153      	cbz	r3, 900133f2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
900133dc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
900133e0:	2101      	movs	r1, #1
900133e2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
900133e6:	301c      	adds	r0, #28
900133e8:	f013 fdcc 	bl	90026f84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900133ec:	2300      	movs	r3, #0
900133ee:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900133f2:	bd10      	pop	{r4, pc}

900133f4 <_ZN8touchgfx8Drawable5setXYEss>:
900133f4:	b570      	push	{r4, r5, r6, lr}
900133f6:	6803      	ldr	r3, [r0, #0]
900133f8:	4604      	mov	r4, r0
900133fa:	4615      	mov	r5, r2
900133fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900133fe:	4798      	blx	r3
90013400:	6823      	ldr	r3, [r4, #0]
90013402:	4629      	mov	r1, r5
90013404:	4620      	mov	r0, r4
90013406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001340c:	4718      	bx	r3
	...

90013410 <_ZN8touchgfx3HAL3lcdEv>:
90013410:	4b04      	ldr	r3, [pc, #16]	; (90013424 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90013412:	681b      	ldr	r3, [r3, #0]
90013414:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90013418:	b10a      	cbz	r2, 9001341e <_ZN8touchgfx3HAL3lcdEv+0xe>
9001341a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001341c:	b900      	cbnz	r0, 90013420 <_ZN8touchgfx3HAL3lcdEv+0x10>
9001341e:	6898      	ldr	r0, [r3, #8]
90013420:	4770      	bx	lr
90013422:	bf00      	nop
90013424:	240281ec 	.word	0x240281ec

90013428 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90013428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001342c:	b085      	sub	sp, #20
9001342e:	4604      	mov	r4, r0
90013430:	2000      	movs	r0, #0
90013432:	4699      	mov	r9, r3
90013434:	ad04      	add	r5, sp, #16
90013436:	460f      	mov	r7, r1
90013438:	4690      	mov	r8, r2
9001343a:	f845 0d04 	str.w	r0, [r5, #-4]!
9001343e:	69a0      	ldr	r0, [r4, #24]
90013440:	6806      	ldr	r6, [r0, #0]
90013442:	9501      	str	r5, [sp, #4]
90013444:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90013448:	9500      	str	r5, [sp, #0]
9001344a:	6835      	ldr	r5, [r6, #0]
9001344c:	47a8      	blx	r5
9001344e:	4d10      	ldr	r5, [pc, #64]	; (90013490 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90013450:	4606      	mov	r6, r0
90013452:	f8a5 9000 	strh.w	r9, [r5]
90013456:	f7ff ffdb 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
9001345a:	6803      	ldr	r3, [r0, #0]
9001345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001345e:	4798      	blx	r3
90013460:	b128      	cbz	r0, 9001346e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90013462:	2801      	cmp	r0, #1
90013464:	d00b      	beq.n	9001347e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90013466:	4630      	mov	r0, r6
90013468:	b005      	add	sp, #20
9001346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001346e:	882b      	ldrh	r3, [r5, #0]
90013470:	fb08 7203 	mla	r2, r8, r3, r7
90013474:	9b03      	ldr	r3, [sp, #12]
90013476:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
9001347a:	63e3      	str	r3, [r4, #60]	; 0x3c
9001347c:	e7f3      	b.n	90013466 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
9001347e:	882a      	ldrh	r2, [r5, #0]
90013480:	9b03      	ldr	r3, [sp, #12]
90013482:	fb08 7202 	mla	r2, r8, r2, r7
90013486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001348a:	1a9a      	subs	r2, r3, r2
9001348c:	63e2      	str	r2, [r4, #60]	; 0x3c
9001348e:	e7ea      	b.n	90013466 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90013490:	240281e6 	.word	0x240281e6

90013494 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90013494:	b5f0      	push	{r4, r5, r6, r7, lr}
90013496:	b08b      	sub	sp, #44	; 0x2c
90013498:	4617      	mov	r7, r2
9001349a:	4604      	mov	r4, r0
9001349c:	460e      	mov	r6, r1
9001349e:	461d      	mov	r5, r3
900134a0:	f7ff ffb6 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
900134a4:	6803      	ldr	r3, [r0, #0]
900134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900134a8:	4798      	blx	r3
900134aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900134ae:	9007      	str	r0, [sp, #28]
900134b0:	4631      	mov	r1, r6
900134b2:	6822      	ldr	r2, [r4, #0]
900134b4:	e9cd 0308 	strd	r0, r3, [sp, #32]
900134b8:	4b0c      	ldr	r3, [pc, #48]	; (900134ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
900134ba:	4620      	mov	r0, r4
900134bc:	881b      	ldrh	r3, [r3, #0]
900134be:	9306      	str	r3, [sp, #24]
900134c0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
900134c4:	9305      	str	r3, [sp, #20]
900134c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
900134ca:	9304      	str	r3, [sp, #16]
900134cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900134d0:	9303      	str	r3, [sp, #12]
900134d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900134d6:	9302      	str	r3, [sp, #8]
900134d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900134dc:	e9cd 5300 	strd	r5, r3, [sp]
900134e0:	463b      	mov	r3, r7
900134e2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
900134e4:	2200      	movs	r2, #0
900134e6:	47a8      	blx	r5
900134e8:	b00b      	add	sp, #44	; 0x2c
900134ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
900134ec:	240281e6 	.word	0x240281e6

900134f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
900134f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900134f4:	4698      	mov	r8, r3
900134f6:	6803      	ldr	r3, [r0, #0]
900134f8:	b08b      	sub	sp, #44	; 0x2c
900134fa:	4617      	mov	r7, r2
900134fc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
900134fe:	460e      	mov	r6, r1
90013500:	4b13      	ldr	r3, [pc, #76]	; (90013550 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90013502:	4604      	mov	r4, r0
90013504:	f8b3 9000 	ldrh.w	r9, [r3]
90013508:	f7ff ff82 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
9001350c:	6803      	ldr	r3, [r0, #0]
9001350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013510:	4798      	blx	r3
90013512:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90013516:	2200      	movs	r2, #0
90013518:	4631      	mov	r1, r6
9001351a:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001351e:	2302      	movs	r3, #2
90013520:	4620      	mov	r0, r4
90013522:	e9cd 9306 	strd	r9, r3, [sp, #24]
90013526:	2301      	movs	r3, #1
90013528:	9305      	str	r3, [sp, #20]
9001352a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001352e:	9304      	str	r3, [sp, #16]
90013530:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90013534:	9303      	str	r3, [sp, #12]
90013536:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
9001353a:	9302      	str	r3, [sp, #8]
9001353c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013540:	e9cd 8300 	strd	r8, r3, [sp]
90013544:	463b      	mov	r3, r7
90013546:	47a8      	blx	r5
90013548:	b00b      	add	sp, #44	; 0x2c
9001354a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001354e:	bf00      	nop
90013550:	240281e6 	.word	0x240281e6

90013554 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90013554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90013558:	4698      	mov	r8, r3
9001355a:	6803      	ldr	r3, [r0, #0]
9001355c:	b087      	sub	sp, #28
9001355e:	460e      	mov	r6, r1
90013560:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90013562:	4617      	mov	r7, r2
90013564:	4b0f      	ldr	r3, [pc, #60]	; (900135a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90013566:	4604      	mov	r4, r0
90013568:	f8b3 9000 	ldrh.w	r9, [r3]
9001356c:	f7ff ff50 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90013570:	6803      	ldr	r3, [r0, #0]
90013572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013574:	4798      	blx	r3
90013576:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
9001357a:	463a      	mov	r2, r7
9001357c:	4631      	mov	r1, r6
9001357e:	f8cd 900c 	str.w	r9, [sp, #12]
90013582:	e9cd 0304 	strd	r0, r3, [sp, #16]
90013586:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
9001358a:	4620      	mov	r0, r4
9001358c:	9302      	str	r3, [sp, #8]
9001358e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90013592:	9301      	str	r3, [sp, #4]
90013594:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90013598:	9300      	str	r3, [sp, #0]
9001359a:	4643      	mov	r3, r8
9001359c:	47a8      	blx	r5
9001359e:	b007      	add	sp, #28
900135a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900135a4:	240281e6 	.word	0x240281e6

900135a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
900135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900135ac:	4604      	mov	r4, r0
900135ae:	b08f      	sub	sp, #60	; 0x3c
900135b0:	4610      	mov	r0, r2
900135b2:	460d      	mov	r5, r1
900135b4:	4691      	mov	r9, r2
900135b6:	461e      	mov	r6, r3
900135b8:	f007 fed6 	bl	9001b368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
900135bc:	2800      	cmp	r0, #0
900135be:	f000 809d 	beq.w	900136fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
900135c2:	6823      	ldr	r3, [r4, #0]
900135c4:	4620      	mov	r0, r4
900135c6:	f8df b198 	ldr.w	fp, [pc, #408]	; 90013760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
900135ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
900135ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900135d0:	4798      	blx	r3
900135d2:	6823      	ldr	r3, [r4, #0]
900135d4:	4620      	mov	r0, r4
900135d6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90013764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
900135da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900135dc:	4798      	blx	r3
900135de:	f8bb 3000 	ldrh.w	r3, [fp]
900135e2:	4f5c      	ldr	r7, [pc, #368]	; (90013754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900135e4:	9301      	str	r3, [sp, #4]
900135e6:	f8ba 3000 	ldrh.w	r3, [sl]
900135ea:	f828 9d1c 	strh.w	r9, [r8, #-28]!
900135ee:	4640      	mov	r0, r8
900135f0:	9302      	str	r3, [sp, #8]
900135f2:	883b      	ldrh	r3, [r7, #0]
900135f4:	9303      	str	r3, [sp, #12]
900135f6:	4b58      	ldr	r3, [pc, #352]	; (90013758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900135f8:	881a      	ldrh	r2, [r3, #0]
900135fa:	9305      	str	r3, [sp, #20]
900135fc:	9204      	str	r2, [sp, #16]
900135fe:	f007 ff47 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
90013602:	8038      	strh	r0, [r7, #0]
90013604:	4640      	mov	r0, r8
90013606:	f007 ff77 	bl	9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001360a:	9b05      	ldr	r3, [sp, #20]
9001360c:	b280      	uxth	r0, r0
9001360e:	8018      	strh	r0, [r3, #0]
90013610:	4b52      	ldr	r3, [pc, #328]	; (9001375c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90013612:	781b      	ldrb	r3, [r3, #0]
90013614:	2b00      	cmp	r3, #0
90013616:	d174      	bne.n	90013702 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90013618:	883b      	ldrh	r3, [r7, #0]
9001361a:	f8aa 0000 	strh.w	r0, [sl]
9001361e:	f8ab 3000 	strh.w	r3, [fp]
90013622:	4648      	mov	r0, r9
90013624:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90013628:	f007 fe9e 	bl	9001b368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001362c:	2200      	movs	r2, #0
9001362e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90013632:	4611      	mov	r1, r2
90013634:	4628      	mov	r0, r5
90013636:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
9001363a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001363e:	f7ff fed9 	bl	900133f4 <_ZN8touchgfx8Drawable5setXYEss>
90013642:	2301      	movs	r3, #1
90013644:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90013648:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
9001364c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90013650:	2b00      	cmp	r3, #0
90013652:	dd5c      	ble.n	9001370e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90013654:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90013658:	2b00      	cmp	r3, #0
9001365a:	dd58      	ble.n	9001370e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
9001365c:	462a      	mov	r2, r5
9001365e:	ab0a      	add	r3, sp, #40	; 0x28
90013660:	f852 0f04 	ldr.w	r0, [r2, #4]!
90013664:	6851      	ldr	r1, [r2, #4]
90013666:	c303      	stmia	r3!, {r0, r1}
90013668:	4631      	mov	r1, r6
9001366a:	a80a      	add	r0, sp, #40	; 0x28
9001366c:	f7ff fbf2 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90013670:	4b38      	ldr	r3, [pc, #224]	; (90013754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90013672:	2100      	movs	r1, #0
90013674:	f9b3 2000 	ldrsh.w	r2, [r3]
90013678:	4b37      	ldr	r3, [pc, #220]	; (90013758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
9001367a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001367e:	aa0a      	add	r2, sp, #40	; 0x28
90013680:	f9b3 3000 	ldrsh.w	r3, [r3]
90013684:	910c      	str	r1, [sp, #48]	; 0x30
90013686:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001368a:	ab08      	add	r3, sp, #32
9001368c:	e892 0003 	ldmia.w	r2, {r0, r1}
90013690:	e883 0003 	stmia.w	r3, {r0, r1}
90013694:	4618      	mov	r0, r3
90013696:	a90c      	add	r1, sp, #48	; 0x30
90013698:	f7ff fbdc 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001369c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
9001369e:	2b00      	cmp	r3, #0
900136a0:	d13c      	bne.n	9001371c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
900136a2:	2000      	movs	r0, #0
900136a4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
900136a8:	2600      	movs	r6, #0
900136aa:	696b      	ldr	r3, [r5, #20]
900136ac:	a908      	add	r1, sp, #32
900136ae:	682a      	ldr	r2, [r5, #0]
900136b0:	4628      	mov	r0, r5
900136b2:	9305      	str	r3, [sp, #20]
900136b4:	616e      	str	r6, [r5, #20]
900136b6:	6892      	ldr	r2, [r2, #8]
900136b8:	4790      	blx	r2
900136ba:	9b05      	ldr	r3, [sp, #20]
900136bc:	4652      	mov	r2, sl
900136be:	4649      	mov	r1, r9
900136c0:	616b      	str	r3, [r5, #20]
900136c2:	4628      	mov	r0, r5
900136c4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
900136c8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
900136cc:	f7ff fe92 	bl	900133f4 <_ZN8touchgfx8Drawable5setXYEss>
900136d0:	9a01      	ldr	r2, [sp, #4]
900136d2:	4b23      	ldr	r3, [pc, #140]	; (90013760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
900136d4:	4620      	mov	r0, r4
900136d6:	801a      	strh	r2, [r3, #0]
900136d8:	9a02      	ldr	r2, [sp, #8]
900136da:	4b22      	ldr	r3, [pc, #136]	; (90013764 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
900136dc:	801a      	strh	r2, [r3, #0]
900136de:	9a03      	ldr	r2, [sp, #12]
900136e0:	4b1c      	ldr	r3, [pc, #112]	; (90013754 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900136e2:	801a      	strh	r2, [r3, #0]
900136e4:	4b1c      	ldr	r3, [pc, #112]	; (90013758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900136e6:	9a04      	ldr	r2, [sp, #16]
900136e8:	801a      	strh	r2, [r3, #0]
900136ea:	6823      	ldr	r3, [r4, #0]
900136ec:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
900136f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900136f2:	4798      	blx	r3
900136f4:	6823      	ldr	r3, [r4, #0]
900136f6:	4620      	mov	r0, r4
900136f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900136fa:	4798      	blx	r3
900136fc:	b00f      	add	sp, #60	; 0x3c
900136fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013702:	883b      	ldrh	r3, [r7, #0]
90013704:	f8ab 0000 	strh.w	r0, [fp]
90013708:	f8aa 3000 	strh.w	r3, [sl]
9001370c:	e789      	b.n	90013622 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
9001370e:	462a      	mov	r2, r5
90013710:	ab0a      	add	r3, sp, #40	; 0x28
90013712:	f852 0f04 	ldr.w	r0, [r2, #4]!
90013716:	6851      	ldr	r1, [r2, #4]
90013718:	c303      	stmia	r3!, {r0, r1}
9001371a:	e7a9      	b.n	90013670 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
9001371c:	a807      	add	r0, sp, #28
9001371e:	f008 f827 	bl	9001b770 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013722:	4606      	mov	r6, r0
90013724:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90013726:	6803      	ldr	r3, [r0, #0]
90013728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001372a:	4798      	blx	r3
9001372c:	4286      	cmp	r6, r0
9001372e:	d1b8      	bne.n	900136a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90013730:	f7ff fe6e 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90013734:	6803      	ldr	r3, [r0, #0]
90013736:	4606      	mov	r6, r0
90013738:	a807      	add	r0, sp, #28
9001373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001373c:	9305      	str	r3, [sp, #20]
9001373e:	f008 f817 	bl	9001b770 <_ZNK8touchgfx6Bitmap9getFormatEv>
90013742:	9b05      	ldr	r3, [sp, #20]
90013744:	4601      	mov	r1, r0
90013746:	4630      	mov	r0, r6
90013748:	4798      	blx	r3
9001374a:	f080 0001 	eor.w	r0, r0, #1
9001374e:	b2c0      	uxtb	r0, r0
90013750:	e7a8      	b.n	900136a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90013752:	bf00      	nop
90013754:	240281e0 	.word	0x240281e0
90013758:	240281e2 	.word	0x240281e2
9001375c:	240281e4 	.word	0x240281e4
90013760:	240281e6 	.word	0x240281e6
90013764:	240281e8 	.word	0x240281e8

90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90013768:	4b07      	ldr	r3, [pc, #28]	; (90013788 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
9001376a:	b510      	push	{r4, lr}
9001376c:	781b      	ldrb	r3, [r3, #0]
9001376e:	4604      	mov	r4, r0
90013770:	b13b      	cbz	r3, 90013782 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90013772:	6803      	ldr	r3, [r0, #0]
90013774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013776:	4798      	blx	r3
90013778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9001377a:	4283      	cmp	r3, r0
9001377c:	d101      	bne.n	90013782 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
9001377e:	6c20      	ldr	r0, [r4, #64]	; 0x40
90013780:	bd10      	pop	{r4, pc}
90013782:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90013784:	e7fc      	b.n	90013780 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90013786:	bf00      	nop
90013788:	240281ea 	.word	0x240281ea

9001378c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
9001378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013790:	461d      	mov	r5, r3
90013792:	b08a      	sub	sp, #40	; 0x28
90013794:	f44f 6380 	mov.w	r3, #1024	; 0x400
90013798:	4690      	mov	r8, r2
9001379a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
9001379e:	2400      	movs	r4, #0
900137a0:	4607      	mov	r7, r0
900137a2:	fb06 8505 	mla	r5, r6, r5, r8
900137a6:	9404      	str	r4, [sp, #16]
900137a8:	f88d 4020 	strb.w	r4, [sp, #32]
900137ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
900137b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900137b4:	f8ad 3018 	strh.w	r3, [sp, #24]
900137b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900137bc:	f8ad 301a 	strh.w	r3, [sp, #26]
900137c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900137c4:	f8ad 301c 	strh.w	r3, [sp, #28]
900137c8:	f7ff ffce 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900137cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
900137d0:	6878      	ldr	r0, [r7, #4]
900137d2:	f8ad 601e 	strh.w	r6, [sp, #30]
900137d6:	a901      	add	r1, sp, #4
900137d8:	9505      	str	r5, [sp, #20]
900137da:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900137de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
900137e2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900137e6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900137ea:	6803      	ldr	r3, [r0, #0]
900137ec:	685b      	ldr	r3, [r3, #4]
900137ee:	4798      	blx	r3
900137f0:	b00a      	add	sp, #40	; 0x28
900137f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900137f6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
900137f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900137fa:	b08b      	sub	sp, #44	; 0x2c
900137fc:	2400      	movs	r4, #0
900137fe:	4691      	mov	r9, r2
90013800:	461d      	mov	r5, r3
90013802:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90013806:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001380a:	4688      	mov	r8, r1
9001380c:	4607      	mov	r7, r0
9001380e:	9404      	str	r4, [sp, #16]
90013810:	fb06 9505 	mla	r5, r6, r5, r9
90013814:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013818:	f7ff ffa6 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001381c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013820:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90013824:	6878      	ldr	r0, [r7, #4]
90013826:	f8ad 3018 	strh.w	r3, [sp, #24]
9001382a:	a901      	add	r1, sp, #4
9001382c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90013830:	9505      	str	r5, [sp, #20]
90013832:	f8ad 301a 	strh.w	r3, [sp, #26]
90013836:	f8ad 401c 	strh.w	r4, [sp, #28]
9001383a:	f8ad 601e 	strh.w	r6, [sp, #30]
9001383e:	f8cd 8010 	str.w	r8, [sp, #16]
90013842:	f8ad 4020 	strh.w	r4, [sp, #32]
90013846:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001384a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
9001384e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90013852:	6803      	ldr	r3, [r0, #0]
90013854:	685b      	ldr	r3, [r3, #4]
90013856:	4798      	blx	r3
90013858:	b00b      	add	sp, #44	; 0x2c
9001385a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90013860 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90013860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013864:	b08a      	sub	sp, #40	; 0x28
90013866:	4698      	mov	r8, r3
90013868:	2300      	movs	r3, #0
9001386a:	4606      	mov	r6, r0
9001386c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90013870:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90013874:	2d0b      	cmp	r5, #11
90013876:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
9001387a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
9001387e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90013882:	9304      	str	r3, [sp, #16]
90013884:	d137      	bne.n	900138f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90013886:	2380      	movs	r3, #128	; 0x80
90013888:	f88d 0020 	strb.w	r0, [sp, #32]
9001388c:	4630      	mov	r0, r6
9001388e:	9203      	str	r2, [sp, #12]
90013890:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013894:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013898:	f8ad 3018 	strh.w	r3, [sp, #24]
9001389c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900138a0:	f8ad 301a 	strh.w	r3, [sp, #26]
900138a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900138a8:	f8ad 301c 	strh.w	r3, [sp, #28]
900138ac:	f7ff ff5c 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900138b0:	2c0b      	cmp	r4, #11
900138b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
900138b6:	f8ad 701e 	strh.w	r7, [sp, #30]
900138ba:	bf94      	ite	ls
900138bc:	4b19      	ldrls	r3, [pc, #100]	; (90013924 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
900138be:	2100      	movhi	r1, #0
900138c0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
900138c4:	bf98      	it	ls
900138c6:	5d19      	ldrbls	r1, [r3, r4]
900138c8:	fb02 8307 	mla	r3, r2, r7, r8
900138cc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900138d0:	10c9      	asrs	r1, r1, #3
900138d2:	fb01 0003 	mla	r0, r1, r3, r0
900138d6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
900138da:	a901      	add	r1, sp, #4
900138dc:	9005      	str	r0, [sp, #20]
900138de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900138e2:	2300      	movs	r3, #0
900138e4:	6870      	ldr	r0, [r6, #4]
900138e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
900138ea:	6803      	ldr	r3, [r0, #0]
900138ec:	685b      	ldr	r3, [r3, #4]
900138ee:	4798      	blx	r3
900138f0:	b00a      	add	sp, #40	; 0x28
900138f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900138f6:	2d02      	cmp	r5, #2
900138f8:	d109      	bne.n	9001390e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
900138fa:	28ff      	cmp	r0, #255	; 0xff
900138fc:	d105      	bne.n	9001390a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
900138fe:	f1bc 0f00 	cmp.w	ip, #0
90013902:	bf14      	ite	ne
90013904:	2340      	movne	r3, #64	; 0x40
90013906:	2320      	moveq	r3, #32
90013908:	e7be      	b.n	90013888 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001390a:	2340      	movs	r3, #64	; 0x40
9001390c:	e7bc      	b.n	90013888 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001390e:	28ff      	cmp	r0, #255	; 0xff
90013910:	d105      	bne.n	9001391e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90013912:	f1bc 0f00 	cmp.w	ip, #0
90013916:	bf14      	ite	ne
90013918:	2304      	movne	r3, #4
9001391a:	2301      	moveq	r3, #1
9001391c:	e7b4      	b.n	90013888 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001391e:	2304      	movs	r3, #4
90013920:	e7b2      	b.n	90013888 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90013922:	bf00      	nop
90013924:	9002bd90 	.word	0x9002bd90

90013928 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001392c:	b08b      	sub	sp, #44	; 0x2c
9001392e:	461d      	mov	r5, r3
90013930:	2400      	movs	r4, #0
90013932:	4688      	mov	r8, r1
90013934:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90013938:	4693      	mov	fp, r2
9001393a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
9001393e:	4607      	mov	r7, r0
90013940:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90013944:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90013948:	9404      	str	r4, [sp, #16]
9001394a:	bf14      	ite	ne
9001394c:	2308      	movne	r3, #8
9001394e:	2302      	moveq	r3, #2
90013950:	fb05 b50a 	mla	r5, r5, sl, fp
90013954:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013958:	f7ff ff06 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001395c:	2e0b      	cmp	r6, #11
9001395e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90013962:	a901      	add	r1, sp, #4
90013964:	bf98      	it	ls
90013966:	4b13      	ldrls	r3, [pc, #76]	; (900139b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90013968:	f8ad a01e 	strh.w	sl, [sp, #30]
9001396c:	bf98      	it	ls
9001396e:	5d9c      	ldrbls	r4, [r3, r6]
90013970:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90013974:	10e4      	asrs	r4, r4, #3
90013976:	f8cd 8010 	str.w	r8, [sp, #16]
9001397a:	f8ad 3018 	strh.w	r3, [sp, #24]
9001397e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90013982:	fb04 0405 	mla	r4, r4, r5, r0
90013986:	6878      	ldr	r0, [r7, #4]
90013988:	f8ad 301a 	strh.w	r3, [sp, #26]
9001398c:	2300      	movs	r3, #0
9001398e:	9405      	str	r4, [sp, #20]
90013990:	f8ad 301c 	strh.w	r3, [sp, #28]
90013994:	f88d 9020 	strb.w	r9, [sp, #32]
90013998:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
9001399c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
900139a0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
900139a4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
900139a8:	6803      	ldr	r3, [r0, #0]
900139aa:	685b      	ldr	r3, [r3, #4]
900139ac:	4798      	blx	r3
900139ae:	b00b      	add	sp, #44	; 0x2c
900139b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900139b4:	9002bd90 	.word	0x9002bd90

900139b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
900139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900139bc:	461e      	mov	r6, r3
900139be:	4b0a      	ldr	r3, [pc, #40]	; (900139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
900139c0:	460f      	mov	r7, r1
900139c2:	4690      	mov	r8, r2
900139c4:	881d      	ldrh	r5, [r3, #0]
900139c6:	f7ff fd23 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
900139ca:	6803      	ldr	r3, [r0, #0]
900139cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900139ce:	4798      	blx	r3
900139d0:	280b      	cmp	r0, #11
900139d2:	bf96      	itet	ls
900139d4:	4b05      	ldrls	r3, [pc, #20]	; (900139ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
900139d6:	2400      	movhi	r4, #0
900139d8:	5c1c      	ldrbls	r4, [r3, r0]
900139da:	fb08 7005 	mla	r0, r8, r5, r7
900139de:	10e4      	asrs	r4, r4, #3
900139e0:	fb04 6000 	mla	r0, r4, r0, r6
900139e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900139e8:	240281e6 	.word	0x240281e6
900139ec:	9002bd90 	.word	0x9002bd90

900139f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
900139f0:	b5f0      	push	{r4, r5, r6, r7, lr}
900139f2:	b08b      	sub	sp, #44	; 0x2c
900139f4:	461f      	mov	r7, r3
900139f6:	4604      	mov	r4, r0
900139f8:	4616      	mov	r6, r2
900139fa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900139fe:	2500      	movs	r5, #0
90013a00:	e9cd 3101 	strd	r3, r1, [sp, #4]
90013a04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90013a08:	9504      	str	r5, [sp, #16]
90013a0a:	f8ad 3018 	strh.w	r3, [sp, #24]
90013a0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90013a12:	f8ad 301a 	strh.w	r3, [sp, #26]
90013a16:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90013a1a:	f8ad 301c 	strh.w	r3, [sp, #28]
90013a1e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90013a22:	f88d 3020 	strb.w	r3, [sp, #32]
90013a26:	f7ff fe9f 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013a2a:	463a      	mov	r2, r7
90013a2c:	4631      	mov	r1, r6
90013a2e:	4603      	mov	r3, r0
90013a30:	4620      	mov	r0, r4
90013a32:	f7ff ffc1 	bl	900139b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013a36:	4b0e      	ldr	r3, [pc, #56]	; (90013a70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90013a38:	9005      	str	r0, [sp, #20]
90013a3a:	881b      	ldrh	r3, [r3, #0]
90013a3c:	f8ad 301e 	strh.w	r3, [sp, #30]
90013a40:	f7ff fce6 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90013a44:	6803      	ldr	r3, [r0, #0]
90013a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013a48:	4798      	blx	r3
90013a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90013a4c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90013a50:	a901      	add	r1, sp, #4
90013a52:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90013a56:	9304      	str	r3, [sp, #16]
90013a58:	6860      	ldr	r0, [r4, #4]
90013a5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90013a5e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90013a62:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90013a66:	6803      	ldr	r3, [r0, #0]
90013a68:	685b      	ldr	r3, [r3, #4]
90013a6a:	4798      	blx	r3
90013a6c:	b00b      	add	sp, #44	; 0x2c
90013a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013a70:	240281e6 	.word	0x240281e6

90013a74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90013a74:	b5f0      	push	{r4, r5, r6, r7, lr}
90013a76:	b08d      	sub	sp, #52	; 0x34
90013a78:	2501      	movs	r5, #1
90013a7a:	4604      	mov	r4, r0
90013a7c:	466b      	mov	r3, sp
90013a7e:	9503      	str	r5, [sp, #12]
90013a80:	e883 0006 	stmia.w	r3, {r1, r2}
90013a84:	2300      	movs	r3, #0
90013a86:	f8bd 6000 	ldrh.w	r6, [sp]
90013a8a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90013a8e:	9306      	str	r3, [sp, #24]
90013a90:	6803      	ldr	r3, [r0, #0]
90013a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013a94:	4798      	blx	r3
90013a96:	463a      	mov	r2, r7
90013a98:	4631      	mov	r1, r6
90013a9a:	4603      	mov	r3, r0
90013a9c:	4620      	mov	r0, r4
90013a9e:	f7ff ff8b 	bl	900139b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
90013aa4:	9004      	str	r0, [sp, #16]
90013aa6:	9307      	str	r3, [sp, #28]
90013aa8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90013aac:	f8ad 3020 	strh.w	r3, [sp, #32]
90013ab0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013ab4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013ab8:	4b0e      	ldr	r3, [pc, #56]	; (90013af4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90013aba:	881b      	ldrh	r3, [r3, #0]
90013abc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013ac0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90013ac4:	f7ff fca4 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90013ac8:	6803      	ldr	r3, [r0, #0]
90013aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013acc:	4798      	blx	r3
90013ace:	23ff      	movs	r3, #255	; 0xff
90013ad0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90013ad4:	a903      	add	r1, sp, #12
90013ad6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90013ada:	6860      	ldr	r0, [r4, #4]
90013adc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013ae0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90013ae4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013ae8:	6803      	ldr	r3, [r0, #0]
90013aea:	685b      	ldr	r3, [r3, #4]
90013aec:	4798      	blx	r3
90013aee:	6c60      	ldr	r0, [r4, #68]	; 0x44
90013af0:	b00d      	add	sp, #52	; 0x34
90013af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013af4:	240281e6 	.word	0x240281e6

90013af8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90013af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013afc:	b08c      	sub	sp, #48	; 0x30
90013afe:	461e      	mov	r6, r3
90013b00:	2300      	movs	r3, #0
90013b02:	4604      	mov	r4, r0
90013b04:	466d      	mov	r5, sp
90013b06:	9306      	str	r3, [sp, #24]
90013b08:	6803      	ldr	r3, [r0, #0]
90013b0a:	e885 0006 	stmia.w	r5, {r1, r2}
90013b0e:	2501      	movs	r5, #1
90013b10:	f8bd 7000 	ldrh.w	r7, [sp]
90013b14:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90013b18:	9503      	str	r5, [sp, #12]
90013b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013b1c:	4798      	blx	r3
90013b1e:	4642      	mov	r2, r8
90013b20:	4639      	mov	r1, r7
90013b22:	4603      	mov	r3, r0
90013b24:	4620      	mov	r0, r4
90013b26:	f7ff ff47 	bl	900139b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013b2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90013b2e:	9004      	str	r0, [sp, #16]
90013b30:	f8ad 3020 	strh.w	r3, [sp, #32]
90013b34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90013b38:	9607      	str	r6, [sp, #28]
90013b3a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90013b3e:	4b10      	ldr	r3, [pc, #64]	; (90013b80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90013b40:	881b      	ldrh	r3, [r3, #0]
90013b42:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90013b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013b48:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90013b4c:	f7ff fc60 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90013b50:	6803      	ldr	r3, [r0, #0]
90013b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013b54:	4798      	blx	r3
90013b56:	23ff      	movs	r3, #255	; 0xff
90013b58:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90013b5c:	a903      	add	r1, sp, #12
90013b5e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90013b62:	6860      	ldr	r0, [r4, #4]
90013b64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90013b68:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90013b6c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90013b70:	6803      	ldr	r3, [r0, #0]
90013b72:	685b      	ldr	r3, [r3, #4]
90013b74:	4798      	blx	r3
90013b76:	4630      	mov	r0, r6
90013b78:	b00c      	add	sp, #48	; 0x30
90013b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013b7e:	bf00      	nop
90013b80:	240281e6 	.word	0x240281e6

90013b84 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90013b84:	b5f0      	push	{r4, r5, r6, r7, lr}
90013b86:	b085      	sub	sp, #20
90013b88:	4605      	mov	r5, r0
90013b8a:	ac02      	add	r4, sp, #8
90013b8c:	e884 0006 	stmia.w	r4, {r1, r2}
90013b90:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90013b94:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90013b98:	f7ff fde6 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013b9c:	4631      	mov	r1, r6
90013b9e:	4603      	mov	r3, r0
90013ba0:	463a      	mov	r2, r7
90013ba2:	4628      	mov	r0, r5
90013ba4:	f7ff ff08 	bl	900139b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90013ba8:	4a05      	ldr	r2, [pc, #20]	; (90013bc0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90013baa:	682b      	ldr	r3, [r5, #0]
90013bac:	8812      	ldrh	r2, [r2, #0]
90013bae:	9200      	str	r2, [sp, #0]
90013bb0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90013bb2:	4603      	mov	r3, r0
90013bb4:	4628      	mov	r0, r5
90013bb6:	e894 0006 	ldmia.w	r4, {r1, r2}
90013bba:	47b0      	blx	r6
90013bbc:	b005      	add	sp, #20
90013bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013bc0:	240281e6 	.word	0x240281e6

90013bc4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90013bc4:	b570      	push	{r4, r5, r6, lr}
90013bc6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90013bca:	4604      	mov	r4, r0
90013bcc:	b19b      	cbz	r3, 90013bf6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90013bce:	2002      	movs	r0, #2
90013bd0:	f7ec fd38 	bl	90000644 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90013bd4:	2300      	movs	r3, #0
90013bd6:	4620      	mov	r0, r4
90013bd8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90013bdc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90013be0:	6823      	ldr	r3, [r4, #0]
90013be2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90013be6:	f7ff fdbf 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013bea:	4601      	mov	r1, r0
90013bec:	4620      	mov	r0, r4
90013bee:	462b      	mov	r3, r5
90013bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013bf4:	4718      	bx	r3
90013bf6:	bd70      	pop	{r4, r5, r6, pc}

90013bf8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90013bf8:	b570      	push	{r4, r5, r6, lr}
90013bfa:	4605      	mov	r5, r0
90013bfc:	460c      	mov	r4, r1
90013bfe:	2003      	movs	r0, #3
90013c00:	b149      	cbz	r1, 90013c16 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90013c02:	f7ec fcb7 	bl	90000574 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90013c06:	6928      	ldr	r0, [r5, #16]
90013c08:	b168      	cbz	r0, 90013c26 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90013c0a:	6803      	ldr	r3, [r0, #0]
90013c0c:	2101      	movs	r1, #1
90013c0e:	695b      	ldr	r3, [r3, #20]
90013c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013c14:	4718      	bx	r3
90013c16:	f7ec fce1 	bl	900005dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90013c1a:	6928      	ldr	r0, [r5, #16]
90013c1c:	b118      	cbz	r0, 90013c26 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90013c1e:	6803      	ldr	r3, [r0, #0]
90013c20:	4621      	mov	r1, r4
90013c22:	695b      	ldr	r3, [r3, #20]
90013c24:	e7f4      	b.n	90013c10 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90013c26:	bd70      	pop	{r4, r5, r6, pc}

90013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90013c28:	b538      	push	{r3, r4, r5, lr}
90013c2a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
90013c2e:	4604      	mov	r4, r0
90013c30:	460d      	mov	r5, r1
90013c32:	428b      	cmp	r3, r1
90013c34:	d006      	beq.n	90013c44 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90013c36:	6803      	ldr	r3, [r0, #0]
90013c38:	b929      	cbnz	r1, 90013c46 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90013c3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90013c3e:	4798      	blx	r3
90013c40:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90013c44:	bd38      	pop	{r3, r4, r5, pc}
90013c46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
90013c4a:	e7f8      	b.n	90013c3e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90013c4c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90013c4c:	4b0d      	ldr	r3, [pc, #52]	; (90013c84 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
90013c4e:	b510      	push	{r4, lr}
90013c50:	781b      	ldrb	r3, [r3, #0]
90013c52:	4604      	mov	r4, r0
90013c54:	b95b      	cbnz	r3, 90013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013c56:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90013c5a:	2b02      	cmp	r3, #2
90013c5c:	d007      	beq.n	90013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013c5e:	6840      	ldr	r0, [r0, #4]
90013c60:	f000 f918 	bl	90013e94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90013c64:	b118      	cbz	r0, 90013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90013c66:	6862      	ldr	r2, [r4, #4]
90013c68:	7a53      	ldrb	r3, [r2, #9]
90013c6a:	2b00      	cmp	r3, #0
90013c6c:	d0fc      	beq.n	90013c68 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
90013c6e:	f7ed fe9b 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90013c72:	4620      	mov	r0, r4
90013c74:	2100      	movs	r1, #0
90013c76:	f7ff ffd7 	bl	90013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013c7a:	4620      	mov	r0, r4
90013c7c:	f7ff fd74 	bl	90013768 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90013c80:	bd10      	pop	{r4, pc}
90013c82:	bf00      	nop
90013c84:	240281ea 	.word	0x240281ea

90013c88 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
90013c88:	b570      	push	{r4, r5, r6, lr}
90013c8a:	4604      	mov	r4, r0
90013c8c:	6803      	ldr	r3, [r0, #0]
90013c8e:	b919      	cbnz	r1, 90013c98 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
90013c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013c96:	4718      	bx	r3
90013c98:	2200      	movs	r2, #0
90013c9a:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
90013c9e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
90013ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013ca4:	4798      	blx	r3
90013ca6:	4605      	mov	r5, r0
90013ca8:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
90013cac:	4620      	mov	r0, r4
90013cae:	2101      	movs	r1, #1
90013cb0:	f7ff ffba 	bl	90013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013cb4:	4628      	mov	r0, r5
90013cb6:	bd70      	pop	{r4, r5, r6, pc}

90013cb8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90013cb8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90013cbc:	1a13      	subs	r3, r2, r0
90013cbe:	4258      	negs	r0, r3
90013cc0:	4158      	adcs	r0, r3
90013cc2:	4770      	bx	lr

90013cc4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90013cc4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90013cc8:	1a9b      	subs	r3, r3, r2
90013cca:	2b00      	cmp	r3, #0
90013ccc:	bfdc      	itt	le
90013cce:	6882      	ldrle	r2, [r0, #8]
90013cd0:	189b      	addle	r3, r3, r2
90013cd2:	2b01      	cmp	r3, #1
90013cd4:	bfcc      	ite	gt
90013cd6:	2000      	movgt	r0, #0
90013cd8:	2001      	movle	r0, #1
90013cda:	4770      	bx	lr

90013cdc <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90013cdc:	6902      	ldr	r2, [r0, #16]
90013cde:	6843      	ldr	r3, [r0, #4]
90013ce0:	2024      	movs	r0, #36	; 0x24
90013ce2:	fb00 3002 	mla	r0, r0, r2, r3
90013ce6:	4770      	bx	lr

90013ce8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90013ce8:	6803      	ldr	r3, [r0, #0]
90013cea:	691b      	ldr	r3, [r3, #16]
90013cec:	4718      	bx	r3

90013cee <_ZN8touchgfx13DMA_Interface7executeEv>:
90013cee:	2301      	movs	r3, #1
90013cf0:	b570      	push	{r4, r5, r6, lr}
90013cf2:	7203      	strb	r3, [r0, #8]
90013cf4:	4604      	mov	r4, r0
90013cf6:	6840      	ldr	r0, [r0, #4]
90013cf8:	6803      	ldr	r3, [r0, #0]
90013cfa:	699b      	ldr	r3, [r3, #24]
90013cfc:	4798      	blx	r3
90013cfe:	6803      	ldr	r3, [r0, #0]
90013d00:	4605      	mov	r5, r0
90013d02:	2b40      	cmp	r3, #64	; 0x40
90013d04:	d00c      	beq.n	90013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013d06:	d810      	bhi.n	90013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90013d08:	2b04      	cmp	r3, #4
90013d0a:	d01d      	beq.n	90013d48 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90013d0c:	d804      	bhi.n	90013d18 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90013d0e:	2b01      	cmp	r3, #1
90013d10:	d006      	beq.n	90013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013d12:	2b02      	cmp	r3, #2
90013d14:	d02c      	beq.n	90013d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90013d16:	bd70      	pop	{r4, r5, r6, pc}
90013d18:	2b08      	cmp	r3, #8
90013d1a:	d01d      	beq.n	90013d58 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90013d1c:	2b20      	cmp	r3, #32
90013d1e:	d1fa      	bne.n	90013d16 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90013d20:	6823      	ldr	r3, [r4, #0]
90013d22:	4620      	mov	r0, r4
90013d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013d26:	4798      	blx	r3
90013d28:	e013      	b.n	90013d52 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90013d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90013d2e:	d0f7      	beq.n	90013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013d30:	d804      	bhi.n	90013d3c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90013d32:	2b80      	cmp	r3, #128	; 0x80
90013d34:	d0f4      	beq.n	90013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90013d3a:	e7f0      	b.n	90013d1e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90013d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90013d40:	d0ee      	beq.n	90013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90013d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90013d46:	e7e5      	b.n	90013d14 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90013d48:	6823      	ldr	r3, [r4, #0]
90013d4a:	7f01      	ldrb	r1, [r0, #28]
90013d4c:	4620      	mov	r0, r4
90013d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013d50:	4798      	blx	r3
90013d52:	6823      	ldr	r3, [r4, #0]
90013d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013d56:	e006      	b.n	90013d66 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90013d58:	6823      	ldr	r3, [r4, #0]
90013d5a:	7f01      	ldrb	r1, [r0, #28]
90013d5c:	4620      	mov	r0, r4
90013d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013d60:	4798      	blx	r3
90013d62:	6823      	ldr	r3, [r4, #0]
90013d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90013d66:	4629      	mov	r1, r5
90013d68:	4620      	mov	r0, r4
90013d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013d6e:	4718      	bx	r3
90013d70:	6823      	ldr	r3, [r4, #0]
90013d72:	4620      	mov	r0, r4
90013d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90013d76:	4798      	blx	r3
90013d78:	e7f3      	b.n	90013d62 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90013d7a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90013d7a:	4770      	bx	lr

90013d7c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90013d7c:	4770      	bx	lr

90013d7e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
90013d7e:	4770      	bx	lr

90013d80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90013d80:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90013d84:	b510      	push	{r4, lr}
90013d86:	1ad2      	subs	r2, r2, r3
90013d88:	2a00      	cmp	r2, #0
90013d8a:	bfdc      	itt	le
90013d8c:	6884      	ldrle	r4, [r0, #8]
90013d8e:	1912      	addle	r2, r2, r4
90013d90:	2a01      	cmp	r2, #1
90013d92:	dd16      	ble.n	90013dc2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90013d94:	6842      	ldr	r2, [r0, #4]
90013d96:	2424      	movs	r4, #36	; 0x24
90013d98:	fb04 2303 	mla	r3, r4, r3, r2
90013d9c:	f101 0220 	add.w	r2, r1, #32
90013da0:	f851 4b04 	ldr.w	r4, [r1], #4
90013da4:	4291      	cmp	r1, r2
90013da6:	f843 4b04 	str.w	r4, [r3], #4
90013daa:	d1f9      	bne.n	90013da0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90013dac:	780a      	ldrb	r2, [r1, #0]
90013dae:	701a      	strb	r2, [r3, #0]
90013db0:	68c3      	ldr	r3, [r0, #12]
90013db2:	6882      	ldr	r2, [r0, #8]
90013db4:	f3bf 8f5b 	dmb	ish
90013db8:	3301      	adds	r3, #1
90013dba:	429a      	cmp	r2, r3
90013dbc:	bfd8      	it	le
90013dbe:	1a9b      	suble	r3, r3, r2
90013dc0:	60c3      	str	r3, [r0, #12]
90013dc2:	bd10      	pop	{r4, pc}

90013dc4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90013dc4:	6903      	ldr	r3, [r0, #16]
90013dc6:	6882      	ldr	r2, [r0, #8]
90013dc8:	f3bf 8f5b 	dmb	ish
90013dcc:	3301      	adds	r3, #1
90013dce:	429a      	cmp	r2, r3
90013dd0:	bfd8      	it	le
90013dd2:	1a9b      	suble	r3, r3, r2
90013dd4:	6103      	str	r3, [r0, #16]
90013dd6:	4770      	bx	lr

90013dd8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90013dd8:	b570      	push	{r4, r5, r6, lr}
90013dda:	4604      	mov	r4, r0
90013ddc:	460e      	mov	r6, r1
90013dde:	6860      	ldr	r0, [r4, #4]
90013de0:	6803      	ldr	r3, [r0, #0]
90013de2:	685b      	ldr	r3, [r3, #4]
90013de4:	4798      	blx	r3
90013de6:	2800      	cmp	r0, #0
90013de8:	d1f9      	bne.n	90013dde <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90013dea:	4d0d      	ldr	r5, [pc, #52]	; (90013e20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90013dec:	6828      	ldr	r0, [r5, #0]
90013dee:	6803      	ldr	r3, [r0, #0]
90013df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90013df2:	4798      	blx	r3
90013df4:	f7ed fde6 	bl	900019c4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90013df8:	6828      	ldr	r0, [r5, #0]
90013dfa:	2101      	movs	r1, #1
90013dfc:	f7ff ff14 	bl	90013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90013e00:	6860      	ldr	r0, [r4, #4]
90013e02:	4631      	mov	r1, r6
90013e04:	6803      	ldr	r3, [r0, #0]
90013e06:	689b      	ldr	r3, [r3, #8]
90013e08:	4798      	blx	r3
90013e0a:	6823      	ldr	r3, [r4, #0]
90013e0c:	4620      	mov	r0, r4
90013e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013e10:	4798      	blx	r3
90013e12:	6828      	ldr	r0, [r5, #0]
90013e14:	6803      	ldr	r3, [r0, #0]
90013e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90013e1c:	4718      	bx	r3
90013e1e:	bf00      	nop
90013e20:	240281ec 	.word	0x240281ec

90013e24 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90013e24:	b508      	push	{r3, lr}
90013e26:	f7ed fdbf 	bl	900019a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90013e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90013e2e:	f7ed bdc3 	b.w	900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90013e32 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90013e32:	b510      	push	{r4, lr}
90013e34:	4604      	mov	r4, r0
90013e36:	2114      	movs	r1, #20
90013e38:	f013 fc2d 	bl	90027696 <_ZdlPvj>
90013e3c:	4620      	mov	r0, r4
90013e3e:	bd10      	pop	{r4, pc}

90013e40 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90013e40:	b570      	push	{r4, r5, r6, lr}
90013e42:	4604      	mov	r4, r0
90013e44:	6840      	ldr	r0, [r0, #4]
90013e46:	6803      	ldr	r3, [r0, #0]
90013e48:	681b      	ldr	r3, [r3, #0]
90013e4a:	4798      	blx	r3
90013e4c:	4605      	mov	r5, r0
90013e4e:	b930      	cbnz	r0, 90013e5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013e50:	7a23      	ldrb	r3, [r4, #8]
90013e52:	b123      	cbz	r3, 90013e5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90013e54:	6860      	ldr	r0, [r4, #4]
90013e56:	6803      	ldr	r3, [r0, #0]
90013e58:	695b      	ldr	r3, [r3, #20]
90013e5a:	4798      	blx	r3
90013e5c:	7225      	strb	r5, [r4, #8]
90013e5e:	6860      	ldr	r0, [r4, #4]
90013e60:	6803      	ldr	r3, [r0, #0]
90013e62:	681b      	ldr	r3, [r3, #0]
90013e64:	4798      	blx	r3
90013e66:	b928      	cbnz	r0, 90013e74 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90013e68:	6823      	ldr	r3, [r4, #0]
90013e6a:	4620      	mov	r0, r4
90013e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e72:	4718      	bx	r3
90013e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013e78:	f7ed bdac 	b.w	900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90013e7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90013e7c:	b510      	push	{r4, lr}
90013e7e:	6082      	str	r2, [r0, #8]
90013e80:	2200      	movs	r2, #0
90013e82:	4c03      	ldr	r4, [pc, #12]	; (90013e90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90013e84:	e9c0 2203 	strd	r2, r2, [r0, #12]
90013e88:	e9c0 4100 	strd	r4, r1, [r0]
90013e8c:	bd10      	pop	{r4, pc}
90013e8e:	bf00      	nop
90013e90:	9002bda4 	.word	0x9002bda4

90013e94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90013e94:	6840      	ldr	r0, [r0, #4]
90013e96:	6803      	ldr	r3, [r0, #0]
90013e98:	681b      	ldr	r3, [r3, #0]
90013e9a:	4718      	bx	r3

90013e9c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
90013e9c:	094a      	lsrs	r2, r1, #5
90013e9e:	4b06      	ldr	r3, [pc, #24]	; (90013eb8 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
90013ea0:	60c1      	str	r1, [r0, #12]
90013ea2:	ea03 2311 	and.w	r3, r3, r1, lsr #8
90013ea6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90013eaa:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90013eae:	4313      	orrs	r3, r2
90013eb0:	4319      	orrs	r1, r3
90013eb2:	8201      	strh	r1, [r0, #16]
90013eb4:	4770      	bx	lr
90013eb6:	bf00      	nop
90013eb8:	fffff800 	.word	0xfffff800

90013ebc <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
90013ebc:	f1a0 0008 	sub.w	r0, r0, #8
90013ec0:	e7ec      	b.n	90013e9c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
90013ec2:	bf00      	nop

90013ec4 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
90013ec4:	b508      	push	{r3, lr}
90013ec6:	4b05      	ldr	r3, [pc, #20]	; (90013edc <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
90013ec8:	6818      	ldr	r0, [r3, #0]
90013eca:	6803      	ldr	r3, [r0, #0]
90013ecc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90013ed0:	4798      	blx	r3
90013ed2:	1e43      	subs	r3, r0, #1
90013ed4:	4258      	negs	r0, r3
90013ed6:	4158      	adcs	r0, r3
90013ed8:	bd08      	pop	{r3, pc}
90013eda:	bf00      	nop
90013edc:	240281ec 	.word	0x240281ec

90013ee0 <_ZN8touchgfx13PainterRGB565D1Ev>:
90013ee0:	4770      	bx	lr

90013ee2 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
90013ee2:	3808      	subs	r0, #8
90013ee4:	4770      	bx	lr

90013ee6 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
90013ee6:	b430      	push	{r4, r5}
90013ee8:	eb01 0442 	add.w	r4, r1, r2, lsl #1
90013eec:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
90013ef0:	8a02      	ldrh	r2, [r0, #16]
90013ef2:	f89d 3010 	ldrb.w	r3, [sp, #16]
90013ef6:	4629      	mov	r1, r5
90013ef8:	9202      	str	r2, [sp, #8]
90013efa:	68c2      	ldr	r2, [r0, #12]
90013efc:	4620      	mov	r0, r4
90013efe:	bc30      	pop	{r4, r5}
90013f00:	f7ee b814 	b.w	90001f2c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

90013f04 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
90013f04:	f7ee b808 	b.w	90001f18 <_ZN8touchgfx5paint8tearDownEv>

90013f08 <_ZN8touchgfx13PainterRGB565D0Ev>:
90013f08:	b510      	push	{r4, lr}
90013f0a:	4604      	mov	r4, r0
90013f0c:	2114      	movs	r1, #20
90013f0e:	f013 fbc2 	bl	90027696 <_ZdlPvj>
90013f12:	4620      	mov	r0, r4
90013f14:	bd10      	pop	{r4, pc}

90013f16 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
90013f16:	f1a0 0008 	sub.w	r0, r0, #8
90013f1a:	e7f5      	b.n	90013f08 <_ZN8touchgfx13PainterRGB565D0Ev>

90013f1c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
90013f1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90013f1e:	6803      	ldr	r3, [r0, #0]
90013f20:	460d      	mov	r5, r1
90013f22:	4604      	mov	r4, r0
90013f24:	4601      	mov	r1, r0
90013f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90013f28:	a802      	add	r0, sp, #8
90013f2a:	4798      	blx	r3
90013f2c:	6828      	ldr	r0, [r5, #0]
90013f2e:	6869      	ldr	r1, [r5, #4]
90013f30:	466b      	mov	r3, sp
90013f32:	c303      	stmia	r3!, {r0, r1}
90013f34:	4668      	mov	r0, sp
90013f36:	4619      	mov	r1, r3
90013f38:	f7fe ff8c 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90013f3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90013f3e:	b1a8      	cbz	r0, 90013f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013f40:	6803      	ldr	r3, [r0, #0]
90013f42:	1d21      	adds	r1, r4, #4
90013f44:	68db      	ldr	r3, [r3, #12]
90013f46:	4798      	blx	r3
90013f48:	b180      	cbz	r0, 90013f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013f4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90013f4e:	2b00      	cmp	r3, #0
90013f50:	dd0c      	ble.n	90013f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013f52:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
90013f56:	2d00      	cmp	r5, #0
90013f58:	dd08      	ble.n	90013f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
90013f5a:	4a2d      	ldr	r2, [pc, #180]	; (90014010 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
90013f5c:	7812      	ldrb	r2, [r2, #0]
90013f5e:	b13a      	cbz	r2, 90013f70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
90013f60:	2a01      	cmp	r2, #1
90013f62:	d02d      	beq.n	90013fc0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
90013f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90013f66:	6803      	ldr	r3, [r0, #0]
90013f68:	691b      	ldr	r3, [r3, #16]
90013f6a:	4798      	blx	r3
90013f6c:	b004      	add	sp, #16
90013f6e:	bd70      	pop	{r4, r5, r6, pc}
90013f70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013f74:	441d      	add	r5, r3
90013f76:	b2ad      	uxth	r5, r5
90013f78:	b22e      	sxth	r6, r5
90013f7a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90013f7e:	42b3      	cmp	r3, r6
90013f80:	daf0      	bge.n	90013f64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013f82:	6823      	ldr	r3, [r4, #0]
90013f84:	4669      	mov	r1, sp
90013f86:	4620      	mov	r0, r4
90013f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90013f8a:	4798      	blx	r3
90013f8c:	b940      	cbnz	r0, 90013fa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
90013f8e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90013f92:	2b01      	cmp	r3, #1
90013f94:	d004      	beq.n	90013fa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
90013f96:	3301      	adds	r3, #1
90013f98:	105b      	asrs	r3, r3, #1
90013f9a:	f8ad 3006 	strh.w	r3, [sp, #6]
90013f9e:	e7f0      	b.n	90013f82 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
90013fa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
90013fa4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90013fa8:	4413      	add	r3, r2
90013faa:	b29b      	uxth	r3, r3
90013fac:	441a      	add	r2, r3
90013fae:	f8ad 3002 	strh.w	r3, [sp, #2]
90013fb2:	b212      	sxth	r2, r2
90013fb4:	4296      	cmp	r6, r2
90013fb6:	dae0      	bge.n	90013f7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013fb8:	1aeb      	subs	r3, r5, r3
90013fba:	f8ad 3006 	strh.w	r3, [sp, #6]
90013fbe:	e7dc      	b.n	90013f7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
90013fc0:	f8bd 5000 	ldrh.w	r5, [sp]
90013fc4:	441d      	add	r5, r3
90013fc6:	b2ad      	uxth	r5, r5
90013fc8:	b22e      	sxth	r6, r5
90013fca:	f9bd 3000 	ldrsh.w	r3, [sp]
90013fce:	42b3      	cmp	r3, r6
90013fd0:	dac8      	bge.n	90013f64 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
90013fd2:	6823      	ldr	r3, [r4, #0]
90013fd4:	4669      	mov	r1, sp
90013fd6:	4620      	mov	r0, r4
90013fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90013fda:	4798      	blx	r3
90013fdc:	b940      	cbnz	r0, 90013ff0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013fde:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90013fe2:	2b01      	cmp	r3, #1
90013fe4:	d004      	beq.n	90013ff0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
90013fe6:	3301      	adds	r3, #1
90013fe8:	105b      	asrs	r3, r3, #1
90013fea:	f8ad 3004 	strh.w	r3, [sp, #4]
90013fee:	e7f0      	b.n	90013fd2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
90013ff0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
90013ff4:	f8bd 3000 	ldrh.w	r3, [sp]
90013ff8:	4413      	add	r3, r2
90013ffa:	b29b      	uxth	r3, r3
90013ffc:	441a      	add	r2, r3
90013ffe:	f8ad 3000 	strh.w	r3, [sp]
90014002:	b212      	sxth	r2, r2
90014004:	4296      	cmp	r6, r2
90014006:	dae0      	bge.n	90013fca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90014008:	1aeb      	subs	r3, r5, r3
9001400a:	f8ad 3004 	strh.w	r3, [sp, #4]
9001400e:	e7dc      	b.n	90013fca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
90014010:	240281e4 	.word	0x240281e4

90014014 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
90014014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90014016:	6803      	ldr	r3, [r0, #0]
90014018:	4604      	mov	r4, r0
9001401a:	4601      	mov	r1, r0
9001401c:	4668      	mov	r0, sp
9001401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90014020:	4798      	blx	r3
90014022:	2100      	movs	r1, #0
90014024:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
90014028:	4668      	mov	r0, sp
9001402a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
9001402e:	9102      	str	r1, [sp, #8]
90014030:	a902      	add	r1, sp, #8
90014032:	f8ad 200c 	strh.w	r2, [sp, #12]
90014036:	f8ad 300e 	strh.w	r3, [sp, #14]
9001403a:	f7fe ff0b 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001403e:	6823      	ldr	r3, [r4, #0]
90014040:	4669      	mov	r1, sp
90014042:	4620      	mov	r0, r4
90014044:	691b      	ldr	r3, [r3, #16]
90014046:	4798      	blx	r3
90014048:	b004      	add	sp, #16
9001404a:	bd10      	pop	{r4, pc}

9001404c <_ZN8touchgfx12CanvasWidgetC1Ev>:
9001404c:	2101      	movs	r1, #1
9001404e:	2200      	movs	r2, #0
90014050:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90014054:	490a      	ldr	r1, [pc, #40]	; (90014080 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
90014056:	8082      	strh	r2, [r0, #4]
90014058:	6001      	str	r1, [r0, #0]
9001405a:	21ff      	movs	r1, #255	; 0xff
9001405c:	80c2      	strh	r2, [r0, #6]
9001405e:	8102      	strh	r2, [r0, #8]
90014060:	8142      	strh	r2, [r0, #10]
90014062:	8182      	strh	r2, [r0, #12]
90014064:	81c2      	strh	r2, [r0, #14]
90014066:	8202      	strh	r2, [r0, #16]
90014068:	8242      	strh	r2, [r0, #18]
9001406a:	61c2      	str	r2, [r0, #28]
9001406c:	8402      	strh	r2, [r0, #32]
9001406e:	8442      	strh	r2, [r0, #34]	; 0x22
90014070:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90014074:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
90014078:	6282      	str	r2, [r0, #40]	; 0x28
9001407a:	e9c0 2205 	strd	r2, r2, [r0, #20]
9001407e:	4770      	bx	lr
90014080:	9002be00 	.word	0x9002be00

90014084 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
90014084:	6301      	str	r1, [r0, #48]	; 0x30
90014086:	4770      	bx	lr

90014088 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
90014088:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001408a:	4770      	bx	lr

9001408c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
9001408c:	6341      	str	r1, [r0, #52]	; 0x34
9001408e:	4770      	bx	lr

90014090 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
90014090:	6b40      	ldr	r0, [r0, #52]	; 0x34
90014092:	4770      	bx	lr

90014094 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
90014094:	4770      	bx	lr

90014096 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
90014096:	4608      	mov	r0, r1
90014098:	4770      	bx	lr

9001409a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
9001409a:	b530      	push	{r4, r5, lr}
9001409c:	460d      	mov	r5, r1
9001409e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
900140a0:	8949      	ldrh	r1, [r1, #10]
900140a2:	b085      	sub	sp, #20
900140a4:	4604      	mov	r4, r0
900140a6:	1ac9      	subs	r1, r1, r3
900140a8:	6803      	ldr	r3, [r0, #0]
900140aa:	f10d 0206 	add.w	r2, sp, #6
900140ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
900140b2:	b209      	sxth	r1, r1
900140b4:	4798      	blx	r3
900140b6:	b1a0      	cbz	r0, 900140e2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
900140b8:	792b      	ldrb	r3, [r5, #4]
900140ba:	b993      	cbnz	r3, 900140e2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
900140bc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
900140c0:	b178      	cbz	r0, 900140e2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
900140c2:	6803      	ldr	r3, [r0, #0]
900140c4:	68db      	ldr	r3, [r3, #12]
900140c6:	4798      	blx	r3
900140c8:	b158      	cbz	r0, 900140e2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
900140ca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
900140ce:	aa02      	add	r2, sp, #8
900140d0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
900140d4:	4621      	mov	r1, r4
900140d6:	f8ad 3008 	strh.w	r3, [sp, #8]
900140da:	9503      	str	r5, [sp, #12]
900140dc:	6803      	ldr	r3, [r0, #0]
900140de:	689b      	ldr	r3, [r3, #8]
900140e0:	4798      	blx	r3
900140e2:	b005      	add	sp, #20
900140e4:	bd30      	pop	{r4, r5, pc}

900140e6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
900140e6:	428a      	cmp	r2, r1
900140e8:	bfbc      	itt	lt
900140ea:	460b      	movlt	r3, r1
900140ec:	4611      	movlt	r1, r2
900140ee:	b510      	push	{r4, lr}
900140f0:	bfb8      	it	lt
900140f2:	461a      	movlt	r2, r3
900140f4:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
900140f8:	4604      	mov	r4, r0
900140fa:	428b      	cmp	r3, r1
900140fc:	d103      	bne.n	90014106 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
900140fe:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
90014102:	4293      	cmp	r3, r2
90014104:	d011      	beq.n	9001412a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
90014106:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
9001410a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
9001410e:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
90014112:	f005 f8d2 	bl	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
90014116:	f104 0038 	add.w	r0, r4, #56	; 0x38
9001411a:	f005 f8ce 	bl	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9001411e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90014122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90014126:	f005 b8c8 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9001412a:	bd10      	pop	{r4, pc}

9001412c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
9001412c:	428a      	cmp	r2, r1
9001412e:	bfbc      	itt	lt
90014130:	460b      	movlt	r3, r1
90014132:	4611      	movlt	r1, r2
90014134:	b510      	push	{r4, lr}
90014136:	bfb8      	it	lt
90014138:	461a      	movlt	r2, r3
9001413a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
9001413e:	4604      	mov	r4, r0
90014140:	428b      	cmp	r3, r1
90014142:	d103      	bne.n	9001414c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
90014144:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
90014148:	4293      	cmp	r3, r2
9001414a:	d011      	beq.n	90014170 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
9001414c:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
90014150:	f104 0064 	add.w	r0, r4, #100	; 0x64
90014154:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
90014158:	f005 f8af 	bl	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
9001415c:	f104 0038 	add.w	r0, r4, #56	; 0x38
90014160:	f005 f8ab 	bl	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
90014164:	f104 0090 	add.w	r0, r4, #144	; 0x90
90014168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001416c:	f005 b8a5 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>
90014170:	bd10      	pop	{r4, pc}

90014172 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
90014172:	2300      	movs	r3, #0
90014174:	3038      	adds	r0, #56	; 0x38
90014176:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
9001417a:	f005 b89e 	b.w	900192ba <_ZNK8touchgfx8Drawable10invalidateEv>

9001417e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
9001417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014182:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014186:	4605      	mov	r5, r0
90014188:	4688      	mov	r8, r1
9001418a:	4617      	mov	r7, r2
9001418c:	2b00      	cmp	r3, #0
9001418e:	d03e      	beq.n	9001420e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
90014190:	6803      	ldr	r3, [r0, #0]
90014192:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014196:	4798      	blx	r3
90014198:	682b      	ldr	r3, [r5, #0]
9001419a:	4604      	mov	r4, r0
9001419c:	4628      	mov	r0, r5
9001419e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
900141a2:	4798      	blx	r3
900141a4:	4284      	cmp	r4, r0
900141a6:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
900141aa:	bfc2      	ittt	gt
900141ac:	4623      	movgt	r3, r4
900141ae:	4604      	movgt	r4, r0
900141b0:	4618      	movgt	r0, r3
900141b2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
900141b6:	42b3      	cmp	r3, r6
900141b8:	da29      	bge.n	9001420e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
900141ba:	42b0      	cmp	r0, r6
900141bc:	bfa8      	it	ge
900141be:	4630      	movge	r0, r6
900141c0:	2800      	cmp	r0, #0
900141c2:	db24      	blt.n	9001420e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
900141c4:	f1b8 0f00 	cmp.w	r8, #0
900141c8:	d11e      	bne.n	90014208 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
900141ca:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
900141ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
900141d2:	460c      	mov	r4, r1
900141d4:	009a      	lsls	r2, r3, #2
900141d6:	4298      	cmp	r0, r3
900141d8:	dd0b      	ble.n	900141f2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
900141da:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
900141de:	3301      	adds	r3, #1
900141e0:	58b6      	ldr	r6, [r6, r2]
900141e2:	3204      	adds	r2, #4
900141e4:	42b1      	cmp	r1, r6
900141e6:	bfa8      	it	ge
900141e8:	4631      	movge	r1, r6
900141ea:	42b4      	cmp	r4, r6
900141ec:	bfb8      	it	lt
900141ee:	4634      	movlt	r4, r6
900141f0:	e7f1      	b.n	900141d6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
900141f2:	1bc9      	subs	r1, r1, r7
900141f4:	193a      	adds	r2, r7, r4
900141f6:	4291      	cmp	r1, r2
900141f8:	d009      	beq.n	9001420e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
900141fa:	682b      	ldr	r3, [r5, #0]
900141fc:	4628      	mov	r0, r5
900141fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90014202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014206:	4718      	bx	r3
90014208:	427c      	negs	r4, r7
9001420a:	4639      	mov	r1, r7
9001420c:	e7e2      	b.n	900141d4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
9001420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014212 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
90014212:	b530      	push	{r4, r5, lr}
90014214:	790b      	ldrb	r3, [r1, #4]
90014216:	b085      	sub	sp, #20
90014218:	4604      	mov	r4, r0
9001421a:	460d      	mov	r5, r1
9001421c:	2b02      	cmp	r3, #2
9001421e:	d020      	beq.n	90014262 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90014220:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
90014222:	f10d 0206 	add.w	r2, sp, #6
90014226:	88c9      	ldrh	r1, [r1, #6]
90014228:	1ac9      	subs	r1, r1, r3
9001422a:	6803      	ldr	r3, [r0, #0]
9001422c:	b209      	sxth	r1, r1
9001422e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90014232:	4798      	blx	r3
90014234:	b1a8      	cbz	r0, 90014262 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90014236:	792b      	ldrb	r3, [r5, #4]
90014238:	2b01      	cmp	r3, #1
9001423a:	d812      	bhi.n	90014262 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
9001423c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90014240:	b178      	cbz	r0, 90014262 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
90014242:	6803      	ldr	r3, [r0, #0]
90014244:	68db      	ldr	r3, [r3, #12]
90014246:	4798      	blx	r3
90014248:	b158      	cbz	r0, 90014262 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
9001424a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
9001424e:	aa02      	add	r2, sp, #8
90014250:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
90014254:	4621      	mov	r1, r4
90014256:	f8ad 3008 	strh.w	r3, [sp, #8]
9001425a:	9503      	str	r5, [sp, #12]
9001425c:	6803      	ldr	r3, [r0, #0]
9001425e:	689b      	ldr	r3, [r3, #8]
90014260:	4798      	blx	r3
90014262:	b005      	add	sp, #20
90014264:	bd30      	pop	{r4, r5, pc}

90014266 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
90014266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001426a:	4604      	mov	r4, r0
9001426c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90014270:	4690      	mov	r8, r2
90014272:	461f      	mov	r7, r3
90014274:	9e06      	ldr	r6, [sp, #24]
90014276:	b928      	cbnz	r0, 90014284 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
90014278:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001427c:	8033      	strh	r3, [r6, #0]
9001427e:	803b      	strh	r3, [r7, #0]
90014280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014284:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90014288:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
9001428c:	1883      	adds	r3, r0, r2
9001428e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
90014292:	1ad2      	subs	r2, r2, r3
90014294:	b212      	sxth	r2, r2
90014296:	2a01      	cmp	r2, #1
90014298:	dc07      	bgt.n	900142aa <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
9001429a:	2300      	movs	r3, #0
9001429c:	803b      	strh	r3, [r7, #0]
9001429e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
900142a2:	3b01      	subs	r3, #1
900142a4:	8033      	strh	r3, [r6, #0]
900142a6:	2001      	movs	r0, #1
900142a8:	e7ea      	b.n	90014280 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
900142aa:	1a08      	subs	r0, r1, r0
900142ac:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
900142b0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
900142b4:	0140      	lsls	r0, r0, #5
900142b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
900142b8:	1a5b      	subs	r3, r3, r1
900142ba:	d459      	bmi.n	90014370 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
900142bc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
900142c0:	fb93 f1f5 	sdiv	r1, r3, r5
900142c4:	2302      	movs	r3, #2
900142c6:	fb91 f1f3 	sdiv	r1, r1, r3
900142ca:	3a01      	subs	r2, #1
900142cc:	f005 f9bc 	bl	90019648 <_ZN8touchgfx6muldivElll>
900142d0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
900142d4:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
900142d8:	2900      	cmp	r1, #0
900142da:	db55      	blt.n	90014388 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
900142dc:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
900142e0:	2502      	movs	r5, #2
900142e2:	fb93 f3fc 	sdiv	r3, r3, ip
900142e6:	fb93 f3f5 	sdiv	r3, r3, r5
900142ea:	eb00 1543 	add.w	r5, r0, r3, lsl #5
900142ee:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
900142f2:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
900142f6:	1a52      	subs	r2, r2, r1
900142f8:	eba8 0003 	sub.w	r0, r8, r3
900142fc:	ea4f 1040 	mov.w	r0, r0, lsl #5
90014300:	d44e      	bmi.n	900143a0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
90014302:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
90014306:	fb92 f1fc 	sdiv	r1, r2, ip
9001430a:	2202      	movs	r2, #2
9001430c:	fb91 f1f2 	sdiv	r1, r1, r2
90014310:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
90014314:	4413      	add	r3, r2
90014316:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
9001431a:	1ad2      	subs	r2, r2, r3
9001431c:	b212      	sxth	r2, r2
9001431e:	3a01      	subs	r2, #1
90014320:	f005 f992 	bl	90019648 <_ZN8touchgfx6muldivElll>
90014324:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
90014328:	6b22      	ldr	r2, [r4, #48]	; 0x30
9001432a:	2b00      	cmp	r3, #0
9001432c:	db44      	blt.n	900143b8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
9001432e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90014332:	fb93 f3f2 	sdiv	r3, r3, r2
90014336:	2202      	movs	r2, #2
90014338:	fb93 f3f2 	sdiv	r3, r3, r2
9001433c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
90014340:	2020      	movs	r0, #32
90014342:	429d      	cmp	r5, r3
90014344:	bfde      	ittt	le
90014346:	461a      	movle	r2, r3
90014348:	462b      	movle	r3, r5
9001434a:	4615      	movle	r5, r2
9001434c:	b21b      	sxth	r3, r3
9001434e:	2d00      	cmp	r5, #0
90014350:	bfaa      	itet	ge
90014352:	351f      	addge	r5, #31
90014354:	fb95 f5f0 	sdivlt	r5, r5, r0
90014358:	116d      	asrge	r5, r5, #5
9001435a:	fb93 f3f0 	sdiv	r3, r3, r0
9001435e:	b22d      	sxth	r5, r5
90014360:	803b      	strh	r3, [r7, #0]
90014362:	2d00      	cmp	r5, #0
90014364:	8035      	strh	r5, [r6, #0]
90014366:	da33      	bge.n	900143d0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
90014368:	2000      	movs	r0, #0
9001436a:	8030      	strh	r0, [r6, #0]
9001436c:	8038      	strh	r0, [r7, #0]
9001436e:	e787      	b.n	90014280 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
90014370:	f06f 0101 	mvn.w	r1, #1
90014374:	fb01 5303 	mla	r3, r1, r3, r5
90014378:	1e59      	subs	r1, r3, #1
9001437a:	2302      	movs	r3, #2
9001437c:	fb91 f1f5 	sdiv	r1, r1, r5
90014380:	fb91 f1f3 	sdiv	r1, r1, r3
90014384:	4249      	negs	r1, r1
90014386:	e7a0      	b.n	900142ca <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
90014388:	f06f 0301 	mvn.w	r3, #1
9001438c:	2502      	movs	r5, #2
9001438e:	fb03 c301 	mla	r3, r3, r1, ip
90014392:	3b01      	subs	r3, #1
90014394:	fb93 f3fc 	sdiv	r3, r3, ip
90014398:	fb93 f3f5 	sdiv	r3, r3, r5
9001439c:	425b      	negs	r3, r3
9001439e:	e7a4      	b.n	900142ea <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
900143a0:	f06f 0101 	mvn.w	r1, #1
900143a4:	fb01 c202 	mla	r2, r1, r2, ip
900143a8:	1e51      	subs	r1, r2, #1
900143aa:	2202      	movs	r2, #2
900143ac:	fb91 f1fc 	sdiv	r1, r1, ip
900143b0:	fb91 f1f2 	sdiv	r1, r1, r2
900143b4:	4249      	negs	r1, r1
900143b6:	e7ab      	b.n	90014310 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
900143b8:	f06f 0101 	mvn.w	r1, #1
900143bc:	fb01 2303 	mla	r3, r1, r3, r2
900143c0:	3b01      	subs	r3, #1
900143c2:	fb93 f3f2 	sdiv	r3, r3, r2
900143c6:	2202      	movs	r2, #2
900143c8:	fb93 f3f2 	sdiv	r3, r3, r2
900143cc:	425b      	negs	r3, r3
900143ce:	e7b5      	b.n	9001433c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
900143d0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
900143d4:	f9b7 2000 	ldrsh.w	r2, [r7]
900143d8:	4293      	cmp	r3, r2
900143da:	dc05      	bgt.n	900143e8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
900143dc:	3b01      	subs	r3, #1
900143de:	2000      	movs	r0, #0
900143e0:	b21b      	sxth	r3, r3
900143e2:	8033      	strh	r3, [r6, #0]
900143e4:	803b      	strh	r3, [r7, #0]
900143e6:	e74b      	b.n	90014280 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
900143e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
900143ec:	803a      	strh	r2, [r7, #0]
900143ee:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
900143f2:	f9b6 2000 	ldrsh.w	r2, [r6]
900143f6:	4293      	cmp	r3, r2
900143f8:	bfdc      	itt	le
900143fa:	f103 33ff 	addle.w	r3, r3, #4294967295
900143fe:	b21a      	sxthle	r2, r3
90014400:	8032      	strh	r2, [r6, #0]
90014402:	e750      	b.n	900142a6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

90014404 <_ZN8touchgfx8Drawable11setPositionEssss>:
90014404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014408:	461e      	mov	r6, r3
9001440a:	6803      	ldr	r3, [r0, #0]
9001440c:	4604      	mov	r4, r0
9001440e:	4617      	mov	r7, r2
90014410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014412:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
90014416:	4798      	blx	r3
90014418:	6823      	ldr	r3, [r4, #0]
9001441a:	4639      	mov	r1, r7
9001441c:	4620      	mov	r0, r4
9001441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90014420:	4798      	blx	r3
90014422:	6823      	ldr	r3, [r4, #0]
90014424:	4631      	mov	r1, r6
90014426:	4620      	mov	r0, r4
90014428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9001442a:	4790      	blx	r2
9001442c:	6823      	ldr	r3, [r4, #0]
9001442e:	4629      	mov	r1, r5
90014430:	4620      	mov	r0, r4
90014432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90014438:	4718      	bx	r3
	...

9001443c <_ZN8touchgfx9ContainerC1Ev>:
9001443c:	2101      	movs	r1, #1
9001443e:	2200      	movs	r2, #0
90014440:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90014444:	4909      	ldr	r1, [pc, #36]	; (9001446c <_ZN8touchgfx9ContainerC1Ev+0x30>)
90014446:	8082      	strh	r2, [r0, #4]
90014448:	80c2      	strh	r2, [r0, #6]
9001444a:	8102      	strh	r2, [r0, #8]
9001444c:	8142      	strh	r2, [r0, #10]
9001444e:	8182      	strh	r2, [r0, #12]
90014450:	81c2      	strh	r2, [r0, #14]
90014452:	8202      	strh	r2, [r0, #16]
90014454:	8242      	strh	r2, [r0, #18]
90014456:	61c2      	str	r2, [r0, #28]
90014458:	8402      	strh	r2, [r0, #32]
9001445a:	8442      	strh	r2, [r0, #34]	; 0x22
9001445c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90014460:	6001      	str	r1, [r0, #0]
90014462:	6282      	str	r2, [r0, #40]	; 0x28
90014464:	e9c0 2205 	strd	r2, r2, [r0, #20]
90014468:	4770      	bx	lr
9001446a:	bf00      	nop
9001446c:	9002bd08 	.word	0x9002bd08

90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
90014470:	6800      	ldr	r0, [r0, #0]
90014472:	2800      	cmp	r0, #0
90014474:	bfbd      	ittte	lt
90014476:	380f      	sublt	r0, #15
90014478:	2320      	movlt	r3, #32
9001447a:	fb90 f0f3 	sdivlt	r0, r0, r3
9001447e:	3010      	addge	r0, #16
90014480:	bfa8      	it	ge
90014482:	1140      	asrge	r0, r0, #5
90014484:	4770      	bx	lr

90014486 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
90014486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001448a:	4605      	mov	r5, r0
9001448c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90014490:	4688      	mov	r8, r1
90014492:	4691      	mov	r9, r2
90014494:	469a      	mov	sl, r3
90014496:	b360      	cbz	r0, 900144f2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
90014498:	2700      	movs	r7, #0
9001449a:	f04f 3bff 	mov.w	fp, #4294967295
9001449e:	b23e      	sxth	r6, r7
900144a0:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
900144a4:	42b3      	cmp	r3, r6
900144a6:	dd23      	ble.n	900144f0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
900144a8:	682b      	ldr	r3, [r5, #0]
900144aa:	4631      	mov	r1, r6
900144ac:	4628      	mov	r0, r5
900144ae:	3701      	adds	r7, #1
900144b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
900144b4:	4798      	blx	r3
900144b6:	9001      	str	r0, [sp, #4]
900144b8:	a801      	add	r0, sp, #4
900144ba:	f7ff ffd9 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
900144be:	682b      	ldr	r3, [r5, #0]
900144c0:	eba0 0008 	sub.w	r0, r0, r8
900144c4:	4631      	mov	r1, r6
900144c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
900144ca:	b204      	sxth	r4, r0
900144cc:	4628      	mov	r0, r5
900144ce:	4798      	blx	r3
900144d0:	9001      	str	r0, [sp, #4]
900144d2:	a801      	add	r0, sp, #4
900144d4:	f7ff ffcc 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
900144d8:	eba0 0009 	sub.w	r0, r0, r9
900144dc:	fb10 f000 	smulbb	r0, r0, r0
900144e0:	fb04 0404 	mla	r4, r4, r4, r0
900144e4:	455c      	cmp	r4, fp
900144e6:	bf3c      	itt	cc
900144e8:	f8aa 6000 	strhcc.w	r6, [sl]
900144ec:	46a3      	movcc	fp, r4
900144ee:	e7d6      	b.n	9001449e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
900144f0:	2001      	movs	r0, #1
900144f2:	b003      	add	sp, #12
900144f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900144f8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
900144f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
900144fc:	4604      	mov	r4, r0
900144fe:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
90014502:	4688      	mov	r8, r1
90014504:	4691      	mov	r9, r2
90014506:	b1f8      	cbz	r0, 90014548 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
90014508:	2500      	movs	r5, #0
9001450a:	f04f 37ff 	mov.w	r7, #4294967295
9001450e:	b22e      	sxth	r6, r5
90014510:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014514:	42b3      	cmp	r3, r6
90014516:	dd16      	ble.n	90014546 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
90014518:	6823      	ldr	r3, [r4, #0]
9001451a:	4631      	mov	r1, r6
9001451c:	4620      	mov	r0, r4
9001451e:	3501      	adds	r5, #1
90014520:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014524:	4798      	blx	r3
90014526:	9001      	str	r0, [sp, #4]
90014528:	a801      	add	r0, sp, #4
9001452a:	f7ff ffa1 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
9001452e:	b200      	sxth	r0, r0
90014530:	eba0 0008 	sub.w	r0, r0, r8
90014534:	2800      	cmp	r0, #0
90014536:	bfb8      	it	lt
90014538:	4240      	neglt	r0, r0
9001453a:	42b8      	cmp	r0, r7
9001453c:	bf3c      	itt	cc
9001453e:	f8a9 6000 	strhcc.w	r6, [r9]
90014542:	4607      	movcc	r7, r0
90014544:	e7e3      	b.n	9001450e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
90014546:	2001      	movs	r0, #1
90014548:	b003      	add	sp, #12
9001454a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

9001454e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
9001454e:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
90014552:	f9bd 3000 	ldrsh.w	r3, [sp]
90014556:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
9001455a:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
9001455e:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
90014562:	4770      	bx	lr

90014564 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
90014564:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014566:	4604      	mov	r4, r0
90014568:	3038      	adds	r0, #56	; 0x38
9001456a:	460d      	mov	r5, r1
9001456c:	f7fe faee 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014570:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
90014574:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90014578:	4628      	mov	r0, r5
9001457a:	9200      	str	r2, [sp, #0]
9001457c:	2200      	movs	r2, #0
9001457e:	4611      	mov	r1, r2
90014580:	f7ff ff40 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
90014584:	b003      	add	sp, #12
90014586:	bd30      	pop	{r4, r5, pc}

90014588 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
90014588:	b538      	push	{r3, r4, r5, lr}
9001458a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
9001458e:	460d      	mov	r5, r1
90014590:	428b      	cmp	r3, r1
90014592:	dd08      	ble.n	900145a6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90014594:	6e04      	ldr	r4, [r0, #96]	; 0x60
90014596:	b134      	cbz	r4, 900145a6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
90014598:	6823      	ldr	r3, [r4, #0]
9001459a:	4620      	mov	r0, r4
9001459c:	4629      	mov	r1, r5
9001459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900145a0:	4798      	blx	r3
900145a2:	69a4      	ldr	r4, [r4, #24]
900145a4:	e7f7      	b.n	90014596 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
900145a6:	bd38      	pop	{r3, r4, r5, pc}

900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
900145a8:	b570      	push	{r4, r5, r6, lr}
900145aa:	4606      	mov	r6, r0
900145ac:	460d      	mov	r5, r1
900145ae:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
900145b2:	b134      	cbz	r4, 900145c2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
900145b4:	6823      	ldr	r3, [r4, #0]
900145b6:	4620      	mov	r0, r4
900145b8:	4629      	mov	r1, r5
900145ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900145bc:	4798      	blx	r3
900145be:	69a4      	ldr	r4, [r4, #24]
900145c0:	e7f7      	b.n	900145b2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
900145c2:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
900145c6:	b134      	cbz	r4, 900145d6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
900145c8:	6823      	ldr	r3, [r4, #0]
900145ca:	4620      	mov	r0, r4
900145cc:	4629      	mov	r1, r5
900145ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900145d0:	4798      	blx	r3
900145d2:	69a4      	ldr	r4, [r4, #24]
900145d4:	e7f7      	b.n	900145c6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
900145d6:	bd70      	pop	{r4, r5, r6, pc}

900145d8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
900145d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900145da:	4604      	mov	r4, r0
900145dc:	6e05      	ldr	r5, [r0, #96]	; 0x60
900145de:	b15d      	cbz	r5, 900145f8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
900145e0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
900145e4:	4628      	mov	r0, r5
900145e6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900145ea:	9200      	str	r2, [sp, #0]
900145ec:	2200      	movs	r2, #0
900145ee:	4611      	mov	r1, r2
900145f0:	f7ff ff08 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
900145f4:	69ad      	ldr	r5, [r5, #24]
900145f6:	e7f2      	b.n	900145de <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
900145f8:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
900145fc:	b15d      	cbz	r5, 90014616 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
900145fe:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
90014602:	4628      	mov	r0, r5
90014604:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
90014608:	9200      	str	r2, [sp, #0]
9001460a:	2200      	movs	r2, #0
9001460c:	4611      	mov	r1, r2
9001460e:	f7ff fef9 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
90014612:	69ad      	ldr	r5, [r5, #24]
90014614:	e7f2      	b.n	900145fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
90014616:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
9001461a:	b15d      	cbz	r5, 90014634 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
9001461c:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
90014620:	4628      	mov	r0, r5
90014622:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
90014626:	9200      	str	r2, [sp, #0]
90014628:	2200      	movs	r2, #0
9001462a:	4611      	mov	r1, r2
9001462c:	f7ff feea 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
90014630:	69ad      	ldr	r5, [r5, #24]
90014632:	e7f2      	b.n	9001461a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
90014634:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
90014638:	b15d      	cbz	r5, 90014652 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
9001463a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
9001463e:	4628      	mov	r0, r5
90014640:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
90014644:	9200      	str	r2, [sp, #0]
90014646:	2200      	movs	r2, #0
90014648:	4611      	mov	r1, r2
9001464a:	f7ff fedb 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
9001464e:	69ad      	ldr	r5, [r5, #24]
90014650:	e7f2      	b.n	90014638 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
90014652:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
90014656:	b15d      	cbz	r5, 90014670 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
90014658:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
9001465c:	4628      	mov	r0, r5
9001465e:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
90014662:	9200      	str	r2, [sp, #0]
90014664:	2200      	movs	r2, #0
90014666:	4611      	mov	r1, r2
90014668:	f7ff fecc 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
9001466c:	69ad      	ldr	r5, [r5, #24]
9001466e:	e7f2      	b.n	90014656 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
90014670:	6823      	ldr	r3, [r4, #0]
90014672:	4620      	mov	r0, r4
90014674:	695b      	ldr	r3, [r3, #20]
90014676:	b003      	add	sp, #12
90014678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9001467c:	4718      	bx	r3

9001467e <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
9001467e:	b430      	push	{r4, r5}
90014680:	b28a      	uxth	r2, r1
90014682:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
90014686:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
9001468a:	1b15      	subs	r5, r2, r4
9001468c:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
90014690:	8101      	strh	r1, [r0, #8]
90014692:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
90014696:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
9001469a:	442c      	add	r4, r5
9001469c:	1b12      	subs	r2, r2, r4
9001469e:	bc30      	pop	{r4, r5}
900146a0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
900146a4:	f7ff bf98 	b.w	900145d8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

900146a8 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
900146a8:	b430      	push	{r4, r5}
900146aa:	b28a      	uxth	r2, r1
900146ac:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
900146b0:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
900146b4:	1b15      	subs	r5, r2, r4
900146b6:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
900146ba:	8141      	strh	r1, [r0, #10]
900146bc:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
900146c0:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
900146c4:	442c      	add	r4, r5
900146c6:	1b12      	subs	r2, r2, r4
900146c8:	bc30      	pop	{r4, r5}
900146ca:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
900146ce:	f7ff bf83 	b.w	900145d8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

900146d2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
900146d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
900146d6:	fa1f fa83 	uxth.w	sl, r3
900146da:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
900146de:	4615      	mov	r5, r2
900146e0:	4699      	mov	r9, r3
900146e2:	fa1f f887 	uxth.w	r8, r7
900146e6:	8903      	ldrh	r3, [r0, #8]
900146e8:	4452      	add	r2, sl
900146ea:	4604      	mov	r4, r0
900146ec:	8940      	ldrh	r0, [r0, #10]
900146ee:	460e      	mov	r6, r1
900146f0:	1a9b      	subs	r3, r3, r2
900146f2:	eb08 0201 	add.w	r2, r8, r1
900146f6:	1a80      	subs	r0, r0, r2
900146f8:	b21b      	sxth	r3, r3
900146fa:	460a      	mov	r2, r1
900146fc:	4629      	mov	r1, r5
900146fe:	b200      	sxth	r0, r0
90014700:	9000      	str	r0, [sp, #0]
90014702:	f104 0038 	add.w	r0, r4, #56	; 0x38
90014706:	f7ff fe7d 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
9001470a:	2200      	movs	r2, #0
9001470c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90014710:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
90014714:	4611      	mov	r1, r2
90014716:	9600      	str	r6, [sp, #0]
90014718:	f7ff fe74 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
9001471c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014720:	2200      	movs	r2, #0
90014722:	f104 0064 	add.w	r0, r4, #100	; 0x64
90014726:	9300      	str	r3, [sp, #0]
90014728:	462b      	mov	r3, r5
9001472a:	4611      	mov	r1, r2
9001472c:	f7ff fe6a 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
90014730:	8921      	ldrh	r1, [r4, #8]
90014732:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014736:	f104 0090 	add.w	r0, r4, #144	; 0x90
9001473a:	eba1 010a 	sub.w	r1, r1, sl
9001473e:	2200      	movs	r2, #0
90014740:	9300      	str	r3, [sp, #0]
90014742:	464b      	mov	r3, r9
90014744:	b209      	sxth	r1, r1
90014746:	f7ff fe5d 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
9001474a:	8962      	ldrh	r2, [r4, #10]
9001474c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
90014750:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
90014754:	eba2 0208 	sub.w	r2, r2, r8
90014758:	9700      	str	r7, [sp, #0]
9001475a:	2100      	movs	r1, #0
9001475c:	b212      	sxth	r2, r2
9001475e:	f7ff fe51 	bl	90014404 <_ZN8touchgfx8Drawable11setPositionEssss>
90014762:	4620      	mov	r0, r4
90014764:	b002      	add	sp, #8
90014766:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001476a:	f7ff bf35 	b.w	900145d8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

90014770 <_ZN8touchgfx17AbstractDataGraphC1Es>:
90014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014774:	b085      	sub	sp, #20
90014776:	4604      	mov	r4, r0
90014778:	2601      	movs	r6, #1
9001477a:	2500      	movs	r5, #0
9001477c:	9103      	str	r1, [sp, #12]
9001477e:	f7ff fe5d 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
90014782:	4b2c      	ldr	r3, [pc, #176]	; (90014834 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
90014784:	f104 0b38 	add.w	fp, r4, #56	; 0x38
90014788:	f104 0964 	add.w	r9, r4, #100	; 0x64
9001478c:	f104 0890 	add.w	r8, r4, #144	; 0x90
90014790:	6023      	str	r3, [r4, #0]
90014792:	23ff      	movs	r3, #255	; 0xff
90014794:	4658      	mov	r0, fp
90014796:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
9001479a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
9001479e:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
900147a2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
900147a6:	f7ff fe49 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
900147aa:	4648      	mov	r0, r9
900147ac:	f7ff fe46 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
900147b0:	4640      	mov	r0, r8
900147b2:	f7ff fe43 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
900147b6:	4650      	mov	r0, sl
900147b8:	f7ff fe40 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
900147bc:	4638      	mov	r0, r7
900147be:	f7ff fe3d 	bl	9001443c <_ZN8touchgfx9ContainerC1Ev>
900147c2:	9903      	ldr	r1, [sp, #12]
900147c4:	4620      	mov	r0, r4
900147c6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
900147ca:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
900147ce:	4659      	mov	r1, fp
900147d0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
900147d4:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
900147d8:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
900147dc:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
900147e0:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
900147e4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
900147e8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
900147ec:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
900147f0:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
900147f4:	f7fe f9aa 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
900147f8:	4651      	mov	r1, sl
900147fa:	4620      	mov	r0, r4
900147fc:	f7fe f9a6 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014800:	4649      	mov	r1, r9
90014802:	4620      	mov	r0, r4
90014804:	f7fe f9a2 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014808:	4641      	mov	r1, r8
9001480a:	4620      	mov	r0, r4
9001480c:	f7fe f99e 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014810:	4639      	mov	r1, r7
90014812:	4620      	mov	r0, r4
90014814:	f7fe f99a 	bl	90012b4c <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014818:	4620      	mov	r0, r4
9001481a:	9500      	str	r5, [sp, #0]
9001481c:	462b      	mov	r3, r5
9001481e:	462a      	mov	r2, r5
90014820:	4629      	mov	r1, r5
90014822:	f7ff ff56 	bl	900146d2 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
90014826:	4620      	mov	r0, r4
90014828:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
9001482c:	b005      	add	sp, #20
9001482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014832:	bf00      	nop
90014834:	9002c010 	.word	0x9002c010

90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
90014838:	4291      	cmp	r1, r2
9001483a:	4613      	mov	r3, r2
9001483c:	d003      	beq.n	90014846 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
9001483e:	460a      	mov	r2, r1
90014840:	4619      	mov	r1, r3
90014842:	f004 bf01 	b.w	90019648 <_ZN8touchgfx6muldivElll>
90014846:	4770      	bx	lr

90014848 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
90014848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001484c:	6803      	ldr	r3, [r0, #0]
9001484e:	460d      	mov	r5, r1
90014850:	4604      	mov	r4, r0
90014852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90014856:	4798      	blx	r3
90014858:	42a8      	cmp	r0, r5
9001485a:	4606      	mov	r6, r0
9001485c:	d024      	beq.n	900148a8 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
9001485e:	6823      	ldr	r3, [r4, #0]
90014860:	4601      	mov	r1, r0
90014862:	462a      	mov	r2, r5
90014864:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
90014868:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
9001486c:	f7ff ffe4 	bl	90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014870:	4680      	mov	r8, r0
90014872:	462a      	mov	r2, r5
90014874:	4631      	mov	r1, r6
90014876:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
9001487a:	f7ff ffdd 	bl	90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
9001487e:	4641      	mov	r1, r8
90014880:	4602      	mov	r2, r0
90014882:	4620      	mov	r0, r4
90014884:	47b8      	blx	r7
90014886:	462a      	mov	r2, r5
90014888:	4631      	mov	r1, r6
9001488a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
9001488e:	f7ff ffd3 	bl	90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
90014892:	462a      	mov	r2, r5
90014894:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
90014898:	4631      	mov	r1, r6
9001489a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
9001489e:	f7ff ffcb 	bl	90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900148a2:	6325      	str	r5, [r4, #48]	; 0x30
900148a4:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
900148a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900148ac <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
900148ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900148b0:	4604      	mov	r4, r0
900148b2:	460f      	mov	r7, r1
900148b4:	b1b2      	cbz	r2, 900148e4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
900148b6:	6803      	ldr	r3, [r0, #0]
900148b8:	2600      	movs	r6, #0
900148ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
900148be:	4798      	blx	r3
900148c0:	4681      	mov	r9, r0
900148c2:	b235      	sxth	r5, r6
900148c4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
900148c8:	3601      	adds	r6, #1
900148ca:	42ab      	cmp	r3, r5
900148cc:	dd0a      	ble.n	900148e4 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
900148ce:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
900148d2:	463a      	mov	r2, r7
900148d4:	4649      	mov	r1, r9
900148d6:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
900148da:	f7ff ffad 	bl	90014838 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
900148de:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
900148e2:	e7ee      	b.n	900148c2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
900148e4:	6367      	str	r7, [r4, #52]	; 0x34
900148e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

900148ea <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
900148ea:	b570      	push	{r4, r5, r6, lr}
900148ec:	6803      	ldr	r3, [r0, #0]
900148ee:	4604      	mov	r4, r0
900148f0:	460d      	mov	r5, r1
900148f2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
900148f6:	4798      	blx	r3
900148f8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
900148fc:	4629      	mov	r1, r5
900148fe:	4620      	mov	r0, r4
90014900:	3301      	adds	r3, #1
90014902:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90014906:	6823      	ldr	r3, [r4, #0]
90014908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001490c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
90014910:	4718      	bx	r3

90014912 <_ZN8touchgfx16GraphElementLineD1Ev>:
90014912:	4770      	bx	lr

90014914 <_ZN8touchgfx16GraphElementLineD0Ev>:
90014914:	b510      	push	{r4, lr}
90014916:	4604      	mov	r4, r0
90014918:	2130      	movs	r1, #48	; 0x30
9001491a:	f012 febc 	bl	90027696 <_ZdlPvj>
9001491e:	4620      	mov	r0, r4
90014920:	bd10      	pop	{r4, pc}

90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014924:	4604      	mov	r4, r0
90014926:	4608      	mov	r0, r1
90014928:	460d      	mov	r5, r1
9001492a:	f7fe fad6 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001492e:	b978      	cbnz	r0, 90014950 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014930:	4620      	mov	r0, r4
90014932:	f7fe fad2 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90014936:	f9b5 6000 	ldrsh.w	r6, [r5]
9001493a:	b150      	cbz	r0, 90014952 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001493c:	8026      	strh	r6, [r4, #0]
9001493e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90014942:	8063      	strh	r3, [r4, #2]
90014944:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90014948:	80a3      	strh	r3, [r4, #4]
9001494a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9001494e:	80e3      	strh	r3, [r4, #6]
90014950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014952:	f9b4 1000 	ldrsh.w	r1, [r4]
90014956:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
9001495a:	42b1      	cmp	r1, r6
9001495c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90014960:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90014964:	460f      	mov	r7, r1
90014966:	88ed      	ldrh	r5, [r5, #6]
90014968:	bfa8      	it	ge
9001496a:	4637      	movge	r7, r6
9001496c:	4293      	cmp	r3, r2
9001496e:	4618      	mov	r0, r3
90014970:	4466      	add	r6, ip
90014972:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014976:	bfa8      	it	ge
90014978:	4610      	movge	r0, r2
9001497a:	442a      	add	r2, r5
9001497c:	88e5      	ldrh	r5, [r4, #6]
9001497e:	4461      	add	r1, ip
90014980:	b236      	sxth	r6, r6
90014982:	8027      	strh	r7, [r4, #0]
90014984:	442b      	add	r3, r5
90014986:	b209      	sxth	r1, r1
90014988:	b212      	sxth	r2, r2
9001498a:	8060      	strh	r0, [r4, #2]
9001498c:	b21b      	sxth	r3, r3
9001498e:	428e      	cmp	r6, r1
90014990:	bfac      	ite	ge
90014992:	ebc7 0106 	rsbge	r1, r7, r6
90014996:	ebc7 0101 	rsblt	r1, r7, r1
9001499a:	429a      	cmp	r2, r3
9001499c:	bfac      	ite	ge
9001499e:	ebc0 0202 	rsbge	r2, r0, r2
900149a2:	ebc0 0203 	rsblt	r2, r0, r3
900149a6:	80a1      	strh	r1, [r4, #4]
900149a8:	80e2      	strh	r2, [r4, #6]
900149aa:	e7d1      	b.n	90014950 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

900149ac <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
900149ac:	6800      	ldr	r0, [r0, #0]
900149ae:	2800      	cmp	r0, #0
900149b0:	bfb9      	ittee	lt
900149b2:	2320      	movlt	r3, #32
900149b4:	fb90 f0f3 	sdivlt	r0, r0, r3
900149b8:	301f      	addge	r0, #31
900149ba:	1140      	asrge	r0, r0, #5
900149bc:	4770      	bx	lr

900149be <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
900149be:	b510      	push	{r4, lr}
900149c0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
900149c4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
900149c8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
900149cc:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
900149d0:	139b      	asrs	r3, r3, #14
900149d2:	13a4      	asrs	r4, r4, #14
900149d4:	429c      	cmp	r4, r3
900149d6:	bfb8      	it	lt
900149d8:	461c      	movlt	r4, r3
900149da:	2c01      	cmp	r4, #1
900149dc:	dd07      	ble.n	900149ee <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
900149de:	fb91 f1f4 	sdiv	r1, r1, r4
900149e2:	fb90 f0f4 	sdiv	r0, r0, r4
900149e6:	f7ff ffea 	bl	900149be <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
900149ea:	4360      	muls	r0, r4
900149ec:	bd10      	pop	{r4, pc}
900149ee:	4340      	muls	r0, r0
900149f0:	fb01 0101 	mla	r1, r1, r1, r0
900149f4:	2000      	movs	r0, #0
900149f6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
900149fa:	bfb4      	ite	lt
900149fc:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
90014a00:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
90014a04:	18c2      	adds	r2, r0, r3
90014a06:	428a      	cmp	r2, r1
90014a08:	bf9c      	itt	ls
90014a0a:	1898      	addls	r0, r3, r2
90014a0c:	1a89      	subls	r1, r1, r2
90014a0e:	089b      	lsrs	r3, r3, #2
90014a10:	ea4f 0050 	mov.w	r0, r0, lsr #1
90014a14:	d1f6      	bne.n	90014a04 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
90014a16:	e7e9      	b.n	900149ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

90014a18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
90014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014a1a:	9906      	ldr	r1, [sp, #24]
90014a1c:	4606      	mov	r6, r0
90014a1e:	461c      	mov	r4, r3
90014a20:	2020      	movs	r0, #32
90014a22:	4291      	cmp	r1, r2
90014a24:	bfbc      	itt	lt
90014a26:	9206      	strlt	r2, [sp, #24]
90014a28:	460a      	movlt	r2, r1
90014a2a:	9907      	ldr	r1, [sp, #28]
90014a2c:	428b      	cmp	r3, r1
90014a2e:	bfc4      	itt	gt
90014a30:	460c      	movgt	r4, r1
90014a32:	9307      	strgt	r3, [sp, #28]
90014a34:	fb92 f5f0 	sdiv	r5, r2, r0
90014a38:	fb94 f4f0 	sdiv	r4, r4, r0
90014a3c:	a806      	add	r0, sp, #24
90014a3e:	f7ff ffb5 	bl	900149ac <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014a42:	4607      	mov	r7, r0
90014a44:	a807      	add	r0, sp, #28
90014a46:	f7ff ffb1 	bl	900149ac <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014a4a:	1b7a      	subs	r2, r7, r5
90014a4c:	1b00      	subs	r0, r0, r4
90014a4e:	8035      	strh	r5, [r6, #0]
90014a50:	8074      	strh	r4, [r6, #2]
90014a52:	80f0      	strh	r0, [r6, #6]
90014a54:	4630      	mov	r0, r6
90014a56:	80b2      	strh	r2, [r6, #4]
90014a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90014a5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
90014a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90014a5c:	9c08      	ldr	r4, [sp, #32]
90014a5e:	2602      	movs	r6, #2
90014a60:	4605      	mov	r5, r0
90014a62:	3401      	adds	r4, #1
90014a64:	fb94 f4f6 	sdiv	r4, r4, r6
90014a68:	18a6      	adds	r6, r4, r2
90014a6a:	191f      	adds	r7, r3, r4
90014a6c:	1b12      	subs	r2, r2, r4
90014a6e:	1b1b      	subs	r3, r3, r4
90014a70:	e9cd 6700 	strd	r6, r7, [sp]
90014a74:	f7ff ffd0 	bl	90014a18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
90014a78:	4628      	mov	r0, r5
90014a7a:	b003      	add	sp, #12
90014a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

90014a7e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
90014a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014a82:	6943      	ldr	r3, [r0, #20]
90014a84:	b087      	sub	sp, #28
90014a86:	4606      	mov	r6, r0
90014a88:	460d      	mov	r5, r1
90014a8a:	2b00      	cmp	r3, #0
90014a8c:	d072      	beq.n	90014b74 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
90014a8e:	695c      	ldr	r4, [r3, #20]
90014a90:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
90014a94:	6823      	ldr	r3, [r4, #0]
90014a96:	4620      	mov	r0, r4
90014a98:	017f      	lsls	r7, r7, #5
90014a9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014a9e:	4798      	blx	r3
90014aa0:	6823      	ldr	r3, [r4, #0]
90014aa2:	4680      	mov	r8, r0
90014aa4:	4629      	mov	r1, r5
90014aa6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014aaa:	4620      	mov	r0, r4
90014aac:	4798      	blx	r3
90014aae:	9700      	str	r7, [sp, #0]
90014ab0:	4603      	mov	r3, r0
90014ab2:	4642      	mov	r2, r8
90014ab4:	4631      	mov	r1, r6
90014ab6:	a802      	add	r0, sp, #8
90014ab8:	f7ff ffcf 	bl	90014a5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014abc:	2d00      	cmp	r5, #0
90014abe:	dd1b      	ble.n	90014af8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
90014ac0:	f105 38ff 	add.w	r8, r5, #4294967295
90014ac4:	6823      	ldr	r3, [r4, #0]
90014ac6:	4620      	mov	r0, r4
90014ac8:	fa0f f888 	sxth.w	r8, r8
90014acc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014ad0:	4641      	mov	r1, r8
90014ad2:	4798      	blx	r3
90014ad4:	6823      	ldr	r3, [r4, #0]
90014ad6:	4681      	mov	r9, r0
90014ad8:	4641      	mov	r1, r8
90014ada:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014ade:	4620      	mov	r0, r4
90014ae0:	4798      	blx	r3
90014ae2:	4631      	mov	r1, r6
90014ae4:	4603      	mov	r3, r0
90014ae6:	9700      	str	r7, [sp, #0]
90014ae8:	a804      	add	r0, sp, #16
90014aea:	464a      	mov	r2, r9
90014aec:	f7ff ffb5 	bl	90014a5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014af0:	a904      	add	r1, sp, #16
90014af2:	a802      	add	r0, sp, #8
90014af4:	f7ff ff15 	bl	90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014af8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014afc:	3b01      	subs	r3, #1
90014afe:	429d      	cmp	r5, r3
90014b00:	da19      	bge.n	90014b36 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
90014b02:	3501      	adds	r5, #1
90014b04:	6823      	ldr	r3, [r4, #0]
90014b06:	4620      	mov	r0, r4
90014b08:	b22d      	sxth	r5, r5
90014b0a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014b0e:	4629      	mov	r1, r5
90014b10:	4798      	blx	r3
90014b12:	6823      	ldr	r3, [r4, #0]
90014b14:	4680      	mov	r8, r0
90014b16:	4629      	mov	r1, r5
90014b18:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014b1c:	4620      	mov	r0, r4
90014b1e:	4798      	blx	r3
90014b20:	4631      	mov	r1, r6
90014b22:	4603      	mov	r3, r0
90014b24:	9700      	str	r7, [sp, #0]
90014b26:	a804      	add	r0, sp, #16
90014b28:	4642      	mov	r2, r8
90014b2a:	f7ff ff96 	bl	90014a5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
90014b2e:	a904      	add	r1, sp, #16
90014b30:	a802      	add	r0, sp, #8
90014b32:	f7ff fef6 	bl	90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014b36:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
90014b3a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
90014b3e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014b42:	18ca      	adds	r2, r1, r3
90014b44:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90014b48:	f8ad 1012 	strh.w	r1, [sp, #18]
90014b4c:	a904      	add	r1, sp, #16
90014b4e:	1a9b      	subs	r3, r3, r2
90014b50:	2200      	movs	r2, #0
90014b52:	f8ad 0014 	strh.w	r0, [sp, #20]
90014b56:	a802      	add	r0, sp, #8
90014b58:	f8ad 2010 	strh.w	r2, [sp, #16]
90014b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
90014b60:	f7fe f978 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90014b64:	6833      	ldr	r3, [r6, #0]
90014b66:	a902      	add	r1, sp, #8
90014b68:	4630      	mov	r0, r6
90014b6a:	691b      	ldr	r3, [r3, #16]
90014b6c:	4798      	blx	r3
90014b6e:	b007      	add	sp, #28
90014b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014b74:	681b      	ldr	r3, [r3, #0]
90014b76:	deff      	udf	#255	; 0xff

90014b78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
90014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014b7c:	b08b      	sub	sp, #44	; 0x2c
90014b7e:	461e      	mov	r6, r3
90014b80:	460f      	mov	r7, r1
90014b82:	4615      	mov	r5, r2
90014b84:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
90014b88:	429e      	cmp	r6, r3
90014b8a:	9304      	str	r3, [sp, #16]
90014b8c:	d074      	beq.n	90014c78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
90014b8e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014b92:	4631      	mov	r1, r6
90014b94:	4610      	mov	r0, r2
90014b96:	4634      	mov	r4, r6
90014b98:	015b      	lsls	r3, r3, #5
90014b9a:	9303      	str	r3, [sp, #12]
90014b9c:	6813      	ldr	r3, [r2, #0]
90014b9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014ba2:	4798      	blx	r3
90014ba4:	ab0a      	add	r3, sp, #40	; 0x28
90014ba6:	f843 0d10 	str.w	r0, [r3, #-16]!
90014baa:	4618      	mov	r0, r3
90014bac:	f7ff fc60 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014bb0:	682b      	ldr	r3, [r5, #0]
90014bb2:	4631      	mov	r1, r6
90014bb4:	ea4f 1840 	mov.w	r8, r0, lsl #5
90014bb8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014bbc:	4628      	mov	r0, r5
90014bbe:	4798      	blx	r3
90014bc0:	ab0a      	add	r3, sp, #40	; 0x28
90014bc2:	f843 0d0c 	str.w	r0, [r3, #-12]!
90014bc6:	4618      	mov	r0, r3
90014bc8:	f7ff fc52 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014bcc:	4641      	mov	r1, r8
90014bce:	ea4f 1940 	mov.w	r9, r0, lsl #5
90014bd2:	4638      	mov	r0, r7
90014bd4:	464a      	mov	r2, r9
90014bd6:	f012 fc9d 	bl	90027514 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
90014bda:	2301      	movs	r3, #1
90014bdc:	9300      	str	r3, [sp, #0]
90014bde:	4628      	mov	r0, r5
90014be0:	9b00      	ldr	r3, [sp, #0]
90014be2:	441c      	add	r4, r3
90014be4:	682b      	ldr	r3, [r5, #0]
90014be6:	b224      	sxth	r4, r4
90014be8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
90014bec:	4621      	mov	r1, r4
90014bee:	4798      	blx	r3
90014bf0:	9008      	str	r0, [sp, #32]
90014bf2:	a808      	add	r0, sp, #32
90014bf4:	f7ff fc3c 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014bf8:	4621      	mov	r1, r4
90014bfa:	0143      	lsls	r3, r0, #5
90014bfc:	4628      	mov	r0, r5
90014bfe:	9301      	str	r3, [sp, #4]
90014c00:	682b      	ldr	r3, [r5, #0]
90014c02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
90014c06:	4798      	blx	r3
90014c08:	9009      	str	r0, [sp, #36]	; 0x24
90014c0a:	a809      	add	r0, sp, #36	; 0x24
90014c0c:	f7ff fc30 	bl	90014470 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
90014c10:	0143      	lsls	r3, r0, #5
90014c12:	9302      	str	r3, [sp, #8]
90014c14:	9b01      	ldr	r3, [sp, #4]
90014c16:	eba3 0b08 	sub.w	fp, r3, r8
90014c1a:	9b02      	ldr	r3, [sp, #8]
90014c1c:	eba3 0a09 	sub.w	sl, r3, r9
90014c20:	4658      	mov	r0, fp
90014c22:	4651      	mov	r1, sl
90014c24:	f7ff fecb 	bl	900149be <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
90014c28:	b320      	cbz	r0, 90014c74 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
90014c2a:	4602      	mov	r2, r0
90014c2c:	4651      	mov	r1, sl
90014c2e:	9005      	str	r0, [sp, #20]
90014c30:	9803      	ldr	r0, [sp, #12]
90014c32:	f004 fd09 	bl	90019648 <_ZN8touchgfx6muldivElll>
90014c36:	2302      	movs	r3, #2
90014c38:	4659      	mov	r1, fp
90014c3a:	fb90 faf3 	sdiv	sl, r0, r3
90014c3e:	9b05      	ldr	r3, [sp, #20]
90014c40:	9803      	ldr	r0, [sp, #12]
90014c42:	461a      	mov	r2, r3
90014c44:	f004 fd00 	bl	90019648 <_ZN8touchgfx6muldivElll>
90014c48:	2302      	movs	r3, #2
90014c4a:	eba8 010a 	sub.w	r1, r8, sl
90014c4e:	fb90 fbf3 	sdiv	fp, r0, r3
90014c52:	683b      	ldr	r3, [r7, #0]
90014c54:	eb0b 0209 	add.w	r2, fp, r9
90014c58:	4638      	mov	r0, r7
90014c5a:	689b      	ldr	r3, [r3, #8]
90014c5c:	4798      	blx	r3
90014c5e:	683b      	ldr	r3, [r7, #0]
90014c60:	9a02      	ldr	r2, [sp, #8]
90014c62:	4638      	mov	r0, r7
90014c64:	9901      	ldr	r1, [sp, #4]
90014c66:	689b      	ldr	r3, [r3, #8]
90014c68:	445a      	add	r2, fp
90014c6a:	eba1 010a 	sub.w	r1, r1, sl
90014c6e:	4798      	blx	r3
90014c70:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
90014c74:	42a6      	cmp	r6, r4
90014c76:	db02      	blt.n	90014c7e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
90014c78:	b00b      	add	sp, #44	; 0x2c
90014c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014c7e:	9b00      	ldr	r3, [sp, #0]
90014c80:	9a04      	ldr	r2, [sp, #16]
90014c82:	42a2      	cmp	r2, r4
90014c84:	bf08      	it	eq
90014c86:	f04f 33ff 	moveq.w	r3, #4294967295
90014c8a:	e7a7      	b.n	90014bdc <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

90014c8c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
90014c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014c90:	6943      	ldr	r3, [r0, #20]
90014c92:	b0a2      	sub	sp, #136	; 0x88
90014c94:	4606      	mov	r6, r0
90014c96:	460f      	mov	r7, r1
90014c98:	2b00      	cmp	r3, #0
90014c9a:	d06c      	beq.n	90014d76 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
90014c9c:	695c      	ldr	r4, [r3, #20]
90014c9e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
90014ca2:	2b01      	cmp	r3, #1
90014ca4:	dc04      	bgt.n	90014cb0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
90014ca6:	2401      	movs	r4, #1
90014ca8:	4620      	mov	r0, r4
90014caa:	b022      	add	sp, #136	; 0x88
90014cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90014cb0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014cb4:	ad22      	add	r5, sp, #136	; 0x88
90014cb6:	011b      	lsls	r3, r3, #4
90014cb8:	f845 3d70 	str.w	r3, [r5, #-112]!
90014cbc:	4628      	mov	r0, r5
90014cbe:	f7ff fe75 	bl	900149ac <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
90014cc2:	8839      	ldrh	r1, [r7, #0]
90014cc4:	88ba      	ldrh	r2, [r7, #4]
90014cc6:	b280      	uxth	r0, r0
90014cc8:	6823      	ldr	r3, [r4, #0]
90014cca:	440a      	add	r2, r1
90014ccc:	1a09      	subs	r1, r1, r0
90014cce:	4402      	add	r2, r0
90014cd0:	f10d 000e 	add.w	r0, sp, #14
90014cd4:	b209      	sxth	r1, r1
90014cd6:	9000      	str	r0, [sp, #0]
90014cd8:	b212      	sxth	r2, r2
90014cda:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
90014cde:	4620      	mov	r0, r4
90014ce0:	ab03      	add	r3, sp, #12
90014ce2:	47c0      	blx	r8
90014ce4:	2800      	cmp	r0, #0
90014ce6:	d0de      	beq.n	90014ca6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
90014ce8:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
90014cec:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
90014cf0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
90014cf4:	18ca      	adds	r2, r1, r3
90014cf6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
90014cfa:	f8ad 1012 	strh.w	r1, [sp, #18]
90014cfe:	4639      	mov	r1, r7
90014d00:	1a9b      	subs	r3, r3, r2
90014d02:	2200      	movs	r2, #0
90014d04:	f8ad 0014 	strh.w	r0, [sp, #20]
90014d08:	a804      	add	r0, sp, #16
90014d0a:	f8ad 3016 	strh.w	r3, [sp, #22]
90014d0e:	f8ad 2010 	strh.w	r2, [sp, #16]
90014d12:	f7fe f89f 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90014d16:	aa04      	add	r2, sp, #16
90014d18:	4631      	mov	r1, r6
90014d1a:	4628      	mov	r0, r5
90014d1c:	f012 fa80 	bl	90027220 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
90014d20:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
90014d24:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90014d28:	2f00      	cmp	r7, #0
90014d2a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
90014d2e:	dd03      	ble.n	90014d38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014d30:	42bb      	cmp	r3, r7
90014d32:	da01      	bge.n	90014d38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
90014d34:	42ba      	cmp	r2, r7
90014d36:	da11      	bge.n	90014d5c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
90014d38:	9200      	str	r2, [sp, #0]
90014d3a:	4622      	mov	r2, r4
90014d3c:	4629      	mov	r1, r5
90014d3e:	4630      	mov	r0, r6
90014d40:	f7ff ff1a 	bl	90014b78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
90014d44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
90014d48:	4628      	mov	r0, r5
90014d4a:	f012 fb25 	bl	90027398 <_ZN8touchgfx6Canvas6renderEh>
90014d4e:	4b0b      	ldr	r3, [pc, #44]	; (90014d7c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
90014d50:	4604      	mov	r4, r0
90014d52:	a80e      	add	r0, sp, #56	; 0x38
90014d54:	9306      	str	r3, [sp, #24]
90014d56:	f000 ff19 	bl	90015b8c <_ZN8touchgfx7OutlineD1Ev>
90014d5a:	e7a5      	b.n	90014ca8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
90014d5c:	1e7a      	subs	r2, r7, #1
90014d5e:	4629      	mov	r1, r5
90014d60:	4630      	mov	r0, r6
90014d62:	b212      	sxth	r2, r2
90014d64:	9200      	str	r2, [sp, #0]
90014d66:	4622      	mov	r2, r4
90014d68:	f7ff ff06 	bl	90014b78 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
90014d6c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014d70:	9300      	str	r3, [sp, #0]
90014d72:	463b      	mov	r3, r7
90014d74:	e7e1      	b.n	90014d3a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
90014d76:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
90014d7a:	deff      	udf	#255	; 0xff
90014d7c:	9002c7c0 	.word	0x9002c7c0

90014d80 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
90014d80:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014d84:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014d88:	4293      	cmp	r3, r2
90014d8a:	da01      	bge.n	90014d90 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
90014d8c:	4608      	mov	r0, r1
90014d8e:	4770      	bx	lr
90014d90:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	; 0x120
90014d94:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
90014d98:	428b      	cmp	r3, r1
90014d9a:	bfc7      	ittee	gt
90014d9c:	1809      	addgt	r1, r1, r0
90014d9e:	1ac8      	subgt	r0, r1, r3
90014da0:	1ac0      	suble	r0, r0, r3
90014da2:	1a80      	suble	r0, r0, r2
90014da4:	bfd8      	it	le
90014da6:	1840      	addle	r0, r0, r1
90014da8:	4770      	bx	lr

90014daa <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
90014daa:	b510      	push	{r4, lr}
90014dac:	4604      	mov	r4, r0
90014dae:	f7ff f9e0 	bl	90014172 <_ZN8touchgfx17AbstractDataGraph5clearEv>
90014db2:	2300      	movs	r3, #0
90014db4:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
90014db8:	bd10      	pop	{r4, pc}

90014dba <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
90014dba:	b570      	push	{r4, r5, r6, lr}
90014dbc:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
90014dc0:	4604      	mov	r4, r0
90014dc2:	bb13      	cbnz	r3, 90014e0a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014dc4:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014dc8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014dcc:	429a      	cmp	r2, r3
90014dce:	dc1c      	bgt.n	90014e0a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014dd0:	6803      	ldr	r3, [r0, #0]
90014dd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014dd6:	4798      	blx	r3
90014dd8:	6823      	ldr	r3, [r4, #0]
90014dda:	4605      	mov	r5, r0
90014ddc:	4620      	mov	r0, r4
90014dde:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014de2:	4798      	blx	r3
90014de4:	4606      	mov	r6, r0
90014de6:	2d00      	cmp	r5, #0
90014de8:	da05      	bge.n	90014df6 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
90014dea:	b229      	sxth	r1, r5
90014dec:	4620      	mov	r0, r4
90014dee:	f7ff fbdb 	bl	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014df2:	3501      	adds	r5, #1
90014df4:	e7f7      	b.n	90014de6 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
90014df6:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	; 0x11c
90014dfa:	42b5      	cmp	r5, r6
90014dfc:	dc05      	bgt.n	90014e0a <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
90014dfe:	b229      	sxth	r1, r5
90014e00:	4620      	mov	r0, r4
90014e02:	f7ff fbd1 	bl	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014e06:	3501      	adds	r5, #1
90014e08:	e7f7      	b.n	90014dfa <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
90014e0a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014e0e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014e12:	429a      	cmp	r2, r3
90014e14:	db0b      	blt.n	90014e2e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
90014e16:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014e1a:	4620      	mov	r0, r4
90014e1c:	f7ff fbb4 	bl	90014588 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014e20:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	; 0x14c
90014e24:	4620      	mov	r0, r4
90014e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014e2a:	f7ff bbbd 	b.w	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014e2e:	bd70      	pop	{r4, r5, r6, pc}

90014e30 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
90014e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014e34:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
90014e38:	4604      	mov	r4, r0
90014e3a:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
90014e3e:	4688      	mov	r8, r1
90014e40:	1c6e      	adds	r6, r5, #1
90014e42:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
90014e46:	4629      	mov	r1, r5
90014e48:	b236      	sxth	r6, r6
90014e4a:	fb96 f3f2 	sdiv	r3, r6, r2
90014e4e:	fb02 6313 	mls	r3, r2, r3, r6
90014e52:	f8a0 314c 	strh.w	r3, [r0, #332]	; 0x14c
90014e56:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
90014e5a:	42ab      	cmp	r3, r5
90014e5c:	6803      	ldr	r3, [r0, #0]
90014e5e:	bf08      	it	eq
90014e60:	f8a0 611e 	strheq.w	r6, [r0, #286]	; 0x11e
90014e64:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
90014e68:	4798      	blx	r3
90014e6a:	4629      	mov	r1, r5
90014e6c:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
90014e70:	4620      	mov	r0, r4
90014e72:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
90014e76:	f7ff fb87 	bl	90014588 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
90014e7a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014e7e:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014e82:	429a      	cmp	r2, r3
90014e84:	db28      	blt.n	90014ed8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014e86:	4629      	mov	r1, r5
90014e88:	4620      	mov	r0, r4
90014e8a:	f7ff fb8d 	bl	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014e8e:	bb1d      	cbnz	r5, 90014ed8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014e90:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
90014e94:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	; 0x11c
90014e98:	429a      	cmp	r2, r3
90014e9a:	db1d      	blt.n	90014ed8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014e9c:	6823      	ldr	r3, [r4, #0]
90014e9e:	4620      	mov	r0, r4
90014ea0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
90014ea4:	4798      	blx	r3
90014ea6:	6823      	ldr	r3, [r4, #0]
90014ea8:	4606      	mov	r6, r0
90014eaa:	4620      	mov	r0, r4
90014eac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90014eb0:	4798      	blx	r3
90014eb2:	4607      	mov	r7, r0
90014eb4:	2e00      	cmp	r6, #0
90014eb6:	da05      	bge.n	90014ec4 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
90014eb8:	b231      	sxth	r1, r6
90014eba:	4620      	mov	r0, r4
90014ebc:	f7ff fb74 	bl	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014ec0:	3601      	adds	r6, #1
90014ec2:	e7f7      	b.n	90014eb4 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
90014ec4:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	; 0x11c
90014ec8:	42be      	cmp	r6, r7
90014eca:	dc05      	bgt.n	90014ed8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
90014ecc:	b231      	sxth	r1, r6
90014ece:	4620      	mov	r0, r4
90014ed0:	f7ff fb6a 	bl	900145a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
90014ed4:	3601      	adds	r6, #1
90014ed6:	e7f7      	b.n	90014ec8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
90014ed8:	4628      	mov	r0, r5
90014eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014ede <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
90014ede:	b508      	push	{r3, lr}
90014ee0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014ee4:	b10b      	cbz	r3, 90014eea <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
90014ee6:	f7ed fa29 	bl	9000233c <_ZNK8touchgfx8Drawable17invalidateContentEv>
90014eea:	bd08      	pop	{r3, pc}

90014eec <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
90014eec:	6803      	ldr	r3, [r0, #0]
90014eee:	f64f 71fe 	movw	r1, #65534	; 0xfffe
90014ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90014ef4:	4718      	bx	r3

90014ef6 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
90014ef6:	4770      	bx	lr

90014ef8 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
90014ef8:	b510      	push	{r4, lr}
90014efa:	4604      	mov	r4, r0
90014efc:	212c      	movs	r1, #44	; 0x2c
90014efe:	f012 fbca 	bl	90027696 <_ZdlPvj>
90014f02:	4620      	mov	r0, r4
90014f04:	bd10      	pop	{r4, pc}

90014f06 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
90014f06:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90014f0a:	2bff      	cmp	r3, #255	; 0xff
90014f0c:	b510      	push	{r4, lr}
90014f0e:	d104      	bne.n	90014f1a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
90014f10:	8cca      	ldrh	r2, [r1, #38]	; 0x26
90014f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014f16:	429a      	cmp	r2, r3
90014f18:	d105      	bne.n	90014f26 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
90014f1a:	2300      	movs	r3, #0
90014f1c:	8003      	strh	r3, [r0, #0]
90014f1e:	8043      	strh	r3, [r0, #2]
90014f20:	8083      	strh	r3, [r0, #4]
90014f22:	80c3      	strh	r3, [r0, #6]
90014f24:	bd10      	pop	{r4, pc}
90014f26:	2300      	movs	r3, #0
90014f28:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
90014f2c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
90014f30:	8003      	strh	r3, [r0, #0]
90014f32:	8043      	strh	r3, [r0, #2]
90014f34:	8084      	strh	r4, [r0, #4]
90014f36:	80c2      	strh	r2, [r0, #6]
90014f38:	e7f4      	b.n	90014f24 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

90014f3a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
90014f3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014f3e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90014f42:	b087      	sub	sp, #28
90014f44:	4604      	mov	r4, r0
90014f46:	4689      	mov	r9, r1
90014f48:	b363      	cbz	r3, 90014fa4 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
90014f4a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
90014f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014f50:	429a      	cmp	r2, r3
90014f52:	d027      	beq.n	90014fa4 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
90014f54:	ad06      	add	r5, sp, #24
90014f56:	2700      	movs	r7, #0
90014f58:	f825 2d0c 	strh.w	r2, [r5, #-12]!
90014f5c:	4628      	mov	r0, r5
90014f5e:	f006 fa97 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
90014f62:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
90014f66:	a904      	add	r1, sp, #16
90014f68:	f8ad 0014 	strh.w	r0, [sp, #20]
90014f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
90014f70:	4620      	mov	r0, r4
90014f72:	6823      	ldr	r3, [r4, #0]
90014f74:	9704      	str	r7, [sp, #16]
90014f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014f78:	4798      	blx	r3
90014f7a:	f7fe fa49 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90014f7e:	6803      	ldr	r3, [r0, #0]
90014f80:	4606      	mov	r6, r0
90014f82:	4628      	mov	r0, r5
90014f84:	f8d3 800c 	ldr.w	r8, [r3, #12]
90014f88:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
90014f8a:	f8ad 300c 	strh.w	r3, [sp, #12]
90014f8e:	f006 fb6b 	bl	9001b668 <_ZNK8touchgfx6Bitmap7getDataEv>
90014f92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90014f96:	4601      	mov	r1, r0
90014f98:	9701      	str	r7, [sp, #4]
90014f9a:	aa04      	add	r2, sp, #16
90014f9c:	9300      	str	r3, [sp, #0]
90014f9e:	4630      	mov	r0, r6
90014fa0:	464b      	mov	r3, r9
90014fa2:	47c0      	blx	r8
90014fa4:	b007      	add	sp, #28
90014fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

90014faa <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
90014faa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90014fac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90014fb0:	460d      	mov	r5, r1
90014fb2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90014fb6:	2100      	movs	r1, #0
90014fb8:	f8ad 3006 	strh.w	r3, [sp, #6]
90014fbc:	4604      	mov	r4, r0
90014fbe:	6803      	ldr	r3, [r0, #0]
90014fc0:	f8ad 2004 	strh.w	r2, [sp, #4]
90014fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90014fc6:	9100      	str	r1, [sp, #0]
90014fc8:	4669      	mov	r1, sp
90014fca:	4798      	blx	r3
90014fcc:	4621      	mov	r1, r4
90014fce:	a802      	add	r0, sp, #8
90014fd0:	f004 fa0e 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014fd4:	f7fe fa1c 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
90014fd8:	6803      	ldr	r3, [r0, #0]
90014fda:	aa02      	add	r2, sp, #8
90014fdc:	4669      	mov	r1, sp
90014fde:	695e      	ldr	r6, [r3, #20]
90014fe0:	462b      	mov	r3, r5
90014fe2:	47b0      	blx	r6
90014fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014fe8:	2800      	cmp	r0, #0
90014fea:	bf08      	it	eq
90014fec:	461d      	moveq	r5, r3
90014fee:	84e5      	strh	r5, [r4, #38]	; 0x26
90014ff0:	b004      	add	sp, #16
90014ff2:	bd70      	pop	{r4, r5, r6, pc}

90014ff4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
90014ff4:	2200      	movs	r2, #0
90014ff6:	8082      	strh	r2, [r0, #4]
90014ff8:	80c2      	strh	r2, [r0, #6]
90014ffa:	8102      	strh	r2, [r0, #8]
90014ffc:	8142      	strh	r2, [r0, #10]
90014ffe:	8182      	strh	r2, [r0, #12]
90015000:	81c2      	strh	r2, [r0, #14]
90015002:	8202      	strh	r2, [r0, #16]
90015004:	8242      	strh	r2, [r0, #18]
90015006:	61c2      	str	r2, [r0, #28]
90015008:	8402      	strh	r2, [r0, #32]
9001500a:	8442      	strh	r2, [r0, #34]	; 0x22
9001500c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90015010:	e9c0 2205 	strd	r2, r2, [r0, #20]
90015014:	2201      	movs	r2, #1
90015016:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
9001501a:	4a04      	ldr	r2, [pc, #16]	; (9001502c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
9001501c:	6002      	str	r2, [r0, #0]
9001501e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90015022:	84c2      	strh	r2, [r0, #38]	; 0x26
90015024:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
90015028:	4770      	bx	lr
9001502a:	bf00      	nop
9001502c:	9002c1bc 	.word	0x9002c1bc

90015030 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
90015030:	880b      	ldrh	r3, [r1, #0]
90015032:	8643      	strh	r3, [r0, #50]	; 0x32
90015034:	4770      	bx	lr

90015036 <_ZN8touchgfx13AnimatedImageD1Ev>:
90015036:	4770      	bx	lr

90015038 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
90015038:	880b      	ldrh	r3, [r1, #0]
9001503a:	8603      	strh	r3, [r0, #48]	; 0x30
9001503c:	f000 bd33 	b.w	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

90015040 <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
90015040:	b513      	push	{r0, r1, r4, lr}
90015042:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90015046:	4604      	mov	r4, r0
90015048:	b143      	cbz	r3, 9001505c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
9001504a:	f003 f8a7 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
9001504e:	4621      	mov	r1, r4
90015050:	3004      	adds	r0, #4
90015052:	f003 f8c8 	bl	900181e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90015056:	2300      	movs	r3, #0
90015058:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
9001505c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
90015060:	b163      	cbz	r3, 9001507c <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
90015062:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90015064:	a901      	add	r1, sp, #4
90015066:	4620      	mov	r0, r4
90015068:	f8ad 3004 	strh.w	r3, [sp, #4]
9001506c:	f000 fd1b 	bl	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90015070:	6823      	ldr	r3, [r4, #0]
90015072:	4620      	mov	r0, r4
90015074:	695b      	ldr	r3, [r3, #20]
90015076:	4798      	blx	r3
90015078:	b002      	add	sp, #8
9001507a:	bd10      	pop	{r4, pc}
9001507c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001507e:	e7f1      	b.n	90015064 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

90015080 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
90015080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90015082:	f64f 77ff 	movw	r7, #65535	; 0xffff
90015086:	8e05      	ldrh	r5, [r0, #48]	; 0x30
90015088:	4604      	mov	r4, r0
9001508a:	42bd      	cmp	r5, r7
9001508c:	d01a      	beq.n	900150c4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
9001508e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
90015090:	42be      	cmp	r6, r7
90015092:	d017      	beq.n	900150c4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
90015094:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
90015098:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
9001509c:	b1a1      	cbz	r1, 900150c8 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
9001509e:	b142      	cbz	r2, 900150b2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
900150a0:	a902      	add	r1, sp, #8
900150a2:	f821 6d04 	strh.w	r6, [r1, #-4]!
900150a6:	f000 fcfe 	bl	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900150aa:	6823      	ldr	r3, [r4, #0]
900150ac:	4620      	mov	r0, r4
900150ae:	695b      	ldr	r3, [r3, #20]
900150b0:	4798      	blx	r3
900150b2:	f003 f873 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
900150b6:	4621      	mov	r1, r4
900150b8:	3004      	adds	r0, #4
900150ba:	f003 f93d 	bl	90018338 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
900150be:	2301      	movs	r3, #1
900150c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
900150c4:	b003      	add	sp, #12
900150c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
900150c8:	2a00      	cmp	r2, #0
900150ca:	d0f2      	beq.n	900150b2 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
900150cc:	a902      	add	r1, sp, #8
900150ce:	f821 5d04 	strh.w	r5, [r1, #-4]!
900150d2:	e7e8      	b.n	900150a6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

900150d4 <_ZN8touchgfx13AnimatedImageD0Ev>:
900150d4:	b510      	push	{r4, lr}
900150d6:	4604      	mov	r4, r0
900150d8:	213c      	movs	r1, #60	; 0x3c
900150da:	f012 fadc 	bl	90027696 <_ZdlPvj>
900150de:	4620      	mov	r0, r4
900150e0:	bd10      	pop	{r4, pc}

900150e2 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
900150e2:	b510      	push	{r4, lr}
900150e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
900150e8:	4604      	mov	r4, r0
900150ea:	b14b      	cbz	r3, 90015100 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
900150ec:	f003 f856 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
900150f0:	4621      	mov	r1, r4
900150f2:	3004      	adds	r0, #4
900150f4:	f003 f877 	bl	900181e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
900150f8:	2300      	movs	r3, #0
900150fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
900150fe:	bd10      	pop	{r4, pc}
90015100:	f003 f84c 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
90015104:	4621      	mov	r1, r4
90015106:	3004      	adds	r0, #4
90015108:	f003 f916 	bl	90018338 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
9001510c:	2301      	movs	r3, #1
9001510e:	e7f4      	b.n	900150fa <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

90015110 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
90015110:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015112:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90015116:	4604      	mov	r4, r0
90015118:	2b00      	cmp	r3, #0
9001511a:	d042      	beq.n	900151a2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
9001511c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90015120:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
90015124:	3301      	adds	r3, #1
90015126:	b2db      	uxtb	r3, r3
90015128:	429a      	cmp	r2, r3
9001512a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
9001512e:	d138      	bne.n	900151a2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90015130:	2300      	movs	r3, #0
90015132:	8e41      	ldrh	r1, [r0, #50]	; 0x32
90015134:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
90015138:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
9001513c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
9001513e:	4299      	cmp	r1, r3
90015140:	d100      	bne.n	90015144 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
90015142:	b122      	cbz	r2, 9001514e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
90015144:	8e21      	ldrh	r1, [r4, #48]	; 0x30
90015146:	4299      	cmp	r1, r3
90015148:	d12f      	bne.n	900151aa <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
9001514a:	2a00      	cmp	r2, #0
9001514c:	d034      	beq.n	900151b8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
9001514e:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
90015152:	b93d      	cbnz	r5, 90015164 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
90015154:	f003 f822 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
90015158:	4621      	mov	r1, r4
9001515a:	3004      	adds	r0, #4
9001515c:	f003 f843 	bl	900181e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
90015160:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
90015164:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90015166:	b140      	cbz	r0, 9001517a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90015168:	6803      	ldr	r3, [r0, #0]
9001516a:	68db      	ldr	r3, [r3, #12]
9001516c:	4798      	blx	r3
9001516e:	b120      	cbz	r0, 9001517a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
90015170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90015172:	4621      	mov	r1, r4
90015174:	6803      	ldr	r3, [r0, #0]
90015176:	689b      	ldr	r3, [r3, #8]
90015178:	4798      	blx	r3
9001517a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001517e:	b183      	cbz	r3, 900151a2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90015180:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
90015184:	b16b      	cbz	r3, 900151a2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
90015186:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
9001518a:	b163      	cbz	r3, 900151a6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
9001518c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
9001518e:	a901      	add	r1, sp, #4
90015190:	f8ad 3004 	strh.w	r3, [sp, #4]
90015194:	4620      	mov	r0, r4
90015196:	f000 fc86 	bl	90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9001519a:	6823      	ldr	r3, [r4, #0]
9001519c:	4620      	mov	r0, r4
9001519e:	695b      	ldr	r3, [r3, #20]
900151a0:	4798      	blx	r3
900151a2:	b003      	add	sp, #12
900151a4:	bd30      	pop	{r4, r5, pc}
900151a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
900151a8:	e7f1      	b.n	9001518e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
900151aa:	b12a      	cbz	r2, 900151b8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
900151ac:	3b01      	subs	r3, #1
900151ae:	b29b      	uxth	r3, r3
900151b0:	a902      	add	r1, sp, #8
900151b2:	f821 3d04 	strh.w	r3, [r1, #-4]!
900151b6:	e7ed      	b.n	90015194 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
900151b8:	3301      	adds	r3, #1
900151ba:	e7f8      	b.n	900151ae <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

900151bc <_ZNK8touchgfx5Image17invalidateContentEv>:
900151bc:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
900151c0:	b12a      	cbz	r2, 900151ce <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900151c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900151c6:	b112      	cbz	r2, 900151ce <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900151c8:	6803      	ldr	r3, [r0, #0]
900151ca:	695b      	ldr	r3, [r3, #20]
900151cc:	4718      	bx	r3
900151ce:	4770      	bx	lr

900151d0 <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
900151d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
900151d2:	ac02      	add	r4, sp, #8
900151d4:	6803      	ldr	r3, [r0, #0]
900151d6:	4605      	mov	r5, r0
900151d8:	4616      	mov	r6, r2
900151da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900151dc:	f824 1d04 	strh.w	r1, [r4, #-4]!
900151e0:	4621      	mov	r1, r4
900151e2:	4798      	blx	r3
900151e4:	682b      	ldr	r3, [r5, #0]
900151e6:	4621      	mov	r1, r4
900151e8:	4628      	mov	r0, r5
900151ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900151ec:	f8ad 6004 	strh.w	r6, [sp, #4]
900151f0:	4798      	blx	r3
900151f2:	b002      	add	sp, #8
900151f4:	bd70      	pop	{r4, r5, r6, pc}

900151f6 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
900151f6:	2300      	movs	r3, #0
900151f8:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
900151fc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
90015200:	4770      	bx	lr

90015202 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90015202:	2000      	movs	r0, #0
90015204:	4770      	bx	lr
	...

90015208 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90015208:	4b07      	ldr	r3, [pc, #28]	; (90015228 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
9001520a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9001520c:	881b      	ldrh	r3, [r3, #0]
9001520e:	4293      	cmp	r3, r2
90015210:	bf81      	itttt	hi
90015212:	4b06      	ldrhi	r3, [pc, #24]	; (9001522c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90015214:	681b      	ldrhi	r3, [r3, #0]
90015216:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
9001521a:	7858      	ldrbhi	r0, [r3, #1]
9001521c:	bf8c      	ite	hi
9001521e:	f000 0003 	andhi.w	r0, r0, #3
90015222:	2000      	movls	r0, #0
90015224:	4770      	bx	lr
90015226:	bf00      	nop
90015228:	24028248 	.word	0x24028248
9001522c:	24028244 	.word	0x24028244

90015230 <_ZN8touchgfx8TextAreaD1Ev>:
90015230:	4770      	bx	lr
	...

90015234 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90015234:	4b11      	ldr	r3, [pc, #68]	; (9001527c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90015236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001523a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001523c:	4604      	mov	r4, r0
9001523e:	881b      	ldrh	r3, [r3, #0]
90015240:	428b      	cmp	r3, r1
90015242:	d918      	bls.n	90015276 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90015244:	6803      	ldr	r3, [r0, #0]
90015246:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90015248:	4b0d      	ldr	r3, [pc, #52]	; (90015280 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
9001524a:	6818      	ldr	r0, [r3, #0]
9001524c:	f7f3 f842 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015250:	6823      	ldr	r3, [r4, #0]
90015252:	4606      	mov	r6, r0
90015254:	4620      	mov	r0, r4
90015256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015258:	4798      	blx	r3
9001525a:	6823      	ldr	r3, [r4, #0]
9001525c:	4607      	mov	r7, r0
9001525e:	4620      	mov	r0, r4
90015260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015264:	4798      	blx	r3
90015266:	463a      	mov	r2, r7
90015268:	4603      	mov	r3, r0
9001526a:	4631      	mov	r1, r6
9001526c:	4620      	mov	r0, r4
9001526e:	46ac      	mov	ip, r5
90015270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90015274:	4760      	bx	ip
90015276:	2000      	movs	r0, #0
90015278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001527c:	24028248 	.word	0x24028248
90015280:	24028250 	.word	0x24028250

90015284 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90015284:	4b18      	ldr	r3, [pc, #96]	; (900152e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90015286:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9001528a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001528c:	4604      	mov	r4, r0
9001528e:	881b      	ldrh	r3, [r3, #0]
90015290:	428b      	cmp	r3, r1
90015292:	d926      	bls.n	900152e2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90015294:	4b15      	ldr	r3, [pc, #84]	; (900152ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90015296:	681b      	ldr	r3, [r3, #0]
90015298:	eb03 0241 	add.w	r2, r3, r1, lsl #1
9001529c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
900152a0:	4b13      	ldr	r3, [pc, #76]	; (900152f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
900152a2:	7855      	ldrb	r5, [r2, #1]
900152a4:	681b      	ldr	r3, [r3, #0]
900152a6:	f3c5 0581 	ubfx	r5, r5, #2, #2
900152aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
900152ae:	6833      	ldr	r3, [r6, #0]
900152b0:	69df      	ldr	r7, [r3, #28]
900152b2:	4b10      	ldr	r3, [pc, #64]	; (900152f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
900152b4:	6818      	ldr	r0, [r3, #0]
900152b6:	f7f3 f80d 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
900152ba:	6823      	ldr	r3, [r4, #0]
900152bc:	4680      	mov	r8, r0
900152be:	4620      	mov	r0, r4
900152c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900152c2:	4798      	blx	r3
900152c4:	6823      	ldr	r3, [r4, #0]
900152c6:	4681      	mov	r9, r0
900152c8:	4620      	mov	r0, r4
900152ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900152ce:	4798      	blx	r3
900152d0:	464b      	mov	r3, r9
900152d2:	9000      	str	r0, [sp, #0]
900152d4:	4642      	mov	r2, r8
900152d6:	4629      	mov	r1, r5
900152d8:	4630      	mov	r0, r6
900152da:	47b8      	blx	r7
900152dc:	b003      	add	sp, #12
900152de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900152e2:	2000      	movs	r0, #0
900152e4:	e7fa      	b.n	900152dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
900152e6:	bf00      	nop
900152e8:	24028248 	.word	0x24028248
900152ec:	24028244 	.word	0x24028244
900152f0:	2402824c 	.word	0x2402824c
900152f4:	24028250 	.word	0x24028250

900152f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900152f8:	b40e      	push	{r1, r2, r3}
900152fa:	4b30      	ldr	r3, [pc, #192]	; (900153bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
900152fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015300:	881a      	ldrh	r2, [r3, #0]
90015302:	b09d      	sub	sp, #116	; 0x74
90015304:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90015306:	4604      	mov	r4, r0
90015308:	429a      	cmp	r2, r3
9001530a:	d954      	bls.n	900153b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
9001530c:	aa26      	add	r2, sp, #152	; 0x98
9001530e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 900153c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90015312:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900153c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90015316:	9202      	str	r2, [sp, #8]
90015318:	f8d9 2000 	ldr.w	r2, [r9]
9001531c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90015320:	f8d8 3000 	ldr.w	r3, [r8]
90015324:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90015328:	682b      	ldr	r3, [r5, #0]
9001532a:	4628      	mov	r0, r5
9001532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001532e:	4798      	blx	r3
90015330:	4606      	mov	r6, r0
90015332:	b207      	sxth	r7, r0
90015334:	a803      	add	r0, sp, #12
90015336:	f004 fd18 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
9001533a:	682b      	ldr	r3, [r5, #0]
9001533c:	4628      	mov	r0, r5
9001533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015340:	4798      	blx	r3
90015342:	682b      	ldr	r3, [r5, #0]
90015344:	4682      	mov	sl, r0
90015346:	4628      	mov	r0, r5
90015348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001534a:	4798      	blx	r3
9001534c:	4653      	mov	r3, sl
9001534e:	9000      	str	r0, [sp, #0]
90015350:	a803      	add	r0, sp, #12
90015352:	9a02      	ldr	r2, [sp, #8]
90015354:	9925      	ldr	r1, [sp, #148]	; 0x94
90015356:	f004 fd63 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001535a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001535c:	f8d9 3000 	ldr.w	r3, [r9]
90015360:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90015364:	8925      	ldrh	r5, [r4, #8]
90015366:	eb03 0142 	add.w	r1, r3, r2, lsl #1
9001536a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
9001536e:	eba5 050c 	sub.w	r5, r5, ip
90015372:	784a      	ldrb	r2, [r1, #1]
90015374:	f8d8 3000 	ldr.w	r3, [r8]
90015378:	b22d      	sxth	r5, r5
9001537a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
9001537e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90015382:	9500      	str	r5, [sp, #0]
90015384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90015388:	a803      	add	r0, sp, #12
9001538a:	f002 fad9 	bl	90017940 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
9001538e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90015392:	b203      	sxth	r3, r0
90015394:	18b9      	adds	r1, r7, r2
90015396:	2900      	cmp	r1, #0
90015398:	dd0b      	ble.n	900153b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
9001539a:	3b01      	subs	r3, #1
9001539c:	fb13 f302 	smulbb	r3, r3, r2
900153a0:	fb16 3300 	smlabb	r3, r6, r0, r3
900153a4:	b21f      	sxth	r7, r3
900153a6:	4638      	mov	r0, r7
900153a8:	b01d      	add	sp, #116	; 0x74
900153aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900153ae:	b003      	add	sp, #12
900153b0:	4770      	bx	lr
900153b2:	2b00      	cmp	r3, #0
900153b4:	dcf7      	bgt.n	900153a6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900153b6:	2700      	movs	r7, #0
900153b8:	e7f5      	b.n	900153a6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900153ba:	bf00      	nop
900153bc:	24028248 	.word	0x24028248
900153c0:	24028244 	.word	0x24028244
900153c4:	2402824c 	.word	0x2402824c

900153c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
900153c8:	4bbd      	ldr	r3, [pc, #756]	; (900156c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
900153ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900153ce:	460c      	mov	r4, r1
900153d0:	881b      	ldrh	r3, [r3, #0]
900153d2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
900153d4:	b0a9      	sub	sp, #164	; 0xa4
900153d6:	4680      	mov	r8, r0
900153d8:	428b      	cmp	r3, r1
900153da:	d809      	bhi.n	900153f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
900153dc:	2300      	movs	r3, #0
900153de:	f04f 32ff 	mov.w	r2, #4294967295
900153e2:	6083      	str	r3, [r0, #8]
900153e4:	e9c0 3200 	strd	r3, r2, [r0]
900153e8:	4640      	mov	r0, r8
900153ea:	b029      	add	sp, #164	; 0xa4
900153ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900153f0:	4eb4      	ldr	r6, [pc, #720]	; (900156c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
900153f2:	6833      	ldr	r3, [r6, #0]
900153f4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
900153f8:	4bb3      	ldr	r3, [pc, #716]	; (900156c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
900153fa:	681b      	ldr	r3, [r3, #0]
900153fc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90015400:	4bb2      	ldr	r3, [pc, #712]	; (900156cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90015402:	6818      	ldr	r0, [r3, #0]
90015404:	f7f2 ff66 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015408:	682b      	ldr	r3, [r5, #0]
9001540a:	4681      	mov	r9, r0
9001540c:	4628      	mov	r0, r5
9001540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015410:	4798      	blx	r3
90015412:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90015414:	b203      	sxth	r3, r0
90015416:	4682      	mov	sl, r0
90015418:	4407      	add	r7, r0
9001541a:	a80f      	add	r0, sp, #60	; 0x3c
9001541c:	9304      	str	r3, [sp, #16]
9001541e:	b2bb      	uxth	r3, r7
90015420:	9303      	str	r3, [sp, #12]
90015422:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90015426:	2b00      	cmp	r3, #0
90015428:	f040 80a5 	bne.w	90015576 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
9001542c:	f004 fc9d 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
90015430:	682b      	ldr	r3, [r5, #0]
90015432:	4628      	mov	r0, r5
90015434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015436:	4798      	blx	r3
90015438:	682b      	ldr	r3, [r5, #0]
9001543a:	4606      	mov	r6, r0
9001543c:	4628      	mov	r0, r5
9001543e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015440:	4798      	blx	r3
90015442:	6823      	ldr	r3, [r4, #0]
90015444:	4607      	mov	r7, r0
90015446:	4620      	mov	r0, r4
90015448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001544a:	4798      	blx	r3
9001544c:	6823      	ldr	r3, [r4, #0]
9001544e:	4683      	mov	fp, r0
90015450:	4620      	mov	r0, r4
90015452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015456:	4798      	blx	r3
90015458:	463b      	mov	r3, r7
9001545a:	4649      	mov	r1, r9
9001545c:	4632      	mov	r2, r6
9001545e:	2600      	movs	r6, #0
90015460:	e9cd b000 	strd	fp, r0, [sp]
90015464:	a80f      	add	r0, sp, #60	; 0x3c
90015466:	4637      	mov	r7, r6
90015468:	f004 fcef 	bl	90019e4a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
9001546c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90015470:	f8df b250 	ldr.w	fp, [pc, #592]	; 900156c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90015474:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015478:	bf0c      	ite	eq
9001547a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
9001547e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
90015482:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015484:	4629      	mov	r1, r5
90015486:	f8db 3000 	ldr.w	r3, [fp]
9001548a:	a80f      	add	r0, sp, #60	; 0x3c
9001548c:	3701      	adds	r7, #1
9001548e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90015492:	f647 72ff 	movw	r2, #32767	; 0x7fff
90015496:	b2bf      	uxth	r7, r7
90015498:	785b      	ldrb	r3, [r3, #1]
9001549a:	f3c3 0381 	ubfx	r3, r3, #2, #2
9001549e:	f001 ff6a 	bl	90017376 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
900154a2:	9b03      	ldr	r3, [sp, #12]
900154a4:	4286      	cmp	r6, r0
900154a6:	eba9 0903 	sub.w	r9, r9, r3
900154aa:	bfb8      	it	lt
900154ac:	4606      	movlt	r6, r0
900154ae:	a80f      	add	r0, sp, #60	; 0x3c
900154b0:	fa0f f989 	sxth.w	r9, r9
900154b4:	b236      	sxth	r6, r6
900154b6:	f004 fc7f 	bl	90019db8 <_ZN8touchgfx12TextProvider11endOfStringEv>
900154ba:	b918      	cbnz	r0, 900154c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900154bc:	7a2b      	ldrb	r3, [r5, #8]
900154be:	444b      	add	r3, r9
900154c0:	2b00      	cmp	r3, #0
900154c2:	dcde      	bgt.n	90015482 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
900154c4:	9b03      	ldr	r3, [sp, #12]
900154c6:	4620      	mov	r0, r4
900154c8:	9a04      	ldr	r2, [sp, #16]
900154ca:	fb13 f707 	smulbb	r7, r3, r7
900154ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
900154d0:	f895 9009 	ldrb.w	r9, [r5, #9]
900154d4:	1aff      	subs	r7, r7, r3
900154d6:	b2bf      	uxth	r7, r7
900154d8:	b23b      	sxth	r3, r7
900154da:	429a      	cmp	r2, r3
900154dc:	bfa8      	it	ge
900154de:	4657      	movge	r7, sl
900154e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900154e4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900154e8:	6823      	ldr	r3, [r4, #0]
900154ea:	444f      	add	r7, r9
900154ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900154ee:	bf08      	it	eq
900154f0:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
900154f4:	fa1f f987 	uxth.w	r9, r7
900154f8:	bf18      	it	ne
900154fa:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
900154fe:	4798      	blx	r3
90015500:	2801      	cmp	r0, #1
90015502:	fa0f f789 	sxth.w	r7, r9
90015506:	b2b3      	uxth	r3, r6
90015508:	f000 80e2 	beq.w	900156d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
9001550c:	2802      	cmp	r0, #2
9001550e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
90015512:	f000 80e3 	beq.w	900156dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90015516:	7aea      	ldrb	r2, [r5, #11]
90015518:	b236      	sxth	r6, r6
9001551a:	7b2d      	ldrb	r5, [r5, #12]
9001551c:	1ab6      	subs	r6, r6, r2
9001551e:	442a      	add	r2, r5
90015520:	fa1f fa86 	uxth.w	sl, r6
90015524:	4413      	add	r3, r2
90015526:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
9001552a:	fa0f fb8a 	sxth.w	fp, sl
9001552e:	b29b      	uxth	r3, r3
90015530:	2a02      	cmp	r2, #2
90015532:	b21e      	sxth	r6, r3
90015534:	f000 80d6 	beq.w	900156e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90015538:	2a03      	cmp	r2, #3
9001553a:	f000 80de 	beq.w	900156fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
9001553e:	2a01      	cmp	r2, #1
90015540:	f040 80e6 	bne.w	90015710 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90015544:	8925      	ldrh	r5, [r4, #8]
90015546:	4633      	mov	r3, r6
90015548:	463e      	mov	r6, r7
9001554a:	eba5 0909 	sub.w	r9, r5, r9
9001554e:	461f      	mov	r7, r3
90015550:	465d      	mov	r5, fp
90015552:	fa0f fb89 	sxth.w	fp, r9
90015556:	4b5d      	ldr	r3, [pc, #372]	; (900156cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90015558:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001555a:	6818      	ldr	r0, [r3, #0]
9001555c:	f7f2 feba 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015560:	f8a8 b000 	strh.w	fp, [r8]
90015564:	f8a8 5002 	strh.w	r5, [r8, #2]
90015568:	f8a8 6004 	strh.w	r6, [r8, #4]
9001556c:	f8a8 7006 	strh.w	r7, [r8, #6]
90015570:	f8c8 0008 	str.w	r0, [r8, #8]
90015574:	e738      	b.n	900153e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90015576:	f004 fbf8 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
9001557a:	682b      	ldr	r3, [r5, #0]
9001557c:	4628      	mov	r0, r5
9001557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015580:	4798      	blx	r3
90015582:	682b      	ldr	r3, [r5, #0]
90015584:	4607      	mov	r7, r0
90015586:	4628      	mov	r0, r5
90015588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001558a:	4798      	blx	r3
9001558c:	6823      	ldr	r3, [r4, #0]
9001558e:	4683      	mov	fp, r0
90015590:	4620      	mov	r0, r4
90015592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015594:	4798      	blx	r3
90015596:	6822      	ldr	r2, [r4, #0]
90015598:	9005      	str	r0, [sp, #20]
9001559a:	4620      	mov	r0, r4
9001559c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
900155a0:	4790      	blx	r2
900155a2:	9b05      	ldr	r3, [sp, #20]
900155a4:	463a      	mov	r2, r7
900155a6:	4649      	mov	r1, r9
900155a8:	9001      	str	r0, [sp, #4]
900155aa:	a80f      	add	r0, sp, #60	; 0x3c
900155ac:	9300      	str	r3, [sp, #0]
900155ae:	465b      	mov	r3, fp
900155b0:	f004 fc4b 	bl	90019e4a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
900155b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900155b8:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
900155bc:	af0f      	add	r7, sp, #60	; 0x3c
900155be:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900155c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
900155c6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900155c8:	bf0a      	itet	eq
900155ca:	464a      	moveq	r2, r9
900155cc:	461a      	movne	r2, r3
900155ce:	4699      	moveq	r9, r3
900155d0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
900155d4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
900155d8:	1ad2      	subs	r2, r2, r3
900155da:	6833      	ldr	r3, [r6, #0]
900155dc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
900155e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
900155e4:	7859      	ldrb	r1, [r3, #1]
900155e6:	2300      	movs	r3, #0
900155e8:	9707      	str	r7, [sp, #28]
900155ea:	f3c1 0181 	ubfx	r1, r1, #2, #2
900155ee:	f8ad 3018 	strh.w	r3, [sp, #24]
900155f2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900155f6:	f88d 1020 	strb.w	r1, [sp, #32]
900155fa:	9509      	str	r5, [sp, #36]	; 0x24
900155fc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90015600:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90015604:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90015608:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001560c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90015610:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90015614:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90015618:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001561c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015620:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90015624:	b350      	cbz	r0, 9001567c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015626:	682b      	ldr	r3, [r5, #0]
90015628:	4628      	mov	r0, r5
9001562a:	695b      	ldr	r3, [r3, #20]
9001562c:	4798      	blx	r3
9001562e:	4607      	mov	r7, r0
90015630:	b320      	cbz	r0, 9001567c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015632:	9809      	ldr	r0, [sp, #36]	; 0x24
90015634:	4639      	mov	r1, r7
90015636:	6803      	ldr	r3, [r0, #0]
90015638:	68db      	ldr	r3, [r3, #12]
9001563a:	4798      	blx	r3
9001563c:	4606      	mov	r6, r0
9001563e:	b1e8      	cbz	r0, 9001567c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015640:	7b43      	ldrb	r3, [r0, #13]
90015642:	7a82      	ldrb	r2, [r0, #10]
90015644:	005b      	lsls	r3, r3, #1
90015646:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001564a:	4313      	orrs	r3, r2
9001564c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90015650:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
90015654:	2b06      	cmp	r3, #6
90015656:	d111      	bne.n	9001567c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90015658:	9809      	ldr	r0, [sp, #36]	; 0x24
9001565a:	4632      	mov	r2, r6
9001565c:	4639      	mov	r1, r7
9001565e:	6803      	ldr	r3, [r0, #0]
90015660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015662:	4798      	blx	r3
90015664:	7b73      	ldrb	r3, [r6, #13]
90015666:	005b      	lsls	r3, r3, #1
90015668:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001566c:	7ab3      	ldrb	r3, [r6, #10]
9001566e:	4313      	orrs	r3, r2
90015670:	4418      	add	r0, r3
90015672:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90015676:	4418      	add	r0, r3
90015678:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
9001567c:	2600      	movs	r6, #0
9001567e:	4637      	mov	r7, r6
90015680:	a806      	add	r0, sp, #24
90015682:	3701      	adds	r7, #1
90015684:	f002 f859 	bl	9001773a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90015688:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
9001568c:	9b03      	ldr	r3, [sp, #12]
9001568e:	b2bf      	uxth	r7, r7
90015690:	4286      	cmp	r6, r0
90015692:	eba9 0903 	sub.w	r9, r9, r3
90015696:	f8bd 3018 	ldrh.w	r3, [sp, #24]
9001569a:	bfb8      	it	lt
9001569c:	4606      	movlt	r6, r0
9001569e:	fa0f f989 	sxth.w	r9, r9
900156a2:	b236      	sxth	r6, r6
900156a4:	2b00      	cmp	r3, #0
900156a6:	f43f af0d 	beq.w	900154c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900156aa:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
900156ae:	2b00      	cmp	r3, #0
900156b0:	f47f af08 	bne.w	900154c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900156b4:	7a2b      	ldrb	r3, [r5, #8]
900156b6:	444b      	add	r3, r9
900156b8:	2b00      	cmp	r3, #0
900156ba:	dce1      	bgt.n	90015680 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
900156bc:	e702      	b.n	900154c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900156be:	bf00      	nop
900156c0:	24028248 	.word	0x24028248
900156c4:	24028244 	.word	0x24028244
900156c8:	2402824c 	.word	0x2402824c
900156cc:	24028250 	.word	0x24028250
900156d0:	ebaa 0606 	sub.w	r6, sl, r6
900156d4:	2002      	movs	r0, #2
900156d6:	fb96 f6f0 	sdiv	r6, r6, r0
900156da:	e71c      	b.n	90015516 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900156dc:	441e      	add	r6, r3
900156de:	ebaa 0606 	sub.w	r6, sl, r6
900156e2:	e718      	b.n	90015516 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900156e4:	8925      	ldrh	r5, [r4, #8]
900156e6:	1aed      	subs	r5, r5, r3
900156e8:	eba5 050a 	sub.w	r5, r5, sl
900156ec:	fa0f fb85 	sxth.w	fp, r5
900156f0:	8965      	ldrh	r5, [r4, #10]
900156f2:	eba5 0509 	sub.w	r5, r5, r9
900156f6:	b22d      	sxth	r5, r5
900156f8:	e72d      	b.n	90015556 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
900156fa:	8965      	ldrh	r5, [r4, #10]
900156fc:	f04f 0b00 	mov.w	fp, #0
90015700:	1aed      	subs	r5, r5, r3
90015702:	4633      	mov	r3, r6
90015704:	463e      	mov	r6, r7
90015706:	eba5 050a 	sub.w	r5, r5, sl
9001570a:	461f      	mov	r7, r3
9001570c:	b22d      	sxth	r5, r5
9001570e:	e722      	b.n	90015556 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90015710:	2500      	movs	r5, #0
90015712:	e720      	b.n	90015556 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90015714 <_ZN8touchgfx8TextAreaD0Ev>:
90015714:	b510      	push	{r4, lr}
90015716:	4604      	mov	r4, r0
90015718:	2148      	movs	r1, #72	; 0x48
9001571a:	f011 ffbc 	bl	90027696 <_ZdlPvj>
9001571e:	4620      	mov	r0, r4
90015720:	bd10      	pop	{r4, pc}
	...

90015724 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90015724:	b513      	push	{r0, r1, r4, lr}
90015726:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
9001572a:	4604      	mov	r4, r0
9001572c:	b1fb      	cbz	r3, 9001576e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001572e:	4b16      	ldr	r3, [pc, #88]	; (90015788 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90015730:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015732:	881b      	ldrh	r3, [r3, #0]
90015734:	428b      	cmp	r3, r1
90015736:	d91a      	bls.n	9001576e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015738:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001573c:	2b00      	cmp	r3, #0
9001573e:	dd16      	ble.n	9001576e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015740:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90015744:	2b00      	cmp	r3, #0
90015746:	dd12      	ble.n	9001576e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015748:	4b10      	ldr	r3, [pc, #64]	; (9001578c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
9001574a:	6818      	ldr	r0, [r3, #0]
9001574c:	f7f2 fdc2 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015750:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90015754:	6822      	ldr	r2, [r4, #0]
90015756:	2b00      	cmp	r3, #0
90015758:	db06      	blt.n	90015768 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
9001575a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
9001575e:	2b00      	cmp	r3, #0
90015760:	db02      	blt.n	90015768 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90015762:	6c63      	ldr	r3, [r4, #68]	; 0x44
90015764:	4298      	cmp	r0, r3
90015766:	d004      	beq.n	90015772 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
90015768:	6953      	ldr	r3, [r2, #20]
9001576a:	4620      	mov	r0, r4
9001576c:	4798      	blx	r3
9001576e:	b002      	add	sp, #8
90015770:	bd10      	pop	{r4, pc}
90015772:	f104 013c 	add.w	r1, r4, #60	; 0x3c
90015776:	466b      	mov	r3, sp
90015778:	6912      	ldr	r2, [r2, #16]
9001577a:	c903      	ldmia	r1, {r0, r1}
9001577c:	e883 0003 	stmia.w	r3, {r0, r1}
90015780:	4619      	mov	r1, r3
90015782:	4620      	mov	r0, r4
90015784:	4790      	blx	r2
90015786:	e7f2      	b.n	9001576e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90015788:	24028248 	.word	0x24028248
9001578c:	24028250 	.word	0x24028250

90015790 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
90015790:	4b45      	ldr	r3, [pc, #276]	; (900158a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
90015792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015796:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015798:	b08e      	sub	sp, #56	; 0x38
9001579a:	881b      	ldrh	r3, [r3, #0]
9001579c:	4604      	mov	r4, r0
9001579e:	4293      	cmp	r3, r2
900157a0:	d97e      	bls.n	900158a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900157a2:	6808      	ldr	r0, [r1, #0]
900157a4:	ab05      	add	r3, sp, #20
900157a6:	6849      	ldr	r1, [r1, #4]
900157a8:	4d40      	ldr	r5, [pc, #256]	; (900158ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
900157aa:	c303      	stmia	r3!, {r0, r1}
900157ac:	4611      	mov	r1, r2
900157ae:	6828      	ldr	r0, [r5, #0]
900157b0:	f7f2 fd90 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
900157b4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
900157b8:	2b00      	cmp	r3, #0
900157ba:	db11      	blt.n	900157e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900157bc:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900157c0:	2b00      	cmp	r3, #0
900157c2:	db0d      	blt.n	900157e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900157c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
900157c6:	4298      	cmp	r0, r3
900157c8:	d10a      	bne.n	900157e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900157ca:	f104 023c 	add.w	r2, r4, #60	; 0x3c
900157ce:	ab09      	add	r3, sp, #36	; 0x24
900157d0:	e892 0003 	ldmia.w	r2, {r0, r1}
900157d4:	e883 0003 	stmia.w	r3, {r0, r1}
900157d8:	4619      	mov	r1, r3
900157da:	a805      	add	r0, sp, #20
900157dc:	f7fd fb3a 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
900157e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900157e4:	2b00      	cmp	r3, #0
900157e6:	dd5b      	ble.n	900158a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900157e8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
900157ec:	2b00      	cmp	r3, #0
900157ee:	dd57      	ble.n	900158a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900157f0:	4f2f      	ldr	r7, [pc, #188]	; (900158b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
900157f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900157f4:	683b      	ldr	r3, [r7, #0]
900157f6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900157fa:	4b2e      	ldr	r3, [pc, #184]	; (900158b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
900157fc:	681b      	ldr	r3, [r3, #0]
900157fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90015802:	2e00      	cmp	r6, #0
90015804:	d04c      	beq.n	900158a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90015806:	6823      	ldr	r3, [r4, #0]
90015808:	4620      	mov	r0, r4
9001580a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
9001580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90015810:	4798      	blx	r3
90015812:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015814:	683b      	ldr	r3, [r7, #0]
90015816:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
9001581a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
9001581e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
90015822:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
90015826:	785b      	ldrb	r3, [r3, #1]
90015828:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
9001582c:	f3c3 0381 	ubfx	r3, r3, #2, #2
90015830:	6b21      	ldr	r1, [r4, #48]	; 0x30
90015832:	9609      	str	r6, [sp, #36]	; 0x24
90015834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90015838:	4b1f      	ldr	r3, [pc, #124]	; (900158b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
9001583a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
9001583e:	681b      	ldr	r3, [r3, #0]
90015840:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
90015844:	910b      	str	r1, [sp, #44]	; 0x2c
90015846:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
9001584a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
9001584e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
90015852:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
90015856:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001585a:	b10a      	cbz	r2, 90015860 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
9001585c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
9001585e:	b906      	cbnz	r6, 90015862 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
90015860:	689e      	ldr	r6, [r3, #8]
90015862:	af07      	add	r7, sp, #28
90015864:	4621      	mov	r1, r4
90015866:	4638      	mov	r0, r7
90015868:	f003 fdc2 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001586c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001586e:	6828      	ldr	r0, [r5, #0]
90015870:	f7f2 fd30 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015874:	6823      	ldr	r3, [r4, #0]
90015876:	4605      	mov	r5, r0
90015878:	4620      	mov	r0, r4
9001587a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001587c:	4798      	blx	r3
9001587e:	6823      	ldr	r3, [r4, #0]
90015880:	4680      	mov	r8, r0
90015882:	4620      	mov	r0, r4
90015884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015888:	4798      	blx	r3
9001588a:	ab09      	add	r3, sp, #36	; 0x24
9001588c:	9501      	str	r5, [sp, #4]
9001588e:	9300      	str	r3, [sp, #0]
90015890:	ab05      	add	r3, sp, #20
90015892:	e9cd 8002 	strd	r8, r0, [sp, #8]
90015896:	4630      	mov	r0, r6
90015898:	e897 0006 	ldmia.w	r7, {r1, r2}
9001589c:	f7f2 fcca 	bl	90008234 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900158a0:	b00e      	add	sp, #56	; 0x38
900158a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900158a6:	bf00      	nop
900158a8:	24028248 	.word	0x24028248
900158ac:	24028250 	.word	0x24028250
900158b0:	24028244 	.word	0x24028244
900158b4:	2402824c 	.word	0x2402824c
900158b8:	240281ec 	.word	0x240281ec

900158bc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
900158bc:	b570      	push	{r4, r5, r6, lr}
900158be:	6803      	ldr	r3, [r0, #0]
900158c0:	4604      	mov	r4, r0
900158c2:	4615      	mov	r5, r2
900158c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900158c6:	4798      	blx	r3
900158c8:	6823      	ldr	r3, [r4, #0]
900158ca:	4629      	mov	r1, r5
900158cc:	4620      	mov	r0, r4
900158ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900158d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900158d4:	4718      	bx	r3
	...

900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
900158d8:	b538      	push	{r3, r4, r5, lr}
900158da:	4b0e      	ldr	r3, [pc, #56]	; (90015914 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900158dc:	4604      	mov	r4, r0
900158de:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900158e0:	881b      	ldrh	r3, [r3, #0]
900158e2:	429a      	cmp	r2, r3
900158e4:	d214      	bcs.n	90015910 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900158e6:	6803      	ldr	r3, [r0, #0]
900158e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900158ea:	4798      	blx	r3
900158ec:	6823      	ldr	r3, [r4, #0]
900158ee:	4605      	mov	r5, r0
900158f0:	4620      	mov	r0, r4
900158f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900158f4:	4798      	blx	r3
900158f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900158fa:	b22d      	sxth	r5, r5
900158fc:	4601      	mov	r1, r0
900158fe:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90015902:	bf06      	itte	eq
90015904:	4602      	moveq	r2, r0
90015906:	4629      	moveq	r1, r5
90015908:	462a      	movne	r2, r5
9001590a:	4620      	mov	r0, r4
9001590c:	f7ff ffd6 	bl	900158bc <_ZN8touchgfx8Drawable14setWidthHeightEss>
90015910:	bd38      	pop	{r3, r4, r5, pc}
90015912:	bf00      	nop
90015914:	24028248 	.word	0x24028248

90015918 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90015918:	b530      	push	{r4, r5, lr}
9001591a:	888b      	ldrh	r3, [r1, #4]
9001591c:	b085      	sub	sp, #20
9001591e:	4604      	mov	r4, r0
90015920:	8583      	strh	r3, [r0, #44]	; 0x2c
90015922:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90015926:	b923      	cbnz	r3, 90015932 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90015928:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001592c:	b90b      	cbnz	r3, 90015932 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
9001592e:	f7ff ffd3 	bl	900158d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90015932:	6823      	ldr	r3, [r4, #0]
90015934:	466d      	mov	r5, sp
90015936:	4621      	mov	r1, r4
90015938:	343c      	adds	r4, #60	; 0x3c
9001593a:	4628      	mov	r0, r5
9001593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90015940:	4798      	blx	r3
90015942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90015946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
9001594a:	b005      	add	sp, #20
9001594c:	bd30      	pop	{r4, r5, pc}

9001594e <_ZNK8touchgfx3Box12getSolidRectEv>:
9001594e:	2300      	movs	r3, #0
90015950:	8083      	strh	r3, [r0, #4]
90015952:	80c3      	strh	r3, [r0, #6]
90015954:	8003      	strh	r3, [r0, #0]
90015956:	8043      	strh	r3, [r0, #2]
90015958:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
9001595c:	2bff      	cmp	r3, #255	; 0xff
9001595e:	bf01      	itttt	eq
90015960:	890b      	ldrheq	r3, [r1, #8]
90015962:	8083      	strheq	r3, [r0, #4]
90015964:	894b      	ldrheq	r3, [r1, #10]
90015966:	80c3      	strheq	r3, [r0, #6]
90015968:	4770      	bx	lr
	...

9001596c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
9001596c:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001596e:	4604      	mov	r4, r0
90015970:	466b      	mov	r3, sp
90015972:	6808      	ldr	r0, [r1, #0]
90015974:	6849      	ldr	r1, [r1, #4]
90015976:	c303      	stmia	r3!, {r0, r1}
90015978:	6823      	ldr	r3, [r4, #0]
9001597a:	4669      	mov	r1, sp
9001597c:	4620      	mov	r0, r4
9001597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015980:	4798      	blx	r3
90015982:	4b08      	ldr	r3, [pc, #32]	; (900159a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90015984:	681b      	ldr	r3, [r3, #0]
90015986:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001598a:	b10a      	cbz	r2, 90015990 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
9001598c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001598e:	b900      	cbnz	r0, 90015992 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90015990:	6898      	ldr	r0, [r3, #8]
90015992:	6803      	ldr	r3, [r0, #0]
90015994:	4669      	mov	r1, sp
90015996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90015998:	6a1d      	ldr	r5, [r3, #32]
9001599a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
9001599e:	47a8      	blx	r5
900159a0:	b003      	add	sp, #12
900159a2:	bd30      	pop	{r4, r5, pc}
900159a4:	240281ec 	.word	0x240281ec

900159a8 <_ZN8touchgfx3BoxD1Ev>:
900159a8:	4770      	bx	lr

900159aa <_ZN8touchgfx3BoxD0Ev>:
900159aa:	b510      	push	{r4, lr}
900159ac:	4604      	mov	r4, r0
900159ae:	212c      	movs	r1, #44	; 0x2c
900159b0:	f011 fe71 	bl	90027696 <_ZdlPvj>
900159b4:	4620      	mov	r0, r4
900159b6:	bd10      	pop	{r4, pc}

900159b8 <_ZNK8touchgfx3Box17invalidateContentEv>:
900159b8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900159bc:	b12a      	cbz	r2, 900159ca <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900159be:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900159c2:	b112      	cbz	r2, 900159ca <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900159c4:	6803      	ldr	r3, [r0, #0]
900159c6:	695b      	ldr	r3, [r3, #20]
900159c8:	4718      	bx	r3
900159ca:	4770      	bx	lr

900159cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
900159cc:	4b30      	ldr	r3, [pc, #192]	; (90015a90 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
900159ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900159d2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900159d4:	b08d      	sub	sp, #52	; 0x34
900159d6:	881b      	ldrh	r3, [r3, #0]
900159d8:	4604      	mov	r4, r0
900159da:	460f      	mov	r7, r1
900159dc:	4293      	cmp	r3, r2
900159de:	d954      	bls.n	90015a8a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900159e0:	4b2c      	ldr	r3, [pc, #176]	; (90015a94 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
900159e2:	6819      	ldr	r1, [r3, #0]
900159e4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900159e8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900159ec:	4a2a      	ldr	r2, [pc, #168]	; (90015a98 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900159ee:	6812      	ldr	r2, [r2, #0]
900159f0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
900159f4:	2900      	cmp	r1, #0
900159f6:	d048      	beq.n	90015a8a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900159f8:	785a      	ldrb	r2, [r3, #1]
900159fa:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
900159fe:	f3c2 0801 	ubfx	r8, r2, #0, #2
90015a02:	f3c2 0281 	ubfx	r2, r2, #2, #2
90015a06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90015a0a:	4b24      	ldr	r3, [pc, #144]	; (90015a9c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
90015a0c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
90015a10:	681a      	ldr	r2, [r3, #0]
90015a12:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90015a16:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90015a1a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
90015a1e:	6b26      	ldr	r6, [r4, #48]	; 0x30
90015a20:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90015a24:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90015a28:	9107      	str	r1, [sp, #28]
90015a2a:	f88d 8020 	strb.w	r8, [sp, #32]
90015a2e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
90015a32:	9609      	str	r6, [sp, #36]	; 0x24
90015a34:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90015a38:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90015a3c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
90015a40:	b10b      	cbz	r3, 90015a46 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
90015a42:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90015a44:	b905      	cbnz	r5, 90015a48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90015a46:	6895      	ldr	r5, [r2, #8]
90015a48:	ae05      	add	r6, sp, #20
90015a4a:	4621      	mov	r1, r4
90015a4c:	4630      	mov	r0, r6
90015a4e:	f003 fccf 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015a52:	4b13      	ldr	r3, [pc, #76]	; (90015aa0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90015a54:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90015a56:	6818      	ldr	r0, [r3, #0]
90015a58:	f7f2 fc3c 	bl	900082d4 <_ZNK8touchgfx5Texts7getTextEt>
90015a5c:	6823      	ldr	r3, [r4, #0]
90015a5e:	4680      	mov	r8, r0
90015a60:	4620      	mov	r0, r4
90015a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015a64:	4798      	blx	r3
90015a66:	6823      	ldr	r3, [r4, #0]
90015a68:	4681      	mov	r9, r0
90015a6a:	4620      	mov	r0, r4
90015a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015a70:	4798      	blx	r3
90015a72:	ab07      	add	r3, sp, #28
90015a74:	f8cd 8004 	str.w	r8, [sp, #4]
90015a78:	9300      	str	r3, [sp, #0]
90015a7a:	463b      	mov	r3, r7
90015a7c:	e9cd 9002 	strd	r9, r0, [sp, #8]
90015a80:	4628      	mov	r0, r5
90015a82:	e896 0006 	ldmia.w	r6, {r1, r2}
90015a86:	f7f2 fbd5 	bl	90008234 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90015a8a:	b00d      	add	sp, #52	; 0x34
90015a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015a90:	24028248 	.word	0x24028248
90015a94:	24028244 	.word	0x24028244
90015a98:	2402824c 	.word	0x2402824c
90015a9c:	240281ec 	.word	0x240281ec
90015aa0:	24028250 	.word	0x24028250

90015aa4 <_ZN8touchgfx5ImageD1Ev>:
90015aa4:	4770      	bx	lr

90015aa6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90015aa6:	b570      	push	{r4, r5, r6, lr}
90015aa8:	880b      	ldrh	r3, [r1, #0]
90015aaa:	460d      	mov	r5, r1
90015aac:	4604      	mov	r4, r0
90015aae:	84c3      	strh	r3, [r0, #38]	; 0x26
90015ab0:	4608      	mov	r0, r1
90015ab2:	f005 fced 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015ab6:	4606      	mov	r6, r0
90015ab8:	4628      	mov	r0, r5
90015aba:	f005 fd1d 	bl	9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015abe:	6823      	ldr	r3, [r4, #0]
90015ac0:	4605      	mov	r5, r0
90015ac2:	4631      	mov	r1, r6
90015ac4:	4620      	mov	r0, r4
90015ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015ac8:	4798      	blx	r3
90015aca:	6823      	ldr	r3, [r4, #0]
90015acc:	4629      	mov	r1, r5
90015ace:	4620      	mov	r0, r4
90015ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015ad6:	4718      	bx	r3

90015ad8 <_ZN8touchgfx5ImageD0Ev>:
90015ad8:	b510      	push	{r4, lr}
90015ada:	4604      	mov	r4, r0
90015adc:	212c      	movs	r1, #44	; 0x2c
90015ade:	f011 fdda 	bl	90027696 <_ZdlPvj>
90015ae2:	4620      	mov	r0, r4
90015ae4:	bd10      	pop	{r4, pc}

90015ae6 <_ZNK8touchgfx5Image12getSolidRectEv>:
90015ae6:	b510      	push	{r4, lr}
90015ae8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90015aec:	4604      	mov	r4, r0
90015aee:	2bff      	cmp	r3, #255	; 0xff
90015af0:	d006      	beq.n	90015b00 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
90015af2:	2300      	movs	r3, #0
90015af4:	8003      	strh	r3, [r0, #0]
90015af6:	8043      	strh	r3, [r0, #2]
90015af8:	8083      	strh	r3, [r0, #4]
90015afa:	80c3      	strh	r3, [r0, #6]
90015afc:	4620      	mov	r0, r4
90015afe:	bd10      	pop	{r4, pc}
90015b00:	3126      	adds	r1, #38	; 0x26
90015b02:	f005 fd2d 	bl	9001b560 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015b06:	e7f9      	b.n	90015afc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90015b08 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90015b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015b0c:	4604      	mov	r4, r0
90015b0e:	b088      	sub	sp, #32
90015b10:	2500      	movs	r5, #0
90015b12:	460f      	mov	r7, r1
90015b14:	f854 3b26 	ldr.w	r3, [r4], #38
90015b18:	a904      	add	r1, sp, #16
90015b1a:	4606      	mov	r6, r0
90015b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015b1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
90015b22:	4798      	blx	r3
90015b24:	4620      	mov	r0, r4
90015b26:	f005 fcb3 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015b2a:	4680      	mov	r8, r0
90015b2c:	4620      	mov	r0, r4
90015b2e:	f005 fce3 	bl	9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015b32:	9506      	str	r5, [sp, #24]
90015b34:	ad06      	add	r5, sp, #24
90015b36:	f8ad 001e 	strh.w	r0, [sp, #30]
90015b3a:	4639      	mov	r1, r7
90015b3c:	f8ad 801c 	strh.w	r8, [sp, #28]
90015b40:	4628      	mov	r0, r5
90015b42:	f7fd f987 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90015b46:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90015b4a:	2b00      	cmp	r3, #0
90015b4c:	dd19      	ble.n	90015b82 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90015b4e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90015b52:	2b00      	cmp	r3, #0
90015b54:	dd15      	ble.n	90015b82 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90015b56:	4b0c      	ldr	r3, [pc, #48]	; (90015b88 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90015b58:	681b      	ldr	r3, [r3, #0]
90015b5a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90015b5e:	b10a      	cbz	r2, 90015b64 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90015b60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90015b62:	b900      	cbnz	r0, 90015b66 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90015b64:	6898      	ldr	r0, [r3, #8]
90015b66:	2701      	movs	r7, #1
90015b68:	6801      	ldr	r1, [r0, #0]
90015b6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90015b6e:	9702      	str	r7, [sp, #8]
90015b70:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90015b74:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90015b78:	e9cd 5600 	strd	r5, r6, [sp]
90015b7c:	688d      	ldr	r5, [r1, #8]
90015b7e:	4621      	mov	r1, r4
90015b80:	47a8      	blx	r5
90015b82:	b008      	add	sp, #32
90015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015b88:	240281ec 	.word	0x240281ec

90015b8c <_ZN8touchgfx7OutlineD1Ev>:
90015b8c:	4770      	bx	lr

90015b8e <_ZN8touchgfx7OutlineD0Ev>:
90015b8e:	b510      	push	{r4, lr}
90015b90:	4604      	mov	r4, r0
90015b92:	2130      	movs	r1, #48	; 0x30
90015b94:	f011 fd7f 	bl	90027696 <_ZdlPvj>
90015b98:	4620      	mov	r0, r4
90015b9a:	bd10      	pop	{r4, pc}

90015b9c <_ZN8touchgfx7Outline5resetEv>:
90015b9c:	b510      	push	{r4, lr}
90015b9e:	4604      	mov	r4, r0
90015ba0:	f000 fe86 	bl	900168b0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
90015ba4:	60e0      	str	r0, [r4, #12]
90015ba6:	f000 fe89 	bl	900168bc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
90015baa:	68e3      	ldr	r3, [r4, #12]
90015bac:	08c0      	lsrs	r0, r0, #3
90015bae:	2200      	movs	r2, #0
90015bb0:	f647 71ff 	movw	r1, #32767	; 0x7fff
90015bb4:	6123      	str	r3, [r4, #16]
90015bb6:	3801      	subs	r0, #1
90015bb8:	60a2      	str	r2, [r4, #8]
90015bba:	6060      	str	r0, [r4, #4]
90015bbc:	8019      	strh	r1, [r3, #0]
90015bbe:	8059      	strh	r1, [r3, #2]
90015bc0:	809a      	strh	r2, [r3, #4]
90015bc2:	80da      	strh	r2, [r3, #6]
90015bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015bc6:	f023 0301 	bic.w	r3, r3, #1
90015bca:	f043 0302 	orr.w	r3, r3, #2
90015bce:	6263      	str	r3, [r4, #36]	; 0x24
90015bd0:	bd10      	pop	{r4, pc}
	...

90015bd4 <_ZN8touchgfx7OutlineC1Ev>:
90015bd4:	4b0a      	ldr	r3, [pc, #40]	; (90015c00 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
90015bd6:	b510      	push	{r4, lr}
90015bd8:	6003      	str	r3, [r0, #0]
90015bda:	2300      	movs	r3, #0
90015bdc:	4604      	mov	r4, r0
90015bde:	6243      	str	r3, [r0, #36]	; 0x24
90015be0:	e9c0 3301 	strd	r3, r3, [r0, #4]
90015be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
90015be8:	e9c0 3305 	strd	r3, r3, [r0, #20]
90015bec:	e9c0 3307 	strd	r3, r3, [r0, #28]
90015bf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
90015bf4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
90015bf8:	f7ff ffd0 	bl	90015b9c <_ZN8touchgfx7Outline5resetEv>
90015bfc:	4620      	mov	r0, r4
90015bfe:	bd10      	pop	{r4, pc}
90015c00:	9002c40c 	.word	0x9002c40c

90015c04 <_ZN8touchgfx7Outline10renderLineEiiii>:
90015c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015c08:	b093      	sub	sp, #76	; 0x4c
90015c0a:	1156      	asrs	r6, r2, #5
90015c0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90015c0e:	9305      	str	r3, [sp, #20]
90015c10:	1153      	asrs	r3, r2, #5
90015c12:	f004 051f 	and.w	r5, r4, #31
90015c16:	9303      	str	r3, [sp, #12]
90015c18:	1163      	asrs	r3, r4, #5
90015c1a:	9504      	str	r5, [sp, #16]
90015c1c:	1165      	asrs	r5, r4, #5
90015c1e:	9306      	str	r3, [sp, #24]
90015c20:	f002 031f 	and.w	r3, r2, #31
90015c24:	42ae      	cmp	r6, r5
90015c26:	f040 80f4 	bne.w	90015e12 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
90015c2a:	9c04      	ldr	r4, [sp, #16]
90015c2c:	9a05      	ldr	r2, [sp, #20]
90015c2e:	42a3      	cmp	r3, r4
90015c30:	ea4f 1e62 	mov.w	lr, r2, asr #5
90015c34:	6902      	ldr	r2, [r0, #16]
90015c36:	d125      	bne.n	90015c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
90015c38:	f9b2 3000 	ldrsh.w	r3, [r2]
90015c3c:	459e      	cmp	lr, r3
90015c3e:	d103      	bne.n	90015c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
90015c40:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015c44:	429e      	cmp	r6, r3
90015c46:	d035      	beq.n	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015c48:	88d1      	ldrh	r1, [r2, #6]
90015c4a:	8893      	ldrh	r3, [r2, #4]
90015c4c:	430b      	orrs	r3, r1
90015c4e:	d010      	beq.n	90015c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015c50:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
90015c54:	2b00      	cmp	r3, #0
90015c56:	db0c      	blt.n	90015c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015c58:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90015c5a:	428b      	cmp	r3, r1
90015c5c:	da09      	bge.n	90015c72 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
90015c5e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
90015c62:	428b      	cmp	r3, r1
90015c64:	f103 0301 	add.w	r3, r3, #1
90015c68:	bf38      	it	cc
90015c6a:	3208      	addcc	r2, #8
90015c6c:	6083      	str	r3, [r0, #8]
90015c6e:	bf38      	it	cc
90015c70:	6102      	strcc	r2, [r0, #16]
90015c72:	6903      	ldr	r3, [r0, #16]
90015c74:	9a03      	ldr	r2, [sp, #12]
90015c76:	f8a3 e000 	strh.w	lr, [r3]
90015c7a:	805a      	strh	r2, [r3, #2]
90015c7c:	2200      	movs	r2, #0
90015c7e:	809a      	strh	r2, [r3, #4]
90015c80:	80da      	strh	r2, [r3, #6]
90015c82:	e017      	b.n	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015c84:	9c05      	ldr	r4, [sp, #20]
90015c86:	114e      	asrs	r6, r1, #5
90015c88:	f001 0c1f 	and.w	ip, r1, #31
90015c8c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
90015c90:	f004 041f 	and.w	r4, r4, #31
90015c94:	4576      	cmp	r6, lr
90015c96:	f8b2 a006 	ldrh.w	sl, [r2, #6]
90015c9a:	9402      	str	r4, [sp, #8]
90015c9c:	9c04      	ldr	r4, [sp, #16]
90015c9e:	eba4 0403 	sub.w	r4, r4, r3
90015ca2:	d10a      	bne.n	90015cba <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
90015ca4:	9b02      	ldr	r3, [sp, #8]
90015ca6:	44a0      	add	r8, r4
90015ca8:	449c      	add	ip, r3
90015caa:	f8a2 8004 	strh.w	r8, [r2, #4]
90015cae:	fb04 a40c 	mla	r4, r4, ip, sl
90015cb2:	80d4      	strh	r4, [r2, #6]
90015cb4:	b013      	add	sp, #76	; 0x4c
90015cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015cba:	9d05      	ldr	r5, [sp, #20]
90015cbc:	1a69      	subs	r1, r5, r1
90015cbe:	bf51      	iteee	pl
90015cc0:	f1cc 0520 	rsbpl	r5, ip, #32
90015cc4:	fb04 f40c 	mulmi.w	r4, r4, ip
90015cc8:	4249      	negmi	r1, r1
90015cca:	2500      	movmi	r5, #0
90015ccc:	bf5d      	ittte	pl
90015cce:	436c      	mulpl	r4, r5
90015cd0:	2520      	movpl	r5, #32
90015cd2:	f04f 0901 	movpl.w	r9, #1
90015cd6:	f04f 39ff 	movmi.w	r9, #4294967295
90015cda:	9501      	str	r5, [sp, #4]
90015cdc:	9f01      	ldr	r7, [sp, #4]
90015cde:	444e      	add	r6, r9
90015ce0:	fb94 f5f1 	sdiv	r5, r4, r1
90015ce4:	fb01 4415 	mls	r4, r1, r5, r4
90015ce8:	44bc      	add	ip, r7
90015cea:	2c00      	cmp	r4, #0
90015cec:	bfbc      	itt	lt
90015cee:	f105 35ff 	addlt.w	r5, r5, #4294967295
90015cf2:	1864      	addlt	r4, r4, r1
90015cf4:	44a8      	add	r8, r5
90015cf6:	fb05 ac0c 	mla	ip, r5, ip, sl
90015cfa:	f8a2 8004 	strh.w	r8, [r2, #4]
90015cfe:	f8a2 c006 	strh.w	ip, [r2, #6]
90015d02:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015d06:	f8bc 8006 	ldrh.w	r8, [ip, #6]
90015d0a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
90015d0e:	ea58 0202 	orrs.w	r2, r8, r2
90015d12:	d011      	beq.n	90015d38 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015d14:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90015d18:	f1b8 0f00 	cmp.w	r8, #0
90015d1c:	db0c      	blt.n	90015d38 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015d1e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90015d20:	4590      	cmp	r8, r2
90015d22:	da09      	bge.n	90015d38 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
90015d24:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
90015d28:	4590      	cmp	r8, r2
90015d2a:	bf3c      	itt	cc
90015d2c:	f10c 0208 	addcc.w	r2, ip, #8
90015d30:	6102      	strcc	r2, [r0, #16]
90015d32:	f108 0201 	add.w	r2, r8, #1
90015d36:	6082      	str	r2, [r0, #8]
90015d38:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015d3c:	2700      	movs	r7, #0
90015d3e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90015d42:	45b6      	cmp	lr, r6
90015d44:	f8ac 6000 	strh.w	r6, [ip]
90015d48:	442b      	add	r3, r5
90015d4a:	f8ac 2002 	strh.w	r2, [ip, #2]
90015d4e:	f8ac 7004 	strh.w	r7, [ip, #4]
90015d52:	f8ac 7006 	strh.w	r7, [ip, #6]
90015d56:	d04b      	beq.n	90015df0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
90015d58:	9f04      	ldr	r7, [sp, #16]
90015d5a:	1a64      	subs	r4, r4, r1
90015d5c:	f04f 0a00 	mov.w	sl, #0
90015d60:	1aff      	subs	r7, r7, r3
90015d62:	443d      	add	r5, r7
90015d64:	016d      	lsls	r5, r5, #5
90015d66:	fb95 f8f1 	sdiv	r8, r5, r1
90015d6a:	fb01 5518 	mls	r5, r1, r8, r5
90015d6e:	2d00      	cmp	r5, #0
90015d70:	bfbc      	itt	lt
90015d72:	f108 38ff 	addlt.w	r8, r8, #4294967295
90015d76:	186d      	addlt	r5, r5, r1
90015d78:	f108 0701 	add.w	r7, r8, #1
90015d7c:	9703      	str	r7, [sp, #12]
90015d7e:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015d82:	1964      	adds	r4, r4, r5
90015d84:	444e      	add	r6, r9
90015d86:	bf54      	ite	pl
90015d88:	9f03      	ldrpl	r7, [sp, #12]
90015d8a:	4647      	movmi	r7, r8
90015d8c:	f8bc b004 	ldrh.w	fp, [ip, #4]
90015d90:	bf58      	it	pl
90015d92:	1a64      	subpl	r4, r4, r1
90015d94:	443b      	add	r3, r7
90015d96:	44bb      	add	fp, r7
90015d98:	f8ac b004 	strh.w	fp, [ip, #4]
90015d9c:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015da0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
90015da4:	f8ac b006 	strh.w	fp, [ip, #6]
90015da8:	f8d0 c010 	ldr.w	ip, [r0, #16]
90015dac:	f8bc b006 	ldrh.w	fp, [ip, #6]
90015db0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90015db4:	ea5b 0707 	orrs.w	r7, fp, r7
90015db8:	d011      	beq.n	90015dde <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015dba:	f9bc b002 	ldrsh.w	fp, [ip, #2]
90015dbe:	f1bb 0f00 	cmp.w	fp, #0
90015dc2:	db0c      	blt.n	90015dde <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015dc4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90015dc6:	45bb      	cmp	fp, r7
90015dc8:	da09      	bge.n	90015dde <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
90015dca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90015dce:	45bb      	cmp	fp, r7
90015dd0:	bf3c      	itt	cc
90015dd2:	f10c 0708 	addcc.w	r7, ip, #8
90015dd6:	6107      	strcc	r7, [r0, #16]
90015dd8:	f10b 0701 	add.w	r7, fp, #1
90015ddc:	6087      	str	r7, [r0, #8]
90015dde:	6907      	ldr	r7, [r0, #16]
90015de0:	45b6      	cmp	lr, r6
90015de2:	803e      	strh	r6, [r7, #0]
90015de4:	807a      	strh	r2, [r7, #2]
90015de6:	f8a7 a004 	strh.w	sl, [r7, #4]
90015dea:	f8a7 a006 	strh.w	sl, [r7, #6]
90015dee:	d1c6      	bne.n	90015d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
90015df0:	9a04      	ldr	r2, [sp, #16]
90015df2:	1ad3      	subs	r3, r2, r3
90015df4:	6902      	ldr	r2, [r0, #16]
90015df6:	8891      	ldrh	r1, [r2, #4]
90015df8:	88d6      	ldrh	r6, [r2, #6]
90015dfa:	4419      	add	r1, r3
90015dfc:	8091      	strh	r1, [r2, #4]
90015dfe:	9902      	ldr	r1, [sp, #8]
90015e00:	f101 0c20 	add.w	ip, r1, #32
90015e04:	9901      	ldr	r1, [sp, #4]
90015e06:	ebac 0c01 	sub.w	ip, ip, r1
90015e0a:	fb03 630c 	mla	r3, r3, ip, r6
90015e0e:	80d3      	strh	r3, [r2, #6]
90015e10:	e750      	b.n	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015e12:	9d05      	ldr	r5, [sp, #20]
90015e14:	1aa2      	subs	r2, r4, r2
90015e16:	eba5 0501 	sub.w	r5, r5, r1
90015e1a:	9202      	str	r2, [sp, #8]
90015e1c:	9508      	str	r5, [sp, #32]
90015e1e:	f140 8128 	bpl.w	90016072 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
90015e22:	9a03      	ldr	r2, [sp, #12]
90015e24:	2a00      	cmp	r2, #0
90015e26:	f6ff af45 	blt.w	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90015e2a:	9a02      	ldr	r2, [sp, #8]
90015e2c:	f04f 34ff 	mov.w	r4, #4294967295
90015e30:	4252      	negs	r2, r2
90015e32:	940b      	str	r4, [sp, #44]	; 0x2c
90015e34:	2400      	movs	r4, #0
90015e36:	9202      	str	r2, [sp, #8]
90015e38:	9a06      	ldr	r2, [sp, #24]
90015e3a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
90015e3e:	9206      	str	r2, [sp, #24]
90015e40:	462a      	mov	r2, r5
90015e42:	435a      	muls	r2, r3
90015e44:	9401      	str	r4, [sp, #4]
90015e46:	9c02      	ldr	r4, [sp, #8]
90015e48:	9d02      	ldr	r5, [sp, #8]
90015e4a:	fb92 f4f4 	sdiv	r4, r2, r4
90015e4e:	fb05 2214 	mls	r2, r5, r4, r2
90015e52:	2a00      	cmp	r2, #0
90015e54:	9207      	str	r2, [sp, #28]
90015e56:	bfbc      	itt	lt
90015e58:	1952      	addlt	r2, r2, r5
90015e5a:	f104 34ff 	addlt.w	r4, r4, #4294967295
90015e5e:	6905      	ldr	r5, [r0, #16]
90015e60:	bfb8      	it	lt
90015e62:	9207      	strlt	r2, [sp, #28]
90015e64:	eb04 0901 	add.w	r9, r4, r1
90015e68:	9a01      	ldr	r2, [sp, #4]
90015e6a:	ea4f 1669 	mov.w	r6, r9, asr #5
90015e6e:	429a      	cmp	r2, r3
90015e70:	f040 8111 	bne.w	90016096 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
90015e74:	f9b5 3000 	ldrsh.w	r3, [r5]
90015e78:	429e      	cmp	r6, r3
90015e7a:	d104      	bne.n	90015e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
90015e7c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90015e80:	9a03      	ldr	r2, [sp, #12]
90015e82:	429a      	cmp	r2, r3
90015e84:	d01b      	beq.n	90015ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
90015e86:	88ea      	ldrh	r2, [r5, #6]
90015e88:	88ab      	ldrh	r3, [r5, #4]
90015e8a:	4313      	orrs	r3, r2
90015e8c:	d010      	beq.n	90015eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015e8e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90015e92:	2a00      	cmp	r2, #0
90015e94:	db0c      	blt.n	90015eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015e96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015e98:	429a      	cmp	r2, r3
90015e9a:	da09      	bge.n	90015eb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
90015e9c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
90015ea0:	429a      	cmp	r2, r3
90015ea2:	f102 0201 	add.w	r2, r2, #1
90015ea6:	bf38      	it	cc
90015ea8:	3508      	addcc	r5, #8
90015eaa:	6082      	str	r2, [r0, #8]
90015eac:	bf38      	it	cc
90015eae:	6105      	strcc	r5, [r0, #16]
90015eb0:	6903      	ldr	r3, [r0, #16]
90015eb2:	9a03      	ldr	r2, [sp, #12]
90015eb4:	801e      	strh	r6, [r3, #0]
90015eb6:	805a      	strh	r2, [r3, #2]
90015eb8:	2200      	movs	r2, #0
90015eba:	809a      	strh	r2, [r3, #4]
90015ebc:	80da      	strh	r2, [r3, #6]
90015ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015ec0:	9a03      	ldr	r2, [sp, #12]
90015ec2:	6901      	ldr	r1, [r0, #16]
90015ec4:	441a      	add	r2, r3
90015ec6:	f9b1 3000 	ldrsh.w	r3, [r1]
90015eca:	42b3      	cmp	r3, r6
90015ecc:	d103      	bne.n	90015ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
90015ece:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90015ed2:	429a      	cmp	r2, r3
90015ed4:	d01a      	beq.n	90015f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
90015ed6:	88cc      	ldrh	r4, [r1, #6]
90015ed8:	888b      	ldrh	r3, [r1, #4]
90015eda:	4323      	orrs	r3, r4
90015edc:	d010      	beq.n	90015f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015ede:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015ee2:	2c00      	cmp	r4, #0
90015ee4:	db0c      	blt.n	90015f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015ee6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015ee8:	429c      	cmp	r4, r3
90015eea:	da09      	bge.n	90015f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
90015eec:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015ef0:	429c      	cmp	r4, r3
90015ef2:	f104 0401 	add.w	r4, r4, #1
90015ef6:	bf38      	it	cc
90015ef8:	3108      	addcc	r1, #8
90015efa:	6084      	str	r4, [r0, #8]
90015efc:	bf38      	it	cc
90015efe:	6101      	strcc	r1, [r0, #16]
90015f00:	6903      	ldr	r3, [r0, #16]
90015f02:	2100      	movs	r1, #0
90015f04:	801e      	strh	r6, [r3, #0]
90015f06:	805a      	strh	r2, [r3, #2]
90015f08:	8099      	strh	r1, [r3, #4]
90015f0a:	80d9      	strh	r1, [r3, #6]
90015f0c:	9b06      	ldr	r3, [sp, #24]
90015f0e:	4293      	cmp	r3, r2
90015f10:	f000 8082 	beq.w	90016018 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
90015f14:	9b08      	ldr	r3, [sp, #32]
90015f16:	9902      	ldr	r1, [sp, #8]
90015f18:	015b      	lsls	r3, r3, #5
90015f1a:	9c02      	ldr	r4, [sp, #8]
90015f1c:	fb93 f1f1 	sdiv	r1, r3, r1
90015f20:	fb04 3311 	mls	r3, r4, r1, r3
90015f24:	9103      	str	r1, [sp, #12]
90015f26:	2b00      	cmp	r3, #0
90015f28:	9308      	str	r3, [sp, #32]
90015f2a:	da04      	bge.n	90015f36 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
90015f2c:	1e4b      	subs	r3, r1, #1
90015f2e:	9303      	str	r3, [sp, #12]
90015f30:	9b08      	ldr	r3, [sp, #32]
90015f32:	4423      	add	r3, r4
90015f34:	9308      	str	r3, [sp, #32]
90015f36:	9b07      	ldr	r3, [sp, #28]
90015f38:	464f      	mov	r7, r9
90015f3a:	9902      	ldr	r1, [sp, #8]
90015f3c:	2600      	movs	r6, #0
90015f3e:	1a5b      	subs	r3, r3, r1
90015f40:	9307      	str	r3, [sp, #28]
90015f42:	9b01      	ldr	r3, [sp, #4]
90015f44:	f1c3 0320 	rsb	r3, r3, #32
90015f48:	930e      	str	r3, [sp, #56]	; 0x38
90015f4a:	990e      	ldr	r1, [sp, #56]	; 0x38
90015f4c:	9b01      	ldr	r3, [sp, #4]
90015f4e:	1a5b      	subs	r3, r3, r1
90015f50:	930a      	str	r3, [sp, #40]	; 0x28
90015f52:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
90015f56:	185b      	adds	r3, r3, r1
90015f58:	bf58      	it	pl
90015f5a:	9902      	ldrpl	r1, [sp, #8]
90015f5c:	9307      	str	r3, [sp, #28]
90015f5e:	bf57      	itett	pl
90015f60:	1a5b      	subpl	r3, r3, r1
90015f62:	9903      	ldrmi	r1, [sp, #12]
90015f64:	9307      	strpl	r3, [sp, #28]
90015f66:	9b03      	ldrpl	r3, [sp, #12]
90015f68:	bf58      	it	pl
90015f6a:	1c59      	addpl	r1, r3, #1
90015f6c:	2a00      	cmp	r2, #0
90015f6e:	4489      	add	r9, r1
90015f70:	ea4f 1a69 	mov.w	sl, r9, asr #5
90015f74:	db2e      	blt.n	90015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015f76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015f78:	4293      	cmp	r3, r2
90015f7a:	dd2b      	ble.n	90015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015f7c:	9c01      	ldr	r4, [sp, #4]
90015f7e:	6905      	ldr	r5, [r0, #16]
90015f80:	46a0      	mov	r8, r4
90015f82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90015f84:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
90015f88:	45a0      	cmp	r8, r4
90015f8a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
90015f8e:	f040 814c 	bne.w	9001622a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
90015f92:	f9b5 1000 	ldrsh.w	r1, [r5]
90015f96:	4551      	cmp	r1, sl
90015f98:	d103      	bne.n	90015fa2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
90015f9a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
90015f9e:	4291      	cmp	r1, r2
90015fa0:	d018      	beq.n	90015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
90015fa2:	ea5c 010e 	orrs.w	r1, ip, lr
90015fa6:	d00f      	beq.n	90015fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015fa8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
90015fac:	2900      	cmp	r1, #0
90015fae:	db0b      	blt.n	90015fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015fb0:	428b      	cmp	r3, r1
90015fb2:	dd09      	ble.n	90015fc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
90015fb4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
90015fb8:	4299      	cmp	r1, r3
90015fba:	f101 0101 	add.w	r1, r1, #1
90015fbe:	bf38      	it	cc
90015fc0:	3508      	addcc	r5, #8
90015fc2:	6081      	str	r1, [r0, #8]
90015fc4:	bf38      	it	cc
90015fc6:	6105      	strcc	r5, [r0, #16]
90015fc8:	6903      	ldr	r3, [r0, #16]
90015fca:	f8a3 a000 	strh.w	sl, [r3]
90015fce:	805a      	strh	r2, [r3, #2]
90015fd0:	809e      	strh	r6, [r3, #4]
90015fd2:	80de      	strh	r6, [r3, #6]
90015fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90015fd6:	6901      	ldr	r1, [r0, #16]
90015fd8:	441a      	add	r2, r3
90015fda:	88cc      	ldrh	r4, [r1, #6]
90015fdc:	888b      	ldrh	r3, [r1, #4]
90015fde:	4323      	orrs	r3, r4
90015fe0:	d010      	beq.n	90016004 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015fe2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
90015fe6:	2c00      	cmp	r4, #0
90015fe8:	db0c      	blt.n	90016004 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015fea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90015fec:	429c      	cmp	r4, r3
90015fee:	da09      	bge.n	90016004 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
90015ff0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90015ff4:	429c      	cmp	r4, r3
90015ff6:	f104 0401 	add.w	r4, r4, #1
90015ffa:	bf38      	it	cc
90015ffc:	3108      	addcc	r1, #8
90015ffe:	6084      	str	r4, [r0, #8]
90016000:	bf38      	it	cc
90016002:	6101      	strcc	r1, [r0, #16]
90016004:	6903      	ldr	r3, [r0, #16]
90016006:	464f      	mov	r7, r9
90016008:	f8a3 a000 	strh.w	sl, [r3]
9001600c:	805a      	strh	r2, [r3, #2]
9001600e:	809e      	strh	r6, [r3, #4]
90016010:	80de      	strh	r6, [r3, #6]
90016012:	9b06      	ldr	r3, [sp, #24]
90016014:	4293      	cmp	r3, r2
90016016:	d19c      	bne.n	90015f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
90016018:	9b01      	ldr	r3, [sp, #4]
9001601a:	6907      	ldr	r7, [r0, #16]
9001601c:	f1c3 0620 	rsb	r6, r3, #32
90016020:	9b05      	ldr	r3, [sp, #20]
90016022:	ea4f 1e63 	mov.w	lr, r3, asr #5
90016026:	9b04      	ldr	r3, [sp, #16]
90016028:	429e      	cmp	r6, r3
9001602a:	f040 81c7 	bne.w	900163bc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
9001602e:	f9b7 3000 	ldrsh.w	r3, [r7]
90016032:	459e      	cmp	lr, r3
90016034:	d104      	bne.n	90016040 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
90016036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9001603a:	429a      	cmp	r2, r3
9001603c:	f43f ae3a 	beq.w	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
90016040:	88f9      	ldrh	r1, [r7, #6]
90016042:	88bb      	ldrh	r3, [r7, #4]
90016044:	430b      	orrs	r3, r1
90016046:	d010      	beq.n	9001606a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90016048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9001604c:	2b00      	cmp	r3, #0
9001604e:	db0c      	blt.n	9001606a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90016050:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
90016052:	428b      	cmp	r3, r1
90016054:	da09      	bge.n	9001606a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
90016056:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
9001605a:	428b      	cmp	r3, r1
9001605c:	f103 0301 	add.w	r3, r3, #1
90016060:	bf38      	it	cc
90016062:	3708      	addcc	r7, #8
90016064:	6083      	str	r3, [r0, #8]
90016066:	bf38      	it	cc
90016068:	6107      	strcc	r7, [r0, #16]
9001606a:	6903      	ldr	r3, [r0, #16]
9001606c:	f8a3 e000 	strh.w	lr, [r3]
90016070:	e603      	b.n	90015c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
90016072:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
90016074:	9c03      	ldr	r4, [sp, #12]
90016076:	42a2      	cmp	r2, r4
90016078:	f6ff ae1c 	blt.w	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
9001607c:	9c06      	ldr	r4, [sp, #24]
9001607e:	42a2      	cmp	r2, r4
90016080:	9c08      	ldr	r4, [sp, #32]
90016082:	bfbc      	itt	lt
90016084:	3201      	addlt	r2, #1
90016086:	9206      	strlt	r2, [sp, #24]
90016088:	f1c3 0220 	rsb	r2, r3, #32
9001608c:	4362      	muls	r2, r4
9001608e:	2401      	movs	r4, #1
90016090:	940b      	str	r4, [sp, #44]	; 0x2c
90016092:	2420      	movs	r4, #32
90016094:	e6d6      	b.n	90015e44 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
90016096:	ea4f 1861 	mov.w	r8, r1, asr #5
9001609a:	f009 021f 	and.w	r2, r9, #31
9001609e:	f001 011f 	and.w	r1, r1, #31
900160a2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
900160a6:	920c      	str	r2, [sp, #48]	; 0x30
900160a8:	45b0      	cmp	r8, r6
900160aa:	9a01      	ldr	r2, [sp, #4]
900160ac:	f8b5 a006 	ldrh.w	sl, [r5, #6]
900160b0:	eba2 0203 	sub.w	r2, r2, r3
900160b4:	d108      	bne.n	900160c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
900160b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900160b8:	4496      	add	lr, r2
900160ba:	4419      	add	r1, r3
900160bc:	f8a5 e004 	strh.w	lr, [r5, #4]
900160c0:	fb02 a101 	mla	r1, r2, r1, sl
900160c4:	80e9      	strh	r1, [r5, #6]
900160c6:	e6fa      	b.n	90015ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
900160c8:	2c00      	cmp	r4, #0
900160ca:	f2c0 80a7 	blt.w	9001621c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
900160ce:	2701      	movs	r7, #1
900160d0:	f1c1 0c20 	rsb	ip, r1, #32
900160d4:	970a      	str	r7, [sp, #40]	; 0x28
900160d6:	2720      	movs	r7, #32
900160d8:	fb02 f20c 	mul.w	r2, r2, ip
900160dc:	9709      	str	r7, [sp, #36]	; 0x24
900160de:	9f09      	ldr	r7, [sp, #36]	; 0x24
900160e0:	fb92 fcf4 	sdiv	ip, r2, r4
900160e4:	fb04 221c 	mls	r2, r4, ip, r2
900160e8:	4439      	add	r1, r7
900160ea:	2a00      	cmp	r2, #0
900160ec:	bfbc      	itt	lt
900160ee:	f10c 3cff 	addlt.w	ip, ip, #4294967295
900160f2:	1912      	addlt	r2, r2, r4
900160f4:	fb0c a101 	mla	r1, ip, r1, sl
900160f8:	44e6      	add	lr, ip
900160fa:	80e9      	strh	r1, [r5, #6]
900160fc:	990a      	ldr	r1, [sp, #40]	; 0x28
900160fe:	f8a5 e004 	strh.w	lr, [r5, #4]
90016102:	eb08 0501 	add.w	r5, r8, r1
90016106:	6901      	ldr	r1, [r0, #16]
90016108:	f8b1 8006 	ldrh.w	r8, [r1, #6]
9001610c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
90016110:	ea58 070e 	orrs.w	r7, r8, lr
90016114:	d010      	beq.n	90016138 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016116:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
9001611a:	f1be 0f00 	cmp.w	lr, #0
9001611e:	db0b      	blt.n	90016138 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016120:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90016122:	45be      	cmp	lr, r7
90016124:	da08      	bge.n	90016138 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
90016126:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
9001612a:	45be      	cmp	lr, r7
9001612c:	bf3c      	itt	cc
9001612e:	3108      	addcc	r1, #8
90016130:	6101      	strcc	r1, [r0, #16]
90016132:	f10e 0101 	add.w	r1, lr, #1
90016136:	6081      	str	r1, [r0, #8]
90016138:	6901      	ldr	r1, [r0, #16]
9001613a:	f04f 0e00 	mov.w	lr, #0
9001613e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90016142:	42ae      	cmp	r6, r5
90016144:	800d      	strh	r5, [r1, #0]
90016146:	4463      	add	r3, ip
90016148:	f8a1 8002 	strh.w	r8, [r1, #2]
9001614c:	f8a1 e004 	strh.w	lr, [r1, #4]
90016150:	f8a1 e006 	strh.w	lr, [r1, #6]
90016154:	d053      	beq.n	900161fe <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
90016156:	9901      	ldr	r1, [sp, #4]
90016158:	1b12      	subs	r2, r2, r4
9001615a:	1ac9      	subs	r1, r1, r3
9001615c:	4461      	add	r1, ip
9001615e:	0149      	lsls	r1, r1, #5
90016160:	fb91 fef4 	sdiv	lr, r1, r4
90016164:	fb04 111e 	mls	r1, r4, lr, r1
90016168:	2900      	cmp	r1, #0
9001616a:	bfbc      	itt	lt
9001616c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
90016170:	1909      	addlt	r1, r1, r4
90016172:	f10e 0701 	add.w	r7, lr, #1
90016176:	970d      	str	r7, [sp, #52]	; 0x34
90016178:	f8d0 a010 	ldr.w	sl, [r0, #16]
9001617c:	1852      	adds	r2, r2, r1
9001617e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90016180:	bf54      	ite	pl
90016182:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
90016186:	46f4      	movmi	ip, lr
90016188:	f8ba b004 	ldrh.w	fp, [sl, #4]
9001618c:	bf58      	it	pl
9001618e:	1b12      	subpl	r2, r2, r4
90016190:	4463      	add	r3, ip
90016192:	443d      	add	r5, r7
90016194:	44e3      	add	fp, ip
90016196:	f8aa b004 	strh.w	fp, [sl, #4]
9001619a:	f8ba b006 	ldrh.w	fp, [sl, #6]
9001619e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
900161a2:	f8aa b006 	strh.w	fp, [sl, #6]
900161a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
900161aa:	f8bc b006 	ldrh.w	fp, [ip, #6]
900161ae:	f8bc a004 	ldrh.w	sl, [ip, #4]
900161b2:	ea5b 070a 	orrs.w	r7, fp, sl
900161b6:	d014      	beq.n	900161e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
900161b8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
900161bc:	f1ba 0f00 	cmp.w	sl, #0
900161c0:	db0f      	blt.n	900161e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
900161c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900161c4:	45ba      	cmp	sl, r7
900161c6:	da0c      	bge.n	900161e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
900161c8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
900161cc:	45ba      	cmp	sl, r7
900161ce:	f10a 0a01 	add.w	sl, sl, #1
900161d2:	bf38      	it	cc
900161d4:	f10c 0c08 	addcc.w	ip, ip, #8
900161d8:	f8c0 a008 	str.w	sl, [r0, #8]
900161dc:	bf38      	it	cc
900161de:	f8c0 c010 	strcc.w	ip, [r0, #16]
900161e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
900161e6:	f04f 0700 	mov.w	r7, #0
900161ea:	42ae      	cmp	r6, r5
900161ec:	f8ac 5000 	strh.w	r5, [ip]
900161f0:	f8ac 8002 	strh.w	r8, [ip, #2]
900161f4:	f8ac 7004 	strh.w	r7, [ip, #4]
900161f8:	f8ac 7006 	strh.w	r7, [ip, #6]
900161fc:	d1bc      	bne.n	90016178 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
900161fe:	6904      	ldr	r4, [r0, #16]
90016200:	9a01      	ldr	r2, [sp, #4]
90016202:	990c      	ldr	r1, [sp, #48]	; 0x30
90016204:	1ad3      	subs	r3, r2, r3
90016206:	88a2      	ldrh	r2, [r4, #4]
90016208:	3120      	adds	r1, #32
9001620a:	441a      	add	r2, r3
9001620c:	80a2      	strh	r2, [r4, #4]
9001620e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016210:	1a89      	subs	r1, r1, r2
90016212:	88e2      	ldrh	r2, [r4, #6]
90016214:	fb03 2301 	mla	r3, r3, r1, r2
90016218:	80e3      	strh	r3, [r4, #6]
9001621a:	e650      	b.n	90015ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
9001621c:	f04f 37ff 	mov.w	r7, #4294967295
90016220:	434a      	muls	r2, r1
90016222:	4264      	negs	r4, r4
90016224:	970a      	str	r7, [sp, #40]	; 0x28
90016226:	2700      	movs	r7, #0
90016228:	e758      	b.n	900160dc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
9001622a:	ea4f 1867 	mov.w	r8, r7, asr #5
9001622e:	f009 031f 	and.w	r3, r9, #31
90016232:	f007 071f 	and.w	r7, r7, #31
90016236:	fa1f fc8c 	uxth.w	ip, ip
9001623a:	45d0      	cmp	r8, sl
9001623c:	930f      	str	r3, [sp, #60]	; 0x3c
9001623e:	fa1f fe8e 	uxth.w	lr, lr
90016242:	d10a      	bne.n	9001625a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
90016244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90016246:	449c      	add	ip, r3
90016248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001624a:	441f      	add	r7, r3
9001624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001624e:	f8a5 c004 	strh.w	ip, [r5, #4]
90016252:	fb03 e707 	mla	r7, r3, r7, lr
90016256:	80ef      	strh	r7, [r5, #6]
90016258:	e6bc      	b.n	90015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
9001625a:	2900      	cmp	r1, #0
9001625c:	f2c0 80a6 	blt.w	900163ac <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
90016260:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90016262:	f1c7 0320 	rsb	r3, r7, #32
90016266:	4363      	muls	r3, r4
90016268:	2401      	movs	r4, #1
9001626a:	940d      	str	r4, [sp, #52]	; 0x34
9001626c:	2420      	movs	r4, #32
9001626e:	940c      	str	r4, [sp, #48]	; 0x30
90016270:	fb93 f4f1 	sdiv	r4, r3, r1
90016274:	fb01 3b14 	mls	fp, r1, r4, r3
90016278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001627a:	f1bb 0f00 	cmp.w	fp, #0
9001627e:	441f      	add	r7, r3
90016280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016282:	bfbc      	itt	lt
90016284:	f104 34ff 	addlt.w	r4, r4, #4294967295
90016288:	448b      	addlt	fp, r1
9001628a:	fb04 e707 	mla	r7, r4, r7, lr
9001628e:	44a4      	add	ip, r4
90016290:	80ef      	strh	r7, [r5, #6]
90016292:	f8a5 c004 	strh.w	ip, [r5, #4]
90016296:	eb08 0503 	add.w	r5, r8, r3
9001629a:	f8d0 c010 	ldr.w	ip, [r0, #16]
9001629e:	f8bc e006 	ldrh.w	lr, [ip, #6]
900162a2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
900162a6:	ea5e 0307 	orrs.w	r3, lr, r7
900162aa:	d011      	beq.n	900162d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
900162ac:	f9bc e002 	ldrsh.w	lr, [ip, #2]
900162b0:	f1be 0f00 	cmp.w	lr, #0
900162b4:	db0c      	blt.n	900162d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
900162b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900162b8:	45be      	cmp	lr, r7
900162ba:	da09      	bge.n	900162d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
900162bc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
900162c0:	45be      	cmp	lr, r7
900162c2:	bf3c      	itt	cc
900162c4:	f10c 0708 	addcc.w	r7, ip, #8
900162c8:	6107      	strcc	r7, [r0, #16]
900162ca:	f10e 0701 	add.w	r7, lr, #1
900162ce:	6087      	str	r7, [r0, #8]
900162d0:	6907      	ldr	r7, [r0, #16]
900162d2:	b213      	sxth	r3, r2
900162d4:	4555      	cmp	r5, sl
900162d6:	9310      	str	r3, [sp, #64]	; 0x40
900162d8:	807b      	strh	r3, [r7, #2]
900162da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900162dc:	803d      	strh	r5, [r7, #0]
900162de:	80be      	strh	r6, [r7, #4]
900162e0:	eb04 0c03 	add.w	ip, r4, r3
900162e4:	80fe      	strh	r6, [r7, #6]
900162e6:	d050      	beq.n	9001638a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
900162e8:	9b01      	ldr	r3, [sp, #4]
900162ea:	eba3 070c 	sub.w	r7, r3, ip
900162ee:	ebab 0301 	sub.w	r3, fp, r1
900162f2:	443c      	add	r4, r7
900162f4:	9309      	str	r3, [sp, #36]	; 0x24
900162f6:	0164      	lsls	r4, r4, #5
900162f8:	fb94 f8f1 	sdiv	r8, r4, r1
900162fc:	fb01 4418 	mls	r4, r1, r8, r4
90016300:	2c00      	cmp	r4, #0
90016302:	bfbc      	itt	lt
90016304:	f108 38ff 	addlt.w	r8, r8, #4294967295
90016308:	1864      	addlt	r4, r4, r1
9001630a:	f108 0701 	add.w	r7, r8, #1
9001630e:	9711      	str	r7, [sp, #68]	; 0x44
90016310:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016312:	f8d0 e010 	ldr.w	lr, [r0, #16]
90016316:	191b      	adds	r3, r3, r4
90016318:	f8be b004 	ldrh.w	fp, [lr, #4]
9001631c:	bf54      	ite	pl
9001631e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
90016320:	4647      	movmi	r7, r8
90016322:	9309      	str	r3, [sp, #36]	; 0x24
90016324:	bf58      	it	pl
90016326:	1a5b      	subpl	r3, r3, r1
90016328:	44bb      	add	fp, r7
9001632a:	44bc      	add	ip, r7
9001632c:	bf58      	it	pl
9001632e:	9309      	strpl	r3, [sp, #36]	; 0x24
90016330:	f8ae b004 	strh.w	fp, [lr, #4]
90016334:	f8be b006 	ldrh.w	fp, [lr, #6]
90016338:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
9001633c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
9001633e:	f8ae b006 	strh.w	fp, [lr, #6]
90016342:	443d      	add	r5, r7
90016344:	f8d0 e010 	ldr.w	lr, [r0, #16]
90016348:	f8be b006 	ldrh.w	fp, [lr, #6]
9001634c:	f8be 7004 	ldrh.w	r7, [lr, #4]
90016350:	ea5b 0307 	orrs.w	r3, fp, r7
90016354:	d011      	beq.n	9001637a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90016356:	f9be b002 	ldrsh.w	fp, [lr, #2]
9001635a:	f1bb 0f00 	cmp.w	fp, #0
9001635e:	db0c      	blt.n	9001637a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90016360:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
90016362:	45bb      	cmp	fp, r7
90016364:	da09      	bge.n	9001637a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
90016366:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
9001636a:	45bb      	cmp	fp, r7
9001636c:	bf3c      	itt	cc
9001636e:	f10e 0708 	addcc.w	r7, lr, #8
90016372:	6107      	strcc	r7, [r0, #16]
90016374:	f10b 0701 	add.w	r7, fp, #1
90016378:	6087      	str	r7, [r0, #8]
9001637a:	6907      	ldr	r7, [r0, #16]
9001637c:	4555      	cmp	r5, sl
9001637e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016380:	803d      	strh	r5, [r7, #0]
90016382:	807b      	strh	r3, [r7, #2]
90016384:	80be      	strh	r6, [r7, #4]
90016386:	80fe      	strh	r6, [r7, #6]
90016388:	d1c2      	bne.n	90016310 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
9001638a:	9b01      	ldr	r3, [sp, #4]
9001638c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001638e:	eba3 0c0c 	sub.w	ip, r3, ip
90016392:	6903      	ldr	r3, [r0, #16]
90016394:	3720      	adds	r7, #32
90016396:	8899      	ldrh	r1, [r3, #4]
90016398:	4461      	add	r1, ip
9001639a:	8099      	strh	r1, [r3, #4]
9001639c:	990c      	ldr	r1, [sp, #48]	; 0x30
9001639e:	1a7f      	subs	r7, r7, r1
900163a0:	88d9      	ldrh	r1, [r3, #6]
900163a2:	fb0c 1c07 	mla	ip, ip, r7, r1
900163a6:	f8a3 c006 	strh.w	ip, [r3, #6]
900163aa:	e613      	b.n	90015fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
900163ac:	f04f 34ff 	mov.w	r4, #4294967295
900163b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900163b2:	4249      	negs	r1, r1
900163b4:	940d      	str	r4, [sp, #52]	; 0x34
900163b6:	2400      	movs	r4, #0
900163b8:	437b      	muls	r3, r7
900163ba:	e758      	b.n	9001626e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
900163bc:	9905      	ldr	r1, [sp, #20]
900163be:	ea4f 1b69 	mov.w	fp, r9, asr #5
900163c2:	f009 0c1f 	and.w	ip, r9, #31
900163c6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
900163ca:	f001 011f 	and.w	r1, r1, #31
900163ce:	45f3      	cmp	fp, lr
900163d0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
900163d4:	9102      	str	r1, [sp, #8]
900163d6:	9904      	ldr	r1, [sp, #16]
900163d8:	eba1 0406 	sub.w	r4, r1, r6
900163dc:	d108      	bne.n	900163f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
900163de:	9b02      	ldr	r3, [sp, #8]
900163e0:	44a0      	add	r8, r4
900163e2:	449c      	add	ip, r3
900163e4:	f8a7 8004 	strh.w	r8, [r7, #4]
900163e8:	fb04 a40c 	mla	r4, r4, ip, sl
900163ec:	80fc      	strh	r4, [r7, #6]
900163ee:	e461      	b.n	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
900163f0:	9905      	ldr	r1, [sp, #20]
900163f2:	ebb1 0109 	subs.w	r1, r1, r9
900163f6:	bf51      	iteee	pl
900163f8:	f1cc 0520 	rsbpl	r5, ip, #32
900163fc:	fb04 f40c 	mulmi.w	r4, r4, ip
90016400:	4249      	negmi	r1, r1
90016402:	2500      	movmi	r5, #0
90016404:	bf5d      	ittte	pl
90016406:	436c      	mulpl	r4, r5
90016408:	2520      	movpl	r5, #32
9001640a:	f04f 0901 	movpl.w	r9, #1
9001640e:	f04f 39ff 	movmi.w	r9, #4294967295
90016412:	9501      	str	r5, [sp, #4]
90016414:	9b01      	ldr	r3, [sp, #4]
90016416:	fb94 f5f1 	sdiv	r5, r4, r1
9001641a:	fb01 4415 	mls	r4, r1, r5, r4
9001641e:	449c      	add	ip, r3
90016420:	eb0b 0309 	add.w	r3, fp, r9
90016424:	2c00      	cmp	r4, #0
90016426:	bfbc      	itt	lt
90016428:	f105 35ff 	addlt.w	r5, r5, #4294967295
9001642c:	1864      	addlt	r4, r4, r1
9001642e:	44a8      	add	r8, r5
90016430:	fb05 ac0c 	mla	ip, r5, ip, sl
90016434:	f8a7 8004 	strh.w	r8, [r7, #4]
90016438:	f8a7 c006 	strh.w	ip, [r7, #6]
9001643c:	f8d0 c010 	ldr.w	ip, [r0, #16]
90016440:	f8bc 8006 	ldrh.w	r8, [ip, #6]
90016444:	f8bc 7004 	ldrh.w	r7, [ip, #4]
90016448:	ea58 0707 	orrs.w	r7, r8, r7
9001644c:	d011      	beq.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
9001644e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
90016452:	f1b8 0f00 	cmp.w	r8, #0
90016456:	db0c      	blt.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
90016458:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
9001645a:	45b8      	cmp	r8, r7
9001645c:	da09      	bge.n	90016472 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
9001645e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
90016462:	45b8      	cmp	r8, r7
90016464:	bf3c      	itt	cc
90016466:	f10c 0708 	addcc.w	r7, ip, #8
9001646a:	6107      	strcc	r7, [r0, #16]
9001646c:	f108 0701 	add.w	r7, r8, #1
90016470:	6087      	str	r7, [r0, #8]
90016472:	6907      	ldr	r7, [r0, #16]
90016474:	f04f 0c00 	mov.w	ip, #0
90016478:	b212      	sxth	r2, r2
9001647a:	459e      	cmp	lr, r3
9001647c:	803b      	strh	r3, [r7, #0]
9001647e:	442e      	add	r6, r5
90016480:	807a      	strh	r2, [r7, #2]
90016482:	f8a7 c004 	strh.w	ip, [r7, #4]
90016486:	f8a7 c006 	strh.w	ip, [r7, #6]
9001648a:	d04b      	beq.n	90016524 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
9001648c:	9f04      	ldr	r7, [sp, #16]
9001648e:	1a64      	subs	r4, r4, r1
90016490:	f04f 0a00 	mov.w	sl, #0
90016494:	1bbf      	subs	r7, r7, r6
90016496:	443d      	add	r5, r7
90016498:	016d      	lsls	r5, r5, #5
9001649a:	fb95 f8f1 	sdiv	r8, r5, r1
9001649e:	fb01 5518 	mls	r5, r1, r8, r5
900164a2:	4565      	cmp	r5, ip
900164a4:	bfbc      	itt	lt
900164a6:	f108 38ff 	addlt.w	r8, r8, #4294967295
900164aa:	186d      	addlt	r5, r5, r1
900164ac:	f108 0701 	add.w	r7, r8, #1
900164b0:	9703      	str	r7, [sp, #12]
900164b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
900164b6:	1964      	adds	r4, r4, r5
900164b8:	444b      	add	r3, r9
900164ba:	bf54      	ite	pl
900164bc:	9f03      	ldrpl	r7, [sp, #12]
900164be:	4647      	movmi	r7, r8
900164c0:	f8bc b004 	ldrh.w	fp, [ip, #4]
900164c4:	bf58      	it	pl
900164c6:	1a64      	subpl	r4, r4, r1
900164c8:	443e      	add	r6, r7
900164ca:	44bb      	add	fp, r7
900164cc:	f8ac b004 	strh.w	fp, [ip, #4]
900164d0:	f8bc b006 	ldrh.w	fp, [ip, #6]
900164d4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
900164d8:	f8ac b006 	strh.w	fp, [ip, #6]
900164dc:	f8d0 c010 	ldr.w	ip, [r0, #16]
900164e0:	f8bc b006 	ldrh.w	fp, [ip, #6]
900164e4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
900164e8:	ea5b 0707 	orrs.w	r7, fp, r7
900164ec:	d011      	beq.n	90016512 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
900164ee:	f9bc b002 	ldrsh.w	fp, [ip, #2]
900164f2:	f1bb 0f00 	cmp.w	fp, #0
900164f6:	db0c      	blt.n	90016512 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
900164f8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
900164fa:	45bb      	cmp	fp, r7
900164fc:	da09      	bge.n	90016512 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
900164fe:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
90016502:	45bb      	cmp	fp, r7
90016504:	bf3c      	itt	cc
90016506:	f10c 0708 	addcc.w	r7, ip, #8
9001650a:	6107      	strcc	r7, [r0, #16]
9001650c:	f10b 0701 	add.w	r7, fp, #1
90016510:	6087      	str	r7, [r0, #8]
90016512:	6907      	ldr	r7, [r0, #16]
90016514:	459e      	cmp	lr, r3
90016516:	803b      	strh	r3, [r7, #0]
90016518:	807a      	strh	r2, [r7, #2]
9001651a:	f8a7 a004 	strh.w	sl, [r7, #4]
9001651e:	f8a7 a006 	strh.w	sl, [r7, #6]
90016522:	d1c6      	bne.n	900164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
90016524:	9b04      	ldr	r3, [sp, #16]
90016526:	1b9e      	subs	r6, r3, r6
90016528:	6903      	ldr	r3, [r0, #16]
9001652a:	889a      	ldrh	r2, [r3, #4]
9001652c:	4432      	add	r2, r6
9001652e:	809a      	strh	r2, [r3, #4]
90016530:	9a02      	ldr	r2, [sp, #8]
90016532:	f102 0c20 	add.w	ip, r2, #32
90016536:	9a01      	ldr	r2, [sp, #4]
90016538:	ebac 0c02 	sub.w	ip, ip, r2
9001653c:	88da      	ldrh	r2, [r3, #6]
9001653e:	fb06 260c 	mla	r6, r6, ip, r2
90016542:	80de      	strh	r6, [r3, #6]
90016544:	f7ff bbb6 	b.w	90015cb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

90016548 <_ZN8touchgfx7Outline6lineToEii>:
90016548:	6a43      	ldr	r3, [r0, #36]	; 0x24
9001654a:	079b      	lsls	r3, r3, #30
9001654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9001654e:	460e      	mov	r6, r1
90016550:	4615      	mov	r5, r2
90016552:	d511      	bpl.n	90016578 <_ZN8touchgfx7Outline6lineToEii+0x30>
90016554:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
90016558:	ea86 0701 	eor.w	r7, r6, r1
9001655c:	ea85 0302 	eor.w	r3, r5, r2
90016560:	433b      	orrs	r3, r7
90016562:	d009      	beq.n	90016578 <_ZN8touchgfx7Outline6lineToEii+0x30>
90016564:	4633      	mov	r3, r6
90016566:	9500      	str	r5, [sp, #0]
90016568:	f7ff fb4c 	bl	90015c04 <_ZN8touchgfx7Outline10renderLineEiiii>
9001656c:	6a43      	ldr	r3, [r0, #36]	; 0x24
9001656e:	f043 0301 	orr.w	r3, r3, #1
90016572:	e9c0 6505 	strd	r6, r5, [r0, #20]
90016576:	6243      	str	r3, [r0, #36]	; 0x24
90016578:	b003      	add	sp, #12
9001657a:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001657c <_ZN8touchgfx7Outline6moveToEii>:
9001657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001657e:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016580:	4615      	mov	r5, r2
90016582:	4604      	mov	r4, r0
90016584:	460e      	mov	r6, r1
90016586:	079a      	lsls	r2, r3, #30
90016588:	d401      	bmi.n	9001658e <_ZN8touchgfx7Outline6moveToEii+0x12>
9001658a:	f7ff fb07 	bl	90015b9c <_ZN8touchgfx7Outline5resetEv>
9001658e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90016590:	07db      	lsls	r3, r3, #31
90016592:	d504      	bpl.n	9001659e <_ZN8touchgfx7Outline6moveToEii+0x22>
90016594:	4620      	mov	r0, r4
90016596:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
9001659a:	f7ff ffd5 	bl	90016548 <_ZN8touchgfx7Outline6lineToEii>
9001659e:	6923      	ldr	r3, [r4, #16]
900165a0:	1170      	asrs	r0, r6, #5
900165a2:	1169      	asrs	r1, r5, #5
900165a4:	f9b3 2000 	ldrsh.w	r2, [r3]
900165a8:	4290      	cmp	r0, r2
900165aa:	d103      	bne.n	900165b4 <_ZN8touchgfx7Outline6moveToEii+0x38>
900165ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
900165b0:	4291      	cmp	r1, r2
900165b2:	d01a      	beq.n	900165ea <_ZN8touchgfx7Outline6moveToEii+0x6e>
900165b4:	88df      	ldrh	r7, [r3, #6]
900165b6:	889a      	ldrh	r2, [r3, #4]
900165b8:	433a      	orrs	r2, r7
900165ba:	d010      	beq.n	900165de <_ZN8touchgfx7Outline6moveToEii+0x62>
900165bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
900165c0:	2a00      	cmp	r2, #0
900165c2:	db0c      	blt.n	900165de <_ZN8touchgfx7Outline6moveToEii+0x62>
900165c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
900165c6:	42ba      	cmp	r2, r7
900165c8:	da09      	bge.n	900165de <_ZN8touchgfx7Outline6moveToEii+0x62>
900165ca:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
900165ce:	42ba      	cmp	r2, r7
900165d0:	f102 0201 	add.w	r2, r2, #1
900165d4:	bf38      	it	cc
900165d6:	3308      	addcc	r3, #8
900165d8:	60a2      	str	r2, [r4, #8]
900165da:	bf38      	it	cc
900165dc:	6123      	strcc	r3, [r4, #16]
900165de:	6923      	ldr	r3, [r4, #16]
900165e0:	2200      	movs	r2, #0
900165e2:	8018      	strh	r0, [r3, #0]
900165e4:	8059      	strh	r1, [r3, #2]
900165e6:	809a      	strh	r2, [r3, #4]
900165e8:	80da      	strh	r2, [r3, #6]
900165ea:	6166      	str	r6, [r4, #20]
900165ec:	6225      	str	r5, [r4, #32]
900165ee:	e9c4 5606 	strd	r5, r6, [r4, #24]
900165f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900165f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
900165f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900165f8:	b0d0      	sub	sp, #320	; 0x140
900165fa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
900165fe:	466c      	mov	r4, sp
90016600:	4627      	mov	r7, r4
90016602:	1a0d      	subs	r5, r1, r0
90016604:	f100 0308 	add.w	r3, r0, #8
90016608:	2d48      	cmp	r5, #72	; 0x48
9001660a:	f340 80d5 	ble.w	900167b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001660e:	112d      	asrs	r5, r5, #4
90016610:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
90016614:	f9b0 9000 	ldrsh.w	r9, [r0]
90016618:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
9001661c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
90016620:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
90016624:	6816      	ldr	r6, [r2, #0]
90016626:	6006      	str	r6, [r0, #0]
90016628:	6856      	ldr	r6, [r2, #4]
9001662a:	6046      	str	r6, [r0, #4]
9001662c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90016630:	f8a2 8002 	strh.w	r8, [r2, #2]
90016634:	f8a2 e004 	strh.w	lr, [r2, #4]
90016638:	f8a2 c006 	strh.w	ip, [r2, #6]
9001663c:	f1a1 0208 	sub.w	r2, r1, #8
90016640:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
90016644:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
90016648:	4565      	cmp	r5, ip
9001664a:	db06      	blt.n	9001665a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
9001664c:	d119      	bne.n	90016682 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
9001664e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
90016652:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
90016656:	42ae      	cmp	r6, r5
90016658:	dd13      	ble.n	90016682 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
9001665a:	460e      	mov	r6, r1
9001665c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
90016660:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
90016664:	f856 5d08 	ldr.w	r5, [r6, #-8]!
90016668:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
9001666c:	601d      	str	r5, [r3, #0]
9001666e:	6875      	ldr	r5, [r6, #4]
90016670:	605d      	str	r5, [r3, #4]
90016672:	f821 9c08 	strh.w	r9, [r1, #-8]
90016676:	f821 cc06 	strh.w	ip, [r1, #-6]
9001667a:	f821 8c04 	strh.w	r8, [r1, #-4]
9001667e:	f821 ec02 	strh.w	lr, [r1, #-2]
90016682:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90016686:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
9001668a:	42ae      	cmp	r6, r5
9001668c:	db06      	blt.n	9001669c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
9001668e:	d116      	bne.n	900166be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
90016690:	f9b0 c000 	ldrsh.w	ip, [r0]
90016694:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
90016698:	45ac      	cmp	ip, r5
9001669a:	da10      	bge.n	900166be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
9001669c:	681d      	ldr	r5, [r3, #0]
9001669e:	f9b0 8000 	ldrsh.w	r8, [r0]
900166a2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
900166a6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
900166aa:	6005      	str	r5, [r0, #0]
900166ac:	685d      	ldr	r5, [r3, #4]
900166ae:	f8a0 8008 	strh.w	r8, [r0, #8]
900166b2:	6045      	str	r5, [r0, #4]
900166b4:	8146      	strh	r6, [r0, #10]
900166b6:	f8a0 e00c 	strh.w	lr, [r0, #12]
900166ba:	f8a0 c00e 	strh.w	ip, [r0, #14]
900166be:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
900166c2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
900166c6:	4565      	cmp	r5, ip
900166c8:	db06      	blt.n	900166d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
900166ca:	d119      	bne.n	90016700 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900166cc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
900166d0:	f9b0 5000 	ldrsh.w	r5, [r0]
900166d4:	42ae      	cmp	r6, r5
900166d6:	da13      	bge.n	90016700 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
900166d8:	460e      	mov	r6, r1
900166da:	f9b0 9000 	ldrsh.w	r9, [r0]
900166de:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
900166e2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
900166e6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
900166ea:	6005      	str	r5, [r0, #0]
900166ec:	6875      	ldr	r5, [r6, #4]
900166ee:	6045      	str	r5, [r0, #4]
900166f0:	f821 9c08 	strh.w	r9, [r1, #-8]
900166f4:	f821 cc06 	strh.w	ip, [r1, #-6]
900166f8:	f821 8c04 	strh.w	r8, [r1, #-4]
900166fc:	f821 ec02 	strh.w	lr, [r1, #-2]
90016700:	3308      	adds	r3, #8
90016702:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
90016706:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
9001670a:	45e6      	cmp	lr, ip
9001670c:	dbf8      	blt.n	90016700 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001670e:	d105      	bne.n	9001671c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016710:	f9b3 6000 	ldrsh.w	r6, [r3]
90016714:	f9b0 5000 	ldrsh.w	r5, [r0]
90016718:	42ae      	cmp	r6, r5
9001671a:	dbf1      	blt.n	90016700 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001671c:	4615      	mov	r5, r2
9001671e:	3a08      	subs	r2, #8
90016720:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
90016724:	45b4      	cmp	ip, r6
90016726:	dbf9      	blt.n	9001671c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016728:	d105      	bne.n	90016736 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
9001672a:	f9b0 8000 	ldrsh.w	r8, [r0]
9001672e:	f9b2 6000 	ldrsh.w	r6, [r2]
90016732:	45b0      	cmp	r8, r6
90016734:	dbf2      	blt.n	9001671c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
90016736:	4293      	cmp	r3, r2
90016738:	f1a5 0608 	sub.w	r6, r5, #8
9001673c:	d816      	bhi.n	9001676c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
9001673e:	f8d6 c000 	ldr.w	ip, [r6]
90016742:	f9b3 a000 	ldrsh.w	sl, [r3]
90016746:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
9001674a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
9001674e:	f8c3 c000 	str.w	ip, [r3]
90016752:	f8d6 c004 	ldr.w	ip, [r6, #4]
90016756:	f8c3 c004 	str.w	ip, [r3, #4]
9001675a:	f825 ac08 	strh.w	sl, [r5, #-8]
9001675e:	f825 ec06 	strh.w	lr, [r5, #-6]
90016762:	f825 9c04 	strh.w	r9, [r5, #-4]
90016766:	f825 8c02 	strh.w	r8, [r5, #-2]
9001676a:	e7c9      	b.n	90016700 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
9001676c:	f8d6 e000 	ldr.w	lr, [r6]
90016770:	f9b0 a000 	ldrsh.w	sl, [r0]
90016774:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
90016778:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
9001677c:	f8c0 e000 	str.w	lr, [r0]
90016780:	f8d6 e004 	ldr.w	lr, [r6, #4]
90016784:	1a16      	subs	r6, r2, r0
90016786:	f8c0 e004 	str.w	lr, [r0, #4]
9001678a:	f825 ac08 	strh.w	sl, [r5, #-8]
9001678e:	f825 cc06 	strh.w	ip, [r5, #-6]
90016792:	f825 9c04 	strh.w	r9, [r5, #-4]
90016796:	f825 8c02 	strh.w	r8, [r5, #-2]
9001679a:	1acd      	subs	r5, r1, r3
9001679c:	10ed      	asrs	r5, r5, #3
9001679e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
900167a2:	bfb5      	itete	lt
900167a4:	e9c4 0200 	strdlt	r0, r2, [r4]
900167a8:	e9c4 3100 	strdge	r3, r1, [r4]
900167ac:	460a      	movlt	r2, r1
900167ae:	4603      	movge	r3, r0
900167b0:	3408      	adds	r4, #8
900167b2:	4618      	mov	r0, r3
900167b4:	4611      	mov	r1, r2
900167b6:	e724      	b.n	90016602 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
900167b8:	4299      	cmp	r1, r3
900167ba:	d927      	bls.n	9001680c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
900167bc:	f1a3 0210 	sub.w	r2, r3, #16
900167c0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
900167c4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
900167c8:	45ac      	cmp	ip, r5
900167ca:	db06      	blt.n	900167da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
900167cc:	d11c      	bne.n	90016808 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
900167ce:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
900167d2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
900167d6:	42ae      	cmp	r6, r5
900167d8:	da16      	bge.n	90016808 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
900167da:	4615      	mov	r5, r2
900167dc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
900167e0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
900167e4:	3a08      	subs	r2, #8
900167e6:	f855 6f08 	ldr.w	r6, [r5, #8]!
900167ea:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
900167ee:	6196      	str	r6, [r2, #24]
900167f0:	42a8      	cmp	r0, r5
900167f2:	686e      	ldr	r6, [r5, #4]
900167f4:	f8a2 9010 	strh.w	r9, [r2, #16]
900167f8:	61d6      	str	r6, [r2, #28]
900167fa:	f8a2 c012 	strh.w	ip, [r2, #18]
900167fe:	f8a2 8014 	strh.w	r8, [r2, #20]
90016802:	f8a2 e016 	strh.w	lr, [r2, #22]
90016806:	d1db      	bne.n	900167c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
90016808:	3308      	adds	r3, #8
9001680a:	e7d5      	b.n	900167b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
9001680c:	42bc      	cmp	r4, r7
9001680e:	d903      	bls.n	90016818 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
90016810:	e954 0102 	ldrd	r0, r1, [r4, #-8]
90016814:	3c08      	subs	r4, #8
90016816:	e6f4      	b.n	90016602 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
90016818:	b050      	add	sp, #320	; 0x140
9001681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

9001681e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
9001681e:	b510      	push	{r4, lr}
90016820:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016822:	4604      	mov	r4, r0
90016824:	07da      	lsls	r2, r3, #31
90016826:	d507      	bpl.n	90016838 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
90016828:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
9001682c:	f7ff fe8c 	bl	90016548 <_ZN8touchgfx7Outline6lineToEii>
90016830:	6a43      	ldr	r3, [r0, #36]	; 0x24
90016832:	f023 0301 	bic.w	r3, r3, #1
90016836:	6243      	str	r3, [r0, #36]	; 0x24
90016838:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001683a:	079b      	lsls	r3, r3, #30
9001683c:	d521      	bpl.n	90016882 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
9001683e:	6923      	ldr	r3, [r4, #16]
90016840:	88d9      	ldrh	r1, [r3, #6]
90016842:	889a      	ldrh	r2, [r3, #4]
90016844:	430a      	orrs	r2, r1
90016846:	d010      	beq.n	9001686a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016848:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
9001684c:	2a00      	cmp	r2, #0
9001684e:	db0c      	blt.n	9001686a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016850:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90016852:	428a      	cmp	r2, r1
90016854:	da09      	bge.n	9001686a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
90016856:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
9001685a:	4291      	cmp	r1, r2
9001685c:	f102 0201 	add.w	r2, r2, #1
90016860:	bf88      	it	hi
90016862:	3308      	addhi	r3, #8
90016864:	60a2      	str	r2, [r4, #8]
90016866:	bf88      	it	hi
90016868:	6123      	strhi	r3, [r4, #16]
9001686a:	68a1      	ldr	r1, [r4, #8]
9001686c:	b129      	cbz	r1, 9001687a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
9001686e:	6863      	ldr	r3, [r4, #4]
90016870:	4299      	cmp	r1, r3
90016872:	d802      	bhi.n	9001687a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
90016874:	68e0      	ldr	r0, [r4, #12]
90016876:	f7ff febd 	bl	900165f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
9001687a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001687c:	f023 0302 	bic.w	r3, r3, #2
90016880:	6263      	str	r3, [r4, #36]	; 0x24
90016882:	68e0      	ldr	r0, [r4, #12]
90016884:	bd10      	pop	{r4, pc}
	...

90016888 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
90016888:	4b02      	ldr	r3, [pc, #8]	; (90016894 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
9001688a:	6018      	str	r0, [r3, #0]
9001688c:	4b02      	ldr	r3, [pc, #8]	; (90016898 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
9001688e:	6019      	str	r1, [r3, #0]
90016890:	4770      	bx	lr
90016892:	bf00      	nop
90016894:	240281f4 	.word	0x240281f4
90016898:	240281f8 	.word	0x240281f8

9001689c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
9001689c:	2300      	movs	r3, #0
9001689e:	4a02      	ldr	r2, [pc, #8]	; (900168a8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
900168a0:	6013      	str	r3, [r2, #0]
900168a2:	4a02      	ldr	r2, [pc, #8]	; (900168ac <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
900168a4:	6013      	str	r3, [r2, #0]
900168a6:	4770      	bx	lr
900168a8:	240281f4 	.word	0x240281f4
900168ac:	240281f8 	.word	0x240281f8

900168b0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
900168b0:	4b01      	ldr	r3, [pc, #4]	; (900168b8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
900168b2:	6818      	ldr	r0, [r3, #0]
900168b4:	4770      	bx	lr
900168b6:	bf00      	nop
900168b8:	240281f4 	.word	0x240281f4

900168bc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
900168bc:	4b01      	ldr	r3, [pc, #4]	; (900168c4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
900168be:	6818      	ldr	r0, [r3, #0]
900168c0:	4770      	bx	lr
900168c2:	bf00      	nop
900168c4:	240281f8 	.word	0x240281f8

900168c8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900168c8:	b510      	push	{r4, lr}
900168ca:	6803      	ldr	r3, [r0, #0]
900168cc:	460c      	mov	r4, r1
900168ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900168d0:	4798      	blx	r3
900168d2:	1b03      	subs	r3, r0, r4
900168d4:	4258      	negs	r0, r3
900168d6:	4158      	adcs	r0, r3
900168d8:	bd10      	pop	{r4, pc}
	...

900168dc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
900168dc:	4b01      	ldr	r3, [pc, #4]	; (900168e4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
900168de:	6019      	str	r1, [r3, #0]
900168e0:	4770      	bx	lr
900168e2:	bf00      	nop
900168e4:	240281fc 	.word	0x240281fc

900168e8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900168e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900168ec:	4696      	mov	lr, r2
900168ee:	b097      	sub	sp, #92	; 0x5c
900168f0:	4605      	mov	r5, r0
900168f2:	4614      	mov	r4, r2
900168f4:	460e      	mov	r6, r1
900168f6:	461f      	mov	r7, r3
900168f8:	f10d 0c1c 	add.w	ip, sp, #28
900168fc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90016900:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90016904:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
90016908:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001690c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016910:	f8de 3000 	ldr.w	r3, [lr]
90016914:	f104 0e14 	add.w	lr, r4, #20
90016918:	f8cc 3000 	str.w	r3, [ip]
9001691c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016920:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016924:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016928:	f8de 3000 	ldr.w	r3, [lr]
9001692c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90016930:	f8cc 3000 	str.w	r3, [ip]
90016934:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90016938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001693c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016940:	f8de 3000 	ldr.w	r3, [lr]
90016944:	4631      	mov	r1, r6
90016946:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016948:	4628      	mov	r0, r5
9001694a:	f8cc 3000 	str.w	r3, [ip]
9001694e:	682b      	ldr	r3, [r5, #0]
90016950:	9201      	str	r2, [sp, #4]
90016952:	9a20      	ldr	r2, [sp, #128]	; 0x80
90016954:	f8cd 8008 	str.w	r8, [sp, #8]
90016958:	9200      	str	r2, [sp, #0]
9001695a:	aa07      	add	r2, sp, #28
9001695c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016960:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90016964:	463b      	mov	r3, r7
90016966:	47d8      	blx	fp
90016968:	46a6      	mov	lr, r4
9001696a:	f10d 0c1c 	add.w	ip, sp, #28
9001696e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016976:	f8de 3000 	ldr.w	r3, [lr]
9001697a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
9001697e:	343c      	adds	r4, #60	; 0x3c
90016980:	f8cc 3000 	str.w	r3, [ip]
90016984:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016988:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001698c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016990:	f8de 3000 	ldr.w	r3, [lr]
90016994:	f8cc 3000 	str.w	r3, [ip]
90016998:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
9001699c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9001699e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900169a2:	6823      	ldr	r3, [r4, #0]
900169a4:	4631      	mov	r1, r6
900169a6:	4628      	mov	r0, r5
900169a8:	f8cc 3000 	str.w	r3, [ip]
900169ac:	682b      	ldr	r3, [r5, #0]
900169ae:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900169b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
900169b4:	f8cd 8008 	str.w	r8, [sp, #8]
900169b8:	9201      	str	r2, [sp, #4]
900169ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
900169bc:	9200      	str	r2, [sp, #0]
900169be:	aa07      	add	r2, sp, #28
900169c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900169c2:	463b      	mov	r3, r7
900169c4:	47a0      	blx	r4
900169c6:	b017      	add	sp, #92	; 0x5c
900169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900169cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900169cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900169d0:	b08d      	sub	sp, #52	; 0x34
900169d2:	4688      	mov	r8, r1
900169d4:	f8d3 c000 	ldr.w	ip, [r3]
900169d8:	9916      	ldr	r1, [sp, #88]	; 0x58
900169da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
900169de:	680f      	ldr	r7, [r1, #0]
900169e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
900169e4:	eba7 070c 	sub.w	r7, r7, ip
900169e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
900169ec:	edd3 6a07 	vldr	s13, [r3, #28]
900169f0:	42bc      	cmp	r4, r7
900169f2:	9918      	ldr	r1, [sp, #96]	; 0x60
900169f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
900169f8:	bfa8      	it	ge
900169fa:	463c      	movge	r4, r7
900169fc:	f9b1 9000 	ldrsh.w	r9, [r1]
90016a00:	f9ba 1000 	ldrsh.w	r1, [sl]
90016a04:	ee07 4a90 	vmov	s15, r4
90016a08:	eb09 0e0c 	add.w	lr, r9, ip
90016a0c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90016a10:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90016a14:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90016a18:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90016a1c:	4571      	cmp	r1, lr
90016a1e:	ee25 4a04 	vmul.f32	s8, s10, s8
90016a22:	ee65 4a24 	vmul.f32	s9, s10, s9
90016a26:	ee25 5a27 	vmul.f32	s10, s10, s15
90016a2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
90016a2e:	ee71 0aa4 	vadd.f32	s1, s3, s9
90016a32:	ee32 1a05 	vadd.f32	s2, s4, s10
90016a36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
90016a3a:	ee36 0a84 	vadd.f32	s0, s13, s8
90016a3e:	ee61 1a87 	vmul.f32	s3, s3, s14
90016a42:	ee22 2a07 	vmul.f32	s4, s4, s14
90016a46:	f340 808c 	ble.w	90016b62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
90016a4a:	eba1 060e 	sub.w	r6, r1, lr
90016a4e:	fb96 f5f4 	sdiv	r5, r6, r4
90016a52:	ee07 5a10 	vmov	s14, r5
90016a56:	2d00      	cmp	r5, #0
90016a58:	fb04 6615 	mls	r6, r4, r5, r6
90016a5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016a60:	eea7 0a04 	vfma.f32	s0, s14, s8
90016a64:	eee7 0a24 	vfma.f32	s1, s14, s9
90016a68:	eea7 1a05 	vfma.f32	s2, s14, s10
90016a6c:	dd12      	ble.n	90016a94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90016a6e:	ee70 6a44 	vsub.f32	s13, s0, s8
90016a72:	ee70 1ae4 	vsub.f32	s3, s1, s9
90016a76:	ee31 2a45 	vsub.f32	s4, s2, s10
90016a7a:	eef5 6a40 	vcmp.f32	s13, #0.0
90016a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016a82:	bf14      	ite	ne
90016a84:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90016a88:	eeb0 7a67 	vmoveq.f32	s14, s15
90016a8c:	ee61 1a87 	vmul.f32	s3, s3, s14
90016a90:	ee22 2a07 	vmul.f32	s4, s4, s14
90016a94:	fb05 f204 	mul.w	r2, r5, r4
90016a98:	1abf      	subs	r7, r7, r2
90016a9a:	4494      	add	ip, r2
90016a9c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90016aa0:	4411      	add	r1, r2
90016aa2:	eb09 020c 	add.w	r2, r9, ip
90016aa6:	b209      	sxth	r1, r1
90016aa8:	443a      	add	r2, r7
90016aaa:	428a      	cmp	r2, r1
90016aac:	bfc4      	itt	gt
90016aae:	eba1 0209 	subgt.w	r2, r1, r9
90016ab2:	eba2 070c 	subgt.w	r7, r2, ip
90016ab6:	2f00      	cmp	r7, #0
90016ab8:	dd50      	ble.n	90016b5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90016aba:	fb97 f1f4 	sdiv	r1, r7, r4
90016abe:	fb04 7211 	mls	r2, r4, r1, r7
90016ac2:	b90a      	cbnz	r2, 90016ac8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90016ac4:	3901      	subs	r1, #1
90016ac6:	4622      	mov	r2, r4
90016ac8:	eec7 3a80 	vdiv.f32	s7, s15, s0
90016acc:	6840      	ldr	r0, [r0, #4]
90016ace:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90016ad2:	44b6      	add	lr, r6
90016ad4:	f8d0 a000 	ldr.w	sl, [r0]
90016ad8:	2900      	cmp	r1, #0
90016ada:	bfcc      	ite	gt
90016adc:	46a1      	movgt	r9, r4
90016ade:	4691      	movle	r9, r2
90016ae0:	900b      	str	r0, [sp, #44]	; 0x2c
90016ae2:	9817      	ldr	r0, [sp, #92]	; 0x5c
90016ae4:	fb04 e505 	mla	r5, r4, r5, lr
90016ae8:	eef0 6a42 	vmov.f32	s13, s4
90016aec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90016af0:	9008      	str	r0, [sp, #32]
90016af2:	eeb0 7a61 	vmov.f32	s14, s3
90016af6:	9818      	ldr	r0, [sp, #96]	; 0x60
90016af8:	695b      	ldr	r3, [r3, #20]
90016afa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016afe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90016b02:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90016b06:	980b      	ldr	r0, [sp, #44]	; 0x2c
90016b08:	445b      	add	r3, fp
90016b0a:	9307      	str	r3, [sp, #28]
90016b0c:	ee16 3a90 	vmov	r3, s13
90016b10:	e9cd 8505 	strd	r8, r5, [sp, #20]
90016b14:	ee60 2aa3 	vmul.f32	s5, s1, s7
90016b18:	ee21 3a23 	vmul.f32	s6, s2, s7
90016b1c:	ee72 7ae1 	vsub.f32	s15, s5, s3
90016b20:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016b24:	ee17 7a90 	vmov	r7, s15
90016b28:	ee73 7a42 	vsub.f32	s15, s6, s4
90016b2c:	fb97 f7f4 	sdiv	r7, r7, r4
90016b30:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016b34:	ee17 ca90 	vmov	ip, s15
90016b38:	fb9c fcf4 	sdiv	ip, ip, r4
90016b3c:	fb0c 3306 	mla	r3, ip, r6, r3
90016b40:	9302      	str	r3, [sp, #8]
90016b42:	ee17 3a10 	vmov	r3, s14
90016b46:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90016b4a:	fb07 3706 	mla	r7, r7, r6, r3
90016b4e:	eba9 0306 	sub.w	r3, r9, r6
90016b52:	e9cd 4700 	strd	r4, r7, [sp]
90016b56:	f8da 4008 	ldr.w	r4, [sl, #8]
90016b5a:	47a0      	blx	r4
90016b5c:	b00d      	add	sp, #52	; 0x34
90016b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016b62:	2500      	movs	r5, #0
90016b64:	462e      	mov	r6, r5
90016b66:	e799      	b.n	90016a9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90016b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016b6c:	b0db      	sub	sp, #364	; 0x16c
90016b6e:	461d      	mov	r5, r3
90016b70:	4614      	mov	r4, r2
90016b72:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90016b76:	910f      	str	r1, [sp, #60]	; 0x3c
90016b78:	4629      	mov	r1, r5
90016b7a:	930a      	str	r3, [sp, #40]	; 0x28
90016b7c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90016b80:	9009      	str	r0, [sp, #36]	; 0x24
90016b82:	930b      	str	r3, [sp, #44]	; 0x2c
90016b84:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90016b88:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90016b8c:	9310      	str	r3, [sp, #64]	; 0x40
90016b8e:	6803      	ldr	r3, [r0, #0]
90016b90:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90016b92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90016b96:	47b8      	blx	r7
90016b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016b9a:	6058      	str	r0, [r3, #4]
90016b9c:	2800      	cmp	r0, #0
90016b9e:	f000 83a1 	beq.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016ba2:	682b      	ldr	r3, [r5, #0]
90016ba4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90016ba8:	ed94 7a02 	vldr	s14, [r4, #8]
90016bac:	9314      	str	r3, [sp, #80]	; 0x50
90016bae:	686b      	ldr	r3, [r5, #4]
90016bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016bb4:	9315      	str	r3, [sp, #84]	; 0x54
90016bb6:	4bc1      	ldr	r3, [pc, #772]	; (90016ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90016bb8:	7819      	ldrb	r1, [r3, #0]
90016bba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90016bbe:	2900      	cmp	r1, #0
90016bc0:	bf16      	itet	ne
90016bc2:	4619      	movne	r1, r3
90016bc4:	4611      	moveq	r1, r2
90016bc6:	4613      	movne	r3, r2
90016bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016bcc:	9116      	str	r1, [sp, #88]	; 0x58
90016bce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90016bd2:	f240 8387 	bls.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016bd6:	ed94 7a07 	vldr	s14, [r4, #28]
90016bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016be2:	f240 837f 	bls.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016be6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90016bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016bf2:	f240 8377 	bls.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016bf6:	6822      	ldr	r2, [r4, #0]
90016bf8:	4bb1      	ldr	r3, [pc, #708]	; (90016ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90016bfa:	429a      	cmp	r2, r3
90016bfc:	f2c0 8372 	blt.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c00:	49b0      	ldr	r1, [pc, #704]	; (90016ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90016c02:	6963      	ldr	r3, [r4, #20]
90016c04:	428a      	cmp	r2, r1
90016c06:	f300 836d 	bgt.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c0a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016c0e:	48ae      	ldr	r0, [pc, #696]	; (90016ec8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90016c10:	33ff      	adds	r3, #255	; 0xff
90016c12:	4283      	cmp	r3, r0
90016c14:	f200 8366 	bhi.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90016c1a:	4dac      	ldr	r5, [pc, #688]	; (90016ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90016c1c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016c20:	33ff      	adds	r3, #255	; 0xff
90016c22:	42ab      	cmp	r3, r5
90016c24:	f200 835e 	bhi.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c28:	6862      	ldr	r2, [r4, #4]
90016c2a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90016c2e:	33ff      	adds	r3, #255	; 0xff
90016c30:	4283      	cmp	r3, r0
90016c32:	f200 8357 	bhi.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c36:	69a1      	ldr	r1, [r4, #24]
90016c38:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90016c3c:	33ff      	adds	r3, #255	; 0xff
90016c3e:	4283      	cmp	r3, r0
90016c40:	f200 8350 	bhi.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90016c46:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90016c4a:	30ff      	adds	r0, #255	; 0xff
90016c4c:	42a8      	cmp	r0, r5
90016c4e:	f200 8349 	bhi.w	900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c52:	428a      	cmp	r2, r1
90016c54:	f280 8110 	bge.w	90016e78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90016c58:	429a      	cmp	r2, r3
90016c5a:	f300 8119 	bgt.w	90016e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90016c5e:	4299      	cmp	r1, r3
90016c60:	f280 811d 	bge.w	90016e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90016c64:	2502      	movs	r5, #2
90016c66:	2701      	movs	r7, #1
90016c68:	46a9      	mov	r9, r5
90016c6a:	46b8      	mov	r8, r7
90016c6c:	f04f 0a00 	mov.w	sl, #0
90016c70:	4621      	mov	r1, r4
90016c72:	a849      	add	r0, sp, #292	; 0x124
90016c74:	f003 fdc4 	bl	9001a800 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90016c78:	4622      	mov	r2, r4
90016c7a:	4653      	mov	r3, sl
90016c7c:	a949      	add	r1, sp, #292	; 0x124
90016c7e:	f8cd 9000 	str.w	r9, [sp]
90016c82:	a819      	add	r0, sp, #100	; 0x64
90016c84:	f003 feec 	bl	9001aa60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016c88:	4622      	mov	r2, r4
90016c8a:	4653      	mov	r3, sl
90016c8c:	a949      	add	r1, sp, #292	; 0x124
90016c8e:	f8cd 8000 	str.w	r8, [sp]
90016c92:	a829      	add	r0, sp, #164	; 0xa4
90016c94:	f003 fee4 	bl	9001aa60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016c98:	4643      	mov	r3, r8
90016c9a:	4622      	mov	r2, r4
90016c9c:	a949      	add	r1, sp, #292	; 0x124
90016c9e:	f8cd 9000 	str.w	r9, [sp]
90016ca2:	a839      	add	r0, sp, #228	; 0xe4
90016ca4:	f003 fedc 	bl	9001aa60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016ca8:	42af      	cmp	r7, r5
90016caa:	af12      	add	r7, sp, #72	; 0x48
90016cac:	bfb7      	itett	lt
90016cae:	2300      	movlt	r3, #0
90016cb0:	2301      	movge	r3, #1
90016cb2:	ad29      	addlt	r5, sp, #164	; 0xa4
90016cb4:	ac19      	addlt	r4, sp, #100	; 0x64
90016cb6:	bfb1      	iteee	lt
90016cb8:	930e      	strlt	r3, [sp, #56]	; 0x38
90016cba:	ad19      	addge	r5, sp, #100	; 0x64
90016cbc:	930e      	strge	r3, [sp, #56]	; 0x38
90016cbe:	ac29      	addge	r4, sp, #164	; 0xa4
90016cc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016cc2:	e893 0003 	ldmia.w	r3, {r0, r1}
90016cc6:	e887 0003 	stmia.w	r7, {r0, r1}
90016cca:	b928      	cbnz	r0, 90016cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90016ccc:	4b80      	ldr	r3, [pc, #512]	; (90016ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90016cce:	6818      	ldr	r0, [r3, #0]
90016cd0:	6803      	ldr	r3, [r0, #0]
90016cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016cd4:	4798      	blx	r3
90016cd6:	6038      	str	r0, [r7, #0]
90016cd8:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016cda:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90016cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016ce2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90016ce4:	930c      	str	r3, [sp, #48]	; 0x30
90016ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
90016ce8:	6963      	ldr	r3, [r4, #20]
90016cea:	440b      	add	r3, r1
90016cec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016cf0:	4408      	add	r0, r1
90016cf2:	b200      	sxth	r0, r0
90016cf4:	4283      	cmp	r3, r0
90016cf6:	900d      	str	r0, [sp, #52]	; 0x34
90016cf8:	f280 80dd 	bge.w	90016eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90016cfc:	428b      	cmp	r3, r1
90016cfe:	da08      	bge.n	90016d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016d00:	2a00      	cmp	r2, #0
90016d02:	dd06      	ble.n	90016d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016d04:	1acb      	subs	r3, r1, r3
90016d06:	429a      	cmp	r2, r3
90016d08:	f2c0 80e4 	blt.w	90016ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90016d0c:	2b00      	cmp	r3, #0
90016d0e:	f300 80e2 	bgt.w	90016ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90016d12:	6967      	ldr	r7, [r4, #20]
90016d14:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016d1a:	443b      	add	r3, r7
90016d1c:	461f      	mov	r7, r3
90016d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016d20:	1bdf      	subs	r7, r3, r7
90016d22:	4297      	cmp	r7, r2
90016d24:	bfa8      	it	ge
90016d26:	4617      	movge	r7, r2
90016d28:	2f00      	cmp	r7, #0
90016d2a:	f340 8166 	ble.w	90016ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90016d2e:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016d30:	6829      	ldr	r1, [r5, #0]
90016d32:	f9b3 2000 	ldrsh.w	r2, [r3]
90016d36:	f9bb 3000 	ldrsh.w	r3, [fp]
90016d3a:	4411      	add	r1, r2
90016d3c:	6820      	ldr	r0, [r4, #0]
90016d3e:	4299      	cmp	r1, r3
90016d40:	dd1a      	ble.n	90016d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016d42:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016d46:	4402      	add	r2, r0
90016d48:	440b      	add	r3, r1
90016d4a:	b21b      	sxth	r3, r3
90016d4c:	429a      	cmp	r2, r3
90016d4e:	dc13      	bgt.n	90016d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016d50:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016d52:	a912      	add	r1, sp, #72	; 0x48
90016d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016d56:	9809      	ldr	r0, [sp, #36]	; 0x24
90016d58:	681b      	ldr	r3, [r3, #0]
90016d5a:	9206      	str	r2, [sp, #24]
90016d5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016d5e:	9500      	str	r5, [sp, #0]
90016d60:	9205      	str	r2, [sp, #20]
90016d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016d64:	e9cd b203 	strd	fp, r2, [sp, #12]
90016d68:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016d6a:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016d6e:	aa49      	add	r2, sp, #292	; 0x124
90016d70:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016d74:	4623      	mov	r3, r4
90016d76:	47c8      	blx	r9
90016d78:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90016d7c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016d80:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016d84:	ee37 7a27 	vadd.f32	s14, s14, s15
90016d88:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90016d8c:	68a1      	ldr	r1, [r4, #8]
90016d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016d92:	ed94 6a08 	vldr	s12, [r4, #32]
90016d96:	edd4 6a07 	vldr	s13, [r4, #28]
90016d9a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016d9e:	ee76 6a86 	vadd.f32	s13, s13, s12
90016da2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016da6:	e9d4 2300 	ldrd	r2, r3, [r4]
90016daa:	edc4 6a07 	vstr	s13, [r4, #28]
90016dae:	441a      	add	r2, r3
90016db0:	6963      	ldr	r3, [r4, #20]
90016db2:	3301      	adds	r3, #1
90016db4:	6022      	str	r2, [r4, #0]
90016db6:	6163      	str	r3, [r4, #20]
90016db8:	69a3      	ldr	r3, [r4, #24]
90016dba:	3b01      	subs	r3, #1
90016dbc:	61a3      	str	r3, [r4, #24]
90016dbe:	6923      	ldr	r3, [r4, #16]
90016dc0:	440b      	add	r3, r1
90016dc2:	68e1      	ldr	r1, [r4, #12]
90016dc4:	428b      	cmp	r3, r1
90016dc6:	6123      	str	r3, [r4, #16]
90016dc8:	db15      	blt.n	90016df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90016dca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90016dce:	3201      	adds	r2, #1
90016dd0:	1a5b      	subs	r3, r3, r1
90016dd2:	ee76 6a26 	vadd.f32	s13, s12, s13
90016dd6:	6022      	str	r2, [r4, #0]
90016dd8:	6123      	str	r3, [r4, #16]
90016dda:	edc4 6a07 	vstr	s13, [r4, #28]
90016dde:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016de2:	ee36 7a87 	vadd.f32	s14, s13, s14
90016de6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016dea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90016dee:	ee77 7a27 	vadd.f32	s15, s14, s15
90016df2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016df6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90016dfa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90016dfe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016e02:	ee37 7a27 	vadd.f32	s14, s14, s15
90016e06:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90016e0a:	68a9      	ldr	r1, [r5, #8]
90016e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016e10:	ed95 6a08 	vldr	s12, [r5, #32]
90016e14:	edd5 6a07 	vldr	s13, [r5, #28]
90016e18:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016e1c:	ee76 6a86 	vadd.f32	s13, s13, s12
90016e20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016e24:	e9d5 2300 	ldrd	r2, r3, [r5]
90016e28:	edc5 6a07 	vstr	s13, [r5, #28]
90016e2c:	441a      	add	r2, r3
90016e2e:	696b      	ldr	r3, [r5, #20]
90016e30:	3301      	adds	r3, #1
90016e32:	602a      	str	r2, [r5, #0]
90016e34:	616b      	str	r3, [r5, #20]
90016e36:	69ab      	ldr	r3, [r5, #24]
90016e38:	3b01      	subs	r3, #1
90016e3a:	61ab      	str	r3, [r5, #24]
90016e3c:	692b      	ldr	r3, [r5, #16]
90016e3e:	440b      	add	r3, r1
90016e40:	68e9      	ldr	r1, [r5, #12]
90016e42:	428b      	cmp	r3, r1
90016e44:	612b      	str	r3, [r5, #16]
90016e46:	db15      	blt.n	90016e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90016e48:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90016e4c:	3201      	adds	r2, #1
90016e4e:	1a5b      	subs	r3, r3, r1
90016e50:	ee76 6a26 	vadd.f32	s13, s12, s13
90016e54:	602a      	str	r2, [r5, #0]
90016e56:	612b      	str	r3, [r5, #16]
90016e58:	edc5 6a07 	vstr	s13, [r5, #28]
90016e5c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016e60:	ee36 7a87 	vadd.f32	s14, s13, s14
90016e64:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016e68:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90016e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
90016e70:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016e74:	3f01      	subs	r7, #1
90016e76:	e757      	b.n	90016d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90016e78:	4299      	cmp	r1, r3
90016e7a:	dc13      	bgt.n	90016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90016e7c:	429a      	cmp	r2, r3
90016e7e:	da14      	bge.n	90016eaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90016e80:	2502      	movs	r5, #2
90016e82:	2703      	movs	r7, #3
90016e84:	f04f 0800 	mov.w	r8, #0
90016e88:	46a9      	mov	r9, r5
90016e8a:	f04f 0a01 	mov.w	sl, #1
90016e8e:	e6ef      	b.n	90016c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016e90:	2501      	movs	r5, #1
90016e92:	2700      	movs	r7, #0
90016e94:	46a9      	mov	r9, r5
90016e96:	46b8      	mov	r8, r7
90016e98:	f04f 0a02 	mov.w	sl, #2
90016e9c:	e6e8      	b.n	90016c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016e9e:	2501      	movs	r5, #1
90016ea0:	2702      	movs	r7, #2
90016ea2:	e6e1      	b.n	90016c68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90016ea4:	2500      	movs	r5, #0
90016ea6:	2701      	movs	r7, #1
90016ea8:	e7f4      	b.n	90016e94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90016eaa:	2702      	movs	r7, #2
90016eac:	2503      	movs	r5, #3
90016eae:	f04f 0900 	mov.w	r9, #0
90016eb2:	46b8      	mov	r8, r7
90016eb4:	e7e9      	b.n	90016e8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90016eb6:	4613      	mov	r3, r2
90016eb8:	e728      	b.n	90016d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90016eba:	bf00      	nop
90016ebc:	240281e4 	.word	0x240281e4
90016ec0:	fffd8f01 	.word	0xfffd8f01
90016ec4:	00027100 	.word	0x00027100
90016ec8:	0004e1ff 	.word	0x0004e1ff
90016ecc:	0004e1fe 	.word	0x0004e1fe
90016ed0:	240281ec 	.word	0x240281ec
90016ed4:	4613      	mov	r3, r2
90016ed6:	992b      	ldr	r1, [sp, #172]	; 0xac
90016ed8:	469e      	mov	lr, r3
90016eda:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90016edc:	469c      	mov	ip, r3
90016ede:	9111      	str	r1, [sp, #68]	; 0x44
90016ee0:	f04f 0900 	mov.w	r9, #0
90016ee4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90016ee8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90016eec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90016ef0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90016ef4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90016ef8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90016efc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90016f00:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90016f04:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90016f08:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90016f0c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90016f10:	f1bc 0f00 	cmp.w	ip, #0
90016f14:	d147      	bne.n	90016fa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90016f16:	eb03 0c07 	add.w	ip, r3, r7
90016f1a:	1ad7      	subs	r7, r2, r3
90016f1c:	f1b9 0f00 	cmp.w	r9, #0
90016f20:	d009      	beq.n	90016f36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90016f22:	9029      	str	r0, [sp, #164]	; 0xa4
90016f24:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90016f28:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90016f2c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90016f30:	912d      	str	r1, [sp, #180]	; 0xb4
90016f32:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90016f36:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016f38:	f04f 0800 	mov.w	r8, #0
90016f3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016f40:	9111      	str	r1, [sp, #68]	; 0x44
90016f42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016f46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90016f4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016f4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016f52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016f56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90016f5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90016f5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016f62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016f66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90016f6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90016f6e:	f1be 0f00 	cmp.w	lr, #0
90016f72:	d031      	beq.n	90016fd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90016f74:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016f76:	4450      	add	r0, sl
90016f78:	ee76 6aa4 	vadd.f32	s13, s13, s9
90016f7c:	4431      	add	r1, r6
90016f7e:	ee37 7a04 	vadd.f32	s14, s14, s8
90016f82:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016f86:	4549      	cmp	r1, r9
90016f88:	db08      	blt.n	90016f9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90016f8a:	ee77 7a85 	vadd.f32	s15, s15, s10
90016f8e:	3001      	adds	r0, #1
90016f90:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016f94:	eba1 0109 	sub.w	r1, r1, r9
90016f98:	ee37 7a06 	vadd.f32	s14, s14, s12
90016f9c:	f10e 3eff 	add.w	lr, lr, #4294967295
90016fa0:	f04f 0801 	mov.w	r8, #1
90016fa4:	e7e3      	b.n	90016f6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90016fa6:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016fa8:	4450      	add	r0, sl
90016faa:	ee37 7a24 	vadd.f32	s14, s14, s9
90016fae:	4431      	add	r1, r6
90016fb0:	ee77 7a84 	vadd.f32	s15, s15, s8
90016fb4:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016fb8:	4541      	cmp	r1, r8
90016fba:	db08      	blt.n	90016fce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90016fbc:	ee76 6a85 	vadd.f32	s13, s13, s10
90016fc0:	3001      	adds	r0, #1
90016fc2:	ee37 7a25 	vadd.f32	s14, s14, s11
90016fc6:	eba1 0108 	sub.w	r1, r1, r8
90016fca:	ee77 7a86 	vadd.f32	s15, s15, s12
90016fce:	f10c 3cff 	add.w	ip, ip, #4294967295
90016fd2:	f04f 0901 	mov.w	r9, #1
90016fd6:	e79b      	b.n	90016f10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90016fd8:	449c      	add	ip, r3
90016fda:	1aff      	subs	r7, r7, r3
90016fdc:	f1b8 0f00 	cmp.w	r8, #0
90016fe0:	d009      	beq.n	90016ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90016fe2:	9019      	str	r0, [sp, #100]	; 0x64
90016fe4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90016fe8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90016fec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90016ff0:	911d      	str	r1, [sp, #116]	; 0x74
90016ff2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90016ff6:	1ad2      	subs	r2, r2, r3
90016ff8:	e68b      	b.n	90016d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016ffc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90016ffe:	2b00      	cmp	r3, #0
90017000:	f000 80d1 	beq.w	900171a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90017004:	ad19      	add	r5, sp, #100	; 0x64
90017006:	ac39      	add	r4, sp, #228	; 0xe4
90017008:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001700a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001700e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90017012:	930c      	str	r3, [sp, #48]	; 0x30
90017014:	990c      	ldr	r1, [sp, #48]	; 0x30
90017016:	6963      	ldr	r3, [r4, #20]
90017018:	440b      	add	r3, r1
9001701a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
9001701e:	4408      	add	r0, r1
90017020:	b200      	sxth	r0, r0
90017022:	4283      	cmp	r3, r0
90017024:	900d      	str	r0, [sp, #52]	; 0x34
90017026:	f280 80c1 	bge.w	900171ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
9001702a:	428b      	cmp	r3, r1
9001702c:	da08      	bge.n	90017040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
9001702e:	2a00      	cmp	r2, #0
90017030:	dd06      	ble.n	90017040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90017032:	1acb      	subs	r3, r1, r3
90017034:	429a      	cmp	r2, r3
90017036:	f2c0 80bb 	blt.w	900171b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
9001703a:	2b00      	cmp	r3, #0
9001703c:	f300 80b9 	bgt.w	900171b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90017040:	6967      	ldr	r7, [r4, #20]
90017042:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90017046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90017048:	443b      	add	r3, r7
9001704a:	461f      	mov	r7, r3
9001704c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001704e:	1bdf      	subs	r7, r3, r7
90017050:	4297      	cmp	r7, r2
90017052:	bfa8      	it	ge
90017054:	4617      	movge	r7, r2
90017056:	2f00      	cmp	r7, #0
90017058:	f340 813c 	ble.w	900172d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
9001705c:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001705e:	6829      	ldr	r1, [r5, #0]
90017060:	f9b3 2000 	ldrsh.w	r2, [r3]
90017064:	f9bb 3000 	ldrsh.w	r3, [fp]
90017068:	4411      	add	r1, r2
9001706a:	6820      	ldr	r0, [r4, #0]
9001706c:	4299      	cmp	r1, r3
9001706e:	dd1a      	ble.n	900170a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90017070:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90017074:	4402      	add	r2, r0
90017076:	440b      	add	r3, r1
90017078:	b21b      	sxth	r3, r3
9001707a:	429a      	cmp	r2, r3
9001707c:	dc13      	bgt.n	900170a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
9001707e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017080:	a912      	add	r1, sp, #72	; 0x48
90017082:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017084:	9809      	ldr	r0, [sp, #36]	; 0x24
90017086:	681b      	ldr	r3, [r3, #0]
90017088:	9206      	str	r2, [sp, #24]
9001708a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001708c:	9500      	str	r5, [sp, #0]
9001708e:	9205      	str	r2, [sp, #20]
90017090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90017092:	e9cd b203 	strd	fp, r2, [sp, #12]
90017096:	9a64      	ldr	r2, [sp, #400]	; 0x190
90017098:	e9cd 8201 	strd	r8, r2, [sp, #4]
9001709c:	aa49      	add	r2, sp, #292	; 0x124
9001709e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900170a2:	4623      	mov	r3, r4
900170a4:	47c8      	blx	r9
900170a6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900170aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900170ae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900170b2:	ee37 7a27 	vadd.f32	s14, s14, s15
900170b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900170ba:	68a1      	ldr	r1, [r4, #8]
900170bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
900170c0:	ed94 6a08 	vldr	s12, [r4, #32]
900170c4:	edd4 6a07 	vldr	s13, [r4, #28]
900170c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900170cc:	ee76 6a86 	vadd.f32	s13, s13, s12
900170d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900170d4:	e9d4 2300 	ldrd	r2, r3, [r4]
900170d8:	edc4 6a07 	vstr	s13, [r4, #28]
900170dc:	441a      	add	r2, r3
900170de:	6963      	ldr	r3, [r4, #20]
900170e0:	3301      	adds	r3, #1
900170e2:	6022      	str	r2, [r4, #0]
900170e4:	6163      	str	r3, [r4, #20]
900170e6:	69a3      	ldr	r3, [r4, #24]
900170e8:	3b01      	subs	r3, #1
900170ea:	61a3      	str	r3, [r4, #24]
900170ec:	6923      	ldr	r3, [r4, #16]
900170ee:	440b      	add	r3, r1
900170f0:	68e1      	ldr	r1, [r4, #12]
900170f2:	428b      	cmp	r3, r1
900170f4:	6123      	str	r3, [r4, #16]
900170f6:	db15      	blt.n	90017124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
900170f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
900170fc:	3201      	adds	r2, #1
900170fe:	1a5b      	subs	r3, r3, r1
90017100:	ee76 6a26 	vadd.f32	s13, s12, s13
90017104:	6022      	str	r2, [r4, #0]
90017106:	6123      	str	r3, [r4, #16]
90017108:	edc4 6a07 	vstr	s13, [r4, #28]
9001710c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90017110:	ee36 7a87 	vadd.f32	s14, s13, s14
90017114:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017118:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
9001711c:	ee77 7a27 	vadd.f32	s15, s14, s15
90017120:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017124:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90017128:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
9001712c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90017130:	ee37 7a27 	vadd.f32	s14, s14, s15
90017134:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90017138:	68a9      	ldr	r1, [r5, #8]
9001713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001713e:	ed95 6a08 	vldr	s12, [r5, #32]
90017142:	edd5 6a07 	vldr	s13, [r5, #28]
90017146:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001714a:	ee76 6a86 	vadd.f32	s13, s13, s12
9001714e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017152:	e9d5 2300 	ldrd	r2, r3, [r5]
90017156:	edc5 6a07 	vstr	s13, [r5, #28]
9001715a:	441a      	add	r2, r3
9001715c:	696b      	ldr	r3, [r5, #20]
9001715e:	3301      	adds	r3, #1
90017160:	602a      	str	r2, [r5, #0]
90017162:	616b      	str	r3, [r5, #20]
90017164:	69ab      	ldr	r3, [r5, #24]
90017166:	3b01      	subs	r3, #1
90017168:	61ab      	str	r3, [r5, #24]
9001716a:	692b      	ldr	r3, [r5, #16]
9001716c:	440b      	add	r3, r1
9001716e:	68e9      	ldr	r1, [r5, #12]
90017170:	428b      	cmp	r3, r1
90017172:	612b      	str	r3, [r5, #16]
90017174:	db15      	blt.n	900171a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90017176:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001717a:	3201      	adds	r2, #1
9001717c:	1a5b      	subs	r3, r3, r1
9001717e:	ee76 6a26 	vadd.f32	s13, s12, s13
90017182:	602a      	str	r2, [r5, #0]
90017184:	612b      	str	r3, [r5, #16]
90017186:	edc5 6a07 	vstr	s13, [r5, #28]
9001718a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
9001718e:	ee36 7a87 	vadd.f32	s14, s13, s14
90017192:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017196:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
9001719a:	ee77 7a27 	vadd.f32	s15, s14, s15
9001719e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900171a2:	3f01      	subs	r7, #1
900171a4:	e757      	b.n	90017056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
900171a6:	ad39      	add	r5, sp, #228	; 0xe4
900171a8:	ac19      	add	r4, sp, #100	; 0x64
900171aa:	e72d      	b.n	90017008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
900171ac:	4613      	mov	r3, r2
900171ae:	e744      	b.n	9001703a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
900171b0:	4613      	mov	r3, r2
900171b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
900171b4:	469e      	mov	lr, r3
900171b6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
900171ba:	461f      	mov	r7, r3
900171bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
900171c0:	f04f 0900 	mov.w	r9, #0
900171c4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
900171c8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
900171cc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
900171d0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
900171d4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
900171d8:	993d      	ldr	r1, [sp, #244]	; 0xf4
900171da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
900171de:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
900171e2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
900171e6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
900171ea:	960e      	str	r6, [sp, #56]	; 0x38
900171ec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
900171f0:	2f00      	cmp	r7, #0
900171f2:	d146      	bne.n	90017282 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
900171f4:	449c      	add	ip, r3
900171f6:	1ad7      	subs	r7, r2, r3
900171f8:	f1b9 0f00 	cmp.w	r9, #0
900171fc:	d009      	beq.n	90017212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
900171fe:	9039      	str	r0, [sp, #228]	; 0xe4
90017200:	913d      	str	r1, [sp, #244]	; 0xf4
90017202:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90017206:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
9001720a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
9001720e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90017212:	991b      	ldr	r1, [sp, #108]	; 0x6c
90017214:	f04f 0800 	mov.w	r8, #0
90017218:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
9001721c:	910e      	str	r1, [sp, #56]	; 0x38
9001721e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90017222:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90017226:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001722a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
9001722e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90017232:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90017236:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001723a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
9001723e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90017242:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90017246:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
9001724a:	f1be 0f00 	cmp.w	lr, #0
9001724e:	d030      	beq.n	900172b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90017250:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90017252:	4450      	add	r0, sl
90017254:	ee76 6aa4 	vadd.f32	s13, s13, s9
90017258:	4431      	add	r1, r6
9001725a:	ee37 7a04 	vadd.f32	s14, s14, s8
9001725e:	ee77 7aa3 	vadd.f32	s15, s15, s7
90017262:	4549      	cmp	r1, r9
90017264:	db08      	blt.n	90017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90017266:	ee77 7a85 	vadd.f32	s15, s15, s10
9001726a:	3001      	adds	r0, #1
9001726c:	ee76 6aa5 	vadd.f32	s13, s13, s11
90017270:	eba1 0109 	sub.w	r1, r1, r9
90017274:	ee37 7a06 	vadd.f32	s14, s14, s12
90017278:	f10e 3eff 	add.w	lr, lr, #4294967295
9001727c:	f04f 0801 	mov.w	r8, #1
90017280:	e7e3      	b.n	9001724a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
90017282:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90017284:	4450      	add	r0, sl
90017286:	ee37 7a24 	vadd.f32	s14, s14, s9
9001728a:	4431      	add	r1, r6
9001728c:	ee77 7a84 	vadd.f32	s15, s15, s8
90017290:	ee76 6aa3 	vadd.f32	s13, s13, s7
90017294:	4541      	cmp	r1, r8
90017296:	db08      	blt.n	900172aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90017298:	ee76 6a85 	vadd.f32	s13, s13, s10
9001729c:	3001      	adds	r0, #1
9001729e:	ee37 7a25 	vadd.f32	s14, s14, s11
900172a2:	eba1 0108 	sub.w	r1, r1, r8
900172a6:	ee77 7a86 	vadd.f32	s15, s15, s12
900172aa:	3f01      	subs	r7, #1
900172ac:	f04f 0901 	mov.w	r9, #1
900172b0:	e79e      	b.n	900171f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
900172b2:	449c      	add	ip, r3
900172b4:	1aff      	subs	r7, r7, r3
900172b6:	f1b8 0f00 	cmp.w	r8, #0
900172ba:	d009      	beq.n	900172d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
900172bc:	9019      	str	r0, [sp, #100]	; 0x64
900172be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
900172c2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
900172c6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
900172ca:	911d      	str	r1, [sp, #116]	; 0x74
900172cc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
900172d0:	1ad2      	subs	r2, r2, r3
900172d2:	e6b5      	b.n	90017040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
900172d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900172d6:	681b      	ldr	r3, [r3, #0]
900172d8:	b923      	cbnz	r3, 900172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900172da:	4b04      	ldr	r3, [pc, #16]	; (900172ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
900172dc:	6818      	ldr	r0, [r3, #0]
900172de:	6803      	ldr	r3, [r0, #0]
900172e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900172e2:	4798      	blx	r3
900172e4:	b05b      	add	sp, #364	; 0x16c
900172e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900172ea:	bf00      	nop
900172ec:	240281ec 	.word	0x240281ec

900172f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
900172f0:	b570      	push	{r4, r5, r6, lr}
900172f2:	4604      	mov	r4, r0
900172f4:	2500      	movs	r5, #0
900172f6:	9805      	ldr	r0, [sp, #20]
900172f8:	f89d 601c 	ldrb.w	r6, [sp, #28]
900172fc:	6061      	str	r1, [r4, #4]
900172fe:	8263      	strh	r3, [r4, #18]
90017300:	f89d 1010 	ldrb.w	r1, [sp, #16]
90017304:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90017308:	8025      	strh	r5, [r4, #0]
9001730a:	7221      	strb	r1, [r4, #8]
9001730c:	7266      	strb	r6, [r4, #9]
9001730e:	60e0      	str	r0, [r4, #12]
90017310:	8222      	strh	r2, [r4, #16]
90017312:	82a3      	strh	r3, [r4, #20]
90017314:	82e5      	strh	r5, [r4, #22]
90017316:	8325      	strh	r5, [r4, #24]
90017318:	8365      	strh	r5, [r4, #26]
9001731a:	83a5      	strh	r5, [r4, #28]
9001731c:	83e5      	strh	r5, [r4, #30]
9001731e:	8425      	strh	r5, [r4, #32]
90017320:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90017324:	b32e      	cbz	r6, 90017372 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017326:	6803      	ldr	r3, [r0, #0]
90017328:	695b      	ldr	r3, [r3, #20]
9001732a:	4798      	blx	r3
9001732c:	4606      	mov	r6, r0
9001732e:	b300      	cbz	r0, 90017372 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017330:	68e0      	ldr	r0, [r4, #12]
90017332:	4631      	mov	r1, r6
90017334:	6803      	ldr	r3, [r0, #0]
90017336:	68db      	ldr	r3, [r3, #12]
90017338:	4798      	blx	r3
9001733a:	4605      	mov	r5, r0
9001733c:	b1c8      	cbz	r0, 90017372 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
9001733e:	7b43      	ldrb	r3, [r0, #13]
90017340:	7a82      	ldrb	r2, [r0, #10]
90017342:	005b      	lsls	r3, r3, #1
90017344:	f403 7380 	and.w	r3, r3, #256	; 0x100
90017348:	4313      	orrs	r3, r2
9001734a:	8423      	strh	r3, [r4, #32]
9001734c:	7a63      	ldrb	r3, [r4, #9]
9001734e:	2b06      	cmp	r3, #6
90017350:	d10f      	bne.n	90017372 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017352:	68e0      	ldr	r0, [r4, #12]
90017354:	462a      	mov	r2, r5
90017356:	4631      	mov	r1, r6
90017358:	6803      	ldr	r3, [r0, #0]
9001735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001735c:	4798      	blx	r3
9001735e:	7b6b      	ldrb	r3, [r5, #13]
90017360:	005b      	lsls	r3, r3, #1
90017362:	f403 7280 	and.w	r2, r3, #256	; 0x100
90017366:	7aab      	ldrb	r3, [r5, #10]
90017368:	4313      	orrs	r3, r2
9001736a:	4418      	add	r0, r3
9001736c:	8c23      	ldrh	r3, [r4, #32]
9001736e:	4418      	add	r0, r3
90017370:	8420      	strh	r0, [r4, #32]
90017372:	4620      	mov	r0, r4
90017374:	bd70      	pop	{r4, r5, r6, pc}

90017376 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90017376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001737a:	2400      	movs	r4, #0
9001737c:	b085      	sub	sp, #20
9001737e:	4681      	mov	r9, r0
90017380:	4688      	mov	r8, r1
90017382:	4692      	mov	sl, r2
90017384:	469b      	mov	fp, r3
90017386:	4627      	mov	r7, r4
90017388:	4625      	mov	r5, r4
9001738a:	4626      	mov	r6, r4
9001738c:	4554      	cmp	r4, sl
9001738e:	da2a      	bge.n	900173e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90017390:	2300      	movs	r3, #0
90017392:	9303      	str	r3, [sp, #12]
90017394:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017398:	429d      	cmp	r5, r3
9001739a:	d004      	beq.n	900173a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
9001739c:	f242 030b 	movw	r3, #8203	; 0x200b
900173a0:	429d      	cmp	r5, r3
900173a2:	bf18      	it	ne
900173a4:	462f      	movne	r7, r5
900173a6:	ab03      	add	r3, sp, #12
900173a8:	4642      	mov	r2, r8
900173aa:	4659      	mov	r1, fp
900173ac:	4648      	mov	r0, r9
900173ae:	f003 f83d 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900173b2:	4605      	mov	r5, r0
900173b4:	b1b8      	cbz	r0, 900173e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900173b6:	280a      	cmp	r0, #10
900173b8:	d015      	beq.n	900173e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900173ba:	9a03      	ldr	r2, [sp, #12]
900173bc:	b18a      	cbz	r2, 900173e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
900173be:	7b50      	ldrb	r0, [r2, #13]
900173c0:	4639      	mov	r1, r7
900173c2:	7a93      	ldrb	r3, [r2, #10]
900173c4:	0040      	lsls	r0, r0, #1
900173c6:	8895      	ldrh	r5, [r2, #4]
900173c8:	f400 7080 	and.w	r0, r0, #256	; 0x100
900173cc:	4303      	orrs	r3, r0
900173ce:	4640      	mov	r0, r8
900173d0:	9301      	str	r3, [sp, #4]
900173d2:	f8d8 3000 	ldr.w	r3, [r8]
900173d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900173d8:	4798      	blx	r3
900173da:	9b01      	ldr	r3, [sp, #4]
900173dc:	4418      	add	r0, r3
900173de:	4406      	add	r6, r0
900173e0:	b2b6      	uxth	r6, r6
900173e2:	3401      	adds	r4, #1
900173e4:	e7d2      	b.n	9001738c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
900173e6:	4630      	mov	r0, r6
900173e8:	b005      	add	sp, #20
900173ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900173ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
900173ee:	2a02      	cmp	r2, #2
900173f0:	b530      	push	{r4, r5, lr}
900173f2:	d011      	beq.n	90017418 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
900173f4:	2a03      	cmp	r2, #3
900173f6:	d01c      	beq.n	90017432 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
900173f8:	2a01      	cmp	r2, #1
900173fa:	d10c      	bne.n	90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
900173fc:	888b      	ldrh	r3, [r1, #4]
900173fe:	8801      	ldrh	r1, [r0, #0]
90017400:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90017404:	1a5b      	subs	r3, r3, r1
90017406:	8844      	ldrh	r4, [r0, #2]
90017408:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
9001740c:	1a9b      	subs	r3, r3, r2
9001740e:	8004      	strh	r4, [r0, #0]
90017410:	8081      	strh	r1, [r0, #4]
90017412:	8043      	strh	r3, [r0, #2]
90017414:	80c2      	strh	r2, [r0, #6]
90017416:	bd30      	pop	{r4, r5, pc}
90017418:	88cb      	ldrh	r3, [r1, #6]
9001741a:	8842      	ldrh	r2, [r0, #2]
9001741c:	1a9b      	subs	r3, r3, r2
9001741e:	88c2      	ldrh	r2, [r0, #6]
90017420:	1a9b      	subs	r3, r3, r2
90017422:	888a      	ldrh	r2, [r1, #4]
90017424:	8801      	ldrh	r1, [r0, #0]
90017426:	8043      	strh	r3, [r0, #2]
90017428:	1a52      	subs	r2, r2, r1
9001742a:	8881      	ldrh	r1, [r0, #4]
9001742c:	1a52      	subs	r2, r2, r1
9001742e:	8002      	strh	r2, [r0, #0]
90017430:	e7f1      	b.n	90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90017432:	88cb      	ldrh	r3, [r1, #6]
90017434:	8841      	ldrh	r1, [r0, #2]
90017436:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
9001743a:	1a5b      	subs	r3, r3, r1
9001743c:	f9b0 5000 	ldrsh.w	r5, [r0]
90017440:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90017444:	1a9b      	subs	r3, r3, r2
90017446:	8045      	strh	r5, [r0, #2]
90017448:	8082      	strh	r2, [r0, #4]
9001744a:	8003      	strh	r3, [r0, #0]
9001744c:	80c4      	strh	r4, [r0, #6]
9001744e:	e7e2      	b.n	90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90017450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017454:	b09f      	sub	sp, #124	; 0x7c
90017456:	9116      	str	r1, [sp, #88]	; 0x58
90017458:	9317      	str	r3, [sp, #92]	; 0x5c
9001745a:	9929      	ldr	r1, [sp, #164]	; 0xa4
9001745c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001745e:	8809      	ldrh	r1, [r1, #0]
90017460:	889b      	ldrh	r3, [r3, #4]
90017462:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90017466:	440b      	add	r3, r1
90017468:	9212      	str	r2, [sp, #72]	; 0x48
9001746a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
9001746e:	b21b      	sxth	r3, r3
90017470:	9011      	str	r0, [sp, #68]	; 0x44
90017472:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90017476:	9310      	str	r3, [sp, #64]	; 0x40
90017478:	f8d8 3000 	ldr.w	r3, [r8]
9001747c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90017480:	7b19      	ldrb	r1, [r3, #12]
90017482:	7adb      	ldrb	r3, [r3, #11]
90017484:	9114      	str	r1, [sp, #80]	; 0x50
90017486:	9315      	str	r3, [sp, #84]	; 0x54
90017488:	2a00      	cmp	r2, #0
9001748a:	d06a      	beq.n	90017562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
9001748c:	f898 3010 	ldrb.w	r3, [r8, #16]
90017490:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90017492:	2b06      	cmp	r3, #6
90017494:	bf14      	ite	ne
90017496:	2301      	movne	r3, #1
90017498:	2302      	moveq	r3, #2
9001749a:	4413      	add	r3, r2
9001749c:	f04f 0900 	mov.w	r9, #0
900174a0:	930f      	str	r3, [sp, #60]	; 0x3c
900174a2:	464c      	mov	r4, r9
900174a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
900174a8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
900174ac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
900174b0:	4293      	cmp	r3, r2
900174b2:	f280 808f 	bge.w	900175d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
900174b6:	2300      	movs	r3, #0
900174b8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
900174bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
900174c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900174c4:	429c      	cmp	r4, r3
900174c6:	d006      	beq.n	900174d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
900174c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900174ca:	f242 020b 	movw	r2, #8203	; 0x200b
900174ce:	4294      	cmp	r4, r2
900174d0:	bf18      	it	ne
900174d2:	4623      	movne	r3, r4
900174d4:	930d      	str	r3, [sp, #52]	; 0x34
900174d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900174d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
900174da:	f8d8 2000 	ldr.w	r2, [r8]
900174de:	428b      	cmp	r3, r1
900174e0:	db41      	blt.n	90017566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
900174e2:	6813      	ldr	r3, [r2, #0]
900174e4:	4610      	mov	r0, r2
900174e6:	695b      	ldr	r3, [r3, #20]
900174e8:	4798      	blx	r3
900174ea:	4604      	mov	r4, r0
900174ec:	f8d8 0000 	ldr.w	r0, [r8]
900174f0:	aa1d      	add	r2, sp, #116	; 0x74
900174f2:	4621      	mov	r1, r4
900174f4:	6803      	ldr	r3, [r0, #0]
900174f6:	689d      	ldr	r5, [r3, #8]
900174f8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
900174fc:	47a8      	blx	r5
900174fe:	901c      	str	r0, [sp, #112]	; 0x70
90017500:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017504:	429c      	cmp	r4, r3
90017506:	f000 80ec 	beq.w	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001750a:	f242 030b 	movw	r3, #8203	; 0x200b
9001750e:	429c      	cmp	r4, r3
90017510:	f000 80e7 	beq.w	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017514:	2c00      	cmp	r4, #0
90017516:	f000 80f9 	beq.w	9001770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001751a:	2c0a      	cmp	r4, #10
9001751c:	d060      	beq.n	900175e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
9001751e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90017520:	b36a      	cbz	r2, 9001757e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90017522:	8894      	ldrh	r4, [r2, #4]
90017524:	f1bb 0f00 	cmp.w	fp, #0
90017528:	d03b      	beq.n	900175a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
9001752a:	f892 900d 	ldrb.w	r9, [r2, #13]
9001752e:	f1bb 0f01 	cmp.w	fp, #1
90017532:	ea4f 0949 	mov.w	r9, r9, lsl #1
90017536:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001753a:	f892 900a 	ldrb.w	r9, [r2, #10]
9001753e:	ea49 0903 	orr.w	r9, r9, r3
90017542:	d134      	bne.n	900175ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90017544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017546:	eba6 0609 	sub.w	r6, r6, r9
9001754a:	2b00      	cmp	r3, #0
9001754c:	d14f      	bne.n	900175ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
9001754e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017550:	eb09 0306 	add.w	r3, r9, r6
90017554:	4413      	add	r3, r2
90017556:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90017558:	f9b2 2000 	ldrsh.w	r2, [r2]
9001755c:	4293      	cmp	r3, r2
9001755e:	da51      	bge.n	90017604 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90017560:	e038      	b.n	900175d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90017562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90017564:	e79a      	b.n	9001749c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90017566:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001756a:	4659      	mov	r1, fp
9001756c:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001756e:	9301      	str	r3, [sp, #4]
90017570:	ab1d      	add	r3, sp, #116	; 0x74
90017572:	9300      	str	r3, [sp, #0]
90017574:	ab1c      	add	r3, sp, #112	; 0x70
90017576:	f002 ffa2 	bl	9001a4be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
9001757a:	4604      	mov	r4, r0
9001757c:	e7c0      	b.n	90017500 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
9001757e:	f8d8 0000 	ldr.w	r0, [r8]
90017582:	6803      	ldr	r3, [r0, #0]
90017584:	691b      	ldr	r3, [r3, #16]
90017586:	4798      	blx	r3
90017588:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001758c:	4298      	cmp	r0, r3
9001758e:	f000 80a8 	beq.w	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017592:	f242 030b 	movw	r3, #8203	; 0x200b
90017596:	4298      	cmp	r0, r3
90017598:	f000 80a3 	beq.w	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001759c:	f1bb 0f00 	cmp.w	fp, #0
900175a0:	d100      	bne.n	900175a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
900175a2:	444e      	add	r6, r9
900175a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900175a6:	2a00      	cmp	r2, #0
900175a8:	d1bf      	bne.n	9001752a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
900175aa:	4691      	mov	r9, r2
900175ac:	e099      	b.n	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900175ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900175b0:	2b00      	cmp	r3, #0
900175b2:	f000 80ad 	beq.w	90017710 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
900175b6:	f1bb 0f00 	cmp.w	fp, #0
900175ba:	d118      	bne.n	900175ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900175bc:	f8d8 0000 	ldr.w	r0, [r8]
900175c0:	990d      	ldr	r1, [sp, #52]	; 0x34
900175c2:	6803      	ldr	r3, [r0, #0]
900175c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900175c6:	4798      	blx	r3
900175c8:	4406      	add	r6, r0
900175ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
900175cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
900175ce:	1af3      	subs	r3, r6, r3
900175d0:	4293      	cmp	r3, r2
900175d2:	dd17      	ble.n	90017604 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900175d4:	2c00      	cmp	r4, #0
900175d6:	f000 8099 	beq.w	9001770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900175da:	2c0a      	cmp	r4, #10
900175dc:	f040 8087 	bne.w	900176ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
900175e0:	240a      	movs	r4, #10
900175e2:	fab4 f084 	clz	r0, r4
900175e6:	0940      	lsrs	r0, r0, #5
900175e8:	b01f      	add	sp, #124	; 0x7c
900175ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900175ee:	f8d8 0000 	ldr.w	r0, [r8]
900175f2:	990d      	ldr	r1, [sp, #52]	; 0x34
900175f4:	6803      	ldr	r3, [r0, #0]
900175f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900175f8:	4798      	blx	r3
900175fa:	f1bb 0f01 	cmp.w	fp, #1
900175fe:	eba6 0600 	sub.w	r6, r6, r0
90017602:	d0a4      	beq.n	9001754e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90017604:	981c      	ldr	r0, [sp, #112]	; 0x70
90017606:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90017608:	f990 1009 	ldrsb.w	r1, [r0, #9]
9001760c:	f9b3 7000 	ldrsh.w	r7, [r3]
90017610:	7b43      	ldrb	r3, [r0, #13]
90017612:	4431      	add	r1, r6
90017614:	015b      	lsls	r3, r3, #5
90017616:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001761a:	7983      	ldrb	r3, [r0, #6]
9001761c:	4313      	orrs	r3, r2
9001761e:	440b      	add	r3, r1
90017620:	42bb      	cmp	r3, r7
90017622:	db5e      	blt.n	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017624:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017626:	4299      	cmp	r1, r3
90017628:	da5b      	bge.n	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001762a:	f8d8 0000 	ldr.w	r0, [r8]
9001762e:	42b7      	cmp	r7, r6
90017630:	6803      	ldr	r3, [r0, #0]
90017632:	bfcc      	ite	gt
90017634:	1bbf      	subgt	r7, r7, r6
90017636:	2700      	movle	r7, #0
90017638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001763a:	bfc8      	it	gt
9001763c:	b2bf      	uxthgt	r7, r7
9001763e:	4798      	blx	r3
90017640:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90017642:	7b5a      	ldrb	r2, [r3, #13]
90017644:	00d1      	lsls	r1, r2, #3
90017646:	f401 7580 	and.w	r5, r1, #256	; 0x100
9001764a:	7a19      	ldrb	r1, [r3, #8]
9001764c:	4329      	orrs	r1, r5
9001764e:	0655      	lsls	r5, r2, #25
90017650:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90017652:	bf48      	it	mi
90017654:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
90017658:	4405      	add	r5, r0
9001765a:	bf48      	it	mi
9001765c:	b209      	sxthmi	r1, r1
9001765e:	1a6d      	subs	r5, r5, r1
90017660:	9929      	ldr	r1, [sp, #164]	; 0xa4
90017662:	b2ad      	uxth	r5, r5
90017664:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90017668:	fa0f fa85 	sxth.w	sl, r5
9001766c:	4551      	cmp	r1, sl
9001766e:	dd3c      	ble.n	900176ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90017670:	0112      	lsls	r2, r2, #4
90017672:	79d8      	ldrb	r0, [r3, #7]
90017674:	f402 7280 	and.w	r2, r2, #256	; 0x100
90017678:	4302      	orrs	r2, r0
9001767a:	4492      	add	sl, r2
9001767c:	4551      	cmp	r1, sl
9001767e:	dc30      	bgt.n	900176e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017680:	1b4d      	subs	r5, r1, r5
90017682:	468a      	mov	sl, r1
90017684:	b22d      	sxth	r5, r5
90017686:	9319      	str	r3, [sp, #100]	; 0x64
90017688:	b2ad      	uxth	r5, r5
9001768a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001768c:	f8d8 0000 	ldr.w	r0, [r8]
90017690:	681a      	ldr	r2, [r3, #0]
90017692:	6801      	ldr	r1, [r0, #0]
90017694:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
90017696:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90017698:	9313      	str	r3, [sp, #76]	; 0x4c
9001769a:	9218      	str	r2, [sp, #96]	; 0x60
9001769c:	6c09      	ldr	r1, [r1, #64]	; 0x40
9001769e:	4788      	blx	r1
900176a0:	f898 1006 	ldrb.w	r1, [r8, #6]
900176a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
900176a6:	910b      	str	r1, [sp, #44]	; 0x2c
900176a8:	f898 100e 	ldrb.w	r1, [r8, #14]
900176ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
900176ae:	910a      	str	r1, [sp, #40]	; 0x28
900176b0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
900176b4:	9109      	str	r1, [sp, #36]	; 0x24
900176b6:	f8d8 1008 	ldr.w	r1, [r8, #8]
900176ba:	9305      	str	r3, [sp, #20]
900176bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900176be:	9206      	str	r2, [sp, #24]
900176c0:	9304      	str	r3, [sp, #16]
900176c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
900176c4:	f8cd a004 	str.w	sl, [sp, #4]
900176c8:	e9cd 7502 	strd	r7, r5, [sp, #8]
900176cc:	4437      	add	r7, r6
900176ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900176d0:	b23f      	sxth	r7, r7
900176d2:	e9cd 0107 	strd	r0, r1, [sp, #28]
900176d6:	9700      	str	r7, [sp, #0]
900176d8:	9916      	ldr	r1, [sp, #88]	; 0x58
900176da:	681a      	ldr	r2, [r3, #0]
900176dc:	9811      	ldr	r0, [sp, #68]	; 0x44
900176de:	685b      	ldr	r3, [r3, #4]
900176e0:	47a8      	blx	r5
900176e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900176e4:	3301      	adds	r3, #1
900176e6:	930e      	str	r3, [sp, #56]	; 0x38
900176e8:	e6e0      	b.n	900174ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
900176ea:	2500      	movs	r5, #0
900176ec:	e7cb      	b.n	90017686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
900176ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900176f0:	3501      	adds	r5, #1
900176f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900176f4:	429d      	cmp	r5, r3
900176f6:	f6bf af74 	bge.w	900175e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900176fa:	4659      	mov	r1, fp
900176fc:	982c      	ldr	r0, [sp, #176]	; 0xb0
900176fe:	f7f0 fd47 	bl	90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017702:	4604      	mov	r4, r0
90017704:	b110      	cbz	r0, 9001770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90017706:	280a      	cmp	r0, #10
90017708:	d1f2      	bne.n	900176f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
9001770a:	e769      	b.n	900175e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
9001770c:	2400      	movs	r4, #0
9001770e:	e768      	b.n	900175e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90017710:	f1bb 0f00 	cmp.w	fp, #0
90017714:	f43f af59 	beq.w	900175ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90017718:	e774      	b.n	90017604 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

9001771a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
9001771a:	b530      	push	{r4, r5, lr}
9001771c:	8ac4      	ldrh	r4, [r0, #22]
9001771e:	8b45      	ldrh	r5, [r0, #26]
90017720:	8343      	strh	r3, [r0, #26]
90017722:	442c      	add	r4, r5
90017724:	1ae4      	subs	r4, r4, r3
90017726:	8b83      	ldrh	r3, [r0, #28]
90017728:	82c4      	strh	r4, [r0, #22]
9001772a:	8b04      	ldrh	r4, [r0, #24]
9001772c:	4422      	add	r2, r4
9001772e:	440c      	add	r4, r1
90017730:	1a59      	subs	r1, r3, r1
90017732:	83c2      	strh	r2, [r0, #30]
90017734:	8304      	strh	r4, [r0, #24]
90017736:	8381      	strh	r1, [r0, #28]
90017738:	bd30      	pop	{r4, r5, pc}

9001773a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
9001773a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001773e:	4604      	mov	r4, r0
90017740:	8a47      	ldrh	r7, [r0, #18]
90017742:	68c0      	ldr	r0, [r0, #12]
90017744:	b085      	sub	sp, #20
90017746:	6803      	ldr	r3, [r0, #0]
90017748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001774a:	4798      	blx	r3
9001774c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90017750:	7a63      	ldrb	r3, [r4, #9]
90017752:	eb06 0640 	add.w	r6, r6, r0, lsl #1
90017756:	3b01      	subs	r3, #1
90017758:	42b7      	cmp	r7, r6
9001775a:	bfac      	ite	ge
9001775c:	f04f 0900 	movge.w	r9, #0
90017760:	f04f 0901 	movlt.w	r9, #1
90017764:	2b05      	cmp	r3, #5
90017766:	d804      	bhi.n	90017772 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
90017768:	e8df f003 	tbb	[pc, r3]
9001776c:	470f0854 	.word	0x470f0854
90017770:	4c4c      	.short	0x4c4c
90017772:	2500      	movs	r5, #0
90017774:	46a9      	mov	r9, r5
90017776:	462e      	mov	r6, r5
90017778:	462f      	mov	r7, r5
9001777a:	e00e      	b.n	9001779a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
9001777c:	42b7      	cmp	r7, r6
9001777e:	f04f 0500 	mov.w	r5, #0
90017782:	bfb4      	ite	lt
90017784:	2600      	movlt	r6, #0
90017786:	2601      	movge	r6, #1
90017788:	e7f6      	b.n	90017778 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001778a:	42b7      	cmp	r7, r6
9001778c:	464d      	mov	r5, r9
9001778e:	f04f 0900 	mov.w	r9, #0
90017792:	bfb4      	ite	lt
90017794:	2600      	movlt	r6, #0
90017796:	2601      	movge	r6, #1
90017798:	464f      	mov	r7, r9
9001779a:	f04f 0800 	mov.w	r8, #0
9001779e:	f8a4 8016 	strh.w	r8, [r4, #22]
900177a2:	f8a4 8018 	strh.w	r8, [r4, #24]
900177a6:	f8cd 8004 	str.w	r8, [sp, #4]
900177aa:	2300      	movs	r3, #0
900177ac:	9303      	str	r3, [sp, #12]
900177ae:	8823      	ldrh	r3, [r4, #0]
900177b0:	2b20      	cmp	r3, #32
900177b2:	d033      	beq.n	9001781c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
900177b4:	f242 010b 	movw	r1, #8203	; 0x200b
900177b8:	1a5a      	subs	r2, r3, r1
900177ba:	f1d2 0a00 	rsbs	sl, r2, #0
900177be:	eb4a 0a02 	adc.w	sl, sl, r2
900177c2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900177c6:	4293      	cmp	r3, r2
900177c8:	d008      	beq.n	900177dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900177ca:	428b      	cmp	r3, r1
900177cc:	9a01      	ldr	r2, [sp, #4]
900177ce:	bf0e      	itee	eq
900177d0:	f04f 0a01 	moveq.w	sl, #1
900177d4:	461a      	movne	r2, r3
900177d6:	f04f 0a00 	movne.w	sl, #0
900177da:	9201      	str	r2, [sp, #4]
900177dc:	ab03      	add	r3, sp, #12
900177de:	68e2      	ldr	r2, [r4, #12]
900177e0:	7a21      	ldrb	r1, [r4, #8]
900177e2:	6860      	ldr	r0, [r4, #4]
900177e4:	f002 fe22 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900177e8:	8020      	strh	r0, [r4, #0]
900177ea:	b9d8      	cbnz	r0, 90017824 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
900177ec:	8ba2      	ldrh	r2, [r4, #28]
900177ee:	2300      	movs	r3, #0
900177f0:	4611      	mov	r1, r2
900177f2:	4620      	mov	r0, r4
900177f4:	f7ff ff91 	bl	9001771a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900177f8:	e06e      	b.n	900178d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900177fa:	2500      	movs	r5, #0
900177fc:	2701      	movs	r7, #1
900177fe:	46a9      	mov	r9, r5
90017800:	462e      	mov	r6, r5
90017802:	e7ca      	b.n	9001779a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017804:	42b7      	cmp	r7, r6
90017806:	f04f 0500 	mov.w	r5, #0
9001780a:	bfb4      	ite	lt
9001780c:	2700      	movlt	r7, #0
9001780e:	2701      	movge	r7, #1
90017810:	462e      	mov	r6, r5
90017812:	e7c2      	b.n	9001779a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90017814:	2500      	movs	r5, #0
90017816:	2601      	movs	r6, #1
90017818:	46a9      	mov	r9, r5
9001781a:	e7ad      	b.n	90017778 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
9001781c:	9301      	str	r3, [sp, #4]
9001781e:	f04f 0a01 	mov.w	sl, #1
90017822:	e7db      	b.n	900177dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90017824:	8b63      	ldrh	r3, [r4, #26]
90017826:	280a      	cmp	r0, #10
90017828:	f103 0301 	add.w	r3, r3, #1
9001782c:	8363      	strh	r3, [r4, #26]
9001782e:	d0dd      	beq.n	900177ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90017830:	9a03      	ldr	r2, [sp, #12]
90017832:	bb62      	cbnz	r2, 9001788e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90017834:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017838:	4298      	cmp	r0, r3
9001783a:	d003      	beq.n	90017844 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
9001783c:	f242 030b 	movw	r3, #8203	; 0x200b
90017840:	4298      	cmp	r0, r3
90017842:	d1b2      	bne.n	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017844:	8823      	ldrh	r3, [r4, #0]
90017846:	8ba1      	ldrh	r1, [r4, #28]
90017848:	2b20      	cmp	r3, #32
9001784a:	d003      	beq.n	90017854 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
9001784c:	f242 000b 	movw	r0, #8203	; 0x200b
90017850:	4283      	cmp	r3, r0
90017852:	d131      	bne.n	900178b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90017854:	f1ba 0f00 	cmp.w	sl, #0
90017858:	bf0a      	itet	eq
9001785a:	4688      	moveq	r8, r1
9001785c:	4650      	movne	r0, sl
9001785e:	2001      	moveq	r0, #1
90017860:	440a      	add	r2, r1
90017862:	8b23      	ldrh	r3, [r4, #24]
90017864:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90017868:	b292      	uxth	r2, r2
9001786a:	83a2      	strh	r2, [r4, #28]
9001786c:	4413      	add	r3, r2
9001786e:	f1b9 0f00 	cmp.w	r9, #0
90017872:	d102      	bne.n	9001787a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90017874:	2d00      	cmp	r5, #0
90017876:	d042      	beq.n	900178fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
90017878:	b300      	cbz	r0, 900178bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
9001787a:	8c21      	ldrh	r1, [r4, #32]
9001787c:	4419      	add	r1, r3
9001787e:	458c      	cmp	ip, r1
90017880:	da37      	bge.n	900178f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90017882:	8ae1      	ldrh	r1, [r4, #22]
90017884:	2900      	cmp	r1, #0
90017886:	d034      	beq.n	900178f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90017888:	4563      	cmp	r3, ip
9001788a:	dd8e      	ble.n	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001788c:	e01d      	b.n	900178ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
9001788e:	8893      	ldrh	r3, [r2, #4]
90017890:	9901      	ldr	r1, [sp, #4]
90017892:	8023      	strh	r3, [r4, #0]
90017894:	f892 b00d 	ldrb.w	fp, [r2, #13]
90017898:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
9001789c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
900178a0:	f892 b00a 	ldrb.w	fp, [r2, #10]
900178a4:	ea4b 0b00 	orr.w	fp, fp, r0
900178a8:	68e0      	ldr	r0, [r4, #12]
900178aa:	6803      	ldr	r3, [r0, #0]
900178ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900178ae:	4798      	blx	r3
900178b0:	eb0b 0200 	add.w	r2, fp, r0
900178b4:	b292      	uxth	r2, r2
900178b6:	e7c5      	b.n	90017844 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900178b8:	2000      	movs	r0, #0
900178ba:	e7d1      	b.n	90017860 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
900178bc:	4563      	cmp	r3, ip
900178be:	f77f af74 	ble.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178c2:	8ae3      	ldrh	r3, [r4, #22]
900178c4:	2b00      	cmp	r3, #0
900178c6:	f43f af70 	beq.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178ca:	2301      	movs	r3, #1
900178cc:	8c22      	ldrh	r2, [r4, #32]
900178ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
900178d2:	8be3      	ldrh	r3, [r4, #30]
900178d4:	4413      	add	r3, r2
900178d6:	83e3      	strh	r3, [r4, #30]
900178d8:	68e0      	ldr	r0, [r4, #12]
900178da:	6803      	ldr	r3, [r0, #0]
900178dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900178de:	4798      	blx	r3
900178e0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
900178e4:	4418      	add	r0, r3
900178e6:	8a63      	ldrh	r3, [r4, #18]
900178e8:	1a18      	subs	r0, r3, r0
900178ea:	8260      	strh	r0, [r4, #18]
900178ec:	b005      	add	sp, #20
900178ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900178f2:	2300      	movs	r3, #0
900178f4:	4611      	mov	r1, r2
900178f6:	4620      	mov	r0, r4
900178f8:	f7ff ff0f 	bl	9001771a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
900178fc:	e755      	b.n	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178fe:	4563      	cmp	r3, ip
90017900:	dd14      	ble.n	9001792c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90017902:	b117      	cbz	r7, 9001790a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90017904:	2301      	movs	r3, #1
90017906:	460a      	mov	r2, r1
90017908:	e772      	b.n	900177f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001790a:	2e00      	cmp	r6, #0
9001790c:	f43f af4d 	beq.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017910:	2800      	cmp	r0, #0
90017912:	f47f af4a 	bne.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017916:	f1ba 0f00 	cmp.w	sl, #0
9001791a:	d002      	beq.n	90017922 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
9001791c:	2301      	movs	r3, #1
9001791e:	4642      	mov	r2, r8
90017920:	e767      	b.n	900177f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90017922:	8ae3      	ldrh	r3, [r4, #22]
90017924:	2b00      	cmp	r3, #0
90017926:	f43f af40 	beq.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001792a:	e7d5      	b.n	900178d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001792c:	2800      	cmp	r0, #0
9001792e:	f47f af3c 	bne.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017932:	f1ba 0f00 	cmp.w	sl, #0
90017936:	f43f af38 	beq.w	900177aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001793a:	2301      	movs	r3, #1
9001793c:	4642      	mov	r2, r8
9001793e:	e7da      	b.n	900178f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90017940 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90017940:	b5f0      	push	{r4, r5, r6, r7, lr}
90017942:	4605      	mov	r5, r0
90017944:	b08f      	sub	sp, #60	; 0x3c
90017946:	4617      	mov	r7, r2
90017948:	461c      	mov	r4, r3
9001794a:	460e      	mov	r6, r1
9001794c:	b1d1      	cbz	r1, 90017984 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
9001794e:	681b      	ldr	r3, [r3, #0]
90017950:	4620      	mov	r0, r4
90017952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017954:	4798      	blx	r3
90017956:	4240      	negs	r0, r0
90017958:	9603      	str	r6, [sp, #12]
9001795a:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001795e:	b200      	sxth	r0, r0
90017960:	9700      	str	r7, [sp, #0]
90017962:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90017966:	4629      	mov	r1, r5
90017968:	e9cd 4001 	strd	r4, r0, [sp, #4]
9001796c:	2401      	movs	r4, #1
9001796e:	a805      	add	r0, sp, #20
90017970:	f7ff fcbe 	bl	900172f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90017974:	a805      	add	r0, sp, #20
90017976:	f7ff fee0 	bl	9001773a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001797a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
9001797e:	b163      	cbz	r3, 9001799a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
90017980:	3401      	adds	r4, #1
90017982:	e7f7      	b.n	90017974 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90017984:	2401      	movs	r4, #1
90017986:	f002 fe1d 	bl	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001798a:	280a      	cmp	r0, #10
9001798c:	4628      	mov	r0, r5
9001798e:	bf08      	it	eq
90017990:	3401      	addeq	r4, #1
90017992:	f002 fe17 	bl	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017996:	2800      	cmp	r0, #0
90017998:	d1f7      	bne.n	9001798a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
9001799a:	b2a0      	uxth	r0, r4
9001799c:	b00f      	add	sp, #60	; 0x3c
9001799e:	bdf0      	pop	{r4, r5, r6, r7, pc}

900179a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
900179a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900179a4:	b0e3      	sub	sp, #396	; 0x18c
900179a6:	461c      	mov	r4, r3
900179a8:	4683      	mov	fp, r0
900179aa:	4688      	mov	r8, r1
900179ac:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
900179ae:	2b00      	cmp	r3, #0
900179b0:	f000 810f 	beq.w	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179b4:	6823      	ldr	r3, [r4, #0]
900179b6:	2b00      	cmp	r3, #0
900179b8:	f000 810b 	beq.w	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179bc:	7ba3      	ldrb	r3, [r4, #14]
900179be:	2b00      	cmp	r3, #0
900179c0:	f000 8107 	beq.w	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179c4:	ad0a      	add	r5, sp, #40	; 0x28
900179c6:	6810      	ldr	r0, [r2, #0]
900179c8:	6851      	ldr	r1, [r2, #4]
900179ca:	462b      	mov	r3, r5
900179cc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
900179d0:	c303      	stmia	r3!, {r0, r1}
900179d2:	2100      	movs	r1, #0
900179d4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
900179d8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900179dc:	4628      	mov	r0, r5
900179de:	910c      	str	r1, [sp, #48]	; 0x30
900179e0:	a90c      	add	r1, sp, #48	; 0x30
900179e2:	79a2      	ldrb	r2, [r4, #6]
900179e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900179e8:	f7ff fd01 	bl	900173ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900179ec:	a90c      	add	r1, sp, #48	; 0x30
900179ee:	79a2      	ldrb	r2, [r4, #6]
900179f0:	4608      	mov	r0, r1
900179f2:	f7ff fcfc 	bl	900173ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900179f6:	a817      	add	r0, sp, #92	; 0x5c
900179f8:	f002 f9b7 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
900179fc:	6820      	ldr	r0, [r4, #0]
900179fe:	6803      	ldr	r3, [r0, #0]
90017a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017a02:	4798      	blx	r3
90017a04:	4606      	mov	r6, r0
90017a06:	6820      	ldr	r0, [r4, #0]
90017a08:	6803      	ldr	r3, [r0, #0]
90017a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90017a0c:	4798      	blx	r3
90017a0e:	4633      	mov	r3, r6
90017a10:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017a12:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017a14:	9000      	str	r0, [sp, #0]
90017a16:	a817      	add	r0, sp, #92	; 0x5c
90017a18:	f002 fa02 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90017a1c:	6820      	ldr	r0, [r4, #0]
90017a1e:	f894 a004 	ldrb.w	sl, [r4, #4]
90017a22:	6803      	ldr	r3, [r0, #0]
90017a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017a26:	4798      	blx	r3
90017a28:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
90017a2c:	6823      	ldr	r3, [r4, #0]
90017a2e:	4607      	mov	r7, r0
90017a30:	4406      	add	r6, r0
90017a32:	a830      	add	r0, sp, #192	; 0xc0
90017a34:	f893 9009 	ldrb.w	r9, [r3, #9]
90017a38:	f002 f997 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
90017a3c:	7c23      	ldrb	r3, [r4, #16]
90017a3e:	b17b      	cbz	r3, 90017a60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90017a40:	6820      	ldr	r0, [r4, #0]
90017a42:	6803      	ldr	r3, [r0, #0]
90017a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017a46:	4798      	blx	r3
90017a48:	9009      	str	r0, [sp, #36]	; 0x24
90017a4a:	6820      	ldr	r0, [r4, #0]
90017a4c:	6802      	ldr	r2, [r0, #0]
90017a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
90017a50:	4790      	blx	r2
90017a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017a54:	9000      	str	r0, [sp, #0]
90017a56:	a830      	add	r0, sp, #192	; 0xc0
90017a58:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017a5a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017a5c:	f002 f9e0 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90017a60:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90017a64:	a80e      	add	r0, sp, #56	; 0x38
90017a66:	7be2      	ldrb	r2, [r4, #15]
90017a68:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90017a6c:	1a8a      	subs	r2, r1, r2
90017a6e:	7c21      	ldrb	r1, [r4, #16]
90017a70:	9103      	str	r1, [sp, #12]
90017a72:	b292      	uxth	r2, r2
90017a74:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90017a78:	9102      	str	r1, [sp, #8]
90017a7a:	6821      	ldr	r1, [r4, #0]
90017a7c:	9101      	str	r1, [sp, #4]
90017a7e:	7961      	ldrb	r1, [r4, #5]
90017a80:	9100      	str	r1, [sp, #0]
90017a82:	a930      	add	r1, sp, #192	; 0xc0
90017a84:	f7ff fc34 	bl	900172f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90017a88:	2e00      	cmp	r6, #0
90017a8a:	dc5b      	bgt.n	90017b44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90017a8c:	af17      	add	r7, sp, #92	; 0x5c
90017a8e:	f04f 0900 	mov.w	r9, #0
90017a92:	7c23      	ldrb	r3, [r4, #16]
90017a94:	2b00      	cmp	r3, #0
90017a96:	f000 80ae 	beq.w	90017bf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90017a9a:	a80e      	add	r0, sp, #56	; 0x38
90017a9c:	f7ff fe4d 	bl	9001773a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017aa0:	f1ba 0f00 	cmp.w	sl, #0
90017aa4:	f000 80a2 	beq.w	90017bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017aa8:	7c23      	ldrb	r3, [r4, #16]
90017aaa:	2264      	movs	r2, #100	; 0x64
90017aac:	4639      	mov	r1, r7
90017aae:	a849      	add	r0, sp, #292	; 0x124
90017ab0:	9309      	str	r3, [sp, #36]	; 0x24
90017ab2:	f010 f9b4 	bl	90027e1e <memcpy>
90017ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017ab8:	2b00      	cmp	r3, #0
90017aba:	f000 80a4 	beq.w	90017c06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90017abe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90017ac2:	7922      	ldrb	r2, [r4, #4]
90017ac4:	2a01      	cmp	r2, #1
90017ac6:	f040 8087 	bne.w	90017bd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90017aca:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90017ace:	1ac0      	subs	r0, r0, r3
90017ad0:	2302      	movs	r3, #2
90017ad2:	fb90 f0f3 	sdiv	r0, r0, r3
90017ad6:	b200      	sxth	r0, r0
90017ad8:	7c23      	ldrb	r3, [r4, #16]
90017ada:	2b00      	cmp	r3, #0
90017adc:	f000 8088 	beq.w	90017bf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90017ae0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90017ae4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90017ae8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017aec:	e9cd 2105 	strd	r2, r1, [sp, #20]
90017af0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90017af4:	2100      	movs	r1, #0
90017af6:	4410      	add	r0, r2
90017af8:	4642      	mov	r2, r8
90017afa:	b200      	sxth	r0, r0
90017afc:	e9cd 9703 	strd	r9, r7, [sp, #12]
90017b00:	9000      	str	r0, [sp, #0]
90017b02:	4658      	mov	r0, fp
90017b04:	e9cd 5401 	strd	r5, r4, [sp, #4]
90017b08:	f7ff fca2 	bl	90017450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90017b0c:	2800      	cmp	r0, #0
90017b0e:	d160      	bne.n	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b10:	b2b2      	uxth	r2, r6
90017b12:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017b16:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90017b1a:	4413      	add	r3, r2
90017b1c:	1a8a      	subs	r2, r1, r2
90017b1e:	b21b      	sxth	r3, r3
90017b20:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90017b24:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90017b28:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017b2c:	2a00      	cmp	r2, #0
90017b2e:	d150      	bne.n	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b30:	6822      	ldr	r2, [r4, #0]
90017b32:	8869      	ldrh	r1, [r5, #2]
90017b34:	7a12      	ldrb	r2, [r2, #8]
90017b36:	1a9b      	subs	r3, r3, r2
90017b38:	88ea      	ldrh	r2, [r5, #6]
90017b3a:	440a      	add	r2, r1
90017b3c:	b212      	sxth	r2, r2
90017b3e:	4293      	cmp	r3, r2
90017b40:	dda7      	ble.n	90017a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90017b42:	e046      	b.n	90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b44:	7c23      	ldrb	r3, [r4, #16]
90017b46:	444f      	add	r7, r9
90017b48:	b1c3      	cbz	r3, 90017b7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
90017b4a:	f64f 79ff 	movw	r9, #65535	; 0xffff
90017b4e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017b52:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017b56:	443b      	add	r3, r7
90017b58:	4293      	cmp	r3, r2
90017b5a:	da97      	bge.n	90017a8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017b5c:	a80e      	add	r0, sp, #56	; 0x38
90017b5e:	f7ff fdec 	bl	9001773a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017b62:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90017b66:	3b01      	subs	r3, #1
90017b68:	b29b      	uxth	r3, r3
90017b6a:	454b      	cmp	r3, r9
90017b6c:	9309      	str	r3, [sp, #36]	; 0x24
90017b6e:	d021      	beq.n	90017bb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90017b70:	7961      	ldrb	r1, [r4, #5]
90017b72:	a817      	add	r0, sp, #92	; 0x5c
90017b74:	f7f0 fb0c 	bl	90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017b7a:	e7f4      	b.n	90017b66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90017b7c:	fa1f f986 	uxth.w	r9, r6
90017b80:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017b84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017b88:	443b      	add	r3, r7
90017b8a:	4293      	cmp	r3, r2
90017b8c:	f6bf af7e 	bge.w	90017a8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017b90:	a817      	add	r0, sp, #92	; 0x5c
90017b92:	f002 fd17 	bl	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017b96:	b1e0      	cbz	r0, 90017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b98:	280a      	cmp	r0, #10
90017b9a:	d1f1      	bne.n	90017b80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017b9c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017ba0:	444b      	add	r3, r9
90017ba2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017ba6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90017baa:	eba3 0309 	sub.w	r3, r3, r9
90017bae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017bb2:	e7e5      	b.n	90017b80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017bb4:	b2b3      	uxth	r3, r6
90017bb6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90017bba:	441a      	add	r2, r3
90017bbc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90017bc0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90017bc4:	1ad3      	subs	r3, r2, r3
90017bc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017bca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90017bce:	2b00      	cmp	r3, #0
90017bd0:	d1bd      	bne.n	90017b4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90017bd2:	b063      	add	sp, #396	; 0x18c
90017bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017bd8:	2a02      	cmp	r2, #2
90017bda:	d105      	bne.n	90017be8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90017bdc:	7be2      	ldrb	r2, [r4, #15]
90017bde:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90017be2:	1a80      	subs	r0, r0, r2
90017be4:	1ac0      	subs	r0, r0, r3
90017be6:	e776      	b.n	90017ad6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90017be8:	2000      	movs	r0, #0
90017bea:	e775      	b.n	90017ad8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017bec:	7be0      	ldrb	r0, [r4, #15]
90017bee:	e773      	b.n	90017ad8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017bf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017bf4:	e776      	b.n	90017ae4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90017bf6:	f1ba 0f00 	cmp.w	sl, #0
90017bfa:	d0f7      	beq.n	90017bec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017bfc:	2264      	movs	r2, #100	; 0x64
90017bfe:	4639      	mov	r1, r7
90017c00:	a849      	add	r0, sp, #292	; 0x124
90017c02:	f010 f90c 	bl	90027e1e <memcpy>
90017c06:	2300      	movs	r3, #0
90017c08:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017c0c:	6821      	ldr	r1, [r4, #0]
90017c0e:	a849      	add	r0, sp, #292	; 0x124
90017c10:	f7ff fbb1 	bl	90017376 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90017c14:	b203      	sxth	r3, r0
90017c16:	e754      	b.n	90017ac2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90017c18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90017c18:	2b03      	cmp	r3, #3
90017c1a:	d818      	bhi.n	90017c4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90017c1c:	e8df f003 	tbb	[pc, r3]
90017c20:	130d0602 	.word	0x130d0602
90017c24:	f9b0 2000 	ldrsh.w	r2, [r0]
90017c28:	1850      	adds	r0, r2, r1
90017c2a:	4770      	bx	lr
90017c2c:	8803      	ldrh	r3, [r0, #0]
90017c2e:	8880      	ldrh	r0, [r0, #4]
90017c30:	4418      	add	r0, r3
90017c32:	b200      	sxth	r0, r0
90017c34:	1a80      	subs	r0, r0, r2
90017c36:	3801      	subs	r0, #1
90017c38:	4770      	bx	lr
90017c3a:	8803      	ldrh	r3, [r0, #0]
90017c3c:	8880      	ldrh	r0, [r0, #4]
90017c3e:	4418      	add	r0, r3
90017c40:	b200      	sxth	r0, r0
90017c42:	1a40      	subs	r0, r0, r1
90017c44:	e7f7      	b.n	90017c36 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90017c46:	f9b0 0000 	ldrsh.w	r0, [r0]
90017c4a:	4410      	add	r0, r2
90017c4c:	4770      	bx	lr
90017c4e:	2000      	movs	r0, #0
90017c50:	4770      	bx	lr

90017c52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90017c52:	2b03      	cmp	r3, #3
90017c54:	d817      	bhi.n	90017c86 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90017c56:	e8df f003 	tbb	[pc, r3]
90017c5a:	0602      	.short	0x0602
90017c5c:	1009      	.short	0x1009
90017c5e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017c62:	1850      	adds	r0, r2, r1
90017c64:	4770      	bx	lr
90017c66:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017c6a:	e7fa      	b.n	90017c62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90017c6c:	8843      	ldrh	r3, [r0, #2]
90017c6e:	88c0      	ldrh	r0, [r0, #6]
90017c70:	4418      	add	r0, r3
90017c72:	b200      	sxth	r0, r0
90017c74:	1a80      	subs	r0, r0, r2
90017c76:	3801      	subs	r0, #1
90017c78:	4770      	bx	lr
90017c7a:	8843      	ldrh	r3, [r0, #2]
90017c7c:	88c0      	ldrh	r0, [r0, #6]
90017c7e:	4418      	add	r0, r3
90017c80:	b200      	sxth	r0, r0
90017c82:	1a40      	subs	r0, r0, r1
90017c84:	e7f7      	b.n	90017c76 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90017c86:	2000      	movs	r0, #0
90017c88:	4770      	bx	lr
	...

90017c8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90017c8c:	4b01      	ldr	r3, [pc, #4]	; (90017c94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90017c8e:	2200      	movs	r2, #0
90017c90:	601a      	str	r2, [r3, #0]
90017c92:	4770      	bx	lr
90017c94:	240281fc 	.word	0x240281fc

90017c98 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90017c98:	4603      	mov	r3, r0
90017c9a:	b1c8      	cbz	r0, 90017cd0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90017c9c:	0c02      	lsrs	r2, r0, #16
90017c9e:	0412      	lsls	r2, r2, #16
90017ca0:	b9a2      	cbnz	r2, 90017ccc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90017ca2:	0403      	lsls	r3, r0, #16
90017ca4:	2010      	movs	r0, #16
90017ca6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90017caa:	bf04      	itt	eq
90017cac:	021b      	lsleq	r3, r3, #8
90017cae:	3008      	addeq	r0, #8
90017cb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90017cb4:	bf04      	itt	eq
90017cb6:	011b      	lsleq	r3, r3, #4
90017cb8:	3004      	addeq	r0, #4
90017cba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90017cbe:	bf04      	itt	eq
90017cc0:	009b      	lsleq	r3, r3, #2
90017cc2:	3002      	addeq	r0, #2
90017cc4:	2b00      	cmp	r3, #0
90017cc6:	db04      	blt.n	90017cd2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90017cc8:	3001      	adds	r0, #1
90017cca:	4770      	bx	lr
90017ccc:	2000      	movs	r0, #0
90017cce:	e7ea      	b.n	90017ca6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90017cd0:	2020      	movs	r0, #32
90017cd2:	4770      	bx	lr

90017cd4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90017cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017cd8:	b087      	sub	sp, #28
90017cda:	4681      	mov	r9, r0
90017cdc:	4698      	mov	r8, r3
90017cde:	4610      	mov	r0, r2
90017ce0:	460d      	mov	r5, r1
90017ce2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90017ce6:	b981      	cbnz	r1, 90017d0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90017ce8:	b14b      	cbz	r3, 90017cfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90017cea:	460b      	mov	r3, r1
90017cec:	464a      	mov	r2, r9
90017cee:	4641      	mov	r1, r8
90017cf0:	e9cd 4700 	strd	r4, r7, [sp]
90017cf4:	f7ff ffee 	bl	90017cd4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017cf8:	b007      	add	sp, #28
90017cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017cfe:	f04f 33ff 	mov.w	r3, #4294967295
90017d02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90017d06:	603b      	str	r3, [r7, #0]
90017d08:	e7f6      	b.n	90017cf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017d0a:	fa32 fa01 	lsrs.w	sl, r2, r1
90017d0e:	d107      	bne.n	90017d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90017d10:	fb09 f602 	mul.w	r6, r9, r2
90017d14:	fbb6 f0f4 	udiv	r0, r6, r4
90017d18:	fb04 6610 	mls	r6, r4, r0, r6
90017d1c:	603e      	str	r6, [r7, #0]
90017d1e:	e7eb      	b.n	90017cf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017d20:	2601      	movs	r6, #1
90017d22:	fa09 fb01 	lsl.w	fp, r9, r1
90017d26:	408e      	lsls	r6, r1
90017d28:	fbbb f3f4 	udiv	r3, fp, r4
90017d2c:	3e01      	subs	r6, #1
90017d2e:	9302      	str	r3, [sp, #8]
90017d30:	fb0a f303 	mul.w	r3, sl, r3
90017d34:	4016      	ands	r6, r2
90017d36:	9303      	str	r3, [sp, #12]
90017d38:	4630      	mov	r0, r6
90017d3a:	f7ff ffad 	bl	90017c98 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017d3e:	464a      	mov	r2, r9
90017d40:	460b      	mov	r3, r1
90017d42:	4601      	mov	r1, r0
90017d44:	4630      	mov	r0, r6
90017d46:	e9cd 4700 	strd	r4, r7, [sp]
90017d4a:	f7ff ffc3 	bl	90017cd4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d4e:	9b02      	ldr	r3, [sp, #8]
90017d50:	4606      	mov	r6, r0
90017d52:	eb05 0108 	add.w	r1, r5, r8
90017d56:	fb04 bb13 	mls	fp, r4, r3, fp
90017d5a:	4658      	mov	r0, fp
90017d5c:	f7ff ff9c 	bl	90017c98 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017d60:	ab05      	add	r3, sp, #20
90017d62:	465a      	mov	r2, fp
90017d64:	e9cd 4300 	strd	r4, r3, [sp]
90017d68:	4603      	mov	r3, r0
90017d6a:	4650      	mov	r0, sl
90017d6c:	f7ff ffb2 	bl	90017cd4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d70:	6839      	ldr	r1, [r7, #0]
90017d72:	9a05      	ldr	r2, [sp, #20]
90017d74:	9b03      	ldr	r3, [sp, #12]
90017d76:	4411      	add	r1, r2
90017d78:	fbb1 f2f4 	udiv	r2, r1, r4
90017d7c:	18d3      	adds	r3, r2, r3
90017d7e:	fb04 1412 	mls	r4, r4, r2, r1
90017d82:	441e      	add	r6, r3
90017d84:	603c      	str	r4, [r7, #0]
90017d86:	4430      	add	r0, r6
90017d88:	e7b6      	b.n	90017cf8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90017d8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90017d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90017d8e:	b085      	sub	sp, #20
90017d90:	f1b0 0900 	subs.w	r9, r0, #0
90017d94:	461d      	mov	r5, r3
90017d96:	4617      	mov	r7, r2
90017d98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90017d9a:	bfbb      	ittet	lt
90017d9c:	f1c9 0900 	rsblt	r9, r9, #0
90017da0:	f04f 36ff 	movlt.w	r6, #4294967295
90017da4:	2601      	movge	r6, #1
90017da6:	6823      	ldrlt	r3, [r4, #0]
90017da8:	bfbc      	itt	lt
90017daa:	425b      	neglt	r3, r3
90017dac:	6023      	strlt	r3, [r4, #0]
90017dae:	2a00      	cmp	r2, #0
90017db0:	da04      	bge.n	90017dbc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90017db2:	6823      	ldr	r3, [r4, #0]
90017db4:	4257      	negs	r7, r2
90017db6:	4276      	negs	r6, r6
90017db8:	425b      	negs	r3, r3
90017dba:	6023      	str	r3, [r4, #0]
90017dbc:	2d00      	cmp	r5, #0
90017dbe:	4638      	mov	r0, r7
90017dc0:	bfba      	itte	lt
90017dc2:	426d      	neglt	r5, r5
90017dc4:	f04f 38ff 	movlt.w	r8, #4294967295
90017dc8:	f04f 0801 	movge.w	r8, #1
90017dcc:	f7ff ff64 	bl	90017c98 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017dd0:	ab03      	add	r3, sp, #12
90017dd2:	463a      	mov	r2, r7
90017dd4:	e9cd 5300 	strd	r5, r3, [sp]
90017dd8:	4603      	mov	r3, r0
90017dda:	4648      	mov	r0, r9
90017ddc:	f7ff ff7a 	bl	90017cd4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017de0:	6823      	ldr	r3, [r4, #0]
90017de2:	9a03      	ldr	r2, [sp, #12]
90017de4:	4546      	cmp	r6, r8
90017de6:	441a      	add	r2, r3
90017de8:	fb92 f3f5 	sdiv	r3, r2, r5
90017dec:	4418      	add	r0, r3
90017dee:	fb05 2313 	mls	r3, r5, r3, r2
90017df2:	bf18      	it	ne
90017df4:	4240      	negne	r0, r0
90017df6:	1c72      	adds	r2, r6, #1
90017df8:	6023      	str	r3, [r4, #0]
90017dfa:	d105      	bne.n	90017e08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90017dfc:	2b00      	cmp	r3, #0
90017dfe:	f1c3 0200 	rsb	r2, r3, #0
90017e02:	db0b      	blt.n	90017e1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90017e04:	6022      	str	r2, [r4, #0]
90017e06:	e006      	b.n	90017e16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e08:	2e01      	cmp	r6, #1
90017e0a:	d104      	bne.n	90017e16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e0c:	2b00      	cmp	r3, #0
90017e0e:	da02      	bge.n	90017e16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e10:	442b      	add	r3, r5
90017e12:	3801      	subs	r0, #1
90017e14:	6023      	str	r3, [r4, #0]
90017e16:	b005      	add	sp, #20
90017e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90017e1c:	3801      	subs	r0, #1
90017e1e:	1b52      	subs	r2, r2, r5
90017e20:	e7f0      	b.n	90017e04 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90017e24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90017e24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90017e28:	4c1c      	ldr	r4, [pc, #112]	; (90017e9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90017e2a:	4605      	mov	r5, r0
90017e2c:	6807      	ldr	r7, [r0, #0]
90017e2e:	69a3      	ldr	r3, [r4, #24]
90017e30:	b92b      	cbnz	r3, 90017e3e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90017e32:	6840      	ldr	r0, [r0, #4]
90017e34:	e9c5 7000 	strd	r7, r0, [r5]
90017e38:	b004      	add	sp, #16
90017e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90017e3e:	f04f 0802 	mov.w	r8, #2
90017e42:	68a2      	ldr	r2, [r4, #8]
90017e44:	ae04      	add	r6, sp, #16
90017e46:	6820      	ldr	r0, [r4, #0]
90017e48:	fb93 f1f8 	sdiv	r1, r3, r8
90017e4c:	440a      	add	r2, r1
90017e4e:	69e1      	ldr	r1, [r4, #28]
90017e50:	f846 2d04 	str.w	r2, [r6, #-4]!
90017e54:	463a      	mov	r2, r7
90017e56:	9600      	str	r6, [sp, #0]
90017e58:	f7ff ff97 	bl	90017d8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e5c:	69a3      	ldr	r3, [r4, #24]
90017e5e:	4607      	mov	r7, r0
90017e60:	686a      	ldr	r2, [r5, #4]
90017e62:	6a21      	ldr	r1, [r4, #32]
90017e64:	9600      	str	r6, [sp, #0]
90017e66:	6860      	ldr	r0, [r4, #4]
90017e68:	f7ff ff8f 	bl	90017d8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e6c:	69a3      	ldr	r3, [r4, #24]
90017e6e:	6962      	ldr	r2, [r4, #20]
90017e70:	4407      	add	r7, r0
90017e72:	6a61      	ldr	r1, [r4, #36]	; 0x24
90017e74:	9600      	str	r6, [sp, #0]
90017e76:	68e0      	ldr	r0, [r4, #12]
90017e78:	fb93 f8f8 	sdiv	r8, r3, r8
90017e7c:	4442      	add	r2, r8
90017e7e:	9203      	str	r2, [sp, #12]
90017e80:	682a      	ldr	r2, [r5, #0]
90017e82:	f7ff ff82 	bl	90017d8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e86:	4680      	mov	r8, r0
90017e88:	9600      	str	r6, [sp, #0]
90017e8a:	69a3      	ldr	r3, [r4, #24]
90017e8c:	686a      	ldr	r2, [r5, #4]
90017e8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90017e90:	6920      	ldr	r0, [r4, #16]
90017e92:	f7ff ff7a 	bl	90017d8a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e96:	4440      	add	r0, r8
90017e98:	e7cc      	b.n	90017e34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90017e9a:	bf00      	nop
90017e9c:	24028200 	.word	0x24028200

90017ea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90017ea0:	4b07      	ldr	r3, [pc, #28]	; (90017ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90017ea2:	781b      	ldrb	r3, [r3, #0]
90017ea4:	2b01      	cmp	r3, #1
90017ea6:	d109      	bne.n	90017ebc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90017ea8:	f9b1 3000 	ldrsh.w	r3, [r1]
90017eac:	f9b0 2000 	ldrsh.w	r2, [r0]
90017eb0:	8003      	strh	r3, [r0, #0]
90017eb2:	4b04      	ldr	r3, [pc, #16]	; (90017ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90017eb4:	881b      	ldrh	r3, [r3, #0]
90017eb6:	3b01      	subs	r3, #1
90017eb8:	1a9b      	subs	r3, r3, r2
90017eba:	800b      	strh	r3, [r1, #0]
90017ebc:	4770      	bx	lr
90017ebe:	bf00      	nop
90017ec0:	240281e4 	.word	0x240281e4
90017ec4:	240281e0 	.word	0x240281e0

90017ec8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90017ec8:	4b07      	ldr	r3, [pc, #28]	; (90017ee8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90017eca:	b510      	push	{r4, lr}
90017ecc:	781b      	ldrb	r3, [r3, #0]
90017ece:	2b01      	cmp	r3, #1
90017ed0:	d108      	bne.n	90017ee4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90017ed2:	4b06      	ldr	r3, [pc, #24]	; (90017eec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90017ed4:	880c      	ldrh	r4, [r1, #0]
90017ed6:	881b      	ldrh	r3, [r3, #0]
90017ed8:	f9b0 2000 	ldrsh.w	r2, [r0]
90017edc:	3b01      	subs	r3, #1
90017ede:	1b1b      	subs	r3, r3, r4
90017ee0:	8003      	strh	r3, [r0, #0]
90017ee2:	800a      	strh	r2, [r1, #0]
90017ee4:	bd10      	pop	{r4, pc}
90017ee6:	bf00      	nop
90017ee8:	240281e4 	.word	0x240281e4
90017eec:	240281e0 	.word	0x240281e0

90017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90017ef0:	4b0a      	ldr	r3, [pc, #40]	; (90017f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90017ef2:	b510      	push	{r4, lr}
90017ef4:	781b      	ldrb	r3, [r3, #0]
90017ef6:	2b01      	cmp	r3, #1
90017ef8:	d10e      	bne.n	90017f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90017efa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90017efe:	8843      	ldrh	r3, [r0, #2]
90017f00:	f9b0 4000 	ldrsh.w	r4, [r0]
90017f04:	18ca      	adds	r2, r1, r3
90017f06:	4b06      	ldr	r3, [pc, #24]	; (90017f20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90017f08:	8044      	strh	r4, [r0, #2]
90017f0a:	881b      	ldrh	r3, [r3, #0]
90017f0c:	1a9b      	subs	r3, r3, r2
90017f0e:	8003      	strh	r3, [r0, #0]
90017f10:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017f14:	8081      	strh	r1, [r0, #4]
90017f16:	80c3      	strh	r3, [r0, #6]
90017f18:	bd10      	pop	{r4, pc}
90017f1a:	bf00      	nop
90017f1c:	240281e4 	.word	0x240281e4
90017f20:	240281e0 	.word	0x240281e0

90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90017f24:	4b08      	ldr	r3, [pc, #32]	; (90017f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90017f26:	781b      	ldrb	r3, [r3, #0]
90017f28:	2b01      	cmp	r3, #1
90017f2a:	d10c      	bne.n	90017f46 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90017f2c:	8803      	ldrh	r3, [r0, #0]
90017f2e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90017f32:	8842      	ldrh	r2, [r0, #2]
90017f34:	8002      	strh	r2, [r0, #0]
90017f36:	185a      	adds	r2, r3, r1
90017f38:	4b04      	ldr	r3, [pc, #16]	; (90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90017f3a:	881b      	ldrh	r3, [r3, #0]
90017f3c:	1a9b      	subs	r3, r3, r2
90017f3e:	8043      	strh	r3, [r0, #2]
90017f40:	88c3      	ldrh	r3, [r0, #6]
90017f42:	80c1      	strh	r1, [r0, #6]
90017f44:	8083      	strh	r3, [r0, #4]
90017f46:	4770      	bx	lr
90017f48:	240281e4 	.word	0x240281e4
90017f4c:	240281e0 	.word	0x240281e0

90017f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90017f50:	4b07      	ldr	r3, [pc, #28]	; (90017f70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90017f52:	b510      	push	{r4, lr}
90017f54:	781b      	ldrb	r3, [r3, #0]
90017f56:	2b01      	cmp	r3, #1
90017f58:	d108      	bne.n	90017f6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90017f5a:	f9b1 3000 	ldrsh.w	r3, [r1]
90017f5e:	f9b0 4000 	ldrsh.w	r4, [r0]
90017f62:	8003      	strh	r3, [r0, #0]
90017f64:	8893      	ldrh	r3, [r2, #4]
90017f66:	3b01      	subs	r3, #1
90017f68:	1b1b      	subs	r3, r3, r4
90017f6a:	800b      	strh	r3, [r1, #0]
90017f6c:	bd10      	pop	{r4, pc}
90017f6e:	bf00      	nop
90017f70:	240281e4 	.word	0x240281e4

90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90017f74:	4b0a      	ldr	r3, [pc, #40]	; (90017fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90017f76:	460a      	mov	r2, r1
90017f78:	b510      	push	{r4, lr}
90017f7a:	781b      	ldrb	r3, [r3, #0]
90017f7c:	2b01      	cmp	r3, #1
90017f7e:	d10d      	bne.n	90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90017f80:	8881      	ldrh	r1, [r0, #4]
90017f82:	8803      	ldrh	r3, [r0, #0]
90017f84:	440b      	add	r3, r1
90017f86:	4601      	mov	r1, r0
90017f88:	3b01      	subs	r3, #1
90017f8a:	f821 3b02 	strh.w	r3, [r1], #2
90017f8e:	f7ff ffdf 	bl	90017f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90017f92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017f96:	88c2      	ldrh	r2, [r0, #6]
90017f98:	80c3      	strh	r3, [r0, #6]
90017f9a:	8082      	strh	r2, [r0, #4]
90017f9c:	bd10      	pop	{r4, pc}
90017f9e:	bf00      	nop
90017fa0:	240281e4 	.word	0x240281e4

90017fa4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90017fa4:	4770      	bx	lr
	...

90017fa8 <_ZN8touchgfx11Application13requestRedrawEv>:
90017fa8:	4b06      	ldr	r3, [pc, #24]	; (90017fc4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90017faa:	2100      	movs	r1, #0
90017fac:	f9b3 2000 	ldrsh.w	r2, [r3]
90017fb0:	4b05      	ldr	r3, [pc, #20]	; (90017fc8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90017fb2:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90017fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
90017fba:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90017fbe:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90017fc2:	4770      	bx	lr
90017fc4:	240281e0 	.word	0x240281e0
90017fc8:	240281e2 	.word	0x240281e2

90017fcc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90017fcc:	4b03      	ldr	r3, [pc, #12]	; (90017fdc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90017fce:	6818      	ldr	r0, [r3, #0]
90017fd0:	b110      	cbz	r0, 90017fd8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90017fd2:	6803      	ldr	r3, [r0, #0]
90017fd4:	699b      	ldr	r3, [r3, #24]
90017fd6:	4718      	bx	r3
90017fd8:	4770      	bx	lr
90017fda:	bf00      	nop
90017fdc:	24028230 	.word	0x24028230

90017fe0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90017fe0:	4770      	bx	lr
	...

90017fe4 <_ZN8touchgfx11Application4drawEv>:
90017fe4:	4b09      	ldr	r3, [pc, #36]	; (9001800c <_ZN8touchgfx11Application4drawEv+0x28>)
90017fe6:	b507      	push	{r0, r1, r2, lr}
90017fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
90017fec:	2100      	movs	r1, #0
90017fee:	4b08      	ldr	r3, [pc, #32]	; (90018010 <_ZN8touchgfx11Application4drawEv+0x2c>)
90017ff0:	9100      	str	r1, [sp, #0]
90017ff2:	4669      	mov	r1, sp
90017ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
90017ff8:	f8ad 2004 	strh.w	r2, [sp, #4]
90017ffc:	f8ad 3006 	strh.w	r3, [sp, #6]
90018000:	6803      	ldr	r3, [r0, #0]
90018002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018004:	4798      	blx	r3
90018006:	b003      	add	sp, #12
90018008:	f85d fb04 	ldr.w	pc, [sp], #4
9001800c:	240281e0 	.word	0x240281e0
90018010:	240281e2 	.word	0x240281e2

90018014 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90018014:	4b03      	ldr	r3, [pc, #12]	; (90018024 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90018016:	6818      	ldr	r0, [r3, #0]
90018018:	b110      	cbz	r0, 90018020 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
9001801a:	6803      	ldr	r3, [r0, #0]
9001801c:	69db      	ldr	r3, [r3, #28]
9001801e:	4718      	bx	r3
90018020:	4770      	bx	lr
90018022:	bf00      	nop
90018024:	24028230 	.word	0x24028230

90018028 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90018028:	4b03      	ldr	r3, [pc, #12]	; (90018038 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
9001802a:	6818      	ldr	r0, [r3, #0]
9001802c:	b110      	cbz	r0, 90018034 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
9001802e:	6803      	ldr	r3, [r0, #0]
90018030:	6a1b      	ldr	r3, [r3, #32]
90018032:	4718      	bx	r3
90018034:	4770      	bx	lr
90018036:	bf00      	nop
90018038:	24028230 	.word	0x24028230

9001803c <_ZN8touchgfx11Application16clearCachedAreasEv>:
9001803c:	2300      	movs	r3, #0
9001803e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90018042:	4770      	bx	lr

90018044 <_ZN8touchgfx11Application14handleKeyEventEh>:
90018044:	4b03      	ldr	r3, [pc, #12]	; (90018054 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90018046:	6818      	ldr	r0, [r3, #0]
90018048:	b110      	cbz	r0, 90018050 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
9001804a:	6803      	ldr	r3, [r0, #0]
9001804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001804e:	4718      	bx	r3
90018050:	4770      	bx	lr
90018052:	bf00      	nop
90018054:	24028230 	.word	0x24028230

90018058 <_ZN8touchgfx11ApplicationD1Ev>:
90018058:	4770      	bx	lr

9001805a <_ZN8touchgfx11ApplicationD0Ev>:
9001805a:	b510      	push	{r4, lr}
9001805c:	4604      	mov	r4, r0
9001805e:	f44f 719e 	mov.w	r1, #316	; 0x13c
90018062:	f00f fb18 	bl	90027696 <_ZdlPvj>
90018066:	4620      	mov	r0, r4
90018068:	bd10      	pop	{r4, pc}

9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>:
9001806a:	b510      	push	{r4, lr}
9001806c:	f9b1 4000 	ldrsh.w	r4, [r1]
90018070:	888a      	ldrh	r2, [r1, #4]
90018072:	f9b0 3000 	ldrsh.w	r3, [r0]
90018076:	4422      	add	r2, r4
90018078:	b212      	sxth	r2, r2
9001807a:	4293      	cmp	r3, r2
9001807c:	da15      	bge.n	900180aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001807e:	8882      	ldrh	r2, [r0, #4]
90018080:	4413      	add	r3, r2
90018082:	b21b      	sxth	r3, r3
90018084:	429c      	cmp	r4, r3
90018086:	da10      	bge.n	900180aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90018088:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
9001808c:	88c9      	ldrh	r1, [r1, #6]
9001808e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90018092:	4419      	add	r1, r3
90018094:	b209      	sxth	r1, r1
90018096:	428a      	cmp	r2, r1
90018098:	da07      	bge.n	900180aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
9001809a:	88c0      	ldrh	r0, [r0, #6]
9001809c:	4410      	add	r0, r2
9001809e:	b200      	sxth	r0, r0
900180a0:	4283      	cmp	r3, r0
900180a2:	bfac      	ite	ge
900180a4:	2000      	movge	r0, #0
900180a6:	2001      	movlt	r0, #1
900180a8:	bd10      	pop	{r4, pc}
900180aa:	2000      	movs	r0, #0
900180ac:	e7fc      	b.n	900180a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

900180ae <_ZN8touchgfx4Rect10restrictToEss>:
900180ae:	f9b0 3000 	ldrsh.w	r3, [r0]
900180b2:	2b00      	cmp	r3, #0
900180b4:	b510      	push	{r4, lr}
900180b6:	da04      	bge.n	900180c2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
900180b8:	8884      	ldrh	r4, [r0, #4]
900180ba:	4423      	add	r3, r4
900180bc:	8083      	strh	r3, [r0, #4]
900180be:	2300      	movs	r3, #0
900180c0:	8003      	strh	r3, [r0, #0]
900180c2:	f9b0 4000 	ldrsh.w	r4, [r0]
900180c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900180ca:	1b09      	subs	r1, r1, r4
900180cc:	428b      	cmp	r3, r1
900180ce:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
900180d2:	bfc8      	it	gt
900180d4:	8081      	strhgt	r1, [r0, #4]
900180d6:	2b00      	cmp	r3, #0
900180d8:	da04      	bge.n	900180e4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
900180da:	88c1      	ldrh	r1, [r0, #6]
900180dc:	440b      	add	r3, r1
900180de:	80c3      	strh	r3, [r0, #6]
900180e0:	2300      	movs	r3, #0
900180e2:	8043      	strh	r3, [r0, #2]
900180e4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900180e8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
900180ec:	1a52      	subs	r2, r2, r1
900180ee:	4293      	cmp	r3, r2
900180f0:	bfc8      	it	gt
900180f2:	80c2      	strhgt	r2, [r0, #6]
900180f4:	bd10      	pop	{r4, pc}
	...

900180f8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
900180f8:	4b10      	ldr	r3, [pc, #64]	; (9001813c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
900180fa:	b510      	push	{r4, lr}
900180fc:	460c      	mov	r4, r1
900180fe:	f9b3 2000 	ldrsh.w	r2, [r3]
90018102:	4b0f      	ldr	r3, [pc, #60]	; (90018140 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90018104:	4620      	mov	r0, r4
90018106:	f9b3 1000 	ldrsh.w	r1, [r3]
9001810a:	f7ff ffd0 	bl	900180ae <_ZN8touchgfx4Rect10restrictToEss>
9001810e:	4b0d      	ldr	r3, [pc, #52]	; (90018144 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90018110:	6818      	ldr	r0, [r3, #0]
90018112:	b190      	cbz	r0, 9001813a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90018114:	6803      	ldr	r3, [r0, #0]
90018116:	4621      	mov	r1, r4
90018118:	689b      	ldr	r3, [r3, #8]
9001811a:	4798      	blx	r3
9001811c:	4b0a      	ldr	r3, [pc, #40]	; (90018148 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
9001811e:	6818      	ldr	r0, [r3, #0]
90018120:	b118      	cbz	r0, 9001812a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90018122:	6803      	ldr	r3, [r0, #0]
90018124:	4621      	mov	r1, r4
90018126:	689b      	ldr	r3, [r3, #8]
90018128:	4798      	blx	r3
9001812a:	4b08      	ldr	r3, [pc, #32]	; (9001814c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
9001812c:	4621      	mov	r1, r4
9001812e:	6818      	ldr	r0, [r3, #0]
90018130:	6803      	ldr	r3, [r0, #0]
90018132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90018136:	69db      	ldr	r3, [r3, #28]
90018138:	4718      	bx	r3
9001813a:	bd10      	pop	{r4, pc}
9001813c:	240281e2 	.word	0x240281e2
90018140:	240281e0 	.word	0x240281e0
90018144:	24028230 	.word	0x24028230
90018148:	2402822c 	.word	0x2402822c
9001814c:	240281ec 	.word	0x240281ec

90018150 <_ZNK8touchgfx4Rect8includesERKS0_>:
90018150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90018152:	4606      	mov	r6, r0
90018154:	4608      	mov	r0, r1
90018156:	460f      	mov	r7, r1
90018158:	f7fa febf 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001815c:	b9e8      	cbnz	r0, 9001819a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001815e:	f9b7 5000 	ldrsh.w	r5, [r7]
90018162:	f9b6 4000 	ldrsh.w	r4, [r6]
90018166:	42a5      	cmp	r5, r4
90018168:	db17      	blt.n	9001819a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
9001816a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
9001816e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90018172:	429a      	cmp	r2, r3
90018174:	db11      	blt.n	9001819a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90018176:	88b9      	ldrh	r1, [r7, #4]
90018178:	440d      	add	r5, r1
9001817a:	88b1      	ldrh	r1, [r6, #4]
9001817c:	440c      	add	r4, r1
9001817e:	b22d      	sxth	r5, r5
90018180:	b224      	sxth	r4, r4
90018182:	42a5      	cmp	r5, r4
90018184:	dc09      	bgt.n	9001819a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90018186:	88f8      	ldrh	r0, [r7, #6]
90018188:	4410      	add	r0, r2
9001818a:	88f2      	ldrh	r2, [r6, #6]
9001818c:	4413      	add	r3, r2
9001818e:	b200      	sxth	r0, r0
90018190:	b21b      	sxth	r3, r3
90018192:	4298      	cmp	r0, r3
90018194:	bfcc      	ite	gt
90018196:	2000      	movgt	r0, #0
90018198:	2001      	movle	r0, #1
9001819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9001819c <_ZN8touchgfx11Application11getInstanceEv>:
9001819c:	4b01      	ldr	r3, [pc, #4]	; (900181a4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
9001819e:	6818      	ldr	r0, [r3, #0]
900181a0:	4770      	bx	lr
900181a2:	bf00      	nop
900181a4:	24028240 	.word	0x24028240

900181a8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
900181a8:	2300      	movs	r3, #0
900181aa:	b510      	push	{r4, lr}
900181ac:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
900181b0:	4604      	mov	r4, r0
900181b2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900181b6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900181ba:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900181be:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
900181c2:	429a      	cmp	r2, r3
900181c4:	d90e      	bls.n	900181e4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
900181c6:	18e2      	adds	r2, r4, r3
900181c8:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
900181cc:	b122      	cbz	r2, 900181d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
900181ce:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900181d2:	6803      	ldr	r3, [r0, #0]
900181d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900181d6:	4798      	blx	r3
900181d8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900181dc:	3301      	adds	r3, #1
900181de:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900181e2:	e7ea      	b.n	900181ba <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
900181e4:	bd10      	pop	{r4, pc}

900181e6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
900181e6:	b530      	push	{r4, r5, lr}
900181e8:	2200      	movs	r2, #0
900181ea:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
900181ee:	b293      	uxth	r3, r2
900181f0:	429d      	cmp	r5, r3
900181f2:	d90e      	bls.n	90018212 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
900181f4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
900181f8:	428b      	cmp	r3, r1
900181fa:	d10b      	bne.n	90018214 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
900181fc:	1884      	adds	r4, r0, r2
900181fe:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
90018202:	b13b      	cbz	r3, 90018214 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
90018204:	3b01      	subs	r3, #1
90018206:	b2db      	uxtb	r3, r3
90018208:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
9001820c:	b90b      	cbnz	r3, 90018212 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
9001820e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
90018212:	bd30      	pop	{r4, r5, pc}
90018214:	3201      	adds	r2, #1
90018216:	e7ea      	b.n	900181ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
90018218:	2300      	movs	r3, #0
9001821a:	f100 0284 	add.w	r2, r0, #132	; 0x84
9001821e:	30a4      	adds	r0, #164	; 0xa4
90018220:	f820 3c24 	strh.w	r3, [r0, #-36]
90018224:	f802 3b01 	strb.w	r3, [r2], #1
90018228:	4282      	cmp	r2, r0
9001822a:	d1fb      	bne.n	90018224 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
9001822c:	4770      	bx	lr
	...

90018230 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90018230:	b570      	push	{r4, r5, r6, lr}
90018232:	4c0b      	ldr	r4, [pc, #44]	; (90018260 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90018234:	4605      	mov	r5, r0
90018236:	460e      	mov	r6, r1
90018238:	6820      	ldr	r0, [r4, #0]
9001823a:	b110      	cbz	r0, 90018242 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
9001823c:	6803      	ldr	r3, [r0, #0]
9001823e:	695b      	ldr	r3, [r3, #20]
90018240:	4798      	blx	r3
90018242:	1d28      	adds	r0, r5, #4
90018244:	f7ff ffe8 	bl	90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90018248:	6026      	str	r6, [r4, #0]
9001824a:	6833      	ldr	r3, [r6, #0]
9001824c:	4630      	mov	r0, r6
9001824e:	68db      	ldr	r3, [r3, #12]
90018250:	4798      	blx	r3
90018252:	682b      	ldr	r3, [r5, #0]
90018254:	4628      	mov	r0, r5
90018256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90018258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001825c:	4718      	bx	r3
9001825e:	bf00      	nop
90018260:	24028230 	.word	0x24028230

90018264 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90018264:	2300      	movs	r3, #0
90018266:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
9001826a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
9001826e:	461a      	mov	r2, r3
90018270:	b5f0      	push	{r4, r5, r6, r7, lr}
90018272:	461c      	mov	r4, r3
90018274:	461d      	mov	r5, r3
90018276:	459c      	cmp	ip, r3
90018278:	dd1a      	ble.n	900182b0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
9001827a:	18c6      	adds	r6, r0, r3
9001827c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90018280:	b16e      	cbz	r6, 9001829e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90018282:	429a      	cmp	r2, r3
90018284:	d008      	beq.n	90018298 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90018286:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
9001828a:	fa1f fe82 	uxth.w	lr, r2
9001828e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90018292:	1887      	adds	r7, r0, r2
90018294:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90018298:	3201      	adds	r2, #1
9001829a:	3301      	adds	r3, #1
9001829c:	e7eb      	b.n	90018276 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
9001829e:	4299      	cmp	r1, r3
900182a0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
900182a4:	bfa8      	it	ge
900182a6:	3501      	addge	r5, #1
900182a8:	429e      	cmp	r6, r3
900182aa:	bfc8      	it	gt
900182ac:	3401      	addgt	r4, #1
900182ae:	e7f4      	b.n	9001829a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
900182b0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
900182b4:	1b49      	subs	r1, r1, r5
900182b6:	1b1b      	subs	r3, r3, r4
900182b8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
900182bc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900182c0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900182c4:	4293      	cmp	r3, r2
900182c6:	dd03      	ble.n	900182d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
900182c8:	3b01      	subs	r3, #1
900182ca:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
900182ce:	e7f7      	b.n	900182c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
900182d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

900182d4 <_ZN8touchgfx11Application15handleTickEventEv>:
900182d4:	b570      	push	{r4, r5, r6, lr}
900182d6:	4d16      	ldr	r5, [pc, #88]	; (90018330 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
900182d8:	4604      	mov	r4, r0
900182da:	6828      	ldr	r0, [r5, #0]
900182dc:	b140      	cbz	r0, 900182f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900182de:	7a03      	ldrb	r3, [r0, #8]
900182e0:	b933      	cbnz	r3, 900182f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900182e2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
900182e6:	6803      	ldr	r3, [r0, #0]
900182e8:	689b      	ldr	r3, [r3, #8]
900182ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900182ee:	4718      	bx	r3
900182f0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
900182f4:	4e0f      	ldr	r6, [pc, #60]	; (90018334 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
900182f6:	b973      	cbnz	r3, 90018316 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900182f8:	b168      	cbz	r0, 90018316 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900182fa:	7a03      	ldrb	r3, [r0, #8]
900182fc:	b15b      	cbz	r3, 90018316 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900182fe:	6830      	ldr	r0, [r6, #0]
90018300:	b110      	cbz	r0, 90018308 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90018302:	6803      	ldr	r3, [r0, #0]
90018304:	691b      	ldr	r3, [r3, #16]
90018306:	4798      	blx	r3
90018308:	6828      	ldr	r0, [r5, #0]
9001830a:	6803      	ldr	r3, [r0, #0]
9001830c:	68db      	ldr	r3, [r3, #12]
9001830e:	4798      	blx	r3
90018310:	2301      	movs	r3, #1
90018312:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90018316:	3404      	adds	r4, #4
90018318:	4620      	mov	r0, r4
9001831a:	f7ff ff45 	bl	900181a8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
9001831e:	4620      	mov	r0, r4
90018320:	f7ff ffa0 	bl	90018264 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90018324:	6830      	ldr	r0, [r6, #0]
90018326:	b110      	cbz	r0, 9001832e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90018328:	6803      	ldr	r3, [r0, #0]
9001832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001832c:	e7dd      	b.n	900182ea <_ZN8touchgfx11Application15handleTickEventEv+0x16>
9001832e:	bd70      	pop	{r4, r5, r6, pc}
90018330:	24028234 	.word	0x24028234
90018334:	24028230 	.word	0x24028230

90018338 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
90018338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001833a:	2300      	movs	r3, #0
9001833c:	4604      	mov	r4, r0
9001833e:	460d      	mov	r5, r1
90018340:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
90018344:	4618      	mov	r0, r3
90018346:	b29a      	uxth	r2, r3
90018348:	4291      	cmp	r1, r2
9001834a:	d912      	bls.n	90018372 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
9001834c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
90018350:	18e6      	adds	r6, r4, r3
90018352:	42af      	cmp	r7, r5
90018354:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
90018358:	d105      	bne.n	90018366 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
9001835a:	2aff      	cmp	r2, #255	; 0xff
9001835c:	d002      	beq.n	90018364 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
9001835e:	3201      	adds	r2, #1
90018360:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
90018364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018366:	2a00      	cmp	r2, #0
90018368:	f103 0301 	add.w	r3, r3, #1
9001836c:	bf08      	it	eq
9001836e:	2001      	moveq	r0, #1
90018370:	e7e9      	b.n	90018346 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
90018372:	b120      	cbz	r0, 9001837e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90018374:	2920      	cmp	r1, #32
90018376:	d102      	bne.n	9001837e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
90018378:	4620      	mov	r0, r4
9001837a:	f7ff ff73 	bl	90018264 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
9001837e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
90018382:	2b1f      	cmp	r3, #31
90018384:	d8ee      	bhi.n	90018364 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
90018386:	18e2      	adds	r2, r4, r3
90018388:	2101      	movs	r1, #1
9001838a:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
9001838e:	185a      	adds	r2, r3, r1
90018390:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
90018394:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90018398:	e7e4      	b.n	90018364 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

9001839a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
9001839a:	4603      	mov	r3, r0
9001839c:	f100 0140 	add.w	r1, r0, #64	; 0x40
900183a0:	2200      	movs	r2, #0
900183a2:	801a      	strh	r2, [r3, #0]
900183a4:	3308      	adds	r3, #8
900183a6:	f823 2c06 	strh.w	r2, [r3, #-6]
900183aa:	f823 2c04 	strh.w	r2, [r3, #-4]
900183ae:	f823 2c02 	strh.w	r2, [r3, #-2]
900183b2:	428b      	cmp	r3, r1
900183b4:	d1f5      	bne.n	900183a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
900183b6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
900183ba:	4770      	bx	lr

900183bc <_ZN8touchgfx11ApplicationC1Ev>:
900183bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900183be:	4b1d      	ldr	r3, [pc, #116]	; (90018434 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
900183c0:	4606      	mov	r6, r0
900183c2:	4604      	mov	r4, r0
900183c4:	2500      	movs	r5, #0
900183c6:	f846 3b04 	str.w	r3, [r6], #4
900183ca:	22a8      	movs	r2, #168	; 0xa8
900183cc:	2100      	movs	r1, #0
900183ce:	4630      	mov	r0, r6
900183d0:	f00f fc44 	bl	90027c5c <memset>
900183d4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
900183d8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900183dc:	4f16      	ldr	r7, [pc, #88]	; (90018438 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
900183de:	f7ff ffdc 	bl	9001839a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900183e2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900183e6:	f7ff ffd8 	bl	9001839a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900183ea:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
900183ee:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
900183f2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
900183f6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
900183fa:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
900183fe:	490f      	ldr	r1, [pc, #60]	; (9001843c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90018400:	480f      	ldr	r0, [pc, #60]	; (90018440 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90018402:	f00e fd1d 	bl	90026e40 <CRC_Lock>
90018406:	4b0f      	ldr	r3, [pc, #60]	; (90018444 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90018408:	b158      	cbz	r0, 90018422 <_ZN8touchgfx11ApplicationC1Ev+0x66>
9001840a:	801d      	strh	r5, [r3, #0]
9001840c:	2300      	movs	r3, #0
9001840e:	4a0e      	ldr	r2, [pc, #56]	; (90018448 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90018410:	4630      	mov	r0, r6
90018412:	6013      	str	r3, [r2, #0]
90018414:	4a0d      	ldr	r2, [pc, #52]	; (9001844c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90018416:	603b      	str	r3, [r7, #0]
90018418:	6013      	str	r3, [r2, #0]
9001841a:	f7ff fefd 	bl	90018218 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
9001841e:	4620      	mov	r0, r4
90018420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018422:	f44f 6280 	mov.w	r2, #1024	; 0x400
90018426:	2002      	movs	r0, #2
90018428:	801a      	strh	r2, [r3, #0]
9001842a:	6038      	str	r0, [r7, #0]
9001842c:	f001 faf0 	bl	90019a10 <_ZN8touchgfx6Screen4drawEv>
90018430:	e7ec      	b.n	9001840c <_ZN8touchgfx11ApplicationC1Ev+0x50>
90018432:	bf00      	nop
90018434:	9002c41c 	.word	0x9002c41c
90018438:	24028230 	.word	0x24028230
9001843c:	b5e8b5cd 	.word	0xb5e8b5cd
90018440:	f407a5c2 	.word	0xf407a5c2
90018444:	24000068 	.word	0x24000068
90018448:	24028240 	.word	0x24028240
9001844c:	24028234 	.word	0x24028234

90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90018450:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90018454:	3b01      	subs	r3, #1
90018456:	b29b      	uxth	r3, r3
90018458:	428b      	cmp	r3, r1
9001845a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
9001845e:	b510      	push	{r4, lr}
90018460:	d908      	bls.n	90018474 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90018462:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90018466:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
9001846a:	681a      	ldr	r2, [r3, #0]
9001846c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90018470:	685a      	ldr	r2, [r3, #4]
90018472:	6062      	str	r2, [r4, #4]
90018474:	bd10      	pop	{r4, pc}
	...

90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90018478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001847c:	b08f      	sub	sp, #60	; 0x3c
9001847e:	4b8f      	ldr	r3, [pc, #572]	; (900186bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90018480:	4683      	mov	fp, r0
90018482:	ac0a      	add	r4, sp, #40	; 0x28
90018484:	e884 0006 	stmia.w	r4, {r1, r2}
90018488:	f9b3 2000 	ldrsh.w	r2, [r3]
9001848c:	4620      	mov	r0, r4
9001848e:	4b8c      	ldr	r3, [pc, #560]	; (900186c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90018490:	f9b3 1000 	ldrsh.w	r1, [r3]
90018494:	f7ff fe0b 	bl	900180ae <_ZN8touchgfx4Rect10restrictToEss>
90018498:	4620      	mov	r0, r4
9001849a:	f7fa fd1e 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001849e:	2800      	cmp	r0, #0
900184a0:	d16a      	bne.n	90018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900184a2:	9403      	str	r4, [sp, #12]
900184a4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
900184a8:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900184ac:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
900184b0:	9301      	str	r3, [sp, #4]
900184b2:	35a4      	adds	r5, #164	; 0xa4
900184b4:	b15c      	cbz	r4, 900184ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
900184b6:	4629      	mov	r1, r5
900184b8:	9803      	ldr	r0, [sp, #12]
900184ba:	f7ff fe49 	bl	90018150 <_ZNK8touchgfx4Rect8includesERKS0_>
900184be:	3c01      	subs	r4, #1
900184c0:	b118      	cbz	r0, 900184ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
900184c2:	b2a1      	uxth	r1, r4
900184c4:	9801      	ldr	r0, [sp, #4]
900184c6:	f7ff ffc3 	bl	90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900184ca:	3d08      	subs	r5, #8
900184cc:	e7f2      	b.n	900184b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
900184ce:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
900184d2:	f108 33ff 	add.w	r3, r8, #4294967295
900184d6:	f8cd 8010 	str.w	r8, [sp, #16]
900184da:	9302      	str	r3, [sp, #8]
900184dc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
900184e0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
900184e4:	9306      	str	r3, [sp, #24]
900184e6:	445c      	add	r4, fp
900184e8:	2500      	movs	r5, #0
900184ea:	4626      	mov	r6, r4
900184ec:	f8cd 8014 	str.w	r8, [sp, #20]
900184f0:	462f      	mov	r7, r5
900184f2:	9b05      	ldr	r3, [sp, #20]
900184f4:	2b00      	cmp	r3, #0
900184f6:	d073      	beq.n	900185e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
900184f8:	9903      	ldr	r1, [sp, #12]
900184fa:	4630      	mov	r0, r6
900184fc:	f7ff fdb5 	bl	9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>
90018500:	b350      	cbz	r0, 90018558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90018502:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90018506:	f9b6 c000 	ldrsh.w	ip, [r6]
9001850a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001850e:	45e6      	cmp	lr, ip
90018510:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90018514:	db33      	blt.n	9001857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90018516:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001851a:	88b3      	ldrh	r3, [r6, #4]
9001851c:	4472      	add	r2, lr
9001851e:	4463      	add	r3, ip
90018520:	b212      	sxth	r2, r2
90018522:	b21b      	sxth	r3, r3
90018524:	429a      	cmp	r2, r3
90018526:	dc2a      	bgt.n	9001857e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90018528:	fa1f f289 	uxth.w	r2, r9
9001852c:	88f3      	ldrh	r3, [r6, #6]
9001852e:	45ca      	cmp	sl, r9
90018530:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90018534:	4413      	add	r3, r2
90018536:	fa1f fc8a 	uxth.w	ip, sl
9001853a:	b29b      	uxth	r3, r3
9001853c:	fa0f fe83 	sxth.w	lr, r3
90018540:	db0f      	blt.n	90018562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90018542:	eba3 030c 	sub.w	r3, r3, ip
90018546:	1ac9      	subs	r1, r1, r3
90018548:	b209      	sxth	r1, r1
9001854a:	2900      	cmp	r1, #0
9001854c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018550:	dd12      	ble.n	90018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018552:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90018556:	4605      	mov	r5, r0
90018558:	9b05      	ldr	r3, [sp, #20]
9001855a:	3e08      	subs	r6, #8
9001855c:	3b01      	subs	r3, #1
9001855e:	9305      	str	r3, [sp, #20]
90018560:	e7c7      	b.n	900184f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90018562:	4461      	add	r1, ip
90018564:	b209      	sxth	r1, r1
90018566:	4571      	cmp	r1, lr
90018568:	dc38      	bgt.n	900185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001856a:	eba2 020c 	sub.w	r2, r2, ip
9001856e:	b212      	sxth	r2, r2
90018570:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90018574:	2a00      	cmp	r2, #0
90018576:	dcee      	bgt.n	90018556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90018578:	b00f      	add	sp, #60	; 0x3c
9001857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001857e:	45ca      	cmp	sl, r9
90018580:	db2c      	blt.n	900185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90018582:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90018586:	449a      	add	sl, r3
90018588:	88f3      	ldrh	r3, [r6, #6]
9001858a:	4499      	add	r9, r3
9001858c:	fa0f fa8a 	sxth.w	sl, sl
90018590:	fa0f f989 	sxth.w	r9, r9
90018594:	45ca      	cmp	sl, r9
90018596:	dc21      	bgt.n	900185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90018598:	fa1f f28c 	uxth.w	r2, ip
9001859c:	88b3      	ldrh	r3, [r6, #4]
9001859e:	45e6      	cmp	lr, ip
900185a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
900185a4:	4413      	add	r3, r2
900185a6:	fa1f f98e 	uxth.w	r9, lr
900185aa:	b29b      	uxth	r3, r3
900185ac:	fa0f fa83 	sxth.w	sl, r3
900185b0:	db0a      	blt.n	900185c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
900185b2:	eba3 0309 	sub.w	r3, r3, r9
900185b6:	1ac9      	subs	r1, r1, r3
900185b8:	b209      	sxth	r1, r1
900185ba:	2900      	cmp	r1, #0
900185bc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
900185c0:	ddda      	ble.n	90018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900185c2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
900185c6:	e7c6      	b.n	90018556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900185c8:	4449      	add	r1, r9
900185ca:	b209      	sxth	r1, r1
900185cc:	4551      	cmp	r1, sl
900185ce:	dc05      	bgt.n	900185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900185d0:	eba2 0209 	sub.w	r2, r2, r9
900185d4:	b212      	sxth	r2, r2
900185d6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
900185da:	e7cb      	b.n	90018574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
900185dc:	4607      	mov	r7, r0
900185de:	e7bb      	b.n	90018558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
900185e0:	2d00      	cmp	r5, #0
900185e2:	d181      	bne.n	900184e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
900185e4:	2f00      	cmp	r7, #0
900185e6:	f000 81dd 	beq.w	900189a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900185ea:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
900185ee:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
900185f2:	b2b3      	uxth	r3, r6
900185f4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900185f8:	b2b9      	uxth	r1, r7
900185fa:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
900185fe:	441a      	add	r2, r3
90018600:	448a      	add	sl, r1
90018602:	9105      	str	r1, [sp, #20]
90018604:	b292      	uxth	r2, r2
90018606:	fa1f fa8a 	uxth.w	sl, sl
9001860a:	fa0f f882 	sxth.w	r8, r2
9001860e:	fa0f f98a 	sxth.w	r9, sl
90018612:	e9cd 2307 	strd	r2, r3, [sp, #28]
90018616:	9b04      	ldr	r3, [sp, #16]
90018618:	2b00      	cmp	r3, #0
9001861a:	d053      	beq.n	900186c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
9001861c:	9903      	ldr	r1, [sp, #12]
9001861e:	4620      	mov	r0, r4
90018620:	f7ff fd23 	bl	9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>
90018624:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90018628:	b1c0      	cbz	r0, 9001865c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001862a:	f9b4 e000 	ldrsh.w	lr, [r4]
9001862e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90018632:	4576      	cmp	r6, lr
90018634:	dc23      	bgt.n	9001867e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018636:	f8b4 c004 	ldrh.w	ip, [r4, #4]
9001863a:	44f4      	add	ip, lr
9001863c:	fa0f fc8c 	sxth.w	ip, ip
90018640:	45e0      	cmp	r8, ip
90018642:	db1c      	blt.n	9001867e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90018644:	428f      	cmp	r7, r1
90018646:	fa1f fc81 	uxth.w	ip, r1
9001864a:	88e1      	ldrh	r1, [r4, #6]
9001864c:	dc0d      	bgt.n	9001866a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
9001864e:	ebaa 0c0c 	sub.w	ip, sl, ip
90018652:	f8a4 9002 	strh.w	r9, [r4, #2]
90018656:	eba1 010c 	sub.w	r1, r1, ip
9001865a:	80e1      	strh	r1, [r4, #6]
9001865c:	4628      	mov	r0, r5
9001865e:	9904      	ldr	r1, [sp, #16]
90018660:	3c08      	subs	r4, #8
90018662:	4605      	mov	r5, r0
90018664:	3901      	subs	r1, #1
90018666:	9104      	str	r1, [sp, #16]
90018668:	e7d3      	b.n	90018612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
9001866a:	4461      	add	r1, ip
9001866c:	b209      	sxth	r1, r1
9001866e:	4549      	cmp	r1, r9
90018670:	dcf5      	bgt.n	9001865e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018672:	9905      	ldr	r1, [sp, #20]
90018674:	eba1 0c0c 	sub.w	ip, r1, ip
90018678:	f8a4 c006 	strh.w	ip, [r4, #6]
9001867c:	e7ee      	b.n	9001865c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001867e:	428f      	cmp	r7, r1
90018680:	dced      	bgt.n	9001865e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018682:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90018686:	4461      	add	r1, ip
90018688:	b209      	sxth	r1, r1
9001868a:	4589      	cmp	r9, r1
9001868c:	dbe7      	blt.n	9001865e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001868e:	4576      	cmp	r6, lr
90018690:	fa1f fc8e 	uxth.w	ip, lr
90018694:	88a1      	ldrh	r1, [r4, #4]
90018696:	dc07      	bgt.n	900186a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90018698:	eba2 0c0c 	sub.w	ip, r2, ip
9001869c:	f8a4 8000 	strh.w	r8, [r4]
900186a0:	eba1 010c 	sub.w	r1, r1, ip
900186a4:	80a1      	strh	r1, [r4, #4]
900186a6:	e7d9      	b.n	9001865c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900186a8:	4461      	add	r1, ip
900186aa:	b209      	sxth	r1, r1
900186ac:	4588      	cmp	r8, r1
900186ae:	dbd6      	blt.n	9001865e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900186b0:	eba3 0c0c 	sub.w	ip, r3, ip
900186b4:	f8a4 c004 	strh.w	ip, [r4, #4]
900186b8:	e7d0      	b.n	9001865c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900186ba:	bf00      	nop
900186bc:	240281e2 	.word	0x240281e2
900186c0:	240281e0 	.word	0x240281e0
900186c4:	2d00      	cmp	r5, #0
900186c6:	f000 816d 	beq.w	900189a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900186ca:	9b06      	ldr	r3, [sp, #24]
900186cc:	445b      	add	r3, fp
900186ce:	461c      	mov	r4, r3
900186d0:	9b02      	ldr	r3, [sp, #8]
900186d2:	3301      	adds	r3, #1
900186d4:	f000 8166 	beq.w	900189a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
900186d8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
900186dc:	9803      	ldr	r0, [sp, #12]
900186de:	4629      	mov	r1, r5
900186e0:	f7ff fd36 	bl	90018150 <_ZNK8touchgfx4Rect8includesERKS0_>
900186e4:	b120      	cbz	r0, 900186f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
900186e6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
900186ea:	9801      	ldr	r0, [sp, #4]
900186ec:	f7ff feb0 	bl	90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900186f0:	9903      	ldr	r1, [sp, #12]
900186f2:	4628      	mov	r0, r5
900186f4:	f7ff fcb9 	bl	9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>
900186f8:	2800      	cmp	r0, #0
900186fa:	f000 809c 	beq.w	90018836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900186fe:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
90018702:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90018706:	fa1f f189 	uxth.w	r1, r9
9001870a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001870e:	9309      	str	r3, [sp, #36]	; 0x24
90018710:	eb01 0c03 	add.w	ip, r1, r3
90018714:	b283      	uxth	r3, r0
90018716:	4548      	cmp	r0, r9
90018718:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
9001871c:	fa1f fa8c 	uxth.w	sl, ip
90018720:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90018724:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90018728:	eb03 050c 	add.w	r5, r3, ip
9001872c:	b2ad      	uxth	r5, r5
9001872e:	9505      	str	r5, [sp, #20]
90018730:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90018734:	9504      	str	r5, [sp, #16]
90018736:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
9001873a:	f340 8099 	ble.w	90018870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
9001873e:	1a5b      	subs	r3, r3, r1
90018740:	4596      	cmp	lr, r2
90018742:	fa0f f08a 	sxth.w	r0, sl
90018746:	b29b      	uxth	r3, r3
90018748:	b21e      	sxth	r6, r3
9001874a:	dd2e      	ble.n	900187aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
9001874c:	9f02      	ldr	r7, [sp, #8]
9001874e:	fa1f fe8e 	uxth.w	lr, lr
90018752:	b292      	uxth	r2, r2
90018754:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90018758:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
9001875c:	9f04      	ldr	r7, [sp, #16]
9001875e:	ebae 0102 	sub.w	r1, lr, r2
90018762:	44a6      	add	lr, r4
90018764:	1a3f      	subs	r7, r7, r0
90018766:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
9001876a:	b289      	uxth	r1, r1
9001876c:	4402      	add	r2, r0
9001876e:	fa0f fe8e 	sxth.w	lr, lr
90018772:	b20d      	sxth	r5, r1
90018774:	b212      	sxth	r2, r2
90018776:	436f      	muls	r7, r5
90018778:	ebae 0202 	sub.w	r2, lr, r2
9001877c:	4372      	muls	r2, r6
9001877e:	4297      	cmp	r7, r2
90018780:	db09      	blt.n	90018796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
90018782:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90018786:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
9001878a:	449c      	add	ip, r3
9001878c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90018790:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90018794:	e686      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018796:	4421      	add	r1, r4
90018798:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
9001879c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
900187a0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900187a4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900187a8:	e67c      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900187aa:	9f04      	ldr	r7, [sp, #16]
900187ac:	42b8      	cmp	r0, r7
900187ae:	da27      	bge.n	90018800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
900187b0:	9902      	ldr	r1, [sp, #8]
900187b2:	1a3f      	subs	r7, r7, r0
900187b4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
900187b8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
900187bc:	eb05 010e 	add.w	r1, r5, lr
900187c0:	fa1f f881 	uxth.w	r8, r1
900187c4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
900187c8:	4411      	add	r1, r2
900187ca:	fa0f f988 	sxth.w	r9, r8
900187ce:	eba2 020e 	sub.w	r2, r2, lr
900187d2:	eba1 0108 	sub.w	r1, r1, r8
900187d6:	4372      	muls	r2, r6
900187d8:	b289      	uxth	r1, r1
900187da:	fa0f f881 	sxth.w	r8, r1
900187de:	fb08 f707 	mul.w	r7, r8, r7
900187e2:	42ba      	cmp	r2, r7
900187e4:	dc06      	bgt.n	900187f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
900187e6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
900187ea:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
900187ee:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
900187f2:	e7ca      	b.n	9001878a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
900187f4:	4429      	add	r1, r5
900187f6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
900187fa:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900187fe:	e651      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018800:	9805      	ldr	r0, [sp, #20]
90018802:	2d06      	cmp	r5, #6
90018804:	ebaa 0000 	sub.w	r0, sl, r0
90018808:	b280      	uxth	r0, r0
9001880a:	fa0f fe80 	sxth.w	lr, r0
9001880e:	d817      	bhi.n	90018840 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90018810:	9b04      	ldr	r3, [sp, #16]
90018812:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90018816:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
9001881a:	1c6b      	adds	r3, r5, #1
9001881c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90018820:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018824:	9b01      	ldr	r3, [sp, #4]
90018826:	9801      	ldr	r0, [sp, #4]
90018828:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001882c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90018830:	805a      	strh	r2, [r3, #2]
90018832:	809e      	strh	r6, [r3, #4]
90018834:	80d9      	strh	r1, [r3, #6]
90018836:	9b02      	ldr	r3, [sp, #8]
90018838:	3c08      	subs	r4, #8
9001883a:	3b01      	subs	r3, #1
9001883c:	9302      	str	r3, [sp, #8]
9001883e:	e747      	b.n	900186d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
90018840:	9a02      	ldr	r2, [sp, #8]
90018842:	45b6      	cmp	lr, r6
90018844:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90018848:	db0d      	blt.n	90018866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
9001884a:	449c      	add	ip, r3
9001884c:	445a      	add	r2, fp
9001884e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
90018852:	fa1f fc8c 	uxth.w	ip, ip
90018856:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
9001885a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
9001885e:	448c      	add	ip, r1
90018860:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90018864:	e61e      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018866:	445a      	add	r2, fp
90018868:	4484      	add	ip, r0
9001886a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
9001886e:	e78f      	b.n	90018790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90018870:	fa1f f18e 	uxth.w	r1, lr
90018874:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90018878:	b293      	uxth	r3, r2
9001887a:	4596      	cmp	lr, r2
9001887c:	eb01 0806 	add.w	r8, r1, r6
90018880:	9306      	str	r3, [sp, #24]
90018882:	fa1f f888 	uxth.w	r8, r8
90018886:	9f06      	ldr	r7, [sp, #24]
90018888:	fa0f f388 	sxth.w	r3, r8
9001888c:	9307      	str	r3, [sp, #28]
9001888e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90018892:	443b      	add	r3, r7
90018894:	b29b      	uxth	r3, r3
90018896:	9308      	str	r3, [sp, #32]
90018898:	da24      	bge.n	900188e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
9001889a:	9905      	ldr	r1, [sp, #20]
9001889c:	eba3 0308 	sub.w	r3, r3, r8
900188a0:	eba2 020e 	sub.w	r2, r2, lr
900188a4:	eba9 0000 	sub.w	r0, r9, r0
900188a8:	ebaa 0401 	sub.w	r4, sl, r1
900188ac:	b29b      	uxth	r3, r3
900188ae:	b2a4      	uxth	r4, r4
900188b0:	b219      	sxth	r1, r3
900188b2:	b225      	sxth	r5, r4
900188b4:	4348      	muls	r0, r1
900188b6:	436a      	muls	r2, r5
900188b8:	4282      	cmp	r2, r0
900188ba:	9a02      	ldr	r2, [sp, #8]
900188bc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900188c0:	445a      	add	r2, fp
900188c2:	dc06      	bgt.n	900188d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
900188c4:	9b07      	ldr	r3, [sp, #28]
900188c6:	44a4      	add	ip, r4
900188c8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
900188cc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
900188d0:	e75e      	b.n	90018790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900188d2:	9904      	ldr	r1, [sp, #16]
900188d4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
900188d8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
900188dc:	4433      	add	r3, r6
900188de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
900188e2:	e5df      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900188e4:	9f06      	ldr	r7, [sp, #24]
900188e6:	9b04      	ldr	r3, [sp, #16]
900188e8:	1bc9      	subs	r1, r1, r7
900188ea:	fa0f f78a 	sxth.w	r7, sl
900188ee:	b289      	uxth	r1, r1
900188f0:	429f      	cmp	r7, r3
900188f2:	fa0f fe81 	sxth.w	lr, r1
900188f6:	dd23      	ble.n	90018940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
900188f8:	9a05      	ldr	r2, [sp, #20]
900188fa:	eba9 0000 	sub.w	r0, r9, r0
900188fe:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018902:	ebaa 0202 	sub.w	r2, sl, r2
90018906:	9d07      	ldr	r5, [sp, #28]
90018908:	fb0e f000 	mul.w	r0, lr, r0
9001890c:	b292      	uxth	r2, r2
9001890e:	eba5 0a03 	sub.w	sl, r5, r3
90018912:	9b02      	ldr	r3, [sp, #8]
90018914:	b214      	sxth	r4, r2
90018916:	00db      	lsls	r3, r3, #3
90018918:	fb04 fa0a 	mul.w	sl, r4, sl
9001891c:	445b      	add	r3, fp
9001891e:	4550      	cmp	r0, sl
90018920:	db03      	blt.n	9001892a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90018922:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90018926:	4494      	add	ip, r2
90018928:	e732      	b.n	90018790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001892a:	9a04      	ldr	r2, [sp, #16]
9001892c:	4431      	add	r1, r6
9001892e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
90018932:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
90018936:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
9001893a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001893e:	e75c      	b.n	900187fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
90018940:	9b08      	ldr	r3, [sp, #32]
90018942:	2d06      	cmp	r5, #6
90018944:	eba3 0308 	sub.w	r3, r3, r8
90018948:	b29b      	uxth	r3, r3
9001894a:	b218      	sxth	r0, r3
9001894c:	d813      	bhi.n	90018976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
9001894e:	9b07      	ldr	r3, [sp, #28]
90018950:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
90018954:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
90018958:	1c6b      	adds	r3, r5, #1
9001895a:	9901      	ldr	r1, [sp, #4]
9001895c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90018960:	9b01      	ldr	r3, [sp, #4]
90018962:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
90018966:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
9001896a:	805a      	strh	r2, [r3, #2]
9001896c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001896e:	f8a3 e006 	strh.w	lr, [r3, #6]
90018972:	809a      	strh	r2, [r3, #4]
90018974:	e75f      	b.n	90018836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90018976:	9c02      	ldr	r4, [sp, #8]
90018978:	4570      	cmp	r0, lr
9001897a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001897e:	db0d      	blt.n	9001899c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
90018980:	4431      	add	r1, r6
90018982:	9b06      	ldr	r3, [sp, #24]
90018984:	445c      	add	r4, fp
90018986:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001898a:	b289      	uxth	r1, r1
9001898c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
90018990:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018994:	4419      	add	r1, r3
90018996:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
9001899a:	e583      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001899c:	445c      	add	r4, fp
9001899e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
900189a2:	e79b      	b.n	900188dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
900189a4:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
900189a8:	2e07      	cmp	r6, #7
900189aa:	ea4f 04c6 	mov.w	r4, r6, lsl #3
900189ae:	d812      	bhi.n	900189d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
900189b0:	1c75      	adds	r5, r6, #1
900189b2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900189b6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
900189ba:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
900189be:	9d01      	ldr	r5, [sp, #4]
900189c0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
900189c4:	442c      	add	r4, r5
900189c6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
900189ca:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
900189ce:	8061      	strh	r1, [r4, #2]
900189d0:	80a2      	strh	r2, [r4, #4]
900189d2:	80e3      	strh	r3, [r4, #6]
900189d4:	e5d0      	b.n	90018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900189d6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
900189da:	3e01      	subs	r6, #1
900189dc:	445c      	add	r4, fp
900189de:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
900189e2:	f04f 37ff 	mov.w	r7, #4294967295
900189e6:	2500      	movs	r5, #0
900189e8:	9305      	str	r3, [sp, #20]
900189ea:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
900189ee:	1e72      	subs	r2, r6, #1
900189f0:	9302      	str	r3, [sp, #8]
900189f2:	4691      	mov	r9, r2
900189f4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
900189f8:	9304      	str	r3, [sp, #16]
900189fa:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
900189fe:	f1b9 3fff 	cmp.w	r9, #4294967295
90018a02:	6818      	ldr	r0, [r3, #0]
90018a04:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90018a08:	9207      	str	r2, [sp, #28]
90018a0a:	bf16      	itet	ne
90018a0c:	9905      	ldrne	r1, [sp, #20]
90018a0e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90018a12:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90018a16:	9306      	str	r3, [sp, #24]
90018a18:	f8be 1006 	ldrh.w	r1, [lr, #6]
90018a1c:	f8be 8004 	ldrh.w	r8, [lr, #4]
90018a20:	fb18 f801 	smulbb	r8, r8, r1
90018a24:	6859      	ldr	r1, [r3, #4]
90018a26:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90018a2a:	4671      	mov	r1, lr
90018a2c:	a80c      	add	r0, sp, #48	; 0x30
90018a2e:	f7fb ff78 	bl	90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018a32:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90018a36:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90018a3a:	f04f 0c08 	mov.w	ip, #8
90018a3e:	9b04      	ldr	r3, [sp, #16]
90018a40:	9a02      	ldr	r2, [sp, #8]
90018a42:	fb10 f001 	smulbb	r0, r0, r1
90018a46:	fb02 8803 	mla	r8, r2, r3, r8
90018a4a:	eba0 0108 	sub.w	r1, r0, r8
90018a4e:	fb90 f0fc 	sdiv	r0, r0, ip
90018a52:	4288      	cmp	r0, r1
90018a54:	dc20      	bgt.n	90018a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018a56:	4551      	cmp	r1, sl
90018a58:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90018a5c:	da03      	bge.n	90018a66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
90018a5e:	b1d9      	cbz	r1, 90018a98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018a60:	468a      	mov	sl, r1
90018a62:	464f      	mov	r7, r9
90018a64:	4635      	mov	r5, r6
90018a66:	f109 39ff 	add.w	r9, r9, #4294967295
90018a6a:	f119 0f02 	cmn.w	r9, #2
90018a6e:	d1c6      	bne.n	900189fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90018a70:	4616      	mov	r6, r2
90018a72:	3201      	adds	r2, #1
90018a74:	f1a4 0408 	sub.w	r4, r4, #8
90018a78:	d1b7      	bne.n	900189ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90018a7a:	9b01      	ldr	r3, [sp, #4]
90018a7c:	b2ac      	uxth	r4, r5
90018a7e:	00ed      	lsls	r5, r5, #3
90018a80:	1958      	adds	r0, r3, r5
90018a82:	1c7b      	adds	r3, r7, #1
90018a84:	d10b      	bne.n	90018a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90018a86:	4601      	mov	r1, r0
90018a88:	9803      	ldr	r0, [sp, #12]
90018a8a:	f7fb ff4a 	bl	90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018a8e:	4621      	mov	r1, r4
90018a90:	9801      	ldr	r0, [sp, #4]
90018a92:	f7ff fcdd 	bl	90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018a96:	e505      	b.n	900184a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018a98:	464f      	mov	r7, r9
90018a9a:	4635      	mov	r5, r6
90018a9c:	e7ed      	b.n	90018a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
90018a9e:	9b01      	ldr	r3, [sp, #4]
90018aa0:	00ff      	lsls	r7, r7, #3
90018aa2:	445d      	add	r5, fp
90018aa4:	19d9      	adds	r1, r3, r7
90018aa6:	445f      	add	r7, fp
90018aa8:	f7fb ff3b 	bl	90014922 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018aac:	9b03      	ldr	r3, [sp, #12]
90018aae:	cb03      	ldmia	r3!, {r0, r1}
90018ab0:	9b03      	ldr	r3, [sp, #12]
90018ab2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90018ab6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90018aba:	f855 0fac 	ldr.w	r0, [r5, #172]!
90018abe:	6869      	ldr	r1, [r5, #4]
90018ac0:	c303      	stmia	r3!, {r0, r1}
90018ac2:	e7e4      	b.n	90018a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90018ac4 <_ZN8touchgfx11Application10invalidateEv>:
90018ac4:	4b09      	ldr	r3, [pc, #36]	; (90018aec <_ZN8touchgfx11Application10invalidateEv+0x28>)
90018ac6:	b082      	sub	sp, #8
90018ac8:	2100      	movs	r1, #0
90018aca:	f9b3 2000 	ldrsh.w	r2, [r3]
90018ace:	4b08      	ldr	r3, [pc, #32]	; (90018af0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90018ad0:	9100      	str	r1, [sp, #0]
90018ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
90018ad6:	f8ad 2004 	strh.w	r2, [sp, #4]
90018ada:	f8ad 3006 	strh.w	r3, [sp, #6]
90018ade:	ab02      	add	r3, sp, #8
90018ae0:	e913 0006 	ldmdb	r3, {r1, r2}
90018ae4:	b002      	add	sp, #8
90018ae6:	f7ff bcc7 	b.w	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018aea:	bf00      	nop
90018aec:	240281e0 	.word	0x240281e0
90018af0:	240281e2 	.word	0x240281e2

90018af4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90018af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018af8:	f500 7698 	add.w	r6, r0, #304	; 0x130
90018afc:	b09b      	sub	sp, #108	; 0x6c
90018afe:	4604      	mov	r4, r0
90018b00:	4630      	mov	r0, r6
90018b02:	f7fa f9ea 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90018b06:	4605      	mov	r5, r0
90018b08:	b940      	cbnz	r0, 90018b1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90018b0a:	4620      	mov	r0, r4
90018b0c:	e896 0006 	ldmia.w	r6, {r1, r2}
90018b10:	f7ff fcb2 	bl	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b14:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90018b18:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90018b1c:	4bc8      	ldr	r3, [pc, #800]	; (90018e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90018b1e:	681b      	ldr	r3, [r3, #0]
90018b20:	2b00      	cmp	r3, #0
90018b22:	d03e      	beq.n	90018ba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018b24:	4dc7      	ldr	r5, [pc, #796]	; (90018e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90018b26:	4628      	mov	r0, r5
90018b28:	f7fa f9d7 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90018b2c:	4606      	mov	r6, r0
90018b2e:	2800      	cmp	r0, #0
90018b30:	d137      	bne.n	90018ba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018b32:	4628      	mov	r0, r5
90018b34:	f7ff f9dc 	bl	90017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018b38:	6829      	ldr	r1, [r5, #0]
90018b3a:	686a      	ldr	r2, [r5, #4]
90018b3c:	4620      	mov	r0, r4
90018b3e:	f7ff fc9b 	bl	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b42:	802e      	strh	r6, [r5, #0]
90018b44:	806e      	strh	r6, [r5, #2]
90018b46:	80ae      	strh	r6, [r5, #4]
90018b48:	80ee      	strh	r6, [r5, #6]
90018b4a:	ae09      	add	r6, sp, #36	; 0x24
90018b4c:	4630      	mov	r0, r6
90018b4e:	f7ff fc24 	bl	9001839a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018b52:	4abd      	ldr	r2, [pc, #756]	; (90018e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90018b54:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018b58:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90018b5c:	8815      	ldrh	r5, [r2, #0]
90018b5e:	9202      	str	r2, [sp, #8]
90018b60:	462b      	mov	r3, r5
90018b62:	429f      	cmp	r7, r3
90018b64:	d924      	bls.n	90018bb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90018b66:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90018b6a:	2907      	cmp	r1, #7
90018b6c:	d816      	bhi.n	90018b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90018b6e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90018b72:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90018b76:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90018b7a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90018b7e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90018b82:	1c4a      	adds	r2, r1, #1
90018b84:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90018b88:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90018b8c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90018b90:	f8a2 9002 	strh.w	r9, [r2, #2]
90018b94:	f8a2 e004 	strh.w	lr, [r2, #4]
90018b98:	f8a2 c006 	strh.w	ip, [r2, #6]
90018b9c:	3301      	adds	r3, #1
90018b9e:	b29b      	uxth	r3, r3
90018ba0:	e7df      	b.n	90018b62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90018ba2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018ba6:	2b00      	cmp	r3, #0
90018ba8:	d1cf      	bne.n	90018b4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90018baa:	b01b      	add	sp, #108	; 0x6c
90018bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018bb0:	462f      	mov	r7, r5
90018bb2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90018bb6:	42bb      	cmp	r3, r7
90018bb8:	d90b      	bls.n	90018bd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90018bba:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90018bbe:	3701      	adds	r7, #1
90018bc0:	4620      	mov	r0, r4
90018bc2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90018bc6:	b2bf      	uxth	r7, r7
90018bc8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90018bcc:	f7ff fc54 	bl	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018bd0:	e7ef      	b.n	90018bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90018bd2:	4a9e      	ldr	r2, [pc, #632]	; (90018e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90018bd4:	6813      	ldr	r3, [r2, #0]
90018bd6:	4690      	mov	r8, r2
90018bd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90018bdc:	2b01      	cmp	r3, #1
90018bde:	f040 80e4 	bne.w	90018daa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90018be2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90018be6:	4629      	mov	r1, r5
90018be8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018bec:	2500      	movs	r5, #0
90018bee:	33ae      	adds	r3, #174	; 0xae
90018bf0:	428f      	cmp	r7, r1
90018bf2:	f103 0308 	add.w	r3, r3, #8
90018bf6:	dd0a      	ble.n	90018c0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90018bf8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90018bfc:	3101      	adds	r1, #1
90018bfe:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90018c02:	4402      	add	r2, r0
90018c04:	b212      	sxth	r2, r2
90018c06:	4295      	cmp	r5, r2
90018c08:	bfb8      	it	lt
90018c0a:	4615      	movlt	r5, r2
90018c0c:	e7f0      	b.n	90018bf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90018c0e:	4b90      	ldr	r3, [pc, #576]	; (90018e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90018c10:	f8df b238 	ldr.w	fp, [pc, #568]	; 90018e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90018c14:	881b      	ldrh	r3, [r3, #0]
90018c16:	46d8      	mov	r8, fp
90018c18:	2b0f      	cmp	r3, #15
90018c1a:	bf8c      	ite	hi
90018c1c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90018c20:	f04f 0a01 	movls.w	sl, #1
90018c24:	2300      	movs	r3, #0
90018c26:	e9cd 3305 	strd	r3, r3, [sp, #20]
90018c2a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90018c2e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90018c32:	4438      	add	r0, r7
90018c34:	b207      	sxth	r7, r0
90018c36:	f8db 0000 	ldr.w	r0, [fp]
90018c3a:	42bd      	cmp	r5, r7
90018c3c:	6803      	ldr	r3, [r0, #0]
90018c3e:	f340 8084 	ble.w	90018d4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90018c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90018c46:	4798      	blx	r3
90018c48:	eb07 030a 	add.w	r3, r7, sl
90018c4c:	4298      	cmp	r0, r3
90018c4e:	da07      	bge.n	90018c60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018c50:	4285      	cmp	r5, r0
90018c52:	dd05      	ble.n	90018c60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018c54:	4287      	cmp	r7, r0
90018c56:	dd6d      	ble.n	90018d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018c58:	2f00      	cmp	r7, #0
90018c5a:	dd6b      	ble.n	90018d34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018c5c:	4628      	mov	r0, r5
90018c5e:	e004      	b.n	90018c6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90018c60:	4287      	cmp	r7, r0
90018c62:	dcfb      	bgt.n	90018c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90018c64:	42a8      	cmp	r0, r5
90018c66:	bfa8      	it	ge
90018c68:	4628      	movge	r0, r5
90018c6a:	4b7a      	ldr	r3, [pc, #488]	; (90018e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90018c6c:	1bc0      	subs	r0, r0, r7
90018c6e:	2200      	movs	r2, #0
90018c70:	f8ad 7016 	strh.w	r7, [sp, #22]
90018c74:	f9b3 3000 	ldrsh.w	r3, [r3]
90018c78:	f8ad 2014 	strh.w	r2, [sp, #20]
90018c7c:	f8ad 3018 	strh.w	r3, [sp, #24]
90018c80:	9b02      	ldr	r3, [sp, #8]
90018c82:	f8ad 001a 	strh.w	r0, [sp, #26]
90018c86:	881f      	ldrh	r7, [r3, #0]
90018c88:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018c8c:	42bb      	cmp	r3, r7
90018c8e:	d9cc      	bls.n	90018c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018c90:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90018c94:	ab07      	add	r3, sp, #28
90018c96:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018c9a:	6851      	ldr	r1, [r2, #4]
90018c9c:	c303      	stmia	r3!, {r0, r1}
90018c9e:	a905      	add	r1, sp, #20
90018ca0:	a807      	add	r0, sp, #28
90018ca2:	f7ff f9e2 	bl	9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>
90018ca6:	2800      	cmp	r0, #0
90018ca8:	d04c      	beq.n	90018d44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90018caa:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90018cae:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90018cb2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90018cb6:	4686      	mov	lr, r0
90018cb8:	4290      	cmp	r0, r2
90018cba:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90018cbe:	4448      	add	r0, r9
90018cc0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90018cc4:	bfb8      	it	lt
90018cc6:	4696      	movlt	lr, r2
90018cc8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90018ccc:	444a      	add	r2, r9
90018cce:	b280      	uxth	r0, r0
90018cd0:	4299      	cmp	r1, r3
90018cd2:	468c      	mov	ip, r1
90018cd4:	b292      	uxth	r2, r2
90018cd6:	9303      	str	r3, [sp, #12]
90018cd8:	bfb8      	it	lt
90018cda:	469c      	movlt	ip, r3
90018cdc:	b203      	sxth	r3, r0
90018cde:	fa0f f982 	sxth.w	r9, r2
90018ce2:	f8ad e01c 	strh.w	lr, [sp, #28]
90018ce6:	f8ad c01e 	strh.w	ip, [sp, #30]
90018cea:	454b      	cmp	r3, r9
90018cec:	bfb8      	it	lt
90018cee:	4602      	movlt	r2, r0
90018cf0:	9b03      	ldr	r3, [sp, #12]
90018cf2:	eba2 020e 	sub.w	r2, r2, lr
90018cf6:	f8ad 2020 	strh.w	r2, [sp, #32]
90018cfa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90018cfe:	4411      	add	r1, r2
90018d00:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90018d04:	4413      	add	r3, r2
90018d06:	b289      	uxth	r1, r1
90018d08:	b29b      	uxth	r3, r3
90018d0a:	b208      	sxth	r0, r1
90018d0c:	b21a      	sxth	r2, r3
90018d0e:	4290      	cmp	r0, r2
90018d10:	bfb8      	it	lt
90018d12:	460b      	movlt	r3, r1
90018d14:	eba3 030c 	sub.w	r3, r3, ip
90018d18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90018d1c:	a807      	add	r0, sp, #28
90018d1e:	f7fa f8dc 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90018d22:	b920      	cbnz	r0, 90018d2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90018d24:	6823      	ldr	r3, [r4, #0]
90018d26:	a907      	add	r1, sp, #28
90018d28:	4620      	mov	r0, r4
90018d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018d2c:	4798      	blx	r3
90018d2e:	3701      	adds	r7, #1
90018d30:	b2bf      	uxth	r7, r7
90018d32:	e7a9      	b.n	90018c88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90018d34:	f8d8 0000 	ldr.w	r0, [r8]
90018d38:	2101      	movs	r1, #1
90018d3a:	6803      	ldr	r3, [r0, #0]
90018d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90018d40:	4798      	blx	r3
90018d42:	e772      	b.n	90018c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018d44:	e9cd 0007 	strd	r0, r0, [sp, #28]
90018d48:	e7e8      	b.n	90018d1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90018d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90018d4c:	4798      	blx	r3
90018d4e:	4b42      	ldr	r3, [pc, #264]	; (90018e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90018d50:	781b      	ldrb	r3, [r3, #0]
90018d52:	2b00      	cmp	r3, #0
90018d54:	f43f af29 	beq.w	90018baa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018d58:	2300      	movs	r3, #0
90018d5a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90018d5e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90018d62:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90018d66:	9b02      	ldr	r3, [sp, #8]
90018d68:	881b      	ldrh	r3, [r3, #0]
90018d6a:	429d      	cmp	r5, r3
90018d6c:	f67f af1d 	bls.w	90018baa <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018d70:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90018d74:	2907      	cmp	r1, #7
90018d76:	d815      	bhi.n	90018da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90018d78:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90018d7c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90018d80:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90018d84:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90018d88:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90018d8c:	1c4a      	adds	r2, r1, #1
90018d8e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90018d92:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90018d96:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90018d9a:	f8a2 e002 	strh.w	lr, [r2, #2]
90018d9e:	f8a2 c004 	strh.w	ip, [r2, #4]
90018da2:	80d7      	strh	r7, [r2, #6]
90018da4:	3301      	adds	r3, #1
90018da6:	b29b      	uxth	r3, r3
90018da8:	e7df      	b.n	90018d6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90018daa:	2b02      	cmp	r3, #2
90018dac:	f040 8135 	bne.w	9001901a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018db0:	4b2a      	ldr	r3, [pc, #168]	; (90018e5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90018db2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90018db6:	781b      	ldrb	r3, [r3, #0]
90018db8:	2b01      	cmp	r3, #1
90018dba:	f000 809c 	beq.w	90018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018dbe:	9b02      	ldr	r3, [sp, #8]
90018dc0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90018dc4:	f8b3 b000 	ldrh.w	fp, [r3]
90018dc8:	f10b 0b01 	add.w	fp, fp, #1
90018dcc:	fa1f fb8b 	uxth.w	fp, fp
90018dd0:	2a00      	cmp	r2, #0
90018dd2:	d0bc      	beq.n	90018d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018dd4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90018dd8:	4659      	mov	r1, fp
90018dda:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90018dde:	f04f 0800 	mov.w	r8, #0
90018de2:	441d      	add	r5, r3
90018de4:	b22d      	sxth	r5, r5
90018de6:	b28b      	uxth	r3, r1
90018de8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90018dec:	429a      	cmp	r2, r3
90018dee:	f240 80c0 	bls.w	90018f72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90018df2:	4427      	add	r7, r4
90018df4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90018df8:	4608      	mov	r0, r1
90018dfa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90018dfe:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90018e02:	4563      	cmp	r3, ip
90018e04:	f340 80a2 	ble.w	90018f4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90018e08:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90018e0c:	4465      	add	r5, ip
90018e0e:	b22d      	sxth	r5, r5
90018e10:	429d      	cmp	r5, r3
90018e12:	bfa8      	it	ge
90018e14:	461d      	movge	r5, r3
90018e16:	3101      	adds	r1, #1
90018e18:	4680      	mov	r8, r0
90018e1a:	e7e4      	b.n	90018de6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90018e1c:	d10b      	bne.n	90018e36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90018e1e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90018e22:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90018e26:	458c      	cmp	ip, r1
90018e28:	bfb4      	ite	lt
90018e2a:	469c      	movlt	ip, r3
90018e2c:	46bc      	movge	ip, r7
90018e2e:	4572      	cmp	r2, lr
90018e30:	bfb8      	it	lt
90018e32:	4672      	movlt	r2, lr
90018e34:	e087      	b.n	90018f46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018e36:	428a      	cmp	r2, r1
90018e38:	46bc      	mov	ip, r7
90018e3a:	bfb8      	it	lt
90018e3c:	460a      	movlt	r2, r1
90018e3e:	e082      	b.n	90018f46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018e40:	2402822c 	.word	0x2402822c
90018e44:	24028238 	.word	0x24028238
90018e48:	24000068 	.word	0x24000068
90018e4c:	240281ec 	.word	0x240281ec
90018e50:	240281e2 	.word	0x240281e2
90018e54:	240281e0 	.word	0x240281e0
90018e58:	240281ea 	.word	0x240281ea
90018e5c:	240281e4 	.word	0x240281e4
90018e60:	1961      	adds	r1, r4, r5
90018e62:	ab07      	add	r3, sp, #28
90018e64:	f851 0fac 	ldr.w	r0, [r1, #172]!
90018e68:	6849      	ldr	r1, [r1, #4]
90018e6a:	c303      	stmia	r3!, {r0, r1}
90018e6c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018e70:	a807      	add	r0, sp, #28
90018e72:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018e76:	2b13      	cmp	r3, #19
90018e78:	440b      	add	r3, r1
90018e7a:	bfd8      	it	le
90018e7c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90018e80:	1a9b      	subs	r3, r3, r2
90018e82:	f8ad 201c 	strh.w	r2, [sp, #28]
90018e86:	f8ad 3020 	strh.w	r3, [sp, #32]
90018e8a:	f7ff f84b 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018e8e:	a807      	add	r0, sp, #28
90018e90:	f7fa f823 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90018e94:	bb78      	cbnz	r0, 90018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018e96:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90018e9a:	4425      	add	r5, r4
90018e9c:	f8d8 0000 	ldr.w	r0, [r8]
90018ea0:	f1bc 0f14 	cmp.w	ip, #20
90018ea4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90018ea8:	f8d0 e000 	ldr.w	lr, [r0]
90018eac:	bfa8      	it	ge
90018eae:	f04f 0c14 	movge.w	ip, #20
90018eb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90018eb6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018eba:	fa1f fc8c 	uxth.w	ip, ip
90018ebe:	f8cd c000 	str.w	ip, [sp]
90018ec2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90018ec6:	47d0      	blx	sl
90018ec8:	4682      	mov	sl, r0
90018eca:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018ece:	a807      	add	r0, sp, #28
90018ed0:	f7ff f80e 	bl	90017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018ed4:	6823      	ldr	r3, [r4, #0]
90018ed6:	4620      	mov	r0, r4
90018ed8:	a907      	add	r1, sp, #28
90018eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018edc:	4798      	blx	r3
90018ede:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90018ee2:	eba0 000a 	sub.w	r0, r0, sl
90018ee6:	b200      	sxth	r0, r0
90018ee8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90018eec:	b918      	cbnz	r0, 90018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018eee:	b2b9      	uxth	r1, r7
90018ef0:	4648      	mov	r0, r9
90018ef2:	f7ff faad 	bl	90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018ef6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90018efa:	f1bb 0f00 	cmp.w	fp, #0
90018efe:	f43f af26 	beq.w	90018d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018f02:	9b02      	ldr	r3, [sp, #8]
90018f04:	2700      	movs	r7, #0
90018f06:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90018f0a:	881b      	ldrh	r3, [r3, #0]
90018f0c:	3301      	adds	r3, #1
90018f0e:	b29b      	uxth	r3, r3
90018f10:	b299      	uxth	r1, r3
90018f12:	00fd      	lsls	r5, r7, #3
90018f14:	458b      	cmp	fp, r1
90018f16:	d9a3      	bls.n	90018e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90018f18:	4425      	add	r5, r4
90018f1a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90018f1e:	469c      	mov	ip, r3
90018f20:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90018f24:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90018f28:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90018f2c:	4408      	add	r0, r1
90018f2e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90018f32:	4471      	add	r1, lr
90018f34:	b200      	sxth	r0, r0
90018f36:	b209      	sxth	r1, r1
90018f38:	4288      	cmp	r0, r1
90018f3a:	f6bf af6f 	bge.w	90018e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90018f3e:	4586      	cmp	lr, r0
90018f40:	4672      	mov	r2, lr
90018f42:	bfb8      	it	lt
90018f44:	4602      	movlt	r2, r0
90018f46:	3301      	adds	r3, #1
90018f48:	4667      	mov	r7, ip
90018f4a:	e7e1      	b.n	90018f10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90018f4c:	d10c      	bne.n	90018f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90018f4e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90018f52:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90018f56:	4287      	cmp	r7, r0
90018f58:	bfb4      	ite	lt
90018f5a:	4608      	movlt	r0, r1
90018f5c:	4640      	movge	r0, r8
90018f5e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90018f62:	443b      	add	r3, r7
90018f64:	b21b      	sxth	r3, r3
90018f66:	e753      	b.n	90018e10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90018f68:	4565      	cmp	r5, ip
90018f6a:	4640      	mov	r0, r8
90018f6c:	bfa8      	it	ge
90018f6e:	4665      	movge	r5, ip
90018f70:	e751      	b.n	90018e16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90018f72:	eb09 0007 	add.w	r0, r9, r7
90018f76:	4427      	add	r7, r4
90018f78:	9203      	str	r2, [sp, #12]
90018f7a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90018f7e:	f1ba 0f13 	cmp.w	sl, #19
90018f82:	bfde      	ittt	le
90018f84:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90018f88:	4455      	addle	r5, sl
90018f8a:	b22d      	sxthle	r5, r5
90018f8c:	f7f9 ffa5 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90018f90:	9a03      	ldr	r2, [sp, #12]
90018f92:	2800      	cmp	r0, #0
90018f94:	f47f af1c 	bne.w	90018dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90018f98:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90018f9c:	fa1f fa8a 	uxth.w	sl, sl
90018fa0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018fa4:	1aad      	subs	r5, r5, r2
90018fa6:	4829      	ldr	r0, [pc, #164]	; (9001904c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90018fa8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90018fac:	2d14      	cmp	r5, #20
90018fae:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90018fb2:	6800      	ldr	r0, [r0, #0]
90018fb4:	bfa8      	it	ge
90018fb6:	2514      	movge	r5, #20
90018fb8:	f8ad 101c 	strh.w	r1, [sp, #28]
90018fbc:	f8ad 201e 	strh.w	r2, [sp, #30]
90018fc0:	b289      	uxth	r1, r1
90018fc2:	f8ad 3020 	strh.w	r3, [sp, #32]
90018fc6:	b2ad      	uxth	r5, r5
90018fc8:	f8d0 c000 	ldr.w	ip, [r0]
90018fcc:	b292      	uxth	r2, r2
90018fce:	4555      	cmp	r5, sl
90018fd0:	bf94      	ite	ls
90018fd2:	9500      	strls	r5, [sp, #0]
90018fd4:	f8cd a000 	strhi.w	sl, [sp]
90018fd8:	b29b      	uxth	r3, r3
90018fda:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90018fde:	47a8      	blx	r5
90018fe0:	6823      	ldr	r3, [r4, #0]
90018fe2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018fe6:	a907      	add	r1, sp, #28
90018fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018fea:	4620      	mov	r0, r4
90018fec:	4798      	blx	r3
90018fee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90018ff2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90018ff6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90018ffa:	1a5b      	subs	r3, r3, r1
90018ffc:	440a      	add	r2, r1
90018ffe:	b21b      	sxth	r3, r3
90019000:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90019004:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90019008:	2b00      	cmp	r3, #0
9001900a:	f47f aed8 	bne.w	90018dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
9001900e:	fa1f f188 	uxth.w	r1, r8
90019012:	4648      	mov	r0, r9
90019014:	f7ff fa1c 	bl	90018450 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90019018:	e6d1      	b.n	90018dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
9001901a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
9001901e:	42ab      	cmp	r3, r5
90019020:	f67f ae95 	bls.w	90018d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90019024:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90019028:	ab07      	add	r3, sp, #28
9001902a:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001902e:	6851      	ldr	r1, [r2, #4]
90019030:	c303      	stmia	r3!, {r0, r1}
90019032:	a807      	add	r0, sp, #28
90019034:	f7f9 ff51 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
90019038:	b920      	cbnz	r0, 90019044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
9001903a:	6823      	ldr	r3, [r4, #0]
9001903c:	a907      	add	r1, sp, #28
9001903e:	4620      	mov	r0, r4
90019040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90019042:	4798      	blx	r3
90019044:	3501      	adds	r5, #1
90019046:	b2ad      	uxth	r5, r5
90019048:	e7e7      	b.n	9001901a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
9001904a:	bf00      	nop
9001904c:	240281ec 	.word	0x240281ec

90019050 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90019050:	4b03      	ldr	r3, [pc, #12]	; (90019060 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90019052:	2200      	movs	r2, #0
90019054:	801a      	strh	r2, [r3, #0]
90019056:	805a      	strh	r2, [r3, #2]
90019058:	809a      	strh	r2, [r3, #4]
9001905a:	80da      	strh	r2, [r3, #6]
9001905c:	4770      	bx	lr
9001905e:	bf00      	nop
90019060:	24028238 	.word	0x24028238

90019064 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90019064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019068:	b09d      	sub	sp, #116	; 0x74
9001906a:	4606      	mov	r6, r0
9001906c:	4614      	mov	r4, r2
9001906e:	468a      	mov	sl, r1
90019070:	a803      	add	r0, sp, #12
90019072:	461d      	mov	r5, r3
90019074:	f000 fe79 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
90019078:	6833      	ldr	r3, [r6, #0]
9001907a:	4630      	mov	r0, r6
9001907c:	f242 0b0b 	movw	fp, #8203	; 0x200b
90019080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019082:	4798      	blx	r3
90019084:	6833      	ldr	r3, [r6, #0]
90019086:	4607      	mov	r7, r0
90019088:	4630      	mov	r0, r6
9001908a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001908c:	4798      	blx	r3
9001908e:	462a      	mov	r2, r5
90019090:	2500      	movs	r5, #0
90019092:	4621      	mov	r1, r4
90019094:	9000      	str	r0, [sp, #0]
90019096:	463b      	mov	r3, r7
90019098:	462c      	mov	r4, r5
9001909a:	46a9      	mov	r9, r5
9001909c:	46a8      	mov	r8, r5
9001909e:	a803      	add	r0, sp, #12
900190a0:	f000 febe 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900190a4:	2300      	movs	r3, #0
900190a6:	9302      	str	r3, [sp, #8]
900190a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900190ac:	429c      	cmp	r4, r3
900190ae:	d002      	beq.n	900190b6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
900190b0:	455c      	cmp	r4, fp
900190b2:	bf18      	it	ne
900190b4:	4625      	movne	r5, r4
900190b6:	ab02      	add	r3, sp, #8
900190b8:	4632      	mov	r2, r6
900190ba:	4651      	mov	r1, sl
900190bc:	a803      	add	r0, sp, #12
900190be:	f001 f9b5 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900190c2:	4604      	mov	r4, r0
900190c4:	b108      	cbz	r0, 900190ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
900190c6:	280a      	cmp	r0, #10
900190c8:	d10a      	bne.n	900190e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
900190ca:	45c1      	cmp	r9, r8
900190cc:	bf38      	it	cc
900190ce:	46c1      	movcc	r9, r8
900190d0:	f04f 0800 	mov.w	r8, #0
900190d4:	2c00      	cmp	r4, #0
900190d6:	d1e5      	bne.n	900190a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
900190d8:	4648      	mov	r0, r9
900190da:	b01d      	add	sp, #116	; 0x74
900190dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900190e0:	9a02      	ldr	r2, [sp, #8]
900190e2:	2a00      	cmp	r2, #0
900190e4:	d0de      	beq.n	900190a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
900190e6:	7b57      	ldrb	r7, [r2, #13]
900190e8:	4629      	mov	r1, r5
900190ea:	6833      	ldr	r3, [r6, #0]
900190ec:	007f      	lsls	r7, r7, #1
900190ee:	8894      	ldrh	r4, [r2, #4]
900190f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900190f2:	f407 7080 	and.w	r0, r7, #256	; 0x100
900190f6:	7a97      	ldrb	r7, [r2, #10]
900190f8:	4307      	orrs	r7, r0
900190fa:	4630      	mov	r0, r6
900190fc:	4798      	blx	r3
900190fe:	4438      	add	r0, r7
90019100:	4480      	add	r8, r0
90019102:	fa1f f888 	uxth.w	r8, r8
90019106:	e7e5      	b.n	900190d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90019108 <_ZNK8touchgfx4Font12getCharWidthEt>:
90019108:	b508      	push	{r3, lr}
9001910a:	6803      	ldr	r3, [r0, #0]
9001910c:	68db      	ldr	r3, [r3, #12]
9001910e:	4798      	blx	r3
90019110:	b128      	cbz	r0, 9001911e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90019112:	7b43      	ldrb	r3, [r0, #13]
90019114:	7a80      	ldrb	r0, [r0, #10]
90019116:	005b      	lsls	r3, r3, #1
90019118:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001911c:	4318      	orrs	r0, r3
9001911e:	bd08      	pop	{r3, pc}

90019120 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90019120:	b40e      	push	{r1, r2, r3}
90019122:	b5f0      	push	{r4, r5, r6, r7, lr}
90019124:	b09e      	sub	sp, #120	; 0x78
90019126:	4605      	mov	r5, r0
90019128:	ab23      	add	r3, sp, #140	; 0x8c
9001912a:	a805      	add	r0, sp, #20
9001912c:	f853 4b04 	ldr.w	r4, [r3], #4
90019130:	9303      	str	r3, [sp, #12]
90019132:	f000 fe1a 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
90019136:	682b      	ldr	r3, [r5, #0]
90019138:	4628      	mov	r0, r5
9001913a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001913c:	4798      	blx	r3
9001913e:	682b      	ldr	r3, [r5, #0]
90019140:	4606      	mov	r6, r0
90019142:	4628      	mov	r0, r5
90019144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90019146:	4798      	blx	r3
90019148:	4633      	mov	r3, r6
9001914a:	4621      	mov	r1, r4
9001914c:	ae1e      	add	r6, sp, #120	; 0x78
9001914e:	2400      	movs	r4, #0
90019150:	9000      	str	r0, [sp, #0]
90019152:	9a03      	ldr	r2, [sp, #12]
90019154:	a805      	add	r0, sp, #20
90019156:	f000 fe63 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001915a:	f846 4d68 	str.w	r4, [r6, #-104]!
9001915e:	462a      	mov	r2, r5
90019160:	4633      	mov	r3, r6
90019162:	4621      	mov	r1, r4
90019164:	a805      	add	r0, sp, #20
90019166:	f001 f961 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001916a:	b300      	cbz	r0, 900191ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
9001916c:	280a      	cmp	r0, #10
9001916e:	d01a      	beq.n	900191a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90019170:	9f04      	ldr	r7, [sp, #16]
90019172:	b1c7      	cbz	r7, 900191a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90019174:	7b78      	ldrb	r0, [r7, #13]
90019176:	7a3b      	ldrb	r3, [r7, #8]
90019178:	00c1      	lsls	r1, r0, #3
9001917a:	88ea      	ldrh	r2, [r5, #6]
9001917c:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019180:	4319      	orrs	r1, r3
90019182:	0643      	lsls	r3, r0, #25
90019184:	ea4f 1000 	mov.w	r0, r0, lsl #4
90019188:	bf48      	it	mi
9001918a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
9001918e:	f400 7080 	and.w	r0, r0, #256	; 0x100
90019192:	bf48      	it	mi
90019194:	b219      	sxthmi	r1, r3
90019196:	79fb      	ldrb	r3, [r7, #7]
90019198:	4303      	orrs	r3, r0
9001919a:	4413      	add	r3, r2
9001919c:	1a5b      	subs	r3, r3, r1
9001919e:	b21b      	sxth	r3, r3
900191a0:	429c      	cmp	r4, r3
900191a2:	bfb8      	it	lt
900191a4:	461c      	movlt	r4, r3
900191a6:	4633      	mov	r3, r6
900191a8:	462a      	mov	r2, r5
900191aa:	2100      	movs	r1, #0
900191ac:	e7da      	b.n	90019164 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
900191ae:	b2a0      	uxth	r0, r4
900191b0:	b01e      	add	sp, #120	; 0x78
900191b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
900191b6:	b003      	add	sp, #12
900191b8:	4770      	bx	lr

900191ba <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
900191ba:	7a43      	ldrb	r3, [r0, #9]
900191bc:	8880      	ldrh	r0, [r0, #4]
900191be:	4418      	add	r0, r3
900191c0:	b280      	uxth	r0, r0
900191c2:	4770      	bx	lr

900191c4 <_ZNK8touchgfx4Font13getFontHeightEv>:
900191c4:	6803      	ldr	r3, [r0, #0]
900191c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900191c8:	4718      	bx	r3

900191ca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
900191ca:	b40e      	push	{r1, r2, r3}
900191cc:	b570      	push	{r4, r5, r6, lr}
900191ce:	b09d      	sub	sp, #116	; 0x74
900191d0:	4604      	mov	r4, r0
900191d2:	ab21      	add	r3, sp, #132	; 0x84
900191d4:	a803      	add	r0, sp, #12
900191d6:	f853 5b04 	ldr.w	r5, [r3], #4
900191da:	9302      	str	r3, [sp, #8]
900191dc:	f000 fdc5 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
900191e0:	6823      	ldr	r3, [r4, #0]
900191e2:	4620      	mov	r0, r4
900191e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900191e6:	4798      	blx	r3
900191e8:	6823      	ldr	r3, [r4, #0]
900191ea:	4606      	mov	r6, r0
900191ec:	4620      	mov	r0, r4
900191ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900191f0:	2401      	movs	r4, #1
900191f2:	4798      	blx	r3
900191f4:	4633      	mov	r3, r6
900191f6:	9000      	str	r0, [sp, #0]
900191f8:	4629      	mov	r1, r5
900191fa:	9a02      	ldr	r2, [sp, #8]
900191fc:	a803      	add	r0, sp, #12
900191fe:	f000 fe0f 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019202:	a803      	add	r0, sp, #12
90019204:	f001 f9de 	bl	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019208:	b2a3      	uxth	r3, r4
9001920a:	b138      	cbz	r0, 9001921c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
9001920c:	280a      	cmp	r0, #10
9001920e:	a803      	add	r0, sp, #12
90019210:	bf04      	itt	eq
90019212:	3301      	addeq	r3, #1
90019214:	b21c      	sxtheq	r4, r3
90019216:	f001 f9d5 	bl	9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001921a:	e7f5      	b.n	90019208 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
9001921c:	4618      	mov	r0, r3
9001921e:	b01d      	add	sp, #116	; 0x74
90019220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019224:	b003      	add	sp, #12
90019226:	4770      	bx	lr

90019228 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90019228:	b40e      	push	{r1, r2, r3}
9001922a:	b5f0      	push	{r4, r5, r6, r7, lr}
9001922c:	b09e      	sub	sp, #120	; 0x78
9001922e:	4604      	mov	r4, r0
90019230:	ab23      	add	r3, sp, #140	; 0x8c
90019232:	a805      	add	r0, sp, #20
90019234:	f853 5b04 	ldr.w	r5, [r3], #4
90019238:	9303      	str	r3, [sp, #12]
9001923a:	f000 fd96 	bl	90019d6a <_ZN8touchgfx12TextProviderC1Ev>
9001923e:	6823      	ldr	r3, [r4, #0]
90019240:	4620      	mov	r0, r4
90019242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019244:	4798      	blx	r3
90019246:	6823      	ldr	r3, [r4, #0]
90019248:	4606      	mov	r6, r0
9001924a:	4620      	mov	r0, r4
9001924c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001924e:	4798      	blx	r3
90019250:	4633      	mov	r3, r6
90019252:	4629      	mov	r1, r5
90019254:	9000      	str	r0, [sp, #0]
90019256:	9a03      	ldr	r2, [sp, #12]
90019258:	a805      	add	r0, sp, #20
9001925a:	f000 fde1 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001925e:	ad1e      	add	r5, sp, #120	; 0x78
90019260:	2100      	movs	r1, #0
90019262:	f647 76ff 	movw	r6, #32767	; 0x7fff
90019266:	4622      	mov	r2, r4
90019268:	a805      	add	r0, sp, #20
9001926a:	f845 1d68 	str.w	r1, [r5, #-104]!
9001926e:	462b      	mov	r3, r5
90019270:	f001 f8dc 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019274:	b1d8      	cbz	r0, 900192ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
90019276:	280a      	cmp	r0, #10
90019278:	d012      	beq.n	900192a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
9001927a:	9804      	ldr	r0, [sp, #16]
9001927c:	b180      	cbz	r0, 900192a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
9001927e:	7b47      	ldrb	r7, [r0, #13]
90019280:	88e2      	ldrh	r2, [r4, #6]
90019282:	00fb      	lsls	r3, r7, #3
90019284:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019288:	7a03      	ldrb	r3, [r0, #8]
9001928a:	430b      	orrs	r3, r1
9001928c:	0679      	lsls	r1, r7, #25
9001928e:	bf44      	itt	mi
90019290:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019294:	b21b      	sxthmi	r3, r3
90019296:	1ad3      	subs	r3, r2, r3
90019298:	b21b      	sxth	r3, r3
9001929a:	429e      	cmp	r6, r3
9001929c:	bfa8      	it	ge
9001929e:	461e      	movge	r6, r3
900192a0:	462b      	mov	r3, r5
900192a2:	4622      	mov	r2, r4
900192a4:	2100      	movs	r1, #0
900192a6:	a805      	add	r0, sp, #20
900192a8:	f001 f8c0 	bl	9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900192ac:	e7e2      	b.n	90019274 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
900192ae:	4630      	mov	r0, r6
900192b0:	b01e      	add	sp, #120	; 0x78
900192b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
900192b6:	b003      	add	sp, #12
900192b8:	4770      	bx	lr

900192ba <_ZNK8touchgfx8Drawable10invalidateEv>:
900192ba:	b513      	push	{r0, r1, r4, lr}
900192bc:	6803      	ldr	r3, [r0, #0]
900192be:	2400      	movs	r4, #0
900192c0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
900192c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
900192c8:	f8ad 1004 	strh.w	r1, [sp, #4]
900192cc:	4669      	mov	r1, sp
900192ce:	691b      	ldr	r3, [r3, #16]
900192d0:	9400      	str	r4, [sp, #0]
900192d2:	f8ad 2006 	strh.w	r2, [sp, #6]
900192d6:	4798      	blx	r3
900192d8:	b002      	add	sp, #8
900192da:	bd10      	pop	{r4, pc}

900192dc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
900192dc:	b538      	push	{r3, r4, r5, lr}
900192de:	680b      	ldr	r3, [r1, #0]
900192e0:	460c      	mov	r4, r1
900192e2:	4605      	mov	r5, r0
900192e4:	68db      	ldr	r3, [r3, #12]
900192e6:	4798      	blx	r3
900192e8:	6823      	ldr	r3, [r4, #0]
900192ea:	4620      	mov	r0, r4
900192ec:	4629      	mov	r1, r5
900192ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900192f0:	4798      	blx	r3
900192f2:	4628      	mov	r0, r5
900192f4:	bd38      	pop	{r3, r4, r5, pc}

900192f6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
900192f6:	b410      	push	{r4}
900192f8:	880a      	ldrh	r2, [r1, #0]
900192fa:	8884      	ldrh	r4, [r0, #4]
900192fc:	4422      	add	r2, r4
900192fe:	800a      	strh	r2, [r1, #0]
90019300:	884a      	ldrh	r2, [r1, #2]
90019302:	88c4      	ldrh	r4, [r0, #6]
90019304:	4422      	add	r2, r4
90019306:	804a      	strh	r2, [r1, #2]
90019308:	6940      	ldr	r0, [r0, #20]
9001930a:	b120      	cbz	r0, 90019316 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
9001930c:	6803      	ldr	r3, [r0, #0]
9001930e:	f85d 4b04 	ldr.w	r4, [sp], #4
90019312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019314:	4718      	bx	r3
90019316:	f85d 4b04 	ldr.w	r4, [sp], #4
9001931a:	4770      	bx	lr

9001931c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
9001931c:	b570      	push	{r4, r5, r6, lr}
9001931e:	8882      	ldrh	r2, [r0, #4]
90019320:	460c      	mov	r4, r1
90019322:	880b      	ldrh	r3, [r1, #0]
90019324:	4605      	mov	r5, r0
90019326:	4413      	add	r3, r2
90019328:	800b      	strh	r3, [r1, #0]
9001932a:	884b      	ldrh	r3, [r1, #2]
9001932c:	88c2      	ldrh	r2, [r0, #6]
9001932e:	4413      	add	r3, r2
90019330:	804b      	strh	r3, [r1, #2]
90019332:	1d01      	adds	r1, r0, #4
90019334:	4620      	mov	r0, r4
90019336:	f7f9 fd8d 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001933a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001933e:	2b00      	cmp	r3, #0
90019340:	dd0b      	ble.n	9001935a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90019342:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90019346:	2b00      	cmp	r3, #0
90019348:	dd07      	ble.n	9001935a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001934a:	6968      	ldr	r0, [r5, #20]
9001934c:	b128      	cbz	r0, 9001935a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001934e:	6803      	ldr	r3, [r0, #0]
90019350:	4621      	mov	r1, r4
90019352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019358:	4718      	bx	r3
9001935a:	bd70      	pop	{r4, r5, r6, pc}

9001935c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
9001935c:	b570      	push	{r4, r5, r6, lr}
9001935e:	8882      	ldrh	r2, [r0, #4]
90019360:	460c      	mov	r4, r1
90019362:	880b      	ldrh	r3, [r1, #0]
90019364:	4605      	mov	r5, r0
90019366:	4413      	add	r3, r2
90019368:	800b      	strh	r3, [r1, #0]
9001936a:	884b      	ldrh	r3, [r1, #2]
9001936c:	88c2      	ldrh	r2, [r0, #6]
9001936e:	4413      	add	r3, r2
90019370:	804b      	strh	r3, [r1, #2]
90019372:	1d01      	adds	r1, r0, #4
90019374:	4620      	mov	r0, r4
90019376:	f7f9 fd6d 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001937a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001937e:	2b00      	cmp	r3, #0
90019380:	dd18      	ble.n	900193b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90019382:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90019386:	2b00      	cmp	r3, #0
90019388:	dd14      	ble.n	900193b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
9001938a:	6968      	ldr	r0, [r5, #20]
9001938c:	b128      	cbz	r0, 9001939a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
9001938e:	6803      	ldr	r3, [r0, #0]
90019390:	4621      	mov	r1, r4
90019392:	691b      	ldr	r3, [r3, #16]
90019394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019398:	4718      	bx	r3
9001939a:	4b07      	ldr	r3, [pc, #28]	; (900193b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
9001939c:	681b      	ldr	r3, [r3, #0]
9001939e:	3304      	adds	r3, #4
900193a0:	429d      	cmp	r5, r3
900193a2:	d107      	bne.n	900193b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900193a4:	f7fe fefa 	bl	9001819c <_ZN8touchgfx11Application11getInstanceEv>
900193a8:	6821      	ldr	r1, [r4, #0]
900193aa:	6862      	ldr	r2, [r4, #4]
900193ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900193b0:	f7ff b862 	b.w	90018478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900193b4:	bd70      	pop	{r4, r5, r6, pc}
900193b6:	bf00      	nop
900193b8:	24028230 	.word	0x24028230

900193bc <_ZN8touchgfx8Drawable12moveRelativeEss>:
900193bc:	b570      	push	{r4, r5, r6, lr}
900193be:	4604      	mov	r4, r0
900193c0:	4616      	mov	r6, r2
900193c2:	460d      	mov	r5, r1
900193c4:	b901      	cbnz	r1, 900193c8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
900193c6:	b192      	cbz	r2, 900193ee <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
900193c8:	6823      	ldr	r3, [r4, #0]
900193ca:	4620      	mov	r0, r4
900193cc:	699b      	ldr	r3, [r3, #24]
900193ce:	4798      	blx	r3
900193d0:	88e2      	ldrh	r2, [r4, #6]
900193d2:	88a1      	ldrh	r1, [r4, #4]
900193d4:	4620      	mov	r0, r4
900193d6:	4432      	add	r2, r6
900193d8:	4429      	add	r1, r5
900193da:	b212      	sxth	r2, r2
900193dc:	b209      	sxth	r1, r1
900193de:	f7fa f809 	bl	900133f4 <_ZN8touchgfx8Drawable5setXYEss>
900193e2:	6823      	ldr	r3, [r4, #0]
900193e4:	4620      	mov	r0, r4
900193e6:	699b      	ldr	r3, [r3, #24]
900193e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900193ec:	4718      	bx	r3
900193ee:	bd70      	pop	{r4, r5, r6, pc}

900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
900193f0:	b510      	push	{r4, lr}
900193f2:	2300      	movs	r3, #0
900193f4:	4604      	mov	r4, r0
900193f6:	4608      	mov	r0, r1
900193f8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
900193fc:	8023      	strh	r3, [r4, #0]
900193fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90019402:	8063      	strh	r3, [r4, #2]
90019404:	6803      	ldr	r3, [r0, #0]
90019406:	80a1      	strh	r1, [r4, #4]
90019408:	4621      	mov	r1, r4
9001940a:	80e2      	strh	r2, [r4, #6]
9001940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001940e:	4798      	blx	r3
90019410:	4620      	mov	r0, r4
90019412:	bd10      	pop	{r4, pc}

90019414 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90019414:	b530      	push	{r4, r5, lr}
90019416:	8083      	strh	r3, [r0, #4]
90019418:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9001941c:	f89d 5018 	ldrb.w	r5, [sp, #24]
90019420:	80c3      	strh	r3, [r0, #6]
90019422:	f89d 3010 	ldrb.w	r3, [sp, #16]
90019426:	6141      	str	r1, [r0, #20]
90019428:	7203      	strb	r3, [r0, #8]
9001942a:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001942e:	8302      	strh	r2, [r0, #24]
90019430:	7243      	strb	r3, [r0, #9]
90019432:	7a83      	ldrb	r3, [r0, #10]
90019434:	f365 0306 	bfi	r3, r5, #0, #7
90019438:	f89d 501c 	ldrb.w	r5, [sp, #28]
9001943c:	f365 13c7 	bfi	r3, r5, #7, #1
90019440:	7283      	strb	r3, [r0, #10]
90019442:	f89d 3020 	ldrb.w	r3, [sp, #32]
90019446:	72c3      	strb	r3, [r0, #11]
90019448:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
9001944c:	7303      	strb	r3, [r0, #12]
9001944e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90019452:	81c3      	strh	r3, [r0, #14]
90019454:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90019458:	8203      	strh	r3, [r0, #16]
9001945a:	4b01      	ldr	r3, [pc, #4]	; (90019460 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
9001945c:	6003      	str	r3, [r0, #0]
9001945e:	bd30      	pop	{r4, r5, pc}
90019460:	9002c468 	.word	0x9002c468

90019464 <_ZNK8touchgfx9ConstFont4findEt>:
90019464:	b5f0      	push	{r4, r5, r6, r7, lr}
90019466:	6944      	ldr	r4, [r0, #20]
90019468:	b3bc      	cbz	r4, 900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001946a:	88a3      	ldrh	r3, [r4, #4]
9001946c:	8b02      	ldrh	r2, [r0, #24]
9001946e:	1acb      	subs	r3, r1, r3
90019470:	f102 32ff 	add.w	r2, r2, #4294967295
90019474:	d431      	bmi.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
90019476:	4293      	cmp	r3, r2
90019478:	dd0c      	ble.n	90019494 <_ZNK8touchgfx9ConstFont4findEt+0x30>
9001947a:	230e      	movs	r3, #14
9001947c:	fb03 4302 	mla	r3, r3, r2, r4
90019480:	889b      	ldrh	r3, [r3, #4]
90019482:	1a5b      	subs	r3, r3, r1
90019484:	1ad3      	subs	r3, r2, r3
90019486:	429a      	cmp	r2, r3
90019488:	db27      	blt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001948a:	2b00      	cmp	r3, #0
9001948c:	bfbc      	itt	lt
9001948e:	2302      	movlt	r3, #2
90019490:	fb92 f3f3 	sdivlt	r3, r2, r3
90019494:	2500      	movs	r5, #0
90019496:	260e      	movs	r6, #14
90019498:	4295      	cmp	r5, r2
9001949a:	dc1e      	bgt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001949c:	fb06 4003 	mla	r0, r6, r3, r4
900194a0:	8887      	ldrh	r7, [r0, #4]
900194a2:	42b9      	cmp	r1, r7
900194a4:	d01a      	beq.n	900194dc <_ZNK8touchgfx9ConstFont4findEt+0x78>
900194a6:	d20d      	bcs.n	900194c4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
900194a8:	1e5a      	subs	r2, r3, #1
900194aa:	4295      	cmp	r5, r2
900194ac:	dc15      	bgt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194ae:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
900194b2:	1a5b      	subs	r3, r3, r1
900194b4:	1ad3      	subs	r3, r2, r3
900194b6:	429a      	cmp	r2, r3
900194b8:	db0f      	blt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194ba:	429d      	cmp	r5, r3
900194bc:	ddec      	ble.n	90019498 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900194be:	1953      	adds	r3, r2, r5
900194c0:	105b      	asrs	r3, r3, #1
900194c2:	e7e9      	b.n	90019498 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900194c4:	1c5d      	adds	r5, r3, #1
900194c6:	42aa      	cmp	r2, r5
900194c8:	db07      	blt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194ca:	8a43      	ldrh	r3, [r0, #18]
900194cc:	1acb      	subs	r3, r1, r3
900194ce:	442b      	add	r3, r5
900194d0:	429d      	cmp	r5, r3
900194d2:	dc02      	bgt.n	900194da <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194d4:	429a      	cmp	r2, r3
900194d6:	dadf      	bge.n	90019498 <_ZNK8touchgfx9ConstFont4findEt+0x34>
900194d8:	e7f1      	b.n	900194be <_ZNK8touchgfx9ConstFont4findEt+0x5a>
900194da:	2000      	movs	r0, #0
900194dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

900194de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
900194de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900194e0:	4604      	mov	r4, r0
900194e2:	4617      	mov	r7, r2
900194e4:	461e      	mov	r6, r3
900194e6:	b911      	cbnz	r1, 900194ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
900194e8:	2500      	movs	r5, #0
900194ea:	4628      	mov	r0, r5
900194ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900194ee:	290a      	cmp	r1, #10
900194f0:	d0fa      	beq.n	900194e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900194f2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900194f6:	4291      	cmp	r1, r2
900194f8:	d0f6      	beq.n	900194e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900194fa:	f242 020b 	movw	r2, #8203	; 0x200b
900194fe:	4291      	cmp	r1, r2
90019500:	d0f2      	beq.n	900194e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019502:	f7ff ffaf 	bl	90019464 <_ZNK8touchgfx9ConstFont4findEt>
90019506:	4605      	mov	r5, r0
90019508:	b950      	cbnz	r0, 90019520 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
9001950a:	6823      	ldr	r3, [r4, #0]
9001950c:	4620      	mov	r0, r4
9001950e:	691b      	ldr	r3, [r3, #16]
90019510:	4798      	blx	r3
90019512:	4601      	mov	r1, r0
90019514:	4620      	mov	r0, r4
90019516:	f7ff ffa5 	bl	90019464 <_ZNK8touchgfx9ConstFont4findEt>
9001951a:	4605      	mov	r5, r0
9001951c:	2800      	cmp	r0, #0
9001951e:	d0e3      	beq.n	900194e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019520:	6823      	ldr	r3, [r4, #0]
90019522:	4629      	mov	r1, r5
90019524:	4620      	mov	r0, r4
90019526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90019528:	4798      	blx	r3
9001952a:	6038      	str	r0, [r7, #0]
9001952c:	6823      	ldr	r3, [r4, #0]
9001952e:	4620      	mov	r0, r4
90019530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90019532:	4798      	blx	r3
90019534:	7030      	strb	r0, [r6, #0]
90019536:	e7d8      	b.n	900194ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90019538 <_ZN8touchgfx4clzuEm>:
90019538:	4603      	mov	r3, r0
9001953a:	b1c8      	cbz	r0, 90019570 <_ZN8touchgfx4clzuEm+0x38>
9001953c:	0c02      	lsrs	r2, r0, #16
9001953e:	0412      	lsls	r2, r2, #16
90019540:	b9a2      	cbnz	r2, 9001956c <_ZN8touchgfx4clzuEm+0x34>
90019542:	0403      	lsls	r3, r0, #16
90019544:	2010      	movs	r0, #16
90019546:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
9001954a:	bf04      	itt	eq
9001954c:	021b      	lsleq	r3, r3, #8
9001954e:	3008      	addeq	r0, #8
90019550:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90019554:	bf04      	itt	eq
90019556:	011b      	lsleq	r3, r3, #4
90019558:	3004      	addeq	r0, #4
9001955a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
9001955e:	bf04      	itt	eq
90019560:	009b      	lsleq	r3, r3, #2
90019562:	3002      	addeq	r0, #2
90019564:	2b00      	cmp	r3, #0
90019566:	db04      	blt.n	90019572 <_ZN8touchgfx4clzuEm+0x3a>
90019568:	3001      	adds	r0, #1
9001956a:	4770      	bx	lr
9001956c:	2000      	movs	r0, #0
9001956e:	e7ea      	b.n	90019546 <_ZN8touchgfx4clzuEm+0xe>
90019570:	2020      	movs	r0, #32
90019572:	4770      	bx	lr

90019574 <_ZN8touchgfx7muldivuEmmmRm>:
90019574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019578:	4680      	mov	r8, r0
9001957a:	460f      	mov	r7, r1
9001957c:	4615      	mov	r5, r2
9001957e:	461e      	mov	r6, r3
90019580:	f7ff ffda 	bl	90019538 <_ZN8touchgfx4clzuEm>
90019584:	b998      	cbnz	r0, 900195ae <_ZN8touchgfx7muldivuEmmmRm+0x3a>
90019586:	4608      	mov	r0, r1
90019588:	f7ff ffd6 	bl	90019538 <_ZN8touchgfx4clzuEm>
9001958c:	2800      	cmp	r0, #0
9001958e:	dd08      	ble.n	900195a2 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
90019590:	4633      	mov	r3, r6
90019592:	462a      	mov	r2, r5
90019594:	4641      	mov	r1, r8
90019596:	4638      	mov	r0, r7
90019598:	f7ff ffec 	bl	90019574 <_ZN8touchgfx7muldivuEmmmRm>
9001959c:	b003      	add	sp, #12
9001959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900195a2:	f04f 33ff 	mov.w	r3, #4294967295
900195a6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
900195aa:	6033      	str	r3, [r6, #0]
900195ac:	e7f6      	b.n	9001959c <_ZN8touchgfx7muldivuEmmmRm+0x28>
900195ae:	fa31 f900 	lsrs.w	r9, r1, r0
900195b2:	fb01 f308 	mul.w	r3, r1, r8
900195b6:	d105      	bne.n	900195c4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
900195b8:	fbb3 f0f5 	udiv	r0, r3, r5
900195bc:	fb05 3510 	mls	r5, r5, r0, r3
900195c0:	6035      	str	r5, [r6, #0]
900195c2:	e7eb      	b.n	9001959c <_ZN8touchgfx7muldivuEmmmRm+0x28>
900195c4:	2301      	movs	r3, #1
900195c6:	fa08 fb00 	lsl.w	fp, r8, r0
900195ca:	462a      	mov	r2, r5
900195cc:	4641      	mov	r1, r8
900195ce:	fa03 f000 	lsl.w	r0, r3, r0
900195d2:	4633      	mov	r3, r6
900195d4:	fbbb faf5 	udiv	sl, fp, r5
900195d8:	3801      	subs	r0, #1
900195da:	fb09 f40a 	mul.w	r4, r9, sl
900195de:	4038      	ands	r0, r7
900195e0:	f7ff ffc8 	bl	90019574 <_ZN8touchgfx7muldivuEmmmRm>
900195e4:	462a      	mov	r2, r5
900195e6:	4607      	mov	r7, r0
900195e8:	ab01      	add	r3, sp, #4
900195ea:	fb05 b11a 	mls	r1, r5, sl, fp
900195ee:	4648      	mov	r0, r9
900195f0:	f7ff ffc0 	bl	90019574 <_ZN8touchgfx7muldivuEmmmRm>
900195f4:	9b01      	ldr	r3, [sp, #4]
900195f6:	6832      	ldr	r2, [r6, #0]
900195f8:	441a      	add	r2, r3
900195fa:	fbb2 f3f5 	udiv	r3, r2, r5
900195fe:	441c      	add	r4, r3
90019600:	fb05 2513 	mls	r5, r5, r3, r2
90019604:	443c      	add	r4, r7
90019606:	4420      	add	r0, r4
90019608:	e7da      	b.n	900195c0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

9001960a <_ZN8touchgfx6muldivElllRl>:
9001960a:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001960c:	2800      	cmp	r0, #0
9001960e:	461e      	mov	r6, r3
90019610:	bfba      	itte	lt
90019612:	4240      	neglt	r0, r0
90019614:	f04f 34ff 	movlt.w	r4, #4294967295
90019618:	2401      	movge	r4, #1
9001961a:	2900      	cmp	r1, #0
9001961c:	bfbc      	itt	lt
9001961e:	4249      	neglt	r1, r1
90019620:	4264      	neglt	r4, r4
90019622:	2a00      	cmp	r2, #0
90019624:	bfb6      	itet	lt
90019626:	4265      	neglt	r5, r4
90019628:	4625      	movge	r5, r4
9001962a:	4252      	neglt	r2, r2
9001962c:	4288      	cmp	r0, r1
9001962e:	bfc2      	ittt	gt
90019630:	4603      	movgt	r3, r0
90019632:	4608      	movgt	r0, r1
90019634:	4619      	movgt	r1, r3
90019636:	ab01      	add	r3, sp, #4
90019638:	f7ff ff9c 	bl	90019574 <_ZN8touchgfx7muldivuEmmmRm>
9001963c:	9b01      	ldr	r3, [sp, #4]
9001963e:	4368      	muls	r0, r5
90019640:	435c      	muls	r4, r3
90019642:	6034      	str	r4, [r6, #0]
90019644:	b002      	add	sp, #8
90019646:	bd70      	pop	{r4, r5, r6, pc}

90019648 <_ZN8touchgfx6muldivElll>:
90019648:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001964a:	4606      	mov	r6, r0
9001964c:	ab01      	add	r3, sp, #4
9001964e:	460d      	mov	r5, r1
90019650:	4614      	mov	r4, r2
90019652:	f7ff ffda 	bl	9001960a <_ZN8touchgfx6muldivElllRl>
90019656:	2e00      	cmp	r6, #0
90019658:	db20      	blt.n	9001969c <_ZN8touchgfx6muldivElll+0x54>
9001965a:	bf14      	ite	ne
9001965c:	2301      	movne	r3, #1
9001965e:	2300      	moveq	r3, #0
90019660:	2d00      	cmp	r5, #0
90019662:	db1e      	blt.n	900196a2 <_ZN8touchgfx6muldivElll+0x5a>
90019664:	bf14      	ite	ne
90019666:	2201      	movne	r2, #1
90019668:	2200      	moveq	r2, #0
9001966a:	2c00      	cmp	r4, #0
9001966c:	fb03 f202 	mul.w	r2, r3, r2
90019670:	db1a      	blt.n	900196a8 <_ZN8touchgfx6muldivElll+0x60>
90019672:	bf14      	ite	ne
90019674:	2301      	movne	r3, #1
90019676:	2300      	moveq	r3, #0
90019678:	4353      	muls	r3, r2
9001967a:	2b01      	cmp	r3, #1
9001967c:	d117      	bne.n	900196ae <_ZN8touchgfx6muldivElll+0x66>
9001967e:	2c00      	cmp	r4, #0
90019680:	9b01      	ldr	r3, [sp, #4]
90019682:	bfb8      	it	lt
90019684:	4264      	neglt	r4, r4
90019686:	2b00      	cmp	r3, #0
90019688:	f104 0401 	add.w	r4, r4, #1
9001968c:	bfb8      	it	lt
9001968e:	425b      	neglt	r3, r3
90019690:	ebb3 0f64 	cmp.w	r3, r4, asr #1
90019694:	db00      	blt.n	90019698 <_ZN8touchgfx6muldivElll+0x50>
90019696:	3001      	adds	r0, #1
90019698:	b002      	add	sp, #8
9001969a:	bd70      	pop	{r4, r5, r6, pc}
9001969c:	f04f 33ff 	mov.w	r3, #4294967295
900196a0:	e7de      	b.n	90019660 <_ZN8touchgfx6muldivElll+0x18>
900196a2:	f04f 32ff 	mov.w	r2, #4294967295
900196a6:	e7e0      	b.n	9001966a <_ZN8touchgfx6muldivElll+0x22>
900196a8:	f04f 33ff 	mov.w	r3, #4294967295
900196ac:	e7e4      	b.n	90019678 <_ZN8touchgfx6muldivElll+0x30>
900196ae:	3301      	adds	r3, #1
900196b0:	d1f2      	bne.n	90019698 <_ZN8touchgfx6muldivElll+0x50>
900196b2:	9b01      	ldr	r3, [sp, #4]
900196b4:	2c00      	cmp	r4, #0
900196b6:	bfb8      	it	lt
900196b8:	4264      	neglt	r4, r4
900196ba:	2b00      	cmp	r3, #0
900196bc:	bfb8      	it	lt
900196be:	425b      	neglt	r3, r3
900196c0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
900196c4:	bfc8      	it	gt
900196c6:	f100 30ff 	addgt.w	r0, r0, #4294967295
900196ca:	e7e5      	b.n	90019698 <_ZN8touchgfx6muldivElll+0x50>

900196cc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
900196cc:	2000      	movs	r0, #0
900196ce:	4770      	bx	lr

900196d0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
900196d0:	2001      	movs	r0, #1
900196d2:	4770      	bx	lr

900196d4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
900196d4:	2002      	movs	r0, #2
900196d6:	4770      	bx	lr

900196d8 <_ZN8touchgfx6ScreenD1Ev>:
900196d8:	4770      	bx	lr

900196da <_ZN8touchgfx6Screen11setupScreenEv>:
900196da:	4770      	bx	lr

900196dc <_ZN8touchgfx12GestureEventD1Ev>:
900196dc:	4770      	bx	lr

900196de <_ZN8touchgfx9DragEventD1Ev>:
900196de:	4770      	bx	lr

900196e0 <_ZN8touchgfx10ClickEventD1Ev>:
900196e0:	4770      	bx	lr

900196e2 <_ZN8touchgfx10ClickEventD0Ev>:
900196e2:	b510      	push	{r4, lr}
900196e4:	4604      	mov	r4, r0
900196e6:	210c      	movs	r1, #12
900196e8:	f00d ffd5 	bl	90027696 <_ZdlPvj>
900196ec:	4620      	mov	r0, r4
900196ee:	bd10      	pop	{r4, pc}

900196f0 <_ZN8touchgfx9DragEventD0Ev>:
900196f0:	b510      	push	{r4, lr}
900196f2:	4604      	mov	r4, r0
900196f4:	2110      	movs	r1, #16
900196f6:	f00d ffce 	bl	90027696 <_ZdlPvj>
900196fa:	4620      	mov	r0, r4
900196fc:	bd10      	pop	{r4, pc}

900196fe <_ZN8touchgfx12GestureEventD0Ev>:
900196fe:	b510      	push	{r4, lr}
90019700:	4604      	mov	r4, r0
90019702:	210c      	movs	r1, #12
90019704:	f00d ffc7 	bl	90027696 <_ZdlPvj>
90019708:	4620      	mov	r0, r4
9001970a:	bd10      	pop	{r4, pc}

9001970c <_ZN8touchgfx6ScreenD0Ev>:
9001970c:	b510      	push	{r4, lr}
9001970e:	4604      	mov	r4, r0
90019710:	213c      	movs	r1, #60	; 0x3c
90019712:	f00d ffc0 	bl	90027696 <_ZdlPvj>
90019716:	4620      	mov	r0, r4
90019718:	bd10      	pop	{r4, pc}
	...

9001971c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
9001971c:	b530      	push	{r4, r5, lr}
9001971e:	460d      	mov	r5, r1
90019720:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019722:	b087      	sub	sp, #28
90019724:	4604      	mov	r4, r0
90019726:	b301      	cbz	r1, 9001976a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90019728:	a801      	add	r0, sp, #4
9001972a:	f7ff fe61 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001972e:	892a      	ldrh	r2, [r5, #8]
90019730:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90019734:	7928      	ldrb	r0, [r5, #4]
90019736:	1ad2      	subs	r2, r2, r3
90019738:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001973a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001973e:	441a      	add	r2, r3
90019740:	896b      	ldrh	r3, [r5, #10]
90019742:	f8bd 5006 	ldrh.w	r5, [sp, #6]
90019746:	f88d 0010 	strb.w	r0, [sp, #16]
9001974a:	1b5b      	subs	r3, r3, r5
9001974c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
9001974e:	6b20      	ldr	r0, [r4, #48]	; 0x30
90019750:	442b      	add	r3, r5
90019752:	4d07      	ldr	r5, [pc, #28]	; (90019770 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
90019754:	f8ad 1012 	strh.w	r1, [sp, #18]
90019758:	a903      	add	r1, sp, #12
9001975a:	9503      	str	r5, [sp, #12]
9001975c:	f8ad 2014 	strh.w	r2, [sp, #20]
90019760:	f8ad 3016 	strh.w	r3, [sp, #22]
90019764:	6803      	ldr	r3, [r0, #0]
90019766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90019768:	4798      	blx	r3
9001976a:	b007      	add	sp, #28
9001976c:	bd30      	pop	{r4, r5, pc}
9001976e:	bf00      	nop
90019770:	9002c4f0 	.word	0x9002c4f0

90019774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
90019774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019778:	6b03      	ldr	r3, [r0, #48]	; 0x30
9001977a:	b08a      	sub	sp, #40	; 0x28
9001977c:	4604      	mov	r4, r0
9001977e:	460d      	mov	r5, r1
90019780:	b113      	cbz	r3, 90019788 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
90019782:	790b      	ldrb	r3, [r1, #4]
90019784:	2b00      	cmp	r3, #0
90019786:	d044      	beq.n	90019812 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019788:	f104 0804 	add.w	r8, r4, #4
9001978c:	a803      	add	r0, sp, #12
9001978e:	4641      	mov	r1, r8
90019790:	f7ff fe2e 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019794:	792b      	ldrb	r3, [r5, #4]
90019796:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001979a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
9001979e:	b983      	cbnz	r3, 900197c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
900197a0:	f104 0336 	add.w	r3, r4, #54	; 0x36
900197a4:	892a      	ldrh	r2, [r5, #8]
900197a6:	88e9      	ldrh	r1, [r5, #6]
900197a8:	4640      	mov	r0, r8
900197aa:	1b92      	subs	r2, r2, r6
900197ac:	9301      	str	r3, [sp, #4]
900197ae:	1bc9      	subs	r1, r1, r7
900197b0:	f104 0334 	add.w	r3, r4, #52	; 0x34
900197b4:	b212      	sxth	r2, r2
900197b6:	9300      	str	r3, [sp, #0]
900197b8:	b209      	sxth	r1, r1
900197ba:	f104 0330 	add.w	r3, r4, #48	; 0x30
900197be:	f7f9 fa67 	bl	90012c90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
900197c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
900197c4:	b329      	cbz	r1, 90019812 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900197c6:	a805      	add	r0, sp, #20
900197c8:	f7ff fe12 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900197cc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900197d0:	792b      	ldrb	r3, [r5, #4]
900197d2:	a907      	add	r1, sp, #28
900197d4:	1abf      	subs	r7, r7, r2
900197d6:	88ea      	ldrh	r2, [r5, #6]
900197d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
900197da:	4417      	add	r7, r2
900197dc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900197de:	f88d 3020 	strb.w	r3, [sp, #32]
900197e2:	4417      	add	r7, r2
900197e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900197e8:	1ab6      	subs	r6, r6, r2
900197ea:	892a      	ldrh	r2, [r5, #8]
900197ec:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900197f0:	4416      	add	r6, r2
900197f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900197f4:	4416      	add	r6, r2
900197f6:	4a08      	ldr	r2, [pc, #32]	; (90019818 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
900197f8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
900197fc:	2600      	movs	r6, #0
900197fe:	9207      	str	r2, [sp, #28]
90019800:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
90019804:	6803      	ldr	r3, [r0, #0]
90019806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019808:	4798      	blx	r3
9001980a:	792b      	ldrb	r3, [r5, #4]
9001980c:	b10b      	cbz	r3, 90019812 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001980e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90019812:	b00a      	add	sp, #40	; 0x28
90019814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019818:	9002c4c8 	.word	0x9002c4c8

9001981c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
9001981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019820:	460c      	mov	r4, r1
90019822:	6b01      	ldr	r1, [r0, #48]	; 0x30
90019824:	b088      	sub	sp, #32
90019826:	4605      	mov	r5, r0
90019828:	2900      	cmp	r1, #0
9001982a:	d06d      	beq.n	90019908 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
9001982c:	4668      	mov	r0, sp
9001982e:	f7ff fddf 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019832:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90019834:	88e3      	ldrh	r3, [r4, #6]
90019836:	f9bd 8000 	ldrsh.w	r8, [sp]
9001983a:	440b      	add	r3, r1
9001983c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90019840:	b21b      	sxth	r3, r3
90019842:	4543      	cmp	r3, r8
90019844:	db31      	blt.n	900198aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019846:	f8bd c004 	ldrh.w	ip, [sp, #4]
9001984a:	44c4      	add	ip, r8
9001984c:	fa0f fc8c 	sxth.w	ip, ip
90019850:	4563      	cmp	r3, ip
90019852:	da2a      	bge.n	900198aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019854:	8eea      	ldrh	r2, [r5, #54]	; 0x36
90019856:	8926      	ldrh	r6, [r4, #8]
90019858:	4416      	add	r6, r2
9001985a:	b236      	sxth	r6, r6
9001985c:	42be      	cmp	r6, r7
9001985e:	db24      	blt.n	900198aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019860:	f8bd 0006 	ldrh.w	r0, [sp, #6]
90019864:	4438      	add	r0, r7
90019866:	b200      	sxth	r0, r0
90019868:	4286      	cmp	r6, r0
9001986a:	da1e      	bge.n	900198aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001986c:	8963      	ldrh	r3, [r4, #10]
9001986e:	4419      	add	r1, r3
90019870:	b209      	sxth	r1, r1
90019872:	4541      	cmp	r1, r8
90019874:	db08      	blt.n	90019888 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90019876:	4561      	cmp	r1, ip
90019878:	da06      	bge.n	90019888 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001987a:	89a3      	ldrh	r3, [r4, #12]
9001987c:	441a      	add	r2, r3
9001987e:	b212      	sxth	r2, r2
90019880:	42ba      	cmp	r2, r7
90019882:	db01      	blt.n	90019888 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90019884:	4282      	cmp	r2, r0
90019886:	db10      	blt.n	900198aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019888:	4b21      	ldr	r3, [pc, #132]	; (90019910 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
9001988a:	a904      	add	r1, sp, #16
9001988c:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001988e:	9304      	str	r3, [sp, #16]
90019890:	2302      	movs	r3, #2
90019892:	f88d 3014 	strb.w	r3, [sp, #20]
90019896:	2300      	movs	r3, #0
90019898:	f8ad 3016 	strh.w	r3, [sp, #22]
9001989c:	f8ad 3018 	strh.w	r3, [sp, #24]
900198a0:	f8ad 301a 	strh.w	r3, [sp, #26]
900198a4:	6803      	ldr	r3, [r0, #0]
900198a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900198a8:	4798      	blx	r3
900198aa:	1d29      	adds	r1, r5, #4
900198ac:	a802      	add	r0, sp, #8
900198ae:	f7ff fd9f 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900198b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900198b6:	88e0      	ldrh	r0, [r4, #6]
900198b8:	eba3 0808 	sub.w	r8, r3, r8
900198bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900198c0:	7921      	ldrb	r1, [r4, #4]
900198c2:	fa1f f888 	uxth.w	r8, r8
900198c6:	1bdf      	subs	r7, r3, r7
900198c8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900198cc:	b2bb      	uxth	r3, r7
900198ce:	4440      	add	r0, r8
900198d0:	8922      	ldrh	r2, [r4, #8]
900198d2:	8967      	ldrh	r7, [r4, #10]
900198d4:	4460      	add	r0, ip
900198d6:	89a4      	ldrh	r4, [r4, #12]
900198d8:	441a      	add	r2, r3
900198da:	8eee      	ldrh	r6, [r5, #54]	; 0x36
900198dc:	44b8      	add	r8, r7
900198de:	4423      	add	r3, r4
900198e0:	f8ad 0016 	strh.w	r0, [sp, #22]
900198e4:	4432      	add	r2, r6
900198e6:	44e0      	add	r8, ip
900198e8:	4433      	add	r3, r6
900198ea:	4c0a      	ldr	r4, [pc, #40]	; (90019914 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
900198ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
900198ee:	f88d 1014 	strb.w	r1, [sp, #20]
900198f2:	a904      	add	r1, sp, #16
900198f4:	9404      	str	r4, [sp, #16]
900198f6:	f8ad 2018 	strh.w	r2, [sp, #24]
900198fa:	f8ad 801a 	strh.w	r8, [sp, #26]
900198fe:	f8ad 301c 	strh.w	r3, [sp, #28]
90019902:	6803      	ldr	r3, [r0, #0]
90019904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019906:	4798      	blx	r3
90019908:	b008      	add	sp, #32
9001990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001990e:	bf00      	nop
90019910:	9002c4c8 	.word	0x9002c4c8
90019914:	9002c4dc 	.word	0x9002c4dc

90019918 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90019918:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001991a:	4604      	mov	r4, r0
9001991c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90019920:	3201      	adds	r2, #1
90019922:	d112      	bne.n	9001994a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90019924:	2500      	movs	r5, #0
90019926:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001992a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001992e:	6803      	ldr	r3, [r0, #0]
90019930:	9500      	str	r5, [sp, #0]
90019932:	466d      	mov	r5, sp
90019934:	f8ad 1004 	strh.w	r1, [sp, #4]
90019938:	f8ad 2006 	strh.w	r2, [sp, #6]
9001993c:	4629      	mov	r1, r5
9001993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019940:	4798      	blx	r3
90019942:	e895 0003 	ldmia.w	r5, {r0, r1}
90019946:	e884 0003 	stmia.w	r4, {r0, r1}
9001994a:	4620      	mov	r0, r4
9001994c:	b003      	add	sp, #12
9001994e:	bd30      	pop	{r4, r5, pc}

90019950 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90019950:	b513      	push	{r0, r1, r4, lr}
90019952:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
90019956:	4604      	mov	r4, r0
90019958:	3301      	adds	r3, #1
9001995a:	d109      	bne.n	90019970 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
9001995c:	4601      	mov	r1, r0
9001995e:	4668      	mov	r0, sp
90019960:	f7ff fd46 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019964:	f8bd 3000 	ldrh.w	r3, [sp]
90019968:	8423      	strh	r3, [r4, #32]
9001996a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001996e:	8463      	strh	r3, [r4, #34]	; 0x22
90019970:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
90019974:	b002      	add	sp, #8
90019976:	bd10      	pop	{r4, pc}

90019978 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90019978:	b513      	push	{r0, r1, r4, lr}
9001997a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
9001997e:	4604      	mov	r4, r0
90019980:	3301      	adds	r3, #1
90019982:	d109      	bne.n	90019998 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
90019984:	4601      	mov	r1, r0
90019986:	4668      	mov	r0, sp
90019988:	f7ff fd32 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001998c:	f8bd 3000 	ldrh.w	r3, [sp]
90019990:	8423      	strh	r3, [r4, #32]
90019992:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019996:	8463      	strh	r3, [r4, #34]	; 0x22
90019998:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
9001999c:	b002      	add	sp, #8
9001999e:	bd10      	pop	{r4, pc}

900199a0 <_ZN8touchgfx6ScreenC1Ev>:
900199a0:	b570      	push	{r4, r5, r6, lr}
900199a2:	4b17      	ldr	r3, [pc, #92]	; (90019a00 <_ZN8touchgfx6ScreenC1Ev+0x60>)
900199a4:	4605      	mov	r5, r0
900199a6:	4a17      	ldr	r2, [pc, #92]	; (90019a04 <_ZN8touchgfx6ScreenC1Ev+0x64>)
900199a8:	2101      	movs	r1, #1
900199aa:	f845 3b04 	str.w	r3, [r5], #4
900199ae:	2300      	movs	r3, #0
900199b0:	6042      	str	r2, [r0, #4]
900199b2:	4604      	mov	r4, r0
900199b4:	8103      	strh	r3, [r0, #8]
900199b6:	8143      	strh	r3, [r0, #10]
900199b8:	8183      	strh	r3, [r0, #12]
900199ba:	81c3      	strh	r3, [r0, #14]
900199bc:	8203      	strh	r3, [r0, #16]
900199be:	8243      	strh	r3, [r0, #18]
900199c0:	8283      	strh	r3, [r0, #20]
900199c2:	82c3      	strh	r3, [r0, #22]
900199c4:	6203      	str	r3, [r0, #32]
900199c6:	8483      	strh	r3, [r0, #36]	; 0x24
900199c8:	84c3      	strh	r3, [r0, #38]	; 0x26
900199ca:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900199ce:	6343      	str	r3, [r0, #52]	; 0x34
900199d0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900199d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
900199d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
900199dc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
900199e0:	4b09      	ldr	r3, [pc, #36]	; (90019a08 <_ZN8touchgfx6ScreenC1Ev+0x68>)
900199e2:	4628      	mov	r0, r5
900199e4:	f9b3 6000 	ldrsh.w	r6, [r3]
900199e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
900199ea:	4a08      	ldr	r2, [pc, #32]	; (90019a0c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
900199ec:	f9b2 1000 	ldrsh.w	r1, [r2]
900199f0:	4798      	blx	r3
900199f2:	6863      	ldr	r3, [r4, #4]
900199f4:	4628      	mov	r0, r5
900199f6:	4631      	mov	r1, r6
900199f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900199fa:	4798      	blx	r3
900199fc:	4620      	mov	r0, r4
900199fe:	bd70      	pop	{r4, r5, r6, pc}
90019a00:	9002c504 	.word	0x9002c504
90019a04:	9002bd08 	.word	0x9002bd08
90019a08:	240281e2 	.word	0x240281e2
90019a0c:	240281e0 	.word	0x240281e0

90019a10 <_ZN8touchgfx6Screen4drawEv>:
90019a10:	4b09      	ldr	r3, [pc, #36]	; (90019a38 <_ZN8touchgfx6Screen4drawEv+0x28>)
90019a12:	b507      	push	{r0, r1, r2, lr}
90019a14:	f9b3 2000 	ldrsh.w	r2, [r3]
90019a18:	2100      	movs	r1, #0
90019a1a:	4b08      	ldr	r3, [pc, #32]	; (90019a3c <_ZN8touchgfx6Screen4drawEv+0x2c>)
90019a1c:	9100      	str	r1, [sp, #0]
90019a1e:	4669      	mov	r1, sp
90019a20:	f9b3 3000 	ldrsh.w	r3, [r3]
90019a24:	f8ad 2004 	strh.w	r2, [sp, #4]
90019a28:	f8ad 3006 	strh.w	r3, [sp, #6]
90019a2c:	6803      	ldr	r3, [r0, #0]
90019a2e:	689b      	ldr	r3, [r3, #8]
90019a30:	4798      	blx	r3
90019a32:	b003      	add	sp, #12
90019a34:	f85d fb04 	ldr.w	pc, [sp], #4
90019a38:	240281e0 	.word	0x240281e0
90019a3c:	240281e2 	.word	0x240281e2

90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90019a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019a44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90019a48:	b089      	sub	sp, #36	; 0x24
90019a4a:	4680      	mov	r8, r0
90019a4c:	460c      	mov	r4, r1
90019a4e:	2b00      	cmp	r3, #0
90019a50:	4615      	mov	r5, r2
90019a52:	dd0e      	ble.n	90019a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019a54:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90019a58:	2b00      	cmp	r3, #0
90019a5a:	dd0a      	ble.n	90019a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019a5c:	4628      	mov	r0, r5
90019a5e:	f7ff ff5b 	bl	90019918 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019a62:	4621      	mov	r1, r4
90019a64:	f7fe fb01 	bl	9001806a <_ZNK8touchgfx4Rect9intersectERKS0_>
90019a68:	69eb      	ldr	r3, [r5, #28]
90019a6a:	b928      	cbnz	r0, 90019a78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
90019a6c:	461d      	mov	r5, r3
90019a6e:	2b00      	cmp	r3, #0
90019a70:	d1f4      	bne.n	90019a5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
90019a72:	b009      	add	sp, #36	; 0x24
90019a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019a78:	ae04      	add	r6, sp, #16
90019a7a:	2b00      	cmp	r3, #0
90019a7c:	f000 80b5 	beq.w	90019bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019a80:	682b      	ldr	r3, [r5, #0]
90019a82:	4629      	mov	r1, r5
90019a84:	a802      	add	r0, sp, #8
90019a86:	68db      	ldr	r3, [r3, #12]
90019a88:	4798      	blx	r3
90019a8a:	4628      	mov	r0, r5
90019a8c:	f7ff ff60 	bl	90019950 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019a90:	f8bd 7008 	ldrh.w	r7, [sp, #8]
90019a94:	4407      	add	r7, r0
90019a96:	4628      	mov	r0, r5
90019a98:	f7ff ff6e 	bl	90019978 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90019a9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019aa0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
90019aa4:	b23f      	sxth	r7, r7
90019aa6:	4418      	add	r0, r3
90019aa8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90019aac:	4621      	mov	r1, r4
90019aae:	f8ad 2014 	strh.w	r2, [sp, #20]
90019ab2:	f8ad 0012 	strh.w	r0, [sp, #18]
90019ab6:	4630      	mov	r0, r6
90019ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
90019abc:	f8ad 7010 	strh.w	r7, [sp, #16]
90019ac0:	f7f9 f9c8 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90019ac4:	4628      	mov	r0, r5
90019ac6:	f7ff ff27 	bl	90019918 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019aca:	ab06      	add	r3, sp, #24
90019acc:	4602      	mov	r2, r0
90019ace:	e896 0003 	ldmia.w	r6, {r0, r1}
90019ad2:	e883 0003 	stmia.w	r3, {r0, r1}
90019ad6:	4611      	mov	r1, r2
90019ad8:	4618      	mov	r0, r3
90019ada:	f7f9 f9bb 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90019ade:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90019ae2:	f9b4 1000 	ldrsh.w	r1, [r4]
90019ae6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
90019aea:	4299      	cmp	r1, r3
90019aec:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90019af0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90019af4:	d10b      	bne.n	90019b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019af6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019afa:	4552      	cmp	r2, sl
90019afc:	d107      	bne.n	90019b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019afe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90019b02:	455a      	cmp	r2, fp
90019b04:	d103      	bne.n	90019b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019b06:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90019b0a:	454a      	cmp	r2, r9
90019b0c:	d06d      	beq.n	90019bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019b0e:	f1bb 0f00 	cmp.w	fp, #0
90019b12:	dd65      	ble.n	90019be0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019b14:	f1b9 0f00 	cmp.w	r9, #0
90019b18:	dd62      	ble.n	90019be0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019b1a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019b1e:	fa1f f08a 	uxth.w	r0, sl
90019b22:	4552      	cmp	r2, sl
90019b24:	9000      	str	r0, [sp, #0]
90019b26:	da12      	bge.n	90019b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90019b28:	9301      	str	r3, [sp, #4]
90019b2a:	9b00      	ldr	r3, [sp, #0]
90019b2c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019b30:	f8ad 2012 	strh.w	r2, [sp, #18]
90019b34:	1a9a      	subs	r2, r3, r2
90019b36:	f8ad 1010 	strh.w	r1, [sp, #16]
90019b3a:	4631      	mov	r1, r6
90019b3c:	f8ad 0014 	strh.w	r0, [sp, #20]
90019b40:	4640      	mov	r0, r8
90019b42:	f8ad 2016 	strh.w	r2, [sp, #22]
90019b46:	69ea      	ldr	r2, [r5, #28]
90019b48:	f7ff ff7a 	bl	90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019b4c:	9b01      	ldr	r3, [sp, #4]
90019b4e:	f9b4 2000 	ldrsh.w	r2, [r4]
90019b52:	b29f      	uxth	r7, r3
90019b54:	429a      	cmp	r2, r3
90019b56:	da0d      	bge.n	90019b74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90019b58:	f8ad 2010 	strh.w	r2, [sp, #16]
90019b5c:	1aba      	subs	r2, r7, r2
90019b5e:	f8ad a012 	strh.w	sl, [sp, #18]
90019b62:	4631      	mov	r1, r6
90019b64:	f8ad 2014 	strh.w	r2, [sp, #20]
90019b68:	4640      	mov	r0, r8
90019b6a:	f8ad 9016 	strh.w	r9, [sp, #22]
90019b6e:	69ea      	ldr	r2, [r5, #28]
90019b70:	f7ff ff66 	bl	90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019b74:	8822      	ldrh	r2, [r4, #0]
90019b76:	445f      	add	r7, fp
90019b78:	88a3      	ldrh	r3, [r4, #4]
90019b7a:	b2bf      	uxth	r7, r7
90019b7c:	4413      	add	r3, r2
90019b7e:	b23a      	sxth	r2, r7
90019b80:	b29b      	uxth	r3, r3
90019b82:	b219      	sxth	r1, r3
90019b84:	4291      	cmp	r1, r2
90019b86:	dd0d      	ble.n	90019ba4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90019b88:	1bdb      	subs	r3, r3, r7
90019b8a:	f8ad 2010 	strh.w	r2, [sp, #16]
90019b8e:	f8ad a012 	strh.w	sl, [sp, #18]
90019b92:	4631      	mov	r1, r6
90019b94:	f8ad 3014 	strh.w	r3, [sp, #20]
90019b98:	4640      	mov	r0, r8
90019b9a:	f8ad 9016 	strh.w	r9, [sp, #22]
90019b9e:	69ea      	ldr	r2, [r5, #28]
90019ba0:	f7ff ff4e 	bl	90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019ba4:	88e2      	ldrh	r2, [r4, #6]
90019ba6:	8863      	ldrh	r3, [r4, #2]
90019ba8:	4413      	add	r3, r2
90019baa:	9a00      	ldr	r2, [sp, #0]
90019bac:	444a      	add	r2, r9
90019bae:	b29b      	uxth	r3, r3
90019bb0:	fa1f f982 	uxth.w	r9, r2
90019bb4:	b219      	sxth	r1, r3
90019bb6:	fa0f f289 	sxth.w	r2, r9
90019bba:	428a      	cmp	r2, r1
90019bbc:	da15      	bge.n	90019bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019bbe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019bc2:	eba3 0309 	sub.w	r3, r3, r9
90019bc6:	f9b4 0000 	ldrsh.w	r0, [r4]
90019bca:	f8ad 1014 	strh.w	r1, [sp, #20]
90019bce:	4631      	mov	r1, r6
90019bd0:	f8ad 0010 	strh.w	r0, [sp, #16]
90019bd4:	f8ad 2012 	strh.w	r2, [sp, #18]
90019bd8:	f8ad 3016 	strh.w	r3, [sp, #22]
90019bdc:	69ea      	ldr	r2, [r5, #28]
90019bde:	e001      	b.n	90019be4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90019be0:	69ea      	ldr	r2, [r5, #28]
90019be2:	4621      	mov	r1, r4
90019be4:	4640      	mov	r0, r8
90019be6:	f7ff ff2b 	bl	90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019bea:	4628      	mov	r0, r5
90019bec:	f7ff fe94 	bl	90019918 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019bf0:	6861      	ldr	r1, [r4, #4]
90019bf2:	4602      	mov	r2, r0
90019bf4:	4633      	mov	r3, r6
90019bf6:	6820      	ldr	r0, [r4, #0]
90019bf8:	c303      	stmia	r3!, {r0, r1}
90019bfa:	4611      	mov	r1, r2
90019bfc:	4630      	mov	r0, r6
90019bfe:	f7f9 f929 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90019c02:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90019c06:	2b00      	cmp	r3, #0
90019c08:	f77f af33 	ble.w	90019a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019c0c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90019c10:	2b00      	cmp	r3, #0
90019c12:	f77f af2e 	ble.w	90019a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019c16:	4628      	mov	r0, r5
90019c18:	f7ff fe9a 	bl	90019950 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019c1c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90019c20:	1a18      	subs	r0, r3, r0
90019c22:	f8ad 0010 	strh.w	r0, [sp, #16]
90019c26:	4628      	mov	r0, r5
90019c28:	f7ff fea6 	bl	90019978 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90019c2c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90019c30:	4631      	mov	r1, r6
90019c32:	1a18      	subs	r0, r3, r0
90019c34:	f8ad 0012 	strh.w	r0, [sp, #18]
90019c38:	4628      	mov	r0, r5
90019c3a:	682b      	ldr	r3, [r5, #0]
90019c3c:	689b      	ldr	r3, [r3, #8]
90019c3e:	4798      	blx	r3
90019c40:	e717      	b.n	90019a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90019c42 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90019c42:	b570      	push	{r4, r5, r6, lr}
90019c44:	1d06      	adds	r6, r0, #4
90019c46:	b086      	sub	sp, #24
90019c48:	460c      	mov	r4, r1
90019c4a:	2300      	movs	r3, #0
90019c4c:	4631      	mov	r1, r6
90019c4e:	4605      	mov	r5, r0
90019c50:	a802      	add	r0, sp, #8
90019c52:	9301      	str	r3, [sp, #4]
90019c54:	f7ff fbcc 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019c58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019c5c:	8822      	ldrh	r2, [r4, #0]
90019c5e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90019c62:	1ad2      	subs	r2, r2, r3
90019c64:	8863      	ldrh	r3, [r4, #2]
90019c66:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019c6a:	1a5b      	subs	r3, r3, r1
90019c6c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90019c70:	f8ad 2010 	strh.w	r2, [sp, #16]
90019c74:	aa01      	add	r2, sp, #4
90019c76:	f8ad 0014 	strh.w	r0, [sp, #20]
90019c7a:	4630      	mov	r0, r6
90019c7c:	f8ad 1016 	strh.w	r1, [sp, #22]
90019c80:	a904      	add	r1, sp, #16
90019c82:	f8ad 3012 	strh.w	r3, [sp, #18]
90019c86:	f7f9 f9bd 	bl	90013004 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90019c8a:	9a01      	ldr	r2, [sp, #4]
90019c8c:	b11a      	cbz	r2, 90019c96 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90019c8e:	4621      	mov	r1, r4
90019c90:	4628      	mov	r0, r5
90019c92:	f7ff fed5 	bl	90019a40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019c96:	b006      	add	sp, #24
90019c98:	bd70      	pop	{r4, r5, r6, pc}

90019c9a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90019c9a:	4602      	mov	r2, r0
90019c9c:	b530      	push	{r4, r5, lr}
90019c9e:	4604      	mov	r4, r0
90019ca0:	b085      	sub	sp, #20
90019ca2:	f852 0f08 	ldr.w	r0, [r2, #8]!
90019ca6:	460d      	mov	r5, r1
90019ca8:	466b      	mov	r3, sp
90019caa:	6851      	ldr	r1, [r2, #4]
90019cac:	c303      	stmia	r3!, {r0, r1}
90019cae:	4629      	mov	r1, r5
90019cb0:	4668      	mov	r0, sp
90019cb2:	f7f9 f8cf 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
90019cb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90019cba:	b12b      	cbz	r3, 90019cc8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90019cbc:	4669      	mov	r1, sp
90019cbe:	4620      	mov	r0, r4
90019cc0:	f7ff ffbf 	bl	90019c42 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90019cc4:	b005      	add	sp, #20
90019cc6:	bd30      	pop	{r4, r5, pc}
90019cc8:	3404      	adds	r4, #4
90019cca:	a802      	add	r0, sp, #8
90019ccc:	4621      	mov	r1, r4
90019cce:	f7ff fb8f 	bl	900193f0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019cd2:	f8bd 3000 	ldrh.w	r3, [sp]
90019cd6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90019cda:	4669      	mov	r1, sp
90019cdc:	4620      	mov	r0, r4
90019cde:	1a9b      	subs	r3, r3, r2
90019ce0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019ce4:	f8ad 3000 	strh.w	r3, [sp]
90019ce8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019cec:	1a9b      	subs	r3, r3, r2
90019cee:	f8ad 3002 	strh.w	r3, [sp, #2]
90019cf2:	f7f9 f94e 	bl	90012f92 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90019cf6:	e7e5      	b.n	90019cc4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90019cf8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90019cf8:	460b      	mov	r3, r1
90019cfa:	680a      	ldr	r2, [r1, #0]
90019cfc:	1d01      	adds	r1, r0, #4
90019cfe:	6992      	ldr	r2, [r2, #24]
90019d00:	4618      	mov	r0, r3
90019d02:	4710      	bx	r2

90019d04 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
90019d04:	4298      	cmp	r0, r3
90019d06:	d200      	bcs.n	90019d0a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
90019d08:	b913      	cbnz	r3, 90019d10 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
90019d0a:	440a      	add	r2, r1
90019d0c:	b210      	sxth	r0, r2
90019d0e:	4770      	bx	lr
90019d10:	ee07 0a90 	vmov	s15, r0
90019d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
90019d18:	ee07 3a90 	vmov	s15, r3
90019d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90019d24:	ee07 2a90 	vmov	s15, r2
90019d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019d2c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
90019d30:	ee07 1a90 	vmov	s15, r1
90019d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90019d38:	ee37 7a66 	vsub.f32	s14, s14, s13
90019d3c:	ee67 5a07 	vmul.f32	s11, s14, s14
90019d40:	eee5 6a87 	vfma.f32	s13, s11, s14
90019d44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
90019d48:	eee6 7a26 	vfma.f32	s15, s12, s13
90019d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90019d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90019d54:	bfcc      	ite	gt
90019d56:	ee77 7a87 	vaddgt.f32	s15, s15, s14
90019d5a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
90019d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90019d62:	ee17 3a90 	vmov	r3, s15
90019d66:	b218      	sxth	r0, r3
90019d68:	4770      	bx	lr

90019d6a <_ZN8touchgfx12TextProviderC1Ev>:
90019d6a:	b538      	push	{r3, r4, r5, lr}
90019d6c:	2500      	movs	r5, #0
90019d6e:	2302      	movs	r3, #2
90019d70:	4604      	mov	r4, r0
90019d72:	220e      	movs	r2, #14
90019d74:	7403      	strb	r3, [r0, #16]
90019d76:	4629      	mov	r1, r5
90019d78:	6145      	str	r5, [r0, #20]
90019d7a:	7605      	strb	r5, [r0, #24]
90019d7c:	83c5      	strh	r5, [r0, #30]
90019d7e:	8405      	strh	r5, [r0, #32]
90019d80:	86c5      	strh	r5, [r0, #54]	; 0x36
90019d82:	8705      	strh	r5, [r0, #56]	; 0x38
90019d84:	87c5      	strh	r5, [r0, #62]	; 0x3e
90019d86:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90019d8a:	e9c0 5500 	strd	r5, r5, [r0]
90019d8e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90019d92:	304c      	adds	r0, #76	; 0x4c
90019d94:	f00d ff62 	bl	90027c5c <memset>
90019d98:	2301      	movs	r3, #1
90019d9a:	4620      	mov	r0, r4
90019d9c:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90019da0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019da4:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90019da8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90019dac:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90019db0:	f7ee fa3e 	bl	90008230 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90019db4:	4620      	mov	r0, r4
90019db6:	bd38      	pop	{r3, r4, r5, pc}

90019db8 <_ZN8touchgfx12TextProvider11endOfStringEv>:
90019db8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019dba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019dbe:	8c40      	ldrh	r0, [r0, #34]	; 0x22
90019dc0:	fab0 f080 	clz	r0, r0
90019dc4:	0940      	lsrs	r0, r0, #5
90019dc6:	4770      	bx	lr

90019dc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90019dc8:	b530      	push	{r4, r5, lr}
90019dca:	2500      	movs	r5, #0
90019dcc:	2401      	movs	r4, #1
90019dce:	6843      	ldr	r3, [r0, #4]
90019dd0:	b913      	cbnz	r3, 90019dd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90019dd2:	6803      	ldr	r3, [r0, #0]
90019dd4:	b313      	cbz	r3, 90019e1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019dd6:	6043      	str	r3, [r0, #4]
90019dd8:	7e03      	ldrb	r3, [r0, #24]
90019dda:	b143      	cbz	r3, 90019dee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90019ddc:	6943      	ldr	r3, [r0, #20]
90019dde:	b12b      	cbz	r3, 90019dec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019de0:	881a      	ldrh	r2, [r3, #0]
90019de2:	b11a      	cbz	r2, 90019dec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019de4:	1c9a      	adds	r2, r3, #2
90019de6:	6142      	str	r2, [r0, #20]
90019de8:	8818      	ldrh	r0, [r3, #0]
90019dea:	bd30      	pop	{r4, r5, pc}
90019dec:	7605      	strb	r5, [r0, #24]
90019dee:	6843      	ldr	r3, [r0, #4]
90019df0:	8819      	ldrh	r1, [r3, #0]
90019df2:	b199      	cbz	r1, 90019e1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019df4:	1c9a      	adds	r2, r3, #2
90019df6:	2902      	cmp	r1, #2
90019df8:	6042      	str	r2, [r0, #4]
90019dfa:	d1f5      	bne.n	90019de8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90019dfc:	7c03      	ldrb	r3, [r0, #16]
90019dfe:	2b01      	cmp	r3, #1
90019e00:	d8e5      	bhi.n	90019dce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019e02:	1c5a      	adds	r2, r3, #1
90019e04:	3302      	adds	r3, #2
90019e06:	7402      	strb	r2, [r0, #16]
90019e08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90019e0c:	6143      	str	r3, [r0, #20]
90019e0e:	2b00      	cmp	r3, #0
90019e10:	d0dd      	beq.n	90019dce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019e12:	881b      	ldrh	r3, [r3, #0]
90019e14:	2b00      	cmp	r3, #0
90019e16:	d0da      	beq.n	90019dce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019e18:	7604      	strb	r4, [r0, #24]
90019e1a:	e7d8      	b.n	90019dce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019e1c:	2000      	movs	r0, #0
90019e1e:	e7e4      	b.n	90019dea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90019e20:	6001      	str	r1, [r0, #0]
90019e22:	2100      	movs	r1, #0
90019e24:	b430      	push	{r4, r5}
90019e26:	6041      	str	r1, [r0, #4]
90019e28:	6815      	ldr	r5, [r2, #0]
90019e2a:	6085      	str	r5, [r0, #8]
90019e2c:	6852      	ldr	r2, [r2, #4]
90019e2e:	6443      	str	r3, [r0, #68]	; 0x44
90019e30:	9b02      	ldr	r3, [sp, #8]
90019e32:	60c2      	str	r2, [r0, #12]
90019e34:	7401      	strb	r1, [r0, #16]
90019e36:	6141      	str	r1, [r0, #20]
90019e38:	7601      	strb	r1, [r0, #24]
90019e3a:	8701      	strh	r1, [r0, #56]	; 0x38
90019e3c:	8401      	strh	r1, [r0, #32]
90019e3e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90019e42:	6483      	str	r3, [r0, #72]	; 0x48
90019e44:	bc30      	pop	{r4, r5}
90019e46:	f7ee b9f3 	b.w	90008230 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90019e4a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
90019e4a:	b408      	push	{r3}
90019e4c:	b510      	push	{r4, lr}
90019e4e:	b085      	sub	sp, #20
90019e50:	ac07      	add	r4, sp, #28
90019e52:	f854 3b04 	ldr.w	r3, [r4], #4
90019e56:	9300      	str	r3, [sp, #0]
90019e58:	4613      	mov	r3, r2
90019e5a:	4622      	mov	r2, r4
90019e5c:	9403      	str	r4, [sp, #12]
90019e5e:	f7ff ffdf 	bl	90019e20 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019e62:	b005      	add	sp, #20
90019e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019e68:	b001      	add	sp, #4
90019e6a:	4770      	bx	lr

90019e6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90019e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
90019e6e:	4605      	mov	r5, r0
90019e70:	4608      	mov	r0, r1
90019e72:	b1f1      	cbz	r1, 90019eb2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90019e74:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90019e78:	460b      	mov	r3, r1
90019e7a:	f101 0708 	add.w	r7, r1, #8
90019e7e:	4622      	mov	r2, r4
90019e80:	6818      	ldr	r0, [r3, #0]
90019e82:	3308      	adds	r3, #8
90019e84:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019e88:	4626      	mov	r6, r4
90019e8a:	42bb      	cmp	r3, r7
90019e8c:	c603      	stmia	r6!, {r0, r1}
90019e8e:	4634      	mov	r4, r6
90019e90:	d1f6      	bne.n	90019e80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90019e92:	6818      	ldr	r0, [r3, #0]
90019e94:	6030      	str	r0, [r6, #0]
90019e96:	4610      	mov	r0, r2
90019e98:	889b      	ldrh	r3, [r3, #4]
90019e9a:	80b3      	strh	r3, [r6, #4]
90019e9c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90019ea0:	015b      	lsls	r3, r3, #5
90019ea2:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019ea6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90019eaa:	430b      	orrs	r3, r1
90019eac:	425b      	negs	r3, r3
90019eae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90019eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019eb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90019eb4:	b538      	push	{r3, r4, r5, lr}
90019eb6:	460c      	mov	r4, r1
90019eb8:	6811      	ldr	r1, [r2, #0]
90019eba:	4610      	mov	r0, r2
90019ebc:	68cd      	ldr	r5, [r1, #12]
90019ebe:	4619      	mov	r1, r3
90019ec0:	47a8      	blx	r5
90019ec2:	2800      	cmp	r0, #0
90019ec4:	bf08      	it	eq
90019ec6:	4620      	moveq	r0, r4
90019ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

90019ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90019ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90019ece:	4604      	mov	r4, r0
90019ed0:	4615      	mov	r5, r2
90019ed2:	4608      	mov	r0, r1
90019ed4:	b93a      	cbnz	r2, 90019ee6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90019ed6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019eda:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90019ede:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90019ee2:	4628      	mov	r0, r5
90019ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90019ee6:	f892 c00d 	ldrb.w	ip, [r2, #13]
90019eea:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90019eee:	8893      	ldrh	r3, [r2, #4]
90019ef0:	ea4f 160c 	mov.w	r6, ip, lsl #4
90019ef4:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019ef8:	79ee      	ldrb	r6, [r5, #7]
90019efa:	4316      	orrs	r6, r2
90019efc:	19da      	adds	r2, r3, r7
90019efe:	b291      	uxth	r1, r2
90019f00:	b2b7      	uxth	r7, r6
90019f02:	291d      	cmp	r1, #29
90019f04:	d87b      	bhi.n	90019ffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019f06:	2201      	movs	r2, #1
90019f08:	10f6      	asrs	r6, r6, #3
90019f0a:	408a      	lsls	r2, r1
90019f0c:	4974      	ldr	r1, [pc, #464]	; (9001a0e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90019f0e:	420a      	tst	r2, r1
90019f10:	d12e      	bne.n	90019f70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90019f12:	f412 7f60 	tst.w	r2, #896	; 0x380
90019f16:	d072      	beq.n	90019ffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019f18:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90019f1c:	462b      	mov	r3, r5
90019f1e:	f105 0e08 	add.w	lr, r5, #8
90019f22:	4615      	mov	r5, r2
90019f24:	6818      	ldr	r0, [r3, #0]
90019f26:	3308      	adds	r3, #8
90019f28:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019f2c:	4694      	mov	ip, r2
90019f2e:	4573      	cmp	r3, lr
90019f30:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019f34:	4662      	mov	r2, ip
90019f36:	d1f5      	bne.n	90019f24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90019f38:	6818      	ldr	r0, [r3, #0]
90019f3a:	f8cc 0000 	str.w	r0, [ip]
90019f3e:	889b      	ldrh	r3, [r3, #4]
90019f40:	f8ac 3004 	strh.w	r3, [ip, #4]
90019f44:	b2b3      	uxth	r3, r6
90019f46:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90019f4a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90019f4e:	1aca      	subs	r2, r1, r3
90019f50:	1bcf      	subs	r7, r1, r7
90019f52:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90019f56:	b292      	uxth	r2, r2
90019f58:	1afb      	subs	r3, r7, r3
90019f5a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90019f5e:	10d2      	asrs	r2, r2, #3
90019f60:	f002 0260 	and.w	r2, r2, #96	; 0x60
90019f64:	4302      	orrs	r2, r0
90019f66:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90019f6a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90019f6e:	e7b8      	b.n	90019ee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019f70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90019f72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019f76:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90019f78:	f640 6333 	movw	r3, #3635	; 0xe33
90019f7c:	4299      	cmp	r1, r3
90019f7e:	d110      	bne.n	90019fa2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90019f80:	6803      	ldr	r3, [r0, #0]
90019f82:	68db      	ldr	r3, [r3, #12]
90019f84:	4798      	blx	r3
90019f86:	7b41      	ldrb	r1, [r0, #13]
90019f88:	00cb      	lsls	r3, r1, #3
90019f8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019f8e:	7a03      	ldrb	r3, [r0, #8]
90019f90:	0648      	lsls	r0, r1, #25
90019f92:	ea43 0302 	orr.w	r3, r3, r2
90019f96:	bf44      	itt	mi
90019f98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019f9c:	b21b      	sxthmi	r3, r3
90019f9e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019fa2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90019fa6:	462a      	mov	r2, r5
90019fa8:	f105 0c08 	add.w	ip, r5, #8
90019fac:	443b      	add	r3, r7
90019fae:	4433      	add	r3, r6
90019fb0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90019fb4:	b29b      	uxth	r3, r3
90019fb6:	4635      	mov	r5, r6
90019fb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019fbc:	6810      	ldr	r0, [r2, #0]
90019fbe:	3208      	adds	r2, #8
90019fc0:	f852 1c04 	ldr.w	r1, [r2, #-4]
90019fc4:	4637      	mov	r7, r6
90019fc6:	4562      	cmp	r2, ip
90019fc8:	c703      	stmia	r7!, {r0, r1}
90019fca:	463e      	mov	r6, r7
90019fcc:	d1f6      	bne.n	90019fbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90019fce:	6810      	ldr	r0, [r2, #0]
90019fd0:	6038      	str	r0, [r7, #0]
90019fd2:	8892      	ldrh	r2, [r2, #4]
90019fd4:	80ba      	strh	r2, [r7, #4]
90019fd6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019fda:	10db      	asrs	r3, r3, #3
90019fdc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019fe8:	4313      	orrs	r3, r2
90019fea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90019fee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019ff2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90019ff6:	1a9b      	subs	r3, r3, r2
90019ff8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90019ffc:	e771      	b.n	90019ee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019ffe:	f023 0204 	bic.w	r2, r3, #4
9001a002:	f640 611b 	movw	r1, #3611	; 0xe1b
9001a006:	428a      	cmp	r2, r1
9001a008:	d003      	beq.n	9001a012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
9001a00a:	f640 621d 	movw	r2, #3613	; 0xe1d
9001a00e:	4293      	cmp	r3, r2
9001a010:	d120      	bne.n	9001a054 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
9001a012:	3b01      	subs	r3, #1
9001a014:	4602      	mov	r2, r0
9001a016:	4629      	mov	r1, r5
9001a018:	4620      	mov	r0, r4
9001a01a:	b29b      	uxth	r3, r3
9001a01c:	f7ff ff4a 	bl	90019eb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001a020:	7b41      	ldrb	r1, [r0, #13]
9001a022:	00cb      	lsls	r3, r1, #3
9001a024:	0649      	lsls	r1, r1, #25
9001a026:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a02a:	7a03      	ldrb	r3, [r0, #8]
9001a02c:	ea43 0302 	orr.w	r3, r3, r2
9001a030:	bf44      	itt	mi
9001a032:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a036:	b21b      	sxthmi	r3, r3
9001a038:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a03c:	7b6b      	ldrb	r3, [r5, #13]
9001a03e:	7aaa      	ldrb	r2, [r5, #10]
9001a040:	005b      	lsls	r3, r3, #1
9001a042:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001a046:	4313      	orrs	r3, r2
9001a048:	115a      	asrs	r2, r3, #5
9001a04a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
9001a04e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001a052:	e035      	b.n	9001a0c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
9001a054:	ea4f 02cc 	mov.w	r2, ip, lsl #3
9001a058:	f01c 0f40 	tst.w	ip, #64	; 0x40
9001a05c:	f402 7180 	and.w	r1, r2, #256	; 0x100
9001a060:	7a2a      	ldrb	r2, [r5, #8]
9001a062:	ea42 0201 	orr.w	r2, r2, r1
9001a066:	f640 6109 	movw	r1, #3593	; 0xe09
9001a06a:	bf1c      	itt	ne
9001a06c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
9001a070:	b212      	sxthne	r2, r2
9001a072:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001a076:	f023 0210 	bic.w	r2, r3, #16
9001a07a:	428a      	cmp	r2, r1
9001a07c:	d003      	beq.n	9001a086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
9001a07e:	f640 6213 	movw	r2, #3603	; 0xe13
9001a082:	4293      	cmp	r3, r2
9001a084:	d129      	bne.n	9001a0da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
9001a086:	7b6e      	ldrb	r6, [r5, #13]
9001a088:	4629      	mov	r1, r5
9001a08a:	0076      	lsls	r6, r6, #1
9001a08c:	f406 7280 	and.w	r2, r6, #256	; 0x100
9001a090:	7aae      	ldrb	r6, [r5, #10]
9001a092:	4316      	orrs	r6, r2
9001a094:	f640 6213 	movw	r2, #3603	; 0xe13
9001a098:	4293      	cmp	r3, r2
9001a09a:	4602      	mov	r2, r0
9001a09c:	4620      	mov	r0, r4
9001a09e:	bf16      	itet	ne
9001a0a0:	f103 33ff 	addne.w	r3, r3, #4294967295
9001a0a4:	f640 630c 	movweq	r3, #3596	; 0xe0c
9001a0a8:	b29b      	uxthne	r3, r3
9001a0aa:	f7ff ff03 	bl	90019eb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001a0ae:	7b43      	ldrb	r3, [r0, #13]
9001a0b0:	7a82      	ldrb	r2, [r0, #10]
9001a0b2:	005b      	lsls	r3, r3, #1
9001a0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001a0b8:	4313      	orrs	r3, r2
9001a0ba:	1af6      	subs	r6, r6, r3
9001a0bc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
9001a0c0:	7b69      	ldrb	r1, [r5, #13]
9001a0c2:	00cb      	lsls	r3, r1, #3
9001a0c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a0c8:	7a2b      	ldrb	r3, [r5, #8]
9001a0ca:	4313      	orrs	r3, r2
9001a0cc:	064a      	lsls	r2, r1, #25
9001a0ce:	bf44      	itt	mi
9001a0d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a0d4:	b21b      	sxthmi	r3, r3
9001a0d6:	1bdb      	subs	r3, r3, r7
9001a0d8:	e747      	b.n	90019f6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
9001a0da:	2300      	movs	r3, #0
9001a0dc:	e7b7      	b.n	9001a04e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
9001a0de:	bf00      	nop
9001a0e0:	3fc00079 	.word	0x3fc00079

9001a0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
9001a0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a0e8:	4604      	mov	r4, r0
9001a0ea:	b942      	cbnz	r2, 9001a0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001a0ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a0f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
9001a0f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
9001a0f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001a0fc:	e047      	b.n	9001a18e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001a0fe:	7b51      	ldrb	r1, [r2, #13]
9001a100:	8893      	ldrh	r3, [r2, #4]
9001a102:	010d      	lsls	r5, r1, #4
9001a104:	f405 7080 	and.w	r0, r5, #256	; 0x100
9001a108:	79d5      	ldrb	r5, [r2, #7]
9001a10a:	4305      	orrs	r5, r0
9001a10c:	2d04      	cmp	r5, #4
9001a10e:	bfcc      	ite	gt
9001a110:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
9001a114:	f04f 0e01 	movle.w	lr, #1
9001a118:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
9001a11c:	f200 80ab 	bhi.w	9001a276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
9001a120:	f240 60e7 	movw	r0, #1767	; 0x6e7
9001a124:	4283      	cmp	r3, r0
9001a126:	d216      	bcs.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a128:	f240 605b 	movw	r0, #1627	; 0x65b
9001a12c:	4283      	cmp	r3, r0
9001a12e:	d859      	bhi.n	9001a1e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
9001a130:	f240 6057 	movw	r0, #1623	; 0x657
9001a134:	4283      	cmp	r3, r0
9001a136:	d20e      	bcs.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a138:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001a13c:	d24a      	bcs.n	9001a1d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
9001a13e:	f240 604e 	movw	r0, #1614	; 0x64e
9001a142:	4283      	cmp	r3, r0
9001a144:	d207      	bcs.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a146:	f240 601a 	movw	r0, #1562	; 0x61a
9001a14a:	4283      	cmp	r3, r0
9001a14c:	d02a      	beq.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a14e:	d821      	bhi.n	9001a194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
9001a150:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
9001a154:	d35b      	bcc.n	9001a20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a156:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
9001a15a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a15e:	f040 80d0 	bne.w	9001a302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a162:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
9001a166:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a16a:	f040 80ca 	bne.w	9001a302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a16e:	00cb      	lsls	r3, r1, #3
9001a170:	0649      	lsls	r1, r1, #25
9001a172:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a176:	7a13      	ldrb	r3, [r2, #8]
9001a178:	ea43 0300 	orr.w	r3, r3, r0
9001a17c:	bf44      	itt	mi
9001a17e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a182:	b21b      	sxthmi	r3, r3
9001a184:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a188:	1b5d      	subs	r5, r3, r5
9001a18a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a18e:	4610      	mov	r0, r2
9001a190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a194:	f240 604b 	movw	r0, #1611	; 0x64b
9001a198:	4283      	cmp	r3, r0
9001a19a:	d338      	bcc.n	9001a20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a19c:	f240 604c 	movw	r0, #1612	; 0x64c
9001a1a0:	4283      	cmp	r3, r0
9001a1a2:	d9d8      	bls.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1a4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
9001a1a8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
9001a1ac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a1b0:	f040 80f3 	bne.w	9001a39a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a1b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a1b8:	f040 80ef 	bne.w	9001a39a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a1bc:	00cb      	lsls	r3, r1, #3
9001a1be:	064e      	lsls	r6, r1, #25
9001a1c0:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a1c4:	7a13      	ldrb	r3, [r2, #8]
9001a1c6:	ea43 0300 	orr.w	r3, r3, r0
9001a1ca:	bf44      	itt	mi
9001a1cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a1d0:	b21b      	sxthmi	r3, r3
9001a1d2:	e7d9      	b.n	9001a188 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
9001a1d4:	f240 6054 	movw	r0, #1620	; 0x654
9001a1d8:	4283      	cmp	r3, r0
9001a1da:	d8e3      	bhi.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a1dc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001a1e0:	d9e0      	bls.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a1e2:	e7b8      	b.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1e4:	f240 6074 	movw	r0, #1652	; 0x674
9001a1e8:	4283      	cmp	r3, r0
9001a1ea:	d0b4      	beq.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a1ec:	d82d      	bhi.n	9001a24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
9001a1ee:	f240 605e 	movw	r0, #1630	; 0x65e
9001a1f2:	4283      	cmp	r3, r0
9001a1f4:	d804      	bhi.n	9001a200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
9001a1f6:	f240 605d 	movw	r0, #1629	; 0x65d
9001a1fa:	4283      	cmp	r3, r0
9001a1fc:	d3d2      	bcc.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a1fe:	e7aa      	b.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a200:	f240 605f 	movw	r0, #1631	; 0x65f
9001a204:	4283      	cmp	r3, r0
9001a206:	d0cd      	beq.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a208:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
9001a20c:	d0a3      	beq.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a20e:	00cb      	lsls	r3, r1, #3
9001a210:	0649      	lsls	r1, r1, #25
9001a212:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a216:	7a13      	ldrb	r3, [r2, #8]
9001a218:	ea43 0300 	orr.w	r3, r3, r0
9001a21c:	bf44      	itt	mi
9001a21e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a222:	b21b      	sxthmi	r3, r3
9001a224:	1b5d      	subs	r5, r3, r5
9001a226:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a22a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a22e:	7b53      	ldrb	r3, [r2, #13]
9001a230:	015b      	lsls	r3, r3, #5
9001a232:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001a236:	7993      	ldrb	r3, [r2, #6]
9001a238:	430b      	orrs	r3, r1
9001a23a:	2105      	movs	r1, #5
9001a23c:	005b      	lsls	r3, r3, #1
9001a23e:	fb93 f3f1 	sdiv	r3, r3, r1
9001a242:	f992 1009 	ldrsb.w	r1, [r2, #9]
9001a246:	440b      	add	r3, r1
9001a248:	e756      	b.n	9001a0f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001a24a:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001a24e:	4283      	cmp	r3, r0
9001a250:	d809      	bhi.n	9001a266 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
9001a252:	f240 60df 	movw	r0, #1759	; 0x6df
9001a256:	4283      	cmp	r3, r0
9001a258:	f4bf af7d 	bcs.w	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a25c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
9001a260:	2b05      	cmp	r3, #5
9001a262:	d8d4      	bhi.n	9001a20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a264:	e777      	b.n	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a266:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001a26a:	4283      	cmp	r3, r0
9001a26c:	d09a      	beq.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a26e:	f240 60e4 	movw	r0, #1764	; 0x6e4
9001a272:	4283      	cmp	r3, r0
9001a274:	e7ca      	b.n	9001a20c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001a276:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001a27a:	d22b      	bcs.n	9001a2d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
9001a27c:	f640 00ed 	movw	r0, #2285	; 0x8ed
9001a280:	4283      	cmp	r3, r0
9001a282:	d28f      	bcs.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a284:	f640 00e5 	movw	r0, #2277	; 0x8e5
9001a288:	4283      	cmp	r3, r0
9001a28a:	d816      	bhi.n	9001a2ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
9001a28c:	f640 00e4 	movw	r0, #2276	; 0x8e4
9001a290:	4283      	cmp	r3, r0
9001a292:	f4bf af60 	bcs.w	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a296:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001a29a:	4283      	cmp	r3, r0
9001a29c:	d80a      	bhi.n	9001a2b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
9001a29e:	f240 60eb 	movw	r0, #1771	; 0x6eb
9001a2a2:	4283      	cmp	r3, r0
9001a2a4:	f4bf af57 	bcs.w	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a2a8:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001a2ac:	4283      	cmp	r3, r0
9001a2ae:	f43f af79 	beq.w	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a2b2:	e7ac      	b.n	9001a20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a2b4:	f240 60ed 	movw	r0, #1773	; 0x6ed
9001a2b8:	e7f8      	b.n	9001a2ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
9001a2ba:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001a2be:	4283      	cmp	r3, r0
9001a2c0:	d802      	bhi.n	9001a2c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
9001a2c2:	f640 00e7 	movw	r0, #2279	; 0x8e7
9001a2c6:	e798      	b.n	9001a1fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
9001a2c8:	f640 00e9 	movw	r0, #2281	; 0x8e9
9001a2cc:	4283      	cmp	r3, r0
9001a2ce:	f47f af42 	bne.w	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a2d2:	e767      	b.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a2d4:	f640 00f6 	movw	r0, #2294	; 0x8f6
9001a2d8:	4283      	cmp	r3, r0
9001a2da:	f43f af63 	beq.w	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a2de:	d802      	bhi.n	9001a2e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
9001a2e0:	f640 00f2 	movw	r0, #2290	; 0x8f2
9001a2e4:	e7f2      	b.n	9001a2cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
9001a2e6:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001a2ea:	4283      	cmp	r3, r0
9001a2ec:	d805      	bhi.n	9001a2fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
9001a2ee:	f640 00f9 	movw	r0, #2297	; 0x8f9
9001a2f2:	4283      	cmp	r3, r0
9001a2f4:	f4ff af2f 	bcc.w	9001a156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a2f8:	e754      	b.n	9001a1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a2fa:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001a2fe:	4283      	cmp	r3, r0
9001a300:	e7af      	b.n	9001a262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
9001a302:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a306:	4617      	mov	r7, r2
9001a308:	f102 0808 	add.w	r8, r2, #8
9001a30c:	4666      	mov	r6, ip
9001a30e:	6838      	ldr	r0, [r7, #0]
9001a310:	3708      	adds	r7, #8
9001a312:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a316:	46e6      	mov	lr, ip
9001a318:	4547      	cmp	r7, r8
9001a31a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
9001a31e:	46f4      	mov	ip, lr
9001a320:	d1f5      	bne.n	9001a30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
9001a322:	6838      	ldr	r0, [r7, #0]
9001a324:	f8ce 0000 	str.w	r0, [lr]
9001a328:	88b9      	ldrh	r1, [r7, #4]
9001a32a:	f8ae 1004 	strh.w	r1, [lr, #4]
9001a32e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a332:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a336:	d009      	beq.n	9001a34c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
9001a338:	7b51      	ldrb	r1, [r2, #13]
9001a33a:	7992      	ldrb	r2, [r2, #6]
9001a33c:	0149      	lsls	r1, r1, #5
9001a33e:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a342:	4311      	orrs	r1, r2
9001a344:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a348:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a34c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a350:	b2ad      	uxth	r5, r5
9001a352:	d00d      	beq.n	9001a370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
9001a354:	442b      	add	r3, r5
9001a356:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a35a:	b29b      	uxth	r3, r3
9001a35c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a360:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a364:	10db      	asrs	r3, r3, #3
9001a366:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a36a:	4313      	orrs	r3, r2
9001a36c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a370:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a374:	00cb      	lsls	r3, r1, #3
9001a376:	064f      	lsls	r7, r1, #25
9001a378:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a37c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a380:	ea43 0302 	orr.w	r3, r3, r2
9001a384:	bf44      	itt	mi
9001a386:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a38a:	b21b      	sxthmi	r3, r3
9001a38c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a390:	1b5b      	subs	r3, r3, r5
9001a392:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001a396:	4632      	mov	r2, r6
9001a398:	e6f9      	b.n	9001a18e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001a39a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a39e:	4617      	mov	r7, r2
9001a3a0:	f102 0908 	add.w	r9, r2, #8
9001a3a4:	4666      	mov	r6, ip
9001a3a6:	6838      	ldr	r0, [r7, #0]
9001a3a8:	3708      	adds	r7, #8
9001a3aa:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a3ae:	46e0      	mov	r8, ip
9001a3b0:	454f      	cmp	r7, r9
9001a3b2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001a3b6:	46c4      	mov	ip, r8
9001a3b8:	d1f5      	bne.n	9001a3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
9001a3ba:	6838      	ldr	r0, [r7, #0]
9001a3bc:	f8c8 0000 	str.w	r0, [r8]
9001a3c0:	88b9      	ldrh	r1, [r7, #4]
9001a3c2:	f8a8 1004 	strh.w	r1, [r8, #4]
9001a3c6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a3ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a3ce:	d009      	beq.n	9001a3e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
9001a3d0:	7b51      	ldrb	r1, [r2, #13]
9001a3d2:	7992      	ldrb	r2, [r2, #6]
9001a3d4:	0149      	lsls	r1, r1, #5
9001a3d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a3da:	4311      	orrs	r1, r2
9001a3dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a3e0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a3e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a3e8:	d00e      	beq.n	9001a408 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
9001a3ea:	eba3 030e 	sub.w	r3, r3, lr
9001a3ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a3f2:	b29b      	uxth	r3, r3
9001a3f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a3f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a3fc:	10db      	asrs	r3, r3, #3
9001a3fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a402:	4313      	orrs	r3, r2
9001a404:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a408:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a40c:	00cb      	lsls	r3, r1, #3
9001a40e:	0648      	lsls	r0, r1, #25
9001a410:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a414:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a418:	ea43 0302 	orr.w	r3, r3, r2
9001a41c:	bf44      	itt	mi
9001a41e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a422:	b21b      	sxthmi	r3, r3
9001a424:	1b5d      	subs	r5, r3, r5
9001a426:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a42a:	e7b4      	b.n	9001a396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

9001a42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a430:	461e      	mov	r6, r3
9001a432:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a434:	4604      	mov	r4, r0
9001a436:	4617      	mov	r7, r2
9001a438:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a43c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a440:	f7ed fea6 	bl	90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a444:	4605      	mov	r5, r0
9001a446:	b918      	cbnz	r0, 9001a450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
9001a448:	6030      	str	r0, [r6, #0]
9001a44a:	4628      	mov	r0, r5
9001a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001a450:	683b      	ldr	r3, [r7, #0]
9001a452:	4601      	mov	r1, r0
9001a454:	4638      	mov	r0, r7
9001a456:	68db      	ldr	r3, [r3, #12]
9001a458:	4798      	blx	r3
9001a45a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a45e:	4602      	mov	r2, r0
9001a460:	6030      	str	r0, [r6, #0]
9001a462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a466:	d213      	bcs.n	9001a490 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
9001a468:	4643      	mov	r3, r8
9001a46a:	4639      	mov	r1, r7
9001a46c:	4620      	mov	r0, r4
9001a46e:	f7ff fe39 	bl	9001a0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a472:	6030      	str	r0, [r6, #0]
9001a474:	6833      	ldr	r3, [r6, #0]
9001a476:	b143      	cbz	r3, 9001a48a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
9001a478:	7b5a      	ldrb	r2, [r3, #13]
9001a47a:	7a9b      	ldrb	r3, [r3, #10]
9001a47c:	0052      	lsls	r2, r2, #1
9001a47e:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a482:	4313      	orrs	r3, r2
9001a484:	bf0c      	ite	eq
9001a486:	2301      	moveq	r3, #1
9001a488:	2300      	movne	r3, #0
9001a48a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a48e:	e7dc      	b.n	9001a44a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
9001a490:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a494:	b29b      	uxth	r3, r3
9001a496:	2b7f      	cmp	r3, #127	; 0x7f
9001a498:	d804      	bhi.n	9001a4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
9001a49a:	4639      	mov	r1, r7
9001a49c:	4620      	mov	r0, r4
9001a49e:	f7ff fd15 	bl	90019ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a4a2:	e7e6      	b.n	9001a472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
9001a4a4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a4a8:	2b00      	cmp	r3, #0
9001a4aa:	d0e3      	beq.n	9001a474 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a4ac:	f640 1302 	movw	r3, #2306	; 0x902
9001a4b0:	429d      	cmp	r5, r3
9001a4b2:	d1df      	bne.n	9001a474 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a4b4:	4601      	mov	r1, r0
9001a4b6:	4620      	mov	r0, r4
9001a4b8:	f7ff fcd8 	bl	90019e6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a4bc:	e7d9      	b.n	9001a472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

9001a4be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001a4be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9001a4c2:	461e      	mov	r6, r3
9001a4c4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a4c6:	4604      	mov	r4, r0
9001a4c8:	4617      	mov	r7, r2
9001a4ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a4ce:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a4d2:	f7ed fe5d 	bl	90008190 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a4d6:	4605      	mov	r5, r0
9001a4d8:	b918      	cbnz	r0, 9001a4e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
9001a4da:	6030      	str	r0, [r6, #0]
9001a4dc:	4628      	mov	r0, r5
9001a4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9001a4e2:	683b      	ldr	r3, [r7, #0]
9001a4e4:	4601      	mov	r1, r0
9001a4e6:	4638      	mov	r0, r7
9001a4e8:	f8d3 9008 	ldr.w	r9, [r3, #8]
9001a4ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
9001a4f0:	47c8      	blx	r9
9001a4f2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a4f6:	4602      	mov	r2, r0
9001a4f8:	6030      	str	r0, [r6, #0]
9001a4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a4fe:	d213      	bcs.n	9001a528 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
9001a500:	4643      	mov	r3, r8
9001a502:	4639      	mov	r1, r7
9001a504:	4620      	mov	r0, r4
9001a506:	f7ff fded 	bl	9001a0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a50a:	6030      	str	r0, [r6, #0]
9001a50c:	6833      	ldr	r3, [r6, #0]
9001a50e:	b143      	cbz	r3, 9001a522 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
9001a510:	7b5a      	ldrb	r2, [r3, #13]
9001a512:	7a9b      	ldrb	r3, [r3, #10]
9001a514:	0052      	lsls	r2, r2, #1
9001a516:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a51a:	4313      	orrs	r3, r2
9001a51c:	bf0c      	ite	eq
9001a51e:	2301      	moveq	r3, #1
9001a520:	2300      	movne	r3, #0
9001a522:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a526:	e7d9      	b.n	9001a4dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
9001a528:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a52c:	b29b      	uxth	r3, r3
9001a52e:	2b7f      	cmp	r3, #127	; 0x7f
9001a530:	d804      	bhi.n	9001a53c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
9001a532:	4639      	mov	r1, r7
9001a534:	4620      	mov	r0, r4
9001a536:	f7ff fcc9 	bl	90019ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a53a:	e7e6      	b.n	9001a50a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
9001a53c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a540:	2b00      	cmp	r3, #0
9001a542:	d0e3      	beq.n	9001a50c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a544:	f640 1302 	movw	r3, #2306	; 0x902
9001a548:	429d      	cmp	r5, r3
9001a54a:	d1df      	bne.n	9001a50c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a54c:	4601      	mov	r1, r0
9001a54e:	4620      	mov	r0, r4
9001a550:	f7ff fc8c 	bl	90019e6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a554:	e7d9      	b.n	9001a50a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

9001a556 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
9001a556:	b510      	push	{r4, lr}
9001a558:	4604      	mov	r4, r0
9001a55a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
9001a55e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a560:	b1e1      	cbz	r1, 9001a59c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a562:	2b0a      	cmp	r3, #10
9001a564:	d02d      	beq.n	9001a5c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a566:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
9001a568:	3901      	subs	r1, #1
9001a56a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
9001a56e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
9001a570:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
9001a574:	1c51      	adds	r1, r2, #1
9001a576:	b289      	uxth	r1, r1
9001a578:	2901      	cmp	r1, #1
9001a57a:	bf8a      	itet	hi
9001a57c:	f102 32ff 	addhi.w	r2, r2, #4294967295
9001a580:	87e1      	strhls	r1, [r4, #62]	; 0x3e
9001a582:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
9001a584:	1c5a      	adds	r2, r3, #1
9001a586:	8722      	strh	r2, [r4, #56]	; 0x38
9001a588:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a58a:	4413      	add	r3, r2
9001a58c:	b29b      	uxth	r3, r3
9001a58e:	2b09      	cmp	r3, #9
9001a590:	bf88      	it	hi
9001a592:	3b0a      	subhi	r3, #10
9001a594:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a598:	8458      	strh	r0, [r3, #34]	; 0x22
9001a59a:	e7de      	b.n	9001a55a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001a59c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a59e:	2b0a      	cmp	r3, #10
9001a5a0:	d00f      	beq.n	9001a5c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a5a2:	4620      	mov	r0, r4
9001a5a4:	f7ff fc10 	bl	90019dc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
9001a5a8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a5aa:	1c5a      	adds	r2, r3, #1
9001a5ac:	8722      	strh	r2, [r4, #56]	; 0x38
9001a5ae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a5b0:	4413      	add	r3, r2
9001a5b2:	b29b      	uxth	r3, r3
9001a5b4:	2b09      	cmp	r3, #9
9001a5b6:	bf88      	it	hi
9001a5b8:	3b0a      	subhi	r3, #10
9001a5ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a5be:	8458      	strh	r0, [r3, #34]	; 0x22
9001a5c0:	e7ec      	b.n	9001a59c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a5c2:	bd10      	pop	{r4, pc}

9001a5c4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001a5c4:	b538      	push	{r3, r4, r5, lr}
9001a5c6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a5c8:	4604      	mov	r4, r0
9001a5ca:	eb00 0243 	add.w	r2, r0, r3, lsl #1
9001a5ce:	8c55      	ldrh	r5, [r2, #34]	; 0x22
9001a5d0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001a5d2:	3a01      	subs	r2, #1
9001a5d4:	8702      	strh	r2, [r0, #56]	; 0x38
9001a5d6:	1c5a      	adds	r2, r3, #1
9001a5d8:	b292      	uxth	r2, r2
9001a5da:	2a09      	cmp	r2, #9
9001a5dc:	bf8a      	itet	hi
9001a5de:	3b09      	subhi	r3, #9
9001a5e0:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001a5e2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001a5e4:	f7ff ffb7 	bl	9001a556 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001a5e8:	8c23      	ldrh	r3, [r4, #32]
9001a5ea:	2b01      	cmp	r3, #1
9001a5ec:	bf9c      	itt	ls
9001a5ee:	3301      	addls	r3, #1
9001a5f0:	8423      	strhls	r3, [r4, #32]
9001a5f2:	8be3      	ldrh	r3, [r4, #30]
9001a5f4:	b90b      	cbnz	r3, 9001a5fa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001a5f6:	2302      	movs	r3, #2
9001a5f8:	83e3      	strh	r3, [r4, #30]
9001a5fa:	8be3      	ldrh	r3, [r4, #30]
9001a5fc:	4628      	mov	r0, r5
9001a5fe:	3b01      	subs	r3, #1
9001a600:	b29b      	uxth	r3, r3
9001a602:	83e3      	strh	r3, [r4, #30]
9001a604:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a608:	8365      	strh	r5, [r4, #26]
9001a60a:	bd38      	pop	{r3, r4, r5, pc}

9001a60c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001a60c:	428a      	cmp	r2, r1
9001a60e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a612:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
9001a614:	d932      	bls.n	9001a67c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
9001a616:	8f05      	ldrh	r5, [r0, #56]	; 0x38
9001a618:	1a54      	subs	r4, r2, r1
9001a61a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
9001a61e:	19ee      	adds	r6, r5, r7
9001a620:	fa1f fe84 	uxth.w	lr, r4
9001a624:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
9001a628:	3e01      	subs	r6, #1
9001a62a:	b2b4      	uxth	r4, r6
9001a62c:	eba4 090e 	sub.w	r9, r4, lr
9001a630:	fa1f f989 	uxth.w	r9, r9
9001a634:	2c09      	cmp	r4, #9
9001a636:	4626      	mov	r6, r4
9001a638:	bf88      	it	hi
9001a63a:	f1a4 060a 	subhi.w	r6, r4, #10
9001a63e:	f1bc 0f00 	cmp.w	ip, #0
9001a642:	f104 34ff 	add.w	r4, r4, #4294967295
9001a646:	bf08      	it	eq
9001a648:	f04f 0c02 	moveq.w	ip, #2
9001a64c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a650:	b2a4      	uxth	r4, r4
9001a652:	f10c 3cff 	add.w	ip, ip, #4294967295
9001a656:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001a65a:	454c      	cmp	r4, r9
9001a65c:	fa1f fc8c 	uxth.w	ip, ip
9001a660:	eb00 064c 	add.w	r6, r0, ip, lsl #1
9001a664:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
9001a668:	d1e4      	bne.n	9001a634 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001a66a:	eba5 050e 	sub.w	r5, r5, lr
9001a66e:	eb0e 0408 	add.w	r4, lr, r8
9001a672:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001a676:	8705      	strh	r5, [r0, #56]	; 0x38
9001a678:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001a67c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001a67e:	250a      	movs	r5, #10
9001a680:	1a64      	subs	r4, r4, r1
9001a682:	4439      	add	r1, r7
9001a684:	b289      	uxth	r1, r1
9001a686:	8704      	strh	r4, [r0, #56]	; 0x38
9001a688:	2909      	cmp	r1, #9
9001a68a:	bf88      	it	hi
9001a68c:	390a      	subhi	r1, #10
9001a68e:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a690:	b18a      	cbz	r2, 9001a6b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001a692:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001a694:	3a01      	subs	r2, #1
9001a696:	3101      	adds	r1, #1
9001a698:	b292      	uxth	r2, r2
9001a69a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001a69e:	8701      	strh	r1, [r0, #56]	; 0x38
9001a6a0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a6a2:	b901      	cbnz	r1, 9001a6a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001a6a4:	86c5      	strh	r5, [r0, #54]	; 0x36
9001a6a6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a6a8:	3901      	subs	r1, #1
9001a6aa:	b289      	uxth	r1, r1
9001a6ac:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a6ae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001a6b2:	844c      	strh	r4, [r1, #34]	; 0x22
9001a6b4:	e7ec      	b.n	9001a690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001a6b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a6ba:	f7ff bf4c 	b.w	9001a556 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001a6be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001a6be:	b570      	push	{r4, r5, r6, lr}
9001a6c0:	2500      	movs	r5, #0
9001a6c2:	4295      	cmp	r5, r2
9001a6c4:	d011      	beq.n	9001a6ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001a6c6:	8bc4      	ldrh	r4, [r0, #30]
9001a6c8:	f831 6b02 	ldrh.w	r6, [r1], #2
9001a6cc:	4414      	add	r4, r2
9001a6ce:	3c01      	subs	r4, #1
9001a6d0:	1b64      	subs	r4, r4, r5
9001a6d2:	b2a4      	uxth	r4, r4
9001a6d4:	2c01      	cmp	r4, #1
9001a6d6:	bf88      	it	hi
9001a6d8:	3c02      	subhi	r4, #2
9001a6da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a6de:	8b64      	ldrh	r4, [r4, #26]
9001a6e0:	42b4      	cmp	r4, r6
9001a6e2:	d117      	bne.n	9001a714 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001a6e4:	3501      	adds	r5, #1
9001a6e6:	b2ad      	uxth	r5, r5
9001a6e8:	e7eb      	b.n	9001a6c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001a6ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a6ee:	2400      	movs	r4, #0
9001a6f0:	4413      	add	r3, r2
9001a6f2:	b2a2      	uxth	r2, r4
9001a6f4:	429a      	cmp	r2, r3
9001a6f6:	da0f      	bge.n	9001a718 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
9001a6f8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001a6fa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001a6fe:	3401      	adds	r4, #1
9001a700:	4432      	add	r2, r6
9001a702:	b292      	uxth	r2, r2
9001a704:	2a09      	cmp	r2, #9
9001a706:	bf88      	it	hi
9001a708:	3a0a      	subhi	r2, #10
9001a70a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a70e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
9001a710:	42aa      	cmp	r2, r5
9001a712:	d0ee      	beq.n	9001a6f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001a714:	2000      	movs	r0, #0
9001a716:	bd70      	pop	{r4, r5, r6, pc}
9001a718:	2001      	movs	r0, #1
9001a71a:	e7fc      	b.n	9001a716 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

9001a71c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001a71c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a720:	4605      	mov	r5, r0
9001a722:	4616      	mov	r6, r2
9001a724:	1c8c      	adds	r4, r1, #2
9001a726:	8809      	ldrh	r1, [r1, #0]
9001a728:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001a72c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001a730:	42b3      	cmp	r3, r6
9001a732:	d124      	bne.n	9001a77e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001a734:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001a738:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001a73c:	f001 070f 	and.w	r7, r1, #15
9001a740:	4652      	mov	r2, sl
9001a742:	f8cd 8000 	str.w	r8, [sp]
9001a746:	464b      	mov	r3, r9
9001a748:	4621      	mov	r1, r4
9001a74a:	4628      	mov	r0, r5
9001a74c:	f7ff ffb7 	bl	9001a6be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001a750:	4683      	mov	fp, r0
9001a752:	b168      	cbz	r0, 9001a770 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001a754:	eb0a 0109 	add.w	r1, sl, r9
9001a758:	463a      	mov	r2, r7
9001a75a:	4628      	mov	r0, r5
9001a75c:	4441      	add	r1, r8
9001a75e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001a762:	4649      	mov	r1, r9
9001a764:	f7ff ff52 	bl	9001a60c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001a768:	4658      	mov	r0, fp
9001a76a:	b003      	add	sp, #12
9001a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a770:	eb07 010a 	add.w	r1, r7, sl
9001a774:	4449      	add	r1, r9
9001a776:	4441      	add	r1, r8
9001a778:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001a77c:	e7d2      	b.n	9001a724 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001a77e:	f04f 0b00 	mov.w	fp, #0
9001a782:	e7f1      	b.n	9001a768 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001a784 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001a784:	b570      	push	{r4, r5, r6, lr}
9001a786:	8810      	ldrh	r0, [r2, #0]
9001a788:	4298      	cmp	r0, r3
9001a78a:	d817      	bhi.n	9001a7bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a78c:	1e48      	subs	r0, r1, #1
9001a78e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001a792:	4298      	cmp	r0, r3
9001a794:	d312      	bcc.n	9001a7bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a796:	2400      	movs	r4, #0
9001a798:	428c      	cmp	r4, r1
9001a79a:	d20f      	bcs.n	9001a7bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a79c:	1860      	adds	r0, r4, r1
9001a79e:	1040      	asrs	r0, r0, #1
9001a7a0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001a7a4:	0085      	lsls	r5, r0, #2
9001a7a6:	42b3      	cmp	r3, r6
9001a7a8:	d902      	bls.n	9001a7b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001a7aa:	3001      	adds	r0, #1
9001a7ac:	b284      	uxth	r4, r0
9001a7ae:	e7f3      	b.n	9001a798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a7b0:	d201      	bcs.n	9001a7b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001a7b2:	b281      	uxth	r1, r0
9001a7b4:	e7f0      	b.n	9001a798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a7b6:	442a      	add	r2, r5
9001a7b8:	8850      	ldrh	r0, [r2, #2]
9001a7ba:	bd70      	pop	{r4, r5, r6, pc}
9001a7bc:	2000      	movs	r0, #0
9001a7be:	e7fc      	b.n	9001a7ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001a7c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001a7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a7c4:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001a7c6:	4604      	mov	r4, r0
9001a7c8:	260b      	movs	r6, #11
9001a7ca:	886f      	ldrh	r7, [r5, #2]
9001a7cc:	087f      	lsrs	r7, r7, #1
9001a7ce:	3e01      	subs	r6, #1
9001a7d0:	d013      	beq.n	9001a7fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a7d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001a7d4:	462a      	mov	r2, r5
9001a7d6:	4639      	mov	r1, r7
9001a7d8:	4620      	mov	r0, r4
9001a7da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a7de:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a7e2:	4643      	mov	r3, r8
9001a7e4:	f7ff ffce 	bl	9001a784 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001a7e8:	b138      	cbz	r0, 9001a7fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a7ea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001a7ee:	4642      	mov	r2, r8
9001a7f0:	4620      	mov	r0, r4
9001a7f2:	f7ff ff93 	bl	9001a71c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001a7f6:	2800      	cmp	r0, #0
9001a7f8:	d1e9      	bne.n	9001a7ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001a7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9001a800 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001a800:	b570      	push	{r4, r5, r6, lr}
9001a802:	694a      	ldr	r2, [r1, #20]
9001a804:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001a806:	684b      	ldr	r3, [r1, #4]
9001a808:	1b54      	subs	r4, r2, r5
9001a80a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001a80c:	f000 8106 	beq.w	9001aa1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001a810:	1b9b      	subs	r3, r3, r6
9001a812:	d003      	beq.n	9001a81c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a814:	4363      	muls	r3, r4
9001a816:	2210      	movs	r2, #16
9001a818:	fb93 f3f2 	sdiv	r3, r3, r2
9001a81c:	680c      	ldr	r4, [r1, #0]
9001a81e:	698a      	ldr	r2, [r1, #24]
9001a820:	1b65      	subs	r5, r4, r5
9001a822:	f000 80fd 	beq.w	9001aa20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001a826:	1b92      	subs	r2, r2, r6
9001a828:	d003      	beq.n	9001a832 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a82a:	436a      	muls	r2, r5
9001a82c:	2410      	movs	r4, #16
9001a82e:	fb92 f2f4 	sdiv	r2, r2, r4
9001a832:	1a9b      	subs	r3, r3, r2
9001a834:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001aa5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001a838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a83c:	460a      	mov	r2, r1
9001a83e:	ee07 3a90 	vmov	s15, r3
9001a842:	f100 040c 	add.w	r4, r0, #12
9001a846:	4603      	mov	r3, r0
9001a848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a84c:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a850:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001a854:	eeb1 6a43 	vneg.f32	s12, s6
9001a858:	edd2 7a02 	vldr	s15, [r2, #8]
9001a85c:	3214      	adds	r2, #20
9001a85e:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001a862:	ece3 6a01 	vstmia	r3!, {s13}
9001a866:	429c      	cmp	r4, r3
9001a868:	ed52 7a02 	vldr	s15, [r2, #-8]
9001a86c:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a870:	edc3 7a02 	vstr	s15, [r3, #8]
9001a874:	ed52 7a01 	vldr	s15, [r2, #-4]
9001a878:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a87c:	edc3 7a05 	vstr	s15, [r3, #20]
9001a880:	d1ea      	bne.n	9001a858 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001a882:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a884:	698b      	ldr	r3, [r1, #24]
9001a886:	edd0 4a02 	vldr	s9, [r0, #8]
9001a88a:	1a9b      	subs	r3, r3, r2
9001a88c:	edd0 3a00 	vldr	s7, [r0]
9001a890:	edd0 6a01 	vldr	s13, [r0, #4]
9001a894:	ee07 3a90 	vmov	s15, r3
9001a898:	684b      	ldr	r3, [r1, #4]
9001a89a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001a89e:	ed90 5a05 	vldr	s10, [r0, #20]
9001a8a2:	1a9b      	subs	r3, r3, r2
9001a8a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a8a8:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001a8ac:	ed90 2a03 	vldr	s4, [r0, #12]
9001a8b0:	ee07 3a10 	vmov	s14, r3
9001a8b4:	edd0 5a04 	vldr	s11, [r0, #16]
9001a8b8:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a8bc:	ed90 1a07 	vldr	s2, [r0, #28]
9001a8c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a8c4:	edd0 2a06 	vldr	s5, [r0, #24]
9001a8c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001a8cc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001a8d0:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a8d4:	ee32 5a45 	vsub.f32	s10, s4, s10
9001a8d8:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a8dc:	ee67 7a83 	vmul.f32	s15, s15, s6
9001a8e0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001a8e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a8e6:	694a      	ldr	r2, [r1, #20]
9001a8e8:	1b13      	subs	r3, r2, r4
9001a8ea:	ee07 3a10 	vmov	s14, r3
9001a8ee:	680b      	ldr	r3, [r1, #0]
9001a8f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a8f4:	1b1b      	subs	r3, r3, r4
9001a8f6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a8fa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001a8fe:	ee07 3a10 	vmov	s14, r3
9001a902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a906:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a90a:	eee6 4a87 	vfma.f32	s9, s13, s14
9001a90e:	ee64 4a86 	vmul.f32	s9, s9, s12
9001a912:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001a916:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a918:	698b      	ldr	r3, [r1, #24]
9001a91a:	1a9b      	subs	r3, r3, r2
9001a91c:	ee06 3a90 	vmov	s13, r3
9001a920:	684b      	ldr	r3, [r1, #4]
9001a922:	1a9b      	subs	r3, r3, r2
9001a924:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a928:	ee07 3a10 	vmov	s14, r3
9001a92c:	ee66 6a84 	vmul.f32	s13, s13, s8
9001a930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a934:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001a938:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a93c:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a940:	ee66 6a83 	vmul.f32	s13, s13, s6
9001a944:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001a948:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a94a:	694a      	ldr	r2, [r1, #20]
9001a94c:	1b13      	subs	r3, r2, r4
9001a94e:	ee07 3a10 	vmov	s14, r3
9001a952:	680b      	ldr	r3, [r1, #0]
9001a954:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a958:	1b1b      	subs	r3, r3, r4
9001a95a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a95e:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001a962:	ee07 3a10 	vmov	s14, r3
9001a966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a96a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a96e:	eea5 5a87 	vfma.f32	s10, s11, s14
9001a972:	edd0 5a08 	vldr	s11, [r0, #32]
9001a976:	ee31 1a65 	vsub.f32	s2, s2, s11
9001a97a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001a97e:	ee25 5a06 	vmul.f32	s10, s10, s12
9001a982:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001a986:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a988:	698b      	ldr	r3, [r1, #24]
9001a98a:	1a9b      	subs	r3, r3, r2
9001a98c:	ee07 3a10 	vmov	s14, r3
9001a990:	684b      	ldr	r3, [r1, #4]
9001a992:	1a9b      	subs	r3, r3, r2
9001a994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a998:	ee01 3a90 	vmov	s3, r3
9001a99c:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a9a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001a9a4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001a9a8:	ee61 1a84 	vmul.f32	s3, s3, s8
9001a9ac:	eea1 7a21 	vfma.f32	s14, s2, s3
9001a9b0:	ee27 7a03 	vmul.f32	s14, s14, s6
9001a9b4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a9b8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a9ba:	694a      	ldr	r2, [r1, #20]
9001a9bc:	1b13      	subs	r3, r2, r4
9001a9be:	ee03 3a10 	vmov	s6, r3
9001a9c2:	680b      	ldr	r3, [r1, #0]
9001a9c4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a9c8:	1b1b      	subs	r3, r3, r4
9001a9ca:	ee23 3a04 	vmul.f32	s6, s6, s8
9001a9ce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001a9d2:	ee03 3a10 	vmov	s6, r3
9001a9d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a9da:	ee23 4a04 	vmul.f32	s8, s6, s8
9001a9de:	eee1 5a04 	vfma.f32	s11, s2, s8
9001a9e2:	ee25 6a86 	vmul.f32	s12, s11, s12
9001a9e6:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001a9ea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001a9ee:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001a9f2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a9fa:	dd13      	ble.n	9001aa24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001a9fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001aa00:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001aa04:	63c3      	str	r3, [r0, #60]	; 0x3c
9001aa06:	eee3 7a87 	vfma.f32	s15, s7, s14
9001aa0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001aa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001aa12:	dd15      	ble.n	9001aa40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001aa14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001aa18:	6403      	str	r3, [r0, #64]	; 0x40
9001aa1a:	bd70      	pop	{r4, r5, r6, pc}
9001aa1c:	4623      	mov	r3, r4
9001aa1e:	e6fd      	b.n	9001a81c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001aa20:	462a      	mov	r2, r5
9001aa22:	e706      	b.n	9001a832 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001aa24:	d502      	bpl.n	9001aa2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001aa26:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001aa2a:	e7e9      	b.n	9001aa00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001aa2c:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001aa30:	eea3 2a85 	vfma.f32	s4, s7, s10
9001aa34:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001aa3c:	dade      	bge.n	9001a9fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001aa3e:	e7f2      	b.n	9001aa26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001aa40:	d502      	bpl.n	9001aa48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001aa42:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001aa46:	e7e7      	b.n	9001aa18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001aa48:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001aa4c:	eee3 4a86 	vfma.f32	s9, s7, s12
9001aa50:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001aa58:	dadc      	bge.n	9001aa14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001aa5a:	e7f2      	b.n	9001aa42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001aa5c:	3d800000 	.word	0x3d800000

9001aa60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001aa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001aa64:	2714      	movs	r7, #20
9001aa66:	435f      	muls	r7, r3
9001aa68:	eb02 0c07 	add.w	ip, r2, r7
9001aa6c:	f8dc 5004 	ldr.w	r5, [ip, #4]
9001aa70:	f115 0e0f 	adds.w	lr, r5, #15
9001aa74:	f100 80a2 	bmi.w	9001abbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001aa78:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001aa7c:	9c08      	ldr	r4, [sp, #32]
9001aa7e:	2614      	movs	r6, #20
9001aa80:	f8c0 e014 	str.w	lr, [r0, #20]
9001aa84:	4366      	muls	r6, r4
9001aa86:	eb02 0806 	add.w	r8, r2, r6
9001aa8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001aa8e:	f115 040f 	adds.w	r4, r5, #15
9001aa92:	f100 809f 	bmi.w	9001abd4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001aa96:	1124      	asrs	r4, r4, #4
9001aa98:	eba4 040e 	sub.w	r4, r4, lr
9001aa9c:	6184      	str	r4, [r0, #24]
9001aa9e:	2c00      	cmp	r4, #0
9001aaa0:	f000 808a 	beq.w	9001abb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001aaa4:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001aaa8:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001aaac:	5995      	ldr	r5, [r2, r6]
9001aaae:	eba4 0809 	sub.w	r8, r4, r9
9001aab2:	59d4      	ldr	r4, [r2, r7]
9001aab4:	eba5 0a04 	sub.w	sl, r5, r4
9001aab8:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001aabc:	ea4f 150a 	mov.w	r5, sl, lsl #4
9001aac0:	fb0e fe05 	mul.w	lr, lr, r5
9001aac4:	fb0a ee19 	mls	lr, sl, r9, lr
9001aac8:	fb08 e404 	mla	r4, r8, r4, lr
9001aacc:	3c01      	subs	r4, #1
9001aace:	19a4      	adds	r4, r4, r6
9001aad0:	f100 808c 	bmi.w	9001abec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001aad4:	fb94 fef6 	sdiv	lr, r4, r6
9001aad8:	fb06 441e 	mls	r4, r6, lr, r4
9001aadc:	f8c0 e000 	str.w	lr, [r0]
9001aae0:	6104      	str	r4, [r0, #16]
9001aae2:	2d00      	cmp	r5, #0
9001aae4:	f2c0 8095 	blt.w	9001ac12 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
9001aae8:	fb95 f4f6 	sdiv	r4, r5, r6
9001aaec:	fb06 5514 	mls	r5, r6, r4, r5
9001aaf0:	6044      	str	r4, [r0, #4]
9001aaf2:	6085      	str	r5, [r0, #8]
9001aaf4:	60c6      	str	r6, [r0, #12]
9001aaf6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001aafa:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001aafe:	6945      	ldr	r5, [r0, #20]
9001ab00:	59d2      	ldr	r2, [r2, r7]
9001ab02:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001ab06:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001ac34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001ab0a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001ab0e:	ee07 4a10 	vmov	s14, r4
9001ab12:	6804      	ldr	r4, [r0, #0]
9001ab14:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001ab18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001ab1c:	ee07 2a90 	vmov	s15, r2
9001ab20:	ee27 7a26 	vmul.f32	s14, s14, s13
9001ab24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001ab28:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001ab2c:	edd3 6a00 	vldr	s13, [r3]
9001ab30:	eee6 6a07 	vfma.f32	s13, s12, s14
9001ab34:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
9001ab38:	eee6 6a27 	vfma.f32	s13, s12, s15
9001ab3c:	edc0 6a07 	vstr	s13, [r0, #28]
9001ab40:	edd0 6a01 	vldr	s13, [r0, #4]
9001ab44:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
9001ab48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001ab4c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001ab50:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001ab54:	ed80 6a08 	vstr	s12, [r0, #32]
9001ab58:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001ab5a:	6242      	str	r2, [r0, #36]	; 0x24
9001ab5c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
9001ab60:	ed93 6a03 	vldr	s12, [r3, #12]
9001ab64:	eea5 6a87 	vfma.f32	s12, s11, s14
9001ab68:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001ab6c:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001ab70:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001ab74:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001ab78:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001ab7c:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001ab80:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001ab84:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001ab86:	6302      	str	r2, [r0, #48]	; 0x30
9001ab88:	ed93 6a06 	vldr	s12, [r3, #24]
9001ab8c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
9001ab90:	eea5 6a87 	vfma.f32	s12, s11, s14
9001ab94:	eeb0 7a46 	vmov.f32	s14, s12
9001ab98:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001ab9c:	eea6 7a27 	vfma.f32	s14, s12, s15
9001aba0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001aba4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
9001aba8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001abac:	eee6 7a87 	vfma.f32	s15, s13, s14
9001abb0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001abb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001abb6:	63c3      	str	r3, [r0, #60]	; 0x3c
9001abb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001abbc:	2410      	movs	r4, #16
9001abbe:	f1c5 0501 	rsb	r5, r5, #1
9001abc2:	fb9e fef4 	sdiv	lr, lr, r4
9001abc6:	f015 050f 	ands.w	r5, r5, #15
9001abca:	bf18      	it	ne
9001abcc:	2501      	movne	r5, #1
9001abce:	ebae 0e05 	sub.w	lr, lr, r5
9001abd2:	e753      	b.n	9001aa7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001abd4:	f04f 0910 	mov.w	r9, #16
9001abd8:	f1c5 0501 	rsb	r5, r5, #1
9001abdc:	fb94 f4f9 	sdiv	r4, r4, r9
9001abe0:	f015 050f 	ands.w	r5, r5, #15
9001abe4:	bf18      	it	ne
9001abe6:	2501      	movne	r5, #1
9001abe8:	1b64      	subs	r4, r4, r5
9001abea:	e755      	b.n	9001aa98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001abec:	4264      	negs	r4, r4
9001abee:	fb94 fef6 	sdiv	lr, r4, r6
9001abf2:	f1ce 0800 	rsb	r8, lr, #0
9001abf6:	fb06 441e 	mls	r4, r6, lr, r4
9001abfa:	f8c0 8000 	str.w	r8, [r0]
9001abfe:	6104      	str	r4, [r0, #16]
9001ac00:	2c00      	cmp	r4, #0
9001ac02:	f43f af6e 	beq.w	9001aae2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001ac06:	ea6f 0e0e 	mvn.w	lr, lr
9001ac0a:	1b34      	subs	r4, r6, r4
9001ac0c:	f8c0 e000 	str.w	lr, [r0]
9001ac10:	e766      	b.n	9001aae0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001ac12:	426d      	negs	r5, r5
9001ac14:	fb95 f4f6 	sdiv	r4, r5, r6
9001ac18:	f1c4 0e00 	rsb	lr, r4, #0
9001ac1c:	fb06 5514 	mls	r5, r6, r4, r5
9001ac20:	f8c0 e004 	str.w	lr, [r0, #4]
9001ac24:	6085      	str	r5, [r0, #8]
9001ac26:	2d00      	cmp	r5, #0
9001ac28:	f43f af64 	beq.w	9001aaf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001ac2c:	43e4      	mvns	r4, r4
9001ac2e:	1b75      	subs	r5, r6, r5
9001ac30:	6044      	str	r4, [r0, #4]
9001ac32:	e75e      	b.n	9001aaf2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001ac34:	3d800000 	.word	0x3d800000

9001ac38 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001ac38:	4602      	mov	r2, r0
9001ac3a:	b148      	cbz	r0, 9001ac50 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001ac3c:	2300      	movs	r3, #0
9001ac3e:	b298      	uxth	r0, r3
9001ac40:	3301      	adds	r3, #1
9001ac42:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001ac46:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001ac4a:	2900      	cmp	r1, #0
9001ac4c:	d1f7      	bne.n	9001ac3e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001ac4e:	4770      	bx	lr
9001ac50:	4770      	bx	lr

9001ac52 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001ac52:	b530      	push	{r4, r5, lr}
9001ac54:	4604      	mov	r4, r0
9001ac56:	b159      	cbz	r1, 9001ac70 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001ac58:	b148      	cbz	r0, 9001ac6e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001ac5a:	2300      	movs	r3, #0
9001ac5c:	b298      	uxth	r0, r3
9001ac5e:	4282      	cmp	r2, r0
9001ac60:	d905      	bls.n	9001ac6e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001ac62:	5ccd      	ldrb	r5, [r1, r3]
9001ac64:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001ac68:	3301      	adds	r3, #1
9001ac6a:	2d00      	cmp	r5, #0
9001ac6c:	d1f6      	bne.n	9001ac5c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001ac6e:	bd30      	pop	{r4, r5, pc}
9001ac70:	4608      	mov	r0, r1
9001ac72:	e7fc      	b.n	9001ac6e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001ac74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001ac74:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ac76:	468c      	mov	ip, r1
9001ac78:	b08b      	sub	sp, #44	; 0x2c
9001ac7a:	2100      	movs	r1, #0
9001ac7c:	ae01      	add	r6, sp, #4
9001ac7e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001ac82:	211f      	movs	r1, #31
9001ac84:	fbb0 f7f3 	udiv	r7, r0, r3
9001ac88:	fb03 0517 	mls	r5, r3, r7, r0
9001ac8c:	4638      	mov	r0, r7
9001ac8e:	b2ec      	uxtb	r4, r5
9001ac90:	2d09      	cmp	r5, #9
9001ac92:	bfd4      	ite	le
9001ac94:	3430      	addle	r4, #48	; 0x30
9001ac96:	3457      	addgt	r4, #87	; 0x57
9001ac98:	b2e4      	uxtb	r4, r4
9001ac9a:	558c      	strb	r4, [r1, r6]
9001ac9c:	1e4c      	subs	r4, r1, #1
9001ac9e:	b92f      	cbnz	r7, 9001acac <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001aca0:	4431      	add	r1, r6
9001aca2:	4660      	mov	r0, ip
9001aca4:	f7ff ffd5 	bl	9001ac52 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001aca8:	b00b      	add	sp, #44	; 0x2c
9001acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001acac:	4621      	mov	r1, r4
9001acae:	e7e9      	b.n	9001ac84 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001acb0 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001acb0:	b5f0      	push	{r4, r5, r6, r7, lr}
9001acb2:	4607      	mov	r7, r0
9001acb4:	b08b      	sub	sp, #44	; 0x2c
9001acb6:	4608      	mov	r0, r1
9001acb8:	b341      	cbz	r1, 9001ad0c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001acba:	1e99      	subs	r1, r3, #2
9001acbc:	2922      	cmp	r1, #34	; 0x22
9001acbe:	d825      	bhi.n	9001ad0c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001acc0:	2100      	movs	r1, #0
9001acc2:	463c      	mov	r4, r7
9001acc4:	261f      	movs	r6, #31
9001acc6:	f10d 0c04 	add.w	ip, sp, #4
9001acca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001acce:	1e71      	subs	r1, r6, #1
9001acd0:	fb94 fef3 	sdiv	lr, r4, r3
9001acd4:	fb03 441e 	mls	r4, r3, lr, r4
9001acd8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001acdc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001ace0:	b2ec      	uxtb	r4, r5
9001ace2:	2d09      	cmp	r5, #9
9001ace4:	bfd4      	ite	le
9001ace6:	3430      	addle	r4, #48	; 0x30
9001ace8:	3457      	addgt	r4, #87	; 0x57
9001acea:	b2e4      	uxtb	r4, r4
9001acec:	f80c 4006 	strb.w	r4, [ip, r6]
9001acf0:	4674      	mov	r4, lr
9001acf2:	b96c      	cbnz	r4, 9001ad10 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001acf4:	2f00      	cmp	r7, #0
9001acf6:	da05      	bge.n	9001ad04 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001acf8:	ab0a      	add	r3, sp, #40	; 0x28
9001acfa:	4419      	add	r1, r3
9001acfc:	232d      	movs	r3, #45	; 0x2d
9001acfe:	f801 3c24 	strb.w	r3, [r1, #-36]
9001ad02:	1eb1      	subs	r1, r6, #2
9001ad04:	3101      	adds	r1, #1
9001ad06:	4461      	add	r1, ip
9001ad08:	f7ff ffa3 	bl	9001ac52 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001ad0c:	b00b      	add	sp, #44	; 0x2c
9001ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001ad10:	460e      	mov	r6, r1
9001ad12:	e7dc      	b.n	9001acce <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001ad14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ad18:	b085      	sub	sp, #20
9001ad1a:	4691      	mov	r9, r2
9001ad1c:	6802      	ldr	r2, [r0, #0]
9001ad1e:	4688      	mov	r8, r1
9001ad20:	461c      	mov	r4, r3
9001ad22:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001ad26:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001ad2a:	4683      	mov	fp, r0
9001ad2c:	4610      	mov	r0, r2
9001ad2e:	9103      	str	r1, [sp, #12]
9001ad30:	9302      	str	r3, [sp, #8]
9001ad32:	9201      	str	r2, [sp, #4]
9001ad34:	f7ff ff80 	bl	9001ac38 <_ZN8touchgfx7Unicode6strlenEPKt>
9001ad38:	f1b8 0f00 	cmp.w	r8, #0
9001ad3c:	bf0c      	ite	eq
9001ad3e:	4684      	moveq	ip, r0
9001ad40:	f100 0c01 	addne.w	ip, r0, #1
9001ad44:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001ad48:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001ad4c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001ad4e:	fa1f fc8c 	uxth.w	ip, ip
9001ad52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001ad54:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001ad58:	9903      	ldr	r1, [sp, #12]
9001ad5a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001ad5e:	d041      	beq.n	9001ade4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001ad60:	d834      	bhi.n	9001adcc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001ad62:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001ad66:	d059      	beq.n	9001ae1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001ad68:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001ad6c:	d03a      	beq.n	9001ade4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001ad6e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001ad72:	d034      	beq.n	9001adde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001ad74:	2400      	movs	r4, #0
9001ad76:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001ad7a:	3a01      	subs	r2, #1
9001ad7c:	b169      	cbz	r1, 9001ad9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ad7e:	9911      	ldr	r1, [sp, #68]	; 0x44
9001ad80:	458c      	cmp	ip, r1
9001ad82:	da09      	bge.n	9001ad98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ad84:	eba1 010c 	sub.w	r1, r1, ip
9001ad88:	b289      	uxth	r1, r1
9001ad8a:	b933      	cbnz	r3, 9001ad9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ad8c:	2e00      	cmp	r6, #0
9001ad8e:	d051      	beq.n	9001ae34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001ad90:	2800      	cmp	r0, #0
9001ad92:	d04f      	beq.n	9001ae34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001ad94:	440c      	add	r4, r1
9001ad96:	b2a4      	uxth	r4, r4
9001ad98:	2100      	movs	r1, #0
9001ad9a:	682b      	ldr	r3, [r5, #0]
9001ad9c:	4293      	cmp	r3, r2
9001ad9e:	da07      	bge.n	9001adb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ada0:	f1b8 0f00 	cmp.w	r8, #0
9001ada4:	d004      	beq.n	9001adb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ada6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001adaa:	682b      	ldr	r3, [r5, #0]
9001adac:	3301      	adds	r3, #1
9001adae:	602b      	str	r3, [r5, #0]
9001adb0:	2730      	movs	r7, #48	; 0x30
9001adb2:	2c00      	cmp	r4, #0
9001adb4:	d04e      	beq.n	9001ae54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001adb6:	682e      	ldr	r6, [r5, #0]
9001adb8:	3c01      	subs	r4, #1
9001adba:	42b2      	cmp	r2, r6
9001adbc:	b2a4      	uxth	r4, r4
9001adbe:	dd49      	ble.n	9001ae54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001adc0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001adc4:	682b      	ldr	r3, [r5, #0]
9001adc6:	3301      	adds	r3, #1
9001adc8:	602b      	str	r3, [r5, #0]
9001adca:	e7f2      	b.n	9001adb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001adcc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001add0:	d01d      	beq.n	9001ae0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001add2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001add6:	d002      	beq.n	9001adde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001add8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001addc:	e7c9      	b.n	9001ad72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001adde:	4684      	mov	ip, r0
9001ade0:	f04f 0800 	mov.w	r8, #0
9001ade4:	2c00      	cmp	r4, #0
9001ade6:	d0c6      	beq.n	9001ad76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ade8:	b947      	cbnz	r7, 9001adfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001adea:	2801      	cmp	r0, #1
9001adec:	d106      	bne.n	9001adfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001adee:	8814      	ldrh	r4, [r2, #0]
9001adf0:	2c30      	cmp	r4, #48	; 0x30
9001adf2:	bf02      	ittt	eq
9001adf4:	3202      	addeq	r2, #2
9001adf6:	4638      	moveq	r0, r7
9001adf8:	f8cb 2000 	streq.w	r2, [fp]
9001adfc:	45bc      	cmp	ip, r7
9001adfe:	da14      	bge.n	9001ae2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001ae00:	b2bf      	uxth	r7, r7
9001ae02:	eba7 040c 	sub.w	r4, r7, ip
9001ae06:	46bc      	mov	ip, r7
9001ae08:	b2a4      	uxth	r4, r4
9001ae0a:	2600      	movs	r6, #0
9001ae0c:	e7b3      	b.n	9001ad76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ae0e:	4684      	mov	ip, r0
9001ae10:	b16c      	cbz	r4, 9001ae2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001ae12:	42b8      	cmp	r0, r7
9001ae14:	dd00      	ble.n	9001ae18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001ae16:	b2b8      	uxth	r0, r7
9001ae18:	2400      	movs	r4, #0
9001ae1a:	e003      	b.n	9001ae24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001ae1c:	f04f 0c01 	mov.w	ip, #1
9001ae20:	2400      	movs	r4, #0
9001ae22:	4660      	mov	r0, ip
9001ae24:	4626      	mov	r6, r4
9001ae26:	46a0      	mov	r8, r4
9001ae28:	e7a5      	b.n	9001ad76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ae2a:	2400      	movs	r4, #0
9001ae2c:	e7ed      	b.n	9001ae0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001ae2e:	4626      	mov	r6, r4
9001ae30:	46a0      	mov	r8, r4
9001ae32:	e7a0      	b.n	9001ad76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ae34:	2900      	cmp	r1, #0
9001ae36:	d0b0      	beq.n	9001ad9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ae38:	2720      	movs	r7, #32
9001ae3a:	682e      	ldr	r6, [r5, #0]
9001ae3c:	2900      	cmp	r1, #0
9001ae3e:	d0ac      	beq.n	9001ad9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ae40:	3901      	subs	r1, #1
9001ae42:	4296      	cmp	r6, r2
9001ae44:	b289      	uxth	r1, r1
9001ae46:	daa7      	bge.n	9001ad98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ae48:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001ae4c:	682b      	ldr	r3, [r5, #0]
9001ae4e:	3301      	adds	r3, #1
9001ae50:	602b      	str	r3, [r5, #0]
9001ae52:	e7f2      	b.n	9001ae3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001ae54:	b188      	cbz	r0, 9001ae7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001ae56:	682b      	ldr	r3, [r5, #0]
9001ae58:	3801      	subs	r0, #1
9001ae5a:	429a      	cmp	r2, r3
9001ae5c:	b280      	uxth	r0, r0
9001ae5e:	dd0c      	ble.n	9001ae7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001ae60:	f8db 3000 	ldr.w	r3, [fp]
9001ae64:	1c9c      	adds	r4, r3, #2
9001ae66:	f8cb 4000 	str.w	r4, [fp]
9001ae6a:	881c      	ldrh	r4, [r3, #0]
9001ae6c:	682b      	ldr	r3, [r5, #0]
9001ae6e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001ae72:	682b      	ldr	r3, [r5, #0]
9001ae74:	3301      	adds	r3, #1
9001ae76:	602b      	str	r3, [r5, #0]
9001ae78:	e7ec      	b.n	9001ae54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ae7a:	2620      	movs	r6, #32
9001ae7c:	b151      	cbz	r1, 9001ae94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001ae7e:	6828      	ldr	r0, [r5, #0]
9001ae80:	3901      	subs	r1, #1
9001ae82:	4282      	cmp	r2, r0
9001ae84:	b289      	uxth	r1, r1
9001ae86:	dd05      	ble.n	9001ae94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001ae88:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001ae8c:	682b      	ldr	r3, [r5, #0]
9001ae8e:	3301      	adds	r3, #1
9001ae90:	602b      	str	r3, [r5, #0]
9001ae92:	e7f3      	b.n	9001ae7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001ae94:	b005      	add	sp, #20
9001ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ae9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001ae9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001ae9e:	2400      	movs	r4, #0
9001aea0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001aea4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001aea8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001aeac:	8014      	strh	r4, [r2, #0]
9001aeae:	701c      	strb	r4, [r3, #0]
9001aeb0:	f888 4000 	strb.w	r4, [r8]
9001aeb4:	f88c 4000 	strb.w	r4, [ip]
9001aeb8:	f88e 4000 	strb.w	r4, [lr]
9001aebc:	703c      	strb	r4, [r7, #0]
9001aebe:	6804      	ldr	r4, [r0, #0]
9001aec0:	b1a4      	cbz	r4, 9001aeec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001aec2:	8824      	ldrh	r4, [r4, #0]
9001aec4:	f04f 0901 	mov.w	r9, #1
9001aec8:	b314      	cbz	r4, 9001af10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001aeca:	2c2b      	cmp	r4, #43	; 0x2b
9001aecc:	d001      	beq.n	9001aed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001aece:	2c20      	cmp	r4, #32
9001aed0:	d110      	bne.n	9001aef4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001aed2:	8014      	strh	r4, [r2, #0]
9001aed4:	6804      	ldr	r4, [r0, #0]
9001aed6:	b10c      	cbz	r4, 9001aedc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001aed8:	3402      	adds	r4, #2
9001aeda:	6004      	str	r4, [r0, #0]
9001aedc:	680c      	ldr	r4, [r1, #0]
9001aede:	b10c      	cbz	r4, 9001aee4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001aee0:	3401      	adds	r4, #1
9001aee2:	600c      	str	r4, [r1, #0]
9001aee4:	6804      	ldr	r4, [r0, #0]
9001aee6:	b17c      	cbz	r4, 9001af08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001aee8:	8824      	ldrh	r4, [r4, #0]
9001aeea:	e7ed      	b.n	9001aec8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001aeec:	680c      	ldr	r4, [r1, #0]
9001aeee:	b17c      	cbz	r4, 9001af10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001aef0:	7824      	ldrb	r4, [r4, #0]
9001aef2:	e7e7      	b.n	9001aec4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001aef4:	2c2d      	cmp	r4, #45	; 0x2d
9001aef6:	d102      	bne.n	9001aefe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001aef8:	f883 9000 	strb.w	r9, [r3]
9001aefc:	e7ea      	b.n	9001aed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001aefe:	2c23      	cmp	r4, #35	; 0x23
9001af00:	d107      	bne.n	9001af12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001af02:	f888 9000 	strb.w	r9, [r8]
9001af06:	e7e5      	b.n	9001aed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001af08:	680c      	ldr	r4, [r1, #0]
9001af0a:	b10c      	cbz	r4, 9001af10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001af0c:	7824      	ldrb	r4, [r4, #0]
9001af0e:	e7db      	b.n	9001aec8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001af10:	2400      	movs	r4, #0
9001af12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001af16:	2b09      	cmp	r3, #9
9001af18:	d901      	bls.n	9001af1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001af1a:	2c2a      	cmp	r4, #42	; 0x2a
9001af1c:	d122      	bne.n	9001af64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001af1e:	2301      	movs	r3, #1
9001af20:	2c30      	cmp	r4, #48	; 0x30
9001af22:	f88e 3000 	strb.w	r3, [lr]
9001af26:	d10d      	bne.n	9001af44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001af28:	f88c 3000 	strb.w	r3, [ip]
9001af2c:	6803      	ldr	r3, [r0, #0]
9001af2e:	b10b      	cbz	r3, 9001af34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001af30:	3302      	adds	r3, #2
9001af32:	6003      	str	r3, [r0, #0]
9001af34:	680b      	ldr	r3, [r1, #0]
9001af36:	b10b      	cbz	r3, 9001af3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001af38:	3301      	adds	r3, #1
9001af3a:	600b      	str	r3, [r1, #0]
9001af3c:	6803      	ldr	r3, [r0, #0]
9001af3e:	2b00      	cmp	r3, #0
9001af40:	d02f      	beq.n	9001afa2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001af42:	881c      	ldrh	r4, [r3, #0]
9001af44:	2c2a      	cmp	r4, #42	; 0x2a
9001af46:	d135      	bne.n	9001afb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001af48:	f04f 33ff 	mov.w	r3, #4294967295
9001af4c:	6033      	str	r3, [r6, #0]
9001af4e:	6803      	ldr	r3, [r0, #0]
9001af50:	b10b      	cbz	r3, 9001af56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001af52:	3302      	adds	r3, #2
9001af54:	6003      	str	r3, [r0, #0]
9001af56:	680b      	ldr	r3, [r1, #0]
9001af58:	b10b      	cbz	r3, 9001af5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001af5a:	3301      	adds	r3, #1
9001af5c:	600b      	str	r3, [r1, #0]
9001af5e:	6803      	ldr	r3, [r0, #0]
9001af60:	b31b      	cbz	r3, 9001afaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001af62:	881c      	ldrh	r4, [r3, #0]
9001af64:	2c2e      	cmp	r4, #46	; 0x2e
9001af66:	d11a      	bne.n	9001af9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001af68:	2301      	movs	r3, #1
9001af6a:	703b      	strb	r3, [r7, #0]
9001af6c:	6803      	ldr	r3, [r0, #0]
9001af6e:	b10b      	cbz	r3, 9001af74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001af70:	3302      	adds	r3, #2
9001af72:	6003      	str	r3, [r0, #0]
9001af74:	680b      	ldr	r3, [r1, #0]
9001af76:	b10b      	cbz	r3, 9001af7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001af78:	3301      	adds	r3, #1
9001af7a:	600b      	str	r3, [r1, #0]
9001af7c:	6803      	ldr	r3, [r0, #0]
9001af7e:	2b00      	cmp	r3, #0
9001af80:	d036      	beq.n	9001aff0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001af82:	881b      	ldrh	r3, [r3, #0]
9001af84:	2b2a      	cmp	r3, #42	; 0x2a
9001af86:	d137      	bne.n	9001aff8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001af88:	f04f 33ff 	mov.w	r3, #4294967295
9001af8c:	602b      	str	r3, [r5, #0]
9001af8e:	6803      	ldr	r3, [r0, #0]
9001af90:	b10b      	cbz	r3, 9001af96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001af92:	3302      	adds	r3, #2
9001af94:	6003      	str	r3, [r0, #0]
9001af96:	680b      	ldr	r3, [r1, #0]
9001af98:	b10b      	cbz	r3, 9001af9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001af9a:	3301      	adds	r3, #1
9001af9c:	600b      	str	r3, [r1, #0]
9001af9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001afa2:	680c      	ldr	r4, [r1, #0]
9001afa4:	b134      	cbz	r4, 9001afb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001afa6:	7824      	ldrb	r4, [r4, #0]
9001afa8:	e7cc      	b.n	9001af44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001afaa:	680b      	ldr	r3, [r1, #0]
9001afac:	2b00      	cmp	r3, #0
9001afae:	d0f6      	beq.n	9001af9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001afb0:	781c      	ldrb	r4, [r3, #0]
9001afb2:	e7d7      	b.n	9001af64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001afb4:	2300      	movs	r3, #0
9001afb6:	220a      	movs	r2, #10
9001afb8:	6033      	str	r3, [r6, #0]
9001afba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001afbe:	fa1f f38c 	uxth.w	r3, ip
9001afc2:	2b09      	cmp	r3, #9
9001afc4:	d8ce      	bhi.n	9001af64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001afc6:	6833      	ldr	r3, [r6, #0]
9001afc8:	fb02 c303 	mla	r3, r2, r3, ip
9001afcc:	6033      	str	r3, [r6, #0]
9001afce:	6803      	ldr	r3, [r0, #0]
9001afd0:	b10b      	cbz	r3, 9001afd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001afd2:	3302      	adds	r3, #2
9001afd4:	6003      	str	r3, [r0, #0]
9001afd6:	680b      	ldr	r3, [r1, #0]
9001afd8:	b10b      	cbz	r3, 9001afde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001afda:	3301      	adds	r3, #1
9001afdc:	600b      	str	r3, [r1, #0]
9001afde:	6803      	ldr	r3, [r0, #0]
9001afe0:	b10b      	cbz	r3, 9001afe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001afe2:	881c      	ldrh	r4, [r3, #0]
9001afe4:	e7e9      	b.n	9001afba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001afe6:	680c      	ldr	r4, [r1, #0]
9001afe8:	2c00      	cmp	r4, #0
9001afea:	d0e6      	beq.n	9001afba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001afec:	7824      	ldrb	r4, [r4, #0]
9001afee:	e7e4      	b.n	9001afba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001aff0:	680b      	ldr	r3, [r1, #0]
9001aff2:	b10b      	cbz	r3, 9001aff8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001aff4:	781b      	ldrb	r3, [r3, #0]
9001aff6:	e7c5      	b.n	9001af84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001aff8:	2200      	movs	r2, #0
9001affa:	240a      	movs	r4, #10
9001affc:	602a      	str	r2, [r5, #0]
9001affe:	3b30      	subs	r3, #48	; 0x30
9001b000:	682a      	ldr	r2, [r5, #0]
9001b002:	b29e      	uxth	r6, r3
9001b004:	2e09      	cmp	r6, #9
9001b006:	d813      	bhi.n	9001b030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001b008:	fb04 3302 	mla	r3, r4, r2, r3
9001b00c:	602b      	str	r3, [r5, #0]
9001b00e:	6803      	ldr	r3, [r0, #0]
9001b010:	b10b      	cbz	r3, 9001b016 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001b012:	3302      	adds	r3, #2
9001b014:	6003      	str	r3, [r0, #0]
9001b016:	680b      	ldr	r3, [r1, #0]
9001b018:	b10b      	cbz	r3, 9001b01e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001b01a:	3301      	adds	r3, #1
9001b01c:	600b      	str	r3, [r1, #0]
9001b01e:	6803      	ldr	r3, [r0, #0]
9001b020:	b10b      	cbz	r3, 9001b026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001b022:	881b      	ldrh	r3, [r3, #0]
9001b024:	e7eb      	b.n	9001affe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001b026:	680b      	ldr	r3, [r1, #0]
9001b028:	2b00      	cmp	r3, #0
9001b02a:	d0e8      	beq.n	9001affe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001b02c:	781b      	ldrb	r3, [r3, #0]
9001b02e:	e7e6      	b.n	9001affe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001b030:	2a06      	cmp	r2, #6
9001b032:	bfa8      	it	ge
9001b034:	2206      	movge	r2, #6
9001b036:	602a      	str	r2, [r5, #0]
9001b038:	e7b1      	b.n	9001af9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001b03a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001b03a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b03e:	b0a3      	sub	sp, #140	; 0x8c
9001b040:	2600      	movs	r6, #0
9001b042:	4607      	mov	r7, r0
9001b044:	4688      	mov	r8, r1
9001b046:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001b04a:	4631      	mov	r1, r6
9001b04c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001b04e:	4648      	mov	r0, r9
9001b050:	960d      	str	r6, [sp, #52]	; 0x34
9001b052:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001b056:	2242      	movs	r2, #66	; 0x42
9001b058:	f00c fe00 	bl	90027c5c <memset>
9001b05c:	b15f      	cbz	r7, 9001b076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001b05e:	f108 3aff 	add.w	sl, r8, #4294967295
9001b062:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b066:	b152      	cbz	r2, 9001b07e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001b068:	8812      	ldrh	r2, [r2, #0]
9001b06a:	b10a      	cbz	r2, 9001b070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001b06c:	459a      	cmp	sl, r3
9001b06e:	dc2e      	bgt.n	9001b0ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001b070:	2200      	movs	r2, #0
9001b072:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001b076:	4638      	mov	r0, r7
9001b078:	b023      	add	sp, #140	; 0x8c
9001b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b07e:	9a08      	ldr	r2, [sp, #32]
9001b080:	2a00      	cmp	r2, #0
9001b082:	d0f5      	beq.n	9001b070 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001b084:	7812      	ldrb	r2, [r2, #0]
9001b086:	e7f0      	b.n	9001b06a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001b088:	2d00      	cmp	r5, #0
9001b08a:	d0ea      	beq.n	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b08c:	782a      	ldrb	r2, [r5, #0]
9001b08e:	b142      	cbz	r2, 9001b0a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001b090:	2a25      	cmp	r2, #37	; 0x25
9001b092:	d001      	beq.n	9001b098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001b094:	459a      	cmp	sl, r3
9001b096:	dc08      	bgt.n	9001b0aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001b098:	f1bb 0f00 	cmp.w	fp, #0
9001b09c:	d121      	bne.n	9001b0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001b09e:	2d00      	cmp	r5, #0
9001b0a0:	d0df      	beq.n	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b0a2:	782a      	ldrb	r2, [r5, #0]
9001b0a4:	f04f 0b00 	mov.w	fp, #0
9001b0a8:	e01d      	b.n	9001b0e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001b0aa:	f1bb 0f00 	cmp.w	fp, #0
9001b0ae:	d077      	beq.n	9001b1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001b0b0:	f8bb 2000 	ldrh.w	r2, [fp]
9001b0b4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001b0b8:	f1bb 0f00 	cmp.w	fp, #0
9001b0bc:	d002      	beq.n	9001b0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001b0be:	f10b 0202 	add.w	r2, fp, #2
9001b0c2:	9209      	str	r2, [sp, #36]	; 0x24
9001b0c4:	b10d      	cbz	r5, 9001b0ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001b0c6:	3501      	adds	r5, #1
9001b0c8:	9508      	str	r5, [sp, #32]
9001b0ca:	3301      	adds	r3, #1
9001b0cc:	930d      	str	r3, [sp, #52]	; 0x34
9001b0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b0d0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001b0d4:	f1bb 0f00 	cmp.w	fp, #0
9001b0d8:	d0d6      	beq.n	9001b088 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001b0da:	f8bb 2000 	ldrh.w	r2, [fp]
9001b0de:	2a00      	cmp	r2, #0
9001b0e0:	d1d6      	bne.n	9001b090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001b0e2:	f8bb 2000 	ldrh.w	r2, [fp]
9001b0e6:	2a00      	cmp	r2, #0
9001b0e8:	d0bb      	beq.n	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b0ea:	459a      	cmp	sl, r3
9001b0ec:	ddb9      	ble.n	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b0ee:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001b0f2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001b0f6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001b0fa:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001b0fe:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001b102:	960e      	str	r6, [sp, #56]	; 0x38
9001b104:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001b108:	960f      	str	r6, [sp, #60]	; 0x3c
9001b10a:	f1bb 0f00 	cmp.w	fp, #0
9001b10e:	d002      	beq.n	9001b116 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001b110:	f10b 0302 	add.w	r3, fp, #2
9001b114:	9309      	str	r3, [sp, #36]	; 0x24
9001b116:	b10d      	cbz	r5, 9001b11c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001b118:	1c6b      	adds	r3, r5, #1
9001b11a:	9308      	str	r3, [sp, #32]
9001b11c:	ab0f      	add	r3, sp, #60	; 0x3c
9001b11e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001b122:	a908      	add	r1, sp, #32
9001b124:	a809      	add	r0, sp, #36	; 0x24
9001b126:	9305      	str	r3, [sp, #20]
9001b128:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001b12c:	9304      	str	r3, [sp, #16]
9001b12e:	ab0e      	add	r3, sp, #56	; 0x38
9001b130:	9303      	str	r3, [sp, #12]
9001b132:	ab0c      	add	r3, sp, #48	; 0x30
9001b134:	9302      	str	r3, [sp, #8]
9001b136:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001b13a:	9301      	str	r3, [sp, #4]
9001b13c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001b140:	9300      	str	r3, [sp, #0]
9001b142:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001b146:	f7ff fea8 	bl	9001ae9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001b14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b14c:	2b00      	cmp	r3, #0
9001b14e:	bfbf      	itttt	lt
9001b150:	6823      	ldrlt	r3, [r4, #0]
9001b152:	3404      	addlt	r4, #4
9001b154:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001b158:	930e      	strlt	r3, [sp, #56]	; 0x38
9001b15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b15c:	2b00      	cmp	r3, #0
9001b15e:	bfbe      	ittt	lt
9001b160:	6823      	ldrlt	r3, [r4, #0]
9001b162:	3404      	addlt	r4, #4
9001b164:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001b168:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001b16c:	bfb8      	it	lt
9001b16e:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001b170:	b1d9      	cbz	r1, 9001b1aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001b172:	880b      	ldrh	r3, [r1, #0]
9001b174:	2b69      	cmp	r3, #105	; 0x69
9001b176:	d01f      	beq.n	9001b1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b178:	d82f      	bhi.n	9001b1da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001b17a:	2b58      	cmp	r3, #88	; 0x58
9001b17c:	d01c      	beq.n	9001b1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b17e:	d818      	bhi.n	9001b1b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001b180:	2b25      	cmp	r3, #37	; 0x25
9001b182:	d034      	beq.n	9001b1ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001b184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b186:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001b18a:	f1bb 0f00 	cmp.w	fp, #0
9001b18e:	f000 80b7 	beq.w	9001b300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001b192:	f8bb 5000 	ldrh.w	r5, [fp]
9001b196:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001b19a:	3301      	adds	r3, #1
9001b19c:	930d      	str	r3, [sp, #52]	; 0x34
9001b19e:	e029      	b.n	9001b1f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b1a0:	b10d      	cbz	r5, 9001b1a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001b1a2:	782a      	ldrb	r2, [r5, #0]
9001b1a4:	e786      	b.n	9001b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b1a6:	462a      	mov	r2, r5
9001b1a8:	e784      	b.n	9001b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b1aa:	2a00      	cmp	r2, #0
9001b1ac:	d0ea      	beq.n	9001b184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b1ae:	7813      	ldrb	r3, [r2, #0]
9001b1b0:	e7e0      	b.n	9001b174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001b1b2:	3b63      	subs	r3, #99	; 0x63
9001b1b4:	2b01      	cmp	r3, #1
9001b1b6:	d8e5      	bhi.n	9001b184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b1b8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001b1bc:	b329      	cbz	r1, 9001b20a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001b1be:	880b      	ldrh	r3, [r1, #0]
9001b1c0:	2b69      	cmp	r3, #105	; 0x69
9001b1c2:	d063      	beq.n	9001b28c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b1c4:	d825      	bhi.n	9001b212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001b1c6:	2b63      	cmp	r3, #99	; 0x63
9001b1c8:	d038      	beq.n	9001b23c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001b1ca:	2b64      	cmp	r3, #100	; 0x64
9001b1cc:	d05e      	beq.n	9001b28c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b1ce:	2b58      	cmp	r3, #88	; 0x58
9001b1d0:	d07a      	beq.n	9001b2c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001b1d2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001b1d6:	4625      	mov	r5, r4
9001b1d8:	e036      	b.n	9001b248 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b1da:	2b73      	cmp	r3, #115	; 0x73
9001b1dc:	d0ec      	beq.n	9001b1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b1de:	d802      	bhi.n	9001b1e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001b1e0:	2b6f      	cmp	r3, #111	; 0x6f
9001b1e2:	d1cf      	bne.n	9001b184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b1e4:	e7e8      	b.n	9001b1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b1e6:	2b75      	cmp	r3, #117	; 0x75
9001b1e8:	d0e6      	beq.n	9001b1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b1ea:	2b78      	cmp	r3, #120	; 0x78
9001b1ec:	e7f9      	b.n	9001b1e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001b1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b1f0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001b1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b1f6:	b10b      	cbz	r3, 9001b1fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001b1f8:	3302      	adds	r3, #2
9001b1fa:	9309      	str	r3, [sp, #36]	; 0x24
9001b1fc:	9b08      	ldr	r3, [sp, #32]
9001b1fe:	2b00      	cmp	r3, #0
9001b200:	f43f af2f 	beq.w	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b204:	3301      	adds	r3, #1
9001b206:	9308      	str	r3, [sp, #32]
9001b208:	e72b      	b.n	9001b062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b20a:	2a00      	cmp	r2, #0
9001b20c:	d0e1      	beq.n	9001b1d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b20e:	7813      	ldrb	r3, [r2, #0]
9001b210:	e7d6      	b.n	9001b1c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001b212:	2b73      	cmp	r3, #115	; 0x73
9001b214:	d036      	beq.n	9001b284 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001b216:	d807      	bhi.n	9001b228 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001b218:	2b6f      	cmp	r3, #111	; 0x6f
9001b21a:	d1da      	bne.n	9001b1d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b21c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b21e:	1d25      	adds	r5, r4, #4
9001b220:	2308      	movs	r3, #8
9001b222:	eba8 0202 	sub.w	r2, r8, r2
9001b226:	e049      	b.n	9001b2bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b228:	2b75      	cmp	r3, #117	; 0x75
9001b22a:	d042      	beq.n	9001b2b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001b22c:	2b78      	cmp	r3, #120	; 0x78
9001b22e:	d1d0      	bne.n	9001b1d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b232:	1d25      	adds	r5, r4, #4
9001b234:	2310      	movs	r3, #16
9001b236:	eba8 0202 	sub.w	r2, r8, r2
9001b23a:	e03f      	b.n	9001b2bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b23c:	6823      	ldr	r3, [r4, #0]
9001b23e:	1d25      	adds	r5, r4, #4
9001b240:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001b244:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001b248:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b24a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001b24e:	2b00      	cmp	r3, #0
9001b250:	d051      	beq.n	9001b2f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001b252:	881a      	ldrh	r2, [r3, #0]
9001b254:	a80d      	add	r0, sp, #52	; 0x34
9001b256:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001b25a:	462c      	mov	r4, r5
9001b25c:	9005      	str	r0, [sp, #20]
9001b25e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001b262:	9004      	str	r0, [sp, #16]
9001b264:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b266:	9003      	str	r0, [sp, #12]
9001b268:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001b26c:	9002      	str	r0, [sp, #8]
9001b26e:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b270:	9001      	str	r0, [sp, #4]
9001b272:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001b276:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001b27a:	9000      	str	r0, [sp, #0]
9001b27c:	a810      	add	r0, sp, #64	; 0x40
9001b27e:	f7ff fd49 	bl	9001ad14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001b282:	e7b7      	b.n	9001b1f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b284:	1d25      	adds	r5, r4, #4
9001b286:	6823      	ldr	r3, [r4, #0]
9001b288:	9310      	str	r3, [sp, #64]	; 0x40
9001b28a:	e7dd      	b.n	9001b248 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b28c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b28e:	230a      	movs	r3, #10
9001b290:	4649      	mov	r1, r9
9001b292:	6820      	ldr	r0, [r4, #0]
9001b294:	eba8 0202 	sub.w	r2, r8, r2
9001b298:	1d25      	adds	r5, r4, #4
9001b29a:	b292      	uxth	r2, r2
9001b29c:	f7ff fd08 	bl	9001acb0 <_ZN8touchgfx7Unicode4itoaElPtti>
9001b2a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001b2a4:	2b2d      	cmp	r3, #45	; 0x2d
9001b2a6:	d1cf      	bne.n	9001b248 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b2a8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001b2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b2ae:	3302      	adds	r3, #2
9001b2b0:	e7ea      	b.n	9001b288 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001b2b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b2b4:	1d25      	adds	r5, r4, #4
9001b2b6:	230a      	movs	r3, #10
9001b2b8:	eba8 0202 	sub.w	r2, r8, r2
9001b2bc:	b292      	uxth	r2, r2
9001b2be:	4649      	mov	r1, r9
9001b2c0:	6820      	ldr	r0, [r4, #0]
9001b2c2:	f7ff fcd7 	bl	9001ac74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b2c6:	e7bf      	b.n	9001b248 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b2ca:	2310      	movs	r3, #16
9001b2cc:	4649      	mov	r1, r9
9001b2ce:	6820      	ldr	r0, [r4, #0]
9001b2d0:	eba8 0202 	sub.w	r2, r8, r2
9001b2d4:	1d25      	adds	r5, r4, #4
9001b2d6:	b292      	uxth	r2, r2
9001b2d8:	f7ff fccc 	bl	9001ac74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b2dc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001b2e0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001b2e4:	2b00      	cmp	r3, #0
9001b2e6:	d0af      	beq.n	9001b248 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b2e8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001b2ec:	2919      	cmp	r1, #25
9001b2ee:	d8f7      	bhi.n	9001b2e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b2f0:	3b20      	subs	r3, #32
9001b2f2:	8013      	strh	r3, [r2, #0]
9001b2f4:	e7f4      	b.n	9001b2e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b2f6:	9a08      	ldr	r2, [sp, #32]
9001b2f8:	2a00      	cmp	r2, #0
9001b2fa:	d0ab      	beq.n	9001b254 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b2fc:	7812      	ldrb	r2, [r2, #0]
9001b2fe:	e7a9      	b.n	9001b254 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b300:	2d00      	cmp	r5, #0
9001b302:	f43f af48 	beq.w	9001b196 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001b306:	782d      	ldrb	r5, [r5, #0]
9001b308:	e745      	b.n	9001b196 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001b30a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001b30a:	b507      	push	{r0, r1, r2, lr}
9001b30c:	9300      	str	r3, [sp, #0]
9001b30e:	4613      	mov	r3, r2
9001b310:	2200      	movs	r2, #0
9001b312:	f7ff fe92 	bl	9001b03a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001b316:	b003      	add	sp, #12
9001b318:	f85d fb04 	ldr.w	pc, [sp], #4

9001b31c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001b31c:	b40c      	push	{r2, r3}
9001b31e:	b507      	push	{r0, r1, r2, lr}
9001b320:	ab04      	add	r3, sp, #16
9001b322:	f853 2b04 	ldr.w	r2, [r3], #4
9001b326:	9301      	str	r3, [sp, #4]
9001b328:	f7ff ffef 	bl	9001b30a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001b32c:	b003      	add	sp, #12
9001b32e:	f85d eb04 	ldr.w	lr, [sp], #4
9001b332:	b002      	add	sp, #8
9001b334:	4770      	bx	lr
	...

9001b338 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001b338:	4b01      	ldr	r3, [pc, #4]	; (9001b340 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001b33a:	6018      	str	r0, [r3, #0]
9001b33c:	4770      	bx	lr
9001b33e:	bf00      	nop
9001b340:	24028254 	.word	0x24028254

9001b344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001b344:	4b06      	ldr	r3, [pc, #24]	; (9001b360 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001b346:	881a      	ldrh	r2, [r3, #0]
9001b348:	4282      	cmp	r2, r0
9001b34a:	d807      	bhi.n	9001b35c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001b34c:	4b05      	ldr	r3, [pc, #20]	; (9001b364 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001b34e:	881b      	ldrh	r3, [r3, #0]
9001b350:	4413      	add	r3, r2
9001b352:	4298      	cmp	r0, r3
9001b354:	bfac      	ite	ge
9001b356:	2000      	movge	r0, #0
9001b358:	2001      	movlt	r0, #1
9001b35a:	4770      	bx	lr
9001b35c:	2000      	movs	r0, #0
9001b35e:	4770      	bx	lr
9001b360:	24028274 	.word	0x24028274
9001b364:	24028278 	.word	0x24028278

9001b368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001b368:	b508      	push	{r3, lr}
9001b36a:	4601      	mov	r1, r0
9001b36c:	f7ff ffea 	bl	9001b344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001b370:	b118      	cbz	r0, 9001b37a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001b372:	4b02      	ldr	r3, [pc, #8]	; (9001b37c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001b374:	681b      	ldr	r3, [r3, #0]
9001b376:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001b37a:	bd08      	pop	{r3, pc}
9001b37c:	24028258 	.word	0x24028258

9001b380 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001b380:	b5f0      	push	{r4, r5, r6, r7, lr}
9001b382:	4c24      	ldr	r4, [pc, #144]	; (9001b414 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001b384:	6823      	ldr	r3, [r4, #0]
9001b386:	2b00      	cmp	r3, #0
9001b388:	d042      	beq.n	9001b410 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b38a:	4a23      	ldr	r2, [pc, #140]	; (9001b418 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001b38c:	4d23      	ldr	r5, [pc, #140]	; (9001b41c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001b38e:	8811      	ldrh	r1, [r2, #0]
9001b390:	f8b5 c000 	ldrh.w	ip, [r5]
9001b394:	4822      	ldr	r0, [pc, #136]	; (9001b420 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001b396:	4461      	add	r1, ip
9001b398:	1c4a      	adds	r2, r1, #1
9001b39a:	008f      	lsls	r7, r1, #2
9001b39c:	f022 0201 	bic.w	r2, r2, #1
9001b3a0:	19de      	adds	r6, r3, r7
9001b3a2:	0412      	lsls	r2, r2, #16
9001b3a4:	6006      	str	r6, [r0, #0]
9001b3a6:	4e1f      	ldr	r6, [pc, #124]	; (9001b424 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
9001b3a8:	0c12      	lsrs	r2, r2, #16
9001b3aa:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001b3ae:	19da      	adds	r2, r3, r7
9001b3b0:	6032      	str	r2, [r6, #0]
9001b3b2:	220e      	movs	r2, #14
9001b3b4:	fb02 f20c 	mul.w	r2, r2, ip
9001b3b8:	3203      	adds	r2, #3
9001b3ba:	f022 0203 	bic.w	r2, r2, #3
9001b3be:	443a      	add	r2, r7
9001b3c0:	4f19      	ldr	r7, [pc, #100]	; (9001b428 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001b3c2:	4413      	add	r3, r2
9001b3c4:	603b      	str	r3, [r7, #0]
9001b3c6:	2300      	movs	r3, #0
9001b3c8:	4f18      	ldr	r7, [pc, #96]	; (9001b42c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001b3ca:	469c      	mov	ip, r3
9001b3cc:	803b      	strh	r3, [r7, #0]
9001b3ce:	4f18      	ldr	r7, [pc, #96]	; (9001b430 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001b3d0:	683f      	ldr	r7, [r7, #0]
9001b3d2:	1aba      	subs	r2, r7, r2
9001b3d4:	4f17      	ldr	r7, [pc, #92]	; (9001b434 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001b3d6:	603a      	str	r2, [r7, #0]
9001b3d8:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001b3dc:	4a16      	ldr	r2, [pc, #88]	; (9001b438 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001b3de:	8013      	strh	r3, [r2, #0]
9001b3e0:	428b      	cmp	r3, r1
9001b3e2:	d10d      	bne.n	9001b400 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001b3e4:	882d      	ldrh	r5, [r5, #0]
9001b3e6:	2300      	movs	r3, #0
9001b3e8:	6830      	ldr	r0, [r6, #0]
9001b3ea:	240e      	movs	r4, #14
9001b3ec:	429d      	cmp	r5, r3
9001b3ee:	d90f      	bls.n	9001b410 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b3f0:	fb04 0203 	mla	r2, r4, r3, r0
9001b3f4:	3301      	adds	r3, #1
9001b3f6:	7b11      	ldrb	r1, [r2, #12]
9001b3f8:	f36f 1145 	bfc	r1, #5, #1
9001b3fc:	7311      	strb	r1, [r2, #12]
9001b3fe:	e7f5      	b.n	9001b3ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
9001b400:	6822      	ldr	r2, [r4, #0]
9001b402:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001b406:	6802      	ldr	r2, [r0, #0]
9001b408:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001b40c:	3301      	adds	r3, #1
9001b40e:	e7e7      	b.n	9001b3e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
9001b410:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001b412:	bf00      	nop
9001b414:	24028258 	.word	0x24028258
9001b418:	24028274 	.word	0x24028274
9001b41c:	24028278 	.word	0x24028278
9001b420:	2402826c 	.word	0x2402826c
9001b424:	2402825c 	.word	0x2402825c
9001b428:	24028264 	.word	0x24028264
9001b42c:	24028276 	.word	0x24028276
9001b430:	24028260 	.word	0x24028260
9001b434:	24028270 	.word	0x24028270
9001b438:	24028268 	.word	0x24028268

9001b43c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001b43c:	4b06      	ldr	r3, [pc, #24]	; (9001b458 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001b43e:	681b      	ldr	r3, [r3, #0]
9001b440:	b943      	cbnz	r3, 9001b454 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b442:	b139      	cbz	r1, 9001b454 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b444:	4b05      	ldr	r3, [pc, #20]	; (9001b45c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
9001b446:	801a      	strh	r2, [r3, #0]
9001b448:	4b05      	ldr	r3, [pc, #20]	; (9001b460 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001b44a:	6019      	str	r1, [r3, #0]
9001b44c:	4b05      	ldr	r3, [pc, #20]	; (9001b464 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001b44e:	6018      	str	r0, [r3, #0]
9001b450:	f7ff bf96 	b.w	9001b380 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001b454:	4770      	bx	lr
9001b456:	bf00      	nop
9001b458:	24028264 	.word	0x24028264
9001b45c:	24028278 	.word	0x24028278
9001b460:	24028260 	.word	0x24028260
9001b464:	24028258 	.word	0x24028258

9001b468 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001b468:	b470      	push	{r4, r5, r6}
9001b46a:	4c07      	ldr	r4, [pc, #28]	; (9001b488 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001b46c:	4605      	mov	r5, r0
9001b46e:	4610      	mov	r0, r2
9001b470:	9a03      	ldr	r2, [sp, #12]
9001b472:	6826      	ldr	r6, [r4, #0]
9001b474:	b936      	cbnz	r6, 9001b484 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001b476:	6025      	str	r5, [r4, #0]
9001b478:	4c04      	ldr	r4, [pc, #16]	; (9001b48c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001b47a:	8021      	strh	r1, [r4, #0]
9001b47c:	4619      	mov	r1, r3
9001b47e:	bc70      	pop	{r4, r5, r6}
9001b480:	f7ff bfdc 	b.w	9001b43c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001b484:	bc70      	pop	{r4, r5, r6}
9001b486:	4770      	bx	lr
9001b488:	2402827c 	.word	0x2402827c
9001b48c:	24028274 	.word	0x24028274

9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001b490:	4a12      	ldr	r2, [pc, #72]	; (9001b4dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
9001b492:	8803      	ldrh	r3, [r0, #0]
9001b494:	8812      	ldrh	r2, [r2, #0]
9001b496:	4293      	cmp	r3, r2
9001b498:	d207      	bcs.n	9001b4aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001b49a:	4a11      	ldr	r2, [pc, #68]	; (9001b4e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001b49c:	2114      	movs	r1, #20
9001b49e:	6812      	ldr	r2, [r2, #0]
9001b4a0:	fb01 2303 	mla	r3, r1, r3, r2
9001b4a4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001b4a8:	4770      	bx	lr
9001b4aa:	490e      	ldr	r1, [pc, #56]	; (9001b4e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001b4ac:	8809      	ldrh	r1, [r1, #0]
9001b4ae:	4411      	add	r1, r2
9001b4b0:	428b      	cmp	r3, r1
9001b4b2:	da04      	bge.n	9001b4be <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001b4b4:	1a9b      	subs	r3, r3, r2
9001b4b6:	4a0c      	ldr	r2, [pc, #48]	; (9001b4e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001b4b8:	210e      	movs	r1, #14
9001b4ba:	6812      	ldr	r2, [r2, #0]
9001b4bc:	e7f0      	b.n	9001b4a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001b4be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b4c2:	4293      	cmp	r3, r2
9001b4c4:	d108      	bne.n	9001b4d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001b4c6:	4b09      	ldr	r3, [pc, #36]	; (9001b4ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001b4c8:	781b      	ldrb	r3, [r3, #0]
9001b4ca:	b91b      	cbnz	r3, 9001b4d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001b4cc:	4b08      	ldr	r3, [pc, #32]	; (9001b4f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001b4ce:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b4d2:	4770      	bx	lr
9001b4d4:	4b07      	ldr	r3, [pc, #28]	; (9001b4f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001b4d6:	e7fa      	b.n	9001b4ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001b4d8:	2000      	movs	r0, #0
9001b4da:	4770      	bx	lr
9001b4dc:	24028274 	.word	0x24028274
9001b4e0:	2402827c 	.word	0x2402827c
9001b4e4:	24028278 	.word	0x24028278
9001b4e8:	2402825c 	.word	0x2402825c
9001b4ec:	240281e4 	.word	0x240281e4
9001b4f0:	240281e6 	.word	0x240281e6
9001b4f4:	240281e8 	.word	0x240281e8

9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001b4f8:	4a12      	ldr	r2, [pc, #72]	; (9001b544 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001b4fa:	8803      	ldrh	r3, [r0, #0]
9001b4fc:	8812      	ldrh	r2, [r2, #0]
9001b4fe:	4293      	cmp	r3, r2
9001b500:	d207      	bcs.n	9001b512 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001b502:	4a11      	ldr	r2, [pc, #68]	; (9001b548 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001b504:	2114      	movs	r1, #20
9001b506:	6812      	ldr	r2, [r2, #0]
9001b508:	fb01 2303 	mla	r3, r1, r3, r2
9001b50c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
9001b510:	4770      	bx	lr
9001b512:	490e      	ldr	r1, [pc, #56]	; (9001b54c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001b514:	8809      	ldrh	r1, [r1, #0]
9001b516:	4411      	add	r1, r2
9001b518:	428b      	cmp	r3, r1
9001b51a:	da04      	bge.n	9001b526 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001b51c:	1a9b      	subs	r3, r3, r2
9001b51e:	4a0c      	ldr	r2, [pc, #48]	; (9001b550 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001b520:	210e      	movs	r1, #14
9001b522:	6812      	ldr	r2, [r2, #0]
9001b524:	e7f0      	b.n	9001b508 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001b526:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b52a:	4293      	cmp	r3, r2
9001b52c:	d108      	bne.n	9001b540 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001b52e:	4b09      	ldr	r3, [pc, #36]	; (9001b554 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001b530:	781b      	ldrb	r3, [r3, #0]
9001b532:	b91b      	cbnz	r3, 9001b53c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001b534:	4b08      	ldr	r3, [pc, #32]	; (9001b558 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001b536:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b53a:	4770      	bx	lr
9001b53c:	4b07      	ldr	r3, [pc, #28]	; (9001b55c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001b53e:	e7fa      	b.n	9001b536 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
9001b540:	2000      	movs	r0, #0
9001b542:	4770      	bx	lr
9001b544:	24028274 	.word	0x24028274
9001b548:	2402827c 	.word	0x2402827c
9001b54c:	24028278 	.word	0x24028278
9001b550:	2402825c 	.word	0x2402825c
9001b554:	240281e4 	.word	0x240281e4
9001b558:	240281e8 	.word	0x240281e8
9001b55c:	240281e6 	.word	0x240281e6

9001b560 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001b560:	4a1f      	ldr	r2, [pc, #124]	; (9001b5e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
9001b562:	b510      	push	{r4, lr}
9001b564:	880b      	ldrh	r3, [r1, #0]
9001b566:	8812      	ldrh	r2, [r2, #0]
9001b568:	4293      	cmp	r3, r2
9001b56a:	d213      	bcs.n	9001b594 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001b56c:	4a1d      	ldr	r2, [pc, #116]	; (9001b5e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001b56e:	2114      	movs	r1, #20
9001b570:	6812      	ldr	r2, [r2, #0]
9001b572:	fb01 2303 	mla	r3, r1, r3, r2
9001b576:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001b57a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001b57e:	8a1a      	ldrh	r2, [r3, #16]
9001b580:	8a5b      	ldrh	r3, [r3, #18]
9001b582:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b586:	8004      	strh	r4, [r0, #0]
9001b588:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001b58c:	8041      	strh	r1, [r0, #2]
9001b58e:	8082      	strh	r2, [r0, #4]
9001b590:	80c3      	strh	r3, [r0, #6]
9001b592:	e00e      	b.n	9001b5b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b594:	4914      	ldr	r1, [pc, #80]	; (9001b5e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
9001b596:	8809      	ldrh	r1, [r1, #0]
9001b598:	4411      	add	r1, r2
9001b59a:	428b      	cmp	r3, r1
9001b59c:	da0a      	bge.n	9001b5b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001b59e:	1a9b      	subs	r3, r3, r2
9001b5a0:	4a12      	ldr	r2, [pc, #72]	; (9001b5ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001b5a2:	210e      	movs	r1, #14
9001b5a4:	6812      	ldr	r2, [r2, #0]
9001b5a6:	fb01 2303 	mla	r3, r1, r3, r2
9001b5aa:	681a      	ldr	r2, [r3, #0]
9001b5ac:	6002      	str	r2, [r0, #0]
9001b5ae:	685a      	ldr	r2, [r3, #4]
9001b5b0:	6042      	str	r2, [r0, #4]
9001b5b2:	bd10      	pop	{r4, pc}
9001b5b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b5b8:	4293      	cmp	r3, r2
9001b5ba:	d10b      	bne.n	9001b5d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001b5bc:	4b0c      	ldr	r3, [pc, #48]	; (9001b5f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001b5be:	f9b3 1000 	ldrsh.w	r1, [r3]
9001b5c2:	4b0c      	ldr	r3, [pc, #48]	; (9001b5f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001b5c4:	8081      	strh	r1, [r0, #4]
9001b5c6:	f9b3 2000 	ldrsh.w	r2, [r3]
9001b5ca:	2300      	movs	r3, #0
9001b5cc:	80c2      	strh	r2, [r0, #6]
9001b5ce:	8003      	strh	r3, [r0, #0]
9001b5d0:	8043      	strh	r3, [r0, #2]
9001b5d2:	e7ee      	b.n	9001b5b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b5d4:	2300      	movs	r3, #0
9001b5d6:	8003      	strh	r3, [r0, #0]
9001b5d8:	8043      	strh	r3, [r0, #2]
9001b5da:	8083      	strh	r3, [r0, #4]
9001b5dc:	e7d8      	b.n	9001b590 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001b5de:	bf00      	nop
9001b5e0:	24028274 	.word	0x24028274
9001b5e4:	2402827c 	.word	0x2402827c
9001b5e8:	24028278 	.word	0x24028278
9001b5ec:	2402825c 	.word	0x2402825c
9001b5f0:	240281e0 	.word	0x240281e0
9001b5f4:	240281e2 	.word	0x240281e2

9001b5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001b5f8:	4a17      	ldr	r2, [pc, #92]	; (9001b658 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001b5fa:	8803      	ldrh	r3, [r0, #0]
9001b5fc:	8812      	ldrh	r2, [r2, #0]
9001b5fe:	4293      	cmp	r3, r2
9001b600:	d213      	bcs.n	9001b62a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001b602:	4a16      	ldr	r2, [pc, #88]	; (9001b65c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001b604:	2114      	movs	r1, #20
9001b606:	6812      	ldr	r2, [r2, #0]
9001b608:	fb01 2303 	mla	r3, r1, r3, r2
9001b60c:	8a1a      	ldrh	r2, [r3, #16]
9001b60e:	8919      	ldrh	r1, [r3, #8]
9001b610:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b614:	428a      	cmp	r2, r1
9001b616:	db1d      	blt.n	9001b654 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b618:	8a58      	ldrh	r0, [r3, #18]
9001b61a:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001b61e:	895b      	ldrh	r3, [r3, #10]
9001b620:	4298      	cmp	r0, r3
9001b622:	bfac      	ite	ge
9001b624:	2000      	movge	r0, #0
9001b626:	2001      	movlt	r0, #1
9001b628:	4770      	bx	lr
9001b62a:	490d      	ldr	r1, [pc, #52]	; (9001b660 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001b62c:	8809      	ldrh	r1, [r1, #0]
9001b62e:	4411      	add	r1, r2
9001b630:	428b      	cmp	r3, r1
9001b632:	da0d      	bge.n	9001b650 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001b634:	1a9b      	subs	r3, r3, r2
9001b636:	4a0b      	ldr	r2, [pc, #44]	; (9001b664 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001b638:	210e      	movs	r1, #14
9001b63a:	6812      	ldr	r2, [r2, #0]
9001b63c:	fb01 2303 	mla	r3, r1, r3, r2
9001b640:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001b644:	891a      	ldrh	r2, [r3, #8]
9001b646:	4291      	cmp	r1, r2
9001b648:	db04      	blt.n	9001b654 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b64a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001b64e:	e7e6      	b.n	9001b61e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
9001b650:	2000      	movs	r0, #0
9001b652:	4770      	bx	lr
9001b654:	2001      	movs	r0, #1
9001b656:	4770      	bx	lr
9001b658:	24028274 	.word	0x24028274
9001b65c:	2402827c 	.word	0x2402827c
9001b660:	24028278 	.word	0x24028278
9001b664:	2402825c 	.word	0x2402825c

9001b668 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001b668:	4a12      	ldr	r2, [pc, #72]	; (9001b6b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001b66a:	8803      	ldrh	r3, [r0, #0]
9001b66c:	8811      	ldrh	r1, [r2, #0]
9001b66e:	428b      	cmp	r3, r1
9001b670:	d20b      	bcs.n	9001b68a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001b672:	4a11      	ldr	r2, [pc, #68]	; (9001b6b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b674:	6812      	ldr	r2, [r2, #0]
9001b676:	b112      	cbz	r2, 9001b67e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001b678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b67c:	b9c0      	cbnz	r0, 9001b6b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001b67e:	4a0f      	ldr	r2, [pc, #60]	; (9001b6bc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001b680:	6811      	ldr	r1, [r2, #0]
9001b682:	2214      	movs	r2, #20
9001b684:	4353      	muls	r3, r2
9001b686:	58c8      	ldr	r0, [r1, r3]
9001b688:	4770      	bx	lr
9001b68a:	4a0d      	ldr	r2, [pc, #52]	; (9001b6c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001b68c:	8812      	ldrh	r2, [r2, #0]
9001b68e:	440a      	add	r2, r1
9001b690:	4293      	cmp	r3, r2
9001b692:	da04      	bge.n	9001b69e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001b694:	4a08      	ldr	r2, [pc, #32]	; (9001b6b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b696:	6812      	ldr	r2, [r2, #0]
9001b698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b69c:	4770      	bx	lr
9001b69e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b6a2:	4293      	cmp	r3, r2
9001b6a4:	d103      	bne.n	9001b6ae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001b6a6:	4b07      	ldr	r3, [pc, #28]	; (9001b6c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001b6a8:	681b      	ldr	r3, [r3, #0]
9001b6aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001b6ac:	4770      	bx	lr
9001b6ae:	2000      	movs	r0, #0
9001b6b0:	4770      	bx	lr
9001b6b2:	bf00      	nop
9001b6b4:	24028274 	.word	0x24028274
9001b6b8:	24028258 	.word	0x24028258
9001b6bc:	2402827c 	.word	0x2402827c
9001b6c0:	24028278 	.word	0x24028278
9001b6c4:	240281ec 	.word	0x240281ec

9001b6c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001b6c8:	4b24      	ldr	r3, [pc, #144]	; (9001b75c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001b6ca:	8802      	ldrh	r2, [r0, #0]
9001b6cc:	8818      	ldrh	r0, [r3, #0]
9001b6ce:	4282      	cmp	r2, r0
9001b6d0:	d221      	bcs.n	9001b716 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001b6d2:	4b23      	ldr	r3, [pc, #140]	; (9001b760 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001b6d4:	6819      	ldr	r1, [r3, #0]
9001b6d6:	2314      	movs	r3, #20
9001b6d8:	fb03 1302 	mla	r3, r3, r2, r1
9001b6dc:	6858      	ldr	r0, [r3, #4]
9001b6de:	2800      	cmp	r0, #0
9001b6e0:	d03a      	beq.n	9001b758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b6e2:	4920      	ldr	r1, [pc, #128]	; (9001b764 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b6e4:	6809      	ldr	r1, [r1, #0]
9001b6e6:	2900      	cmp	r1, #0
9001b6e8:	d036      	beq.n	9001b758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b6ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001b6ee:	2900      	cmp	r1, #0
9001b6f0:	d032      	beq.n	9001b758 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b6f2:	891a      	ldrh	r2, [r3, #8]
9001b6f4:	8958      	ldrh	r0, [r3, #10]
9001b6f6:	4350      	muls	r0, r2
9001b6f8:	7c5a      	ldrb	r2, [r3, #17]
9001b6fa:	7cdb      	ldrb	r3, [r3, #19]
9001b6fc:	0952      	lsrs	r2, r2, #5
9001b6fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001b702:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001b706:	2b0b      	cmp	r3, #11
9001b708:	bf18      	it	ne
9001b70a:	0040      	lslne	r0, r0, #1
9001b70c:	3003      	adds	r0, #3
9001b70e:	f020 0003 	bic.w	r0, r0, #3
9001b712:	4408      	add	r0, r1
9001b714:	4770      	bx	lr
9001b716:	4b14      	ldr	r3, [pc, #80]	; (9001b768 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001b718:	881b      	ldrh	r3, [r3, #0]
9001b71a:	4403      	add	r3, r0
9001b71c:	429a      	cmp	r2, r3
9001b71e:	da1a      	bge.n	9001b756 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b720:	4b12      	ldr	r3, [pc, #72]	; (9001b76c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001b722:	1a10      	subs	r0, r2, r0
9001b724:	210e      	movs	r1, #14
9001b726:	681b      	ldr	r3, [r3, #0]
9001b728:	fb01 3000 	mla	r0, r1, r0, r3
9001b72c:	7b03      	ldrb	r3, [r0, #12]
9001b72e:	f003 031f 	and.w	r3, r3, #31
9001b732:	2b0b      	cmp	r3, #11
9001b734:	d10b      	bne.n	9001b74e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001b736:	8903      	ldrh	r3, [r0, #8]
9001b738:	8940      	ldrh	r0, [r0, #10]
9001b73a:	4358      	muls	r0, r3
9001b73c:	4b09      	ldr	r3, [pc, #36]	; (9001b764 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b73e:	3003      	adds	r0, #3
9001b740:	6819      	ldr	r1, [r3, #0]
9001b742:	f020 0303 	bic.w	r3, r0, #3
9001b746:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001b74a:	4418      	add	r0, r3
9001b74c:	4770      	bx	lr
9001b74e:	2b0d      	cmp	r3, #13
9001b750:	d101      	bne.n	9001b756 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b752:	300d      	adds	r0, #13
9001b754:	4770      	bx	lr
9001b756:	2000      	movs	r0, #0
9001b758:	4770      	bx	lr
9001b75a:	bf00      	nop
9001b75c:	24028274 	.word	0x24028274
9001b760:	2402827c 	.word	0x2402827c
9001b764:	24028258 	.word	0x24028258
9001b768:	24028278 	.word	0x24028278
9001b76c:	2402825c 	.word	0x2402825c

9001b770 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001b770:	4a17      	ldr	r2, [pc, #92]	; (9001b7d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001b772:	b510      	push	{r4, lr}
9001b774:	8803      	ldrh	r3, [r0, #0]
9001b776:	8812      	ldrh	r2, [r2, #0]
9001b778:	4293      	cmp	r3, r2
9001b77a:	d20c      	bcs.n	9001b796 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001b77c:	4a15      	ldr	r2, [pc, #84]	; (9001b7d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001b77e:	2114      	movs	r1, #20
9001b780:	6812      	ldr	r2, [r2, #0]
9001b782:	fb01 2303 	mla	r3, r1, r3, r2
9001b786:	7c58      	ldrb	r0, [r3, #17]
9001b788:	0942      	lsrs	r2, r0, #5
9001b78a:	7cd8      	ldrb	r0, [r3, #19]
9001b78c:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001b790:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001b794:	bd10      	pop	{r4, pc}
9001b796:	4910      	ldr	r1, [pc, #64]	; (9001b7d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001b798:	8809      	ldrh	r1, [r1, #0]
9001b79a:	4411      	add	r1, r2
9001b79c:	428b      	cmp	r3, r1
9001b79e:	da09      	bge.n	9001b7b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001b7a0:	1a9b      	subs	r3, r3, r2
9001b7a2:	4a0e      	ldr	r2, [pc, #56]	; (9001b7dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001b7a4:	210e      	movs	r1, #14
9001b7a6:	6812      	ldr	r2, [r2, #0]
9001b7a8:	fb01 2303 	mla	r3, r1, r3, r2
9001b7ac:	7b18      	ldrb	r0, [r3, #12]
9001b7ae:	f000 001f 	and.w	r0, r0, #31
9001b7b2:	e7ef      	b.n	9001b794 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b7b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b7b8:	4293      	cmp	r3, r2
9001b7ba:	d106      	bne.n	9001b7ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001b7bc:	f7f7 fe28 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
9001b7c0:	6803      	ldr	r3, [r0, #0]
9001b7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b7c8:	4718      	bx	r3
9001b7ca:	2000      	movs	r0, #0
9001b7cc:	e7e2      	b.n	9001b794 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b7ce:	bf00      	nop
9001b7d0:	24028274 	.word	0x24028274
9001b7d4:	2402827c 	.word	0x2402827c
9001b7d8:	24028278 	.word	0x24028278
9001b7dc:	2402825c 	.word	0x2402825c

9001b7e0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001b7e0:	2010      	movs	r0, #16
9001b7e2:	4770      	bx	lr

9001b7e4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001b7e4:	4b02      	ldr	r3, [pc, #8]	; (9001b7f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001b7e6:	8818      	ldrh	r0, [r3, #0]
9001b7e8:	0040      	lsls	r0, r0, #1
9001b7ea:	b280      	uxth	r0, r0
9001b7ec:	4770      	bx	lr
9001b7ee:	bf00      	nop
9001b7f0:	240281e6 	.word	0x240281e6

9001b7f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001b7f4:	2bff      	cmp	r3, #255	; 0xff
9001b7f6:	d050      	beq.n	9001b89a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001b7f8:	2a0b      	cmp	r2, #11
9001b7fa:	d04a      	beq.n	9001b892 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b7fc:	d80e      	bhi.n	9001b81c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001b7fe:	2a03      	cmp	r2, #3
9001b800:	d03f      	beq.n	9001b882 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001b802:	d804      	bhi.n	9001b80e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001b804:	2a01      	cmp	r2, #1
9001b806:	d03e      	beq.n	9001b886 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001b808:	d93f      	bls.n	9001b88a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001b80a:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001b80c:	4770      	bx	lr
9001b80e:	2a09      	cmp	r2, #9
9001b810:	d03f      	beq.n	9001b892 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b812:	d83c      	bhi.n	9001b88e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b814:	2a08      	cmp	r2, #8
9001b816:	d03a      	beq.n	9001b88e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b818:	2000      	movs	r0, #0
9001b81a:	4770      	bx	lr
9001b81c:	2a2f      	cmp	r2, #47	; 0x2f
9001b81e:	d024      	beq.n	9001b86a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001b820:	d80d      	bhi.n	9001b83e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001b822:	2a2d      	cmp	r2, #45	; 0x2d
9001b824:	d014      	beq.n	9001b850 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001b826:	d826      	bhi.n	9001b876 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001b828:	2a2c      	cmp	r2, #44	; 0x2c
9001b82a:	d1f5      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b82c:	684b      	ldr	r3, [r1, #4]
9001b82e:	781b      	ldrb	r3, [r3, #0]
9001b830:	2b01      	cmp	r3, #1
9001b832:	d018      	beq.n	9001b866 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001b834:	d323      	bcc.n	9001b87e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001b836:	2b02      	cmp	r3, #2
9001b838:	d1ee      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b83a:	6880      	ldr	r0, [r0, #8]
9001b83c:	4770      	bx	lr
9001b83e:	2a31      	cmp	r2, #49	; 0x31
9001b840:	d004      	beq.n	9001b84c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001b842:	d328      	bcc.n	9001b896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b844:	2a32      	cmp	r2, #50	; 0x32
9001b846:	d026      	beq.n	9001b896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b848:	2a33      	cmp	r2, #51	; 0x33
9001b84a:	d1e5      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b84c:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001b84e:	4770      	bx	lr
9001b850:	684b      	ldr	r3, [r1, #4]
9001b852:	781b      	ldrb	r3, [r3, #0]
9001b854:	2b01      	cmp	r3, #1
9001b856:	d004      	beq.n	9001b862 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001b858:	d30b      	bcc.n	9001b872 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001b85a:	2b02      	cmp	r3, #2
9001b85c:	d1dc      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b85e:	6900      	ldr	r0, [r0, #16]
9001b860:	4770      	bx	lr
9001b862:	6a00      	ldr	r0, [r0, #32]
9001b864:	4770      	bx	lr
9001b866:	6980      	ldr	r0, [r0, #24]
9001b868:	4770      	bx	lr
9001b86a:	684b      	ldr	r3, [r1, #4]
9001b86c:	781b      	ldrb	r3, [r3, #0]
9001b86e:	2b00      	cmp	r3, #0
9001b870:	d1d2      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b872:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001b874:	4770      	bx	lr
9001b876:	684b      	ldr	r3, [r1, #4]
9001b878:	781b      	ldrb	r3, [r3, #0]
9001b87a:	2b00      	cmp	r3, #0
9001b87c:	d1cc      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b87e:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001b880:	4770      	bx	lr
9001b882:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001b884:	4770      	bx	lr
9001b886:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001b888:	4770      	bx	lr
9001b88a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001b88c:	4770      	bx	lr
9001b88e:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001b890:	4770      	bx	lr
9001b892:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001b894:	4770      	bx	lr
9001b896:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001b898:	4770      	bx	lr
9001b89a:	2a0b      	cmp	r2, #11
9001b89c:	d049      	beq.n	9001b932 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b89e:	d80e      	bhi.n	9001b8be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001b8a0:	2a03      	cmp	r2, #3
9001b8a2:	d040      	beq.n	9001b926 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001b8a4:	d804      	bhi.n	9001b8b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001b8a6:	2a01      	cmp	r2, #1
9001b8a8:	d03f      	beq.n	9001b92a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001b8aa:	d940      	bls.n	9001b92e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001b8ac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001b8ae:	4770      	bx	lr
9001b8b0:	2a09      	cmp	r2, #9
9001b8b2:	d03e      	beq.n	9001b932 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b8b4:	d801      	bhi.n	9001b8ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001b8b6:	2a08      	cmp	r2, #8
9001b8b8:	d1ae      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b8ba:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001b8bc:	4770      	bx	lr
9001b8be:	2a2f      	cmp	r2, #47	; 0x2f
9001b8c0:	d024      	beq.n	9001b90c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001b8c2:	d80d      	bhi.n	9001b8e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001b8c4:	2a2d      	cmp	r2, #45	; 0x2d
9001b8c6:	d014      	beq.n	9001b8f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001b8c8:	d826      	bhi.n	9001b918 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001b8ca:	2a2c      	cmp	r2, #44	; 0x2c
9001b8cc:	d1a4      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b8ce:	684b      	ldr	r3, [r1, #4]
9001b8d0:	781b      	ldrb	r3, [r3, #0]
9001b8d2:	2b01      	cmp	r3, #1
9001b8d4:	d018      	beq.n	9001b908 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001b8d6:	d324      	bcc.n	9001b922 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001b8d8:	2b02      	cmp	r3, #2
9001b8da:	d19d      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b8dc:	68c0      	ldr	r0, [r0, #12]
9001b8de:	4770      	bx	lr
9001b8e0:	2a31      	cmp	r2, #49	; 0x31
9001b8e2:	d004      	beq.n	9001b8ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001b8e4:	d327      	bcc.n	9001b936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b8e6:	2a32      	cmp	r2, #50	; 0x32
9001b8e8:	d025      	beq.n	9001b936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b8ea:	2a33      	cmp	r2, #51	; 0x33
9001b8ec:	d194      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b8ee:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001b8f0:	4770      	bx	lr
9001b8f2:	684b      	ldr	r3, [r1, #4]
9001b8f4:	781b      	ldrb	r3, [r3, #0]
9001b8f6:	2b01      	cmp	r3, #1
9001b8f8:	d004      	beq.n	9001b904 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001b8fa:	d30b      	bcc.n	9001b914 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001b8fc:	2b02      	cmp	r3, #2
9001b8fe:	d18b      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b900:	6940      	ldr	r0, [r0, #20]
9001b902:	4770      	bx	lr
9001b904:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001b906:	4770      	bx	lr
9001b908:	69c0      	ldr	r0, [r0, #28]
9001b90a:	4770      	bx	lr
9001b90c:	684b      	ldr	r3, [r1, #4]
9001b90e:	781b      	ldrb	r3, [r3, #0]
9001b910:	2b00      	cmp	r3, #0
9001b912:	d181      	bne.n	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b914:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001b916:	4770      	bx	lr
9001b918:	684b      	ldr	r3, [r1, #4]
9001b91a:	781b      	ldrb	r3, [r3, #0]
9001b91c:	2b00      	cmp	r3, #0
9001b91e:	f47f af7b 	bne.w	9001b818 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b922:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001b924:	4770      	bx	lr
9001b926:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001b928:	4770      	bx	lr
9001b92a:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001b92c:	4770      	bx	lr
9001b92e:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001b930:	4770      	bx	lr
9001b932:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001b934:	4770      	bx	lr
9001b936:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001b938:	4770      	bx	lr

9001b93a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b93a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b93e:	b087      	sub	sp, #28
9001b940:	9815      	ldr	r0, [sp, #84]	; 0x54
9001b942:	9205      	str	r2, [sp, #20]
9001b944:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b948:	9101      	str	r1, [sp, #4]
9001b94a:	9202      	str	r2, [sp, #8]
9001b94c:	6841      	ldr	r1, [r0, #4]
9001b94e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001b952:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001b956:	fb01 2404 	mla	r4, r1, r4, r2
9001b95a:	6802      	ldr	r2, [r0, #0]
9001b95c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b960:	f8de 2000 	ldr.w	r2, [lr]
9001b964:	9203      	str	r2, [sp, #12]
9001b966:	f8de 2004 	ldr.w	r2, [lr, #4]
9001b96a:	3204      	adds	r2, #4
9001b96c:	9204      	str	r2, [sp, #16]
9001b96e:	9a02      	ldr	r2, [sp, #8]
9001b970:	43d6      	mvns	r6, r2
9001b972:	b2f6      	uxtb	r6, r6
9001b974:	9a01      	ldr	r2, [sp, #4]
9001b976:	2a00      	cmp	r2, #0
9001b978:	dc03      	bgt.n	9001b982 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001b97a:	9a05      	ldr	r2, [sp, #20]
9001b97c:	2a00      	cmp	r2, #0
9001b97e:	f340 8129 	ble.w	9001bbd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b982:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b984:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001b988:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b98e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001b992:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b996:	2b00      	cmp	r3, #0
9001b998:	dd0e      	ble.n	9001b9b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001b99a:	1408      	asrs	r0, r1, #16
9001b99c:	d405      	bmi.n	9001b9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b99e:	4560      	cmp	r0, ip
9001b9a0:	da03      	bge.n	9001b9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b9a2:	1410      	asrs	r0, r2, #16
9001b9a4:	d401      	bmi.n	9001b9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b9a6:	42b8      	cmp	r0, r7
9001b9a8:	db07      	blt.n	9001b9ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001b9aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b9ac:	3b01      	subs	r3, #1
9001b9ae:	3402      	adds	r4, #2
9001b9b0:	4401      	add	r1, r0
9001b9b2:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b9b4:	4402      	add	r2, r0
9001b9b6:	e7ee      	b.n	9001b996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001b9b8:	d071      	beq.n	9001ba9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001b9ba:	1e58      	subs	r0, r3, #1
9001b9bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001b9be:	fb05 1500 	mla	r5, r5, r0, r1
9001b9c2:	142d      	asrs	r5, r5, #16
9001b9c4:	d45f      	bmi.n	9001ba86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b9c6:	4565      	cmp	r5, ip
9001b9c8:	da5d      	bge.n	9001ba86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b9ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001b9cc:	fb05 2000 	mla	r0, r5, r0, r2
9001b9d0:	1400      	asrs	r0, r0, #16
9001b9d2:	d458      	bmi.n	9001ba86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b9d4:	42b8      	cmp	r0, r7
9001b9d6:	da56      	bge.n	9001ba86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b9d8:	4699      	mov	r9, r3
9001b9da:	46a2      	mov	sl, r4
9001b9dc:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001b9e0:	f1b9 0f00 	cmp.w	r9, #0
9001b9e4:	dd57      	ble.n	9001ba96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001b9e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001b9ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001b9ee:	9803      	ldr	r0, [sp, #12]
9001b9f0:	140d      	asrs	r5, r1, #16
9001b9f2:	f109 39ff 	add.w	r9, r9, #4294967295
9001b9f6:	fb07 000c 	mla	r0, r7, ip, r0
9001b9fa:	5d40      	ldrb	r0, [r0, r5]
9001b9fc:	9d04      	ldr	r5, [sp, #16]
9001b9fe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001ba02:	f8ba 5000 	ldrh.w	r5, [sl]
9001ba06:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001ba0a:	122f      	asrs	r7, r5, #8
9001ba0c:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001ba10:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ba14:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ba18:	00ed      	lsls	r5, r5, #3
9001ba1a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001ba1e:	fb17 f706 	smulbb	r7, r7, r6
9001ba22:	b2ed      	uxtb	r5, r5
9001ba24:	fb18 f806 	smulbb	r8, r8, r6
9001ba28:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001ba2c:	10c7      	asrs	r7, r0, #3
9001ba2e:	fb15 f506 	smulbb	r5, r5, r6
9001ba32:	00c0      	lsls	r0, r0, #3
9001ba34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ba38:	fa1f fc8c 	uxth.w	ip, ip
9001ba3c:	b2c0      	uxtb	r0, r0
9001ba3e:	fb07 870b 	mla	r7, r7, fp, r8
9001ba42:	fb00 500b 	mla	r0, r0, fp, r5
9001ba46:	f10c 0501 	add.w	r5, ip, #1
9001ba4a:	b2bf      	uxth	r7, r7
9001ba4c:	b280      	uxth	r0, r0
9001ba4e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ba52:	f107 0801 	add.w	r8, r7, #1
9001ba56:	1c45      	adds	r5, r0, #1
9001ba58:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001ba5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ba60:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ba64:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ba66:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ba6a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ba6e:	4401      	add	r1, r0
9001ba70:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ba74:	9814      	ldr	r0, [sp, #80]	; 0x50
9001ba76:	ea45 0c0c 	orr.w	ip, r5, ip
9001ba7a:	4402      	add	r2, r0
9001ba7c:	ea4c 0c08 	orr.w	ip, ip, r8
9001ba80:	f82a cb02 	strh.w	ip, [sl], #2
9001ba84:	e7ac      	b.n	9001b9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001ba86:	f04f 0800 	mov.w	r8, #0
9001ba8a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001ba8e:	eb03 0008 	add.w	r0, r3, r8
9001ba92:	2800      	cmp	r0, #0
9001ba94:	dc41      	bgt.n	9001bb1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001ba96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ba9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ba9e:	9b01      	ldr	r3, [sp, #4]
9001baa0:	2b00      	cmp	r3, #0
9001baa2:	f340 8097 	ble.w	9001bbd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001baa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001baaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001baac:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bab0:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bab4:	eef0 6a62 	vmov.f32	s13, s5
9001bab8:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001babc:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bac0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001bac4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001bac8:	eef0 6a43 	vmov.f32	s13, s6
9001bacc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001bad0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001bad4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bad8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001badc:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bae0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bae4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bae8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001baec:	ee12 2a90 	vmov	r2, s5
9001baf0:	eef0 2a47 	vmov.f32	s5, s14
9001baf4:	fb92 f3f3 	sdiv	r3, r2, r3
9001baf8:	ee13 2a10 	vmov	r2, s6
9001bafc:	9313      	str	r3, [sp, #76]	; 0x4c
9001bafe:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bb00:	eeb0 3a67 	vmov.f32	s6, s15
9001bb04:	fb92 f3f3 	sdiv	r3, r2, r3
9001bb08:	9314      	str	r3, [sp, #80]	; 0x50
9001bb0a:	9b01      	ldr	r3, [sp, #4]
9001bb0c:	9a05      	ldr	r2, [sp, #20]
9001bb0e:	3b01      	subs	r3, #1
9001bb10:	9301      	str	r3, [sp, #4]
9001bb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bb14:	bf08      	it	eq
9001bb16:	4613      	moveq	r3, r2
9001bb18:	e72c      	b.n	9001b974 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001bb1a:	140f      	asrs	r7, r1, #16
9001bb1c:	d453      	bmi.n	9001bbc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001bb1e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001bb22:	42bd      	cmp	r5, r7
9001bb24:	dd4f      	ble.n	9001bbc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001bb26:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001bb2a:	d44c      	bmi.n	9001bbc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001bb2c:	f8de 000c 	ldr.w	r0, [lr, #12]
9001bb30:	4560      	cmp	r0, ip
9001bb32:	dd48      	ble.n	9001bbc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001bb34:	9803      	ldr	r0, [sp, #12]
9001bb36:	b22d      	sxth	r5, r5
9001bb38:	fb0c 0505 	mla	r5, ip, r5, r0
9001bb3c:	5de8      	ldrb	r0, [r5, r7]
9001bb3e:	9d04      	ldr	r5, [sp, #16]
9001bb40:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001bb44:	f06f 0501 	mvn.w	r5, #1
9001bb48:	fb05 fb08 	mul.w	fp, r5, r8
9001bb4c:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001bb50:	f834 500b 	ldrh.w	r5, [r4, fp]
9001bb54:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001bb58:	122f      	asrs	r7, r5, #8
9001bb5a:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001bb5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bb62:	00ed      	lsls	r5, r5, #3
9001bb64:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001bb68:	fb17 f706 	smulbb	r7, r7, r6
9001bb6c:	b2ed      	uxtb	r5, r5
9001bb6e:	fb19 f906 	smulbb	r9, r9, r6
9001bb72:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001bb76:	10c7      	asrs	r7, r0, #3
9001bb78:	fb15 f506 	smulbb	r5, r5, r6
9001bb7c:	00c0      	lsls	r0, r0, #3
9001bb7e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001bb82:	fa1f fc8c 	uxth.w	ip, ip
9001bb86:	b2c0      	uxtb	r0, r0
9001bb88:	fb07 970a 	mla	r7, r7, sl, r9
9001bb8c:	fb00 500a 	mla	r0, r0, sl, r5
9001bb90:	f10c 0501 	add.w	r5, ip, #1
9001bb94:	b2bf      	uxth	r7, r7
9001bb96:	b280      	uxth	r0, r0
9001bb98:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001bb9c:	f107 0901 	add.w	r9, r7, #1
9001bba0:	1c45      	adds	r5, r0, #1
9001bba2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001bba6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001bbaa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001bbae:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001bbb2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001bbb6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001bbba:	ea45 0c0c 	orr.w	ip, r5, ip
9001bbbe:	ea4c 0c09 	orr.w	ip, ip, r9
9001bbc2:	f824 c00b 	strh.w	ip, [r4, fp]
9001bbc6:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bbc8:	f108 38ff 	add.w	r8, r8, #4294967295
9001bbcc:	4401      	add	r1, r0
9001bbce:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bbd0:	4402      	add	r2, r0
9001bbd2:	e75c      	b.n	9001ba8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001bbd4:	b007      	add	sp, #28
9001bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bbda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bbda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bbde:	b085      	sub	sp, #20
9001bbe0:	4693      	mov	fp, r2
9001bbe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001bbe6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bbe8:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001bbea:	6870      	ldr	r0, [r6, #4]
9001bbec:	9100      	str	r1, [sp, #0]
9001bbee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001bbf2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001bbf6:	fb00 2404 	mla	r4, r0, r4, r2
9001bbfa:	6832      	ldr	r2, [r6, #0]
9001bbfc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bc00:	682a      	ldr	r2, [r5, #0]
9001bc02:	9201      	str	r2, [sp, #4]
9001bc04:	686a      	ldr	r2, [r5, #4]
9001bc06:	3204      	adds	r2, #4
9001bc08:	9202      	str	r2, [sp, #8]
9001bc0a:	9a00      	ldr	r2, [sp, #0]
9001bc0c:	2a00      	cmp	r2, #0
9001bc0e:	dc03      	bgt.n	9001bc18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001bc10:	f1bb 0f00 	cmp.w	fp, #0
9001bc14:	f340 80a0 	ble.w	9001bd58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bc18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bc1a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bc1e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bc22:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bc24:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bc28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bc2c:	2b00      	cmp	r3, #0
9001bc2e:	dd0c      	ble.n	9001bc4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001bc30:	1406      	asrs	r6, r0, #16
9001bc32:	d405      	bmi.n	9001bc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bc34:	454e      	cmp	r6, r9
9001bc36:	da03      	bge.n	9001bc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bc38:	1416      	asrs	r6, r2, #16
9001bc3a:	d401      	bmi.n	9001bc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bc3c:	4546      	cmp	r6, r8
9001bc3e:	db05      	blt.n	9001bc4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bc40:	4470      	add	r0, lr
9001bc42:	4462      	add	r2, ip
9001bc44:	3b01      	subs	r3, #1
9001bc46:	3402      	adds	r4, #2
9001bc48:	e7f0      	b.n	9001bc2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001bc4a:	d00f      	beq.n	9001bc6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001bc4c:	1e5e      	subs	r6, r3, #1
9001bc4e:	fb0e 0706 	mla	r7, lr, r6, r0
9001bc52:	143f      	asrs	r7, r7, #16
9001bc54:	d541      	bpl.n	9001bcda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001bc56:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001bc5a:	4698      	mov	r8, r3
9001bc5c:	9603      	str	r6, [sp, #12]
9001bc5e:	f1b8 0f00 	cmp.w	r8, #0
9001bc62:	dc59      	bgt.n	9001bd18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001bc64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bc68:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bc6c:	9b00      	ldr	r3, [sp, #0]
9001bc6e:	2b00      	cmp	r3, #0
9001bc70:	dd72      	ble.n	9001bd58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bc72:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bc76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bc78:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bc7c:	eeb0 6a62 	vmov.f32	s12, s5
9001bc80:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bc84:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bc88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bc8c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bc90:	eeb0 6a43 	vmov.f32	s12, s6
9001bc94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bc98:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bc9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bca0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bca4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bca8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bcac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bcb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bcb4:	ee12 2a90 	vmov	r2, s5
9001bcb8:	eef0 2a47 	vmov.f32	s5, s14
9001bcbc:	fb92 fef3 	sdiv	lr, r2, r3
9001bcc0:	ee13 2a10 	vmov	r2, s6
9001bcc4:	eeb0 3a67 	vmov.f32	s6, s15
9001bcc8:	fb92 fcf3 	sdiv	ip, r2, r3
9001bccc:	9b00      	ldr	r3, [sp, #0]
9001bcce:	3b01      	subs	r3, #1
9001bcd0:	9300      	str	r3, [sp, #0]
9001bcd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bcd4:	bf08      	it	eq
9001bcd6:	465b      	moveq	r3, fp
9001bcd8:	e797      	b.n	9001bc0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001bcda:	454f      	cmp	r7, r9
9001bcdc:	dabb      	bge.n	9001bc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bcde:	fb0c 2606 	mla	r6, ip, r6, r2
9001bce2:	1436      	asrs	r6, r6, #16
9001bce4:	d4b7      	bmi.n	9001bc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bce6:	4546      	cmp	r6, r8
9001bce8:	dab5      	bge.n	9001bc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bcea:	461e      	mov	r6, r3
9001bcec:	46a0      	mov	r8, r4
9001bcee:	2e00      	cmp	r6, #0
9001bcf0:	ddb8      	ble.n	9001bc64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bcf2:	1417      	asrs	r7, r2, #16
9001bcf4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001bcf8:	9901      	ldr	r1, [sp, #4]
9001bcfa:	ea4f 4920 	mov.w	r9, r0, asr #16
9001bcfe:	4462      	add	r2, ip
9001bd00:	4470      	add	r0, lr
9001bd02:	fb0a 1707 	mla	r7, sl, r7, r1
9001bd06:	9902      	ldr	r1, [sp, #8]
9001bd08:	3e01      	subs	r6, #1
9001bd0a:	f817 7009 	ldrb.w	r7, [r7, r9]
9001bd0e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001bd12:	f828 7b02 	strh.w	r7, [r8], #2
9001bd16:	e7ea      	b.n	9001bcee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001bd18:	ea5f 4920 	movs.w	r9, r0, asr #16
9001bd1c:	d417      	bmi.n	9001bd4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bd1e:	68ae      	ldr	r6, [r5, #8]
9001bd20:	454e      	cmp	r6, r9
9001bd22:	dd14      	ble.n	9001bd4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bd24:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001bd28:	d411      	bmi.n	9001bd4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bd2a:	68ef      	ldr	r7, [r5, #12]
9001bd2c:	4557      	cmp	r7, sl
9001bd2e:	dd0e      	ble.n	9001bd4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bd30:	9f01      	ldr	r7, [sp, #4]
9001bd32:	b236      	sxth	r6, r6
9001bd34:	f06f 0101 	mvn.w	r1, #1
9001bd38:	fb0a 7606 	mla	r6, sl, r6, r7
9001bd3c:	9f02      	ldr	r7, [sp, #8]
9001bd3e:	f816 6009 	ldrb.w	r6, [r6, r9]
9001bd42:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001bd46:	fb01 f608 	mul.w	r6, r1, r8
9001bd4a:	9903      	ldr	r1, [sp, #12]
9001bd4c:	538f      	strh	r7, [r1, r6]
9001bd4e:	4470      	add	r0, lr
9001bd50:	4462      	add	r2, ip
9001bd52:	f108 38ff 	add.w	r8, r8, #4294967295
9001bd56:	e782      	b.n	9001bc5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bd58:	b005      	add	sp, #20
9001bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bd5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bd5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bd62:	b087      	sub	sp, #28
9001bd64:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bd66:	9205      	str	r2, [sp, #20]
9001bd68:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001bd6c:	9102      	str	r1, [sp, #8]
9001bd6e:	9203      	str	r2, [sp, #12]
9001bd70:	6861      	ldr	r1, [r4, #4]
9001bd72:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001bd76:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001bd7a:	fb01 2000 	mla	r0, r1, r0, r2
9001bd7e:	6822      	ldr	r2, [r4, #0]
9001bd80:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001bd84:	9200      	str	r2, [sp, #0]
9001bd86:	f8dc 2000 	ldr.w	r2, [ip]
9001bd8a:	9204      	str	r2, [sp, #16]
9001bd8c:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001bd90:	3204      	adds	r2, #4
9001bd92:	9201      	str	r2, [sp, #4]
9001bd94:	9a03      	ldr	r2, [sp, #12]
9001bd96:	43d5      	mvns	r5, r2
9001bd98:	b2ed      	uxtb	r5, r5
9001bd9a:	9a02      	ldr	r2, [sp, #8]
9001bd9c:	2a00      	cmp	r2, #0
9001bd9e:	dc03      	bgt.n	9001bda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001bda0:	9a05      	ldr	r2, [sp, #20]
9001bda2:	2a00      	cmp	r2, #0
9001bda4:	f340 812c 	ble.w	9001c000 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001bda8:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001bdaa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001bdae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bdb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bdb4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001bdb8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bdbc:	2b00      	cmp	r3, #0
9001bdbe:	dd10      	ble.n	9001bde2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bdc0:	140c      	asrs	r4, r1, #16
9001bdc2:	d405      	bmi.n	9001bdd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bdc4:	4574      	cmp	r4, lr
9001bdc6:	da03      	bge.n	9001bdd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bdc8:	1414      	asrs	r4, r2, #16
9001bdca:	d401      	bmi.n	9001bdd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bdcc:	42bc      	cmp	r4, r7
9001bdce:	db09      	blt.n	9001bde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001bdd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bdd2:	3b01      	subs	r3, #1
9001bdd4:	9800      	ldr	r0, [sp, #0]
9001bdd6:	4421      	add	r1, r4
9001bdd8:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001bdda:	3002      	adds	r0, #2
9001bddc:	4422      	add	r2, r4
9001bdde:	9000      	str	r0, [sp, #0]
9001bde0:	e7ec      	b.n	9001bdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001bde2:	d071      	beq.n	9001bec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001bde4:	1e5c      	subs	r4, r3, #1
9001bde6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bde8:	fb06 1604 	mla	r6, r6, r4, r1
9001bdec:	1436      	asrs	r6, r6, #16
9001bdee:	d45d      	bmi.n	9001beac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bdf0:	4576      	cmp	r6, lr
9001bdf2:	da5b      	bge.n	9001beac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bdf4:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001bdf6:	fb06 2404 	mla	r4, r6, r4, r2
9001bdfa:	1424      	asrs	r4, r4, #16
9001bdfc:	d456      	bmi.n	9001beac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bdfe:	42bc      	cmp	r4, r7
9001be00:	da54      	bge.n	9001beac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001be02:	4698      	mov	r8, r3
9001be04:	f8dd 9000 	ldr.w	r9, [sp]
9001be08:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001be0c:	f1b8 0f00 	cmp.w	r8, #0
9001be10:	dd54      	ble.n	9001bebc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001be12:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001be16:	1414      	asrs	r4, r2, #16
9001be18:	9804      	ldr	r0, [sp, #16]
9001be1a:	140e      	asrs	r6, r1, #16
9001be1c:	f108 38ff 	add.w	r8, r8, #4294967295
9001be20:	fb07 0404 	mla	r4, r7, r4, r0
9001be24:	9801      	ldr	r0, [sp, #4]
9001be26:	f814 e006 	ldrb.w	lr, [r4, r6]
9001be2a:	f8b9 4000 	ldrh.w	r4, [r9]
9001be2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001be32:	1227      	asrs	r7, r4, #8
9001be34:	eb00 0b0e 	add.w	fp, r0, lr
9001be38:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001be3c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001be40:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001be42:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001be46:	f89b b001 	ldrb.w	fp, [fp, #1]
9001be4a:	4401      	add	r1, r0
9001be4c:	fb16 f60a 	smulbb	r6, r6, sl
9001be50:	9814      	ldr	r0, [sp, #80]	; 0x50
9001be52:	fb1b fb0a 	smulbb	fp, fp, sl
9001be56:	fb07 6705 	mla	r7, r7, r5, r6
9001be5a:	10e6      	asrs	r6, r4, #3
9001be5c:	00e4      	lsls	r4, r4, #3
9001be5e:	4402      	add	r2, r0
9001be60:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001be64:	b2bf      	uxth	r7, r7
9001be66:	b2e4      	uxtb	r4, r4
9001be68:	fb06 b605 	mla	r6, r6, r5, fp
9001be6c:	fb14 f405 	smulbb	r4, r4, r5
9001be70:	b2b6      	uxth	r6, r6
9001be72:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001be76:	1c7c      	adds	r4, r7, #1
9001be78:	f106 0b01 	add.w	fp, r6, #1
9001be7c:	fa1f fe8e 	uxth.w	lr, lr
9001be80:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001be84:	f10e 0401 	add.w	r4, lr, #1
9001be88:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001be8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001be90:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001be94:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001be98:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001be9c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001bea0:	4327      	orrs	r7, r4
9001bea2:	ea47 070b 	orr.w	r7, r7, fp
9001bea6:	f829 7b02 	strh.w	r7, [r9], #2
9001beaa:	e7af      	b.n	9001be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001beac:	f04f 0e00 	mov.w	lr, #0
9001beb0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001beb4:	eb03 040e 	add.w	r4, r3, lr
9001beb8:	2c00      	cmp	r4, #0
9001beba:	dc43      	bgt.n	9001bf44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001bebc:	9a00      	ldr	r2, [sp, #0]
9001bebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bec2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001bec6:	9300      	str	r3, [sp, #0]
9001bec8:	9b02      	ldr	r3, [sp, #8]
9001beca:	2b00      	cmp	r3, #0
9001becc:	f340 8098 	ble.w	9001c000 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001bed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001bed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bed6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001beda:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bede:	eef0 6a62 	vmov.f32	s13, s5
9001bee2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001bee6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001beea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001beee:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001bef2:	eef0 6a43 	vmov.f32	s13, s6
9001bef6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001befa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001befe:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bf02:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bf06:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bf0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bf0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bf12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bf16:	ee12 2a90 	vmov	r2, s5
9001bf1a:	eef0 2a47 	vmov.f32	s5, s14
9001bf1e:	fb92 f3f3 	sdiv	r3, r2, r3
9001bf22:	ee13 2a10 	vmov	r2, s6
9001bf26:	9313      	str	r3, [sp, #76]	; 0x4c
9001bf28:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bf2a:	eeb0 3a67 	vmov.f32	s6, s15
9001bf2e:	fb92 f3f3 	sdiv	r3, r2, r3
9001bf32:	9314      	str	r3, [sp, #80]	; 0x50
9001bf34:	9b02      	ldr	r3, [sp, #8]
9001bf36:	9a05      	ldr	r2, [sp, #20]
9001bf38:	3b01      	subs	r3, #1
9001bf3a:	9302      	str	r3, [sp, #8]
9001bf3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bf3e:	bf08      	it	eq
9001bf40:	4613      	moveq	r3, r2
9001bf42:	e72a      	b.n	9001bd9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bf44:	140f      	asrs	r7, r1, #16
9001bf46:	d454      	bmi.n	9001bff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bf48:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001bf4c:	42be      	cmp	r6, r7
9001bf4e:	dd50      	ble.n	9001bff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bf50:	ea5f 4822 	movs.w	r8, r2, asr #16
9001bf54:	d44d      	bmi.n	9001bff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bf56:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001bf5a:	4544      	cmp	r4, r8
9001bf5c:	dd49      	ble.n	9001bff2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bf5e:	9c04      	ldr	r4, [sp, #16]
9001bf60:	b236      	sxth	r6, r6
9001bf62:	f06f 0001 	mvn.w	r0, #1
9001bf66:	fb08 4606 	mla	r6, r8, r6, r4
9001bf6a:	9c01      	ldr	r4, [sp, #4]
9001bf6c:	fb00 fa0e 	mul.w	sl, r0, lr
9001bf70:	9800      	ldr	r0, [sp, #0]
9001bf72:	f816 8007 	ldrb.w	r8, [r6, r7]
9001bf76:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001bf7a:	eb04 0b08 	add.w	fp, r4, r8
9001bf7e:	f830 400a 	ldrh.w	r4, [r0, sl]
9001bf82:	9801      	ldr	r0, [sp, #4]
9001bf84:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001bf88:	1227      	asrs	r7, r4, #8
9001bf8a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001bf8e:	fb16 f609 	smulbb	r6, r6, r9
9001bf92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bf96:	f810 8008 	ldrb.w	r8, [r0, r8]
9001bf9a:	fb1b fb09 	smulbb	fp, fp, r9
9001bf9e:	fb07 6705 	mla	r7, r7, r5, r6
9001bfa2:	10e6      	asrs	r6, r4, #3
9001bfa4:	00e4      	lsls	r4, r4, #3
9001bfa6:	9800      	ldr	r0, [sp, #0]
9001bfa8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bfac:	b2bf      	uxth	r7, r7
9001bfae:	b2e4      	uxtb	r4, r4
9001bfb0:	fb06 b605 	mla	r6, r6, r5, fp
9001bfb4:	fb14 f405 	smulbb	r4, r4, r5
9001bfb8:	b2b6      	uxth	r6, r6
9001bfba:	fb08 4809 	mla	r8, r8, r9, r4
9001bfbe:	1c7c      	adds	r4, r7, #1
9001bfc0:	f106 0b01 	add.w	fp, r6, #1
9001bfc4:	fa1f f888 	uxth.w	r8, r8
9001bfc8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001bfcc:	f108 0401 	add.w	r4, r8, #1
9001bfd0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001bfd4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001bfd8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001bfdc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001bfe0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001bfe4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001bfe8:	4327      	orrs	r7, r4
9001bfea:	ea47 070b 	orr.w	r7, r7, fp
9001bfee:	f820 700a 	strh.w	r7, [r0, sl]
9001bff2:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bff4:	f10e 3eff 	add.w	lr, lr, #4294967295
9001bff8:	4401      	add	r1, r0
9001bffa:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bffc:	4402      	add	r2, r0
9001bffe:	e759      	b.n	9001beb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001c000:	b007      	add	sp, #28
9001c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001c008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c00c:	b085      	sub	sp, #20
9001c00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c012:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001c014:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001c016:	9203      	str	r2, [sp, #12]
9001c018:	6870      	ldr	r0, [r6, #4]
9001c01a:	686f      	ldr	r7, [r5, #4]
9001c01c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001c020:	3704      	adds	r7, #4
9001c022:	9101      	str	r1, [sp, #4]
9001c024:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c028:	fb00 2404 	mla	r4, r0, r4, r2
9001c02c:	6832      	ldr	r2, [r6, #0]
9001c02e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c032:	682a      	ldr	r2, [r5, #0]
9001c034:	9202      	str	r2, [sp, #8]
9001c036:	9a01      	ldr	r2, [sp, #4]
9001c038:	2a00      	cmp	r2, #0
9001c03a:	dc03      	bgt.n	9001c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001c03c:	9a03      	ldr	r2, [sp, #12]
9001c03e:	2a00      	cmp	r2, #0
9001c040:	f340 80cc 	ble.w	9001c1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001c044:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c046:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001c04a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001c04e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c050:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001c054:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c058:	2b00      	cmp	r3, #0
9001c05a:	dd0d      	ble.n	9001c078 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001c05c:	1406      	asrs	r6, r0, #16
9001c05e:	d405      	bmi.n	9001c06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001c060:	454e      	cmp	r6, r9
9001c062:	da03      	bge.n	9001c06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001c064:	1416      	asrs	r6, r2, #16
9001c066:	d401      	bmi.n	9001c06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001c068:	4546      	cmp	r6, r8
9001c06a:	db06      	blt.n	9001c07a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c06c:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001c06e:	4460      	add	r0, ip
9001c070:	3b01      	subs	r3, #1
9001c072:	3402      	adds	r4, #2
9001c074:	4432      	add	r2, r6
9001c076:	e7ef      	b.n	9001c058 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001c078:	d00f      	beq.n	9001c09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c07a:	1e5e      	subs	r6, r3, #1
9001c07c:	fb0c 0e06 	mla	lr, ip, r6, r0
9001c080:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001c084:	d543      	bpl.n	9001c10e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001c086:	4698      	mov	r8, r3
9001c088:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001c08c:	f1b8 0f00 	cmp.w	r8, #0
9001c090:	dc71      	bgt.n	9001c176 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001c092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c096:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c09a:	9b01      	ldr	r3, [sp, #4]
9001c09c:	2b00      	cmp	r3, #0
9001c09e:	f340 809d 	ble.w	9001c1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001c0a2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c0a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c0ac:	eeb0 6a62 	vmov.f32	s12, s5
9001c0b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c0b4:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c0b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c0bc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c0c0:	eeb0 6a43 	vmov.f32	s12, s6
9001c0c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c0c8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c0cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c0d0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c0d4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c0d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c0dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c0e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c0e4:	ee12 2a90 	vmov	r2, s5
9001c0e8:	eef0 2a47 	vmov.f32	s5, s14
9001c0ec:	fb92 fcf3 	sdiv	ip, r2, r3
9001c0f0:	ee13 2a10 	vmov	r2, s6
9001c0f4:	eeb0 3a67 	vmov.f32	s6, s15
9001c0f8:	fb92 f3f3 	sdiv	r3, r2, r3
9001c0fc:	9312      	str	r3, [sp, #72]	; 0x48
9001c0fe:	9b01      	ldr	r3, [sp, #4]
9001c100:	9a03      	ldr	r2, [sp, #12]
9001c102:	3b01      	subs	r3, #1
9001c104:	9301      	str	r3, [sp, #4]
9001c106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c108:	bf08      	it	eq
9001c10a:	4613      	moveq	r3, r2
9001c10c:	e793      	b.n	9001c036 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001c10e:	45ce      	cmp	lr, r9
9001c110:	dab9      	bge.n	9001c086 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c112:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c114:	fb01 2606 	mla	r6, r1, r6, r2
9001c118:	1436      	asrs	r6, r6, #16
9001c11a:	d4b4      	bmi.n	9001c086 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c11c:	4546      	cmp	r6, r8
9001c11e:	dab2      	bge.n	9001c086 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c120:	4698      	mov	r8, r3
9001c122:	46a2      	mov	sl, r4
9001c124:	f1b8 0f00 	cmp.w	r8, #0
9001c128:	ddb3      	ble.n	9001c092 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001c12a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001c12e:	1416      	asrs	r6, r2, #16
9001c130:	9902      	ldr	r1, [sp, #8]
9001c132:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001c136:	f108 38ff 	add.w	r8, r8, #4294967295
9001c13a:	4460      	add	r0, ip
9001c13c:	fb09 1606 	mla	r6, r9, r6, r1
9001c140:	4928      	ldr	r1, [pc, #160]	; (9001c1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001c142:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001c146:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001c14a:	eb07 0b0e 	add.w	fp, r7, lr
9001c14e:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001c152:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001c156:	00f6      	lsls	r6, r6, #3
9001c158:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001c15c:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c15e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c162:	440a      	add	r2, r1
9001c164:	ea49 0606 	orr.w	r6, r9, r6
9001c168:	f817 900e 	ldrb.w	r9, [r7, lr]
9001c16c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001c170:	f82a 6b02 	strh.w	r6, [sl], #2
9001c174:	e7d6      	b.n	9001c124 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c176:	ea5f 4920 	movs.w	r9, r0, asr #16
9001c17a:	d429      	bmi.n	9001c1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c17c:	68ae      	ldr	r6, [r5, #8]
9001c17e:	454e      	cmp	r6, r9
9001c180:	dd26      	ble.n	9001c1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c182:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001c186:	d423      	bmi.n	9001c1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c188:	68e9      	ldr	r1, [r5, #12]
9001c18a:	4559      	cmp	r1, fp
9001c18c:	dd20      	ble.n	9001c1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c18e:	fa0f fe86 	sxth.w	lr, r6
9001c192:	9902      	ldr	r1, [sp, #8]
9001c194:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001c198:	f06f 0101 	mvn.w	r1, #1
9001c19c:	f81e e009 	ldrb.w	lr, [lr, r9]
9001c1a0:	fb01 f908 	mul.w	r9, r1, r8
9001c1a4:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001c1a8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001c1ac:	eb07 060e 	add.w	r6, r7, lr
9001c1b0:	f896 b002 	ldrb.w	fp, [r6, #2]
9001c1b4:	7876      	ldrb	r6, [r6, #1]
9001c1b6:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001c1ba:	00f6      	lsls	r6, r6, #3
9001c1bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c1c0:	ea4b 0606 	orr.w	r6, fp, r6
9001c1c4:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001c1c8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001c1cc:	f82a 6009 	strh.w	r6, [sl, r9]
9001c1d0:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c1d2:	4460      	add	r0, ip
9001c1d4:	f108 38ff 	add.w	r8, r8, #4294967295
9001c1d8:	440a      	add	r2, r1
9001c1da:	e757      	b.n	9001c08c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001c1dc:	b005      	add	sp, #20
9001c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c1e2:	bf00      	nop
9001c1e4:	fffff800 	.word	0xfffff800

9001c1e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c1ec:	b087      	sub	sp, #28
9001c1ee:	468b      	mov	fp, r1
9001c1f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c1f4:	9815      	ldr	r0, [sp, #84]	; 0x54
9001c1f6:	9204      	str	r2, [sp, #16]
9001c1f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c1fc:	6841      	ldr	r1, [r0, #4]
9001c1fe:	9205      	str	r2, [sp, #20]
9001c200:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001c204:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001c208:	fb01 2404 	mla	r4, r1, r4, r2
9001c20c:	6802      	ldr	r2, [r0, #0]
9001c20e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c212:	f8dc 2000 	ldr.w	r2, [ip]
9001c216:	9201      	str	r2, [sp, #4]
9001c218:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001c21c:	3204      	adds	r2, #4
9001c21e:	9202      	str	r2, [sp, #8]
9001c220:	f1bb 0f00 	cmp.w	fp, #0
9001c224:	dc03      	bgt.n	9001c22e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001c226:	9a04      	ldr	r2, [sp, #16]
9001c228:	2a00      	cmp	r2, #0
9001c22a:	f340 8138 	ble.w	9001c49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c22e:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c230:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001c234:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001c238:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c23a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001c23e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c242:	2b00      	cmp	r3, #0
9001c244:	dd0e      	ble.n	9001c264 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c246:	1402      	asrs	r2, r0, #16
9001c248:	d405      	bmi.n	9001c256 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c24a:	42ba      	cmp	r2, r7
9001c24c:	da03      	bge.n	9001c256 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c24e:	140a      	asrs	r2, r1, #16
9001c250:	d401      	bmi.n	9001c256 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c252:	42b2      	cmp	r2, r6
9001c254:	db07      	blt.n	9001c266 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c256:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c258:	3b01      	subs	r3, #1
9001c25a:	3402      	adds	r4, #2
9001c25c:	4410      	add	r0, r2
9001c25e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c260:	4411      	add	r1, r2
9001c262:	e7ee      	b.n	9001c242 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c264:	d019      	beq.n	9001c29a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001c266:	1e5a      	subs	r2, r3, #1
9001c268:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c26a:	fb05 0502 	mla	r5, r5, r2, r0
9001c26e:	142d      	asrs	r5, r5, #16
9001c270:	d409      	bmi.n	9001c286 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c272:	42bd      	cmp	r5, r7
9001c274:	da07      	bge.n	9001c286 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c276:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c278:	fb05 1202 	mla	r2, r5, r2, r1
9001c27c:	1412      	asrs	r2, r2, #16
9001c27e:	d402      	bmi.n	9001c286 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c280:	42b2      	cmp	r2, r6
9001c282:	f2c0 80ac 	blt.w	9001c3de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001c286:	f04f 0e00 	mov.w	lr, #0
9001c28a:	eb03 020e 	add.w	r2, r3, lr
9001c28e:	2a00      	cmp	r2, #0
9001c290:	dc3e      	bgt.n	9001c310 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001c292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c296:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c29a:	f1bb 0f00 	cmp.w	fp, #0
9001c29e:	f340 80fe 	ble.w	9001c49e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c2a2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c2a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c2a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c2ac:	f1bb 0b01 	subs.w	fp, fp, #1
9001c2b0:	eeb0 6a62 	vmov.f32	s12, s5
9001c2b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c2b8:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c2bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c2c0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c2c4:	eeb0 6a43 	vmov.f32	s12, s6
9001c2c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c2cc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c2d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c2d4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c2d8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c2dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c2e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c2e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c2e8:	ee12 2a90 	vmov	r2, s5
9001c2ec:	eef0 2a47 	vmov.f32	s5, s14
9001c2f0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c2f4:	ee13 2a10 	vmov	r2, s6
9001c2f8:	9313      	str	r3, [sp, #76]	; 0x4c
9001c2fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c2fc:	eeb0 3a67 	vmov.f32	s6, s15
9001c300:	fb92 f3f3 	sdiv	r3, r2, r3
9001c304:	9a04      	ldr	r2, [sp, #16]
9001c306:	9314      	str	r3, [sp, #80]	; 0x50
9001c308:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c30a:	bf08      	it	eq
9001c30c:	4613      	moveq	r3, r2
9001c30e:	e787      	b.n	9001c220 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001c310:	1406      	asrs	r6, r0, #16
9001c312:	d45d      	bmi.n	9001c3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c314:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001c318:	42b5      	cmp	r5, r6
9001c31a:	dd59      	ble.n	9001c3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c31c:	140f      	asrs	r7, r1, #16
9001c31e:	d457      	bmi.n	9001c3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c320:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001c324:	42ba      	cmp	r2, r7
9001c326:	dd53      	ble.n	9001c3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c328:	9a01      	ldr	r2, [sp, #4]
9001c32a:	b22d      	sxth	r5, r5
9001c32c:	fb07 2505 	mla	r5, r7, r5, r2
9001c330:	5daa      	ldrb	r2, [r5, r6]
9001c332:	9d02      	ldr	r5, [sp, #8]
9001c334:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c338:	0e2e      	lsrs	r6, r5, #24
9001c33a:	d049      	beq.n	9001c3d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c33c:	f06f 0201 	mvn.w	r2, #1
9001c340:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c344:	fb02 f20e 	mul.w	r2, r2, lr
9001c348:	f834 8002 	ldrh.w	r8, [r4, r2]
9001c34c:	9203      	str	r2, [sp, #12]
9001c34e:	9a05      	ldr	r2, [sp, #20]
9001c350:	ea4f 2728 	mov.w	r7, r8, asr #8
9001c354:	4356      	muls	r6, r2
9001c356:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c35a:	1c72      	adds	r2, r6, #1
9001c35c:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c360:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c364:	b2ed      	uxtb	r5, r5
9001c366:	1212      	asrs	r2, r2, #8
9001c368:	fa1f f982 	uxth.w	r9, r2
9001c36c:	43d2      	mvns	r2, r2
9001c36e:	fb16 f609 	smulbb	r6, r6, r9
9001c372:	b2d2      	uxtb	r2, r2
9001c374:	fb15 f509 	smulbb	r5, r5, r9
9001c378:	fb07 6702 	mla	r7, r7, r2, r6
9001c37c:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c380:	fb1a fa09 	smulbb	sl, sl, r9
9001c384:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c388:	b2bf      	uxth	r7, r7
9001c38a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c38e:	fa5f f888 	uxtb.w	r8, r8
9001c392:	fb06 a602 	mla	r6, r6, r2, sl
9001c396:	fb08 5502 	mla	r5, r8, r2, r5
9001c39a:	1c7a      	adds	r2, r7, #1
9001c39c:	b2b6      	uxth	r6, r6
9001c39e:	b2ad      	uxth	r5, r5
9001c3a0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c3a4:	9a03      	ldr	r2, [sp, #12]
9001c3a6:	f105 0a01 	add.w	sl, r5, #1
9001c3aa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c3ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c3b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c3b6:	ea4a 0707 	orr.w	r7, sl, r7
9001c3ba:	f106 0a01 	add.w	sl, r6, #1
9001c3be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c3c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c3c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c3ca:	ea47 070a 	orr.w	r7, r7, sl
9001c3ce:	52a7      	strh	r7, [r4, r2]
9001c3d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c3d2:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c3d6:	4410      	add	r0, r2
9001c3d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c3da:	4411      	add	r1, r2
9001c3dc:	e755      	b.n	9001c28a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001c3de:	f04f 0800 	mov.w	r8, #0
9001c3e2:	eba3 0208 	sub.w	r2, r3, r8
9001c3e6:	2a00      	cmp	r2, #0
9001c3e8:	f77f af53 	ble.w	9001c292 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001c3ec:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001c3f0:	140a      	asrs	r2, r1, #16
9001c3f2:	9f01      	ldr	r7, [sp, #4]
9001c3f4:	1405      	asrs	r5, r0, #16
9001c3f6:	fb06 7202 	mla	r2, r6, r2, r7
9001c3fa:	5d52      	ldrb	r2, [r2, r5]
9001c3fc:	9d02      	ldr	r5, [sp, #8]
9001c3fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c402:	0e2e      	lsrs	r6, r5, #24
9001c404:	d044      	beq.n	9001c490 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001c406:	9a05      	ldr	r2, [sp, #20]
9001c408:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c40c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001c410:	4356      	muls	r6, r2
9001c412:	ea4f 272e 	mov.w	r7, lr, asr #8
9001c416:	1c72      	adds	r2, r6, #1
9001c418:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c41c:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c420:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c424:	b2ed      	uxtb	r5, r5
9001c426:	1212      	asrs	r2, r2, #8
9001c428:	fa1f f982 	uxth.w	r9, r2
9001c42c:	43d2      	mvns	r2, r2
9001c42e:	fb16 f609 	smulbb	r6, r6, r9
9001c432:	b2d2      	uxtb	r2, r2
9001c434:	fb15 f509 	smulbb	r5, r5, r9
9001c438:	fb07 6702 	mla	r7, r7, r2, r6
9001c43c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001c440:	fb1a fa09 	smulbb	sl, sl, r9
9001c444:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001c448:	b2bf      	uxth	r7, r7
9001c44a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c44e:	fa5f fe8e 	uxtb.w	lr, lr
9001c452:	fb06 a602 	mla	r6, r6, r2, sl
9001c456:	fb0e 5502 	mla	r5, lr, r2, r5
9001c45a:	1c7a      	adds	r2, r7, #1
9001c45c:	b2b6      	uxth	r6, r6
9001c45e:	b2ad      	uxth	r5, r5
9001c460:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c464:	f105 0a01 	add.w	sl, r5, #1
9001c468:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c46c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c470:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c474:	ea4a 0707 	orr.w	r7, sl, r7
9001c478:	f106 0a01 	add.w	sl, r6, #1
9001c47c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c480:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c484:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c488:	ea47 070a 	orr.w	r7, r7, sl
9001c48c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c490:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c492:	f108 0801 	add.w	r8, r8, #1
9001c496:	4410      	add	r0, r2
9001c498:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c49a:	4411      	add	r1, r2
9001c49c:	e7a1      	b.n	9001c3e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001c49e:	b007      	add	sp, #28
9001c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c4a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c4a8:	b085      	sub	sp, #20
9001c4aa:	468b      	mov	fp, r1
9001c4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c4b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c4b2:	9203      	str	r2, [sp, #12]
9001c4b4:	6841      	ldr	r1, [r0, #4]
9001c4b6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001c4ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c4be:	fb01 2404 	mla	r4, r1, r4, r2
9001c4c2:	6802      	ldr	r2, [r0, #0]
9001c4c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c4c8:	f8de 2000 	ldr.w	r2, [lr]
9001c4cc:	9200      	str	r2, [sp, #0]
9001c4ce:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c4d2:	3204      	adds	r2, #4
9001c4d4:	9201      	str	r2, [sp, #4]
9001c4d6:	f1bb 0f00 	cmp.w	fp, #0
9001c4da:	dc03      	bgt.n	9001c4e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001c4dc:	9a03      	ldr	r2, [sp, #12]
9001c4de:	2a00      	cmp	r2, #0
9001c4e0:	f340 8153 	ble.w	9001c78a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c4e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c4e6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c4ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c4ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c4f0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c4f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c4f8:	2b00      	cmp	r3, #0
9001c4fa:	dd0e      	ble.n	9001c51a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c4fc:	1408      	asrs	r0, r1, #16
9001c4fe:	d405      	bmi.n	9001c50c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c500:	42b8      	cmp	r0, r7
9001c502:	da03      	bge.n	9001c50c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c504:	1410      	asrs	r0, r2, #16
9001c506:	d401      	bmi.n	9001c50c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c508:	42b0      	cmp	r0, r6
9001c50a:	db07      	blt.n	9001c51c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c50c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c50e:	3b01      	subs	r3, #1
9001c510:	3402      	adds	r4, #2
9001c512:	4401      	add	r1, r0
9001c514:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c516:	4402      	add	r2, r0
9001c518:	e7ee      	b.n	9001c4f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001c51a:	d017      	beq.n	9001c54c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c51c:	1e58      	subs	r0, r3, #1
9001c51e:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c520:	fb05 1500 	mla	r5, r5, r0, r1
9001c524:	142d      	asrs	r5, r5, #16
9001c526:	d409      	bmi.n	9001c53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c528:	42bd      	cmp	r5, r7
9001c52a:	da07      	bge.n	9001c53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c52c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c52e:	fb05 2000 	mla	r0, r5, r0, r2
9001c532:	1400      	asrs	r0, r0, #16
9001c534:	d402      	bmi.n	9001c53c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c536:	42b0      	cmp	r0, r6
9001c538:	f2c0 80bc 	blt.w	9001c6b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001c53c:	2600      	movs	r6, #0
9001c53e:	1998      	adds	r0, r3, r6
9001c540:	2800      	cmp	r0, #0
9001c542:	dc3e      	bgt.n	9001c5c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001c544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c548:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c54c:	f1bb 0f00 	cmp.w	fp, #0
9001c550:	f340 811b 	ble.w	9001c78a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c554:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c55a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c55e:	f1bb 0b01 	subs.w	fp, fp, #1
9001c562:	eeb0 6a62 	vmov.f32	s12, s5
9001c566:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c56a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c56e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c572:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c576:	eeb0 6a43 	vmov.f32	s12, s6
9001c57a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c57e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c582:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c586:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c58a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c58e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c592:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c596:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c59a:	ee12 2a90 	vmov	r2, s5
9001c59e:	eef0 2a47 	vmov.f32	s5, s14
9001c5a2:	fb92 f3f3 	sdiv	r3, r2, r3
9001c5a6:	ee13 2a10 	vmov	r2, s6
9001c5aa:	9311      	str	r3, [sp, #68]	; 0x44
9001c5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c5ae:	eeb0 3a67 	vmov.f32	s6, s15
9001c5b2:	fb92 f3f3 	sdiv	r3, r2, r3
9001c5b6:	9a03      	ldr	r2, [sp, #12]
9001c5b8:	9312      	str	r3, [sp, #72]	; 0x48
9001c5ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c5bc:	bf08      	it	eq
9001c5be:	4613      	moveq	r3, r2
9001c5c0:	e789      	b.n	9001c4d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c5c2:	140f      	asrs	r7, r1, #16
9001c5c4:	d426      	bmi.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c5c6:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c5ca:	42bd      	cmp	r5, r7
9001c5cc:	dd22      	ble.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c5ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c5d2:	d41f      	bmi.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c5d4:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c5d8:	4560      	cmp	r0, ip
9001c5da:	dd1b      	ble.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c5dc:	9800      	ldr	r0, [sp, #0]
9001c5de:	b22d      	sxth	r5, r5
9001c5e0:	fb0c 0505 	mla	r5, ip, r5, r0
9001c5e4:	5de8      	ldrb	r0, [r5, r7]
9001c5e6:	9d01      	ldr	r5, [sp, #4]
9001c5e8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001c5ec:	0e07      	lsrs	r7, r0, #24
9001c5ee:	2fff      	cmp	r7, #255	; 0xff
9001c5f0:	d116      	bne.n	9001c620 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001c5f2:	f06f 0501 	mvn.w	r5, #1
9001c5f6:	fb05 f706 	mul.w	r7, r5, r6
9001c5fa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001c5fe:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001c602:	0945      	lsrs	r5, r0, #5
9001c604:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001c608:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001c60c:	ea4c 0505 	orr.w	r5, ip, r5
9001c610:	4305      	orrs	r5, r0
9001c612:	53e5      	strh	r5, [r4, r7]
9001c614:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c616:	3e01      	subs	r6, #1
9001c618:	4401      	add	r1, r0
9001c61a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c61c:	4402      	add	r2, r0
9001c61e:	e78e      	b.n	9001c53e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c620:	b2fd      	uxtb	r5, r7
9001c622:	2f00      	cmp	r7, #0
9001c624:	d0f6      	beq.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c626:	f06f 0701 	mvn.w	r7, #1
9001c62a:	fa1f f985 	uxth.w	r9, r5
9001c62e:	43ed      	mvns	r5, r5
9001c630:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001c634:	4377      	muls	r7, r6
9001c636:	fb1a fa09 	smulbb	sl, sl, r9
9001c63a:	b2ed      	uxtb	r5, r5
9001c63c:	f834 8007 	ldrh.w	r8, [r4, r7]
9001c640:	9702      	str	r7, [sp, #8]
9001c642:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001c646:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c64a:	fb17 f709 	smulbb	r7, r7, r9
9001c64e:	b2c0      	uxtb	r0, r0
9001c650:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c654:	fb10 f009 	smulbb	r0, r0, r9
9001c658:	fb0c 7c05 	mla	ip, ip, r5, r7
9001c65c:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001c660:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c664:	fa1f fc8c 	uxth.w	ip, ip
9001c668:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c66c:	fa5f f888 	uxtb.w	r8, r8
9001c670:	fb07 a705 	mla	r7, r7, r5, sl
9001c674:	fb08 0005 	mla	r0, r8, r5, r0
9001c678:	f10c 0501 	add.w	r5, ip, #1
9001c67c:	b2bf      	uxth	r7, r7
9001c67e:	b280      	uxth	r0, r0
9001c680:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c684:	f100 0a01 	add.w	sl, r0, #1
9001c688:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c68c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001c690:	9802      	ldr	r0, [sp, #8]
9001c692:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c696:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c69a:	f107 0a01 	add.w	sl, r7, #1
9001c69e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c6a2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c6a6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c6aa:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c6ae:	f824 c000 	strh.w	ip, [r4, r0]
9001c6b2:	e7af      	b.n	9001c614 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c6b4:	f04f 0800 	mov.w	r8, #0
9001c6b8:	eba3 0008 	sub.w	r0, r3, r8
9001c6bc:	2800      	cmp	r0, #0
9001c6be:	f77f af41 	ble.w	9001c544 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c6c2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c6c6:	1410      	asrs	r0, r2, #16
9001c6c8:	9f00      	ldr	r7, [sp, #0]
9001c6ca:	140d      	asrs	r5, r1, #16
9001c6cc:	fb06 7000 	mla	r0, r6, r0, r7
9001c6d0:	5d40      	ldrb	r0, [r0, r5]
9001c6d2:	9d01      	ldr	r5, [sp, #4]
9001c6d4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001c6d8:	0e2e      	lsrs	r6, r5, #24
9001c6da:	2eff      	cmp	r6, #255	; 0xff
9001c6dc:	d112      	bne.n	9001c704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001c6de:	482c      	ldr	r0, [pc, #176]	; (9001c790 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001c6e0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001c6e4:	0968      	lsrs	r0, r5, #5
9001c6e6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c6ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001c6ee:	4330      	orrs	r0, r6
9001c6f0:	4328      	orrs	r0, r5
9001c6f2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001c6f6:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c6f8:	f108 0801 	add.w	r8, r8, #1
9001c6fc:	4401      	add	r1, r0
9001c6fe:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c700:	4402      	add	r2, r0
9001c702:	e7d9      	b.n	9001c6b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c704:	b2f0      	uxtb	r0, r6
9001c706:	2e00      	cmp	r6, #0
9001c708:	d0f5      	beq.n	9001c6f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c70a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001c70e:	fa1f f980 	uxth.w	r9, r0
9001c712:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c716:	43c0      	mvns	r0, r0
9001c718:	ea4f 272c 	mov.w	r7, ip, asr #8
9001c71c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c720:	fb16 f609 	smulbb	r6, r6, r9
9001c724:	b2c0      	uxtb	r0, r0
9001c726:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c72a:	b2ed      	uxtb	r5, r5
9001c72c:	fb1a fa09 	smulbb	sl, sl, r9
9001c730:	fb07 6700 	mla	r7, r7, r0, r6
9001c734:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001c738:	fb15 f509 	smulbb	r5, r5, r9
9001c73c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001c740:	b2bf      	uxth	r7, r7
9001c742:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c746:	fa5f fc8c 	uxtb.w	ip, ip
9001c74a:	fb06 a600 	mla	r6, r6, r0, sl
9001c74e:	fb0c 5500 	mla	r5, ip, r0, r5
9001c752:	1c78      	adds	r0, r7, #1
9001c754:	b2b6      	uxth	r6, r6
9001c756:	b2ad      	uxth	r5, r5
9001c758:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001c75c:	f105 0a01 	add.w	sl, r5, #1
9001c760:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c764:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c768:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c76c:	ea4a 0707 	orr.w	r7, sl, r7
9001c770:	f106 0a01 	add.w	sl, r6, #1
9001c774:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c778:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c77c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c780:	ea47 070a 	orr.w	r7, r7, sl
9001c784:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c788:	e7b5      	b.n	9001c6f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c78a:	b005      	add	sp, #20
9001c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c790:	fffff800 	.word	0xfffff800

9001c794 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c798:	b087      	sub	sp, #28
9001c79a:	468b      	mov	fp, r1
9001c79c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c7a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c7a2:	9204      	str	r2, [sp, #16]
9001c7a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c7a8:	6861      	ldr	r1, [r4, #4]
9001c7aa:	9205      	str	r2, [sp, #20]
9001c7ac:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c7b0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001c7b4:	fb01 2000 	mla	r0, r1, r0, r2
9001c7b8:	6822      	ldr	r2, [r4, #0]
9001c7ba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c7be:	f8de 2000 	ldr.w	r2, [lr]
9001c7c2:	9201      	str	r2, [sp, #4]
9001c7c4:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c7c8:	9202      	str	r2, [sp, #8]
9001c7ca:	f1bb 0f00 	cmp.w	fp, #0
9001c7ce:	dc03      	bgt.n	9001c7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001c7d0:	9a04      	ldr	r2, [sp, #16]
9001c7d2:	2a00      	cmp	r2, #0
9001c7d4:	f340 8142 	ble.w	9001ca5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c7d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c7da:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c7de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c7e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c7e4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c7e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c7ec:	2b00      	cmp	r3, #0
9001c7ee:	dd0e      	ble.n	9001c80e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c7f0:	140c      	asrs	r4, r1, #16
9001c7f2:	d405      	bmi.n	9001c800 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7f4:	42bc      	cmp	r4, r7
9001c7f6:	da03      	bge.n	9001c800 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7f8:	1414      	asrs	r4, r2, #16
9001c7fa:	d401      	bmi.n	9001c800 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c7fc:	42b4      	cmp	r4, r6
9001c7fe:	db07      	blt.n	9001c810 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c800:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c802:	3b01      	subs	r3, #1
9001c804:	3002      	adds	r0, #2
9001c806:	4421      	add	r1, r4
9001c808:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c80a:	4422      	add	r2, r4
9001c80c:	e7ee      	b.n	9001c7ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c80e:	d019      	beq.n	9001c844 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001c810:	1e5c      	subs	r4, r3, #1
9001c812:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c814:	fb05 1504 	mla	r5, r5, r4, r1
9001c818:	142d      	asrs	r5, r5, #16
9001c81a:	d409      	bmi.n	9001c830 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c81c:	42bd      	cmp	r5, r7
9001c81e:	da07      	bge.n	9001c830 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c820:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c822:	fb05 2404 	mla	r4, r5, r4, r2
9001c826:	1424      	asrs	r4, r4, #16
9001c828:	d402      	bmi.n	9001c830 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c82a:	42b4      	cmp	r4, r6
9001c82c:	f2c0 80b1 	blt.w	9001c992 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001c830:	f04f 0800 	mov.w	r8, #0
9001c834:	eb03 0408 	add.w	r4, r3, r8
9001c838:	2c00      	cmp	r4, #0
9001c83a:	dc3e      	bgt.n	9001c8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001c83c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c840:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c844:	f1bb 0f00 	cmp.w	fp, #0
9001c848:	f340 8108 	ble.w	9001ca5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c84c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c850:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c852:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c856:	f1bb 0b01 	subs.w	fp, fp, #1
9001c85a:	eeb0 6a62 	vmov.f32	s12, s5
9001c85e:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c862:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c866:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c86a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c86e:	eeb0 6a43 	vmov.f32	s12, s6
9001c872:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c876:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c87a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c87e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c882:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c886:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c88a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c88e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c892:	ee12 2a90 	vmov	r2, s5
9001c896:	eef0 2a47 	vmov.f32	s5, s14
9001c89a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c89e:	ee13 2a10 	vmov	r2, s6
9001c8a2:	9313      	str	r3, [sp, #76]	; 0x4c
9001c8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c8a6:	eeb0 3a67 	vmov.f32	s6, s15
9001c8aa:	fb92 f3f3 	sdiv	r3, r2, r3
9001c8ae:	9a04      	ldr	r2, [sp, #16]
9001c8b0:	9314      	str	r3, [sp, #80]	; 0x50
9001c8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c8b4:	bf08      	it	eq
9001c8b6:	4613      	moveq	r3, r2
9001c8b8:	e787      	b.n	9001c7ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001c8ba:	140e      	asrs	r6, r1, #16
9001c8bc:	d462      	bmi.n	9001c984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8be:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c8c2:	42b5      	cmp	r5, r6
9001c8c4:	dd5e      	ble.n	9001c984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8c6:	1417      	asrs	r7, r2, #16
9001c8c8:	d45c      	bmi.n	9001c984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8ca:	f8de 400c 	ldr.w	r4, [lr, #12]
9001c8ce:	42bc      	cmp	r4, r7
9001c8d0:	dd58      	ble.n	9001c984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8d2:	b22d      	sxth	r5, r5
9001c8d4:	9c02      	ldr	r4, [sp, #8]
9001c8d6:	fb07 6505 	mla	r5, r7, r5, r6
9001c8da:	5d66      	ldrb	r6, [r4, r5]
9001c8dc:	2e00      	cmp	r6, #0
9001c8de:	d051      	beq.n	9001c984 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c8e0:	9c01      	ldr	r4, [sp, #4]
9001c8e2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001c8e6:	f06f 0401 	mvn.w	r4, #1
9001c8ea:	fb04 f408 	mul.w	r4, r4, r8
9001c8ee:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001c8f2:	5b05      	ldrh	r5, [r0, r4]
9001c8f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c8f8:	9403      	str	r4, [sp, #12]
9001c8fa:	9c05      	ldr	r4, [sp, #20]
9001c8fc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c900:	4366      	muls	r6, r4
9001c902:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c906:	1c74      	adds	r4, r6, #1
9001c908:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c90c:	122e      	asrs	r6, r5, #8
9001c90e:	1224      	asrs	r4, r4, #8
9001c910:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c914:	00ed      	lsls	r5, r5, #3
9001c916:	b2a7      	uxth	r7, r4
9001c918:	43e4      	mvns	r4, r4
9001c91a:	b2ed      	uxtb	r5, r5
9001c91c:	b2e4      	uxtb	r4, r4
9001c91e:	fb16 f604 	smulbb	r6, r6, r4
9001c922:	fb15 f504 	smulbb	r5, r5, r4
9001c926:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c92a:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001c92e:	fb1a fa04 	smulbb	sl, sl, r4
9001c932:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c936:	fa1f fc8c 	uxth.w	ip, ip
9001c93a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c93e:	fa5f f989 	uxtb.w	r9, r9
9001c942:	fb06 a607 	mla	r6, r6, r7, sl
9001c946:	f10c 0401 	add.w	r4, ip, #1
9001c94a:	fb09 5507 	mla	r5, r9, r7, r5
9001c94e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c952:	9c03      	ldr	r4, [sp, #12]
9001c954:	b2ad      	uxth	r5, r5
9001c956:	b2b6      	uxth	r6, r6
9001c958:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c95c:	f105 0a01 	add.w	sl, r5, #1
9001c960:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c964:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c968:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c96c:	f106 0a01 	add.w	sl, r6, #1
9001c970:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c974:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c978:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c97c:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c980:	f820 c004 	strh.w	ip, [r0, r4]
9001c984:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c986:	f108 38ff 	add.w	r8, r8, #4294967295
9001c98a:	4421      	add	r1, r4
9001c98c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c98e:	4422      	add	r2, r4
9001c990:	e750      	b.n	9001c834 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c992:	f04f 0900 	mov.w	r9, #0
9001c996:	eba3 0409 	sub.w	r4, r3, r9
9001c99a:	2c00      	cmp	r4, #0
9001c99c:	f77f af4e 	ble.w	9001c83c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c9a0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c9a4:	140d      	asrs	r5, r1, #16
9001c9a6:	1414      	asrs	r4, r2, #16
9001c9a8:	fb06 5404 	mla	r4, r6, r4, r5
9001c9ac:	9d02      	ldr	r5, [sp, #8]
9001c9ae:	5d2e      	ldrb	r6, [r5, r4]
9001c9b0:	2e00      	cmp	r6, #0
9001c9b2:	d04c      	beq.n	9001ca4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001c9b4:	9d01      	ldr	r5, [sp, #4]
9001c9b6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001c9ba:	9c05      	ldr	r4, [sp, #20]
9001c9bc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c9c0:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c9c4:	4366      	muls	r6, r4
9001c9c6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c9ca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c9ce:	1c74      	adds	r4, r6, #1
9001c9d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c9d4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c9d8:	122e      	asrs	r6, r5, #8
9001c9da:	1224      	asrs	r4, r4, #8
9001c9dc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c9e0:	00ed      	lsls	r5, r5, #3
9001c9e2:	b2a7      	uxth	r7, r4
9001c9e4:	43e4      	mvns	r4, r4
9001c9e6:	b2ed      	uxtb	r5, r5
9001c9e8:	b2e4      	uxtb	r4, r4
9001c9ea:	fb16 f604 	smulbb	r6, r6, r4
9001c9ee:	fb15 f504 	smulbb	r5, r5, r4
9001c9f2:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c9f6:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c9fa:	fb1a fa04 	smulbb	sl, sl, r4
9001c9fe:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001ca02:	fa1f fc8c 	uxth.w	ip, ip
9001ca06:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ca0a:	fa5f f888 	uxtb.w	r8, r8
9001ca0e:	fb06 a607 	mla	r6, r6, r7, sl
9001ca12:	f10c 0401 	add.w	r4, ip, #1
9001ca16:	fb08 5507 	mla	r5, r8, r7, r5
9001ca1a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001ca1e:	b2ad      	uxth	r5, r5
9001ca20:	b2b6      	uxth	r6, r6
9001ca22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ca26:	f105 0a01 	add.w	sl, r5, #1
9001ca2a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001ca2e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001ca32:	ea4a 0c0c 	orr.w	ip, sl, ip
9001ca36:	f106 0a01 	add.w	sl, r6, #1
9001ca3a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001ca3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001ca42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001ca46:	ea4c 0c0a 	orr.w	ip, ip, sl
9001ca4a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001ca4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001ca50:	f109 0901 	add.w	r9, r9, #1
9001ca54:	4421      	add	r1, r4
9001ca56:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001ca58:	4422      	add	r2, r4
9001ca5a:	e79c      	b.n	9001c996 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001ca5c:	b007      	add	sp, #28
9001ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ca62 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ca62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ca66:	b085      	sub	sp, #20
9001ca68:	468b      	mov	fp, r1
9001ca6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ca6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001ca70:	9203      	str	r2, [sp, #12]
9001ca72:	6861      	ldr	r1, [r4, #4]
9001ca74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001ca78:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001ca7c:	fb01 2000 	mla	r0, r1, r0, r2
9001ca80:	6822      	ldr	r2, [r4, #0]
9001ca82:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001ca86:	f8d8 2000 	ldr.w	r2, [r8]
9001ca8a:	9200      	str	r2, [sp, #0]
9001ca8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001ca90:	9201      	str	r2, [sp, #4]
9001ca92:	f1bb 0f00 	cmp.w	fp, #0
9001ca96:	dc03      	bgt.n	9001caa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001ca98:	9a03      	ldr	r2, [sp, #12]
9001ca9a:	2a00      	cmp	r2, #0
9001ca9c:	f340 8146 	ble.w	9001cd2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001caa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001caa2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001caa6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001caaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001caac:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001cab0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cab4:	2b00      	cmp	r3, #0
9001cab6:	dd0e      	ble.n	9001cad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001cab8:	140c      	asrs	r4, r1, #16
9001caba:	d405      	bmi.n	9001cac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cabc:	42bc      	cmp	r4, r7
9001cabe:	da03      	bge.n	9001cac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cac0:	1414      	asrs	r4, r2, #16
9001cac2:	d401      	bmi.n	9001cac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cac4:	42b4      	cmp	r4, r6
9001cac6:	db07      	blt.n	9001cad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cac8:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001caca:	3b01      	subs	r3, #1
9001cacc:	3002      	adds	r0, #2
9001cace:	4421      	add	r1, r4
9001cad0:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cad2:	4422      	add	r2, r4
9001cad4:	e7ee      	b.n	9001cab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001cad6:	d017      	beq.n	9001cb08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001cad8:	1e5c      	subs	r4, r3, #1
9001cada:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cadc:	fb05 1504 	mla	r5, r5, r4, r1
9001cae0:	142d      	asrs	r5, r5, #16
9001cae2:	d409      	bmi.n	9001caf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cae4:	42bd      	cmp	r5, r7
9001cae6:	da07      	bge.n	9001caf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001cae8:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001caea:	fb05 2404 	mla	r4, r5, r4, r2
9001caee:	1424      	asrs	r4, r4, #16
9001caf0:	d402      	bmi.n	9001caf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001caf2:	42b4      	cmp	r4, r6
9001caf4:	f2c0 80b3 	blt.w	9001cc5e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001caf8:	2600      	movs	r6, #0
9001cafa:	199c      	adds	r4, r3, r6
9001cafc:	2c00      	cmp	r4, #0
9001cafe:	dc3e      	bgt.n	9001cb7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001cb00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cb04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001cb08:	f1bb 0f00 	cmp.w	fp, #0
9001cb0c:	f340 810e 	ble.w	9001cd2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001cb10:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cb14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cb16:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cb1a:	f1bb 0b01 	subs.w	fp, fp, #1
9001cb1e:	eeb0 6a62 	vmov.f32	s12, s5
9001cb22:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cb26:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cb2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cb2e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cb32:	eeb0 6a43 	vmov.f32	s12, s6
9001cb36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cb3a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cb3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cb42:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cb46:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cb4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cb4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cb52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cb56:	ee12 2a90 	vmov	r2, s5
9001cb5a:	eef0 2a47 	vmov.f32	s5, s14
9001cb5e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb62:	ee13 2a10 	vmov	r2, s6
9001cb66:	9311      	str	r3, [sp, #68]	; 0x44
9001cb68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cb6a:	eeb0 3a67 	vmov.f32	s6, s15
9001cb6e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb72:	9a03      	ldr	r2, [sp, #12]
9001cb74:	9312      	str	r3, [sp, #72]	; 0x48
9001cb76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cb78:	bf08      	it	eq
9001cb7a:	4613      	moveq	r3, r2
9001cb7c:	e789      	b.n	9001ca92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001cb7e:	140f      	asrs	r7, r1, #16
9001cb80:	d418      	bmi.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cb82:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001cb86:	42bd      	cmp	r5, r7
9001cb88:	dd14      	ble.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cb8a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cb8e:	d411      	bmi.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cb90:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001cb94:	4564      	cmp	r4, ip
9001cb96:	dd0d      	ble.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cb98:	b22d      	sxth	r5, r5
9001cb9a:	9c01      	ldr	r4, [sp, #4]
9001cb9c:	fb0c 7505 	mla	r5, ip, r5, r7
9001cba0:	5d64      	ldrb	r4, [r4, r5]
9001cba2:	2cff      	cmp	r4, #255	; 0xff
9001cba4:	d10c      	bne.n	9001cbc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001cba6:	9c00      	ldr	r4, [sp, #0]
9001cba8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001cbac:	f06f 0401 	mvn.w	r4, #1
9001cbb0:	4374      	muls	r4, r6
9001cbb2:	5305      	strh	r5, [r0, r4]
9001cbb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cbb6:	3e01      	subs	r6, #1
9001cbb8:	4421      	add	r1, r4
9001cbba:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cbbc:	4422      	add	r2, r4
9001cbbe:	e79c      	b.n	9001cafa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001cbc0:	2c00      	cmp	r4, #0
9001cbc2:	d0f7      	beq.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cbc4:	9f00      	ldr	r7, [sp, #0]
9001cbc6:	fa1f fc84 	uxth.w	ip, r4
9001cbca:	43e4      	mvns	r4, r4
9001cbcc:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001cbd0:	f06f 0501 	mvn.w	r5, #1
9001cbd4:	b2e4      	uxtb	r4, r4
9001cbd6:	4375      	muls	r5, r6
9001cbd8:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001cbdc:	9502      	str	r5, [sp, #8]
9001cbde:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001cbe2:	5b45      	ldrh	r5, [r0, r5]
9001cbe4:	122f      	asrs	r7, r5, #8
9001cbe6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001cbea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cbee:	00ed      	lsls	r5, r5, #3
9001cbf0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001cbf4:	fb17 f704 	smulbb	r7, r7, r4
9001cbf8:	b2ed      	uxtb	r5, r5
9001cbfa:	fb1a fa04 	smulbb	sl, sl, r4
9001cbfe:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001cc02:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001cc06:	fb15 f504 	smulbb	r5, r5, r4
9001cc0a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001cc0e:	fa1f fe8e 	uxth.w	lr, lr
9001cc12:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cc16:	fa5f f989 	uxtb.w	r9, r9
9001cc1a:	fb07 a70c 	mla	r7, r7, ip, sl
9001cc1e:	f10e 0401 	add.w	r4, lr, #1
9001cc22:	fb09 550c 	mla	r5, r9, ip, r5
9001cc26:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001cc2a:	9c02      	ldr	r4, [sp, #8]
9001cc2c:	b2ad      	uxth	r5, r5
9001cc2e:	b2bf      	uxth	r7, r7
9001cc30:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001cc34:	f105 0a01 	add.w	sl, r5, #1
9001cc38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cc3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cc40:	ea4a 0e0e 	orr.w	lr, sl, lr
9001cc44:	f107 0a01 	add.w	sl, r7, #1
9001cc48:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001cc4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cc50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001cc54:	ea4e 0e0a 	orr.w	lr, lr, sl
9001cc58:	f820 e004 	strh.w	lr, [r0, r4]
9001cc5c:	e7aa      	b.n	9001cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cc5e:	f04f 0900 	mov.w	r9, #0
9001cc62:	eba3 0409 	sub.w	r4, r3, r9
9001cc66:	2c00      	cmp	r4, #0
9001cc68:	f77f af4a 	ble.w	9001cb00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cc6c:	1414      	asrs	r4, r2, #16
9001cc6e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001cc72:	140d      	asrs	r5, r1, #16
9001cc74:	fb06 5504 	mla	r5, r6, r4, r5
9001cc78:	9c01      	ldr	r4, [sp, #4]
9001cc7a:	5d64      	ldrb	r4, [r4, r5]
9001cc7c:	2cff      	cmp	r4, #255	; 0xff
9001cc7e:	d10b      	bne.n	9001cc98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001cc80:	9c00      	ldr	r4, [sp, #0]
9001cc82:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001cc86:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001cc8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cc8c:	f109 0901 	add.w	r9, r9, #1
9001cc90:	4421      	add	r1, r4
9001cc92:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cc94:	4422      	add	r2, r4
9001cc96:	e7e4      	b.n	9001cc62 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001cc98:	2c00      	cmp	r4, #0
9001cc9a:	d0f6      	beq.n	9001cc8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cc9c:	9e00      	ldr	r6, [sp, #0]
9001cc9e:	b2a7      	uxth	r7, r4
9001cca0:	43e4      	mvns	r4, r4
9001cca2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001cca6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001ccaa:	b2e4      	uxtb	r4, r4
9001ccac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ccb0:	122e      	asrs	r6, r5, #8
9001ccb2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ccb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ccba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001ccbe:	00ed      	lsls	r5, r5, #3
9001ccc0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001ccc4:	fb16 f604 	smulbb	r6, r6, r4
9001ccc8:	b2ed      	uxtb	r5, r5
9001ccca:	fb1a fa04 	smulbb	sl, sl, r4
9001ccce:	fb0c 6c07 	mla	ip, ip, r7, r6
9001ccd2:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001ccd6:	fb15 f504 	smulbb	r5, r5, r4
9001ccda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ccde:	fa1f fc8c 	uxth.w	ip, ip
9001cce2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001cce6:	fa5f fe8e 	uxtb.w	lr, lr
9001ccea:	fb06 a607 	mla	r6, r6, r7, sl
9001ccee:	f10c 0401 	add.w	r4, ip, #1
9001ccf2:	fb0e 5507 	mla	r5, lr, r7, r5
9001ccf6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001ccfa:	b2ad      	uxth	r5, r5
9001ccfc:	b2b6      	uxth	r6, r6
9001ccfe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cd02:	f105 0a01 	add.w	sl, r5, #1
9001cd06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cd0a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cd0e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001cd12:	f106 0a01 	add.w	sl, r6, #1
9001cd16:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001cd1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cd1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001cd22:	ea4c 0c0a 	orr.w	ip, ip, sl
9001cd26:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001cd2a:	e7ae      	b.n	9001cc8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cd2c:	b005      	add	sp, #20
9001cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cd32 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cd32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cd36:	b085      	sub	sp, #20
9001cd38:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001cd3a:	9203      	str	r2, [sp, #12]
9001cd3c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001cd40:	9100      	str	r1, [sp, #0]
9001cd42:	9201      	str	r2, [sp, #4]
9001cd44:	6841      	ldr	r1, [r0, #4]
9001cd46:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001cd4a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cd4e:	fb01 2404 	mla	r4, r1, r4, r2
9001cd52:	6802      	ldr	r2, [r0, #0]
9001cd54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001cd58:	f8de 2000 	ldr.w	r2, [lr]
9001cd5c:	9202      	str	r2, [sp, #8]
9001cd5e:	9a01      	ldr	r2, [sp, #4]
9001cd60:	43d6      	mvns	r6, r2
9001cd62:	b2f6      	uxtb	r6, r6
9001cd64:	9a00      	ldr	r2, [sp, #0]
9001cd66:	2a00      	cmp	r2, #0
9001cd68:	dc03      	bgt.n	9001cd72 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001cd6a:	9a03      	ldr	r2, [sp, #12]
9001cd6c:	2a00      	cmp	r2, #0
9001cd6e:	f340 8124 	ble.w	9001cfba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001cd72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cd74:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001cd78:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001cd7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cd7e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001cd82:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cd86:	2b00      	cmp	r3, #0
9001cd88:	dd0e      	ble.n	9001cda8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cd8a:	1408      	asrs	r0, r1, #16
9001cd8c:	d405      	bmi.n	9001cd9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cd8e:	4560      	cmp	r0, ip
9001cd90:	da03      	bge.n	9001cd9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cd92:	1410      	asrs	r0, r2, #16
9001cd94:	d401      	bmi.n	9001cd9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cd96:	42b8      	cmp	r0, r7
9001cd98:	db07      	blt.n	9001cdaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001cd9a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cd9c:	3b01      	subs	r3, #1
9001cd9e:	3402      	adds	r4, #2
9001cda0:	4401      	add	r1, r0
9001cda2:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cda4:	4402      	add	r2, r0
9001cda6:	e7ee      	b.n	9001cd86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001cda8:	d06e      	beq.n	9001ce88 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001cdaa:	1e58      	subs	r0, r3, #1
9001cdac:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cdae:	fb05 1500 	mla	r5, r5, r0, r1
9001cdb2:	142d      	asrs	r5, r5, #16
9001cdb4:	d45c      	bmi.n	9001ce70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cdb6:	4565      	cmp	r5, ip
9001cdb8:	da5a      	bge.n	9001ce70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cdba:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001cdbc:	fb05 2000 	mla	r0, r5, r0, r2
9001cdc0:	1400      	asrs	r0, r0, #16
9001cdc2:	d455      	bmi.n	9001ce70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cdc4:	42b8      	cmp	r0, r7
9001cdc6:	da53      	bge.n	9001ce70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cdc8:	4699      	mov	r9, r3
9001cdca:	46a2      	mov	sl, r4
9001cdcc:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001cdd0:	f1b9 0f00 	cmp.w	r9, #0
9001cdd4:	dd54      	ble.n	9001ce80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001cdd6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001cdda:	140d      	asrs	r5, r1, #16
9001cddc:	1410      	asrs	r0, r2, #16
9001cdde:	f109 39ff 	add.w	r9, r9, #4294967295
9001cde2:	fb07 5000 	mla	r0, r7, r0, r5
9001cde6:	9d02      	ldr	r5, [sp, #8]
9001cde8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001cdec:	f8ba 5000 	ldrh.w	r5, [sl]
9001cdf0:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cdf4:	122f      	asrs	r7, r5, #8
9001cdf6:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001cdfa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cdfe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ce02:	00ed      	lsls	r5, r5, #3
9001ce04:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001ce08:	fb17 f706 	smulbb	r7, r7, r6
9001ce0c:	b2ed      	uxtb	r5, r5
9001ce0e:	fb18 f806 	smulbb	r8, r8, r6
9001ce12:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001ce16:	10c7      	asrs	r7, r0, #3
9001ce18:	fb15 f506 	smulbb	r5, r5, r6
9001ce1c:	00c0      	lsls	r0, r0, #3
9001ce1e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ce22:	fa1f fc8c 	uxth.w	ip, ip
9001ce26:	b2c0      	uxtb	r0, r0
9001ce28:	fb07 870b 	mla	r7, r7, fp, r8
9001ce2c:	fb00 500b 	mla	r0, r0, fp, r5
9001ce30:	f10c 0501 	add.w	r5, ip, #1
9001ce34:	b2bf      	uxth	r7, r7
9001ce36:	b280      	uxth	r0, r0
9001ce38:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ce3c:	f107 0801 	add.w	r8, r7, #1
9001ce40:	1c45      	adds	r5, r0, #1
9001ce42:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001ce46:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ce4a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ce4e:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ce50:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ce54:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ce58:	4401      	add	r1, r0
9001ce5a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ce5e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001ce60:	ea45 0c0c 	orr.w	ip, r5, ip
9001ce64:	4402      	add	r2, r0
9001ce66:	ea4c 0c08 	orr.w	ip, ip, r8
9001ce6a:	f82a cb02 	strh.w	ip, [sl], #2
9001ce6e:	e7af      	b.n	9001cdd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001ce70:	f04f 0800 	mov.w	r8, #0
9001ce74:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001ce78:	eb03 0008 	add.w	r0, r3, r8
9001ce7c:	2800      	cmp	r0, #0
9001ce7e:	dc41      	bgt.n	9001cf04 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001ce80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ce84:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ce88:	9b00      	ldr	r3, [sp, #0]
9001ce8a:	2b00      	cmp	r3, #0
9001ce8c:	f340 8095 	ble.w	9001cfba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001ce90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ce94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce96:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ce9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ce9e:	eef0 6a62 	vmov.f32	s13, s5
9001cea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cea6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ceaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ceae:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001ceb2:	eef0 6a43 	vmov.f32	s13, s6
9001ceb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ceba:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001cebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cec2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cec6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ceca:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ced2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ced6:	ee12 2a90 	vmov	r2, s5
9001ceda:	eef0 2a47 	vmov.f32	s5, s14
9001cede:	fb92 f3f3 	sdiv	r3, r2, r3
9001cee2:	ee13 2a10 	vmov	r2, s6
9001cee6:	9311      	str	r3, [sp, #68]	; 0x44
9001cee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ceea:	eeb0 3a67 	vmov.f32	s6, s15
9001ceee:	fb92 f3f3 	sdiv	r3, r2, r3
9001cef2:	9312      	str	r3, [sp, #72]	; 0x48
9001cef4:	9b00      	ldr	r3, [sp, #0]
9001cef6:	9a03      	ldr	r2, [sp, #12]
9001cef8:	3b01      	subs	r3, #1
9001cefa:	9300      	str	r3, [sp, #0]
9001cefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cefe:	bf08      	it	eq
9001cf00:	4613      	moveq	r3, r2
9001cf02:	e72f      	b.n	9001cd64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001cf04:	140f      	asrs	r7, r1, #16
9001cf06:	d451      	bmi.n	9001cfac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cf08:	f8de 5008 	ldr.w	r5, [lr, #8]
9001cf0c:	42bd      	cmp	r5, r7
9001cf0e:	dd4d      	ble.n	9001cfac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cf10:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cf14:	d44a      	bmi.n	9001cfac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cf16:	f8de 000c 	ldr.w	r0, [lr, #12]
9001cf1a:	4560      	cmp	r0, ip
9001cf1c:	dd46      	ble.n	9001cfac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cf1e:	b22d      	sxth	r5, r5
9001cf20:	9802      	ldr	r0, [sp, #8]
9001cf22:	fb0c 7505 	mla	r5, ip, r5, r7
9001cf26:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001cf2a:	f06f 0501 	mvn.w	r5, #1
9001cf2e:	fb05 fb08 	mul.w	fp, r5, r8
9001cf32:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cf36:	f834 500b 	ldrh.w	r5, [r4, fp]
9001cf3a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cf3e:	122f      	asrs	r7, r5, #8
9001cf40:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001cf44:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cf48:	00ed      	lsls	r5, r5, #3
9001cf4a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001cf4e:	fb17 f706 	smulbb	r7, r7, r6
9001cf52:	b2ed      	uxtb	r5, r5
9001cf54:	fb19 f906 	smulbb	r9, r9, r6
9001cf58:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001cf5c:	10c7      	asrs	r7, r0, #3
9001cf5e:	fb15 f506 	smulbb	r5, r5, r6
9001cf62:	00c0      	lsls	r0, r0, #3
9001cf64:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cf68:	fa1f fc8c 	uxth.w	ip, ip
9001cf6c:	b2c0      	uxtb	r0, r0
9001cf6e:	fb07 970a 	mla	r7, r7, sl, r9
9001cf72:	fb00 500a 	mla	r0, r0, sl, r5
9001cf76:	f10c 0501 	add.w	r5, ip, #1
9001cf7a:	b2bf      	uxth	r7, r7
9001cf7c:	b280      	uxth	r0, r0
9001cf7e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001cf82:	f107 0901 	add.w	r9, r7, #1
9001cf86:	1c45      	adds	r5, r0, #1
9001cf88:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001cf8c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cf90:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001cf94:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001cf98:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001cf9c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001cfa0:	ea45 0c0c 	orr.w	ip, r5, ip
9001cfa4:	ea4c 0c09 	orr.w	ip, ip, r9
9001cfa8:	f824 c00b 	strh.w	ip, [r4, fp]
9001cfac:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cfae:	f108 38ff 	add.w	r8, r8, #4294967295
9001cfb2:	4401      	add	r1, r0
9001cfb4:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cfb6:	4402      	add	r2, r0
9001cfb8:	e75e      	b.n	9001ce78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001cfba:	b005      	add	sp, #20
9001cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cfc0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cfc4:	b085      	sub	sp, #20
9001cfc6:	4693      	mov	fp, r2
9001cfc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cfcc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001cfce:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001cfd0:	6870      	ldr	r0, [r6, #4]
9001cfd2:	9101      	str	r1, [sp, #4]
9001cfd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cfd8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001cfdc:	fb00 2404 	mla	r4, r0, r4, r2
9001cfe0:	6832      	ldr	r2, [r6, #0]
9001cfe2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001cfe6:	682a      	ldr	r2, [r5, #0]
9001cfe8:	9202      	str	r2, [sp, #8]
9001cfea:	9a01      	ldr	r2, [sp, #4]
9001cfec:	2a00      	cmp	r2, #0
9001cfee:	dc03      	bgt.n	9001cff8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001cff0:	f1bb 0f00 	cmp.w	fp, #0
9001cff4:	f340 809a 	ble.w	9001d12c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001cff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cffa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001cffe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d002:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d004:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001d008:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d00c:	2b00      	cmp	r3, #0
9001d00e:	dd0c      	ble.n	9001d02a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001d010:	1406      	asrs	r6, r0, #16
9001d012:	d405      	bmi.n	9001d020 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d014:	454e      	cmp	r6, r9
9001d016:	da03      	bge.n	9001d020 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d018:	1416      	asrs	r6, r2, #16
9001d01a:	d401      	bmi.n	9001d020 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d01c:	4546      	cmp	r6, r8
9001d01e:	db05      	blt.n	9001d02c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001d020:	4470      	add	r0, lr
9001d022:	4462      	add	r2, ip
9001d024:	3b01      	subs	r3, #1
9001d026:	3402      	adds	r4, #2
9001d028:	e7f0      	b.n	9001d00c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001d02a:	d00f      	beq.n	9001d04c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d02c:	1e5e      	subs	r6, r3, #1
9001d02e:	fb0e 0706 	mla	r7, lr, r6, r0
9001d032:	143f      	asrs	r7, r7, #16
9001d034:	d541      	bpl.n	9001d0ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001d036:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001d03a:	4698      	mov	r8, r3
9001d03c:	9603      	str	r6, [sp, #12]
9001d03e:	f1b8 0f00 	cmp.w	r8, #0
9001d042:	dc56      	bgt.n	9001d0f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001d044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d048:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d04c:	9b01      	ldr	r3, [sp, #4]
9001d04e:	2b00      	cmp	r3, #0
9001d050:	dd6c      	ble.n	9001d12c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001d052:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d058:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d05c:	eeb0 6a62 	vmov.f32	s12, s5
9001d060:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d064:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d06c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d070:	eeb0 6a43 	vmov.f32	s12, s6
9001d074:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d078:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d07c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d080:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d084:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d088:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d08c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d090:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d094:	ee12 2a90 	vmov	r2, s5
9001d098:	eef0 2a47 	vmov.f32	s5, s14
9001d09c:	fb92 fef3 	sdiv	lr, r2, r3
9001d0a0:	ee13 2a10 	vmov	r2, s6
9001d0a4:	eeb0 3a67 	vmov.f32	s6, s15
9001d0a8:	fb92 fcf3 	sdiv	ip, r2, r3
9001d0ac:	9b01      	ldr	r3, [sp, #4]
9001d0ae:	3b01      	subs	r3, #1
9001d0b0:	9301      	str	r3, [sp, #4]
9001d0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d0b4:	bf08      	it	eq
9001d0b6:	465b      	moveq	r3, fp
9001d0b8:	e797      	b.n	9001cfea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001d0ba:	454f      	cmp	r7, r9
9001d0bc:	dabb      	bge.n	9001d036 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d0be:	fb0c 2606 	mla	r6, ip, r6, r2
9001d0c2:	1436      	asrs	r6, r6, #16
9001d0c4:	d4b7      	bmi.n	9001d036 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d0c6:	4546      	cmp	r6, r8
9001d0c8:	dab5      	bge.n	9001d036 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d0ca:	461e      	mov	r6, r3
9001d0cc:	46a0      	mov	r8, r4
9001d0ce:	2e00      	cmp	r6, #0
9001d0d0:	ddb8      	ble.n	9001d044 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001d0d2:	1417      	asrs	r7, r2, #16
9001d0d4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001d0d8:	ea4f 4920 	mov.w	r9, r0, asr #16
9001d0dc:	9902      	ldr	r1, [sp, #8]
9001d0de:	4470      	add	r0, lr
9001d0e0:	4462      	add	r2, ip
9001d0e2:	fb0a 9707 	mla	r7, sl, r7, r9
9001d0e6:	3e01      	subs	r6, #1
9001d0e8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001d0ec:	f828 7b02 	strh.w	r7, [r8], #2
9001d0f0:	e7ed      	b.n	9001d0ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001d0f2:	ea5f 4920 	movs.w	r9, r0, asr #16
9001d0f6:	d414      	bmi.n	9001d122 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d0f8:	68ae      	ldr	r6, [r5, #8]
9001d0fa:	454e      	cmp	r6, r9
9001d0fc:	dd11      	ble.n	9001d122 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d0fe:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001d102:	d40e      	bmi.n	9001d122 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d104:	68ef      	ldr	r7, [r5, #12]
9001d106:	4557      	cmp	r7, sl
9001d108:	dd0b      	ble.n	9001d122 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001d10a:	b236      	sxth	r6, r6
9001d10c:	f06f 0101 	mvn.w	r1, #1
9001d110:	9f02      	ldr	r7, [sp, #8]
9001d112:	fb0a 9606 	mla	r6, sl, r6, r9
9001d116:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001d11a:	fb01 f608 	mul.w	r6, r1, r8
9001d11e:	9903      	ldr	r1, [sp, #12]
9001d120:	538f      	strh	r7, [r1, r6]
9001d122:	4470      	add	r0, lr
9001d124:	4462      	add	r2, ip
9001d126:	f108 38ff 	add.w	r8, r8, #4294967295
9001d12a:	e788      	b.n	9001d03e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d12c:	b005      	add	sp, #20
9001d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d132 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d136:	b087      	sub	sp, #28
9001d138:	468b      	mov	fp, r1
9001d13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d13e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d140:	9203      	str	r2, [sp, #12]
9001d142:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d146:	6841      	ldr	r1, [r0, #4]
9001d148:	9204      	str	r2, [sp, #16]
9001d14a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d14e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001d152:	fb01 2505 	mla	r5, r1, r5, r2
9001d156:	6802      	ldr	r2, [r0, #0]
9001d158:	eb02 0545 	add.w	r5, r2, r5, lsl #1
9001d15c:	f8d9 2000 	ldr.w	r2, [r9]
9001d160:	9201      	str	r2, [sp, #4]
9001d162:	f1bb 0f00 	cmp.w	fp, #0
9001d166:	dc03      	bgt.n	9001d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001d168:	9a03      	ldr	r2, [sp, #12]
9001d16a:	2a00      	cmp	r2, #0
9001d16c:	f340 8158 	ble.w	9001d420 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d170:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d172:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d176:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d17a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d17c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d180:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d184:	2b00      	cmp	r3, #0
9001d186:	dd0e      	ble.n	9001d1a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001d188:	1402      	asrs	r2, r0, #16
9001d18a:	d405      	bmi.n	9001d198 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d18c:	42ba      	cmp	r2, r7
9001d18e:	da03      	bge.n	9001d198 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d190:	140a      	asrs	r2, r1, #16
9001d192:	d401      	bmi.n	9001d198 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d194:	42b2      	cmp	r2, r6
9001d196:	db07      	blt.n	9001d1a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d19a:	3b01      	subs	r3, #1
9001d19c:	3502      	adds	r5, #2
9001d19e:	4410      	add	r0, r2
9001d1a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d1a2:	4411      	add	r1, r2
9001d1a4:	e7ee      	b.n	9001d184 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001d1a6:	d017      	beq.n	9001d1d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001d1a8:	1e5a      	subs	r2, r3, #1
9001d1aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d1ac:	fb04 0402 	mla	r4, r4, r2, r0
9001d1b0:	1424      	asrs	r4, r4, #16
9001d1b2:	d409      	bmi.n	9001d1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d1b4:	42bc      	cmp	r4, r7
9001d1b6:	da07      	bge.n	9001d1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d1b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d1ba:	fb04 1202 	mla	r2, r4, r2, r1
9001d1be:	1412      	asrs	r2, r2, #16
9001d1c0:	d402      	bmi.n	9001d1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d1c2:	42b2      	cmp	r2, r6
9001d1c4:	f2c0 80bf 	blt.w	9001d346 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001d1c8:	2700      	movs	r7, #0
9001d1ca:	19da      	adds	r2, r3, r7
9001d1cc:	2a00      	cmp	r2, #0
9001d1ce:	dc3e      	bgt.n	9001d24e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001d1d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d1d4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001d1d8:	f1bb 0f00 	cmp.w	fp, #0
9001d1dc:	f340 8120 	ble.w	9001d420 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d1e0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d1e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d1e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d1ea:	f1bb 0b01 	subs.w	fp, fp, #1
9001d1ee:	eeb0 6a62 	vmov.f32	s12, s5
9001d1f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d1f6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d1fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d1fe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d202:	eeb0 6a43 	vmov.f32	s12, s6
9001d206:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d20a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d20e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d212:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d216:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d21a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d21e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d222:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d226:	ee12 2a90 	vmov	r2, s5
9001d22a:	eef0 2a47 	vmov.f32	s5, s14
9001d22e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d232:	ee13 2a10 	vmov	r2, s6
9001d236:	9313      	str	r3, [sp, #76]	; 0x4c
9001d238:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d23a:	eeb0 3a67 	vmov.f32	s6, s15
9001d23e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d242:	9a03      	ldr	r2, [sp, #12]
9001d244:	9314      	str	r3, [sp, #80]	; 0x50
9001d246:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d248:	bf08      	it	eq
9001d24a:	4613      	moveq	r3, r2
9001d24c:	e789      	b.n	9001d162 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001d24e:	1406      	asrs	r6, r0, #16
9001d250:	d42d      	bmi.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d252:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001d256:	42b4      	cmp	r4, r6
9001d258:	dd29      	ble.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d25a:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001d25e:	d426      	bmi.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d260:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d264:	4562      	cmp	r2, ip
9001d266:	dd22      	ble.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d268:	b224      	sxth	r4, r4
9001d26a:	9a01      	ldr	r2, [sp, #4]
9001d26c:	fb0c 6404 	mla	r4, ip, r4, r6
9001d270:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001d274:	0e22      	lsrs	r2, r4, #24
9001d276:	d01a      	beq.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d278:	9e04      	ldr	r6, [sp, #16]
9001d27a:	4372      	muls	r2, r6
9001d27c:	1c56      	adds	r6, r2, #1
9001d27e:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d282:	0a26      	lsrs	r6, r4, #8
9001d284:	1212      	asrs	r2, r2, #8
9001d286:	9605      	str	r6, [sp, #20]
9001d288:	2aff      	cmp	r2, #255	; 0xff
9001d28a:	d116      	bne.n	9001d2ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001d28c:	f06f 0201 	mvn.w	r2, #1
9001d290:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d294:	fb02 fc07 	mul.w	ip, r2, r7
9001d298:	0962      	lsrs	r2, r4, #5
9001d29a:	f026 0607 	bic.w	r6, r6, #7
9001d29e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d2a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d2a6:	4316      	orrs	r6, r2
9001d2a8:	4326      	orrs	r6, r4
9001d2aa:	f825 600c 	strh.w	r6, [r5, ip]
9001d2ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d2b0:	3f01      	subs	r7, #1
9001d2b2:	4410      	add	r0, r2
9001d2b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d2b6:	4411      	add	r1, r2
9001d2b8:	e787      	b.n	9001d1ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d2ba:	f06f 0601 	mvn.w	r6, #1
9001d2be:	fa1f fa82 	uxth.w	sl, r2
9001d2c2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001d2c6:	43d2      	mvns	r2, r2
9001d2c8:	437e      	muls	r6, r7
9001d2ca:	b2e4      	uxtb	r4, r4
9001d2cc:	fb1c fc0a 	smulbb	ip, ip, sl
9001d2d0:	b2d2      	uxtb	r2, r2
9001d2d2:	f835 8006 	ldrh.w	r8, [r5, r6]
9001d2d6:	fb14 f40a 	smulbb	r4, r4, sl
9001d2da:	9602      	str	r6, [sp, #8]
9001d2dc:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d2e0:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d2e4:	fb16 f60a 	smulbb	r6, r6, sl
9001d2e8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d2ec:	fb0e ce02 	mla	lr, lr, r2, ip
9001d2f0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d2f4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d2f8:	fa1f fe8e 	uxth.w	lr, lr
9001d2fc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d300:	fa5f f888 	uxtb.w	r8, r8
9001d304:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d308:	fb08 4402 	mla	r4, r8, r2, r4
9001d30c:	f10e 0201 	add.w	r2, lr, #1
9001d310:	fa1f fc8c 	uxth.w	ip, ip
9001d314:	b2a4      	uxth	r4, r4
9001d316:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d31a:	9a02      	ldr	r2, [sp, #8]
9001d31c:	1c66      	adds	r6, r4, #1
9001d31e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d322:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d326:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d32a:	ea46 0e0e 	orr.w	lr, r6, lr
9001d32e:	f10c 0601 	add.w	r6, ip, #1
9001d332:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d336:	0976      	lsrs	r6, r6, #5
9001d338:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d33c:	ea4e 0e06 	orr.w	lr, lr, r6
9001d340:	f825 e002 	strh.w	lr, [r5, r2]
9001d344:	e7b3      	b.n	9001d2ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d346:	f04f 0800 	mov.w	r8, #0
9001d34a:	eba3 0208 	sub.w	r2, r3, r8
9001d34e:	2a00      	cmp	r2, #0
9001d350:	f77f af3e 	ble.w	9001d1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d354:	1404      	asrs	r4, r0, #16
9001d356:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001d35a:	140a      	asrs	r2, r1, #16
9001d35c:	fb06 4202 	mla	r2, r6, r2, r4
9001d360:	9c01      	ldr	r4, [sp, #4]
9001d362:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001d366:	0e22      	lsrs	r2, r4, #24
9001d368:	d015      	beq.n	9001d396 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d36a:	9e04      	ldr	r6, [sp, #16]
9001d36c:	4372      	muls	r2, r6
9001d36e:	1c56      	adds	r6, r2, #1
9001d370:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d374:	0a26      	lsrs	r6, r4, #8
9001d376:	1212      	asrs	r2, r2, #8
9001d378:	2aff      	cmp	r2, #255	; 0xff
9001d37a:	d113      	bne.n	9001d3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001d37c:	0962      	lsrs	r2, r4, #5
9001d37e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d382:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d386:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d38a:	f026 0607 	bic.w	r6, r6, #7
9001d38e:	4316      	orrs	r6, r2
9001d390:	4326      	orrs	r6, r4
9001d392:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001d396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d398:	f108 0801 	add.w	r8, r8, #1
9001d39c:	4410      	add	r0, r2
9001d39e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d3a0:	4411      	add	r1, r2
9001d3a2:	e7d2      	b.n	9001d34a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001d3a4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
9001d3a8:	fa1f fa82 	uxth.w	sl, r2
9001d3ac:	f3c4 4707 	ubfx	r7, r4, #16, #8
9001d3b0:	43d2      	mvns	r2, r2
9001d3b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d3b6:	fb17 f70a 	smulbb	r7, r7, sl
9001d3ba:	b2d2      	uxtb	r2, r2
9001d3bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d3c0:	b2e4      	uxtb	r4, r4
9001d3c2:	b2f6      	uxtb	r6, r6
9001d3c4:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d3c8:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d3cc:	fb14 f40a 	smulbb	r4, r4, sl
9001d3d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d3d4:	fa1f fc8c 	uxth.w	ip, ip
9001d3d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d3dc:	fb16 f60a 	smulbb	r6, r6, sl
9001d3e0:	fa5f fe8e 	uxtb.w	lr, lr
9001d3e4:	fb0e 4402 	mla	r4, lr, r2, r4
9001d3e8:	fb07 6702 	mla	r7, r7, r2, r6
9001d3ec:	f10c 0201 	add.w	r2, ip, #1
9001d3f0:	b2a4      	uxth	r4, r4
9001d3f2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d3f6:	1c66      	adds	r6, r4, #1
9001d3f8:	b2bf      	uxth	r7, r7
9001d3fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d3fe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d402:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d406:	ea46 0c0c 	orr.w	ip, r6, ip
9001d40a:	1c7e      	adds	r6, r7, #1
9001d40c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001d410:	0976      	lsrs	r6, r6, #5
9001d412:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d416:	ea4c 0c06 	orr.w	ip, ip, r6
9001d41a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001d41e:	e7ba      	b.n	9001d396 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d420:	b007      	add	sp, #28
9001d422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001d428 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d42c:	b085      	sub	sp, #20
9001d42e:	468b      	mov	fp, r1
9001d430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d434:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d436:	9203      	str	r2, [sp, #12]
9001d438:	6841      	ldr	r1, [r0, #4]
9001d43a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001d43e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001d442:	fb01 2404 	mla	r4, r1, r4, r2
9001d446:	6802      	ldr	r2, [r0, #0]
9001d448:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d44c:	f8d8 2000 	ldr.w	r2, [r8]
9001d450:	9201      	str	r2, [sp, #4]
9001d452:	f1bb 0f00 	cmp.w	fp, #0
9001d456:	dc03      	bgt.n	9001d460 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001d458:	9a03      	ldr	r2, [sp, #12]
9001d45a:	2a00      	cmp	r2, #0
9001d45c:	f340 814f 	ble.w	9001d6fe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d462:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001d466:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d46a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d46c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001d470:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d474:	2b00      	cmp	r3, #0
9001d476:	dd0e      	ble.n	9001d496 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d478:	1408      	asrs	r0, r1, #16
9001d47a:	d405      	bmi.n	9001d488 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d47c:	42b8      	cmp	r0, r7
9001d47e:	da03      	bge.n	9001d488 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d480:	1410      	asrs	r0, r2, #16
9001d482:	d401      	bmi.n	9001d488 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d484:	42b0      	cmp	r0, r6
9001d486:	db07      	blt.n	9001d498 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d488:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d48a:	3b01      	subs	r3, #1
9001d48c:	3402      	adds	r4, #2
9001d48e:	4401      	add	r1, r0
9001d490:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d492:	4402      	add	r2, r0
9001d494:	e7ee      	b.n	9001d474 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001d496:	d017      	beq.n	9001d4c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d498:	1e58      	subs	r0, r3, #1
9001d49a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001d49c:	fb05 1500 	mla	r5, r5, r0, r1
9001d4a0:	142d      	asrs	r5, r5, #16
9001d4a2:	d409      	bmi.n	9001d4b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d4a4:	42bd      	cmp	r5, r7
9001d4a6:	da07      	bge.n	9001d4b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d4a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001d4aa:	fb05 2000 	mla	r0, r5, r0, r2
9001d4ae:	1400      	asrs	r0, r0, #16
9001d4b0:	d402      	bmi.n	9001d4b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d4b2:	42b0      	cmp	r0, r6
9001d4b4:	f2c0 80ba 	blt.w	9001d62c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001d4b8:	2600      	movs	r6, #0
9001d4ba:	1998      	adds	r0, r3, r6
9001d4bc:	2800      	cmp	r0, #0
9001d4be:	dc3e      	bgt.n	9001d53e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d4c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d4c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d4c8:	f1bb 0f00 	cmp.w	fp, #0
9001d4cc:	f340 8117 	ble.w	9001d6fe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d4d0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d4d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d4da:	f1bb 0b01 	subs.w	fp, fp, #1
9001d4de:	eeb0 6a62 	vmov.f32	s12, s5
9001d4e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d4e6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d4ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d4ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d4f2:	eeb0 6a43 	vmov.f32	s12, s6
9001d4f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d4fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d4fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d502:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d506:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d50a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d50e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d516:	ee12 2a90 	vmov	r2, s5
9001d51a:	eef0 2a47 	vmov.f32	s5, s14
9001d51e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d522:	ee13 2a10 	vmov	r2, s6
9001d526:	9311      	str	r3, [sp, #68]	; 0x44
9001d528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d52a:	eeb0 3a67 	vmov.f32	s6, s15
9001d52e:	fb92 f3f3 	sdiv	r3, r2, r3
9001d532:	9a03      	ldr	r2, [sp, #12]
9001d534:	9312      	str	r3, [sp, #72]	; 0x48
9001d536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d538:	bf08      	it	eq
9001d53a:	4613      	moveq	r3, r2
9001d53c:	e789      	b.n	9001d452 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001d53e:	140f      	asrs	r7, r1, #16
9001d540:	d424      	bmi.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d542:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001d546:	42bd      	cmp	r5, r7
9001d548:	dd20      	ble.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d54a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001d54e:	d41d      	bmi.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d550:	f8d8 000c 	ldr.w	r0, [r8, #12]
9001d554:	4560      	cmp	r0, ip
9001d556:	dd19      	ble.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d558:	b22d      	sxth	r5, r5
9001d55a:	9801      	ldr	r0, [sp, #4]
9001d55c:	fb0c 7505 	mla	r5, ip, r5, r7
9001d560:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
9001d564:	0e07      	lsrs	r7, r0, #24
9001d566:	2fff      	cmp	r7, #255	; 0xff
9001d568:	d116      	bne.n	9001d598 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001d56a:	f06f 0501 	mvn.w	r5, #1
9001d56e:	fb05 f706 	mul.w	r7, r5, r6
9001d572:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001d576:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001d57a:	0945      	lsrs	r5, r0, #5
9001d57c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001d580:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d584:	ea4c 0505 	orr.w	r5, ip, r5
9001d588:	4305      	orrs	r5, r0
9001d58a:	53e5      	strh	r5, [r4, r7]
9001d58c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d58e:	3e01      	subs	r6, #1
9001d590:	4401      	add	r1, r0
9001d592:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d594:	4402      	add	r2, r0
9001d596:	e790      	b.n	9001d4ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d598:	b2fd      	uxtb	r5, r7
9001d59a:	2f00      	cmp	r7, #0
9001d59c:	d0f6      	beq.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d59e:	f06f 0701 	mvn.w	r7, #1
9001d5a2:	fa1f f985 	uxth.w	r9, r5
9001d5a6:	43ed      	mvns	r5, r5
9001d5a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d5ac:	4377      	muls	r7, r6
9001d5ae:	fb1a fa09 	smulbb	sl, sl, r9
9001d5b2:	b2ed      	uxtb	r5, r5
9001d5b4:	f834 e007 	ldrh.w	lr, [r4, r7]
9001d5b8:	9702      	str	r7, [sp, #8]
9001d5ba:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001d5be:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d5c2:	fb17 f709 	smulbb	r7, r7, r9
9001d5c6:	b2c0      	uxtb	r0, r0
9001d5c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d5cc:	fb10 f009 	smulbb	r0, r0, r9
9001d5d0:	fb0c 7c05 	mla	ip, ip, r5, r7
9001d5d4:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d5d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d5dc:	fa1f fc8c 	uxth.w	ip, ip
9001d5e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d5e4:	fa5f fe8e 	uxtb.w	lr, lr
9001d5e8:	fb07 a705 	mla	r7, r7, r5, sl
9001d5ec:	fb0e 0005 	mla	r0, lr, r5, r0
9001d5f0:	f10c 0501 	add.w	r5, ip, #1
9001d5f4:	b2bf      	uxth	r7, r7
9001d5f6:	b280      	uxth	r0, r0
9001d5f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001d5fc:	f100 0a01 	add.w	sl, r0, #1
9001d600:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d604:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d608:	9802      	ldr	r0, [sp, #8]
9001d60a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d60e:	ea4a 0c0c 	orr.w	ip, sl, ip
9001d612:	f107 0a01 	add.w	sl, r7, #1
9001d616:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d61a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d61e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d622:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d626:	f824 c000 	strh.w	ip, [r4, r0]
9001d62a:	e7af      	b.n	9001d58c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d62c:	f04f 0e00 	mov.w	lr, #0
9001d630:	eba3 000e 	sub.w	r0, r3, lr
9001d634:	2800      	cmp	r0, #0
9001d636:	f77f af43 	ble.w	9001d4c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d63a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001d63e:	140d      	asrs	r5, r1, #16
9001d640:	1410      	asrs	r0, r2, #16
9001d642:	fb06 5000 	mla	r0, r6, r0, r5
9001d646:	9d01      	ldr	r5, [sp, #4]
9001d648:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001d64c:	0e2e      	lsrs	r6, r5, #24
9001d64e:	2eff      	cmp	r6, #255	; 0xff
9001d650:	d112      	bne.n	9001d678 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
9001d652:	482c      	ldr	r0, [pc, #176]	; (9001d704 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
9001d654:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001d658:	0968      	lsrs	r0, r5, #5
9001d65a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d65e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d662:	4330      	orrs	r0, r6
9001d664:	4328      	orrs	r0, r5
9001d666:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001d66a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d66c:	f10e 0e01 	add.w	lr, lr, #1
9001d670:	4401      	add	r1, r0
9001d672:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d674:	4402      	add	r2, r0
9001d676:	e7db      	b.n	9001d630 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
9001d678:	b2f0      	uxtb	r0, r6
9001d67a:	2e00      	cmp	r6, #0
9001d67c:	d0f5      	beq.n	9001d66a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d67e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d682:	fa1f f980 	uxth.w	r9, r0
9001d686:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d68a:	43c0      	mvns	r0, r0
9001d68c:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d690:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d694:	fb16 f609 	smulbb	r6, r6, r9
9001d698:	b2c0      	uxtb	r0, r0
9001d69a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d69e:	b2ed      	uxtb	r5, r5
9001d6a0:	fb1a fa09 	smulbb	sl, sl, r9
9001d6a4:	fb07 6700 	mla	r7, r7, r0, r6
9001d6a8:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d6ac:	fb15 f509 	smulbb	r5, r5, r9
9001d6b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d6b4:	b2bf      	uxth	r7, r7
9001d6b6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d6ba:	fa5f fc8c 	uxtb.w	ip, ip
9001d6be:	fb06 a600 	mla	r6, r6, r0, sl
9001d6c2:	fb0c 5500 	mla	r5, ip, r0, r5
9001d6c6:	1c78      	adds	r0, r7, #1
9001d6c8:	b2b6      	uxth	r6, r6
9001d6ca:	b2ad      	uxth	r5, r5
9001d6cc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001d6d0:	f105 0a01 	add.w	sl, r5, #1
9001d6d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d6d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d6dc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d6e0:	ea4a 0707 	orr.w	r7, sl, r7
9001d6e4:	f106 0a01 	add.w	sl, r6, #1
9001d6e8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d6ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d6f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d6f4:	ea47 070a 	orr.w	r7, r7, sl
9001d6f8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001d6fc:	e7b5      	b.n	9001d66a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d6fe:	b005      	add	sp, #20
9001d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d704:	fffff800 	.word	0xfffff800

9001d708 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d70c:	b087      	sub	sp, #28
9001d70e:	468b      	mov	fp, r1
9001d710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d714:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d716:	9203      	str	r2, [sp, #12]
9001d718:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d71c:	6841      	ldr	r1, [r0, #4]
9001d71e:	9204      	str	r2, [sp, #16]
9001d720:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d724:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d728:	fb01 2404 	mla	r4, r1, r4, r2
9001d72c:	6802      	ldr	r2, [r0, #0]
9001d72e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d732:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d736:	3201      	adds	r2, #1
9001d738:	f022 0201 	bic.w	r2, r2, #1
9001d73c:	9200      	str	r2, [sp, #0]
9001d73e:	f8d9 2000 	ldr.w	r2, [r9]
9001d742:	9201      	str	r2, [sp, #4]
9001d744:	f1bb 0f00 	cmp.w	fp, #0
9001d748:	dc03      	bgt.n	9001d752 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d74a:	9a03      	ldr	r2, [sp, #12]
9001d74c:	2a00      	cmp	r2, #0
9001d74e:	f340 816a 	ble.w	9001da26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d752:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d754:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d758:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d75c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d75e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d762:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d766:	2b00      	cmp	r3, #0
9001d768:	dd0e      	ble.n	9001d788 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d76a:	1402      	asrs	r2, r0, #16
9001d76c:	d405      	bmi.n	9001d77a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d76e:	42ba      	cmp	r2, r7
9001d770:	da03      	bge.n	9001d77a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d772:	140a      	asrs	r2, r1, #16
9001d774:	d401      	bmi.n	9001d77a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d776:	42b2      	cmp	r2, r6
9001d778:	db07      	blt.n	9001d78a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001d77a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d77c:	3b01      	subs	r3, #1
9001d77e:	3402      	adds	r4, #2
9001d780:	4410      	add	r0, r2
9001d782:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d784:	4411      	add	r1, r2
9001d786:	e7ee      	b.n	9001d766 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001d788:	d017      	beq.n	9001d7ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d78a:	1e5a      	subs	r2, r3, #1
9001d78c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d78e:	fb05 0502 	mla	r5, r5, r2, r0
9001d792:	142d      	asrs	r5, r5, #16
9001d794:	d409      	bmi.n	9001d7aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d796:	42bd      	cmp	r5, r7
9001d798:	da07      	bge.n	9001d7aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d79a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d79c:	fb05 1202 	mla	r2, r5, r2, r1
9001d7a0:	1412      	asrs	r2, r2, #16
9001d7a2:	d402      	bmi.n	9001d7aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d7a4:	42b2      	cmp	r2, r6
9001d7a6:	f2c0 80c8 	blt.w	9001d93a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001d7aa:	2700      	movs	r7, #0
9001d7ac:	19da      	adds	r2, r3, r7
9001d7ae:	2a00      	cmp	r2, #0
9001d7b0:	dc3e      	bgt.n	9001d830 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d7b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d7b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d7ba:	f1bb 0f00 	cmp.w	fp, #0
9001d7be:	f340 8132 	ble.w	9001da26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d7c2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d7c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d7c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d7cc:	f1bb 0b01 	subs.w	fp, fp, #1
9001d7d0:	eeb0 6a62 	vmov.f32	s12, s5
9001d7d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d7d8:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d7dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d7e0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d7e4:	eeb0 6a43 	vmov.f32	s12, s6
9001d7e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d7ec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d7f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d7f4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d7f8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d7fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d800:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d804:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d808:	ee12 2a90 	vmov	r2, s5
9001d80c:	eef0 2a47 	vmov.f32	s5, s14
9001d810:	fb92 f3f3 	sdiv	r3, r2, r3
9001d814:	ee13 2a10 	vmov	r2, s6
9001d818:	9313      	str	r3, [sp, #76]	; 0x4c
9001d81a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d81c:	eeb0 3a67 	vmov.f32	s6, s15
9001d820:	fb92 f3f3 	sdiv	r3, r2, r3
9001d824:	9a03      	ldr	r2, [sp, #12]
9001d826:	9314      	str	r3, [sp, #80]	; 0x50
9001d828:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d82a:	bf08      	it	eq
9001d82c:	4613      	moveq	r3, r2
9001d82e:	e789      	b.n	9001d744 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d830:	1405      	asrs	r5, r0, #16
9001d832:	d436      	bmi.n	9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d834:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d838:	42aa      	cmp	r2, r5
9001d83a:	dd32      	ble.n	9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d83c:	140e      	asrs	r6, r1, #16
9001d83e:	d430      	bmi.n	9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d840:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d844:	42b2      	cmp	r2, r6
9001d846:	dd2c      	ble.n	9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d848:	9a00      	ldr	r2, [sp, #0]
9001d84a:	fb06 5502 	mla	r5, r6, r2, r5
9001d84e:	9e01      	ldr	r6, [sp, #4]
9001d850:	086a      	lsrs	r2, r5, #1
9001d852:	5cb2      	ldrb	r2, [r6, r2]
9001d854:	07ee      	lsls	r6, r5, #31
9001d856:	bf54      	ite	pl
9001d858:	f002 020f 	andpl.w	r2, r2, #15
9001d85c:	1112      	asrmi	r2, r2, #4
9001d85e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d862:	b2d2      	uxtb	r2, r2
9001d864:	b1ea      	cbz	r2, 9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d866:	9d04      	ldr	r5, [sp, #16]
9001d868:	436a      	muls	r2, r5
9001d86a:	1c55      	adds	r5, r2, #1
9001d86c:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d870:	4d6e      	ldr	r5, [pc, #440]	; (9001da2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d872:	1212      	asrs	r2, r2, #8
9001d874:	682d      	ldr	r5, [r5, #0]
9001d876:	2aff      	cmp	r2, #255	; 0xff
9001d878:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001d87c:	9605      	str	r6, [sp, #20]
9001d87e:	d116      	bne.n	9001d8ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
9001d880:	f06f 0201 	mvn.w	r2, #1
9001d884:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d888:	fb02 fc07 	mul.w	ip, r2, r7
9001d88c:	096a      	lsrs	r2, r5, #5
9001d88e:	f026 0607 	bic.w	r6, r6, #7
9001d892:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d896:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d89a:	4316      	orrs	r6, r2
9001d89c:	432e      	orrs	r6, r5
9001d89e:	f824 600c 	strh.w	r6, [r4, ip]
9001d8a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d8a4:	3f01      	subs	r7, #1
9001d8a6:	4410      	add	r0, r2
9001d8a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d8aa:	4411      	add	r1, r2
9001d8ac:	e77e      	b.n	9001d7ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001d8ae:	f06f 0601 	mvn.w	r6, #1
9001d8b2:	fa1f fa82 	uxth.w	sl, r2
9001d8b6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001d8ba:	43d2      	mvns	r2, r2
9001d8bc:	437e      	muls	r6, r7
9001d8be:	b2ed      	uxtb	r5, r5
9001d8c0:	fb1c fc0a 	smulbb	ip, ip, sl
9001d8c4:	b2d2      	uxtb	r2, r2
9001d8c6:	f834 8006 	ldrh.w	r8, [r4, r6]
9001d8ca:	fb15 f50a 	smulbb	r5, r5, sl
9001d8ce:	9602      	str	r6, [sp, #8]
9001d8d0:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d8d4:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d8d8:	fb16 f60a 	smulbb	r6, r6, sl
9001d8dc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d8e0:	fb0e ce02 	mla	lr, lr, r2, ip
9001d8e4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d8e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d8ec:	fa1f fe8e 	uxth.w	lr, lr
9001d8f0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d8f4:	fa5f f888 	uxtb.w	r8, r8
9001d8f8:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d8fc:	fb08 5502 	mla	r5, r8, r2, r5
9001d900:	f10e 0201 	add.w	r2, lr, #1
9001d904:	fa1f fc8c 	uxth.w	ip, ip
9001d908:	b2ad      	uxth	r5, r5
9001d90a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d90e:	9a02      	ldr	r2, [sp, #8]
9001d910:	1c6e      	adds	r6, r5, #1
9001d912:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d916:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001d91a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d91e:	ea46 0e0e 	orr.w	lr, r6, lr
9001d922:	f10c 0601 	add.w	r6, ip, #1
9001d926:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d92a:	0976      	lsrs	r6, r6, #5
9001d92c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d930:	ea4e 0e06 	orr.w	lr, lr, r6
9001d934:	f824 e002 	strh.w	lr, [r4, r2]
9001d938:	e7b3      	b.n	9001d8a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d93a:	f04f 0800 	mov.w	r8, #0
9001d93e:	eba3 0208 	sub.w	r2, r3, r8
9001d942:	2a00      	cmp	r2, #0
9001d944:	f77f af35 	ble.w	9001d7b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d948:	1402      	asrs	r2, r0, #16
9001d94a:	9e00      	ldr	r6, [sp, #0]
9001d94c:	140d      	asrs	r5, r1, #16
9001d94e:	fb06 2505 	mla	r5, r6, r5, r2
9001d952:	9e01      	ldr	r6, [sp, #4]
9001d954:	086a      	lsrs	r2, r5, #1
9001d956:	07ed      	lsls	r5, r5, #31
9001d958:	5cb2      	ldrb	r2, [r6, r2]
9001d95a:	bf54      	ite	pl
9001d95c:	f002 020f 	andpl.w	r2, r2, #15
9001d960:	1112      	asrmi	r2, r2, #4
9001d962:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d966:	b2d2      	uxtb	r2, r2
9001d968:	b1c2      	cbz	r2, 9001d99c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d96a:	9d04      	ldr	r5, [sp, #16]
9001d96c:	436a      	muls	r2, r5
9001d96e:	1c55      	adds	r5, r2, #1
9001d970:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d974:	4d2d      	ldr	r5, [pc, #180]	; (9001da2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d976:	1212      	asrs	r2, r2, #8
9001d978:	682e      	ldr	r6, [r5, #0]
9001d97a:	2aff      	cmp	r2, #255	; 0xff
9001d97c:	ea4f 2516 	mov.w	r5, r6, lsr #8
9001d980:	d113      	bne.n	9001d9aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001d982:	0972      	lsrs	r2, r6, #5
9001d984:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
9001d988:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001d98c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d990:	f025 0507 	bic.w	r5, r5, #7
9001d994:	4315      	orrs	r5, r2
9001d996:	4335      	orrs	r5, r6
9001d998:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d99c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d99e:	f108 0801 	add.w	r8, r8, #1
9001d9a2:	4410      	add	r0, r2
9001d9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d9a6:	4411      	add	r1, r2
9001d9a8:	e7c9      	b.n	9001d93e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d9aa:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d9ae:	fa1f fa82 	uxth.w	sl, r2
9001d9b2:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001d9b6:	43d2      	mvns	r2, r2
9001d9b8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d9bc:	fb17 f70a 	smulbb	r7, r7, sl
9001d9c0:	b2d2      	uxtb	r2, r2
9001d9c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d9c6:	b2f6      	uxtb	r6, r6
9001d9c8:	b2ed      	uxtb	r5, r5
9001d9ca:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d9ce:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d9d2:	fb16 f60a 	smulbb	r6, r6, sl
9001d9d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d9da:	fa1f fc8c 	uxth.w	ip, ip
9001d9de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d9e2:	fb15 f50a 	smulbb	r5, r5, sl
9001d9e6:	fa5f fe8e 	uxtb.w	lr, lr
9001d9ea:	fb0e 6602 	mla	r6, lr, r2, r6
9001d9ee:	fb07 5702 	mla	r7, r7, r2, r5
9001d9f2:	f10c 0201 	add.w	r2, ip, #1
9001d9f6:	b2b6      	uxth	r6, r6
9001d9f8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d9fc:	1c75      	adds	r5, r6, #1
9001d9fe:	b2bf      	uxth	r7, r7
9001da00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001da04:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001da08:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001da0c:	ea45 0c0c 	orr.w	ip, r5, ip
9001da10:	1c7d      	adds	r5, r7, #1
9001da12:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001da16:	096d      	lsrs	r5, r5, #5
9001da18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001da1c:	ea4c 0c05 	orr.w	ip, ip, r5
9001da20:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001da24:	e7ba      	b.n	9001d99c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001da26:	b007      	add	sp, #28
9001da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001da2c:	240281fc 	.word	0x240281fc

9001da30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001da34:	b087      	sub	sp, #28
9001da36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001da3a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001dd44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001da3e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001da40:	9101      	str	r1, [sp, #4]
9001da42:	9205      	str	r2, [sp, #20]
9001da44:	6841      	ldr	r1, [r0, #4]
9001da46:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001da4a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001da4e:	fb01 2404 	mla	r4, r1, r4, r2
9001da52:	6802      	ldr	r2, [r0, #0]
9001da54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001da58:	f8db 2008 	ldr.w	r2, [fp, #8]
9001da5c:	3201      	adds	r2, #1
9001da5e:	f022 0201 	bic.w	r2, r2, #1
9001da62:	9202      	str	r2, [sp, #8]
9001da64:	f8db 2000 	ldr.w	r2, [fp]
9001da68:	9203      	str	r2, [sp, #12]
9001da6a:	9a01      	ldr	r2, [sp, #4]
9001da6c:	2a00      	cmp	r2, #0
9001da6e:	dc03      	bgt.n	9001da78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001da70:	9a05      	ldr	r2, [sp, #20]
9001da72:	2a00      	cmp	r2, #0
9001da74:	f340 8162 	ble.w	9001dd3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001da78:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001da7a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001da7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001da82:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001da84:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001da88:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001da8c:	2b00      	cmp	r3, #0
9001da8e:	dd0e      	ble.n	9001daae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001da90:	1402      	asrs	r2, r0, #16
9001da92:	d405      	bmi.n	9001daa0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001da94:	42ba      	cmp	r2, r7
9001da96:	da03      	bge.n	9001daa0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001da98:	140a      	asrs	r2, r1, #16
9001da9a:	d401      	bmi.n	9001daa0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001da9c:	42b2      	cmp	r2, r6
9001da9e:	db07      	blt.n	9001dab0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001daa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001daa2:	3b01      	subs	r3, #1
9001daa4:	3402      	adds	r4, #2
9001daa6:	4410      	add	r0, r2
9001daa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001daaa:	4411      	add	r1, r2
9001daac:	e7ee      	b.n	9001da8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001daae:	d017      	beq.n	9001dae0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001dab0:	1e5a      	subs	r2, r3, #1
9001dab2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001dab4:	fb05 0502 	mla	r5, r5, r2, r0
9001dab8:	142d      	asrs	r5, r5, #16
9001daba:	d409      	bmi.n	9001dad0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001dabc:	42bd      	cmp	r5, r7
9001dabe:	da07      	bge.n	9001dad0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001dac0:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001dac2:	fb05 1202 	mla	r2, r5, r2, r1
9001dac6:	1412      	asrs	r2, r2, #16
9001dac8:	d402      	bmi.n	9001dad0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001daca:	42b2      	cmp	r2, r6
9001dacc:	f2c0 80c3 	blt.w	9001dc56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001dad0:	2500      	movs	r5, #0
9001dad2:	195a      	adds	r2, r3, r5
9001dad4:	2a00      	cmp	r2, #0
9001dad6:	dc3f      	bgt.n	9001db58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001dad8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001dadc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001dae0:	9b01      	ldr	r3, [sp, #4]
9001dae2:	2b00      	cmp	r3, #0
9001dae4:	f340 812a 	ble.w	9001dd3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001dae8:	ee30 0a04 	vadd.f32	s0, s0, s8
9001daec:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001daee:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001daf2:	eeb0 6a62 	vmov.f32	s12, s5
9001daf6:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001dafa:	ee31 1a05 	vadd.f32	s2, s2, s10
9001dafe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001db02:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001db06:	eeb0 6a43 	vmov.f32	s12, s6
9001db0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001db0e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001db12:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001db16:	ee61 7a27 	vmul.f32	s15, s2, s15
9001db1a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001db1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001db22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001db26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001db2a:	ee12 2a90 	vmov	r2, s5
9001db2e:	eef0 2a47 	vmov.f32	s5, s14
9001db32:	fb92 f3f3 	sdiv	r3, r2, r3
9001db36:	ee13 2a10 	vmov	r2, s6
9001db3a:	9313      	str	r3, [sp, #76]	; 0x4c
9001db3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001db3e:	eeb0 3a67 	vmov.f32	s6, s15
9001db42:	fb92 f3f3 	sdiv	r3, r2, r3
9001db46:	9314      	str	r3, [sp, #80]	; 0x50
9001db48:	9b01      	ldr	r3, [sp, #4]
9001db4a:	9a05      	ldr	r2, [sp, #20]
9001db4c:	3b01      	subs	r3, #1
9001db4e:	9301      	str	r3, [sp, #4]
9001db50:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001db52:	bf08      	it	eq
9001db54:	4613      	moveq	r3, r2
9001db56:	e788      	b.n	9001da6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001db58:	1406      	asrs	r6, r0, #16
9001db5a:	d42c      	bmi.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001db5c:	f8db 2008 	ldr.w	r2, [fp, #8]
9001db60:	42b2      	cmp	r2, r6
9001db62:	dd28      	ble.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001db64:	140f      	asrs	r7, r1, #16
9001db66:	d426      	bmi.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001db68:	f8db 200c 	ldr.w	r2, [fp, #12]
9001db6c:	42ba      	cmp	r2, r7
9001db6e:	dd22      	ble.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001db70:	9a02      	ldr	r2, [sp, #8]
9001db72:	fb07 6602 	mla	r6, r7, r2, r6
9001db76:	9f03      	ldr	r7, [sp, #12]
9001db78:	0872      	lsrs	r2, r6, #1
9001db7a:	07f6      	lsls	r6, r6, #31
9001db7c:	5cba      	ldrb	r2, [r7, r2]
9001db7e:	bf54      	ite	pl
9001db80:	f002 020f 	andpl.w	r2, r2, #15
9001db84:	1112      	asrmi	r2, r2, #4
9001db86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001db8a:	b2d2      	uxtb	r2, r2
9001db8c:	2aff      	cmp	r2, #255	; 0xff
9001db8e:	d118      	bne.n	9001dbc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001db90:	f06f 0601 	mvn.w	r6, #1
9001db94:	f8d8 2000 	ldr.w	r2, [r8]
9001db98:	fb06 f705 	mul.w	r7, r6, r5
9001db9c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001dba0:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001dba4:	0956      	lsrs	r6, r2, #5
9001dba6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001dbaa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001dbae:	ea4c 0606 	orr.w	r6, ip, r6
9001dbb2:	4316      	orrs	r6, r2
9001dbb4:	53e6      	strh	r6, [r4, r7]
9001dbb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001dbb8:	3d01      	subs	r5, #1
9001dbba:	4410      	add	r0, r2
9001dbbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001dbbe:	4411      	add	r1, r2
9001dbc0:	e787      	b.n	9001dad2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001dbc2:	2a00      	cmp	r2, #0
9001dbc4:	d0f7      	beq.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dbc6:	f06f 0601 	mvn.w	r6, #1
9001dbca:	f8d8 c000 	ldr.w	ip, [r8]
9001dbce:	fa1f f982 	uxth.w	r9, r2
9001dbd2:	43d2      	mvns	r2, r2
9001dbd4:	436e      	muls	r6, r5
9001dbd6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001dbda:	b2d2      	uxtb	r2, r2
9001dbdc:	f834 e006 	ldrh.w	lr, [r4, r6]
9001dbe0:	fb1a fa09 	smulbb	sl, sl, r9
9001dbe4:	9604      	str	r6, [sp, #16]
9001dbe6:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001dbea:	ea4f 272e 	mov.w	r7, lr, asr #8
9001dbee:	fb16 f609 	smulbb	r6, r6, r9
9001dbf2:	fa5f fc8c 	uxtb.w	ip, ip
9001dbf6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001dbfa:	fb1c fc09 	smulbb	ip, ip, r9
9001dbfe:	fb07 6702 	mla	r7, r7, r2, r6
9001dc02:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001dc06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001dc0a:	b2bf      	uxth	r7, r7
9001dc0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001dc10:	fa5f fe8e 	uxtb.w	lr, lr
9001dc14:	fb06 a602 	mla	r6, r6, r2, sl
9001dc18:	fb0e cc02 	mla	ip, lr, r2, ip
9001dc1c:	1c7a      	adds	r2, r7, #1
9001dc1e:	b2b6      	uxth	r6, r6
9001dc20:	fa1f fc8c 	uxth.w	ip, ip
9001dc24:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001dc28:	9a04      	ldr	r2, [sp, #16]
9001dc2a:	f10c 0a01 	add.w	sl, ip, #1
9001dc2e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001dc32:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001dc36:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dc3a:	ea4a 0707 	orr.w	r7, sl, r7
9001dc3e:	f106 0a01 	add.w	sl, r6, #1
9001dc42:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001dc46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dc4a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dc4e:	ea47 070a 	orr.w	r7, r7, sl
9001dc52:	52a7      	strh	r7, [r4, r2]
9001dc54:	e7af      	b.n	9001dbb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001dc56:	f04f 0e00 	mov.w	lr, #0
9001dc5a:	eba3 020e 	sub.w	r2, r3, lr
9001dc5e:	2a00      	cmp	r2, #0
9001dc60:	f77f af3a 	ble.w	9001dad8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001dc64:	1402      	asrs	r2, r0, #16
9001dc66:	9e02      	ldr	r6, [sp, #8]
9001dc68:	140d      	asrs	r5, r1, #16
9001dc6a:	fb06 2505 	mla	r5, r6, r5, r2
9001dc6e:	9e03      	ldr	r6, [sp, #12]
9001dc70:	086a      	lsrs	r2, r5, #1
9001dc72:	07ed      	lsls	r5, r5, #31
9001dc74:	5cb2      	ldrb	r2, [r6, r2]
9001dc76:	bf54      	ite	pl
9001dc78:	f002 020f 	andpl.w	r2, r2, #15
9001dc7c:	1112      	asrmi	r2, r2, #4
9001dc7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001dc82:	b2d2      	uxtb	r2, r2
9001dc84:	2aff      	cmp	r2, #255	; 0xff
9001dc86:	d115      	bne.n	9001dcb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001dc88:	f8d8 5000 	ldr.w	r5, [r8]
9001dc8c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001dc90:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001dc94:	096a      	lsrs	r2, r5, #5
9001dc96:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001dc9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dc9e:	4332      	orrs	r2, r6
9001dca0:	432a      	orrs	r2, r5
9001dca2:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001dca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001dca8:	f10e 0e01 	add.w	lr, lr, #1
9001dcac:	4410      	add	r0, r2
9001dcae:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001dcb0:	4411      	add	r1, r2
9001dcb2:	e7d2      	b.n	9001dc5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001dcb4:	2a00      	cmp	r2, #0
9001dcb6:	d0f6      	beq.n	9001dca6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001dcb8:	f8d8 7000 	ldr.w	r7, [r8]
9001dcbc:	fa1f f982 	uxth.w	r9, r2
9001dcc0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001dcc4:	43d2      	mvns	r2, r2
9001dcc6:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001dcca:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001dcce:	ea4f 262c 	mov.w	r6, ip, asr #8
9001dcd2:	fb15 f509 	smulbb	r5, r5, r9
9001dcd6:	b2d2      	uxtb	r2, r2
9001dcd8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001dcdc:	b2ff      	uxtb	r7, r7
9001dcde:	fb1a fa09 	smulbb	sl, sl, r9
9001dce2:	fb06 5602 	mla	r6, r6, r2, r5
9001dce6:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001dcea:	fb17 f709 	smulbb	r7, r7, r9
9001dcee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001dcf2:	b2b6      	uxth	r6, r6
9001dcf4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001dcf8:	fa5f fc8c 	uxtb.w	ip, ip
9001dcfc:	fb05 a502 	mla	r5, r5, r2, sl
9001dd00:	fb0c 7702 	mla	r7, ip, r2, r7
9001dd04:	1c72      	adds	r2, r6, #1
9001dd06:	b2ad      	uxth	r5, r5
9001dd08:	b2bf      	uxth	r7, r7
9001dd0a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001dd0e:	f107 0a01 	add.w	sl, r7, #1
9001dd12:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001dd16:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001dd1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dd1e:	ea4a 0606 	orr.w	r6, sl, r6
9001dd22:	f105 0a01 	add.w	sl, r5, #1
9001dd26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001dd2a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dd2e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dd32:	ea46 060a 	orr.w	r6, r6, sl
9001dd36:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001dd3a:	e7b4      	b.n	9001dca6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001dd3c:	b007      	add	sp, #28
9001dd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dd42:	bf00      	nop
9001dd44:	240281fc 	.word	0x240281fc

9001dd48 <_ZN8touchgfx8LCD16bppD1Ev>:
9001dd48:	4770      	bx	lr

9001dd4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001dd4a:	4770      	bx	lr

9001dd4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001dd4c:	4770      	bx	lr

9001dd4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001dd4e:	4770      	bx	lr

9001dd50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001dd50:	4770      	bx	lr

9001dd52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dd52:	4770      	bx	lr

9001dd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dd54:	4770      	bx	lr

9001dd56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dd56:	4770      	bx	lr

9001dd58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dd58:	4770      	bx	lr

9001dd5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dd5a:	4770      	bx	lr

9001dd5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dd5c:	4770      	bx	lr

9001dd5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dd5e:	4770      	bx	lr

9001dd60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dd60:	4770      	bx	lr

9001dd62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dd62:	4770      	bx	lr

9001dd64 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dd64:	4770      	bx	lr

9001dd66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dd66:	4770      	bx	lr

9001dd68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dd68:	4770      	bx	lr

9001dd6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dd6a:	4770      	bx	lr

9001dd6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dd6c:	4770      	bx	lr

9001dd6e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dd6e:	4770      	bx	lr

9001dd70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dd70:	4770      	bx	lr

9001dd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dd72:	4770      	bx	lr

9001dd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001dd74:	4770      	bx	lr

9001dd76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dd76:	4770      	bx	lr

9001dd78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001dd78:	4770      	bx	lr

9001dd7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dd7a:	4770      	bx	lr

9001dd7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dd7c:	4770      	bx	lr

9001dd7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dd7e:	4770      	bx	lr

9001dd80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dd80:	4770      	bx	lr

9001dd82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001dd82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001dd86:	b088      	sub	sp, #32
9001dd88:	4606      	mov	r6, r0
9001dd8a:	4688      	mov	r8, r1
9001dd8c:	4691      	mov	r9, r2
9001dd8e:	ac08      	add	r4, sp, #32
9001dd90:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001dd94:	4620      	mov	r0, r4
9001dd96:	f7fd fc67 	bl	9001b668 <_ZNK8touchgfx6Bitmap7getDataEv>
9001dd9a:	6833      	ldr	r3, [r6, #0]
9001dd9c:	4605      	mov	r5, r0
9001dd9e:	4620      	mov	r0, r4
9001dda0:	699f      	ldr	r7, [r3, #24]
9001dda2:	f7fd fb75 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001dda6:	4682      	mov	sl, r0
9001dda8:	4620      	mov	r0, r4
9001ddaa:	f7fd fba5 	bl	9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001ddae:	9500      	str	r5, [sp, #0]
9001ddb0:	464b      	mov	r3, r9
9001ddb2:	4642      	mov	r2, r8
9001ddb4:	4631      	mov	r1, r6
9001ddb6:	e9cd a001 	strd	sl, r0, [sp, #4]
9001ddba:	a806      	add	r0, sp, #24
9001ddbc:	47b8      	blx	r7
9001ddbe:	4628      	mov	r0, r5
9001ddc0:	b008      	add	sp, #32
9001ddc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001ddc8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001ddc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001ddcc:	2300      	movs	r3, #0
9001ddce:	9300      	str	r3, [sp, #0]
9001ddd0:	4b3d      	ldr	r3, [pc, #244]	; (9001dec8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001ddd2:	781b      	ldrb	r3, [r3, #0]
9001ddd4:	2b00      	cmp	r3, #0
9001ddd6:	d137      	bne.n	9001de48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001ddd8:	4a3c      	ldr	r2, [pc, #240]	; (9001decc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001ddda:	f9b2 2000 	ldrsh.w	r2, [r2]
9001ddde:	f8ad 2004 	strh.w	r2, [sp, #4]
9001dde2:	2b00      	cmp	r3, #0
9001dde4:	d132      	bne.n	9001de4c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001dde6:	4b3a      	ldr	r3, [pc, #232]	; (9001ded0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001dde8:	f9b3 3000 	ldrsh.w	r3, [r3]
9001ddec:	ac02      	add	r4, sp, #8
9001ddee:	6808      	ldr	r0, [r1, #0]
9001ddf0:	f8ad 3006 	strh.w	r3, [sp, #6]
9001ddf4:	ab02      	add	r3, sp, #8
9001ddf6:	6849      	ldr	r1, [r1, #4]
9001ddf8:	4d36      	ldr	r5, [pc, #216]	; (9001ded4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001ddfa:	c303      	stmia	r3!, {r0, r1}
9001ddfc:	4669      	mov	r1, sp
9001ddfe:	4620      	mov	r0, r4
9001de00:	f7fa f8b8 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001de04:	4668      	mov	r0, sp
9001de06:	f7fa f88d 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001de0a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001de0e:	f8bd 2000 	ldrh.w	r2, [sp]
9001de12:	462f      	mov	r7, r5
9001de14:	6828      	ldr	r0, [r5, #0]
9001de16:	4413      	add	r3, r2
9001de18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001de1c:	f8ad 3008 	strh.w	r3, [sp, #8]
9001de20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001de24:	4413      	add	r3, r2
9001de26:	f8ad 300a 	strh.w	r3, [sp, #10]
9001de2a:	6803      	ldr	r3, [r0, #0]
9001de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001de2e:	4798      	blx	r3
9001de30:	f010 0f01 	tst.w	r0, #1
9001de34:	d00c      	beq.n	9001de50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001de36:	6828      	ldr	r0, [r5, #0]
9001de38:	6803      	ldr	r3, [r0, #0]
9001de3a:	e894 0006 	ldmia.w	r4, {r1, r2}
9001de3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001de40:	4798      	blx	r3
9001de42:	b004      	add	sp, #16
9001de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001de48:	4a21      	ldr	r2, [pc, #132]	; (9001ded0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001de4a:	e7c6      	b.n	9001ddda <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001de4c:	4b1f      	ldr	r3, [pc, #124]	; (9001decc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001de4e:	e7cb      	b.n	9001dde8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001de50:	6838      	ldr	r0, [r7, #0]
9001de52:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001de56:	6803      	ldr	r3, [r0, #0]
9001de58:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001de5c:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001de60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001de62:	4798      	blx	r3
9001de64:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001de68:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001de6c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001de70:	fb16 3602 	smlabb	r6, r6, r2, r3
9001de74:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001de78:	6838      	ldr	r0, [r7, #0]
9001de7a:	6803      	ldr	r3, [r0, #0]
9001de7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001de7e:	4798      	blx	r3
9001de80:	4a12      	ldr	r2, [pc, #72]	; (9001decc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001de82:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001de86:	8813      	ldrh	r3, [r2, #0]
9001de88:	4691      	mov	r9, r2
9001de8a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001de8e:	435d      	muls	r5, r3
9001de90:	fb03 1404 	mla	r4, r3, r4, r1
9001de94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001de98:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001de9c:	6838      	ldr	r0, [r7, #0]
9001de9e:	42ac      	cmp	r4, r5
9001dea0:	6803      	ldr	r3, [r0, #0]
9001dea2:	d20e      	bcs.n	9001dec2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001dea4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001dea8:	4632      	mov	r2, r6
9001deaa:	4643      	mov	r3, r8
9001deac:	4621      	mov	r1, r4
9001deae:	47d0      	blx	sl
9001deb0:	f8b9 3000 	ldrh.w	r3, [r9]
9001deb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001deb8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001debc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dec0:	e7ec      	b.n	9001de9c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001dec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001dec4:	4798      	blx	r3
9001dec6:	e7bc      	b.n	9001de42 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001dec8:	240281e4 	.word	0x240281e4
9001decc:	240281e6 	.word	0x240281e6
9001ded0:	240281e8 	.word	0x240281e8
9001ded4:	240281ec 	.word	0x240281ec

9001ded8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dedc:	b08b      	sub	sp, #44	; 0x2c
9001dede:	460f      	mov	r7, r1
9001dee0:	4616      	mov	r6, r2
9001dee2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001dee6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001deea:	f1bb 0f00 	cmp.w	fp, #0
9001deee:	d049      	beq.n	9001df84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001def0:	6810      	ldr	r0, [r2, #0]
9001def2:	ad06      	add	r5, sp, #24
9001def4:	6851      	ldr	r1, [r2, #4]
9001def6:	c503      	stmia	r5!, {r0, r1}
9001def8:	6818      	ldr	r0, [r3, #0]
9001defa:	ad08      	add	r5, sp, #32
9001defc:	6859      	ldr	r1, [r3, #4]
9001defe:	c503      	stmia	r5!, {r0, r1}
9001df00:	a806      	add	r0, sp, #24
9001df02:	f7fa f80f 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001df06:	4631      	mov	r1, r6
9001df08:	a808      	add	r0, sp, #32
9001df0a:	f7fa f833 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001df0e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001df12:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001df16:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001df1a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001df1e:	fb16 2103 	smlabb	r1, r6, r3, r2
9001df22:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001df26:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001df2a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001df2e:	4f5f      	ldr	r7, [pc, #380]	; (9001e0ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001df30:	440a      	add	r2, r1
9001df32:	6838      	ldr	r0, [r7, #0]
9001df34:	46b9      	mov	r9, r7
9001df36:	f8ad 2020 	strh.w	r2, [sp, #32]
9001df3a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001df3e:	4413      	add	r3, r2
9001df40:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001df44:	6803      	ldr	r3, [r0, #0]
9001df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001df48:	4798      	blx	r3
9001df4a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001df4e:	d01c      	beq.n	9001df8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001df50:	f010 0f04 	tst.w	r0, #4
9001df54:	d01d      	beq.n	9001df92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001df56:	f8d9 0000 	ldr.w	r0, [r9]
9001df5a:	2700      	movs	r7, #0
9001df5c:	b2ad      	uxth	r5, r5
9001df5e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001df62:	6801      	ldr	r1, [r0, #0]
9001df64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001df68:	f8cd b00c 	str.w	fp, [sp, #12]
9001df6c:	9501      	str	r5, [sp, #4]
9001df6e:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001df72:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001df76:	9402      	str	r4, [sp, #8]
9001df78:	fa1f f488 	uxth.w	r4, r8
9001df7c:	9400      	str	r4, [sp, #0]
9001df7e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001df80:	4631      	mov	r1, r6
9001df82:	47a0      	blx	r4
9001df84:	b00b      	add	sp, #44	; 0x2c
9001df86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001df8a:	b914      	cbnz	r4, 9001df92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001df8c:	f010 0f01 	tst.w	r0, #1
9001df90:	e7e0      	b.n	9001df54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001df92:	f8d9 0000 	ldr.w	r0, [r9]
9001df96:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001df9a:	6803      	ldr	r3, [r0, #0]
9001df9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001df9e:	4798      	blx	r3
9001dfa0:	4b43      	ldr	r3, [pc, #268]	; (9001e0b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001dfa2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001dfa6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001dfaa:	881a      	ldrh	r2, [r3, #0]
9001dfac:	469a      	mov	sl, r3
9001dfae:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001dfb2:	fb05 f502 	mul.w	r5, r5, r2
9001dfb6:	fb02 1404 	mla	r4, r2, r4, r1
9001dfba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001dfbe:	d059      	beq.n	9001e074 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001dfc0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001dfc4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001dfc8:	fa1f f28b 	uxth.w	r2, fp
9001dfcc:	469e      	mov	lr, r3
9001dfce:	fa1f f989 	uxth.w	r9, r9
9001dfd2:	42ac      	cmp	r4, r5
9001dfd4:	d264      	bcs.n	9001e0a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001dfd6:	eb04 0a07 	add.w	sl, r4, r7
9001dfda:	4554      	cmp	r4, sl
9001dfdc:	d23d      	bcs.n	9001e05a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001dfde:	8821      	ldrh	r1, [r4, #0]
9001dfe0:	f836 3b02 	ldrh.w	r3, [r6], #2
9001dfe4:	1208      	asrs	r0, r1, #8
9001dfe6:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001dfea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001dfee:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001dff2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001dff6:	00c9      	lsls	r1, r1, #3
9001dff8:	fb10 f009 	smulbb	r0, r0, r9
9001dffc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001e000:	b2c9      	uxtb	r1, r1
9001e002:	fb0c 0c02 	mla	ip, ip, r2, r0
9001e006:	10d8      	asrs	r0, r3, #3
9001e008:	fb1b fb09 	smulbb	fp, fp, r9
9001e00c:	00db      	lsls	r3, r3, #3
9001e00e:	fa1f fc8c 	uxth.w	ip, ip
9001e012:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e016:	fb11 f109 	smulbb	r1, r1, r9
9001e01a:	b2db      	uxtb	r3, r3
9001e01c:	fb00 b002 	mla	r0, r0, r2, fp
9001e020:	f10c 0b01 	add.w	fp, ip, #1
9001e024:	fb03 1302 	mla	r3, r3, r2, r1
9001e028:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001e02c:	b29b      	uxth	r3, r3
9001e02e:	b280      	uxth	r0, r0
9001e030:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001e034:	f103 0c01 	add.w	ip, r3, #1
9001e038:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001e03c:	1c43      	adds	r3, r0, #1
9001e03e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e042:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001e046:	0940      	lsrs	r0, r0, #5
9001e048:	ea4c 0c0b 	orr.w	ip, ip, fp
9001e04c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001e050:	ea4c 0c00 	orr.w	ip, ip, r0
9001e054:	f824 cb02 	strh.w	ip, [r4], #2
9001e058:	e7bf      	b.n	9001dfda <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001e05a:	f8be 3000 	ldrh.w	r3, [lr]
9001e05e:	eba3 0308 	sub.w	r3, r3, r8
9001e062:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001e066:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001e06a:	eba3 0308 	sub.w	r3, r3, r8
9001e06e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001e072:	e7ae      	b.n	9001dfd2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001e074:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001e078:	f8d9 0000 	ldr.w	r0, [r9]
9001e07c:	42ac      	cmp	r4, r5
9001e07e:	6803      	ldr	r3, [r0, #0]
9001e080:	d20e      	bcs.n	9001e0a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001e082:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001e086:	4632      	mov	r2, r6
9001e088:	463b      	mov	r3, r7
9001e08a:	4621      	mov	r1, r4
9001e08c:	47c0      	blx	r8
9001e08e:	f8ba 3000 	ldrh.w	r3, [sl]
9001e092:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001e096:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001e09a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001e09e:	e7eb      	b.n	9001e078 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001e0a0:	4b02      	ldr	r3, [pc, #8]	; (9001e0ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001e0a2:	6818      	ldr	r0, [r3, #0]
9001e0a4:	6803      	ldr	r3, [r0, #0]
9001e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e0a8:	4798      	blx	r3
9001e0aa:	e76b      	b.n	9001df84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001e0ac:	240281ec 	.word	0x240281ec
9001e0b0:	240281e6 	.word	0x240281e6

9001e0b4 <_ZN8touchgfx8LCD16bppD0Ev>:
9001e0b4:	b510      	push	{r4, lr}
9001e0b6:	4604      	mov	r4, r0
9001e0b8:	2178      	movs	r1, #120	; 0x78
9001e0ba:	f009 faec 	bl	90027696 <_ZdlPvj>
9001e0be:	4620      	mov	r0, r4
9001e0c0:	bd10      	pop	{r4, pc}

9001e0c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e0c2:	b510      	push	{r4, lr}
9001e0c4:	4604      	mov	r4, r0
9001e0c6:	2104      	movs	r1, #4
9001e0c8:	f009 fae5 	bl	90027696 <_ZdlPvj>
9001e0cc:	4620      	mov	r0, r4
9001e0ce:	bd10      	pop	{r4, pc}

9001e0d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001e0d0:	b510      	push	{r4, lr}
9001e0d2:	4604      	mov	r4, r0
9001e0d4:	2104      	movs	r1, #4
9001e0d6:	f009 fade 	bl	90027696 <_ZdlPvj>
9001e0da:	4620      	mov	r0, r4
9001e0dc:	bd10      	pop	{r4, pc}

9001e0de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e0de:	b510      	push	{r4, lr}
9001e0e0:	4604      	mov	r4, r0
9001e0e2:	2104      	movs	r1, #4
9001e0e4:	f009 fad7 	bl	90027696 <_ZdlPvj>
9001e0e8:	4620      	mov	r0, r4
9001e0ea:	bd10      	pop	{r4, pc}

9001e0ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001e0ec:	b510      	push	{r4, lr}
9001e0ee:	4604      	mov	r4, r0
9001e0f0:	2104      	movs	r1, #4
9001e0f2:	f009 fad0 	bl	90027696 <_ZdlPvj>
9001e0f6:	4620      	mov	r0, r4
9001e0f8:	bd10      	pop	{r4, pc}

9001e0fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e0fa:	b510      	push	{r4, lr}
9001e0fc:	4604      	mov	r4, r0
9001e0fe:	2104      	movs	r1, #4
9001e100:	f009 fac9 	bl	90027696 <_ZdlPvj>
9001e104:	4620      	mov	r0, r4
9001e106:	bd10      	pop	{r4, pc}

9001e108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001e108:	b510      	push	{r4, lr}
9001e10a:	4604      	mov	r4, r0
9001e10c:	2104      	movs	r1, #4
9001e10e:	f009 fac2 	bl	90027696 <_ZdlPvj>
9001e112:	4620      	mov	r0, r4
9001e114:	bd10      	pop	{r4, pc}

9001e116 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e116:	b510      	push	{r4, lr}
9001e118:	4604      	mov	r4, r0
9001e11a:	2104      	movs	r1, #4
9001e11c:	f009 fabb 	bl	90027696 <_ZdlPvj>
9001e120:	4620      	mov	r0, r4
9001e122:	bd10      	pop	{r4, pc}

9001e124 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001e124:	b510      	push	{r4, lr}
9001e126:	4604      	mov	r4, r0
9001e128:	2104      	movs	r1, #4
9001e12a:	f009 fab4 	bl	90027696 <_ZdlPvj>
9001e12e:	4620      	mov	r0, r4
9001e130:	bd10      	pop	{r4, pc}

9001e132 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e132:	b510      	push	{r4, lr}
9001e134:	4604      	mov	r4, r0
9001e136:	2104      	movs	r1, #4
9001e138:	f009 faad 	bl	90027696 <_ZdlPvj>
9001e13c:	4620      	mov	r0, r4
9001e13e:	bd10      	pop	{r4, pc}

9001e140 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e140:	b510      	push	{r4, lr}
9001e142:	4604      	mov	r4, r0
9001e144:	2104      	movs	r1, #4
9001e146:	f009 faa6 	bl	90027696 <_ZdlPvj>
9001e14a:	4620      	mov	r0, r4
9001e14c:	bd10      	pop	{r4, pc}

9001e14e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e14e:	b510      	push	{r4, lr}
9001e150:	4604      	mov	r4, r0
9001e152:	2104      	movs	r1, #4
9001e154:	f009 fa9f 	bl	90027696 <_ZdlPvj>
9001e158:	4620      	mov	r0, r4
9001e15a:	bd10      	pop	{r4, pc}

9001e15c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e15c:	b510      	push	{r4, lr}
9001e15e:	4604      	mov	r4, r0
9001e160:	2104      	movs	r1, #4
9001e162:	f009 fa98 	bl	90027696 <_ZdlPvj>
9001e166:	4620      	mov	r0, r4
9001e168:	bd10      	pop	{r4, pc}

9001e16a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e16a:	b510      	push	{r4, lr}
9001e16c:	4604      	mov	r4, r0
9001e16e:	2104      	movs	r1, #4
9001e170:	f009 fa91 	bl	90027696 <_ZdlPvj>
9001e174:	4620      	mov	r0, r4
9001e176:	bd10      	pop	{r4, pc}

9001e178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001e178:	b510      	push	{r4, lr}
9001e17a:	4604      	mov	r4, r0
9001e17c:	2104      	movs	r1, #4
9001e17e:	f009 fa8a 	bl	90027696 <_ZdlPvj>
9001e182:	4620      	mov	r0, r4
9001e184:	bd10      	pop	{r4, pc}

9001e186 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e186:	b510      	push	{r4, lr}
9001e188:	4604      	mov	r4, r0
9001e18a:	2104      	movs	r1, #4
9001e18c:	f009 fa83 	bl	90027696 <_ZdlPvj>
9001e190:	4620      	mov	r0, r4
9001e192:	bd10      	pop	{r4, pc}

9001e194 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e194:	b510      	push	{r4, lr}
9001e196:	4604      	mov	r4, r0
9001e198:	2104      	movs	r1, #4
9001e19a:	f009 fa7c 	bl	90027696 <_ZdlPvj>
9001e19e:	4620      	mov	r0, r4
9001e1a0:	bd10      	pop	{r4, pc}

9001e1a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e1a2:	b510      	push	{r4, lr}
9001e1a4:	4604      	mov	r4, r0
9001e1a6:	2104      	movs	r1, #4
9001e1a8:	f009 fa75 	bl	90027696 <_ZdlPvj>
9001e1ac:	4620      	mov	r0, r4
9001e1ae:	bd10      	pop	{r4, pc}

9001e1b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001e1b0:	b510      	push	{r4, lr}
9001e1b2:	4604      	mov	r4, r0
9001e1b4:	2104      	movs	r1, #4
9001e1b6:	f009 fa6e 	bl	90027696 <_ZdlPvj>
9001e1ba:	4620      	mov	r0, r4
9001e1bc:	bd10      	pop	{r4, pc}

9001e1be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e1be:	b510      	push	{r4, lr}
9001e1c0:	4604      	mov	r4, r0
9001e1c2:	2104      	movs	r1, #4
9001e1c4:	f009 fa67 	bl	90027696 <_ZdlPvj>
9001e1c8:	4620      	mov	r0, r4
9001e1ca:	bd10      	pop	{r4, pc}

9001e1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e1cc:	b510      	push	{r4, lr}
9001e1ce:	4604      	mov	r4, r0
9001e1d0:	2104      	movs	r1, #4
9001e1d2:	f009 fa60 	bl	90027696 <_ZdlPvj>
9001e1d6:	4620      	mov	r0, r4
9001e1d8:	bd10      	pop	{r4, pc}

9001e1da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e1da:	b510      	push	{r4, lr}
9001e1dc:	4604      	mov	r4, r0
9001e1de:	2104      	movs	r1, #4
9001e1e0:	f009 fa59 	bl	90027696 <_ZdlPvj>
9001e1e4:	4620      	mov	r0, r4
9001e1e6:	bd10      	pop	{r4, pc}

9001e1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e1e8:	b510      	push	{r4, lr}
9001e1ea:	4604      	mov	r4, r0
9001e1ec:	2104      	movs	r1, #4
9001e1ee:	f009 fa52 	bl	90027696 <_ZdlPvj>
9001e1f2:	4620      	mov	r0, r4
9001e1f4:	bd10      	pop	{r4, pc}

9001e1f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e1f6:	b510      	push	{r4, lr}
9001e1f8:	4604      	mov	r4, r0
9001e1fa:	2104      	movs	r1, #4
9001e1fc:	f009 fa4b 	bl	90027696 <_ZdlPvj>
9001e200:	4620      	mov	r0, r4
9001e202:	bd10      	pop	{r4, pc}

9001e204 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e204:	b510      	push	{r4, lr}
9001e206:	4604      	mov	r4, r0
9001e208:	2104      	movs	r1, #4
9001e20a:	f009 fa44 	bl	90027696 <_ZdlPvj>
9001e20e:	4620      	mov	r0, r4
9001e210:	bd10      	pop	{r4, pc}

9001e212 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001e212:	b510      	push	{r4, lr}
9001e214:	4604      	mov	r4, r0
9001e216:	2104      	movs	r1, #4
9001e218:	f009 fa3d 	bl	90027696 <_ZdlPvj>
9001e21c:	4620      	mov	r0, r4
9001e21e:	bd10      	pop	{r4, pc}

9001e220 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001e220:	b510      	push	{r4, lr}
9001e222:	4604      	mov	r4, r0
9001e224:	2104      	movs	r1, #4
9001e226:	f009 fa36 	bl	90027696 <_ZdlPvj>
9001e22a:	4620      	mov	r0, r4
9001e22c:	bd10      	pop	{r4, pc}

9001e22e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001e22e:	b510      	push	{r4, lr}
9001e230:	4604      	mov	r4, r0
9001e232:	2104      	movs	r1, #4
9001e234:	f009 fa2f 	bl	90027696 <_ZdlPvj>
9001e238:	4620      	mov	r0, r4
9001e23a:	bd10      	pop	{r4, pc}

9001e23c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001e23c:	b510      	push	{r4, lr}
9001e23e:	4604      	mov	r4, r0
9001e240:	2104      	movs	r1, #4
9001e242:	f009 fa28 	bl	90027696 <_ZdlPvj>
9001e246:	4620      	mov	r0, r4
9001e248:	bd10      	pop	{r4, pc}
	...

9001e24c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001e24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e250:	b091      	sub	sp, #68	; 0x44
9001e252:	469b      	mov	fp, r3
9001e254:	4616      	mov	r6, r2
9001e256:	f9b3 2000 	ldrsh.w	r2, [r3]
9001e25a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001e25e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001e262:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001e266:	4604      	mov	r4, r0
9001e268:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001e26c:	4640      	mov	r0, r8
9001e26e:	460d      	mov	r5, r1
9001e270:	4659      	mov	r1, fp
9001e272:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e276:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e27a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001e27e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001e282:	f7f4 fde7 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001e286:	4631      	mov	r1, r6
9001e288:	4640      	mov	r0, r8
9001e28a:	f7f4 fde3 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001e28e:	4b74      	ldr	r3, [pc, #464]	; (9001e460 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001e290:	8818      	ldrh	r0, [r3, #0]
9001e292:	4b74      	ldr	r3, [pc, #464]	; (9001e464 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001e294:	b202      	sxth	r2, r0
9001e296:	8819      	ldrh	r1, [r3, #0]
9001e298:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e29c:	b20e      	sxth	r6, r1
9001e29e:	2b00      	cmp	r3, #0
9001e2a0:	da07      	bge.n	9001e2b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001e2a2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001e2a6:	4463      	add	r3, ip
9001e2a8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001e2ac:	2300      	movs	r3, #0
9001e2ae:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001e2b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e2b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e2ba:	1ad2      	subs	r2, r2, r3
9001e2bc:	4594      	cmp	ip, r2
9001e2be:	bfc4      	itt	gt
9001e2c0:	1ac2      	subgt	r2, r0, r3
9001e2c2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001e2c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e2ca:	2a00      	cmp	r2, #0
9001e2cc:	da07      	bge.n	9001e2de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001e2ce:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001e2d2:	4462      	add	r2, ip
9001e2d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001e2d8:	2200      	movs	r2, #0
9001e2da:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001e2de:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001e2e2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e2e6:	eba6 060a 	sub.w	r6, r6, sl
9001e2ea:	42b2      	cmp	r2, r6
9001e2ec:	bfc4      	itt	gt
9001e2ee:	eba1 020a 	subgt.w	r2, r1, sl
9001e2f2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001e2f6:	4a5c      	ldr	r2, [pc, #368]	; (9001e468 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001e2f8:	7812      	ldrb	r2, [r2, #0]
9001e2fa:	b9a2      	cbnz	r2, 9001e326 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001e2fc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001e300:	4286      	cmp	r6, r0
9001e302:	4640      	mov	r0, r8
9001e304:	9303      	str	r3, [sp, #12]
9001e306:	bf14      	ite	ne
9001e308:	2600      	movne	r6, #0
9001e30a:	2601      	moveq	r6, #1
9001e30c:	f7f4 fde5 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001e310:	9b03      	ldr	r3, [sp, #12]
9001e312:	b160      	cbz	r0, 9001e32e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001e314:	2300      	movs	r3, #0
9001e316:	8023      	strh	r3, [r4, #0]
9001e318:	8063      	strh	r3, [r4, #2]
9001e31a:	80a3      	strh	r3, [r4, #4]
9001e31c:	4620      	mov	r0, r4
9001e31e:	80e3      	strh	r3, [r4, #6]
9001e320:	b011      	add	sp, #68	; 0x44
9001e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e326:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e32a:	428e      	cmp	r6, r1
9001e32c:	e7e9      	b.n	9001e302 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001e32e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001e332:	a90e      	add	r1, sp, #56	; 0x38
9001e334:	900e      	str	r0, [sp, #56]	; 0x38
9001e336:	a80c      	add	r0, sp, #48	; 0x30
9001e338:	9205      	str	r2, [sp, #20]
9001e33a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e33e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001e342:	9206      	str	r2, [sp, #24]
9001e344:	f8bb 2000 	ldrh.w	r2, [fp]
9001e348:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001e34c:	1a9b      	subs	r3, r3, r2
9001e34e:	b21b      	sxth	r3, r3
9001e350:	9303      	str	r3, [sp, #12]
9001e352:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001e356:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001e470 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e35a:	ebaa 0a03 	sub.w	sl, sl, r3
9001e35e:	fa0f f38a 	sxth.w	r3, sl
9001e362:	9304      	str	r3, [sp, #16]
9001e364:	9b03      	ldr	r3, [sp, #12]
9001e366:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001e36a:	9b04      	ldr	r3, [sp, #16]
9001e36c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e370:	9b05      	ldr	r3, [sp, #20]
9001e372:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001e376:	9b06      	ldr	r3, [sp, #24]
9001e378:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001e37c:	f7f9 fdfa 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e380:	4640      	mov	r0, r8
9001e382:	f7f9 fdcf 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e386:	a80e      	add	r0, sp, #56	; 0x38
9001e388:	f7f9 fdcc 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e38c:	4b37      	ldr	r3, [pc, #220]	; (9001e46c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001e38e:	4628      	mov	r0, r5
9001e390:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001e394:	881b      	ldrh	r3, [r3, #0]
9001e396:	9307      	str	r3, [sp, #28]
9001e398:	682b      	ldr	r3, [r5, #0]
9001e39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e39c:	4798      	blx	r3
9001e39e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001e3a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001e3a6:	4681      	mov	r9, r0
9001e3a8:	f8db 0000 	ldr.w	r0, [fp]
9001e3ac:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001e3b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001e3b2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001e3b6:	6803      	ldr	r3, [r0, #0]
9001e3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e3ba:	4798      	blx	r3
9001e3bc:	4607      	mov	r7, r0
9001e3be:	f8db 0000 	ldr.w	r0, [fp]
9001e3c2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001e3c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e3ca:	6803      	ldr	r3, [r0, #0]
9001e3cc:	9109      	str	r1, [sp, #36]	; 0x24
9001e3ce:	9208      	str	r2, [sp, #32]
9001e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e3d2:	4798      	blx	r3
9001e3d4:	f010 0f01 	tst.w	r0, #1
9001e3d8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001e3dc:	d012      	beq.n	9001e404 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001e3de:	f8db 0000 	ldr.w	r0, [fp]
9001e3e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001e3e6:	6803      	ldr	r3, [r0, #0]
9001e3e8:	9200      	str	r2, [sp, #0]
9001e3ea:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001e3ec:	462b      	mov	r3, r5
9001e3ee:	e898 0006 	ldmia.w	r8, {r1, r2}
9001e3f2:	47b0      	blx	r6
9001e3f4:	9b03      	ldr	r3, [sp, #12]
9001e3f6:	8023      	strh	r3, [r4, #0]
9001e3f8:	9b04      	ldr	r3, [sp, #16]
9001e3fa:	8063      	strh	r3, [r4, #2]
9001e3fc:	9b05      	ldr	r3, [sp, #20]
9001e3fe:	80a3      	strh	r3, [r4, #4]
9001e400:	9b06      	ldr	r3, [sp, #24]
9001e402:	e78b      	b.n	9001e31c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001e404:	fb09 f202 	mul.w	r2, r9, r2
9001e408:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001e40c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001e410:	440f      	add	r7, r1
9001e412:	b166      	cbz	r6, 9001e42e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e414:	9a07      	ldr	r2, [sp, #28]
9001e416:	4592      	cmp	sl, r2
9001e418:	d109      	bne.n	9001e42e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e41a:	f8db 0000 	ldr.w	r0, [fp]
9001e41e:	fb09 f303 	mul.w	r3, r9, r3
9001e422:	4629      	mov	r1, r5
9001e424:	6802      	ldr	r2, [r0, #0]
9001e426:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001e428:	463a      	mov	r2, r7
9001e42a:	47b0      	blx	r6
9001e42c:	e7e2      	b.n	9001e3f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e42e:	fb0a f303 	mul.w	r3, sl, r3
9001e432:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001e436:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001e470 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e43a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001e43e:	4545      	cmp	r5, r8
9001e440:	d2d8      	bcs.n	9001e3f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e442:	f8db 0000 	ldr.w	r0, [fp]
9001e446:	4629      	mov	r1, r5
9001e448:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001e44c:	4435      	add	r5, r6
9001e44e:	6802      	ldr	r2, [r0, #0]
9001e450:	005b      	lsls	r3, r3, #1
9001e452:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001e456:	463a      	mov	r2, r7
9001e458:	47d0      	blx	sl
9001e45a:	444f      	add	r7, r9
9001e45c:	e7ef      	b.n	9001e43e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001e45e:	bf00      	nop
9001e460:	240281e0 	.word	0x240281e0
9001e464:	240281e2 	.word	0x240281e2
9001e468:	240281e4 	.word	0x240281e4
9001e46c:	240281e6 	.word	0x240281e6
9001e470:	240281ec 	.word	0x240281ec

9001e474 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001e474:	b5f0      	push	{r4, r5, r6, r7, lr}
9001e476:	4606      	mov	r6, r0
9001e478:	b087      	sub	sp, #28
9001e47a:	460c      	mov	r4, r1
9001e47c:	4617      	mov	r7, r2
9001e47e:	461d      	mov	r5, r3
9001e480:	b333      	cbz	r3, 9001e4d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e482:	4608      	mov	r0, r1
9001e484:	f7f4 fd29 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001e488:	bb10      	cbnz	r0, 9001e4d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e48a:	6820      	ldr	r0, [r4, #0]
9001e48c:	ab04      	add	r3, sp, #16
9001e48e:	6861      	ldr	r1, [r4, #4]
9001e490:	4c1b      	ldr	r4, [pc, #108]	; (9001e500 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001e492:	c303      	stmia	r3!, {r0, r1}
9001e494:	a804      	add	r0, sp, #16
9001e496:	f7f9 fd45 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e49a:	6820      	ldr	r0, [r4, #0]
9001e49c:	6803      	ldr	r3, [r0, #0]
9001e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e4a0:	4798      	blx	r3
9001e4a2:	2dff      	cmp	r5, #255	; 0xff
9001e4a4:	d016      	beq.n	9001e4d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001e4a6:	f010 0f08 	tst.w	r0, #8
9001e4aa:	6820      	ldr	r0, [r4, #0]
9001e4ac:	d015      	beq.n	9001e4da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001e4ae:	2400      	movs	r4, #0
9001e4b0:	6801      	ldr	r1, [r0, #0]
9001e4b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001e4b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001e4ba:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001e4be:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001e4c2:	9401      	str	r4, [sp, #4]
9001e4c4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001e4c8:	9400      	str	r4, [sp, #0]
9001e4ca:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001e4cc:	4639      	mov	r1, r7
9001e4ce:	47a0      	blx	r4
9001e4d0:	b007      	add	sp, #28
9001e4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001e4d4:	f010 0f02 	tst.w	r0, #2
9001e4d8:	e7e7      	b.n	9001e4aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001e4da:	6803      	ldr	r3, [r0, #0]
9001e4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e4de:	4798      	blx	r3
9001e4e0:	4b08      	ldr	r3, [pc, #32]	; (9001e504 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001e4e2:	4601      	mov	r1, r0
9001e4e4:	4630      	mov	r0, r6
9001e4e6:	881a      	ldrh	r2, [r3, #0]
9001e4e8:	6833      	ldr	r3, [r6, #0]
9001e4ea:	e9cd 7500 	strd	r7, r5, [sp]
9001e4ee:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001e4f0:	ab04      	add	r3, sp, #16
9001e4f2:	47a8      	blx	r5
9001e4f4:	6820      	ldr	r0, [r4, #0]
9001e4f6:	6803      	ldr	r3, [r0, #0]
9001e4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e4fa:	4798      	blx	r3
9001e4fc:	e7e8      	b.n	9001e4d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e4fe:	bf00      	nop
9001e500:	240281ec 	.word	0x240281ec
9001e504:	240281e6 	.word	0x240281e6

9001e508 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001e508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e50c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001e510:	4688      	mov	r8, r1
9001e512:	4614      	mov	r4, r2
9001e514:	461d      	mov	r5, r3
9001e516:	9e08      	ldr	r6, [sp, #32]
9001e518:	2f00      	cmp	r7, #0
9001e51a:	f000 80ab 	beq.w	9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e51e:	4618      	mov	r0, r3
9001e520:	f7f4 fcdb 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001e524:	2800      	cmp	r0, #0
9001e526:	f040 80a5 	bne.w	9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e52a:	f9b5 1000 	ldrsh.w	r1, [r5]
9001e52e:	2fff      	cmp	r7, #255	; 0xff
9001e530:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001e534:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001e538:	fb04 1303 	mla	r3, r4, r3, r1
9001e53c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001e540:	eba4 0200 	sub.w	r2, r4, r0
9001e544:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001e548:	fb04 f505 	mul.w	r5, r4, r5
9001e54c:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001e550:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001e554:	d04a      	beq.n	9001e5ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001e556:	b2bc      	uxth	r4, r7
9001e558:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001e55c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001e560:	fa5f f788 	uxtb.w	r7, r8
9001e564:	b2f3      	uxtb	r3, r6
9001e566:	0040      	lsls	r0, r0, #1
9001e568:	fb0e fe04 	mul.w	lr, lr, r4
9001e56c:	4367      	muls	r7, r4
9001e56e:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001e572:	4363      	muls	r3, r4
9001e574:	fa1f fc8c 	uxth.w	ip, ip
9001e578:	42a9      	cmp	r1, r5
9001e57a:	d27b      	bcs.n	9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e57c:	eb01 0900 	add.w	r9, r1, r0
9001e580:	4549      	cmp	r1, r9
9001e582:	d231      	bcs.n	9001e5e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001e584:	880a      	ldrh	r2, [r1, #0]
9001e586:	1214      	asrs	r4, r2, #8
9001e588:	10d6      	asrs	r6, r2, #3
9001e58a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001e58e:	00d2      	lsls	r2, r2, #3
9001e590:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e594:	b2d2      	uxtb	r2, r2
9001e596:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001e59a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e59e:	fb14 f40c 	smulbb	r4, r4, ip
9001e5a2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001e5a6:	fb12 f20c 	smulbb	r2, r2, ip
9001e5aa:	fb16 f60c 	smulbb	r6, r6, ip
9001e5ae:	4474      	add	r4, lr
9001e5b0:	441a      	add	r2, r3
9001e5b2:	b2a4      	uxth	r4, r4
9001e5b4:	443e      	add	r6, r7
9001e5b6:	b292      	uxth	r2, r2
9001e5b8:	f104 0a01 	add.w	sl, r4, #1
9001e5bc:	b2b6      	uxth	r6, r6
9001e5be:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001e5c2:	f102 0a01 	add.w	sl, r2, #1
9001e5c6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001e5ca:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001e5ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e5d2:	4322      	orrs	r2, r4
9001e5d4:	1c74      	adds	r4, r6, #1
9001e5d6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001e5da:	0976      	lsrs	r6, r6, #5
9001e5dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e5e0:	4332      	orrs	r2, r6
9001e5e2:	f821 2b02 	strh.w	r2, [r1], #2
9001e5e6:	e7cb      	b.n	9001e580 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001e5e8:	4441      	add	r1, r8
9001e5ea:	e7c5      	b.n	9001e578 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001e5ec:	0973      	lsrs	r3, r6, #5
9001e5ee:	4f22      	ldr	r7, [pc, #136]	; (9001e678 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001e5f0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001e5f4:	ea08 0707 	and.w	r7, r8, r7
9001e5f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e5fc:	433b      	orrs	r3, r7
9001e5fe:	07e7      	lsls	r7, r4, #31
9001e600:	ea43 0306 	orr.w	r3, r3, r6
9001e604:	b29b      	uxth	r3, r3
9001e606:	d50b      	bpl.n	9001e620 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001e608:	0040      	lsls	r0, r0, #1
9001e60a:	0052      	lsls	r2, r2, #1
9001e60c:	42a9      	cmp	r1, r5
9001e60e:	d231      	bcs.n	9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e610:	180c      	adds	r4, r1, r0
9001e612:	42a1      	cmp	r1, r4
9001e614:	d202      	bcs.n	9001e61c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001e616:	f821 3b02 	strh.w	r3, [r1], #2
9001e61a:	e7fa      	b.n	9001e612 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001e61c:	4411      	add	r1, r2
9001e61e:	e7f5      	b.n	9001e60c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001e620:	078e      	lsls	r6, r1, #30
9001e622:	d008      	beq.n	9001e636 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001e624:	0066      	lsls	r6, r4, #1
9001e626:	460a      	mov	r2, r1
9001e628:	42aa      	cmp	r2, r5
9001e62a:	d202      	bcs.n	9001e632 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001e62c:	8013      	strh	r3, [r2, #0]
9001e62e:	4432      	add	r2, r6
9001e630:	e7fa      	b.n	9001e628 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001e632:	3102      	adds	r1, #2
9001e634:	3801      	subs	r0, #1
9001e636:	07c2      	lsls	r2, r0, #31
9001e638:	d50b      	bpl.n	9001e652 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001e63a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001e63e:	0066      	lsls	r6, r4, #1
9001e640:	3a01      	subs	r2, #1
9001e642:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001e646:	42aa      	cmp	r2, r5
9001e648:	d202      	bcs.n	9001e650 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001e64a:	8013      	strh	r3, [r2, #0]
9001e64c:	4432      	add	r2, r6
9001e64e:	e7fa      	b.n	9001e646 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001e650:	3801      	subs	r0, #1
9001e652:	b178      	cbz	r0, 9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e654:	1040      	asrs	r0, r0, #1
9001e656:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001e65a:	0080      	lsls	r0, r0, #2
9001e65c:	0064      	lsls	r4, r4, #1
9001e65e:	42a9      	cmp	r1, r5
9001e660:	d208      	bcs.n	9001e674 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e662:	180e      	adds	r6, r1, r0
9001e664:	460a      	mov	r2, r1
9001e666:	42b2      	cmp	r2, r6
9001e668:	d202      	bcs.n	9001e670 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001e66a:	f842 3b04 	str.w	r3, [r2], #4
9001e66e:	e7fa      	b.n	9001e666 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001e670:	4421      	add	r1, r4
9001e672:	e7f4      	b.n	9001e65e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001e674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e678:	00fff800 	.word	0x00fff800

9001e67c <_ZN8touchgfx8LCD16bppC1Ev>:
9001e67c:	2200      	movs	r2, #0
9001e67e:	4910      	ldr	r1, [pc, #64]	; (9001e6c0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001e680:	6042      	str	r2, [r0, #4]
9001e682:	6001      	str	r1, [r0, #0]
9001e684:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001e688:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001e68c:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001e690:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001e694:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001e698:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001e69c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001e6a0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001e6a4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001e6a8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001e6ac:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001e6b0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001e6b4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001e6b8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001e6bc:	4770      	bx	lr
9001e6be:	bf00      	nop
9001e6c0:	9002c768 	.word	0x9002c768

9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e6c8:	b08d      	sub	sp, #52	; 0x34
9001e6ca:	460d      	mov	r5, r1
9001e6cc:	4604      	mov	r4, r0
9001e6ce:	4699      	mov	r9, r3
9001e6d0:	6808      	ldr	r0, [r1, #0]
9001e6d2:	ab08      	add	r3, sp, #32
9001e6d4:	6849      	ldr	r1, [r1, #4]
9001e6d6:	c303      	stmia	r3!, {r0, r1}
9001e6d8:	6810      	ldr	r0, [r2, #0]
9001e6da:	ab0a      	add	r3, sp, #40	; 0x28
9001e6dc:	6851      	ldr	r1, [r2, #4]
9001e6de:	c303      	stmia	r3!, {r0, r1}
9001e6e0:	a808      	add	r0, sp, #32
9001e6e2:	f7f9 fc1f 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e6e6:	4629      	mov	r1, r5
9001e6e8:	a80a      	add	r0, sp, #40	; 0x28
9001e6ea:	4d67      	ldr	r5, [pc, #412]	; (9001e888 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e6ec:	f7f9 fc42 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e6f0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001e6f4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001e6f8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001e6fc:	6828      	ldr	r0, [r5, #0]
9001e6fe:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e702:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001e706:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e70a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e70e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001e712:	440a      	add	r2, r1
9001e714:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e718:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001e71c:	4413      	add	r3, r2
9001e71e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e722:	6803      	ldr	r3, [r0, #0]
9001e724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e726:	4798      	blx	r3
9001e728:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e72c:	d119      	bne.n	9001e762 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001e72e:	f010 0f20 	tst.w	r0, #32
9001e732:	6828      	ldr	r0, [r5, #0]
9001e734:	d018      	beq.n	9001e768 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001e736:	2500      	movs	r5, #0
9001e738:	6801      	ldr	r1, [r0, #0]
9001e73a:	b2b6      	uxth	r6, r6
9001e73c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001e740:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001e744:	9601      	str	r6, [sp, #4]
9001e746:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001e74a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001e74e:	9502      	str	r5, [sp, #8]
9001e750:	fa1f f588 	uxth.w	r5, r8
9001e754:	9500      	str	r5, [sp, #0]
9001e756:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001e758:	4621      	mov	r1, r4
9001e75a:	47a8      	blx	r5
9001e75c:	b00d      	add	sp, #52	; 0x34
9001e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e762:	f010 0f40 	tst.w	r0, #64	; 0x40
9001e766:	e7e4      	b.n	9001e732 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001e768:	6803      	ldr	r3, [r0, #0]
9001e76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e76c:	4798      	blx	r3
9001e76e:	4947      	ldr	r1, [pc, #284]	; (9001e88c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001e770:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e774:	880b      	ldrh	r3, [r1, #0]
9001e776:	468a      	mov	sl, r1
9001e778:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001e77c:	fb03 5202 	mla	r2, r3, r2, r5
9001e780:	4373      	muls	r3, r6
9001e782:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e786:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e78a:	9307      	str	r3, [sp, #28]
9001e78c:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001e790:	9306      	str	r3, [sp, #24]
9001e792:	9b07      	ldr	r3, [sp, #28]
9001e794:	4298      	cmp	r0, r3
9001e796:	d270      	bcs.n	9001e87a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001e798:	9b06      	ldr	r3, [sp, #24]
9001e79a:	4621      	mov	r1, r4
9001e79c:	eb00 0b03 	add.w	fp, r0, r3
9001e7a0:	4558      	cmp	r0, fp
9001e7a2:	d25d      	bcs.n	9001e860 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001e7a4:	f851 4b04 	ldr.w	r4, [r1], #4
9001e7a8:	0e23      	lsrs	r3, r4, #24
9001e7aa:	d014      	beq.n	9001e7d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e7ac:	2bff      	cmp	r3, #255	; 0xff
9001e7ae:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001e7b2:	d112      	bne.n	9001e7da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e7b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e7b8:	d10f      	bne.n	9001e7da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e7ba:	0963      	lsrs	r3, r4, #5
9001e7bc:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001e7c0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e7c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e7c8:	f02c 0c07 	bic.w	ip, ip, #7
9001e7cc:	ea43 0c0c 	orr.w	ip, r3, ip
9001e7d0:	ea4c 0404 	orr.w	r4, ip, r4
9001e7d4:	8004      	strh	r4, [r0, #0]
9001e7d6:	3002      	adds	r0, #2
9001e7d8:	e7e2      	b.n	9001e7a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001e7da:	fb09 f303 	mul.w	r3, r9, r3
9001e7de:	8807      	ldrh	r7, [r0, #0]
9001e7e0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001e7e4:	fa5f fc8c 	uxtb.w	ip, ip
9001e7e8:	1c5a      	adds	r2, r3, #1
9001e7ea:	123e      	asrs	r6, r7, #8
9001e7ec:	10fd      	asrs	r5, r7, #3
9001e7ee:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001e7f2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e7f6:	00ff      	lsls	r7, r7, #3
9001e7f8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e7fc:	1212      	asrs	r2, r2, #8
9001e7fe:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e802:	b293      	uxth	r3, r2
9001e804:	43d2      	mvns	r2, r2
9001e806:	b2ff      	uxtb	r7, r7
9001e808:	fb1e fe03 	smulbb	lr, lr, r3
9001e80c:	b2d2      	uxtb	r2, r2
9001e80e:	fb1c fc03 	smulbb	ip, ip, r3
9001e812:	b2e4      	uxtb	r4, r4
9001e814:	fb06 e602 	mla	r6, r6, r2, lr
9001e818:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e81c:	fb14 f403 	smulbb	r4, r4, r3
9001e820:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001e824:	b2b6      	uxth	r6, r6
9001e826:	fb05 c502 	mla	r5, r5, r2, ip
9001e82a:	fb07 4702 	mla	r7, r7, r2, r4
9001e82e:	f106 0e01 	add.w	lr, r6, #1
9001e832:	b2ad      	uxth	r5, r5
9001e834:	b2bf      	uxth	r7, r7
9001e836:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001e83a:	f105 0c01 	add.w	ip, r5, #1
9001e83e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001e842:	1c7e      	adds	r6, r7, #1
9001e844:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e848:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001e84c:	096d      	lsrs	r5, r5, #5
9001e84e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e852:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e856:	ea46 060e 	orr.w	r6, r6, lr
9001e85a:	432e      	orrs	r6, r5
9001e85c:	8006      	strh	r6, [r0, #0]
9001e85e:	e7ba      	b.n	9001e7d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e860:	f8ba 3000 	ldrh.w	r3, [sl]
9001e864:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001e868:	eba3 0308 	sub.w	r3, r3, r8
9001e86c:	eba4 0408 	sub.w	r4, r4, r8
9001e870:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e874:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001e878:	e78b      	b.n	9001e792 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001e87a:	4b03      	ldr	r3, [pc, #12]	; (9001e888 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e87c:	6818      	ldr	r0, [r3, #0]
9001e87e:	6803      	ldr	r3, [r0, #0]
9001e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e882:	4798      	blx	r3
9001e884:	e76a      	b.n	9001e75c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001e886:	bf00      	nop
9001e888:	240281ec 	.word	0x240281ec
9001e88c:	240281e6 	.word	0x240281e6

9001e890 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001e890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001e894:	b085      	sub	sp, #20
9001e896:	6810      	ldr	r0, [r2, #0]
9001e898:	460c      	mov	r4, r1
9001e89a:	6851      	ldr	r1, [r2, #4]
9001e89c:	466d      	mov	r5, sp
9001e89e:	4616      	mov	r6, r2
9001e8a0:	c503      	stmia	r5!, {r0, r1}
9001e8a2:	6818      	ldr	r0, [r3, #0]
9001e8a4:	6859      	ldr	r1, [r3, #4]
9001e8a6:	c503      	stmia	r5!, {r0, r1}
9001e8a8:	4668      	mov	r0, sp
9001e8aa:	4d2e      	ldr	r5, [pc, #184]	; (9001e964 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001e8ac:	f7f9 fb3a 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e8b0:	4631      	mov	r1, r6
9001e8b2:	a802      	add	r0, sp, #8
9001e8b4:	4e2c      	ldr	r6, [pc, #176]	; (9001e968 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001e8b6:	f7f9 fb5d 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e8ba:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001e8be:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001e8c2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001e8c6:	6828      	ldr	r0, [r5, #0]
9001e8c8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e8cc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001e8d0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001e8d4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e8d8:	f8bd 1000 	ldrh.w	r1, [sp]
9001e8dc:	440a      	add	r2, r1
9001e8de:	f8ad 2008 	strh.w	r2, [sp, #8]
9001e8e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001e8e6:	4413      	add	r3, r2
9001e8e8:	f8ad 300a 	strh.w	r3, [sp, #10]
9001e8ec:	6803      	ldr	r3, [r0, #0]
9001e8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e8f0:	4798      	blx	r3
9001e8f2:	8833      	ldrh	r3, [r6, #0]
9001e8f4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001e8f8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001e8fc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001e900:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001e96c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001e904:	fb03 1202 	mla	r2, r3, r2, r1
9001e908:	fb08 f303 	mul.w	r3, r8, r3
9001e90c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e910:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e914:	4298      	cmp	r0, r3
9001e916:	d21d      	bcs.n	9001e954 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001e918:	eb00 080c 	add.w	r8, r0, ip
9001e91c:	4540      	cmp	r0, r8
9001e91e:	d20f      	bcs.n	9001e940 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001e920:	f854 1b04 	ldr.w	r1, [r4], #4
9001e924:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001e928:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001e92c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001e930:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e934:	ea42 0209 	orr.w	r2, r2, r9
9001e938:	430a      	orrs	r2, r1
9001e93a:	f820 2b02 	strh.w	r2, [r0], #2
9001e93e:	e7ed      	b.n	9001e91c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001e940:	8832      	ldrh	r2, [r6, #0]
9001e942:	1bd2      	subs	r2, r2, r7
9001e944:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e948:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001e94c:	1bd2      	subs	r2, r2, r7
9001e94e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001e952:	e7df      	b.n	9001e914 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001e954:	6828      	ldr	r0, [r5, #0]
9001e956:	6803      	ldr	r3, [r0, #0]
9001e958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e95a:	4798      	blx	r3
9001e95c:	b005      	add	sp, #20
9001e95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001e962:	bf00      	nop
9001e964:	240281ec 	.word	0x240281ec
9001e968:	240281e6 	.word	0x240281e6
9001e96c:	fffff800 	.word	0xfffff800

9001e970 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e974:	b08e      	sub	sp, #56	; 0x38
9001e976:	460e      	mov	r6, r1
9001e978:	4604      	mov	r4, r0
9001e97a:	461d      	mov	r5, r3
9001e97c:	6808      	ldr	r0, [r1, #0]
9001e97e:	ab0a      	add	r3, sp, #40	; 0x28
9001e980:	6849      	ldr	r1, [r1, #4]
9001e982:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001eb58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001e986:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001eb5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001e98a:	c303      	stmia	r3!, {r0, r1}
9001e98c:	6810      	ldr	r0, [r2, #0]
9001e98e:	ab0c      	add	r3, sp, #48	; 0x30
9001e990:	6851      	ldr	r1, [r2, #4]
9001e992:	c303      	stmia	r3!, {r0, r1}
9001e994:	a80a      	add	r0, sp, #40	; 0x28
9001e996:	f7f9 fac5 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e99a:	4631      	mov	r1, r6
9001e99c:	a80c      	add	r0, sp, #48	; 0x30
9001e99e:	f7f9 fae9 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e9a2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001e9a6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001e9aa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e9ae:	f8d8 0000 	ldr.w	r0, [r8]
9001e9b2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e9b6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001e9ba:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001e9be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001e9c2:	440c      	add	r4, r1
9001e9c4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001e9c8:	440a      	add	r2, r1
9001e9ca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001e9ce:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001e9d2:	4413      	add	r3, r2
9001e9d4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e9d8:	6803      	ldr	r3, [r0, #0]
9001e9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e9dc:	4798      	blx	r3
9001e9de:	2dff      	cmp	r5, #255	; 0xff
9001e9e0:	d124      	bne.n	9001ea2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001e9e2:	f010 0f01 	tst.w	r0, #1
9001e9e6:	f8d8 0000 	ldr.w	r0, [r8]
9001e9ea:	d022      	beq.n	9001ea32 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001e9ec:	2100      	movs	r1, #0
9001e9ee:	f04f 0e01 	mov.w	lr, #1
9001e9f2:	f8d0 c000 	ldr.w	ip, [r0]
9001e9f6:	b2b6      	uxth	r6, r6
9001e9f8:	f8cd e018 	str.w	lr, [sp, #24]
9001e9fc:	b2bf      	uxth	r7, r7
9001e9fe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001ea02:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001ea06:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001ea0a:	f8b9 e000 	ldrh.w	lr, [r9]
9001ea0e:	9503      	str	r5, [sp, #12]
9001ea10:	9601      	str	r6, [sp, #4]
9001ea12:	9700      	str	r7, [sp, #0]
9001ea14:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001ea18:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001ea1c:	9102      	str	r1, [sp, #8]
9001ea1e:	4621      	mov	r1, r4
9001ea20:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001ea24:	47a8      	blx	r5
9001ea26:	b00e      	add	sp, #56	; 0x38
9001ea28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ea2c:	f010 0f04 	tst.w	r0, #4
9001ea30:	e7d9      	b.n	9001e9e6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001ea32:	6803      	ldr	r3, [r0, #0]
9001ea34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ea36:	4798      	blx	r3
9001ea38:	f8b9 3000 	ldrh.w	r3, [r9]
9001ea3c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001ea40:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001ea44:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001ea48:	435e      	muls	r6, r3
9001ea4a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001ea4e:	2dff      	cmp	r5, #255	; 0xff
9001ea50:	fb03 1202 	mla	r2, r3, r2, r1
9001ea54:	ebac 0c07 	sub.w	ip, ip, r7
9001ea58:	eba3 0707 	sub.w	r7, r3, r7
9001ea5c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001ea60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001ea64:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001ea68:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001ea6c:	d049      	beq.n	9001eb02 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001ea6e:	43eb      	mvns	r3, r5
9001ea70:	fa1f f985 	uxth.w	r9, r5
9001ea74:	b2db      	uxtb	r3, r3
9001ea76:	42b0      	cmp	r0, r6
9001ea78:	d266      	bcs.n	9001eb48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001ea7a:	eb00 0a0e 	add.w	sl, r0, lr
9001ea7e:	4550      	cmp	r0, sl
9001ea80:	4621      	mov	r1, r4
9001ea82:	f104 0403 	add.w	r4, r4, #3
9001ea86:	d25b      	bcs.n	9001eb40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001ea88:	8802      	ldrh	r2, [r0, #0]
9001ea8a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001ea8e:	ea4f 2822 	mov.w	r8, r2, asr #8
9001ea92:	fb11 f109 	smulbb	r1, r1, r9
9001ea96:	10d5      	asrs	r5, r2, #3
9001ea98:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001ea9c:	00d2      	lsls	r2, r2, #3
9001ea9e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001eaa2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001eaa6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001eaaa:	fb08 1803 	mla	r8, r8, r3, r1
9001eaae:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001eab2:	b2d2      	uxtb	r2, r2
9001eab4:	fb11 f109 	smulbb	r1, r1, r9
9001eab8:	fa1f f888 	uxth.w	r8, r8
9001eabc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001eac0:	fb05 1503 	mla	r5, r5, r3, r1
9001eac4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001eac8:	fb11 f109 	smulbb	r1, r1, r9
9001eacc:	b2ad      	uxth	r5, r5
9001eace:	fb02 1203 	mla	r2, r2, r3, r1
9001ead2:	f108 0101 	add.w	r1, r8, #1
9001ead6:	b292      	uxth	r2, r2
9001ead8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001eadc:	1c51      	adds	r1, r2, #1
9001eade:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001eae2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001eae6:	1c69      	adds	r1, r5, #1
9001eae8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001eaec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001eaf0:	096d      	lsrs	r5, r5, #5
9001eaf2:	ea42 0208 	orr.w	r2, r2, r8
9001eaf6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eafa:	432a      	orrs	r2, r5
9001eafc:	f820 2b02 	strh.w	r2, [r0], #2
9001eb00:	e7bd      	b.n	9001ea7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001eb02:	4a14      	ldr	r2, [pc, #80]	; (9001eb54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001eb04:	42b0      	cmp	r0, r6
9001eb06:	d21f      	bcs.n	9001eb48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001eb08:	eb00 050e 	add.w	r5, r0, lr
9001eb0c:	42a8      	cmp	r0, r5
9001eb0e:	4621      	mov	r1, r4
9001eb10:	f104 0403 	add.w	r4, r4, #3
9001eb14:	d210      	bcs.n	9001eb38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001eb16:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001eb1a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001eb1e:	00db      	lsls	r3, r3, #3
9001eb20:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001eb24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb28:	430b      	orrs	r3, r1
9001eb2a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001eb2e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001eb32:	f820 3b02 	strh.w	r3, [r0], #2
9001eb36:	e7e9      	b.n	9001eb0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001eb38:	4438      	add	r0, r7
9001eb3a:	eb01 040c 	add.w	r4, r1, ip
9001eb3e:	e7e1      	b.n	9001eb04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001eb40:	4438      	add	r0, r7
9001eb42:	eb01 040c 	add.w	r4, r1, ip
9001eb46:	e796      	b.n	9001ea76 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001eb48:	4b03      	ldr	r3, [pc, #12]	; (9001eb58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001eb4a:	6818      	ldr	r0, [r3, #0]
9001eb4c:	6803      	ldr	r3, [r0, #0]
9001eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001eb50:	4798      	blx	r3
9001eb52:	e768      	b.n	9001ea26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001eb54:	fffff800 	.word	0xfffff800
9001eb58:	240281ec 	.word	0x240281ec
9001eb5c:	240281e6 	.word	0x240281e6

9001eb60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001eb60:	b4f0      	push	{r4, r5, r6, r7}
9001eb62:	4616      	mov	r6, r2
9001eb64:	461c      	mov	r4, r3
9001eb66:	460d      	mov	r5, r1
9001eb68:	9a04      	ldr	r2, [sp, #16]
9001eb6a:	2e01      	cmp	r6, #1
9001eb6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001eb70:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001eb74:	d012      	beq.n	9001eb9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001eb76:	d303      	bcc.n	9001eb80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001eb78:	2e02      	cmp	r6, #2
9001eb7a:	d00a      	beq.n	9001eb92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001eb7c:	bcf0      	pop	{r4, r5, r6, r7}
9001eb7e:	4770      	bx	lr
9001eb80:	6805      	ldr	r5, [r0, #0]
9001eb82:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001eb86:	68ed      	ldr	r5, [r5, #12]
9001eb88:	4613      	mov	r3, r2
9001eb8a:	4622      	mov	r2, r4
9001eb8c:	46ac      	mov	ip, r5
9001eb8e:	bcf0      	pop	{r4, r5, r6, r7}
9001eb90:	4760      	bx	ip
9001eb92:	4621      	mov	r1, r4
9001eb94:	4628      	mov	r0, r5
9001eb96:	bcf0      	pop	{r4, r5, r6, r7}
9001eb98:	f7ff bd94 	b.w	9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001eb9c:	4621      	mov	r1, r4
9001eb9e:	4628      	mov	r0, r5
9001eba0:	bcf0      	pop	{r4, r5, r6, r7}
9001eba2:	f7ff bee5 	b.w	9001e970 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001eba8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ebac:	b093      	sub	sp, #76	; 0x4c
9001ebae:	4681      	mov	r9, r0
9001ebb0:	4688      	mov	r8, r1
9001ebb2:	6810      	ldr	r0, [r2, #0]
9001ebb4:	6851      	ldr	r1, [r2, #4]
9001ebb6:	ac0e      	add	r4, sp, #56	; 0x38
9001ebb8:	4616      	mov	r6, r2
9001ebba:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001ebbe:	4f6b      	ldr	r7, [pc, #428]	; (9001ed6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001ebc0:	c403      	stmia	r4!, {r0, r1}
9001ebc2:	6818      	ldr	r0, [r3, #0]
9001ebc4:	ac10      	add	r4, sp, #64	; 0x40
9001ebc6:	6859      	ldr	r1, [r3, #4]
9001ebc8:	c403      	stmia	r4!, {r0, r1}
9001ebca:	a80e      	add	r0, sp, #56	; 0x38
9001ebcc:	f7f9 f9aa 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ebd0:	4631      	mov	r1, r6
9001ebd2:	a810      	add	r0, sp, #64	; 0x40
9001ebd4:	4e66      	ldr	r6, [pc, #408]	; (9001ed70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ebd6:	f7f9 f9cd 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ebda:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001ebde:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001ebe2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001ebe6:	6830      	ldr	r0, [r6, #0]
9001ebe8:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ebec:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001ebf0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001ebf4:	4489      	add	r9, r1
9001ebf6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001ebfa:	440a      	add	r2, r1
9001ebfc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001ec00:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ec04:	4413      	add	r3, r2
9001ec06:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001ec0a:	6803      	ldr	r3, [r0, #0]
9001ec0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ec0e:	4798      	blx	r3
9001ec10:	f010 0f80 	tst.w	r0, #128	; 0x80
9001ec14:	6830      	ldr	r0, [r6, #0]
9001ec16:	d01d      	beq.n	9001ec54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001ec18:	2200      	movs	r2, #0
9001ec1a:	6801      	ldr	r1, [r0, #0]
9001ec1c:	b2a4      	uxth	r4, r4
9001ec1e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001ec22:	b2ad      	uxth	r5, r5
9001ec24:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ec28:	220b      	movs	r2, #11
9001ec2a:	9207      	str	r2, [sp, #28]
9001ec2c:	883a      	ldrh	r2, [r7, #0]
9001ec2e:	9502      	str	r5, [sp, #8]
9001ec30:	9206      	str	r2, [sp, #24]
9001ec32:	2201      	movs	r2, #1
9001ec34:	9401      	str	r4, [sp, #4]
9001ec36:	e9cd a204 	strd	sl, r2, [sp, #16]
9001ec3a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001ec3e:	9203      	str	r2, [sp, #12]
9001ec40:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001ec44:	9200      	str	r2, [sp, #0]
9001ec46:	4642      	mov	r2, r8
9001ec48:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001ec4a:	4649      	mov	r1, r9
9001ec4c:	47a0      	blx	r4
9001ec4e:	b013      	add	sp, #76	; 0x4c
9001ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ec54:	6803      	ldr	r3, [r0, #0]
9001ec56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ec58:	4798      	blx	r3
9001ec5a:	883b      	ldrh	r3, [r7, #0]
9001ec5c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001ec60:	f04f 0e04 	mov.w	lr, #4
9001ec64:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001ec68:	435d      	muls	r5, r3
9001ec6a:	fb03 1202 	mla	r2, r3, r2, r1
9001ec6e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001ec72:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001ec76:	920c      	str	r2, [sp, #48]	; 0x30
9001ec78:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001ec7c:	1b12      	subs	r2, r2, r4
9001ec7e:	920d      	str	r2, [sp, #52]	; 0x34
9001ec80:	0062      	lsls	r2, r4, #1
9001ec82:	1b1c      	subs	r4, r3, r4
9001ec84:	920a      	str	r2, [sp, #40]	; 0x28
9001ec86:	0063      	lsls	r3, r4, #1
9001ec88:	930b      	str	r3, [sp, #44]	; 0x2c
9001ec8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ec8c:	4298      	cmp	r0, r3
9001ec8e:	d266      	bcs.n	9001ed5e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001ec90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ec92:	eb00 0b03 	add.w	fp, r0, r3
9001ec96:	4558      	cmp	r0, fp
9001ec98:	d25c      	bcs.n	9001ed54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001ec9a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001ec9e:	fb1e e303 	smlabb	r3, lr, r3, lr
9001eca2:	f858 2003 	ldr.w	r2, [r8, r3]
9001eca6:	0e11      	lsrs	r1, r2, #24
9001eca8:	d012      	beq.n	9001ecd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ecaa:	29ff      	cmp	r1, #255	; 0xff
9001ecac:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001ecb0:	d110      	bne.n	9001ecd4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001ecb2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001ecb6:	d10d      	bne.n	9001ecd4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001ecb8:	0953      	lsrs	r3, r2, #5
9001ecba:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001ecbe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001ecc2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ecc6:	f027 0707 	bic.w	r7, r7, #7
9001ecca:	431f      	orrs	r7, r3
9001eccc:	433a      	orrs	r2, r7
9001ecce:	8002      	strh	r2, [r0, #0]
9001ecd0:	3002      	adds	r0, #2
9001ecd2:	e7e0      	b.n	9001ec96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001ecd4:	fb0a f101 	mul.w	r1, sl, r1
9001ecd8:	8806      	ldrh	r6, [r0, #0]
9001ecda:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001ecde:	b2d2      	uxtb	r2, r2
9001ece0:	1c4b      	adds	r3, r1, #1
9001ece2:	1235      	asrs	r5, r6, #8
9001ece4:	10f4      	asrs	r4, r6, #3
9001ece6:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001ecea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ecee:	00f6      	lsls	r6, r6, #3
9001ecf0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ecf4:	121b      	asrs	r3, r3, #8
9001ecf6:	b2f6      	uxtb	r6, r6
9001ecf8:	b299      	uxth	r1, r3
9001ecfa:	43db      	mvns	r3, r3
9001ecfc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001ed00:	fb1c fc01 	smulbb	ip, ip, r1
9001ed04:	b2db      	uxtb	r3, r3
9001ed06:	fb12 f201 	smulbb	r2, r2, r1
9001ed0a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001ed0e:	fb05 c503 	mla	r5, r5, r3, ip
9001ed12:	b2ff      	uxtb	r7, r7
9001ed14:	fb06 2203 	mla	r2, r6, r3, r2
9001ed18:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001ed1c:	fb17 f701 	smulbb	r7, r7, r1
9001ed20:	b2ad      	uxth	r5, r5
9001ed22:	b292      	uxth	r2, r2
9001ed24:	fb04 7403 	mla	r4, r4, r3, r7
9001ed28:	f105 0c01 	add.w	ip, r5, #1
9001ed2c:	1c57      	adds	r7, r2, #1
9001ed2e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ed32:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001ed36:	b2a4      	uxth	r4, r4
9001ed38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ed3c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ed40:	433d      	orrs	r5, r7
9001ed42:	1c67      	adds	r7, r4, #1
9001ed44:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001ed48:	0964      	lsrs	r4, r4, #5
9001ed4a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ed4e:	4325      	orrs	r5, r4
9001ed50:	8005      	strh	r5, [r0, #0]
9001ed52:	e7bd      	b.n	9001ecd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ed54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ed56:	4418      	add	r0, r3
9001ed58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ed5a:	4499      	add	r9, r3
9001ed5c:	e795      	b.n	9001ec8a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001ed5e:	4b04      	ldr	r3, [pc, #16]	; (9001ed70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ed60:	6818      	ldr	r0, [r3, #0]
9001ed62:	6803      	ldr	r3, [r0, #0]
9001ed64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ed66:	4798      	blx	r3
9001ed68:	e771      	b.n	9001ec4e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001ed6a:	bf00      	nop
9001ed6c:	240281e6 	.word	0x240281e6
9001ed70:	240281ec 	.word	0x240281ec

9001ed74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ed78:	b087      	sub	sp, #28
9001ed7a:	4680      	mov	r8, r0
9001ed7c:	460d      	mov	r5, r1
9001ed7e:	4614      	mov	r4, r2
9001ed80:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001ed84:	2e00      	cmp	r6, #0
9001ed86:	f000 80b9 	beq.w	9001eefc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001ed8a:	6810      	ldr	r0, [r2, #0]
9001ed8c:	af02      	add	r7, sp, #8
9001ed8e:	6851      	ldr	r1, [r2, #4]
9001ed90:	c703      	stmia	r7!, {r0, r1}
9001ed92:	6818      	ldr	r0, [r3, #0]
9001ed94:	af04      	add	r7, sp, #16
9001ed96:	6859      	ldr	r1, [r3, #4]
9001ed98:	c703      	stmia	r7!, {r0, r1}
9001ed9a:	a802      	add	r0, sp, #8
9001ed9c:	f7f9 f8c2 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001eda0:	4621      	mov	r1, r4
9001eda2:	a804      	add	r0, sp, #16
9001eda4:	f7f9 f8e6 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001eda8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001edac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001edb0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001edb4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001edb8:	fb14 2103 	smlabb	r1, r4, r3, r2
9001edbc:	eb08 0401 	add.w	r4, r8, r1
9001edc0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001edc4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001edc8:	440a      	add	r2, r1
9001edca:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001edce:	f8ad 2010 	strh.w	r2, [sp, #16]
9001edd2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001edd6:	4413      	add	r3, r2
9001edd8:	f8ad 3012 	strh.w	r3, [sp, #18]
9001eddc:	4b49      	ldr	r3, [pc, #292]	; (9001ef04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001edde:	6818      	ldr	r0, [r3, #0]
9001ede0:	6803      	ldr	r3, [r0, #0]
9001ede2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ede4:	4798      	blx	r3
9001ede6:	4b48      	ldr	r3, [pc, #288]	; (9001ef08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001ede8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001edec:	2eff      	cmp	r6, #255	; 0xff
9001edee:	881a      	ldrh	r2, [r3, #0]
9001edf0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001edf4:	fb02 c101 	mla	r1, r2, r1, ip
9001edf8:	fb02 f207 	mul.w	r2, r2, r7
9001edfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001ee00:	f105 0104 	add.w	r1, r5, #4
9001ee04:	461d      	mov	r5, r3
9001ee06:	d05a      	beq.n	9001eebe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001ee08:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001ee0c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ee10:	b2b6      	uxth	r6, r6
9001ee12:	9301      	str	r3, [sp, #4]
9001ee14:	fa1f fe8e 	uxth.w	lr, lr
9001ee18:	4282      	cmp	r2, r0
9001ee1a:	d96a      	bls.n	9001eef2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ee1c:	eb00 0b0a 	add.w	fp, r0, sl
9001ee20:	4583      	cmp	fp, r0
9001ee22:	d940      	bls.n	9001eea6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001ee24:	8805      	ldrh	r5, [r0, #0]
9001ee26:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ee2a:	122f      	asrs	r7, r5, #8
9001ee2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ee30:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001ee34:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ee38:	00ed      	lsls	r5, r5, #3
9001ee3a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ee3e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ee42:	fb17 f70e 	smulbb	r7, r7, lr
9001ee46:	b2ed      	uxtb	r5, r5
9001ee48:	fb19 f90e 	smulbb	r9, r9, lr
9001ee4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ee50:	fb15 f50e 	smulbb	r5, r5, lr
9001ee54:	fb0c 7c06 	mla	ip, ip, r6, r7
9001ee58:	10df      	asrs	r7, r3, #3
9001ee5a:	00db      	lsls	r3, r3, #3
9001ee5c:	fa1f fc8c 	uxth.w	ip, ip
9001ee60:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ee64:	b2db      	uxtb	r3, r3
9001ee66:	fb07 9706 	mla	r7, r7, r6, r9
9001ee6a:	f10c 0901 	add.w	r9, ip, #1
9001ee6e:	fb03 5306 	mla	r3, r3, r6, r5
9001ee72:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001ee76:	b29b      	uxth	r3, r3
9001ee78:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001ee7c:	b2bf      	uxth	r7, r7
9001ee7e:	f103 0c01 	add.w	ip, r3, #1
9001ee82:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ee86:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ee8a:	ea4c 0c09 	orr.w	ip, ip, r9
9001ee8e:	f107 0901 	add.w	r9, r7, #1
9001ee92:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001ee96:	097f      	lsrs	r7, r7, #5
9001ee98:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ee9c:	ea4c 0c07 	orr.w	ip, ip, r7
9001eea0:	f820 cb02 	strh.w	ip, [r0], #2
9001eea4:	e7bc      	b.n	9001ee20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001eea6:	9b01      	ldr	r3, [sp, #4]
9001eea8:	881b      	ldrh	r3, [r3, #0]
9001eeaa:	eba3 0308 	sub.w	r3, r3, r8
9001eeae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001eeb2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001eeb6:	eba3 0308 	sub.w	r3, r3, r8
9001eeba:	441c      	add	r4, r3
9001eebc:	e7ac      	b.n	9001ee18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001eebe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001eec2:	4282      	cmp	r2, r0
9001eec4:	d915      	bls.n	9001eef2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001eec6:	eb00 060a 	add.w	r6, r0, sl
9001eeca:	4286      	cmp	r6, r0
9001eecc:	d906      	bls.n	9001eedc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001eece:	f814 3b01 	ldrb.w	r3, [r4], #1
9001eed2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001eed6:	f820 3b02 	strh.w	r3, [r0], #2
9001eeda:	e7f6      	b.n	9001eeca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001eedc:	882b      	ldrh	r3, [r5, #0]
9001eede:	eba3 0308 	sub.w	r3, r3, r8
9001eee2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001eee6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001eeea:	eba3 0308 	sub.w	r3, r3, r8
9001eeee:	441c      	add	r4, r3
9001eef0:	e7e7      	b.n	9001eec2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001eef2:	4b04      	ldr	r3, [pc, #16]	; (9001ef04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001eef4:	6818      	ldr	r0, [r3, #0]
9001eef6:	6803      	ldr	r3, [r0, #0]
9001eef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001eefa:	4798      	blx	r3
9001eefc:	b007      	add	sp, #28
9001eefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ef02:	bf00      	nop
9001ef04:	240281ec 	.word	0x240281ec
9001ef08:	240281e6 	.word	0x240281e6

9001ef0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001ef0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ef10:	b091      	sub	sp, #68	; 0x44
9001ef12:	4680      	mov	r8, r0
9001ef14:	460f      	mov	r7, r1
9001ef16:	4614      	mov	r4, r2
9001ef18:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001ef1c:	2d00      	cmp	r5, #0
9001ef1e:	d051      	beq.n	9001efc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ef20:	6810      	ldr	r0, [r2, #0]
9001ef22:	ae0c      	add	r6, sp, #48	; 0x30
9001ef24:	6851      	ldr	r1, [r2, #4]
9001ef26:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001f128 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001ef2a:	c603      	stmia	r6!, {r0, r1}
9001ef2c:	6818      	ldr	r0, [r3, #0]
9001ef2e:	ae0e      	add	r6, sp, #56	; 0x38
9001ef30:	6859      	ldr	r1, [r3, #4]
9001ef32:	c603      	stmia	r6!, {r0, r1}
9001ef34:	a80c      	add	r0, sp, #48	; 0x30
9001ef36:	f7f8 fff5 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ef3a:	4621      	mov	r1, r4
9001ef3c:	a80e      	add	r0, sp, #56	; 0x38
9001ef3e:	f7f9 f819 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ef42:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001ef46:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ef4a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001ef4e:	f8d9 0000 	ldr.w	r0, [r9]
9001ef52:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ef56:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001ef5a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001ef5e:	eb08 0401 	add.w	r4, r8, r1
9001ef62:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001ef66:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001f12c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001ef6a:	440a      	add	r2, r1
9001ef6c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001ef70:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001ef74:	4413      	add	r3, r2
9001ef76:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001ef7a:	6803      	ldr	r3, [r0, #0]
9001ef7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ef7e:	4798      	blx	r3
9001ef80:	f010 0f80 	tst.w	r0, #128	; 0x80
9001ef84:	f8d9 0000 	ldr.w	r0, [r9]
9001ef88:	d01f      	beq.n	9001efca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001ef8a:	2200      	movs	r2, #0
9001ef8c:	6801      	ldr	r1, [r0, #0]
9001ef8e:	b2b6      	uxth	r6, r6
9001ef90:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001ef94:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ef98:	220b      	movs	r2, #11
9001ef9a:	9207      	str	r2, [sp, #28]
9001ef9c:	f8b8 2000 	ldrh.w	r2, [r8]
9001efa0:	9601      	str	r6, [sp, #4]
9001efa2:	9206      	str	r2, [sp, #24]
9001efa4:	2201      	movs	r2, #1
9001efa6:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001efaa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001efae:	9203      	str	r2, [sp, #12]
9001efb0:	fa1f f28a 	uxth.w	r2, sl
9001efb4:	9202      	str	r2, [sp, #8]
9001efb6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001efba:	9200      	str	r2, [sp, #0]
9001efbc:	463a      	mov	r2, r7
9001efbe:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001efc0:	4621      	mov	r1, r4
9001efc2:	47a8      	blx	r5
9001efc4:	b011      	add	sp, #68	; 0x44
9001efc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001efca:	6803      	ldr	r3, [r0, #0]
9001efcc:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001efd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001efd2:	4798      	blx	r3
9001efd4:	f8b8 2000 	ldrh.w	r2, [r8]
9001efd8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001efdc:	2dff      	cmp	r5, #255	; 0xff
9001efde:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001efe2:	fb0a fa02 	mul.w	sl, sl, r2
9001efe6:	fb02 1303 	mla	r3, r2, r3, r1
9001efea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001efee:	d062      	beq.n	9001f0b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001eff0:	ea6f 0c05 	mvn.w	ip, r5
9001eff4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001eff8:	b2ad      	uxth	r5, r5
9001effa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001effe:	fa5f fc8c 	uxtb.w	ip, ip
9001f002:	930a      	str	r3, [sp, #40]	; 0x28
9001f004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f006:	4298      	cmp	r0, r3
9001f008:	f080 8085 	bcs.w	9001f116 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001f00c:	eb00 0b09 	add.w	fp, r0, r9
9001f010:	4558      	cmp	r0, fp
9001f012:	d246      	bcs.n	9001f0a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001f014:	f814 eb01 	ldrb.w	lr, [r4], #1
9001f018:	2303      	movs	r3, #3
9001f01a:	2204      	movs	r2, #4
9001f01c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001f020:	8803      	ldrh	r3, [r0, #0]
9001f022:	eb07 0a0e 	add.w	sl, r7, lr
9001f026:	1219      	asrs	r1, r3, #8
9001f028:	10da      	asrs	r2, r3, #3
9001f02a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001f02e:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001f032:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001f036:	00db      	lsls	r3, r3, #3
9001f038:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001f03c:	fb18 f805 	smulbb	r8, r8, r5
9001f040:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001f044:	fb1e fe05 	smulbb	lr, lr, r5
9001f048:	b2db      	uxtb	r3, r3
9001f04a:	fb01 810c 	mla	r1, r1, ip, r8
9001f04e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f052:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001f056:	fb18 f805 	smulbb	r8, r8, r5
9001f05a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001f05e:	b289      	uxth	r1, r1
9001f060:	fb02 820c 	mla	r2, r2, ip, r8
9001f064:	fb03 e30c 	mla	r3, r3, ip, lr
9001f068:	f101 0801 	add.w	r8, r1, #1
9001f06c:	b292      	uxth	r2, r2
9001f06e:	b29b      	uxth	r3, r3
9001f070:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001f074:	f102 0801 	add.w	r8, r2, #1
9001f078:	f103 0e01 	add.w	lr, r3, #1
9001f07c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001f080:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001f084:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001f088:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001f08c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001f090:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f094:	ea4e 0101 	orr.w	r1, lr, r1
9001f098:	ea41 0108 	orr.w	r1, r1, r8
9001f09c:	f820 1b02 	strh.w	r1, [r0], #2
9001f0a0:	e7b6      	b.n	9001f010 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001f0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f0a4:	881b      	ldrh	r3, [r3, #0]
9001f0a6:	1b9b      	subs	r3, r3, r6
9001f0a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f0ac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001f0b0:	1b9b      	subs	r3, r3, r6
9001f0b2:	441c      	add	r4, r3
9001f0b4:	e7a6      	b.n	9001f004 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001f0b6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001f0ba:	2203      	movs	r2, #3
9001f0bc:	2504      	movs	r5, #4
9001f0be:	4919      	ldr	r1, [pc, #100]	; (9001f124 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001f0c0:	4550      	cmp	r0, sl
9001f0c2:	d228      	bcs.n	9001f116 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001f0c4:	eb00 0c09 	add.w	ip, r0, r9
9001f0c8:	4560      	cmp	r0, ip
9001f0ca:	4623      	mov	r3, r4
9001f0cc:	d219      	bcs.n	9001f102 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001f0ce:	f893 e000 	ldrb.w	lr, [r3]
9001f0d2:	3401      	adds	r4, #1
9001f0d4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001f0d8:	eb07 0b0e 	add.w	fp, r7, lr
9001f0dc:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001f0e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001f0e4:	f89b b001 	ldrb.w	fp, [fp, #1]
9001f0e8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001f0ec:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001f0f0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001f0f4:	ea43 030b 	orr.w	r3, r3, fp
9001f0f8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001f0fc:	f820 3b02 	strh.w	r3, [r0], #2
9001f100:	e7e2      	b.n	9001f0c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001f102:	f8b8 3000 	ldrh.w	r3, [r8]
9001f106:	1b9b      	subs	r3, r3, r6
9001f108:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f10c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001f110:	1b9b      	subs	r3, r3, r6
9001f112:	441c      	add	r4, r3
9001f114:	e7d4      	b.n	9001f0c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001f116:	4b04      	ldr	r3, [pc, #16]	; (9001f128 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001f118:	6818      	ldr	r0, [r3, #0]
9001f11a:	6803      	ldr	r3, [r0, #0]
9001f11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f11e:	4798      	blx	r3
9001f120:	e750      	b.n	9001efc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001f122:	bf00      	nop
9001f124:	fffff800 	.word	0xfffff800
9001f128:	240281ec 	.word	0x240281ec
9001f12c:	240281e6 	.word	0x240281e6

9001f130 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001f130:	b430      	push	{r4, r5}
9001f132:	780d      	ldrb	r5, [r1, #0]
9001f134:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001f138:	2d01      	cmp	r5, #1
9001f13a:	d00a      	beq.n	9001f152 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001f13c:	d305      	bcc.n	9001f14a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001f13e:	2d02      	cmp	r5, #2
9001f140:	d10b      	bne.n	9001f15a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001f142:	9402      	str	r4, [sp, #8]
9001f144:	bc30      	pop	{r4, r5}
9001f146:	f7ff be15 	b.w	9001ed74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001f14a:	9402      	str	r4, [sp, #8]
9001f14c:	bc30      	pop	{r4, r5}
9001f14e:	f7ff bd2b 	b.w	9001eba8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001f152:	9402      	str	r4, [sp, #8]
9001f154:	bc30      	pop	{r4, r5}
9001f156:	f7ff bed9 	b.w	9001ef0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001f15a:	bc30      	pop	{r4, r5}
9001f15c:	4770      	bx	lr
	...

9001f160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f164:	b087      	sub	sp, #28
9001f166:	4604      	mov	r4, r0
9001f168:	460e      	mov	r6, r1
9001f16a:	6810      	ldr	r0, [r2, #0]
9001f16c:	6851      	ldr	r1, [r2, #4]
9001f16e:	ad02      	add	r5, sp, #8
9001f170:	4617      	mov	r7, r2
9001f172:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001f176:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001f3a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001f17a:	c503      	stmia	r5!, {r0, r1}
9001f17c:	6818      	ldr	r0, [r3, #0]
9001f17e:	ad04      	add	r5, sp, #16
9001f180:	6859      	ldr	r1, [r3, #4]
9001f182:	c503      	stmia	r5!, {r0, r1}
9001f184:	a802      	add	r0, sp, #8
9001f186:	f7f8 fecd 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f18a:	4639      	mov	r1, r7
9001f18c:	a804      	add	r0, sp, #16
9001f18e:	f7f8 fef1 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f192:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f196:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f19a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001f19e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001f1a2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f1a6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001f1aa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001f1ae:	440e      	add	r6, r1
9001f1b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001f1b4:	440a      	add	r2, r1
9001f1b6:	f8ad 2010 	strh.w	r2, [sp, #16]
9001f1ba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001f1be:	4413      	add	r3, r2
9001f1c0:	f8ad 3012 	strh.w	r3, [sp, #18]
9001f1c4:	4b77      	ldr	r3, [pc, #476]	; (9001f3a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f1c6:	6818      	ldr	r0, [r3, #0]
9001f1c8:	6803      	ldr	r3, [r0, #0]
9001f1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f1cc:	4798      	blx	r3
9001f1ce:	f8b9 b000 	ldrh.w	fp, [r9]
9001f1d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f1d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001f1da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f1de:	fb05 f50b 	mul.w	r5, r5, fp
9001f1e2:	fb0b 2303 	mla	r3, fp, r3, r2
9001f1e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f1ea:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001f1ee:	9300      	str	r3, [sp, #0]
9001f1f0:	d069      	beq.n	9001f2c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001f1f2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001f1f6:	4558      	cmp	r0, fp
9001f1f8:	f080 80cc 	bcs.w	9001f394 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f1fc:	9b00      	ldr	r3, [sp, #0]
9001f1fe:	4631      	mov	r1, r6
9001f200:	18c3      	adds	r3, r0, r3
9001f202:	9301      	str	r3, [sp, #4]
9001f204:	9b01      	ldr	r3, [sp, #4]
9001f206:	4298      	cmp	r0, r3
9001f208:	d24f      	bcs.n	9001f2aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001f20a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001f20e:	2a00      	cmp	r2, #0
9001f210:	d048      	beq.n	9001f2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f212:	fb0a f202 	mul.w	r2, sl, r2
9001f216:	1c53      	adds	r3, r2, #1
9001f218:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f21c:	121b      	asrs	r3, r3, #8
9001f21e:	d041      	beq.n	9001f2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f220:	8802      	ldrh	r2, [r0, #0]
9001f222:	b29e      	uxth	r6, r3
9001f224:	f8b4 c000 	ldrh.w	ip, [r4]
9001f228:	43db      	mvns	r3, r3
9001f22a:	1215      	asrs	r5, r2, #8
9001f22c:	b2db      	uxtb	r3, r3
9001f22e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001f232:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f236:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001f23a:	fb15 f503 	smulbb	r5, r5, r3
9001f23e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001f242:	00d2      	lsls	r2, r2, #3
9001f244:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001f248:	fb07 5706 	mla	r7, r7, r6, r5
9001f24c:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001f250:	b2d2      	uxtb	r2, r2
9001f252:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001f256:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001f25a:	fb1e fe03 	smulbb	lr, lr, r3
9001f25e:	b2bf      	uxth	r7, r7
9001f260:	fb12 f203 	smulbb	r2, r2, r3
9001f264:	fa5f fc8c 	uxtb.w	ip, ip
9001f268:	fb05 e506 	mla	r5, r5, r6, lr
9001f26c:	f107 0e01 	add.w	lr, r7, #1
9001f270:	fb0c 2c06 	mla	ip, ip, r6, r2
9001f274:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001f278:	fa1f fc8c 	uxth.w	ip, ip
9001f27c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001f280:	b2ad      	uxth	r5, r5
9001f282:	f10c 0701 	add.w	r7, ip, #1
9001f286:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001f28a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f28e:	ea47 070e 	orr.w	r7, r7, lr
9001f292:	f105 0e01 	add.w	lr, r5, #1
9001f296:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001f29a:	096d      	lsrs	r5, r5, #5
9001f29c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f2a0:	432f      	orrs	r7, r5
9001f2a2:	8007      	strh	r7, [r0, #0]
9001f2a4:	3002      	adds	r0, #2
9001f2a6:	3402      	adds	r4, #2
9001f2a8:	e7ac      	b.n	9001f204 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001f2aa:	f8b9 3000 	ldrh.w	r3, [r9]
9001f2ae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f2b2:	eba3 0308 	sub.w	r3, r3, r8
9001f2b6:	eba6 0608 	sub.w	r6, r6, r8
9001f2ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f2be:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f2c2:	440e      	add	r6, r1
9001f2c4:	e797      	b.n	9001f1f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001f2c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001f2ca:	42a8      	cmp	r0, r5
9001f2cc:	d262      	bcs.n	9001f394 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f2ce:	9b00      	ldr	r3, [sp, #0]
9001f2d0:	4631      	mov	r1, r6
9001f2d2:	eb00 0b03 	add.w	fp, r0, r3
9001f2d6:	4558      	cmp	r0, fp
9001f2d8:	d24e      	bcs.n	9001f378 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001f2da:	f811 3b01 	ldrb.w	r3, [r1], #1
9001f2de:	b12b      	cbz	r3, 9001f2ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f2e0:	2bff      	cmp	r3, #255	; 0xff
9001f2e2:	f8b4 e000 	ldrh.w	lr, [r4]
9001f2e6:	d104      	bne.n	9001f2f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001f2e8:	f8a0 e000 	strh.w	lr, [r0]
9001f2ec:	3002      	adds	r0, #2
9001f2ee:	3402      	adds	r4, #2
9001f2f0:	e7f1      	b.n	9001f2d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001f2f2:	8802      	ldrh	r2, [r0, #0]
9001f2f4:	b29f      	uxth	r7, r3
9001f2f6:	43db      	mvns	r3, r3
9001f2f8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001f2fc:	1216      	asrs	r6, r2, #8
9001f2fe:	b2db      	uxtb	r3, r3
9001f300:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001f304:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001f308:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001f30c:	00d2      	lsls	r2, r2, #3
9001f30e:	fb16 f603 	smulbb	r6, r6, r3
9001f312:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001f316:	b2d2      	uxtb	r2, r2
9001f318:	fb0c 6c07 	mla	ip, ip, r7, r6
9001f31c:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001f320:	fb1a fa03 	smulbb	sl, sl, r3
9001f324:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001f328:	fa1f fc8c 	uxth.w	ip, ip
9001f32c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001f330:	fb12 f303 	smulbb	r3, r2, r3
9001f334:	fa5f fe8e 	uxtb.w	lr, lr
9001f338:	fb06 a607 	mla	r6, r6, r7, sl
9001f33c:	f10c 0201 	add.w	r2, ip, #1
9001f340:	fb0e 3307 	mla	r3, lr, r7, r3
9001f344:	b2b6      	uxth	r6, r6
9001f346:	b29b      	uxth	r3, r3
9001f348:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001f34c:	f106 0a01 	add.w	sl, r6, #1
9001f350:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001f354:	f103 0c01 	add.w	ip, r3, #1
9001f358:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001f35c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001f360:	0976      	lsrs	r6, r6, #5
9001f362:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001f366:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001f36a:	ea4c 0c02 	orr.w	ip, ip, r2
9001f36e:	ea4c 0c06 	orr.w	ip, ip, r6
9001f372:	f8a0 c000 	strh.w	ip, [r0]
9001f376:	e7b9      	b.n	9001f2ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f378:	f8b9 3000 	ldrh.w	r3, [r9]
9001f37c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f380:	eba3 0308 	sub.w	r3, r3, r8
9001f384:	eba6 0608 	sub.w	r6, r6, r8
9001f388:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f38c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f390:	440e      	add	r6, r1
9001f392:	e79a      	b.n	9001f2ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001f394:	4b03      	ldr	r3, [pc, #12]	; (9001f3a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f396:	6818      	ldr	r0, [r3, #0]
9001f398:	6803      	ldr	r3, [r0, #0]
9001f39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f39c:	4798      	blx	r3
9001f39e:	b007      	add	sp, #28
9001f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f3a4:	240281ec 	.word	0x240281ec
9001f3a8:	240281e6 	.word	0x240281e6

9001f3ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f3b0:	b089      	sub	sp, #36	; 0x24
9001f3b2:	4682      	mov	sl, r0
9001f3b4:	460f      	mov	r7, r1
9001f3b6:	4691      	mov	r9, r2
9001f3b8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001f3bc:	4698      	mov	r8, r3
9001f3be:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f3c0:	2e00      	cmp	r6, #0
9001f3c2:	d036      	beq.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f3c4:	4608      	mov	r0, r1
9001f3c6:	f7fc f863 	bl	9001b490 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001f3ca:	4605      	mov	r5, r0
9001f3cc:	4638      	mov	r0, r7
9001f3ce:	f7fc f893 	bl	9001b4f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001f3d2:	f8ad 000e 	strh.w	r0, [sp, #14]
9001f3d6:	4638      	mov	r0, r7
9001f3d8:	f8ad 9008 	strh.w	r9, [sp, #8]
9001f3dc:	f8ad 500c 	strh.w	r5, [sp, #12]
9001f3e0:	f8ad 800a 	strh.w	r8, [sp, #10]
9001f3e4:	f7fc f940 	bl	9001b668 <_ZNK8touchgfx6Bitmap7getDataEv>
9001f3e8:	4605      	mov	r5, r0
9001f3ea:	4638      	mov	r0, r7
9001f3ec:	f7fc f96c 	bl	9001b6c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001f3f0:	4681      	mov	r9, r0
9001f3f2:	4638      	mov	r0, r7
9001f3f4:	f7fc f9bc 	bl	9001b770 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001f3f8:	280b      	cmp	r0, #11
9001f3fa:	d81a      	bhi.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f3fc:	e8df f000 	tbb	[pc, r0]
9001f400:	1906aebd 	.word	0x1906aebd
9001f404:	19191919 	.word	0x19191919
9001f408:	b5191919 	.word	0xb5191919
9001f40c:	4bb0      	ldr	r3, [pc, #704]	; (9001f6d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001f40e:	6818      	ldr	r0, [r3, #0]
9001f410:	6803      	ldr	r3, [r0, #0]
9001f412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f414:	4798      	blx	r3
9001f416:	2eff      	cmp	r6, #255	; 0xff
9001f418:	d121      	bne.n	9001f45e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f41a:	0683      	lsls	r3, r0, #26
9001f41c:	d41f      	bmi.n	9001f45e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f41e:	4638      	mov	r0, r7
9001f420:	f7fc f8ea 	bl	9001b5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f424:	b940      	cbnz	r0, 9001f438 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001f426:	4623      	mov	r3, r4
9001f428:	aa02      	add	r2, sp, #8
9001f42a:	4629      	mov	r1, r5
9001f42c:	4650      	mov	r0, sl
9001f42e:	f7ff fa2f 	bl	9001e890 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f432:	b009      	add	sp, #36	; 0x24
9001f434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f438:	f10d 0818 	add.w	r8, sp, #24
9001f43c:	4639      	mov	r1, r7
9001f43e:	af04      	add	r7, sp, #16
9001f440:	4640      	mov	r0, r8
9001f442:	f7fc f88d 	bl	9001b560 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f446:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f44a:	e887 0003 	stmia.w	r7, {r0, r1}
9001f44e:	4638      	mov	r0, r7
9001f450:	4621      	mov	r1, r4
9001f452:	f7f3 fcff 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001f456:	4638      	mov	r0, r7
9001f458:	f7f3 fd3f 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001f45c:	b130      	cbz	r0, 9001f46c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001f45e:	4633      	mov	r3, r6
9001f460:	4622      	mov	r2, r4
9001f462:	a902      	add	r1, sp, #8
9001f464:	4628      	mov	r0, r5
9001f466:	f7ff f92d 	bl	9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f46a:	e7e2      	b.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f46c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f470:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f474:	4293      	cmp	r3, r2
9001f476:	dd12      	ble.n	9001f49e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001f478:	1a9b      	subs	r3, r3, r2
9001f47a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f47e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f482:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f486:	4628      	mov	r0, r5
9001f488:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f48c:	4642      	mov	r2, r8
9001f48e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f492:	a902      	add	r1, sp, #8
9001f494:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f498:	4633      	mov	r3, r6
9001f49a:	f7ff f913 	bl	9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f49e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f4a2:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f4a6:	4293      	cmp	r3, r2
9001f4a8:	dd12      	ble.n	9001f4d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001f4aa:	1a9b      	subs	r3, r3, r2
9001f4ac:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f4b0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f4b4:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f4b8:	4642      	mov	r2, r8
9001f4ba:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f4be:	4628      	mov	r0, r5
9001f4c0:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f4c4:	23ff      	movs	r3, #255	; 0xff
9001f4c6:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f4ca:	a902      	add	r1, sp, #8
9001f4cc:	f7ff f8fa 	bl	9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f4d0:	463b      	mov	r3, r7
9001f4d2:	aa02      	add	r2, sp, #8
9001f4d4:	4629      	mov	r1, r5
9001f4d6:	4650      	mov	r0, sl
9001f4d8:	f7ff f9da 	bl	9001e890 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f4dc:	88a2      	ldrh	r2, [r4, #4]
9001f4de:	8823      	ldrh	r3, [r4, #0]
9001f4e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f4e4:	4413      	add	r3, r2
9001f4e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f4ea:	440a      	add	r2, r1
9001f4ec:	b29b      	uxth	r3, r3
9001f4ee:	b292      	uxth	r2, r2
9001f4f0:	b218      	sxth	r0, r3
9001f4f2:	b211      	sxth	r1, r2
9001f4f4:	4288      	cmp	r0, r1
9001f4f6:	dd12      	ble.n	9001f51e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001f4f8:	1a9b      	subs	r3, r3, r2
9001f4fa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f4fe:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001f502:	4642      	mov	r2, r8
9001f504:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f508:	a902      	add	r1, sp, #8
9001f50a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f50e:	23ff      	movs	r3, #255	; 0xff
9001f510:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f514:	4628      	mov	r0, r5
9001f516:	f8ad 601a 	strh.w	r6, [sp, #26]
9001f51a:	f7ff f8d3 	bl	9001e6c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f51e:	88e2      	ldrh	r2, [r4, #6]
9001f520:	8863      	ldrh	r3, [r4, #2]
9001f522:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f526:	4413      	add	r3, r2
9001f528:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f52c:	440a      	add	r2, r1
9001f52e:	b29b      	uxth	r3, r3
9001f530:	b292      	uxth	r2, r2
9001f532:	b218      	sxth	r0, r3
9001f534:	b211      	sxth	r1, r2
9001f536:	4288      	cmp	r0, r1
9001f538:	f77f af7b 	ble.w	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f53c:	1a9b      	subs	r3, r3, r2
9001f53e:	f9b4 6000 	ldrsh.w	r6, [r4]
9001f542:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f546:	4642      	mov	r2, r8
9001f548:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f54c:	23ff      	movs	r3, #255	; 0xff
9001f54e:	f8ad 6018 	strh.w	r6, [sp, #24]
9001f552:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f556:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f55a:	e782      	b.n	9001f462 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001f55c:	4633      	mov	r3, r6
9001f55e:	4622      	mov	r2, r4
9001f560:	a902      	add	r1, sp, #8
9001f562:	4628      	mov	r0, r5
9001f564:	f7ff fa04 	bl	9001e970 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001f568:	e763      	b.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f56a:	9600      	str	r6, [sp, #0]
9001f56c:	4623      	mov	r3, r4
9001f56e:	aa02      	add	r2, sp, #8
9001f570:	4649      	mov	r1, r9
9001f572:	4628      	mov	r0, r5
9001f574:	f7ff fddc 	bl	9001f130 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001f578:	e75b      	b.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f57a:	4638      	mov	r0, r7
9001f57c:	f7fc f83c 	bl	9001b5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f580:	b950      	cbnz	r0, 9001f598 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001f582:	f8da 3000 	ldr.w	r3, [sl]
9001f586:	aa02      	add	r2, sp, #8
9001f588:	4629      	mov	r1, r5
9001f58a:	e9cd 6000 	strd	r6, r0, [sp]
9001f58e:	4650      	mov	r0, sl
9001f590:	68de      	ldr	r6, [r3, #12]
9001f592:	4623      	mov	r3, r4
9001f594:	47b0      	blx	r6
9001f596:	e74c      	b.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f598:	f10d 0818 	add.w	r8, sp, #24
9001f59c:	4639      	mov	r1, r7
9001f59e:	af04      	add	r7, sp, #16
9001f5a0:	4640      	mov	r0, r8
9001f5a2:	f7fb ffdd 	bl	9001b560 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f5a6:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f5aa:	e887 0003 	stmia.w	r7, {r0, r1}
9001f5ae:	4638      	mov	r0, r7
9001f5b0:	4621      	mov	r1, r4
9001f5b2:	f7f3 fc4f 	bl	90012e54 <_ZN8touchgfx4RectaNERKS0_>
9001f5b6:	4638      	mov	r0, r7
9001f5b8:	f7f3 fc8f 	bl	90012eda <_ZNK8touchgfx4Rect7isEmptyEv>
9001f5bc:	b138      	cbz	r0, 9001f5ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001f5be:	4623      	mov	r3, r4
9001f5c0:	9600      	str	r6, [sp, #0]
9001f5c2:	aa02      	add	r2, sp, #8
9001f5c4:	4649      	mov	r1, r9
9001f5c6:	4628      	mov	r0, r5
9001f5c8:	f7ff fdca 	bl	9001f160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f5cc:	e731      	b.n	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f5ce:	f8da 3000 	ldr.w	r3, [sl]
9001f5d2:	aa02      	add	r2, sp, #8
9001f5d4:	4629      	mov	r1, r5
9001f5d6:	e9cd 6000 	strd	r6, r0, [sp]
9001f5da:	4650      	mov	r0, sl
9001f5dc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001f5e0:	463b      	mov	r3, r7
9001f5e2:	47d8      	blx	fp
9001f5e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f5e8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f5ec:	4293      	cmp	r3, r2
9001f5ee:	dd13      	ble.n	9001f618 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001f5f0:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f5f4:	1a9b      	subs	r3, r3, r2
9001f5f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f5fa:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f5fe:	4628      	mov	r0, r5
9001f600:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f604:	aa02      	add	r2, sp, #8
9001f606:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f60a:	4649      	mov	r1, r9
9001f60c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f610:	4643      	mov	r3, r8
9001f612:	9600      	str	r6, [sp, #0]
9001f614:	f7ff fda4 	bl	9001f160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f618:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f61c:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f620:	4293      	cmp	r3, r2
9001f622:	dd13      	ble.n	9001f64c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001f624:	1a9b      	subs	r3, r3, r2
9001f626:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f62a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f62e:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f632:	aa02      	add	r2, sp, #8
9001f634:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f638:	4628      	mov	r0, r5
9001f63a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f63e:	4643      	mov	r3, r8
9001f640:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f644:	4649      	mov	r1, r9
9001f646:	9600      	str	r6, [sp, #0]
9001f648:	f7ff fd8a 	bl	9001f160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f64c:	88a2      	ldrh	r2, [r4, #4]
9001f64e:	8823      	ldrh	r3, [r4, #0]
9001f650:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f654:	4413      	add	r3, r2
9001f656:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f65a:	440a      	add	r2, r1
9001f65c:	b29b      	uxth	r3, r3
9001f65e:	b292      	uxth	r2, r2
9001f660:	b218      	sxth	r0, r3
9001f662:	b211      	sxth	r1, r2
9001f664:	4288      	cmp	r0, r1
9001f666:	dd13      	ble.n	9001f690 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001f668:	1a9b      	subs	r3, r3, r2
9001f66a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f66e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001f672:	aa02      	add	r2, sp, #8
9001f674:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f678:	4649      	mov	r1, r9
9001f67a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f67e:	4643      	mov	r3, r8
9001f680:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f684:	4628      	mov	r0, r5
9001f686:	9600      	str	r6, [sp, #0]
9001f688:	f8ad 701a 	strh.w	r7, [sp, #26]
9001f68c:	f7ff fd68 	bl	9001f160 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f690:	88e2      	ldrh	r2, [r4, #6]
9001f692:	8863      	ldrh	r3, [r4, #2]
9001f694:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f698:	4413      	add	r3, r2
9001f69a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f69e:	440a      	add	r2, r1
9001f6a0:	b29b      	uxth	r3, r3
9001f6a2:	b292      	uxth	r2, r2
9001f6a4:	b218      	sxth	r0, r3
9001f6a6:	b211      	sxth	r1, r2
9001f6a8:	4288      	cmp	r0, r1
9001f6aa:	f77f aec2 	ble.w	9001f432 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f6ae:	f9b4 7000 	ldrsh.w	r7, [r4]
9001f6b2:	1a9b      	subs	r3, r3, r2
9001f6b4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f6b8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f6bc:	4643      	mov	r3, r8
9001f6be:	f8ad 7018 	strh.w	r7, [sp, #24]
9001f6c2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f6c6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f6ca:	9600      	str	r6, [sp, #0]
9001f6cc:	e779      	b.n	9001f5c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001f6ce:	bf00      	nop
9001f6d0:	240281ec 	.word	0x240281ec

9001f6d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001f6d4:	b180      	cbz	r0, 9001f6f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001f6d6:	2903      	cmp	r1, #3
9001f6d8:	d81c      	bhi.n	9001f714 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f6da:	e8df f001 	tbb	[pc, r1]
9001f6de:	1d02      	.short	0x1d02
9001f6e0:	1f08      	.short	0x1f08
9001f6e2:	4b10      	ldr	r3, [pc, #64]	; (9001f724 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f6e4:	8818      	ldrh	r0, [r3, #0]
9001f6e6:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f6ea:	4240      	negs	r0, r0
9001f6ec:	4770      	bx	lr
9001f6ee:	4b0d      	ldr	r3, [pc, #52]	; (9001f724 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f6f0:	8818      	ldrh	r0, [r3, #0]
9001f6f2:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f6f6:	4770      	bx	lr
9001f6f8:	2903      	cmp	r1, #3
9001f6fa:	d80b      	bhi.n	9001f714 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f6fc:	a301      	add	r3, pc, #4	; (adr r3, 9001f704 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001f6fe:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f702:	bf00      	nop
9001f704:	9001f719 	.word	0x9001f719
9001f708:	9001f6ef 	.word	0x9001f6ef
9001f70c:	9001f71d 	.word	0x9001f71d
9001f710:	9001f6e3 	.word	0x9001f6e3
9001f714:	2000      	movs	r0, #0
9001f716:	4770      	bx	lr
9001f718:	2001      	movs	r0, #1
9001f71a:	4770      	bx	lr
9001f71c:	f04f 30ff 	mov.w	r0, #4294967295
9001f720:	4770      	bx	lr
9001f722:	bf00      	nop
9001f724:	240281e6 	.word	0x240281e6

9001f728 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001f728:	b180      	cbz	r0, 9001f74c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001f72a:	2903      	cmp	r1, #3
9001f72c:	d81c      	bhi.n	9001f768 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f72e:	e8df f001 	tbb	[pc, r1]
9001f732:	021d      	.short	0x021d
9001f734:	071f      	.short	0x071f
9001f736:	4b10      	ldr	r3, [pc, #64]	; (9001f778 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f738:	8818      	ldrh	r0, [r3, #0]
9001f73a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f73e:	4770      	bx	lr
9001f740:	4b0d      	ldr	r3, [pc, #52]	; (9001f778 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f742:	8818      	ldrh	r0, [r3, #0]
9001f744:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f748:	4240      	negs	r0, r0
9001f74a:	4770      	bx	lr
9001f74c:	2903      	cmp	r1, #3
9001f74e:	d80b      	bhi.n	9001f768 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f750:	a301      	add	r3, pc, #4	; (adr r3, 9001f758 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001f752:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f756:	bf00      	nop
9001f758:	9001f737 	.word	0x9001f737
9001f75c:	9001f771 	.word	0x9001f771
9001f760:	9001f741 	.word	0x9001f741
9001f764:	9001f76d 	.word	0x9001f76d
9001f768:	2000      	movs	r0, #0
9001f76a:	4770      	bx	lr
9001f76c:	2001      	movs	r0, #1
9001f76e:	4770      	bx	lr
9001f770:	f04f 30ff 	mov.w	r0, #4294967295
9001f774:	4770      	bx	lr
9001f776:	bf00      	nop
9001f778:	240281e6 	.word	0x240281e6

9001f77c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f780:	b099      	sub	sp, #100	; 0x64
9001f782:	910b      	str	r1, [sp, #44]	; 0x2c
9001f784:	a914      	add	r1, sp, #80	; 0x50
9001f786:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001f78a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001f78e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001f792:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001f796:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001f79a:	e881 000c 	stmia.w	r1, {r2, r3}
9001f79e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001f7a2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001f7a6:	9309      	str	r3, [sp, #36]	; 0x24
9001f7a8:	f891 900d 	ldrb.w	r9, [r1, #13]
9001f7ac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f7b0:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001f7b4:	9310      	str	r3, [sp, #64]	; 0x40
9001f7b6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001f7ba:	930c      	str	r3, [sp, #48]	; 0x30
9001f7bc:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001f7c0:	798f      	ldrb	r7, [r1, #6]
9001f7c2:	431f      	orrs	r7, r3
9001f7c4:	f000 8195 	beq.w	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f7c8:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001f7cc:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001f7d0:	f891 9007 	ldrb.w	r9, [r1, #7]
9001f7d4:	ea59 0903 	orrs.w	r9, r9, r3
9001f7d8:	f000 818b 	beq.w	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f7dc:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001f7e0:	b29b      	uxth	r3, r3
9001f7e2:	2d00      	cmp	r5, #0
9001f7e4:	f000 812e 	beq.w	9001fa44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001f7e8:	1aed      	subs	r5, r5, r3
9001f7ea:	b2ad      	uxth	r5, r5
9001f7ec:	042b      	lsls	r3, r5, #16
9001f7ee:	d502      	bpl.n	9001f7f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f7f0:	1b64      	subs	r4, r4, r5
9001f7f2:	2500      	movs	r5, #0
9001f7f4:	b224      	sxth	r4, r4
9001f7f6:	f9b2 1000 	ldrsh.w	r1, [r2]
9001f7fa:	a814      	add	r0, sp, #80	; 0x50
9001f7fc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001f800:	428c      	cmp	r4, r1
9001f802:	b28b      	uxth	r3, r1
9001f804:	bfbf      	itttt	lt
9001f806:	18ed      	addlt	r5, r5, r3
9001f808:	1b2c      	sublt	r4, r5, r4
9001f80a:	b2a5      	uxthlt	r5, r4
9001f80c:	460c      	movlt	r4, r1
9001f80e:	8891      	ldrh	r1, [r2, #4]
9001f810:	440b      	add	r3, r1
9001f812:	4621      	mov	r1, r4
9001f814:	b21b      	sxth	r3, r3
9001f816:	930f      	str	r3, [sp, #60]	; 0x3c
9001f818:	88d3      	ldrh	r3, [r2, #6]
9001f81a:	8852      	ldrh	r2, [r2, #2]
9001f81c:	4413      	add	r3, r2
9001f81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f820:	b21b      	sxth	r3, r3
9001f822:	930d      	str	r3, [sp, #52]	; 0x34
9001f824:	4bbd      	ldr	r3, [pc, #756]	; (9001fb1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001f826:	f893 b000 	ldrb.w	fp, [r3]
9001f82a:	f10b 3cff 	add.w	ip, fp, #4294967295
9001f82e:	f1dc 0300 	rsbs	r3, ip, #0
9001f832:	eb43 030c 	adc.w	r3, r3, ip
9001f836:	930e      	str	r3, [sp, #56]	; 0x38
9001f838:	4653      	mov	r3, sl
9001f83a:	f7f8 f9ed 	bl	90017c18 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001f83e:	4621      	mov	r1, r4
9001f840:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001f844:	4653      	mov	r3, sl
9001f846:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f848:	a814      	add	r0, sp, #80	; 0x50
9001f84a:	f7f8 fa02 	bl	90017c52 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001f84e:	a918      	add	r1, sp, #96	; 0x60
9001f850:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001f854:	a817      	add	r0, sp, #92	; 0x5c
9001f856:	f7f8 fb23 	bl	90017ea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001f85a:	f1ba 0f00 	cmp.w	sl, #0
9001f85e:	f040 80f4 	bne.w	9001fa4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001f862:	f1bb 0f01 	cmp.w	fp, #1
9001f866:	f040 80f8 	bne.w	9001fa5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001f86a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f86c:	2b00      	cmp	r3, #0
9001f86e:	f040 8145 	bne.w	9001fafc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001f872:	b2ba      	uxth	r2, r7
9001f874:	b905      	cbnz	r5, 9001f878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001f876:	b16e      	cbz	r6, 9001f894 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001f878:	fb06 5302 	mla	r3, r6, r2, r5
9001f87c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001f87e:	4631      	mov	r1, r6
9001f880:	fb08 f303 	mul.w	r3, r8, r3
9001f884:	f003 0607 	and.w	r6, r3, #7
9001f888:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001f88c:	9328      	str	r3, [sp, #160]	; 0xa0
9001f88e:	eba9 0301 	sub.w	r3, r9, r1
9001f892:	930a      	str	r3, [sp, #40]	; 0x28
9001f894:	4651      	mov	r1, sl
9001f896:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f898:	f7ff ff1c 	bl	9001f6d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001f89c:	4681      	mov	r9, r0
9001f89e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f8a0:	f7ff ff42 	bl	9001f728 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001f8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f8a6:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f8a8:	4683      	mov	fp, r0
9001f8aa:	eba3 0a01 	sub.w	sl, r3, r1
9001f8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f8b0:	459a      	cmp	sl, r3
9001f8b2:	bfa8      	it	ge
9001f8b4:	469a      	movge	sl, r3
9001f8b6:	f1ba 0f00 	cmp.w	sl, #0
9001f8ba:	f340 811a 	ble.w	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f8be:	1b64      	subs	r4, r4, r5
9001f8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f8c2:	1b1c      	subs	r4, r3, r4
9001f8c4:	42bc      	cmp	r4, r7
9001f8c6:	bfd4      	ite	le
9001f8c8:	ebc5 0504 	rsble	r5, r5, r4
9001f8cc:	ebc5 0507 	rsbgt	r5, r5, r7
9001f8d0:	2d00      	cmp	r5, #0
9001f8d2:	f340 810e 	ble.w	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f8d6:	1b52      	subs	r2, r2, r5
9001f8d8:	fb08 f302 	mul.w	r3, r8, r2
9001f8dc:	930f      	str	r3, [sp, #60]	; 0x3c
9001f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f8e0:	2b00      	cmp	r3, #0
9001f8e2:	f040 8116 	bne.w	9001fb12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001f8e6:	4b8e      	ldr	r3, [pc, #568]	; (9001fb20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001f8e8:	6818      	ldr	r0, [r3, #0]
9001f8ea:	6803      	ldr	r3, [r0, #0]
9001f8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f8ee:	4798      	blx	r3
9001f8f0:	2301      	movs	r3, #1
9001f8f2:	4a8c      	ldr	r2, [pc, #560]	; (9001fb24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001f8f4:	fa03 f308 	lsl.w	r3, r3, r8
9001f8f8:	8811      	ldrh	r1, [r2, #0]
9001f8fa:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001f8fe:	3b01      	subs	r3, #1
9001f900:	b2db      	uxtb	r3, r3
9001f902:	930e      	str	r3, [sp, #56]	; 0x38
9001f904:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001f908:	fb01 2303 	mla	r3, r1, r3, r2
9001f90c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001f910:	930a      	str	r3, [sp, #40]	; 0x28
9001f912:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f914:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001f918:	9313      	str	r3, [sp, #76]	; 0x4c
9001f91a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f91c:	0a19      	lsrs	r1, r3, #8
9001f91e:	b2cb      	uxtb	r3, r1
9001f920:	9312      	str	r3, [sp, #72]	; 0x48
9001f922:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f924:	b2db      	uxtb	r3, r3
9001f926:	9311      	str	r3, [sp, #68]	; 0x44
9001f928:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f92a:	095a      	lsrs	r2, r3, #5
9001f92c:	4b7e      	ldr	r3, [pc, #504]	; (9001fb28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001f92e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f932:	400b      	ands	r3, r1
9001f934:	4313      	orrs	r3, r2
9001f936:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001f938:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f93c:	4313      	orrs	r3, r2
9001f93e:	b29b      	uxth	r3, r3
9001f940:	9310      	str	r3, [sp, #64]	; 0x40
9001f942:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f944:	781a      	ldrb	r2, [r3, #0]
9001f946:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f94a:	fb05 b919 	mls	r9, r5, r9, fp
9001f94e:	4132      	asrs	r2, r6
9001f950:	fb03 fb05 	mul.w	fp, r3, r5
9001f954:	930d      	str	r3, [sp, #52]	; 0x34
9001f956:	b2d2      	uxtb	r2, r2
9001f958:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001f95c:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001f960:	f0c0 80f5 	bcc.w	9001fb4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001f964:	46ae      	mov	lr, r5
9001f966:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001f96a:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001f96e:	f0c0 80dd 	bcc.w	9001fb2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001f972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f974:	4013      	ands	r3, r2
9001f976:	d055      	beq.n	9001fa24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001f978:	20ff      	movs	r0, #255	; 0xff
9001f97a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f97c:	fb90 f1f1 	sdiv	r1, r0, r1
9001f980:	434b      	muls	r3, r1
9001f982:	2bfe      	cmp	r3, #254	; 0xfe
9001f984:	dd03      	ble.n	9001f98e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001f986:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f988:	4281      	cmp	r1, r0
9001f98a:	f000 80c4 	beq.w	9001fb16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001f98e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f990:	f8bc 4000 	ldrh.w	r4, [ip]
9001f994:	fb11 f303 	smulbb	r3, r1, r3
9001f998:	1220      	asrs	r0, r4, #8
9001f99a:	b29b      	uxth	r3, r3
9001f99c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f9a0:	1c59      	adds	r1, r3, #1
9001f9a2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001f9a6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001f9aa:	10e1      	asrs	r1, r4, #3
9001f9ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f9b0:	00e4      	lsls	r4, r4, #3
9001f9b2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f9b6:	b29f      	uxth	r7, r3
9001f9b8:	43db      	mvns	r3, r3
9001f9ba:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001f9be:	b2db      	uxtb	r3, r3
9001f9c0:	b2e4      	uxtb	r4, r4
9001f9c2:	9309      	str	r3, [sp, #36]	; 0x24
9001f9c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f9c6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001f9ca:	fb13 f907 	smulbb	r9, r3, r7
9001f9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f9d0:	fb00 9003 	mla	r0, r0, r3, r9
9001f9d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001f9d6:	fb13 f907 	smulbb	r9, r3, r7
9001f9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f9dc:	b280      	uxth	r0, r0
9001f9de:	fb01 9103 	mla	r1, r1, r3, r9
9001f9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f9e4:	fb13 f707 	smulbb	r7, r3, r7
9001f9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f9ea:	b289      	uxth	r1, r1
9001f9ec:	fb04 7403 	mla	r4, r4, r3, r7
9001f9f0:	1c43      	adds	r3, r0, #1
9001f9f2:	b2a4      	uxth	r4, r4
9001f9f4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001f9f8:	f104 0901 	add.w	r9, r4, #1
9001f9fc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001fa00:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001fa04:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001fa08:	ea49 0000 	orr.w	r0, r9, r0
9001fa0c:	f101 0901 	add.w	r9, r1, #1
9001fa10:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001fa14:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fa18:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fa1c:	ea40 0009 	orr.w	r0, r0, r9
9001fa20:	f8ac 0000 	strh.w	r0, [ip]
9001fa24:	4446      	add	r6, r8
9001fa26:	b2b6      	uxth	r6, r6
9001fa28:	2e07      	cmp	r6, #7
9001fa2a:	bf89      	itett	hi
9001fa2c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001fa2e:	fa42 f208 	asrls.w	r2, r2, r8
9001fa32:	2600      	movhi	r6, #0
9001fa34:	785a      	ldrbhi	r2, [r3, #1]
9001fa36:	bf8a      	itet	hi
9001fa38:	3301      	addhi	r3, #1
9001fa3a:	b2d2      	uxtbls	r2, r2
9001fa3c:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001fa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001fa40:	449c      	add	ip, r3
9001fa42:	e792      	b.n	9001f96a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001fa44:	441c      	add	r4, r3
9001fa46:	b224      	sxth	r4, r4
9001fa48:	e6d5      	b.n	9001f7f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001fa4a:	f1ba 0f01 	cmp.w	sl, #1
9001fa4e:	f47f af0c 	bne.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa52:	f1bb 0f01 	cmp.w	fp, #1
9001fa56:	f47f af08 	bne.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa5a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001fb20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001fa5e:	f8db 0000 	ldr.w	r0, [fp]
9001fa62:	6803      	ldr	r3, [r0, #0]
9001fa64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001fa66:	4798      	blx	r3
9001fa68:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001fa6c:	465a      	mov	r2, fp
9001fa6e:	d006      	beq.n	9001fa7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001fa70:	f1b8 0f04 	cmp.w	r8, #4
9001fa74:	d140      	bne.n	9001faf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001fa76:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001fa78:	3300      	adds	r3, #0
9001fa7a:	bf18      	it	ne
9001fa7c:	2301      	movne	r3, #1
9001fa7e:	0580      	lsls	r0, r0, #22
9001fa80:	d56e      	bpl.n	9001fb60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001fa82:	f1b8 0f08 	cmp.w	r8, #8
9001fa86:	d16b      	bne.n	9001fb60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001fa88:	2b00      	cmp	r3, #0
9001fa8a:	bf0c      	ite	eq
9001fa8c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001fa90:	f44f 7180 	movne.w	r1, #256	; 0x100
9001fa94:	2d00      	cmp	r5, #0
9001fa96:	f47f aee8 	bne.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa9a:	2e00      	cmp	r6, #0
9001fa9c:	f47f aee5 	bne.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001faa0:	19e3      	adds	r3, r4, r7
9001faa2:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001faa4:	4283      	cmp	r3, r0
9001faa6:	f73f aee0 	bgt.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001faaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001faac:	980d      	ldr	r0, [sp, #52]	; 0x34
9001faae:	444b      	add	r3, r9
9001fab0:	4283      	cmp	r3, r0
9001fab2:	f73f aeda 	bgt.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fab6:	b2bf      	uxth	r7, r7
9001fab8:	f1b8 0f08 	cmp.w	r8, #8
9001fabc:	6810      	ldr	r0, [r2, #0]
9001fabe:	f04f 0500 	mov.w	r5, #0
9001fac2:	bf18      	it	ne
9001fac4:	3701      	addne	r7, #1
9001fac6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001faca:	6804      	ldr	r4, [r0, #0]
9001facc:	bf18      	it	ne
9001face:	f027 0701 	bicne.w	r7, r7, #1
9001fad2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001fad6:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001fada:	990c      	ldr	r1, [sp, #48]	; 0x30
9001fadc:	bf18      	it	ne
9001fade:	b2bf      	uxthne	r7, r7
9001fae0:	9104      	str	r1, [sp, #16]
9001fae2:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001fae4:	e9cd 7900 	strd	r7, r9, [sp]
9001fae8:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001faec:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001faee:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001faf0:	47a0      	blx	r4
9001faf2:	b019      	add	sp, #100	; 0x64
9001faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001faf8:	2300      	movs	r3, #0
9001fafa:	e7c0      	b.n	9001fa7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001fafc:	2208      	movs	r2, #8
9001fafe:	fb92 f3f8 	sdiv	r3, r2, r8
9001fb02:	1e5a      	subs	r2, r3, #1
9001fb04:	443a      	add	r2, r7
9001fb06:	fb92 f2f3 	sdiv	r2, r2, r3
9001fb0a:	fb12 f203 	smulbb	r2, r2, r3
9001fb0e:	b292      	uxth	r2, r2
9001fb10:	e6b0      	b.n	9001f874 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001fb12:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001fb14:	e6ec      	b.n	9001f8f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001fb16:	9810      	ldr	r0, [sp, #64]	; 0x40
9001fb18:	e782      	b.n	9001fa20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001fb1a:	bf00      	nop
9001fb1c:	240281e4 	.word	0x240281e4
9001fb20:	240281ec 	.word	0x240281ec
9001fb24:	240281e6 	.word	0x240281e6
9001fb28:	00fff800 	.word	0x00fff800
9001fb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fb2e:	b153      	cbz	r3, 9001fb46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001fb30:	441e      	add	r6, r3
9001fb32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001fb34:	b2b6      	uxth	r6, r6
9001fb36:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001fb3a:	f006 0607 	and.w	r6, r6, #7
9001fb3e:	781a      	ldrb	r2, [r3, #0]
9001fb40:	9328      	str	r3, [sp, #160]	; 0xa0
9001fb42:	4132      	asrs	r2, r6
9001fb44:	b2d2      	uxtb	r2, r2
9001fb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001fb48:	445b      	add	r3, fp
9001fb4a:	930a      	str	r3, [sp, #40]	; 0x28
9001fb4c:	e706      	b.n	9001f95c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001fb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001fb50:	2b00      	cmp	r3, #0
9001fb52:	d1ce      	bne.n	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001fb54:	4b05      	ldr	r3, [pc, #20]	; (9001fb6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001fb56:	6818      	ldr	r0, [r3, #0]
9001fb58:	6803      	ldr	r3, [r0, #0]
9001fb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001fb5c:	4798      	blx	r3
9001fb5e:	e7c8      	b.n	9001faf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001fb60:	2b00      	cmp	r3, #0
9001fb62:	f43f ae82 	beq.w	9001f86a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fb66:	f44f 7180 	mov.w	r1, #256	; 0x100
9001fb6a:	e793      	b.n	9001fa94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001fb6c:	240281ec 	.word	0x240281ec

9001fb70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001fb70:	b538      	push	{r3, r4, r5, lr}
9001fb72:	4c15      	ldr	r4, [pc, #84]	; (9001fbc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001fb74:	4605      	mov	r5, r0
9001fb76:	7823      	ldrb	r3, [r4, #0]
9001fb78:	f3bf 8f5b 	dmb	ish
9001fb7c:	07da      	lsls	r2, r3, #31
9001fb7e:	d40b      	bmi.n	9001fb98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fb80:	4620      	mov	r0, r4
9001fb82:	f007 fd8a 	bl	9002769a <__cxa_guard_acquire>
9001fb86:	b138      	cbz	r0, 9001fb98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fb88:	4620      	mov	r0, r4
9001fb8a:	f007 fd92 	bl	900276b2 <__cxa_guard_release>
9001fb8e:	4a0f      	ldr	r2, [pc, #60]	; (9001fbcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001fb90:	490f      	ldr	r1, [pc, #60]	; (9001fbd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001fb92:	4810      	ldr	r0, [pc, #64]	; (9001fbd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001fb94:	f007 fd7a 	bl	9002768c <__aeabi_atexit>
9001fb98:	4c0f      	ldr	r4, [pc, #60]	; (9001fbd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001fb9a:	7823      	ldrb	r3, [r4, #0]
9001fb9c:	f3bf 8f5b 	dmb	ish
9001fba0:	07db      	lsls	r3, r3, #31
9001fba2:	d40b      	bmi.n	9001fbbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fba4:	4620      	mov	r0, r4
9001fba6:	f007 fd78 	bl	9002769a <__cxa_guard_acquire>
9001fbaa:	b138      	cbz	r0, 9001fbbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fbac:	4620      	mov	r0, r4
9001fbae:	f007 fd80 	bl	900276b2 <__cxa_guard_release>
9001fbb2:	4a06      	ldr	r2, [pc, #24]	; (9001fbcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001fbb4:	4909      	ldr	r1, [pc, #36]	; (9001fbdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001fbb6:	480a      	ldr	r0, [pc, #40]	; (9001fbe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fbb8:	f007 fd68 	bl	9002768c <__aeabi_atexit>
9001fbbc:	4b05      	ldr	r3, [pc, #20]	; (9001fbd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001fbbe:	612b      	str	r3, [r5, #16]
9001fbc0:	4b07      	ldr	r3, [pc, #28]	; (9001fbe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fbc2:	616b      	str	r3, [r5, #20]
9001fbc4:	bd38      	pop	{r3, r4, r5, pc}
9001fbc6:	bf00      	nop
9001fbc8:	240282c0 	.word	0x240282c0
9001fbcc:	24000000 	.word	0x24000000
9001fbd0:	9001dd7d 	.word	0x9001dd7d
9001fbd4:	240000ac 	.word	0x240000ac
9001fbd8:	240282c4 	.word	0x240282c4
9001fbdc:	9001dd7b 	.word	0x9001dd7b
9001fbe0:	240000b0 	.word	0x240000b0

9001fbe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001fbe4:	b538      	push	{r3, r4, r5, lr}
9001fbe6:	4c15      	ldr	r4, [pc, #84]	; (9001fc3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001fbe8:	4605      	mov	r5, r0
9001fbea:	7823      	ldrb	r3, [r4, #0]
9001fbec:	f3bf 8f5b 	dmb	ish
9001fbf0:	07da      	lsls	r2, r3, #31
9001fbf2:	d40b      	bmi.n	9001fc0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fbf4:	4620      	mov	r0, r4
9001fbf6:	f007 fd50 	bl	9002769a <__cxa_guard_acquire>
9001fbfa:	b138      	cbz	r0, 9001fc0c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fbfc:	4620      	mov	r0, r4
9001fbfe:	f007 fd58 	bl	900276b2 <__cxa_guard_release>
9001fc02:	4a0f      	ldr	r2, [pc, #60]	; (9001fc40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001fc04:	490f      	ldr	r1, [pc, #60]	; (9001fc44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001fc06:	4810      	ldr	r0, [pc, #64]	; (9001fc48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001fc08:	f007 fd40 	bl	9002768c <__aeabi_atexit>
9001fc0c:	4c0f      	ldr	r4, [pc, #60]	; (9001fc4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001fc0e:	7823      	ldrb	r3, [r4, #0]
9001fc10:	f3bf 8f5b 	dmb	ish
9001fc14:	07db      	lsls	r3, r3, #31
9001fc16:	d40b      	bmi.n	9001fc30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fc18:	4620      	mov	r0, r4
9001fc1a:	f007 fd3e 	bl	9002769a <__cxa_guard_acquire>
9001fc1e:	b138      	cbz	r0, 9001fc30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fc20:	4620      	mov	r0, r4
9001fc22:	f007 fd46 	bl	900276b2 <__cxa_guard_release>
9001fc26:	4a06      	ldr	r2, [pc, #24]	; (9001fc40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001fc28:	4909      	ldr	r1, [pc, #36]	; (9001fc50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001fc2a:	480a      	ldr	r0, [pc, #40]	; (9001fc54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001fc2c:	f007 fd2e 	bl	9002768c <__aeabi_atexit>
9001fc30:	4b05      	ldr	r3, [pc, #20]	; (9001fc48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001fc32:	60ab      	str	r3, [r5, #8]
9001fc34:	4b07      	ldr	r3, [pc, #28]	; (9001fc54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001fc36:	60eb      	str	r3, [r5, #12]
9001fc38:	bd38      	pop	{r3, r4, r5, pc}
9001fc3a:	bf00      	nop
9001fc3c:	24028298 	.word	0x24028298
9001fc40:	24000000 	.word	0x24000000
9001fc44:	9001dd81 	.word	0x9001dd81
9001fc48:	24000084 	.word	0x24000084
9001fc4c:	2402829c 	.word	0x2402829c
9001fc50:	9001dd7f 	.word	0x9001dd7f
9001fc54:	24000088 	.word	0x24000088

9001fc58 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001fc58:	b510      	push	{r4, lr}
9001fc5a:	4604      	mov	r4, r0
9001fc5c:	f7ff ff88 	bl	9001fb70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001fc60:	4620      	mov	r0, r4
9001fc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fc66:	f7ff bfbd 	b.w	9001fbe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001fc6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001fc6c:	b538      	push	{r3, r4, r5, lr}
9001fc6e:	4c15      	ldr	r4, [pc, #84]	; (9001fcc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001fc70:	4605      	mov	r5, r0
9001fc72:	7823      	ldrb	r3, [r4, #0]
9001fc74:	f3bf 8f5b 	dmb	ish
9001fc78:	07da      	lsls	r2, r3, #31
9001fc7a:	d40b      	bmi.n	9001fc94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fc7c:	4620      	mov	r0, r4
9001fc7e:	f007 fd0c 	bl	9002769a <__cxa_guard_acquire>
9001fc82:	b138      	cbz	r0, 9001fc94 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fc84:	4620      	mov	r0, r4
9001fc86:	f007 fd14 	bl	900276b2 <__cxa_guard_release>
9001fc8a:	4a0f      	ldr	r2, [pc, #60]	; (9001fcc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fc8c:	490f      	ldr	r1, [pc, #60]	; (9001fccc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001fc8e:	4810      	ldr	r0, [pc, #64]	; (9001fcd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fc90:	f007 fcfc 	bl	9002768c <__aeabi_atexit>
9001fc94:	4c0f      	ldr	r4, [pc, #60]	; (9001fcd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001fc96:	7823      	ldrb	r3, [r4, #0]
9001fc98:	f3bf 8f5b 	dmb	ish
9001fc9c:	07db      	lsls	r3, r3, #31
9001fc9e:	d40b      	bmi.n	9001fcb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fca0:	4620      	mov	r0, r4
9001fca2:	f007 fcfa 	bl	9002769a <__cxa_guard_acquire>
9001fca6:	b138      	cbz	r0, 9001fcb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fca8:	4620      	mov	r0, r4
9001fcaa:	f007 fd02 	bl	900276b2 <__cxa_guard_release>
9001fcae:	4a06      	ldr	r2, [pc, #24]	; (9001fcc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fcb0:	4909      	ldr	r1, [pc, #36]	; (9001fcd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001fcb2:	480a      	ldr	r0, [pc, #40]	; (9001fcdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fcb4:	f007 fcea 	bl	9002768c <__aeabi_atexit>
9001fcb8:	4b05      	ldr	r3, [pc, #20]	; (9001fcd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fcba:	622b      	str	r3, [r5, #32]
9001fcbc:	4b07      	ldr	r3, [pc, #28]	; (9001fcdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fcbe:	626b      	str	r3, [r5, #36]	; 0x24
9001fcc0:	bd38      	pop	{r3, r4, r5, pc}
9001fcc2:	bf00      	nop
9001fcc4:	240282c8 	.word	0x240282c8
9001fcc8:	24000000 	.word	0x24000000
9001fccc:	9001dd75 	.word	0x9001dd75
9001fcd0:	240000b4 	.word	0x240000b4
9001fcd4:	240282cc 	.word	0x240282cc
9001fcd8:	9001dd73 	.word	0x9001dd73
9001fcdc:	240000b8 	.word	0x240000b8

9001fce0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001fce0:	b538      	push	{r3, r4, r5, lr}
9001fce2:	4c15      	ldr	r4, [pc, #84]	; (9001fd38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001fce4:	4605      	mov	r5, r0
9001fce6:	7823      	ldrb	r3, [r4, #0]
9001fce8:	f3bf 8f5b 	dmb	ish
9001fcec:	07da      	lsls	r2, r3, #31
9001fcee:	d40b      	bmi.n	9001fd08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fcf0:	4620      	mov	r0, r4
9001fcf2:	f007 fcd2 	bl	9002769a <__cxa_guard_acquire>
9001fcf6:	b138      	cbz	r0, 9001fd08 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fcf8:	4620      	mov	r0, r4
9001fcfa:	f007 fcda 	bl	900276b2 <__cxa_guard_release>
9001fcfe:	4a0f      	ldr	r2, [pc, #60]	; (9001fd3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fd00:	490f      	ldr	r1, [pc, #60]	; (9001fd40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001fd02:	4810      	ldr	r0, [pc, #64]	; (9001fd44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fd04:	f007 fcc2 	bl	9002768c <__aeabi_atexit>
9001fd08:	4c0f      	ldr	r4, [pc, #60]	; (9001fd48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001fd0a:	7823      	ldrb	r3, [r4, #0]
9001fd0c:	f3bf 8f5b 	dmb	ish
9001fd10:	07db      	lsls	r3, r3, #31
9001fd12:	d40b      	bmi.n	9001fd2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fd14:	4620      	mov	r0, r4
9001fd16:	f007 fcc0 	bl	9002769a <__cxa_guard_acquire>
9001fd1a:	b138      	cbz	r0, 9001fd2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fd1c:	4620      	mov	r0, r4
9001fd1e:	f007 fcc8 	bl	900276b2 <__cxa_guard_release>
9001fd22:	4a06      	ldr	r2, [pc, #24]	; (9001fd3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fd24:	4909      	ldr	r1, [pc, #36]	; (9001fd4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001fd26:	480a      	ldr	r0, [pc, #40]	; (9001fd50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fd28:	f007 fcb0 	bl	9002768c <__aeabi_atexit>
9001fd2c:	4b05      	ldr	r3, [pc, #20]	; (9001fd44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fd2e:	61ab      	str	r3, [r5, #24]
9001fd30:	4b07      	ldr	r3, [pc, #28]	; (9001fd50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fd32:	61eb      	str	r3, [r5, #28]
9001fd34:	bd38      	pop	{r3, r4, r5, pc}
9001fd36:	bf00      	nop
9001fd38:	240282a0 	.word	0x240282a0
9001fd3c:	24000000 	.word	0x24000000
9001fd40:	9001dd79 	.word	0x9001dd79
9001fd44:	2400008c 	.word	0x2400008c
9001fd48:	240282a4 	.word	0x240282a4
9001fd4c:	9001dd77 	.word	0x9001dd77
9001fd50:	24000090 	.word	0x24000090

9001fd54 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001fd54:	b510      	push	{r4, lr}
9001fd56:	4604      	mov	r4, r0
9001fd58:	f7ff ff88 	bl	9001fc6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001fd5c:	4620      	mov	r0, r4
9001fd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fd62:	f7ff bfbd 	b.w	9001fce0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001fd68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001fd68:	b538      	push	{r3, r4, r5, lr}
9001fd6a:	4c15      	ldr	r4, [pc, #84]	; (9001fdc0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001fd6c:	4605      	mov	r5, r0
9001fd6e:	7823      	ldrb	r3, [r4, #0]
9001fd70:	f3bf 8f5b 	dmb	ish
9001fd74:	07da      	lsls	r2, r3, #31
9001fd76:	d40b      	bmi.n	9001fd90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fd78:	4620      	mov	r0, r4
9001fd7a:	f007 fc8e 	bl	9002769a <__cxa_guard_acquire>
9001fd7e:	b138      	cbz	r0, 9001fd90 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fd80:	4620      	mov	r0, r4
9001fd82:	f007 fc96 	bl	900276b2 <__cxa_guard_release>
9001fd86:	4a0f      	ldr	r2, [pc, #60]	; (9001fdc4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fd88:	490f      	ldr	r1, [pc, #60]	; (9001fdc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001fd8a:	4810      	ldr	r0, [pc, #64]	; (9001fdcc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fd8c:	f007 fc7e 	bl	9002768c <__aeabi_atexit>
9001fd90:	4c0f      	ldr	r4, [pc, #60]	; (9001fdd0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001fd92:	7823      	ldrb	r3, [r4, #0]
9001fd94:	f3bf 8f5b 	dmb	ish
9001fd98:	07db      	lsls	r3, r3, #31
9001fd9a:	d40b      	bmi.n	9001fdb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fd9c:	4620      	mov	r0, r4
9001fd9e:	f007 fc7c 	bl	9002769a <__cxa_guard_acquire>
9001fda2:	b138      	cbz	r0, 9001fdb4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fda4:	4620      	mov	r0, r4
9001fda6:	f007 fc84 	bl	900276b2 <__cxa_guard_release>
9001fdaa:	4a06      	ldr	r2, [pc, #24]	; (9001fdc4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fdac:	4909      	ldr	r1, [pc, #36]	; (9001fdd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001fdae:	480a      	ldr	r0, [pc, #40]	; (9001fdd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fdb0:	f007 fc6c 	bl	9002768c <__aeabi_atexit>
9001fdb4:	4b05      	ldr	r3, [pc, #20]	; (9001fdcc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fdb6:	632b      	str	r3, [r5, #48]	; 0x30
9001fdb8:	4b07      	ldr	r3, [pc, #28]	; (9001fdd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fdba:	636b      	str	r3, [r5, #52]	; 0x34
9001fdbc:	bd38      	pop	{r3, r4, r5, pc}
9001fdbe:	bf00      	nop
9001fdc0:	240282d8 	.word	0x240282d8
9001fdc4:	24000000 	.word	0x24000000
9001fdc8:	9001dd6d 	.word	0x9001dd6d
9001fdcc:	240000c4 	.word	0x240000c4
9001fdd0:	240282dc 	.word	0x240282dc
9001fdd4:	9001dd6b 	.word	0x9001dd6b
9001fdd8:	240000c8 	.word	0x240000c8

9001fddc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001fddc:	b538      	push	{r3, r4, r5, lr}
9001fdde:	4c15      	ldr	r4, [pc, #84]	; (9001fe34 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001fde0:	4605      	mov	r5, r0
9001fde2:	7823      	ldrb	r3, [r4, #0]
9001fde4:	f3bf 8f5b 	dmb	ish
9001fde8:	07da      	lsls	r2, r3, #31
9001fdea:	d40b      	bmi.n	9001fe04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fdec:	4620      	mov	r0, r4
9001fdee:	f007 fc54 	bl	9002769a <__cxa_guard_acquire>
9001fdf2:	b138      	cbz	r0, 9001fe04 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fdf4:	4620      	mov	r0, r4
9001fdf6:	f007 fc5c 	bl	900276b2 <__cxa_guard_release>
9001fdfa:	4a0f      	ldr	r2, [pc, #60]	; (9001fe38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fdfc:	490f      	ldr	r1, [pc, #60]	; (9001fe3c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001fdfe:	4810      	ldr	r0, [pc, #64]	; (9001fe40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fe00:	f007 fc44 	bl	9002768c <__aeabi_atexit>
9001fe04:	4c0f      	ldr	r4, [pc, #60]	; (9001fe44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001fe06:	7823      	ldrb	r3, [r4, #0]
9001fe08:	f3bf 8f5b 	dmb	ish
9001fe0c:	07db      	lsls	r3, r3, #31
9001fe0e:	d40b      	bmi.n	9001fe28 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fe10:	4620      	mov	r0, r4
9001fe12:	f007 fc42 	bl	9002769a <__cxa_guard_acquire>
9001fe16:	b138      	cbz	r0, 9001fe28 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fe18:	4620      	mov	r0, r4
9001fe1a:	f007 fc4a 	bl	900276b2 <__cxa_guard_release>
9001fe1e:	4a06      	ldr	r2, [pc, #24]	; (9001fe38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fe20:	4909      	ldr	r1, [pc, #36]	; (9001fe48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001fe22:	480a      	ldr	r0, [pc, #40]	; (9001fe4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fe24:	f007 fc32 	bl	9002768c <__aeabi_atexit>
9001fe28:	4b05      	ldr	r3, [pc, #20]	; (9001fe40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fe2a:	62ab      	str	r3, [r5, #40]	; 0x28
9001fe2c:	4b07      	ldr	r3, [pc, #28]	; (9001fe4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fe2e:	62eb      	str	r3, [r5, #44]	; 0x2c
9001fe30:	bd38      	pop	{r3, r4, r5, pc}
9001fe32:	bf00      	nop
9001fe34:	240282a8 	.word	0x240282a8
9001fe38:	24000000 	.word	0x24000000
9001fe3c:	9001dd71 	.word	0x9001dd71
9001fe40:	24000094 	.word	0x24000094
9001fe44:	240282ac 	.word	0x240282ac
9001fe48:	9001dd6f 	.word	0x9001dd6f
9001fe4c:	24000098 	.word	0x24000098

9001fe50 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001fe50:	b510      	push	{r4, lr}
9001fe52:	4604      	mov	r4, r0
9001fe54:	f7ff ff88 	bl	9001fd68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001fe58:	4620      	mov	r0, r4
9001fe5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fe5e:	f7ff bfbd 	b.w	9001fddc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001fe64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001fe64:	b538      	push	{r3, r4, r5, lr}
9001fe66:	4c15      	ldr	r4, [pc, #84]	; (9001febc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001fe68:	4605      	mov	r5, r0
9001fe6a:	7823      	ldrb	r3, [r4, #0]
9001fe6c:	f3bf 8f5b 	dmb	ish
9001fe70:	07da      	lsls	r2, r3, #31
9001fe72:	d40b      	bmi.n	9001fe8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fe74:	4620      	mov	r0, r4
9001fe76:	f007 fc10 	bl	9002769a <__cxa_guard_acquire>
9001fe7a:	b138      	cbz	r0, 9001fe8c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fe7c:	4620      	mov	r0, r4
9001fe7e:	f007 fc18 	bl	900276b2 <__cxa_guard_release>
9001fe82:	4a0f      	ldr	r2, [pc, #60]	; (9001fec0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fe84:	490f      	ldr	r1, [pc, #60]	; (9001fec4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001fe86:	4810      	ldr	r0, [pc, #64]	; (9001fec8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001fe88:	f007 fc00 	bl	9002768c <__aeabi_atexit>
9001fe8c:	4c0f      	ldr	r4, [pc, #60]	; (9001fecc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001fe8e:	7823      	ldrb	r3, [r4, #0]
9001fe90:	f3bf 8f5b 	dmb	ish
9001fe94:	07db      	lsls	r3, r3, #31
9001fe96:	d40b      	bmi.n	9001feb0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fe98:	4620      	mov	r0, r4
9001fe9a:	f007 fbfe 	bl	9002769a <__cxa_guard_acquire>
9001fe9e:	b138      	cbz	r0, 9001feb0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fea0:	4620      	mov	r0, r4
9001fea2:	f007 fc06 	bl	900276b2 <__cxa_guard_release>
9001fea6:	4a06      	ldr	r2, [pc, #24]	; (9001fec0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fea8:	4909      	ldr	r1, [pc, #36]	; (9001fed0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001feaa:	480a      	ldr	r0, [pc, #40]	; (9001fed4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001feac:	f007 fbee 	bl	9002768c <__aeabi_atexit>
9001feb0:	4b05      	ldr	r3, [pc, #20]	; (9001fec8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001feb2:	652b      	str	r3, [r5, #80]	; 0x50
9001feb4:	4b07      	ldr	r3, [pc, #28]	; (9001fed4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001feb6:	656b      	str	r3, [r5, #84]	; 0x54
9001feb8:	bd38      	pop	{r3, r4, r5, pc}
9001feba:	bf00      	nop
9001febc:	240282e0 	.word	0x240282e0
9001fec0:	24000000 	.word	0x24000000
9001fec4:	9001dd5d 	.word	0x9001dd5d
9001fec8:	240000cc 	.word	0x240000cc
9001fecc:	240282e4 	.word	0x240282e4
9001fed0:	9001dd5b 	.word	0x9001dd5b
9001fed4:	240000d0 	.word	0x240000d0

9001fed8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001fed8:	b538      	push	{r3, r4, r5, lr}
9001feda:	4c15      	ldr	r4, [pc, #84]	; (9001ff30 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001fedc:	4605      	mov	r5, r0
9001fede:	7823      	ldrb	r3, [r4, #0]
9001fee0:	f3bf 8f5b 	dmb	ish
9001fee4:	07da      	lsls	r2, r3, #31
9001fee6:	d40b      	bmi.n	9001ff00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fee8:	4620      	mov	r0, r4
9001feea:	f007 fbd6 	bl	9002769a <__cxa_guard_acquire>
9001feee:	b138      	cbz	r0, 9001ff00 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fef0:	4620      	mov	r0, r4
9001fef2:	f007 fbde 	bl	900276b2 <__cxa_guard_release>
9001fef6:	4a0f      	ldr	r2, [pc, #60]	; (9001ff34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001fef8:	490f      	ldr	r1, [pc, #60]	; (9001ff38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001fefa:	4810      	ldr	r0, [pc, #64]	; (9001ff3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001fefc:	f007 fbc6 	bl	9002768c <__aeabi_atexit>
9001ff00:	4c0f      	ldr	r4, [pc, #60]	; (9001ff40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001ff02:	7823      	ldrb	r3, [r4, #0]
9001ff04:	f3bf 8f5b 	dmb	ish
9001ff08:	07db      	lsls	r3, r3, #31
9001ff0a:	d40b      	bmi.n	9001ff24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001ff0c:	4620      	mov	r0, r4
9001ff0e:	f007 fbc4 	bl	9002769a <__cxa_guard_acquire>
9001ff12:	b138      	cbz	r0, 9001ff24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001ff14:	4620      	mov	r0, r4
9001ff16:	f007 fbcc 	bl	900276b2 <__cxa_guard_release>
9001ff1a:	4a06      	ldr	r2, [pc, #24]	; (9001ff34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001ff1c:	4909      	ldr	r1, [pc, #36]	; (9001ff44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001ff1e:	480a      	ldr	r0, [pc, #40]	; (9001ff48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001ff20:	f007 fbb4 	bl	9002768c <__aeabi_atexit>
9001ff24:	4b05      	ldr	r3, [pc, #20]	; (9001ff3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001ff26:	64ab      	str	r3, [r5, #72]	; 0x48
9001ff28:	4b07      	ldr	r3, [pc, #28]	; (9001ff48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001ff2a:	64eb      	str	r3, [r5, #76]	; 0x4c
9001ff2c:	bd38      	pop	{r3, r4, r5, pc}
9001ff2e:	bf00      	nop
9001ff30:	240282e8 	.word	0x240282e8
9001ff34:	24000000 	.word	0x24000000
9001ff38:	9001dd61 	.word	0x9001dd61
9001ff3c:	240000d4 	.word	0x240000d4
9001ff40:	240282ec 	.word	0x240282ec
9001ff44:	9001dd5f 	.word	0x9001dd5f
9001ff48:	240000d8 	.word	0x240000d8

9001ff4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001ff4c:	b538      	push	{r3, r4, r5, lr}
9001ff4e:	4c15      	ldr	r4, [pc, #84]	; (9001ffa4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001ff50:	4605      	mov	r5, r0
9001ff52:	7823      	ldrb	r3, [r4, #0]
9001ff54:	f3bf 8f5b 	dmb	ish
9001ff58:	07da      	lsls	r2, r3, #31
9001ff5a:	d40b      	bmi.n	9001ff74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001ff5c:	4620      	mov	r0, r4
9001ff5e:	f007 fb9c 	bl	9002769a <__cxa_guard_acquire>
9001ff62:	b138      	cbz	r0, 9001ff74 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001ff64:	4620      	mov	r0, r4
9001ff66:	f007 fba4 	bl	900276b2 <__cxa_guard_release>
9001ff6a:	4a0f      	ldr	r2, [pc, #60]	; (9001ffa8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001ff6c:	490f      	ldr	r1, [pc, #60]	; (9001ffac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001ff6e:	4810      	ldr	r0, [pc, #64]	; (9001ffb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001ff70:	f007 fb8c 	bl	9002768c <__aeabi_atexit>
9001ff74:	4c0f      	ldr	r4, [pc, #60]	; (9001ffb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001ff76:	7823      	ldrb	r3, [r4, #0]
9001ff78:	f3bf 8f5b 	dmb	ish
9001ff7c:	07db      	lsls	r3, r3, #31
9001ff7e:	d40b      	bmi.n	9001ff98 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001ff80:	4620      	mov	r0, r4
9001ff82:	f007 fb8a 	bl	9002769a <__cxa_guard_acquire>
9001ff86:	b138      	cbz	r0, 9001ff98 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001ff88:	4620      	mov	r0, r4
9001ff8a:	f007 fb92 	bl	900276b2 <__cxa_guard_release>
9001ff8e:	4a06      	ldr	r2, [pc, #24]	; (9001ffa8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001ff90:	4909      	ldr	r1, [pc, #36]	; (9001ffb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001ff92:	480a      	ldr	r0, [pc, #40]	; (9001ffbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001ff94:	f007 fb7a 	bl	9002768c <__aeabi_atexit>
9001ff98:	4b05      	ldr	r3, [pc, #20]	; (9001ffb0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001ff9a:	642b      	str	r3, [r5, #64]	; 0x40
9001ff9c:	4b07      	ldr	r3, [pc, #28]	; (9001ffbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001ff9e:	646b      	str	r3, [r5, #68]	; 0x44
9001ffa0:	bd38      	pop	{r3, r4, r5, pc}
9001ffa2:	bf00      	nop
9001ffa4:	240282b0 	.word	0x240282b0
9001ffa8:	24000000 	.word	0x24000000
9001ffac:	9001dd65 	.word	0x9001dd65
9001ffb0:	2400009c 	.word	0x2400009c
9001ffb4:	240282b4 	.word	0x240282b4
9001ffb8:	9001dd63 	.word	0x9001dd63
9001ffbc:	240000a0 	.word	0x240000a0

9001ffc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001ffc0:	b538      	push	{r3, r4, r5, lr}
9001ffc2:	4c15      	ldr	r4, [pc, #84]	; (90020018 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001ffc4:	4605      	mov	r5, r0
9001ffc6:	7823      	ldrb	r3, [r4, #0]
9001ffc8:	f3bf 8f5b 	dmb	ish
9001ffcc:	07da      	lsls	r2, r3, #31
9001ffce:	d40b      	bmi.n	9001ffe8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001ffd0:	4620      	mov	r0, r4
9001ffd2:	f007 fb62 	bl	9002769a <__cxa_guard_acquire>
9001ffd6:	b138      	cbz	r0, 9001ffe8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001ffd8:	4620      	mov	r0, r4
9001ffda:	f007 fb6a 	bl	900276b2 <__cxa_guard_release>
9001ffde:	4a0f      	ldr	r2, [pc, #60]	; (9002001c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001ffe0:	490f      	ldr	r1, [pc, #60]	; (90020020 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001ffe2:	4810      	ldr	r0, [pc, #64]	; (90020024 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001ffe4:	f007 fb52 	bl	9002768c <__aeabi_atexit>
9001ffe8:	4c0f      	ldr	r4, [pc, #60]	; (90020028 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001ffea:	7823      	ldrb	r3, [r4, #0]
9001ffec:	f3bf 8f5b 	dmb	ish
9001fff0:	07db      	lsls	r3, r3, #31
9001fff2:	d40b      	bmi.n	9002000c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fff4:	4620      	mov	r0, r4
9001fff6:	f007 fb50 	bl	9002769a <__cxa_guard_acquire>
9001fffa:	b138      	cbz	r0, 9002000c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fffc:	4620      	mov	r0, r4
9001fffe:	f007 fb58 	bl	900276b2 <__cxa_guard_release>
90020002:	4a06      	ldr	r2, [pc, #24]	; (9002001c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
90020004:	4909      	ldr	r1, [pc, #36]	; (9002002c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
90020006:	480a      	ldr	r0, [pc, #40]	; (90020030 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
90020008:	f007 fb40 	bl	9002768c <__aeabi_atexit>
9002000c:	4b05      	ldr	r3, [pc, #20]	; (90020024 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9002000e:	63ab      	str	r3, [r5, #56]	; 0x38
90020010:	4b07      	ldr	r3, [pc, #28]	; (90020030 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
90020012:	63eb      	str	r3, [r5, #60]	; 0x3c
90020014:	bd38      	pop	{r3, r4, r5, pc}
90020016:	bf00      	nop
90020018:	240282d0 	.word	0x240282d0
9002001c:	24000000 	.word	0x24000000
90020020:	9001dd69 	.word	0x9001dd69
90020024:	240000bc 	.word	0x240000bc
90020028:	240282d4 	.word	0x240282d4
9002002c:	9001dd67 	.word	0x9001dd67
90020030:	240000c0 	.word	0x240000c0

90020034 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
90020034:	b510      	push	{r4, lr}
90020036:	4604      	mov	r4, r0
90020038:	f7ff ff14 	bl	9001fe64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9002003c:	4620      	mov	r0, r4
9002003e:	f7ff ff85 	bl	9001ff4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
90020042:	4620      	mov	r0, r4
90020044:	f7ff ff48 	bl	9001fed8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
90020048:	4620      	mov	r0, r4
9002004a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002004e:	f7ff bfb7 	b.w	9001ffc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

90020054 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
90020054:	b538      	push	{r3, r4, r5, lr}
90020056:	4c15      	ldr	r4, [pc, #84]	; (900200ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
90020058:	4605      	mov	r5, r0
9002005a:	7823      	ldrb	r3, [r4, #0]
9002005c:	f3bf 8f5b 	dmb	ish
90020060:	07da      	lsls	r2, r3, #31
90020062:	d40b      	bmi.n	9002007c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
90020064:	4620      	mov	r0, r4
90020066:	f007 fb18 	bl	9002769a <__cxa_guard_acquire>
9002006a:	b138      	cbz	r0, 9002007c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9002006c:	4620      	mov	r0, r4
9002006e:	f007 fb20 	bl	900276b2 <__cxa_guard_release>
90020072:	4a0f      	ldr	r2, [pc, #60]	; (900200b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
90020074:	490f      	ldr	r1, [pc, #60]	; (900200b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
90020076:	4810      	ldr	r0, [pc, #64]	; (900200b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
90020078:	f007 fb08 	bl	9002768c <__aeabi_atexit>
9002007c:	4c0f      	ldr	r4, [pc, #60]	; (900200bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9002007e:	7823      	ldrb	r3, [r4, #0]
90020080:	f3bf 8f5b 	dmb	ish
90020084:	07db      	lsls	r3, r3, #31
90020086:	d40b      	bmi.n	900200a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
90020088:	4620      	mov	r0, r4
9002008a:	f007 fb06 	bl	9002769a <__cxa_guard_acquire>
9002008e:	b138      	cbz	r0, 900200a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
90020090:	4620      	mov	r0, r4
90020092:	f007 fb0e 	bl	900276b2 <__cxa_guard_release>
90020096:	4a06      	ldr	r2, [pc, #24]	; (900200b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
90020098:	4909      	ldr	r1, [pc, #36]	; (900200c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9002009a:	480a      	ldr	r0, [pc, #40]	; (900200c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9002009c:	f007 faf6 	bl	9002768c <__aeabi_atexit>
900200a0:	4b05      	ldr	r3, [pc, #20]	; (900200b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
900200a2:	662b      	str	r3, [r5, #96]	; 0x60
900200a4:	4b07      	ldr	r3, [pc, #28]	; (900200c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
900200a6:	666b      	str	r3, [r5, #100]	; 0x64
900200a8:	bd38      	pop	{r3, r4, r5, pc}
900200aa:	bf00      	nop
900200ac:	240282b8 	.word	0x240282b8
900200b0:	24000000 	.word	0x24000000
900200b4:	9001dd55 	.word	0x9001dd55
900200b8:	240000a4 	.word	0x240000a4
900200bc:	240282bc 	.word	0x240282bc
900200c0:	9001dd53 	.word	0x9001dd53
900200c4:	240000a8 	.word	0x240000a8

900200c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
900200c8:	b538      	push	{r3, r4, r5, lr}
900200ca:	4c15      	ldr	r4, [pc, #84]	; (90020120 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
900200cc:	4605      	mov	r5, r0
900200ce:	7823      	ldrb	r3, [r4, #0]
900200d0:	f3bf 8f5b 	dmb	ish
900200d4:	07da      	lsls	r2, r3, #31
900200d6:	d40b      	bmi.n	900200f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
900200d8:	4620      	mov	r0, r4
900200da:	f007 fade 	bl	9002769a <__cxa_guard_acquire>
900200de:	b138      	cbz	r0, 900200f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
900200e0:	4620      	mov	r0, r4
900200e2:	f007 fae6 	bl	900276b2 <__cxa_guard_release>
900200e6:	4a0f      	ldr	r2, [pc, #60]	; (90020124 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
900200e8:	490f      	ldr	r1, [pc, #60]	; (90020128 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
900200ea:	4810      	ldr	r0, [pc, #64]	; (9002012c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
900200ec:	f007 face 	bl	9002768c <__aeabi_atexit>
900200f0:	4c0f      	ldr	r4, [pc, #60]	; (90020130 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
900200f2:	7823      	ldrb	r3, [r4, #0]
900200f4:	f3bf 8f5b 	dmb	ish
900200f8:	07db      	lsls	r3, r3, #31
900200fa:	d40b      	bmi.n	90020114 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
900200fc:	4620      	mov	r0, r4
900200fe:	f007 facc 	bl	9002769a <__cxa_guard_acquire>
90020102:	b138      	cbz	r0, 90020114 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
90020104:	4620      	mov	r0, r4
90020106:	f007 fad4 	bl	900276b2 <__cxa_guard_release>
9002010a:	4a06      	ldr	r2, [pc, #24]	; (90020124 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9002010c:	4909      	ldr	r1, [pc, #36]	; (90020134 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9002010e:	480a      	ldr	r0, [pc, #40]	; (90020138 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
90020110:	f007 fabc 	bl	9002768c <__aeabi_atexit>
90020114:	4b05      	ldr	r3, [pc, #20]	; (9002012c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
90020116:	65ab      	str	r3, [r5, #88]	; 0x58
90020118:	4b07      	ldr	r3, [pc, #28]	; (90020138 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9002011a:	65eb      	str	r3, [r5, #92]	; 0x5c
9002011c:	bd38      	pop	{r3, r4, r5, pc}
9002011e:	bf00      	nop
90020120:	24028290 	.word	0x24028290
90020124:	24000000 	.word	0x24000000
90020128:	9001dd59 	.word	0x9001dd59
9002012c:	2400007c 	.word	0x2400007c
90020130:	24028294 	.word	0x24028294
90020134:	9001dd57 	.word	0x9001dd57
90020138:	24000080 	.word	0x24000080

9002013c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9002013c:	b510      	push	{r4, lr}
9002013e:	4604      	mov	r4, r0
90020140:	f7ff ff88 	bl	90020054 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
90020144:	4620      	mov	r0, r4
90020146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002014a:	f7ff bfbd 	b.w	900200c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

90020150 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
90020150:	b538      	push	{r3, r4, r5, lr}
90020152:	4c15      	ldr	r4, [pc, #84]	; (900201a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
90020154:	4605      	mov	r5, r0
90020156:	7823      	ldrb	r3, [r4, #0]
90020158:	f3bf 8f5b 	dmb	ish
9002015c:	07da      	lsls	r2, r3, #31
9002015e:	d40b      	bmi.n	90020178 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020160:	4620      	mov	r0, r4
90020162:	f007 fa9a 	bl	9002769a <__cxa_guard_acquire>
90020166:	b138      	cbz	r0, 90020178 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020168:	4620      	mov	r0, r4
9002016a:	f007 faa2 	bl	900276b2 <__cxa_guard_release>
9002016e:	4a0f      	ldr	r2, [pc, #60]	; (900201ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020170:	490f      	ldr	r1, [pc, #60]	; (900201b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
90020172:	4810      	ldr	r0, [pc, #64]	; (900201b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
90020174:	f007 fa8a 	bl	9002768c <__aeabi_atexit>
90020178:	4c0f      	ldr	r4, [pc, #60]	; (900201b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9002017a:	7823      	ldrb	r3, [r4, #0]
9002017c:	f3bf 8f5b 	dmb	ish
90020180:	07db      	lsls	r3, r3, #31
90020182:	d40b      	bmi.n	9002019c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
90020184:	4620      	mov	r0, r4
90020186:	f007 fa88 	bl	9002769a <__cxa_guard_acquire>
9002018a:	b138      	cbz	r0, 9002019c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9002018c:	4620      	mov	r0, r4
9002018e:	f007 fa90 	bl	900276b2 <__cxa_guard_release>
90020192:	4a06      	ldr	r2, [pc, #24]	; (900201ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020194:	4909      	ldr	r1, [pc, #36]	; (900201bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
90020196:	480a      	ldr	r0, [pc, #40]	; (900201c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020198:	f007 fa78 	bl	9002768c <__aeabi_atexit>
9002019c:	4b05      	ldr	r3, [pc, #20]	; (900201b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9002019e:	672b      	str	r3, [r5, #112]	; 0x70
900201a0:	4b07      	ldr	r3, [pc, #28]	; (900201c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
900201a2:	676b      	str	r3, [r5, #116]	; 0x74
900201a4:	bd38      	pop	{r3, r4, r5, pc}
900201a6:	bf00      	nop
900201a8:	24028288 	.word	0x24028288
900201ac:	24000000 	.word	0x24000000
900201b0:	9001dd4d 	.word	0x9001dd4d
900201b4:	24000074 	.word	0x24000074
900201b8:	2402828c 	.word	0x2402828c
900201bc:	9001dd4b 	.word	0x9001dd4b
900201c0:	24000078 	.word	0x24000078

900201c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
900201c4:	b538      	push	{r3, r4, r5, lr}
900201c6:	4c15      	ldr	r4, [pc, #84]	; (9002021c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
900201c8:	4605      	mov	r5, r0
900201ca:	7823      	ldrb	r3, [r4, #0]
900201cc:	f3bf 8f5b 	dmb	ish
900201d0:	07da      	lsls	r2, r3, #31
900201d2:	d40b      	bmi.n	900201ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
900201d4:	4620      	mov	r0, r4
900201d6:	f007 fa60 	bl	9002769a <__cxa_guard_acquire>
900201da:	b138      	cbz	r0, 900201ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
900201dc:	4620      	mov	r0, r4
900201de:	f007 fa68 	bl	900276b2 <__cxa_guard_release>
900201e2:	4a0f      	ldr	r2, [pc, #60]	; (90020220 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
900201e4:	490f      	ldr	r1, [pc, #60]	; (90020224 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
900201e6:	4810      	ldr	r0, [pc, #64]	; (90020228 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
900201e8:	f007 fa50 	bl	9002768c <__aeabi_atexit>
900201ec:	4c0f      	ldr	r4, [pc, #60]	; (9002022c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
900201ee:	7823      	ldrb	r3, [r4, #0]
900201f0:	f3bf 8f5b 	dmb	ish
900201f4:	07db      	lsls	r3, r3, #31
900201f6:	d40b      	bmi.n	90020210 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
900201f8:	4620      	mov	r0, r4
900201fa:	f007 fa4e 	bl	9002769a <__cxa_guard_acquire>
900201fe:	b138      	cbz	r0, 90020210 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020200:	4620      	mov	r0, r4
90020202:	f007 fa56 	bl	900276b2 <__cxa_guard_release>
90020206:	4a06      	ldr	r2, [pc, #24]	; (90020220 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020208:	4909      	ldr	r1, [pc, #36]	; (90020230 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9002020a:	480a      	ldr	r0, [pc, #40]	; (90020234 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9002020c:	f007 fa3e 	bl	9002768c <__aeabi_atexit>
90020210:	4b05      	ldr	r3, [pc, #20]	; (90020228 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020212:	66ab      	str	r3, [r5, #104]	; 0x68
90020214:	4b07      	ldr	r3, [pc, #28]	; (90020234 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
90020216:	66eb      	str	r3, [r5, #108]	; 0x6c
90020218:	bd38      	pop	{r3, r4, r5, pc}
9002021a:	bf00      	nop
9002021c:	24028280 	.word	0x24028280
90020220:	24000000 	.word	0x24000000
90020224:	9001dd51 	.word	0x9001dd51
90020228:	2400006c 	.word	0x2400006c
9002022c:	24028284 	.word	0x24028284
90020230:	9001dd4f 	.word	0x9001dd4f
90020234:	24000070 	.word	0x24000070

90020238 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
90020238:	b510      	push	{r4, lr}
9002023a:	4604      	mov	r4, r0
9002023c:	f7ff ff88 	bl	90020150 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
90020240:	4620      	mov	r0, r4
90020242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020246:	f7ff bfbd 	b.w	900201c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9002024a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9002024a:	b510      	push	{r4, lr}
9002024c:	4604      	mov	r4, r0
9002024e:	f7ff fff3 	bl	90020238 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
90020252:	4620      	mov	r0, r4
90020254:	f7ff ff72 	bl	9002013c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
90020258:	4620      	mov	r0, r4
9002025a:	f7ff fdf9 	bl	9001fe50 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9002025e:	4620      	mov	r0, r4
90020260:	f7ff fcfa 	bl	9001fc58 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
90020264:	4620      	mov	r0, r4
90020266:	f7ff fd75 	bl	9001fd54 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9002026a:	4620      	mov	r0, r4
9002026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020270:	f7ff bee0 	b.w	90020034 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

90020274 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
90020274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020278:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9002027c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
90020280:	2d00      	cmp	r5, #0
90020282:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
90020286:	fb05 4c0e 	mla	ip, r5, lr, r4
9002028a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9002028e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
90020292:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
90020296:	eb02 0a0c 	add.w	sl, r2, ip
9002029a:	8808      	ldrh	r0, [r1, #0]
9002029c:	f2c0 80b0 	blt.w	90020400 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
900202a0:	45ab      	cmp	fp, r5
900202a2:	f340 80ad 	ble.w	90020400 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
900202a6:	2c00      	cmp	r4, #0
900202a8:	f2c0 80a8 	blt.w	900203fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
900202ac:	45a6      	cmp	lr, r4
900202ae:	f340 80a5 	ble.w	900203fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
900202b2:	f812 200c 	ldrb.w	r2, [r2, ip]
900202b6:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
900202ba:	1c62      	adds	r2, r4, #1
900202bc:	f100 80a3 	bmi.w	90020406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
900202c0:	4596      	cmp	lr, r2
900202c2:	f340 80a0 	ble.w	90020406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
900202c6:	f1b9 0f00 	cmp.w	r9, #0
900202ca:	f000 809c 	beq.w	90020406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
900202ce:	f89a 2001 	ldrb.w	r2, [sl, #1]
900202d2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
900202d6:	3501      	adds	r5, #1
900202d8:	f100 8099 	bmi.w	9002040e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
900202dc:	45ab      	cmp	fp, r5
900202de:	f340 8096 	ble.w	9002040e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
900202e2:	2f00      	cmp	r7, #0
900202e4:	f000 8093 	beq.w	9002040e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
900202e8:	2c00      	cmp	r4, #0
900202ea:	f2c0 808e 	blt.w	9002040a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
900202ee:	45a6      	cmp	lr, r4
900202f0:	f340 808b 	ble.w	9002040a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
900202f4:	f81a 200e 	ldrb.w	r2, [sl, lr]
900202f8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
900202fc:	3401      	adds	r4, #1
900202fe:	f100 8089 	bmi.w	90020414 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020302:	45a6      	cmp	lr, r4
90020304:	f340 8086 	ble.w	90020414 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020308:	f1b9 0f00 	cmp.w	r9, #0
9002030c:	f000 8082 	beq.w	90020414 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
90020310:	44d6      	add	lr, sl
90020312:	f89e 2001 	ldrb.w	r2, [lr, #1]
90020316:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9002031a:	ea4f 4408 	mov.w	r4, r8, lsl #16
9002031e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90020322:	fb19 fe07 	smulbb	lr, r9, r7
90020326:	f1c7 0210 	rsb	r2, r7, #16
9002032a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002032e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90020332:	eba2 0209 	sub.w	r2, r2, r9
90020336:	ea44 0808 	orr.w	r8, r4, r8
9002033a:	ea4f 440c 	mov.w	r4, ip, lsl #16
9002033e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020342:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90020346:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002034a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9002034e:	ea44 0c0c 	orr.w	ip, r4, ip
90020352:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90020356:	fb04 f40c 	mul.w	r4, r4, ip
9002035a:	fb02 4808 	mla	r8, r2, r8, r4
9002035e:	041a      	lsls	r2, r3, #16
90020360:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020364:	b2b4      	uxth	r4, r6
90020366:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002036a:	43f6      	mvns	r6, r6
9002036c:	4313      	orrs	r3, r2
9002036e:	042a      	lsls	r2, r5, #16
90020370:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020374:	b2f6      	uxtb	r6, r6
90020376:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002037a:	fb0e 8303 	mla	r3, lr, r3, r8
9002037e:	432a      	orrs	r2, r5
90020380:	fb07 3202 	mla	r2, r7, r2, r3
90020384:	10c7      	asrs	r7, r0, #3
90020386:	0d53      	lsrs	r3, r2, #21
90020388:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002038c:	0952      	lsrs	r2, r2, #5
9002038e:	fb17 f706 	smulbb	r7, r7, r6
90020392:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020396:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002039a:	431a      	orrs	r2, r3
9002039c:	b293      	uxth	r3, r2
9002039e:	1202      	asrs	r2, r0, #8
900203a0:	121d      	asrs	r5, r3, #8
900203a2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900203a6:	00c0      	lsls	r0, r0, #3
900203a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900203ac:	fb12 f206 	smulbb	r2, r2, r6
900203b0:	b2c0      	uxtb	r0, r0
900203b2:	fb05 2504 	mla	r5, r5, r4, r2
900203b6:	10da      	asrs	r2, r3, #3
900203b8:	fb10 f006 	smulbb	r0, r0, r6
900203bc:	00db      	lsls	r3, r3, #3
900203be:	b2ad      	uxth	r5, r5
900203c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900203c4:	b2db      	uxtb	r3, r3
900203c6:	fb02 7204 	mla	r2, r2, r4, r7
900203ca:	fb03 0004 	mla	r0, r3, r4, r0
900203ce:	1c6b      	adds	r3, r5, #1
900203d0:	b292      	uxth	r2, r2
900203d2:	b280      	uxth	r0, r0
900203d4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900203d8:	1c43      	adds	r3, r0, #1
900203da:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900203de:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900203e2:	1c50      	adds	r0, r2, #1
900203e4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900203e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900203ec:	0952      	lsrs	r2, r2, #5
900203ee:	432b      	orrs	r3, r5
900203f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900203f4:	4313      	orrs	r3, r2
900203f6:	800b      	strh	r3, [r1, #0]
900203f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900203fc:	4680      	mov	r8, r0
900203fe:	e75c      	b.n	900202ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
90020400:	4684      	mov	ip, r0
90020402:	4680      	mov	r8, r0
90020404:	e767      	b.n	900202d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
90020406:	4684      	mov	ip, r0
90020408:	e765      	b.n	900202d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9002040a:	4605      	mov	r5, r0
9002040c:	e776      	b.n	900202fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9002040e:	4603      	mov	r3, r0
90020410:	4605      	mov	r5, r0
90020412:	e782      	b.n	9002031a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
90020414:	4603      	mov	r3, r0
90020416:	e780      	b.n	9002031a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

90020418 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002041c:	b099      	sub	sp, #100	; 0x64
9002041e:	9215      	str	r2, [sp, #84]	; 0x54
90020420:	9309      	str	r3, [sp, #36]	; 0x24
90020422:	9a27      	ldr	r2, [sp, #156]	; 0x9c
90020424:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
90020428:	9016      	str	r0, [sp, #88]	; 0x58
9002042a:	930d      	str	r3, [sp, #52]	; 0x34
9002042c:	6850      	ldr	r0, [r2, #4]
9002042e:	910c      	str	r1, [sp, #48]	; 0x30
90020430:	6812      	ldr	r2, [r2, #0]
90020432:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
90020436:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9002043a:	fb00 1303 	mla	r3, r0, r3, r1
9002043e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
90020442:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020444:	681b      	ldr	r3, [r3, #0]
90020446:	930b      	str	r3, [sp, #44]	; 0x2c
90020448:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002044a:	685e      	ldr	r6, [r3, #4]
9002044c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002044e:	3604      	adds	r6, #4
90020450:	43db      	mvns	r3, r3
90020452:	b2db      	uxtb	r3, r3
90020454:	930a      	str	r3, [sp, #40]	; 0x28
90020456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020458:	2b00      	cmp	r3, #0
9002045a:	dc03      	bgt.n	90020464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9002045c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9002045e:	2b00      	cmp	r3, #0
90020460:	f340 8225 	ble.w	900208ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
90020464:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020466:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002046a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002046e:	1e48      	subs	r0, r1, #1
90020470:	1e57      	subs	r7, r2, #1
90020472:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020474:	2b00      	cmp	r3, #0
90020476:	f340 80e3 	ble.w	90020640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9002047a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9002047e:	ea4f 4325 	mov.w	r3, r5, asr #16
90020482:	d406      	bmi.n	90020492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020484:	4584      	cmp	ip, r0
90020486:	da04      	bge.n	90020492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020488:	2b00      	cmp	r3, #0
9002048a:	db02      	blt.n	90020492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9002048c:	42bb      	cmp	r3, r7
9002048e:	f2c0 80d8 	blt.w	90020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90020492:	f11c 0c01 	adds.w	ip, ip, #1
90020496:	f100 80c9 	bmi.w	9002062c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002049a:	4561      	cmp	r1, ip
9002049c:	f2c0 80c6 	blt.w	9002062c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900204a0:	3301      	adds	r3, #1
900204a2:	f100 80c3 	bmi.w	9002062c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900204a6:	429a      	cmp	r2, r3
900204a8:	f2c0 80c0 	blt.w	9002062c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900204ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900204b0:	4647      	mov	r7, r8
900204b2:	f1bb 0f00 	cmp.w	fp, #0
900204b6:	f340 80e3 	ble.w	90020680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
900204ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
900204bc:	ea4f 4c25 	mov.w	ip, r5, asr #16
900204c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900204c2:	f3ca 3003 	ubfx	r0, sl, #12, #4
900204c6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900204ca:	ea5f 422a 	movs.w	r2, sl, asr #16
900204ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
900204d2:	689b      	ldr	r3, [r3, #8]
900204d4:	f100 8121 	bmi.w	9002071a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
900204d8:	f103 39ff 	add.w	r9, r3, #4294967295
900204dc:	454a      	cmp	r2, r9
900204de:	f280 811c 	bge.w	9002071a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
900204e2:	f1bc 0f00 	cmp.w	ip, #0
900204e6:	f2c0 8118 	blt.w	9002071a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
900204ea:	f10e 39ff 	add.w	r9, lr, #4294967295
900204ee:	45cc      	cmp	ip, r9
900204f0:	f280 8113 	bge.w	9002071a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
900204f4:	b21b      	sxth	r3, r3
900204f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900204f8:	fb0c 2203 	mla	r2, ip, r3, r2
900204fc:	eb04 0902 	add.w	r9, r4, r2
90020500:	5ca2      	ldrb	r2, [r4, r2]
90020502:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
90020506:	2800      	cmp	r0, #0
90020508:	f000 80fe 	beq.w	90020708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9002050c:	f899 2001 	ldrb.w	r2, [r9, #1]
90020510:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
90020514:	9211      	str	r2, [sp, #68]	; 0x44
90020516:	b151      	cbz	r1, 9002052e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90020518:	eb09 0203 	add.w	r2, r9, r3
9002051c:	f819 3003 	ldrb.w	r3, [r9, r3]
90020520:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020524:	930f      	str	r3, [sp, #60]	; 0x3c
90020526:	7853      	ldrb	r3, [r2, #1]
90020528:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002052c:	9312      	str	r3, [sp, #72]	; 0x48
9002052e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020530:	fb10 f201 	smulbb	r2, r0, r1
90020534:	9c12      	ldr	r4, [sp, #72]	; 0x48
90020536:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9002053a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002053e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90020542:	10d2      	asrs	r2, r2, #3
90020544:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020548:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9002054c:	ea4c 0c03 	orr.w	ip, ip, r3
90020550:	9b12      	ldr	r3, [sp, #72]	; 0x48
90020552:	041b      	lsls	r3, r3, #16
90020554:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020558:	4323      	orrs	r3, r4
9002055a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002055c:	4353      	muls	r3, r2
9002055e:	fb09 330c 	mla	r3, r9, ip, r3
90020562:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90020566:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002056a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002056e:	ea4c 0e0e 	orr.w	lr, ip, lr
90020572:	f1c1 0c10 	rsb	ip, r1, #16
90020576:	ebac 0c00 	sub.w	ip, ip, r0
9002057a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002057e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
90020582:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020588:	0418      	lsls	r0, r3, #16
9002058a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002058e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020592:	4318      	orrs	r0, r3
90020594:	fb02 c200 	mla	r2, r2, r0, ip
90020598:	8838      	ldrh	r0, [r7, #0]
9002059a:	0d53      	lsrs	r3, r2, #21
9002059c:	0952      	lsrs	r2, r2, #5
9002059e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900205a2:	1201      	asrs	r1, r0, #8
900205a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900205a8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
900205ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900205b0:	00c0      	lsls	r0, r0, #3
900205b2:	431a      	orrs	r2, r3
900205b4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
900205b8:	fb11 f104 	smulbb	r1, r1, r4
900205bc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900205c0:	b292      	uxth	r2, r2
900205c2:	fb1e fe04 	smulbb	lr, lr, r4
900205c6:	b2c0      	uxtb	r0, r0
900205c8:	ea4f 2c22 	mov.w	ip, r2, asr #8
900205cc:	fb10 f004 	smulbb	r0, r0, r4
900205d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900205d4:	fb0c 1c03 	mla	ip, ip, r3, r1
900205d8:	10d1      	asrs	r1, r2, #3
900205da:	00d2      	lsls	r2, r2, #3
900205dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900205e0:	fa1f fc8c 	uxth.w	ip, ip
900205e4:	b2d2      	uxtb	r2, r2
900205e6:	fb01 e103 	mla	r1, r1, r3, lr
900205ea:	fb02 0303 	mla	r3, r2, r3, r0
900205ee:	b289      	uxth	r1, r1
900205f0:	b29a      	uxth	r2, r3
900205f2:	f10c 0301 	add.w	r3, ip, #1
900205f6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900205fa:	1c53      	adds	r3, r2, #1
900205fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020600:	1c4a      	adds	r2, r1, #1
90020602:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90020606:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002060a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002060e:	0949      	lsrs	r1, r1, #5
90020610:	ea43 030c 	orr.w	r3, r3, ip
90020614:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020618:	430b      	orrs	r3, r1
9002061a:	803b      	strh	r3, [r7, #0]
9002061c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002061e:	3702      	adds	r7, #2
90020620:	f10b 3bff 	add.w	fp, fp, #4294967295
90020624:	449a      	add	sl, r3
90020626:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020628:	441d      	add	r5, r3
9002062a:	e742      	b.n	900204b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9002062c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002062e:	f108 0802 	add.w	r8, r8, #2
90020632:	449a      	add	sl, r3
90020634:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020636:	441d      	add	r5, r3
90020638:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002063a:	3b01      	subs	r3, #1
9002063c:	9309      	str	r3, [sp, #36]	; 0x24
9002063e:	e718      	b.n	90020472 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90020640:	d023      	beq.n	9002068a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90020642:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020644:	9825      	ldr	r0, [sp, #148]	; 0x94
90020646:	3b01      	subs	r3, #1
90020648:	fb00 a003 	mla	r0, r0, r3, sl
9002064c:	1400      	asrs	r0, r0, #16
9002064e:	f53f af2d 	bmi.w	900204ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020652:	3901      	subs	r1, #1
90020654:	4288      	cmp	r0, r1
90020656:	f6bf af29 	bge.w	900204ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002065a:	9926      	ldr	r1, [sp, #152]	; 0x98
9002065c:	fb01 5303 	mla	r3, r1, r3, r5
90020660:	141b      	asrs	r3, r3, #16
90020662:	f53f af23 	bmi.w	900204ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020666:	3a01      	subs	r2, #1
90020668:	4293      	cmp	r3, r2
9002066a:	f6bf af1f 	bge.w	900204ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002066e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90020672:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
90020676:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9002067a:	f1be 0f00 	cmp.w	lr, #0
9002067e:	dc6c      	bgt.n	9002075a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90020680:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020682:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90020686:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9002068a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002068c:	2b00      	cmp	r3, #0
9002068e:	f340 810e 	ble.w	900208ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
90020692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020696:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020698:	ee30 0a04 	vadd.f32	s0, s0, s8
9002069c:	ee70 0aa4 	vadd.f32	s1, s1, s9
900206a0:	eef0 6a62 	vmov.f32	s13, s5
900206a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
900206a8:	ee31 1a05 	vadd.f32	s2, s2, s10
900206ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900206b0:	ee16 aa90 	vmov	sl, s13
900206b4:	eef0 6a43 	vmov.f32	s13, s6
900206b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900206bc:	ee16 5a90 	vmov	r5, s13
900206c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
900206c4:	ee61 7a27 	vmul.f32	s15, s2, s15
900206c8:	ee77 2a62 	vsub.f32	s5, s14, s5
900206cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
900206d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900206d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900206d8:	ee12 2a90 	vmov	r2, s5
900206dc:	eef0 2a47 	vmov.f32	s5, s14
900206e0:	fb92 f3f3 	sdiv	r3, r2, r3
900206e4:	ee13 2a10 	vmov	r2, s6
900206e8:	9325      	str	r3, [sp, #148]	; 0x94
900206ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
900206ec:	eeb0 3a67 	vmov.f32	s6, s15
900206f0:	fb92 f3f3 	sdiv	r3, r2, r3
900206f4:	9326      	str	r3, [sp, #152]	; 0x98
900206f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900206f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
900206fa:	3b01      	subs	r3, #1
900206fc:	930c      	str	r3, [sp, #48]	; 0x30
900206fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020700:	bf08      	it	eq
90020702:	4613      	moveq	r3, r2
90020704:	9309      	str	r3, [sp, #36]	; 0x24
90020706:	e6a6      	b.n	90020456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90020708:	2900      	cmp	r1, #0
9002070a:	f43f af10 	beq.w	9002052e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002070e:	f819 3003 	ldrb.w	r3, [r9, r3]
90020712:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020716:	930f      	str	r3, [sp, #60]	; 0x3c
90020718:	e709      	b.n	9002052e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002071a:	f112 0901 	adds.w	r9, r2, #1
9002071e:	f53f af7d 	bmi.w	9002061c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020722:	454b      	cmp	r3, r9
90020724:	f6ff af7a 	blt.w	9002061c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020728:	f11c 0901 	adds.w	r9, ip, #1
9002072c:	f53f af76 	bmi.w	9002061c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020730:	45ce      	cmp	lr, r9
90020732:	f6ff af73 	blt.w	9002061c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90020736:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90020738:	b21b      	sxth	r3, r3
9002073a:	9202      	str	r2, [sp, #8]
9002073c:	fa0f f28e 	sxth.w	r2, lr
90020740:	9300      	str	r3, [sp, #0]
90020742:	4633      	mov	r3, r6
90020744:	9201      	str	r2, [sp, #4]
90020746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020748:	e9cd 1405 	strd	r1, r4, [sp, #20]
9002074c:	e9cd c003 	strd	ip, r0, [sp, #12]
90020750:	4639      	mov	r1, r7
90020752:	9816      	ldr	r0, [sp, #88]	; 0x58
90020754:	f7ff fd8e 	bl	90020274 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
90020758:	e760      	b.n	9002061c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002075a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002075c:	ea4f 422a 	mov.w	r2, sl, asr #16
90020760:	1429      	asrs	r1, r5, #16
90020762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90020764:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020768:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9002076c:	f3c5 3003 	ubfx	r0, r5, #12, #4
90020770:	fb03 2101 	mla	r1, r3, r1, r2
90020774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020776:	440a      	add	r2, r1
90020778:	5c61      	ldrb	r1, [r4, r1]
9002077a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9002077e:	f1bc 0f00 	cmp.w	ip, #0
90020782:	f000 808c 	beq.w	9002089e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
90020786:	7857      	ldrb	r7, [r2, #1]
90020788:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9002078c:	9413      	str	r4, [sp, #76]	; 0x4c
9002078e:	b140      	cbz	r0, 900207a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020790:	18d7      	adds	r7, r2, r3
90020792:	5cd3      	ldrb	r3, [r2, r3]
90020794:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020798:	9310      	str	r3, [sp, #64]	; 0x40
9002079a:	787b      	ldrb	r3, [r7, #1]
9002079c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900207a0:	9314      	str	r3, [sp, #80]	; 0x50
900207a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900207a4:	fb1c f200 	smulbb	r2, ip, r0
900207a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
900207aa:	f10e 3eff 	add.w	lr, lr, #4294967295
900207ae:	041f      	lsls	r7, r3, #16
900207b0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900207b4:	10d2      	asrs	r2, r2, #3
900207b6:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
900207ba:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
900207be:	431f      	orrs	r7, r3
900207c0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
900207c4:	9317      	str	r3, [sp, #92]	; 0x5c
900207c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
900207c8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900207ca:	041b      	lsls	r3, r3, #16
900207cc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900207d0:	ea43 030b 	orr.w	r3, r3, fp
900207d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900207d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900207dc:	4353      	muls	r3, r2
900207de:	fb04 3707 	mla	r7, r4, r7, r3
900207e2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
900207e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900207e8:	ea43 0b01 	orr.w	fp, r3, r1
900207ec:	f1c0 0110 	rsb	r1, r0, #16
900207f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900207f2:	eba1 0c0c 	sub.w	ip, r1, ip
900207f6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900207fa:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
900207fe:	fb0c 770b 	mla	r7, ip, fp, r7
90020802:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020806:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9002080a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002080e:	ea4c 0c0b 	orr.w	ip, ip, fp
90020812:	fb02 770c 	mla	r7, r2, ip, r7
90020816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020818:	0d79      	lsrs	r1, r7, #21
9002081a:	8812      	ldrh	r2, [r2, #0]
9002081c:	097f      	lsrs	r7, r7, #5
9002081e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020822:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020826:	430f      	orrs	r7, r1
90020828:	1211      	asrs	r1, r2, #8
9002082a:	b2bb      	uxth	r3, r7
9002082c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020830:	10d7      	asrs	r7, r2, #3
90020832:	fb11 f104 	smulbb	r1, r1, r4
90020836:	1218      	asrs	r0, r3, #8
90020838:	00d2      	lsls	r2, r2, #3
9002083a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002083e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020842:	fb17 f704 	smulbb	r7, r7, r4
90020846:	b2d2      	uxtb	r2, r2
90020848:	fb00 1009 	mla	r0, r0, r9, r1
9002084c:	10d9      	asrs	r1, r3, #3
9002084e:	fb12 f204 	smulbb	r2, r2, r4
90020852:	00db      	lsls	r3, r3, #3
90020854:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020858:	b280      	uxth	r0, r0
9002085a:	b2db      	uxtb	r3, r3
9002085c:	fb01 7109 	mla	r1, r1, r9, r7
90020860:	fb03 2309 	mla	r3, r3, r9, r2
90020864:	1c42      	adds	r2, r0, #1
90020866:	b289      	uxth	r1, r1
90020868:	b29b      	uxth	r3, r3
9002086a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002086e:	1c4f      	adds	r7, r1, #1
90020870:	1c5a      	adds	r2, r3, #1
90020872:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90020876:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002087a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9002087e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020880:	0949      	lsrs	r1, r1, #5
90020882:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020886:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002088a:	4310      	orrs	r0, r2
9002088c:	4308      	orrs	r0, r1
9002088e:	f823 0b02 	strh.w	r0, [r3], #2
90020892:	930e      	str	r3, [sp, #56]	; 0x38
90020894:	9b25      	ldr	r3, [sp, #148]	; 0x94
90020896:	449a      	add	sl, r3
90020898:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002089a:	441d      	add	r5, r3
9002089c:	e6ed      	b.n	9002067a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9002089e:	2800      	cmp	r0, #0
900208a0:	f43f af7f 	beq.w	900207a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900208a4:	5cd3      	ldrb	r3, [r2, r3]
900208a6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900208aa:	9310      	str	r3, [sp, #64]	; 0x40
900208ac:	e779      	b.n	900207a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900208ae:	b019      	add	sp, #100	; 0x64
900208b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900208b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
900208b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900208b8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
900208bc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
900208c0:	f1b8 0f00 	cmp.w	r8, #0
900208c4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
900208c8:	fb08 470e 	mla	r7, r8, lr, r4
900208cc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
900208d0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
900208d4:	eb02 0907 	add.w	r9, r2, r7
900208d8:	8808      	ldrh	r0, [r1, #0]
900208da:	db67      	blt.n	900209ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
900208dc:	45c2      	cmp	sl, r8
900208de:	dd65      	ble.n	900209ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
900208e0:	2c00      	cmp	r4, #0
900208e2:	db61      	blt.n	900209a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
900208e4:	45a6      	cmp	lr, r4
900208e6:	dd5f      	ble.n	900209a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
900208e8:	5dd2      	ldrb	r2, [r2, r7]
900208ea:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
900208ee:	1c62      	adds	r2, r4, #1
900208f0:	d45f      	bmi.n	900209b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900208f2:	4596      	cmp	lr, r2
900208f4:	dd5d      	ble.n	900209b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900208f6:	2d00      	cmp	r5, #0
900208f8:	d05b      	beq.n	900209b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
900208fa:	f899 2001 	ldrb.w	r2, [r9, #1]
900208fe:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
90020902:	f118 0801 	adds.w	r8, r8, #1
90020906:	d458      	bmi.n	900209ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020908:	45c2      	cmp	sl, r8
9002090a:	dd56      	ble.n	900209ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9002090c:	2e00      	cmp	r6, #0
9002090e:	d054      	beq.n	900209ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
90020910:	2c00      	cmp	r4, #0
90020912:	db50      	blt.n	900209b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020914:	45a6      	cmp	lr, r4
90020916:	dd4e      	ble.n	900209b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
90020918:	f819 200e 	ldrb.w	r2, [r9, lr]
9002091c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
90020920:	3401      	adds	r4, #1
90020922:	d407      	bmi.n	90020934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020924:	45a6      	cmp	lr, r4
90020926:	dd05      	ble.n	90020934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
90020928:	b125      	cbz	r5, 90020934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9002092a:	44ce      	add	lr, r9
9002092c:	f89e 0001 	ldrb.w	r0, [lr, #1]
90020930:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
90020934:	fb15 f406 	smulbb	r4, r5, r6
90020938:	ea4f 430c 	mov.w	r3, ip, lsl #16
9002093c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90020940:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020944:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020948:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9002094c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020950:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020954:	ea43 0c0c 	orr.w	ip, r3, ip
90020958:	f1c6 0310 	rsb	r3, r6, #16
9002095c:	ea4e 0707 	orr.w	r7, lr, r7
90020960:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
90020964:	1b5b      	subs	r3, r3, r5
90020966:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9002096a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9002096e:	437d      	muls	r5, r7
90020970:	fb03 5c0c 	mla	ip, r3, ip, r5
90020974:	0403      	lsls	r3, r0, #16
90020976:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002097a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002097e:	4318      	orrs	r0, r3
90020980:	0413      	lsls	r3, r2, #16
90020982:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020986:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002098a:	fb04 c000 	mla	r0, r4, r0, ip
9002098e:	4313      	orrs	r3, r2
90020990:	fb06 0003 	mla	r0, r6, r3, r0
90020994:	0d43      	lsrs	r3, r0, #21
90020996:	0940      	lsrs	r0, r0, #5
90020998:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002099c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900209a0:	4318      	orrs	r0, r3
900209a2:	8008      	strh	r0, [r1, #0]
900209a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900209a8:	4684      	mov	ip, r0
900209aa:	e7a0      	b.n	900208ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
900209ac:	4607      	mov	r7, r0
900209ae:	4684      	mov	ip, r0
900209b0:	e7a7      	b.n	90020902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
900209b2:	4607      	mov	r7, r0
900209b4:	e7a5      	b.n	90020902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
900209b6:	4602      	mov	r2, r0
900209b8:	e7b2      	b.n	90020920 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
900209ba:	4602      	mov	r2, r0
900209bc:	e7ba      	b.n	90020934 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

900209be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900209be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900209c2:	b093      	sub	sp, #76	; 0x4c
900209c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900209c8:	920f      	str	r2, [sp, #60]	; 0x3c
900209ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
900209cc:	9010      	str	r0, [sp, #64]	; 0x40
900209ce:	9108      	str	r1, [sp, #32]
900209d0:	6850      	ldr	r0, [r2, #4]
900209d2:	9306      	str	r3, [sp, #24]
900209d4:	6812      	ldr	r2, [r2, #0]
900209d6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900209da:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900209de:	fb00 1303 	mla	r3, r0, r3, r1
900209e2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900209e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900209e8:	681b      	ldr	r3, [r3, #0]
900209ea:	9307      	str	r3, [sp, #28]
900209ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
900209ee:	685f      	ldr	r7, [r3, #4]
900209f0:	3704      	adds	r7, #4
900209f2:	9b08      	ldr	r3, [sp, #32]
900209f4:	2b00      	cmp	r3, #0
900209f6:	dc03      	bgt.n	90020a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900209f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900209fa:	2b00      	cmp	r3, #0
900209fc:	f340 81b2 	ble.w	90020d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020a02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020a06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020a0a:	1e48      	subs	r0, r1, #1
90020a0c:	f102 3cff 	add.w	ip, r2, #4294967295
90020a10:	9b06      	ldr	r3, [sp, #24]
90020a12:	2b00      	cmp	r3, #0
90020a14:	f340 80a9 	ble.w	90020b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90020a18:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020a1c:	ea4f 4326 	mov.w	r3, r6, asr #16
90020a20:	d406      	bmi.n	90020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020a22:	4586      	cmp	lr, r0
90020a24:	da04      	bge.n	90020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020a26:	2b00      	cmp	r3, #0
90020a28:	db02      	blt.n	90020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90020a2a:	4563      	cmp	r3, ip
90020a2c:	f2c0 809e 	blt.w	90020b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
90020a30:	f11e 0e01 	adds.w	lr, lr, #1
90020a34:	f100 808f 	bmi.w	90020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020a38:	4571      	cmp	r1, lr
90020a3a:	f2c0 808c 	blt.w	90020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020a3e:	3301      	adds	r3, #1
90020a40:	f100 8089 	bmi.w	90020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020a44:	429a      	cmp	r2, r3
90020a46:	f2c0 8086 	blt.w	90020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
90020a4a:	f8dd b018 	ldr.w	fp, [sp, #24]
90020a4e:	46c8      	mov	r8, r9
90020a50:	f1bb 0f00 	cmp.w	fp, #0
90020a54:	f340 80a6 	ble.w	90020ba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90020a58:	9a24      	ldr	r2, [sp, #144]	; 0x90
90020a5a:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020a5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020a60:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020a64:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020a68:	1422      	asrs	r2, r4, #16
90020a6a:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020a6e:	689b      	ldr	r3, [r3, #8]
90020a70:	f100 80e3 	bmi.w	90020c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020a74:	f103 3aff 	add.w	sl, r3, #4294967295
90020a78:	4552      	cmp	r2, sl
90020a7a:	f280 80de 	bge.w	90020c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020a7e:	f1bc 0f00 	cmp.w	ip, #0
90020a82:	f2c0 80da 	blt.w	90020c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020a86:	f10e 3aff 	add.w	sl, lr, #4294967295
90020a8a:	45d4      	cmp	ip, sl
90020a8c:	f280 80d5 	bge.w	90020c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020a90:	b21b      	sxth	r3, r3
90020a92:	9d07      	ldr	r5, [sp, #28]
90020a94:	fb0c 2203 	mla	r2, ip, r3, r2
90020a98:	eb05 0a02 	add.w	sl, r5, r2
90020a9c:	5caa      	ldrb	r2, [r5, r2]
90020a9e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
90020aa2:	2800      	cmp	r0, #0
90020aa4:	f000 80c0 	beq.w	90020c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90020aa8:	f89a 2001 	ldrb.w	r2, [sl, #1]
90020aac:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
90020ab0:	920b      	str	r2, [sp, #44]	; 0x2c
90020ab2:	b151      	cbz	r1, 90020aca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020ab4:	eb0a 0203 	add.w	r2, sl, r3
90020ab8:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020abc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020ac0:	9309      	str	r3, [sp, #36]	; 0x24
90020ac2:	7853      	ldrb	r3, [r2, #1]
90020ac4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020ac8:	930c      	str	r3, [sp, #48]	; 0x30
90020aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020acc:	fb10 f201 	smulbb	r2, r0, r1
90020ad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020ad2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020ad6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020ada:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020ade:	10d2      	asrs	r2, r2, #3
90020ae0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020ae4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
90020ae8:	ea4c 0c03 	orr.w	ip, ip, r3
90020aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020aee:	041b      	lsls	r3, r3, #16
90020af0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020af4:	432b      	orrs	r3, r5
90020af6:	4353      	muls	r3, r2
90020af8:	fb0a 330c 	mla	r3, sl, ip, r3
90020afc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90020b00:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90020b04:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020b08:	ea4c 0e0e 	orr.w	lr, ip, lr
90020b0c:	f1c1 0c10 	rsb	ip, r1, #16
90020b10:	ebac 0c00 	sub.w	ip, ip, r0
90020b14:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
90020b18:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
90020b1c:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020b22:	0418      	lsls	r0, r3, #16
90020b24:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020b28:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020b2c:	4318      	orrs	r0, r3
90020b2e:	fb02 c200 	mla	r2, r2, r0, ip
90020b32:	0d53      	lsrs	r3, r2, #21
90020b34:	0952      	lsrs	r2, r2, #5
90020b36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020b3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020b3e:	431a      	orrs	r2, r3
90020b40:	f8a8 2000 	strh.w	r2, [r8]
90020b44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020b46:	f108 0802 	add.w	r8, r8, #2
90020b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
90020b4e:	441c      	add	r4, r3
90020b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020b52:	441e      	add	r6, r3
90020b54:	e77c      	b.n	90020a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90020b56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020b58:	f109 0902 	add.w	r9, r9, #2
90020b5c:	441c      	add	r4, r3
90020b5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020b60:	441e      	add	r6, r3
90020b62:	9b06      	ldr	r3, [sp, #24]
90020b64:	3b01      	subs	r3, #1
90020b66:	9306      	str	r3, [sp, #24]
90020b68:	e752      	b.n	90020a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90020b6a:	d020      	beq.n	90020bae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90020b6c:	9b06      	ldr	r3, [sp, #24]
90020b6e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020b70:	3b01      	subs	r3, #1
90020b72:	fb00 4003 	mla	r0, r0, r3, r4
90020b76:	1400      	asrs	r0, r0, #16
90020b78:	f53f af67 	bmi.w	90020a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020b7c:	3901      	subs	r1, #1
90020b7e:	4288      	cmp	r0, r1
90020b80:	f6bf af63 	bge.w	90020a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020b84:	9920      	ldr	r1, [sp, #128]	; 0x80
90020b86:	fb01 6303 	mla	r3, r1, r3, r6
90020b8a:	141b      	asrs	r3, r3, #16
90020b8c:	f53f af5d 	bmi.w	90020a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020b90:	3a01      	subs	r2, #1
90020b92:	4293      	cmp	r3, r2
90020b94:	f6bf af59 	bge.w	90020a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020b98:	f8dd 8018 	ldr.w	r8, [sp, #24]
90020b9c:	46ca      	mov	sl, r9
90020b9e:	f1b8 0f00 	cmp.w	r8, #0
90020ba2:	dc67      	bgt.n	90020c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90020ba4:	9b06      	ldr	r3, [sp, #24]
90020ba6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020baa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90020bae:	9b08      	ldr	r3, [sp, #32]
90020bb0:	2b00      	cmp	r3, #0
90020bb2:	f340 80d7 	ble.w	90020d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020bb6:	ee30 0a04 	vadd.f32	s0, s0, s8
90020bba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020bbc:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020bc0:	eeb0 6a62 	vmov.f32	s12, s5
90020bc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
90020bc8:	ee31 1a05 	vadd.f32	s2, s2, s10
90020bcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020bd0:	ee16 4a10 	vmov	r4, s12
90020bd4:	eeb0 6a43 	vmov.f32	s12, s6
90020bd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020bdc:	ee16 6a10 	vmov	r6, s12
90020be0:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020be4:	ee61 7a27 	vmul.f32	s15, s2, s15
90020be8:	ee77 2a62 	vsub.f32	s5, s14, s5
90020bec:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020bf0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020bf4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020bf8:	ee12 2a90 	vmov	r2, s5
90020bfc:	eef0 2a47 	vmov.f32	s5, s14
90020c00:	fb92 f3f3 	sdiv	r3, r2, r3
90020c04:	ee13 2a10 	vmov	r2, s6
90020c08:	931f      	str	r3, [sp, #124]	; 0x7c
90020c0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020c0c:	eeb0 3a67 	vmov.f32	s6, s15
90020c10:	fb92 f3f3 	sdiv	r3, r2, r3
90020c14:	9320      	str	r3, [sp, #128]	; 0x80
90020c16:	9b08      	ldr	r3, [sp, #32]
90020c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020c1a:	3b01      	subs	r3, #1
90020c1c:	9308      	str	r3, [sp, #32]
90020c1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020c20:	bf08      	it	eq
90020c22:	4613      	moveq	r3, r2
90020c24:	9306      	str	r3, [sp, #24]
90020c26:	e6e4      	b.n	900209f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020c28:	2900      	cmp	r1, #0
90020c2a:	f43f af4e 	beq.w	90020aca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020c2e:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020c32:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020c36:	9309      	str	r3, [sp, #36]	; 0x24
90020c38:	e747      	b.n	90020aca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020c3a:	f112 0a01 	adds.w	sl, r2, #1
90020c3e:	d481      	bmi.n	90020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020c40:	4553      	cmp	r3, sl
90020c42:	f6ff af7f 	blt.w	90020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020c46:	f11c 0a01 	adds.w	sl, ip, #1
90020c4a:	f53f af7b 	bmi.w	90020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020c4e:	45d6      	cmp	lr, sl
90020c50:	f6ff af78 	blt.w	90020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020c54:	b21b      	sxth	r3, r3
90020c56:	e9cd 2c02 	strd	r2, ip, [sp, #8]
90020c5a:	fa0f f28e 	sxth.w	r2, lr
90020c5e:	9300      	str	r3, [sp, #0]
90020c60:	463b      	mov	r3, r7
90020c62:	9201      	str	r2, [sp, #4]
90020c64:	9a07      	ldr	r2, [sp, #28]
90020c66:	e9cd 0104 	strd	r0, r1, [sp, #16]
90020c6a:	4641      	mov	r1, r8
90020c6c:	9810      	ldr	r0, [sp, #64]	; 0x40
90020c6e:	f7ff fe21 	bl	900208b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90020c72:	e767      	b.n	90020b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020c76:	1422      	asrs	r2, r4, #16
90020c78:	1431      	asrs	r1, r6, #16
90020c7a:	9d07      	ldr	r5, [sp, #28]
90020c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020c80:	f3c4 3e03 	ubfx	lr, r4, #12, #4
90020c84:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020c88:	fb03 2101 	mla	r1, r3, r1, r2
90020c8c:	9a07      	ldr	r2, [sp, #28]
90020c8e:	440a      	add	r2, r1
90020c90:	5c69      	ldrb	r1, [r5, r1]
90020c92:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
90020c96:	f1be 0f00 	cmp.w	lr, #0
90020c9a:	d05c      	beq.n	90020d56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
90020c9c:	f892 c001 	ldrb.w	ip, [r2, #1]
90020ca0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
90020ca4:	950d      	str	r5, [sp, #52]	; 0x34
90020ca6:	b150      	cbz	r0, 90020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020ca8:	eb02 0c03 	add.w	ip, r2, r3
90020cac:	5cd3      	ldrb	r3, [r2, r3]
90020cae:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020cb2:	930a      	str	r3, [sp, #40]	; 0x28
90020cb4:	f89c 3001 	ldrb.w	r3, [ip, #1]
90020cb8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020cbc:	930e      	str	r3, [sp, #56]	; 0x38
90020cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020cc0:	fb1e f200 	smulbb	r2, lr, r0
90020cc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020cc6:	f108 38ff 	add.w	r8, r8, #4294967295
90020cca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020cce:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020cd2:	10d2      	asrs	r2, r2, #3
90020cd4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
90020cd8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020cdc:	ea4c 0c03 	orr.w	ip, ip, r3
90020ce0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
90020ce4:	9311      	str	r3, [sp, #68]	; 0x44
90020ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020ce8:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020cea:	041b      	lsls	r3, r3, #16
90020cec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020cf0:	ea43 030b 	orr.w	r3, r3, fp
90020cf4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020cf8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020cfc:	4353      	muls	r3, r2
90020cfe:	fb05 3c0c 	mla	ip, r5, ip, r3
90020d02:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020d06:	ea43 0b01 	orr.w	fp, r3, r1
90020d0a:	f1c0 0110 	rsb	r1, r0, #16
90020d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020d10:	eba1 0e0e 	sub.w	lr, r1, lr
90020d14:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
90020d18:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
90020d1c:	fb0e cc0b 	mla	ip, lr, fp, ip
90020d20:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90020d24:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90020d28:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020d2c:	ea4b 0e0e 	orr.w	lr, fp, lr
90020d30:	fb02 cc0e 	mla	ip, r2, lr, ip
90020d34:	ea4f 535c 	mov.w	r3, ip, lsr #21
90020d38:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020d3c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020d40:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020d44:	ea43 0c0c 	orr.w	ip, r3, ip
90020d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020d4a:	441c      	add	r4, r3
90020d4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020d4e:	f82a cb02 	strh.w	ip, [sl], #2
90020d52:	441e      	add	r6, r3
90020d54:	e723      	b.n	90020b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90020d56:	2800      	cmp	r0, #0
90020d58:	d0b1      	beq.n	90020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020d5a:	5cd3      	ldrb	r3, [r2, r3]
90020d5c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020d60:	930a      	str	r3, [sp, #40]	; 0x28
90020d62:	e7ac      	b.n	90020cbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020d64:	b013      	add	sp, #76	; 0x4c
90020d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020d6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
90020d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020d6e:	880d      	ldrh	r5, [r1, #0]
90020d70:	b087      	sub	sp, #28
90020d72:	10ef      	asrs	r7, r5, #3
90020d74:	9103      	str	r1, [sp, #12]
90020d76:	ea4f 2a25 	mov.w	sl, r5, asr #8
90020d7a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
90020d7e:	00ed      	lsls	r5, r5, #3
90020d80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020d84:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
90020d88:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
90020d8c:	b2ed      	uxtb	r5, r5
90020d8e:	9701      	str	r7, [sp, #4]
90020d90:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
90020d94:	9502      	str	r5, [sp, #8]
90020d96:	9d01      	ldr	r5, [sp, #4]
90020d98:	9902      	ldr	r1, [sp, #8]
90020d9a:	022d      	lsls	r5, r5, #8
90020d9c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
90020da0:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
90020da4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
90020da8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
90020dac:	430d      	orrs	r5, r1
90020dae:	fb06 0709 	mla	r7, r6, r9, r0
90020db2:	2e00      	cmp	r6, #0
90020db4:	9505      	str	r5, [sp, #20]
90020db6:	eb02 0c07 	add.w	ip, r2, r7
90020dba:	f2c0 80b6 	blt.w	90020f2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020dbe:	45b3      	cmp	fp, r6
90020dc0:	f340 80b3 	ble.w	90020f2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020dc4:	2800      	cmp	r0, #0
90020dc6:	f2c0 80ae 	blt.w	90020f26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020dca:	4581      	cmp	r9, r0
90020dcc:	f340 80ab 	ble.w	90020f26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020dd0:	5dd7      	ldrb	r7, [r2, r7]
90020dd2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020dd6:	441f      	add	r7, r3
90020dd8:	1c42      	adds	r2, r0, #1
90020dda:	f100 80a9 	bmi.w	90020f30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020dde:	4591      	cmp	r9, r2
90020de0:	f340 80a6 	ble.w	90020f30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020de4:	2c00      	cmp	r4, #0
90020de6:	f000 80a3 	beq.w	90020f30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020dea:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020df2:	441d      	add	r5, r3
90020df4:	3601      	adds	r6, #1
90020df6:	f100 809f 	bmi.w	90020f38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020dfa:	45b3      	cmp	fp, r6
90020dfc:	f340 809c 	ble.w	90020f38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020e00:	f1be 0f00 	cmp.w	lr, #0
90020e04:	f000 8098 	beq.w	90020f38 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020e08:	2800      	cmp	r0, #0
90020e0a:	f2c0 8093 	blt.w	90020f34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020e0e:	4581      	cmp	r9, r0
90020e10:	f340 8090 	ble.w	90020f34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020e14:	f81c 6009 	ldrb.w	r6, [ip, r9]
90020e18:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90020e1c:	441e      	add	r6, r3
90020e1e:	3001      	adds	r0, #1
90020e20:	f100 808d 	bmi.w	90020f3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020e24:	4581      	cmp	r9, r0
90020e26:	f340 808a 	ble.w	90020f3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020e2a:	2c00      	cmp	r4, #0
90020e2c:	f000 8087 	beq.w	90020f3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020e30:	44e1      	add	r9, ip
90020e32:	f899 2001 	ldrb.w	r2, [r9, #1]
90020e36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020e3a:	4413      	add	r3, r2
90020e3c:	b2a4      	uxth	r4, r4
90020e3e:	f897 c002 	ldrb.w	ip, [r7, #2]
90020e42:	fa1f fe8e 	uxth.w	lr, lr
90020e46:	9901      	ldr	r1, [sp, #4]
90020e48:	fb04 fb0e 	mul.w	fp, r4, lr
90020e4c:	0124      	lsls	r4, r4, #4
90020e4e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
90020e52:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
90020e56:	eba4 040b 	sub.w	r4, r4, fp
90020e5a:	fa1f f08e 	uxth.w	r0, lr
90020e5e:	b2a2      	uxth	r2, r4
90020e60:	78ac      	ldrb	r4, [r5, #2]
90020e62:	eba9 0900 	sub.w	r9, r9, r0
90020e66:	fa1f fe88 	uxth.w	lr, r8
90020e6a:	4354      	muls	r4, r2
90020e6c:	ea6f 0808 	mvn.w	r8, r8
90020e70:	fa1f f989 	uxth.w	r9, r9
90020e74:	fa5f f888 	uxtb.w	r8, r8
90020e78:	fb09 440c 	mla	r4, r9, ip, r4
90020e7c:	f896 c002 	ldrb.w	ip, [r6, #2]
90020e80:	fb1a fa08 	smulbb	sl, sl, r8
90020e84:	fb00 440c 	mla	r4, r0, ip, r4
90020e88:	f893 c002 	ldrb.w	ip, [r3, #2]
90020e8c:	fb0b 4c0c 	mla	ip, fp, ip, r4
90020e90:	787c      	ldrb	r4, [r7, #1]
90020e92:	783f      	ldrb	r7, [r7, #0]
90020e94:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020e98:	fb0c ac0e 	mla	ip, ip, lr, sl
90020e9c:	f895 a001 	ldrb.w	sl, [r5, #1]
90020ea0:	782d      	ldrb	r5, [r5, #0]
90020ea2:	fb02 fa0a 	mul.w	sl, r2, sl
90020ea6:	fa1f fc8c 	uxth.w	ip, ip
90020eaa:	436a      	muls	r2, r5
90020eac:	7835      	ldrb	r5, [r6, #0]
90020eae:	fb09 aa04 	mla	sl, r9, r4, sl
90020eb2:	7874      	ldrb	r4, [r6, #1]
90020eb4:	fb09 2207 	mla	r2, r9, r7, r2
90020eb8:	fb00 aa04 	mla	sl, r0, r4, sl
90020ebc:	785c      	ldrb	r4, [r3, #1]
90020ebe:	fb00 2005 	mla	r0, r0, r5, r2
90020ec2:	781b      	ldrb	r3, [r3, #0]
90020ec4:	fb0b a404 	mla	r4, fp, r4, sl
90020ec8:	fb11 fa08 	smulbb	sl, r1, r8
90020ecc:	fb0b 0b03 	mla	fp, fp, r3, r0
90020ed0:	9b02      	ldr	r3, [sp, #8]
90020ed2:	f3c4 2407 	ubfx	r4, r4, #8, #8
90020ed6:	fb13 f808 	smulbb	r8, r3, r8
90020eda:	f3cb 2b07 	ubfx	fp, fp, #8, #8
90020ede:	fb04 a40e 	mla	r4, r4, lr, sl
90020ee2:	f10c 0301 	add.w	r3, ip, #1
90020ee6:	fb0b 8e0e 	mla	lr, fp, lr, r8
90020eea:	b2a4      	uxth	r4, r4
90020eec:	fa1f fe8e 	uxth.w	lr, lr
90020ef0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020ef4:	f104 0a01 	add.w	sl, r4, #1
90020ef8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
90020efc:	f10e 0c01 	add.w	ip, lr, #1
90020f00:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90020f04:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020f08:	0964      	lsrs	r4, r4, #5
90020f0a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90020f0e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90020f12:	ea4c 0c03 	orr.w	ip, ip, r3
90020f16:	9b03      	ldr	r3, [sp, #12]
90020f18:	ea4c 0c04 	orr.w	ip, ip, r4
90020f1c:	f8a3 c000 	strh.w	ip, [r3]
90020f20:	b007      	add	sp, #28
90020f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020f26:	af05      	add	r7, sp, #20
90020f28:	e756      	b.n	90020dd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
90020f2a:	ad05      	add	r5, sp, #20
90020f2c:	462f      	mov	r7, r5
90020f2e:	e761      	b.n	90020df4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020f30:	ad05      	add	r5, sp, #20
90020f32:	e75f      	b.n	90020df4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020f34:	ae05      	add	r6, sp, #20
90020f36:	e772      	b.n	90020e1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90020f38:	ab05      	add	r3, sp, #20
90020f3a:	461e      	mov	r6, r3
90020f3c:	e77e      	b.n	90020e3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
90020f3e:	ab05      	add	r3, sp, #20
90020f40:	e77c      	b.n	90020e3c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

90020f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020f46:	b095      	sub	sp, #84	; 0x54
90020f48:	9212      	str	r2, [sp, #72]	; 0x48
90020f4a:	9309      	str	r3, [sp, #36]	; 0x24
90020f4c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90020f4e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
90020f52:	9013      	str	r0, [sp, #76]	; 0x4c
90020f54:	930f      	str	r3, [sp, #60]	; 0x3c
90020f56:	6850      	ldr	r0, [r2, #4]
90020f58:	910e      	str	r1, [sp, #56]	; 0x38
90020f5a:	6812      	ldr	r2, [r2, #0]
90020f5c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
90020f60:	fb00 1303 	mla	r3, r0, r3, r1
90020f64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020f68:	930a      	str	r3, [sp, #40]	; 0x28
90020f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020f6c:	681b      	ldr	r3, [r3, #0]
90020f6e:	930d      	str	r3, [sp, #52]	; 0x34
90020f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020f72:	685c      	ldr	r4, [r3, #4]
90020f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020f76:	3404      	adds	r4, #4
90020f78:	43db      	mvns	r3, r3
90020f7a:	b2db      	uxtb	r3, r3
90020f7c:	930b      	str	r3, [sp, #44]	; 0x2c
90020f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020f80:	2b00      	cmp	r3, #0
90020f82:	dc03      	bgt.n	90020f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90020f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
90020f86:	2b00      	cmp	r3, #0
90020f88:	f340 8255 	ble.w	90021436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
90020f8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020f8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020f92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020f96:	1e48      	subs	r0, r1, #1
90020f98:	1e55      	subs	r5, r2, #1
90020f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020f9c:	2b00      	cmp	r3, #0
90020f9e:	f340 80f9 	ble.w	90021194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90020fa2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90020fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020fa6:	1436      	asrs	r6, r6, #16
90020fa8:	ea4f 4323 	mov.w	r3, r3, asr #16
90020fac:	d406      	bmi.n	90020fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020fae:	4286      	cmp	r6, r0
90020fb0:	da04      	bge.n	90020fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020fb2:	2b00      	cmp	r3, #0
90020fb4:	db02      	blt.n	90020fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020fb6:	42ab      	cmp	r3, r5
90020fb8:	f2c0 80ed 	blt.w	90021196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
90020fbc:	3601      	adds	r6, #1
90020fbe:	f100 80da 	bmi.w	90021176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020fc2:	42b1      	cmp	r1, r6
90020fc4:	f2c0 80d7 	blt.w	90021176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020fc8:	3301      	adds	r3, #1
90020fca:	f100 80d4 	bmi.w	90021176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020fce:	429a      	cmp	r2, r3
90020fd0:	f2c0 80d1 	blt.w	90021176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020fd6:	9311      	str	r3, [sp, #68]	; 0x44
90020fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020fda:	930c      	str	r3, [sp, #48]	; 0x30
90020fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020fde:	2b00      	cmp	r3, #0
90020fe0:	f340 80fa 	ble.w	900211d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90020fe4:	9826      	ldr	r0, [sp, #152]	; 0x98
90020fe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020fe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020fea:	68c6      	ldr	r6, [r0, #12]
90020fec:	141d      	asrs	r5, r3, #16
90020fee:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020ff0:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020ff4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020ff6:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020ff8:	1400      	asrs	r0, r0, #16
90020ffa:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020ffe:	6892      	ldr	r2, [r2, #8]
90021000:	f100 813e 	bmi.w	90021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90021004:	1e57      	subs	r7, r2, #1
90021006:	42b8      	cmp	r0, r7
90021008:	f280 813a 	bge.w	90021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9002100c:	2d00      	cmp	r5, #0
9002100e:	f2c0 8137 	blt.w	90021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90021012:	1e77      	subs	r7, r6, #1
90021014:	42bd      	cmp	r5, r7
90021016:	f280 8133 	bge.w	90021280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9002101a:	b212      	sxth	r2, r2
9002101c:	fb05 0002 	mla	r0, r5, r2, r0
90021020:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021022:	f815 a000 	ldrb.w	sl, [r5, r0]
90021026:	182e      	adds	r6, r5, r0
90021028:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9002102c:	eb04 050a 	add.w	r5, r4, sl
90021030:	2b00      	cmp	r3, #0
90021032:	f000 8117 	beq.w	90021264 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
90021036:	f896 c001 	ldrb.w	ip, [r6, #1]
9002103a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9002103e:	44a4      	add	ip, r4
90021040:	2900      	cmp	r1, #0
90021042:	f000 8117 	beq.w	90021274 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
90021046:	18b0      	adds	r0, r6, r2
90021048:	5cb2      	ldrb	r2, [r6, r2]
9002104a:	7840      	ldrb	r0, [r0, #1]
9002104c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021050:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021054:	4422      	add	r2, r4
90021056:	4420      	add	r0, r4
90021058:	b29b      	uxth	r3, r3
9002105a:	f89c 7002 	ldrb.w	r7, [ip, #2]
9002105e:	b289      	uxth	r1, r1
90021060:	f895 b002 	ldrb.w	fp, [r5, #2]
90021064:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90021066:	fb03 f901 	mul.w	r9, r3, r1
9002106a:	011b      	lsls	r3, r3, #4
9002106c:	f8b6 e000 	ldrh.w	lr, [r6]
90021070:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021074:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90021078:	eba3 0309 	sub.w	r3, r3, r9
9002107c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90021080:	b289      	uxth	r1, r1
90021082:	f814 a00a 	ldrb.w	sl, [r4, sl]
90021086:	b29b      	uxth	r3, r3
90021088:	eba8 0801 	sub.w	r8, r8, r1
9002108c:	435f      	muls	r7, r3
9002108e:	fa1f f888 	uxth.w	r8, r8
90021092:	9310      	str	r3, [sp, #64]	; 0x40
90021094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021096:	fb08 770b 	mla	r7, r8, fp, r7
9002109a:	f892 b002 	ldrb.w	fp, [r2, #2]
9002109e:	fb01 770b 	mla	r7, r1, fp, r7
900210a2:	f890 b002 	ldrb.w	fp, [r0, #2]
900210a6:	fb09 770b 	mla	r7, r9, fp, r7
900210aa:	ea4f 2b2e 	mov.w	fp, lr, asr #8
900210ae:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
900210b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
900210b6:	fb1b fb03 	smulbb	fp, fp, r3
900210ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
900210bc:	fb07 b706 	mla	r7, r7, r6, fp
900210c0:	f895 b001 	ldrb.w	fp, [r5, #1]
900210c4:	f89c 5001 	ldrb.w	r5, [ip, #1]
900210c8:	f89c c000 	ldrb.w	ip, [ip]
900210cc:	b2bf      	uxth	r7, r7
900210ce:	435d      	muls	r5, r3
900210d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900210d2:	fb08 550b 	mla	r5, r8, fp, r5
900210d6:	f892 b001 	ldrb.w	fp, [r2, #1]
900210da:	fb01 550b 	mla	r5, r1, fp, r5
900210de:	f890 b001 	ldrb.w	fp, [r0, #1]
900210e2:	fb09 550b 	mla	r5, r9, fp, r5
900210e6:	ea4f 0bee 	mov.w	fp, lr, asr #3
900210ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900210ee:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
900210f2:	f3c5 2507 	ubfx	r5, r5, #8, #8
900210f6:	fa5f fe8e 	uxtb.w	lr, lr
900210fa:	fb1b fb03 	smulbb	fp, fp, r3
900210fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
90021100:	fb03 f30c 	mul.w	r3, r3, ip
90021104:	f892 c000 	ldrb.w	ip, [r2]
90021108:	fb05 b506 	mla	r5, r5, r6, fp
9002110c:	fb08 330a 	mla	r3, r8, sl, r3
90021110:	b2ad      	uxth	r5, r5
90021112:	fb01 330c 	mla	r3, r1, ip, r3
90021116:	f890 c000 	ldrb.w	ip, [r0]
9002111a:	f105 0b01 	add.w	fp, r5, #1
9002111e:	fb09 3c0c 	mla	ip, r9, ip, r3
90021122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021124:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90021128:	fb1e fe03 	smulbb	lr, lr, r3
9002112c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90021130:	1c7b      	adds	r3, r7, #1
90021132:	096d      	lsrs	r5, r5, #5
90021134:	fb0c e606 	mla	r6, ip, r6, lr
90021138:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9002113c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90021140:	b2b6      	uxth	r6, r6
90021142:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
90021146:	1c77      	adds	r7, r6, #1
90021148:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9002114c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90021150:	431f      	orrs	r7, r3
90021152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021154:	433d      	orrs	r5, r7
90021156:	801d      	strh	r5, [r3, #0]
90021158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002115a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002115c:	3302      	adds	r3, #2
9002115e:	930c      	str	r3, [sp, #48]	; 0x30
90021160:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021162:	4413      	add	r3, r2
90021164:	9a22      	ldr	r2, [sp, #136]	; 0x88
90021166:	931f      	str	r3, [sp, #124]	; 0x7c
90021168:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002116a:	4413      	add	r3, r2
9002116c:	9320      	str	r3, [sp, #128]	; 0x80
9002116e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021170:	3b01      	subs	r3, #1
90021172:	9311      	str	r3, [sp, #68]	; 0x44
90021174:	e732      	b.n	90020fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90021176:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021178:	9e21      	ldr	r6, [sp, #132]	; 0x84
9002117a:	4433      	add	r3, r6
9002117c:	9e22      	ldr	r6, [sp, #136]	; 0x88
9002117e:	931f      	str	r3, [sp, #124]	; 0x7c
90021180:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021182:	4433      	add	r3, r6
90021184:	9320      	str	r3, [sp, #128]	; 0x80
90021186:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021188:	3b01      	subs	r3, #1
9002118a:	9309      	str	r3, [sp, #36]	; 0x24
9002118c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002118e:	3302      	adds	r3, #2
90021190:	930a      	str	r3, [sp, #40]	; 0x28
90021192:	e702      	b.n	90020f9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021194:	d027      	beq.n	900211e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
90021196:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021198:	9821      	ldr	r0, [sp, #132]	; 0x84
9002119a:	3b01      	subs	r3, #1
9002119c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9002119e:	fb00 5003 	mla	r0, r0, r3, r5
900211a2:	1400      	asrs	r0, r0, #16
900211a4:	f53f af16 	bmi.w	90020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900211a8:	3901      	subs	r1, #1
900211aa:	4288      	cmp	r0, r1
900211ac:	f6bf af12 	bge.w	90020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900211b0:	9922      	ldr	r1, [sp, #136]	; 0x88
900211b2:	9820      	ldr	r0, [sp, #128]	; 0x80
900211b4:	fb01 0303 	mla	r3, r1, r3, r0
900211b8:	141b      	asrs	r3, r3, #16
900211ba:	f53f af0b 	bmi.w	90020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900211be:	3a01      	subs	r2, #1
900211c0:	4293      	cmp	r3, r2
900211c2:	f6bf af07 	bge.w	90020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900211c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900211c8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
900211cc:	9311      	str	r3, [sp, #68]	; 0x44
900211ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900211d0:	930c      	str	r3, [sp, #48]	; 0x30
900211d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
900211d4:	2b00      	cmp	r3, #0
900211d6:	dc70      	bgt.n	900212ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
900211d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900211da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900211dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900211e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900211e4:	930a      	str	r3, [sp, #40]	; 0x28
900211e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900211e8:	2b00      	cmp	r3, #0
900211ea:	f340 8124 	ble.w	90021436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
900211ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900211f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900211f4:	ee30 0a04 	vadd.f32	s0, s0, s8
900211f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
900211fc:	eef0 6a62 	vmov.f32	s13, s5
90021200:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021204:	ee31 1a05 	vadd.f32	s2, s2, s10
90021208:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002120c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
90021210:	eef0 6a43 	vmov.f32	s13, s6
90021214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021218:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9002121c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021220:	ee61 7a27 	vmul.f32	s15, s2, s15
90021224:	ee77 2a62 	vsub.f32	s5, s14, s5
90021228:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002122c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021234:	ee12 2a90 	vmov	r2, s5
90021238:	eef0 2a47 	vmov.f32	s5, s14
9002123c:	fb92 f3f3 	sdiv	r3, r2, r3
90021240:	ee13 2a10 	vmov	r2, s6
90021244:	9321      	str	r3, [sp, #132]	; 0x84
90021246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90021248:	eeb0 3a67 	vmov.f32	s6, s15
9002124c:	fb92 f3f3 	sdiv	r3, r2, r3
90021250:	9322      	str	r3, [sp, #136]	; 0x88
90021252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021254:	9a12      	ldr	r2, [sp, #72]	; 0x48
90021256:	3b01      	subs	r3, #1
90021258:	930e      	str	r3, [sp, #56]	; 0x38
9002125a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9002125c:	bf08      	it	eq
9002125e:	4613      	moveq	r3, r2
90021260:	9309      	str	r3, [sp, #36]	; 0x24
90021262:	e68c      	b.n	90020f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021264:	b149      	cbz	r1, 9002127a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
90021266:	5cb2      	ldrb	r2, [r6, r2]
90021268:	4628      	mov	r0, r5
9002126a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002126e:	4422      	add	r2, r4
90021270:	46ac      	mov	ip, r5
90021272:	e6f1      	b.n	90021058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90021274:	4628      	mov	r0, r5
90021276:	462a      	mov	r2, r5
90021278:	e6ee      	b.n	90021058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002127a:	4628      	mov	r0, r5
9002127c:	462a      	mov	r2, r5
9002127e:	e7f7      	b.n	90021270 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
90021280:	1c47      	adds	r7, r0, #1
90021282:	f53f af69 	bmi.w	90021158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021286:	42ba      	cmp	r2, r7
90021288:	f6ff af66 	blt.w	90021158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9002128c:	1c6f      	adds	r7, r5, #1
9002128e:	f53f af63 	bmi.w	90021158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021292:	42be      	cmp	r6, r7
90021294:	f6ff af60 	blt.w	90021158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021298:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9002129a:	b236      	sxth	r6, r6
9002129c:	b212      	sxth	r2, r2
9002129e:	9002      	str	r0, [sp, #8]
900212a0:	9601      	str	r6, [sp, #4]
900212a2:	9200      	str	r2, [sp, #0]
900212a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
900212a6:	e9cd 1705 	strd	r1, r7, [sp, #20]
900212aa:	e9cd 5303 	strd	r5, r3, [sp, #12]
900212ae:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
900212b2:	4623      	mov	r3, r4
900212b4:	f7ff fd59 	bl	90020d6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
900212b8:	e74e      	b.n	90021158 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
900212ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
900212bc:	9820      	ldr	r0, [sp, #128]	; 0x80
900212be:	f3c2 3103 	ubfx	r1, r2, #12, #4
900212c2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
900212c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
900212c6:	1400      	asrs	r0, r0, #16
900212c8:	142d      	asrs	r5, r5, #16
900212ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900212cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
900212d0:	f3c3 3303 	ubfx	r3, r3, #12, #4
900212d4:	fb02 5000 	mla	r0, r2, r0, r5
900212d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900212da:	f815 9000 	ldrb.w	r9, [r5, r0]
900212de:	182e      	adds	r6, r5, r0
900212e0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
900212e4:	eb04 0509 	add.w	r5, r4, r9
900212e8:	2b00      	cmp	r3, #0
900212ea:	f000 8096 	beq.w	9002141a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
900212ee:	7877      	ldrb	r7, [r6, #1]
900212f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
900212f4:	4427      	add	r7, r4
900212f6:	2900      	cmp	r1, #0
900212f8:	f000 8097 	beq.w	9002142a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
900212fc:	18b0      	adds	r0, r6, r2
900212fe:	5cb2      	ldrb	r2, [r6, r2]
90021300:	7840      	ldrb	r0, [r0, #1]
90021302:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9002130a:	4422      	add	r2, r4
9002130c:	4420      	add	r0, r4
9002130e:	b29b      	uxth	r3, r3
90021310:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90021312:	b289      	uxth	r1, r1
90021314:	f895 b002 	ldrb.w	fp, [r5, #2]
90021318:	f8b6 c000 	ldrh.w	ip, [r6]
9002131c:	fb03 f801 	mul.w	r8, r3, r1
90021320:	011b      	lsls	r3, r3, #4
90021322:	78be      	ldrb	r6, [r7, #2]
90021324:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
90021328:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9002132c:	eba3 0308 	sub.w	r3, r3, r8
90021330:	f814 9009 	ldrb.w	r9, [r4, r9]
90021334:	b289      	uxth	r1, r1
90021336:	b29b      	uxth	r3, r3
90021338:	ebae 0e01 	sub.w	lr, lr, r1
9002133c:	435e      	muls	r6, r3
9002133e:	fa1f fe8e 	uxth.w	lr, lr
90021342:	9310      	str	r3, [sp, #64]	; 0x40
90021344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021346:	fb0e 660b 	mla	r6, lr, fp, r6
9002134a:	f892 b002 	ldrb.w	fp, [r2, #2]
9002134e:	fb01 660b 	mla	r6, r1, fp, r6
90021352:	f890 b002 	ldrb.w	fp, [r0, #2]
90021356:	fb08 660b 	mla	r6, r8, fp, r6
9002135a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9002135e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90021362:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021366:	fb1b fb03 	smulbb	fp, fp, r3
9002136a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002136c:	fb06 b60a 	mla	r6, r6, sl, fp
90021370:	f895 b001 	ldrb.w	fp, [r5, #1]
90021374:	787d      	ldrb	r5, [r7, #1]
90021376:	783f      	ldrb	r7, [r7, #0]
90021378:	b2b6      	uxth	r6, r6
9002137a:	435d      	muls	r5, r3
9002137c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002137e:	fb0e 550b 	mla	r5, lr, fp, r5
90021382:	f892 b001 	ldrb.w	fp, [r2, #1]
90021386:	fb01 550b 	mla	r5, r1, fp, r5
9002138a:	f890 b001 	ldrb.w	fp, [r0, #1]
9002138e:	fb08 550b 	mla	r5, r8, fp, r5
90021392:	ea4f 0bec 	mov.w	fp, ip, asr #3
90021396:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002139a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9002139e:	f3c5 2507 	ubfx	r5, r5, #8, #8
900213a2:	fa5f fc8c 	uxtb.w	ip, ip
900213a6:	fb1b fb03 	smulbb	fp, fp, r3
900213aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
900213ac:	437b      	muls	r3, r7
900213ae:	7817      	ldrb	r7, [r2, #0]
900213b0:	fb05 b50a 	mla	r5, r5, sl, fp
900213b4:	fb0e 3309 	mla	r3, lr, r9, r3
900213b8:	b2ad      	uxth	r5, r5
900213ba:	fb01 3307 	mla	r3, r1, r7, r3
900213be:	7807      	ldrb	r7, [r0, #0]
900213c0:	f105 0b01 	add.w	fp, r5, #1
900213c4:	fb08 3707 	mla	r7, r8, r7, r3
900213c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900213ca:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
900213ce:	fb1c fc03 	smulbb	ip, ip, r3
900213d2:	f3c7 2707 	ubfx	r7, r7, #8, #8
900213d6:	1c73      	adds	r3, r6, #1
900213d8:	096d      	lsrs	r5, r5, #5
900213da:	fb07 c70a 	mla	r7, r7, sl, ip
900213de:	eb03 2616 	add.w	r6, r3, r6, lsr #8
900213e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900213e6:	b2bf      	uxth	r7, r7
900213e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900213ea:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
900213ee:	1c7a      	adds	r2, r7, #1
900213f0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
900213f4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900213f8:	4316      	orrs	r6, r2
900213fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
900213fc:	432e      	orrs	r6, r5
900213fe:	f823 6b02 	strh.w	r6, [r3], #2
90021402:	930c      	str	r3, [sp, #48]	; 0x30
90021404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021406:	4413      	add	r3, r2
90021408:	9a22      	ldr	r2, [sp, #136]	; 0x88
9002140a:	931f      	str	r3, [sp, #124]	; 0x7c
9002140c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002140e:	4413      	add	r3, r2
90021410:	9320      	str	r3, [sp, #128]	; 0x80
90021412:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021414:	3b01      	subs	r3, #1
90021416:	9311      	str	r3, [sp, #68]	; 0x44
90021418:	e6db      	b.n	900211d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9002141a:	b149      	cbz	r1, 90021430 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9002141c:	5cb2      	ldrb	r2, [r6, r2]
9002141e:	4628      	mov	r0, r5
90021420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021424:	4422      	add	r2, r4
90021426:	462f      	mov	r7, r5
90021428:	e771      	b.n	9002130e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9002142a:	4628      	mov	r0, r5
9002142c:	462a      	mov	r2, r5
9002142e:	e76e      	b.n	9002130e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90021430:	4628      	mov	r0, r5
90021432:	462a      	mov	r2, r5
90021434:	e7f7      	b.n	90021426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021436:	b015      	add	sp, #84	; 0x54
90021438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002143c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9002143c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021440:	880f      	ldrh	r7, [r1, #0]
90021442:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
90021446:	023c      	lsls	r4, r7, #8
90021448:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9002144c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
90021450:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
90021454:	017c      	lsls	r4, r7, #5
90021456:	00ff      	lsls	r7, r7, #3
90021458:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002145c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
90021460:	b2ff      	uxtb	r7, r7
90021462:	ea4b 0404 	orr.w	r4, fp, r4
90021466:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9002146a:	4327      	orrs	r7, r4
9002146c:	fb05 ca0e 	mla	sl, r5, lr, ip
90021470:	2d00      	cmp	r5, #0
90021472:	9701      	str	r7, [sp, #4]
90021474:	eb02 080a 	add.w	r8, r2, sl
90021478:	db7e      	blt.n	90021578 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9002147a:	45a9      	cmp	r9, r5
9002147c:	dd7c      	ble.n	90021578 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9002147e:	f1bc 0f00 	cmp.w	ip, #0
90021482:	db77      	blt.n	90021574 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90021484:	45e6      	cmp	lr, ip
90021486:	dd75      	ble.n	90021574 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90021488:	f812 700a 	ldrb.w	r7, [r2, sl]
9002148c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90021490:	441f      	add	r7, r3
90021492:	f11c 0201 	adds.w	r2, ip, #1
90021496:	d472      	bmi.n	9002157e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90021498:	4596      	cmp	lr, r2
9002149a:	dd70      	ble.n	9002157e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9002149c:	2800      	cmp	r0, #0
9002149e:	d06e      	beq.n	9002157e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
900214a0:	f898 4001 	ldrb.w	r4, [r8, #1]
900214a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
900214a8:	441c      	add	r4, r3
900214aa:	3501      	adds	r5, #1
900214ac:	d46b      	bmi.n	90021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
900214ae:	45a9      	cmp	r9, r5
900214b0:	dd69      	ble.n	90021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
900214b2:	2e00      	cmp	r6, #0
900214b4:	d067      	beq.n	90021586 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
900214b6:	f1bc 0f00 	cmp.w	ip, #0
900214ba:	db62      	blt.n	90021582 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
900214bc:	45e6      	cmp	lr, ip
900214be:	dd60      	ble.n	90021582 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
900214c0:	f818 500e 	ldrb.w	r5, [r8, lr]
900214c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
900214c8:	441d      	add	r5, r3
900214ca:	f11c 0201 	adds.w	r2, ip, #1
900214ce:	d45d      	bmi.n	9002158c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
900214d0:	4596      	cmp	lr, r2
900214d2:	dd5b      	ble.n	9002158c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
900214d4:	2800      	cmp	r0, #0
900214d6:	d059      	beq.n	9002158c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
900214d8:	44c6      	add	lr, r8
900214da:	f89e 2001 	ldrb.w	r2, [lr, #1]
900214de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900214e2:	4413      	add	r3, r2
900214e4:	b280      	uxth	r0, r0
900214e6:	f897 e002 	ldrb.w	lr, [r7, #2]
900214ea:	b2b2      	uxth	r2, r6
900214ec:	f897 9000 	ldrb.w	r9, [r7]
900214f0:	787f      	ldrb	r7, [r7, #1]
900214f2:	fb00 f602 	mul.w	r6, r0, r2
900214f6:	0100      	lsls	r0, r0, #4
900214f8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
900214fc:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
90021500:	1b80      	subs	r0, r0, r6
90021502:	fa1f fc82 	uxth.w	ip, r2
90021506:	b282      	uxth	r2, r0
90021508:	78a0      	ldrb	r0, [r4, #2]
9002150a:	eba8 080c 	sub.w	r8, r8, ip
9002150e:	4350      	muls	r0, r2
90021510:	fa1f f888 	uxth.w	r8, r8
90021514:	fb08 0e0e 	mla	lr, r8, lr, r0
90021518:	78a8      	ldrb	r0, [r5, #2]
9002151a:	fb0c e000 	mla	r0, ip, r0, lr
9002151e:	f893 e002 	ldrb.w	lr, [r3, #2]
90021522:	fb06 0e0e 	mla	lr, r6, lr, r0
90021526:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9002152a:	f894 e000 	ldrb.w	lr, [r4]
9002152e:	fb02 fe0e 	mul.w	lr, r2, lr
90021532:	fb08 e909 	mla	r9, r8, r9, lr
90021536:	f895 e000 	ldrb.w	lr, [r5]
9002153a:	fb0c 990e 	mla	r9, ip, lr, r9
9002153e:	f893 e000 	ldrb.w	lr, [r3]
90021542:	785b      	ldrb	r3, [r3, #1]
90021544:	fb06 9e0e 	mla	lr, r6, lr, r9
90021548:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9002154c:	ea4e 0e00 	orr.w	lr, lr, r0
90021550:	7860      	ldrb	r0, [r4, #1]
90021552:	4350      	muls	r0, r2
90021554:	786a      	ldrb	r2, [r5, #1]
90021556:	fb08 0007 	mla	r0, r8, r7, r0
9002155a:	fb0c 0202 	mla	r2, ip, r2, r0
9002155e:	fb06 2303 	mla	r3, r6, r3, r2
90021562:	095b      	lsrs	r3, r3, #5
90021564:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021568:	ea4e 0303 	orr.w	r3, lr, r3
9002156c:	800b      	strh	r3, [r1, #0]
9002156e:	b003      	add	sp, #12
90021570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021574:	af01      	add	r7, sp, #4
90021576:	e78c      	b.n	90021492 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
90021578:	ac01      	add	r4, sp, #4
9002157a:	4627      	mov	r7, r4
9002157c:	e795      	b.n	900214aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9002157e:	ac01      	add	r4, sp, #4
90021580:	e793      	b.n	900214aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90021582:	ad01      	add	r5, sp, #4
90021584:	e7a1      	b.n	900214ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
90021586:	ab01      	add	r3, sp, #4
90021588:	461d      	mov	r5, r3
9002158a:	e7ab      	b.n	900214e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9002158c:	ab01      	add	r3, sp, #4
9002158e:	e7a9      	b.n	900214e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

90021590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021594:	b08f      	sub	sp, #60	; 0x3c
90021596:	920c      	str	r2, [sp, #48]	; 0x30
90021598:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9002159a:	900d      	str	r0, [sp, #52]	; 0x34
9002159c:	910a      	str	r1, [sp, #40]	; 0x28
9002159e:	6850      	ldr	r0, [r2, #4]
900215a0:	9306      	str	r3, [sp, #24]
900215a2:	6812      	ldr	r2, [r2, #0]
900215a4:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
900215a8:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
900215ac:	fb00 1303 	mla	r3, r0, r3, r1
900215b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900215b4:	9307      	str	r3, [sp, #28]
900215b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
900215b8:	681b      	ldr	r3, [r3, #0]
900215ba:	9308      	str	r3, [sp, #32]
900215bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
900215be:	685c      	ldr	r4, [r3, #4]
900215c0:	3404      	adds	r4, #4
900215c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900215c4:	2b00      	cmp	r3, #0
900215c6:	dc03      	bgt.n	900215d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
900215c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900215ca:	2b00      	cmp	r3, #0
900215cc:	f340 81d5 	ble.w	9002197a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
900215d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900215d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900215d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900215da:	1e48      	subs	r0, r1, #1
900215dc:	1e56      	subs	r6, r2, #1
900215de:	9b06      	ldr	r3, [sp, #24]
900215e0:	2b00      	cmp	r3, #0
900215e2:	f340 80b6 	ble.w	90021752 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900215e6:	ea5f 472b 	movs.w	r7, fp, asr #16
900215ea:	ea4f 4325 	mov.w	r3, r5, asr #16
900215ee:	d406      	bmi.n	900215fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900215f0:	4287      	cmp	r7, r0
900215f2:	da04      	bge.n	900215fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900215f4:	2b00      	cmp	r3, #0
900215f6:	db02      	blt.n	900215fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900215f8:	42b3      	cmp	r3, r6
900215fa:	f2c0 80ab 	blt.w	90021754 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
900215fe:	3701      	adds	r7, #1
90021600:	f100 809c 	bmi.w	9002173c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021604:	42b9      	cmp	r1, r7
90021606:	f2c0 8099 	blt.w	9002173c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9002160a:	3301      	adds	r3, #1
9002160c:	f100 8096 	bmi.w	9002173c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021610:	429a      	cmp	r2, r3
90021612:	f2c0 8093 	blt.w	9002173c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
90021616:	9b06      	ldr	r3, [sp, #24]
90021618:	930b      	str	r3, [sp, #44]	; 0x2c
9002161a:	9b07      	ldr	r3, [sp, #28]
9002161c:	9309      	str	r3, [sp, #36]	; 0x24
9002161e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021620:	2b00      	cmp	r3, #0
90021622:	f340 80b4 	ble.w	9002178e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90021626:	9820      	ldr	r0, [sp, #128]	; 0x80
90021628:	142e      	asrs	r6, r5, #16
9002162a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002162c:	f3cb 3303 	ubfx	r3, fp, #12, #4
90021630:	68c7      	ldr	r7, [r0, #12]
90021632:	ea5f 402b 	movs.w	r0, fp, asr #16
90021636:	f3c5 3103 	ubfx	r1, r5, #12, #4
9002163a:	6892      	ldr	r2, [r2, #8]
9002163c:	f100 80fb 	bmi.w	90021836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
90021640:	f102 3cff 	add.w	ip, r2, #4294967295
90021644:	4560      	cmp	r0, ip
90021646:	f280 80f6 	bge.w	90021836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9002164a:	2e00      	cmp	r6, #0
9002164c:	f2c0 80f3 	blt.w	90021836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
90021650:	f107 3cff 	add.w	ip, r7, #4294967295
90021654:	4566      	cmp	r6, ip
90021656:	f280 80ee 	bge.w	90021836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9002165a:	b212      	sxth	r2, r2
9002165c:	fb06 0002 	mla	r0, r6, r2, r0
90021660:	9e08      	ldr	r6, [sp, #32]
90021662:	1837      	adds	r7, r6, r0
90021664:	5c30      	ldrb	r0, [r6, r0]
90021666:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9002166a:	eb04 0c08 	add.w	ip, r4, r8
9002166e:	2b00      	cmp	r3, #0
90021670:	f000 80d3 	beq.w	9002181a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
90021674:	787e      	ldrb	r6, [r7, #1]
90021676:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9002167a:	4426      	add	r6, r4
9002167c:	2900      	cmp	r1, #0
9002167e:	f000 80d4 	beq.w	9002182a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90021682:	18b8      	adds	r0, r7, r2
90021684:	5cba      	ldrb	r2, [r7, r2]
90021686:	7840      	ldrb	r0, [r0, #1]
90021688:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002168c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021690:	4422      	add	r2, r4
90021692:	4420      	add	r0, r4
90021694:	b29b      	uxth	r3, r3
90021696:	78b7      	ldrb	r7, [r6, #2]
90021698:	b289      	uxth	r1, r1
9002169a:	f89c a002 	ldrb.w	sl, [ip, #2]
9002169e:	f89c c001 	ldrb.w	ip, [ip, #1]
900216a2:	fb03 f901 	mul.w	r9, r3, r1
900216a6:	011b      	lsls	r3, r3, #4
900216a8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
900216ac:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
900216b0:	eba3 0309 	sub.w	r3, r3, r9
900216b4:	b289      	uxth	r1, r1
900216b6:	b29b      	uxth	r3, r3
900216b8:	ebae 0e01 	sub.w	lr, lr, r1
900216bc:	435f      	muls	r7, r3
900216be:	fa1f fe8e 	uxth.w	lr, lr
900216c2:	fb0e 770a 	mla	r7, lr, sl, r7
900216c6:	f892 a002 	ldrb.w	sl, [r2, #2]
900216ca:	fb01 770a 	mla	r7, r1, sl, r7
900216ce:	f890 a002 	ldrb.w	sl, [r0, #2]
900216d2:	fb09 7a0a 	mla	sl, r9, sl, r7
900216d6:	f814 7008 	ldrb.w	r7, [r4, r8]
900216da:	f896 8000 	ldrb.w	r8, [r6]
900216de:	7876      	ldrb	r6, [r6, #1]
900216e0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
900216e4:	fb03 f808 	mul.w	r8, r3, r8
900216e8:	4373      	muls	r3, r6
900216ea:	fb0e 8807 	mla	r8, lr, r7, r8
900216ee:	7817      	ldrb	r7, [r2, #0]
900216f0:	fb0e 330c 	mla	r3, lr, ip, r3
900216f4:	fb01 8807 	mla	r8, r1, r7, r8
900216f8:	7807      	ldrb	r7, [r0, #0]
900216fa:	fb09 8707 	mla	r7, r9, r7, r8
900216fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90021702:	ea47 070a 	orr.w	r7, r7, sl
90021706:	f892 a001 	ldrb.w	sl, [r2, #1]
9002170a:	fb01 310a 	mla	r1, r1, sl, r3
9002170e:	f890 a001 	ldrb.w	sl, [r0, #1]
90021712:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021714:	fb09 1a0a 	mla	sl, r9, sl, r1
90021718:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9002171c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021720:	ea47 070a 	orr.w	r7, r7, sl
90021724:	801f      	strh	r7, [r3, #0]
90021726:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021728:	3302      	adds	r3, #2
9002172a:	9309      	str	r3, [sp, #36]	; 0x24
9002172c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002172e:	449b      	add	fp, r3
90021730:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021732:	441d      	add	r5, r3
90021734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021736:	3b01      	subs	r3, #1
90021738:	930b      	str	r3, [sp, #44]	; 0x2c
9002173a:	e770      	b.n	9002161e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002173c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002173e:	449b      	add	fp, r3
90021740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021742:	441d      	add	r5, r3
90021744:	9b06      	ldr	r3, [sp, #24]
90021746:	3b01      	subs	r3, #1
90021748:	9306      	str	r3, [sp, #24]
9002174a:	9b07      	ldr	r3, [sp, #28]
9002174c:	3302      	adds	r3, #2
9002174e:	9307      	str	r3, [sp, #28]
90021750:	e745      	b.n	900215de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
90021752:	d023      	beq.n	9002179c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90021754:	9b06      	ldr	r3, [sp, #24]
90021756:	981b      	ldr	r0, [sp, #108]	; 0x6c
90021758:	3b01      	subs	r3, #1
9002175a:	fb00 b003 	mla	r0, r0, r3, fp
9002175e:	1400      	asrs	r0, r0, #16
90021760:	f53f af59 	bmi.w	90021616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021764:	3901      	subs	r1, #1
90021766:	4288      	cmp	r0, r1
90021768:	f6bf af55 	bge.w	90021616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002176c:	991c      	ldr	r1, [sp, #112]	; 0x70
9002176e:	fb01 5303 	mla	r3, r1, r3, r5
90021772:	141b      	asrs	r3, r3, #16
90021774:	f53f af4f 	bmi.w	90021616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021778:	3a01      	subs	r2, #1
9002177a:	4293      	cmp	r3, r2
9002177c:	f6bf af4b 	bge.w	90021616 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021780:	9b06      	ldr	r3, [sp, #24]
90021782:	9309      	str	r3, [sp, #36]	; 0x24
90021784:	9b07      	ldr	r3, [sp, #28]
90021786:	930b      	str	r3, [sp, #44]	; 0x2c
90021788:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002178a:	2b00      	cmp	r3, #0
9002178c:	dc70      	bgt.n	90021870 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9002178e:	9b06      	ldr	r3, [sp, #24]
90021790:	9a07      	ldr	r2, [sp, #28]
90021792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021796:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002179a:	9307      	str	r3, [sp, #28]
9002179c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002179e:	2b00      	cmp	r3, #0
900217a0:	f340 80eb 	ble.w	9002197a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
900217a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900217a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
900217aa:	ee30 0a04 	vadd.f32	s0, s0, s8
900217ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
900217b2:	eef0 6a62 	vmov.f32	s13, s5
900217b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
900217ba:	ee31 1a05 	vadd.f32	s2, s2, s10
900217be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900217c2:	ee16 ba90 	vmov	fp, s13
900217c6:	eef0 6a43 	vmov.f32	s13, s6
900217ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900217ce:	ee16 5a90 	vmov	r5, s13
900217d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900217d6:	ee61 7a27 	vmul.f32	s15, s2, s15
900217da:	ee77 2a62 	vsub.f32	s5, s14, s5
900217de:	ee37 3ac3 	vsub.f32	s6, s15, s6
900217e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900217e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900217ea:	ee12 2a90 	vmov	r2, s5
900217ee:	eef0 2a47 	vmov.f32	s5, s14
900217f2:	fb92 f3f3 	sdiv	r3, r2, r3
900217f6:	ee13 2a10 	vmov	r2, s6
900217fa:	931b      	str	r3, [sp, #108]	; 0x6c
900217fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
900217fe:	eeb0 3a67 	vmov.f32	s6, s15
90021802:	fb92 f3f3 	sdiv	r3, r2, r3
90021806:	931c      	str	r3, [sp, #112]	; 0x70
90021808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002180a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9002180c:	3b01      	subs	r3, #1
9002180e:	930a      	str	r3, [sp, #40]	; 0x28
90021810:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021812:	bf08      	it	eq
90021814:	4613      	moveq	r3, r2
90021816:	9306      	str	r3, [sp, #24]
90021818:	e6d3      	b.n	900215c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9002181a:	b149      	cbz	r1, 90021830 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9002181c:	5cba      	ldrb	r2, [r7, r2]
9002181e:	4660      	mov	r0, ip
90021820:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021824:	4422      	add	r2, r4
90021826:	4666      	mov	r6, ip
90021828:	e734      	b.n	90021694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9002182a:	4660      	mov	r0, ip
9002182c:	4662      	mov	r2, ip
9002182e:	e731      	b.n	90021694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
90021830:	4660      	mov	r0, ip
90021832:	4662      	mov	r2, ip
90021834:	e7f7      	b.n	90021826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90021836:	f110 0c01 	adds.w	ip, r0, #1
9002183a:	f53f af74 	bmi.w	90021726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002183e:	4562      	cmp	r2, ip
90021840:	f6ff af71 	blt.w	90021726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021844:	f116 0c01 	adds.w	ip, r6, #1
90021848:	f53f af6d 	bmi.w	90021726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002184c:	4567      	cmp	r7, ip
9002184e:	f6ff af6a 	blt.w	90021726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021852:	b23f      	sxth	r7, r7
90021854:	b212      	sxth	r2, r2
90021856:	9701      	str	r7, [sp, #4]
90021858:	9200      	str	r2, [sp, #0]
9002185a:	e9cd 3104 	strd	r3, r1, [sp, #16]
9002185e:	e9cd 0602 	strd	r0, r6, [sp, #8]
90021862:	4623      	mov	r3, r4
90021864:	980d      	ldr	r0, [sp, #52]	; 0x34
90021866:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9002186a:	f7ff fde7 	bl	9002143c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9002186e:	e75a      	b.n	90021726 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021870:	9a20      	ldr	r2, [sp, #128]	; 0x80
90021872:	ea4f 462b 	mov.w	r6, fp, asr #16
90021876:	1428      	asrs	r0, r5, #16
90021878:	f3cb 3303 	ubfx	r3, fp, #12, #4
9002187c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021880:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021884:	fb02 6000 	mla	r0, r2, r0, r6
90021888:	9e08      	ldr	r6, [sp, #32]
9002188a:	f816 8000 	ldrb.w	r8, [r6, r0]
9002188e:	1837      	adds	r7, r6, r0
90021890:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90021894:	eb04 0c08 	add.w	ip, r4, r8
90021898:	2b00      	cmp	r3, #0
9002189a:	d060      	beq.n	9002195e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9002189c:	787e      	ldrb	r6, [r7, #1]
9002189e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
900218a2:	4426      	add	r6, r4
900218a4:	2900      	cmp	r1, #0
900218a6:	d062      	beq.n	9002196e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
900218a8:	18b8      	adds	r0, r7, r2
900218aa:	5cba      	ldrb	r2, [r7, r2]
900218ac:	7840      	ldrb	r0, [r0, #1]
900218ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900218b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900218b6:	4422      	add	r2, r4
900218b8:	4420      	add	r0, r4
900218ba:	b29b      	uxth	r3, r3
900218bc:	78b7      	ldrb	r7, [r6, #2]
900218be:	b289      	uxth	r1, r1
900218c0:	f89c a002 	ldrb.w	sl, [ip, #2]
900218c4:	f89c c001 	ldrb.w	ip, [ip, #1]
900218c8:	fb03 f901 	mul.w	r9, r3, r1
900218cc:	011b      	lsls	r3, r3, #4
900218ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
900218d2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
900218d6:	eba3 0309 	sub.w	r3, r3, r9
900218da:	b289      	uxth	r1, r1
900218dc:	b29b      	uxth	r3, r3
900218de:	ebae 0e01 	sub.w	lr, lr, r1
900218e2:	435f      	muls	r7, r3
900218e4:	fa1f fe8e 	uxth.w	lr, lr
900218e8:	fb0e 770a 	mla	r7, lr, sl, r7
900218ec:	f892 a002 	ldrb.w	sl, [r2, #2]
900218f0:	fb01 770a 	mla	r7, r1, sl, r7
900218f4:	f890 a002 	ldrb.w	sl, [r0, #2]
900218f8:	fb09 7a0a 	mla	sl, r9, sl, r7
900218fc:	f814 7008 	ldrb.w	r7, [r4, r8]
90021900:	f896 8000 	ldrb.w	r8, [r6]
90021904:	7876      	ldrb	r6, [r6, #1]
90021906:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9002190a:	fb03 f808 	mul.w	r8, r3, r8
9002190e:	4373      	muls	r3, r6
90021910:	7856      	ldrb	r6, [r2, #1]
90021912:	fb0e 8807 	mla	r8, lr, r7, r8
90021916:	7817      	ldrb	r7, [r2, #0]
90021918:	fb0e 330c 	mla	r3, lr, ip, r3
9002191c:	fb01 8807 	mla	r8, r1, r7, r8
90021920:	7807      	ldrb	r7, [r0, #0]
90021922:	fb01 3306 	mla	r3, r1, r6, r3
90021926:	fb09 8707 	mla	r7, r9, r7, r8
9002192a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9002192e:	ea47 070a 	orr.w	r7, r7, sl
90021932:	f890 a001 	ldrb.w	sl, [r0, #1]
90021936:	fb09 3a0a 	mla	sl, r9, sl, r3
9002193a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002193c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90021940:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90021944:	ea47 070a 	orr.w	r7, r7, sl
90021948:	f823 7b02 	strh.w	r7, [r3], #2
9002194c:	930b      	str	r3, [sp, #44]	; 0x2c
9002194e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021950:	449b      	add	fp, r3
90021952:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021954:	441d      	add	r5, r3
90021956:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021958:	3b01      	subs	r3, #1
9002195a:	9309      	str	r3, [sp, #36]	; 0x24
9002195c:	e714      	b.n	90021788 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9002195e:	b149      	cbz	r1, 90021974 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
90021960:	5cba      	ldrb	r2, [r7, r2]
90021962:	4660      	mov	r0, ip
90021964:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021968:	4422      	add	r2, r4
9002196a:	4666      	mov	r6, ip
9002196c:	e7a5      	b.n	900218ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9002196e:	4660      	mov	r0, ip
90021970:	4662      	mov	r2, ip
90021972:	e7a2      	b.n	900218ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
90021974:	4660      	mov	r0, ip
90021976:	4662      	mov	r2, ip
90021978:	e7f7      	b.n	9002196a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9002197a:	b00f      	add	sp, #60	; 0x3c
9002197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021980 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
90021980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021984:	b085      	sub	sp, #20
90021986:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9002198a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9002198e:	9102      	str	r1, [sp, #8]
90021990:	2c00      	cmp	r4, #0
90021992:	fb04 710c 	mla	r1, r4, ip, r7
90021996:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9002199a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9002199e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
900219a2:	eb02 0e01 	add.w	lr, r2, r1
900219a6:	f2c0 8122 	blt.w	90021bee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
900219aa:	45a0      	cmp	r8, r4
900219ac:	f340 811f 	ble.w	90021bee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
900219b0:	2f00      	cmp	r7, #0
900219b2:	f2c0 811a 	blt.w	90021bea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
900219b6:	45bc      	cmp	ip, r7
900219b8:	f340 8117 	ble.w	90021bea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
900219bc:	5c52      	ldrb	r2, [r2, r1]
900219be:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
900219c2:	1c7a      	adds	r2, r7, #1
900219c4:	f100 8116 	bmi.w	90021bf4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
900219c8:	4594      	cmp	ip, r2
900219ca:	f340 8113 	ble.w	90021bf4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
900219ce:	2e00      	cmp	r6, #0
900219d0:	f000 8112 	beq.w	90021bf8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
900219d4:	f89e 2001 	ldrb.w	r2, [lr, #1]
900219d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900219dc:	3401      	adds	r4, #1
900219de:	f100 810f 	bmi.w	90021c00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
900219e2:	45a0      	cmp	r8, r4
900219e4:	f340 810c 	ble.w	90021c00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
900219e8:	2800      	cmp	r0, #0
900219ea:	f000 810c 	beq.w	90021c06 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
900219ee:	2f00      	cmp	r7, #0
900219f0:	f2c0 8104 	blt.w	90021bfc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
900219f4:	45bc      	cmp	ip, r7
900219f6:	f340 8101 	ble.w	90021bfc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
900219fa:	f81e 200c 	ldrb.w	r2, [lr, ip]
900219fe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
90021a02:	3701      	adds	r7, #1
90021a04:	f100 8102 	bmi.w	90021c0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
90021a08:	45bc      	cmp	ip, r7
90021a0a:	f340 80ff 	ble.w	90021c0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
90021a0e:	2e00      	cmp	r6, #0
90021a10:	f000 80fe 	beq.w	90021c10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
90021a14:	44f4      	add	ip, lr
90021a16:	f89c 2001 	ldrb.w	r2, [ip, #1]
90021a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
90021a1e:	b2b6      	uxth	r6, r6
90021a20:	b280      	uxth	r0, r0
90021a22:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021a26:	fb00 fe06 	mul.w	lr, r0, r6
90021a2a:	0136      	lsls	r6, r6, #4
90021a2c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021a30:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021a34:	eba6 070e 	sub.w	r7, r6, lr
90021a38:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90021a3c:	ea4f 6914 	mov.w	r9, r4, lsr #24
90021a40:	b280      	uxth	r0, r0
90021a42:	b2bf      	uxth	r7, r7
90021a44:	1a1b      	subs	r3, r3, r0
90021a46:	ea4f 6812 	mov.w	r8, r2, lsr #24
90021a4a:	fb0a f607 	mul.w	r6, sl, r7
90021a4e:	b29b      	uxth	r3, r3
90021a50:	fb0b 6603 	mla	r6, fp, r3, r6
90021a54:	fb00 6609 	mla	r6, r0, r9, r6
90021a58:	fb0e 6608 	mla	r6, lr, r8, r6
90021a5c:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021a60:	9600      	str	r6, [sp, #0]
90021a62:	2e00      	cmp	r6, #0
90021a64:	f000 80be 	beq.w	90021be4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
90021a68:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021a6c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90021a70:	9e02      	ldr	r6, [sp, #8]
90021a72:	fb0b fc0c 	mul.w	ip, fp, ip
90021a76:	fb0b f505 	mul.w	r5, fp, r5
90021a7a:	8836      	ldrh	r6, [r6, #0]
90021a7c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90021a80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021a84:	9501      	str	r5, [sp, #4]
90021a86:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021a8a:	44dc      	add	ip, fp
90021a8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021a90:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021a94:	9503      	str	r5, [sp, #12]
90021a96:	9d01      	ldr	r5, [sp, #4]
90021a98:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90021a9c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021aa0:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021aa4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021aa8:	fb0a fc0c 	mul.w	ip, sl, ip
90021aac:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021ab0:	fb0a fa01 	mul.w	sl, sl, r1
90021ab4:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021ab8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021abc:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021ac0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021ac4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021ac8:	4465      	add	r5, ip
90021aca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021ace:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021ad2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021ad6:	fb09 fc0c 	mul.w	ip, r9, ip
90021ada:	0a2d      	lsrs	r5, r5, #8
90021adc:	fb09 f904 	mul.w	r9, r9, r4
90021ae0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021ae4:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021ae8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021aec:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021af0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021af4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021af8:	437d      	muls	r5, r7
90021afa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90021afe:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021b02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021b06:	4461      	add	r1, ip
90021b08:	fb08 f404 	mul.w	r4, r8, r4
90021b0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021b10:	fb08 f802 	mul.w	r8, r8, r2
90021b14:	0a09      	lsrs	r1, r1, #8
90021b16:	0a22      	lsrs	r2, r4, #8
90021b18:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90021b1c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021b20:	fb07 f70a 	mul.w	r7, r7, sl
90021b24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021b28:	4414      	add	r4, r2
90021b2a:	f508 7280 	add.w	r2, r8, #256	; 0x100
90021b2e:	0a24      	lsrs	r4, r4, #8
90021b30:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021b34:	9a03      	ldr	r2, [sp, #12]
90021b36:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90021b3a:	fb02 5503 	mla	r5, r2, r3, r5
90021b3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021b42:	9a00      	ldr	r2, [sp, #0]
90021b44:	fb04 540e 	mla	r4, r4, lr, r5
90021b48:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90021b4c:	1235      	asrs	r5, r6, #8
90021b4e:	fb01 4100 	mla	r1, r1, r0, r4
90021b52:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90021b56:	0a09      	lsrs	r1, r1, #8
90021b58:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90021b5c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021b60:	fb03 7101 	mla	r1, r3, r1, r7
90021b64:	fb0e 1e08 	mla	lr, lr, r8, r1
90021b68:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90021b6c:	fb00 e101 	mla	r1, r0, r1, lr
90021b70:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90021b74:	b287      	uxth	r7, r0
90021b76:	0a09      	lsrs	r1, r1, #8
90021b78:	437a      	muls	r2, r7
90021b7a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021b7e:	1c53      	adds	r3, r2, #1
90021b80:	4321      	orrs	r1, r4
90021b82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021b86:	0c0a      	lsrs	r2, r1, #16
90021b88:	f3c1 2407 	ubfx	r4, r1, #8, #8
90021b8c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90021b90:	b2c8      	uxtb	r0, r1
90021b92:	fb12 f207 	smulbb	r2, r2, r7
90021b96:	fb14 f407 	smulbb	r4, r4, r7
90021b9a:	b2db      	uxtb	r3, r3
90021b9c:	fb10 f007 	smulbb	r0, r0, r7
90021ba0:	fb05 2503 	mla	r5, r5, r3, r2
90021ba4:	10f2      	asrs	r2, r6, #3
90021ba6:	00f6      	lsls	r6, r6, #3
90021ba8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021bac:	b2ad      	uxth	r5, r5
90021bae:	b2f6      	uxtb	r6, r6
90021bb0:	fb02 4203 	mla	r2, r2, r3, r4
90021bb4:	fb06 0303 	mla	r3, r6, r3, r0
90021bb8:	b294      	uxth	r4, r2
90021bba:	b299      	uxth	r1, r3
90021bbc:	1c6b      	adds	r3, r5, #1
90021bbe:	1c62      	adds	r2, r4, #1
90021bc0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90021bc4:	1c4b      	adds	r3, r1, #1
90021bc6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90021bca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90021bce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90021bd2:	0952      	lsrs	r2, r2, #5
90021bd4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021bd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021bdc:	432b      	orrs	r3, r5
90021bde:	4313      	orrs	r3, r2
90021be0:	9a02      	ldr	r2, [sp, #8]
90021be2:	8013      	strh	r3, [r2, #0]
90021be4:	b005      	add	sp, #20
90021be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021bea:	2500      	movs	r5, #0
90021bec:	e6e9      	b.n	900219c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
90021bee:	2100      	movs	r1, #0
90021bf0:	460d      	mov	r5, r1
90021bf2:	e6f3      	b.n	900219dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021bf4:	2100      	movs	r1, #0
90021bf6:	e6f1      	b.n	900219dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021bf8:	4631      	mov	r1, r6
90021bfa:	e6ef      	b.n	900219dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021bfc:	2400      	movs	r4, #0
90021bfe:	e700      	b.n	90021a02 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
90021c00:	2200      	movs	r2, #0
90021c02:	4614      	mov	r4, r2
90021c04:	e70b      	b.n	90021a1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021c06:	4602      	mov	r2, r0
90021c08:	4604      	mov	r4, r0
90021c0a:	e708      	b.n	90021a1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021c0c:	2200      	movs	r2, #0
90021c0e:	e706      	b.n	90021a1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021c10:	4632      	mov	r2, r6
90021c12:	e704      	b.n	90021a1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

90021c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021c18:	b09f      	sub	sp, #124	; 0x7c
90021c1a:	921b      	str	r2, [sp, #108]	; 0x6c
90021c1c:	9309      	str	r3, [sp, #36]	; 0x24
90021c1e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90021c20:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90021c24:	901d      	str	r0, [sp, #116]	; 0x74
90021c26:	931c      	str	r3, [sp, #112]	; 0x70
90021c28:	6850      	ldr	r0, [r2, #4]
90021c2a:	9119      	str	r1, [sp, #100]	; 0x64
90021c2c:	6812      	ldr	r2, [r2, #0]
90021c2e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90021c30:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90021c34:	fb00 1303 	mla	r3, r0, r3, r1
90021c38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021c3c:	930c      	str	r3, [sp, #48]	; 0x30
90021c3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021c40:	681b      	ldr	r3, [r3, #0]
90021c42:	9312      	str	r3, [sp, #72]	; 0x48
90021c44:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021c46:	685e      	ldr	r6, [r3, #4]
90021c48:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
90021c4c:	3604      	adds	r6, #4
90021c4e:	930d      	str	r3, [sp, #52]	; 0x34
90021c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021c52:	2b00      	cmp	r3, #0
90021c54:	dc03      	bgt.n	90021c5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90021c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021c58:	2b00      	cmp	r3, #0
90021c5a:	f340 8387 	ble.w	9002236c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021c5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021c60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021c64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021c68:	1e48      	subs	r0, r1, #1
90021c6a:	1e57      	subs	r7, r2, #1
90021c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021c6e:	2b00      	cmp	r3, #0
90021c70:	f340 8194 	ble.w	90021f9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90021c74:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021c76:	142b      	asrs	r3, r5, #16
90021c78:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021c7c:	d406      	bmi.n	90021c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021c7e:	4584      	cmp	ip, r0
90021c80:	da04      	bge.n	90021c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021c82:	2b00      	cmp	r3, #0
90021c84:	db02      	blt.n	90021c8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021c86:	42bb      	cmp	r3, r7
90021c88:	f2c0 8189 	blt.w	90021f9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90021c8c:	f11c 0c01 	adds.w	ip, ip, #1
90021c90:	f100 8177 	bmi.w	90021f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021c94:	4561      	cmp	r1, ip
90021c96:	f2c0 8174 	blt.w	90021f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021c9a:	3301      	adds	r3, #1
90021c9c:	f100 8171 	bmi.w	90021f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021ca0:	429a      	cmp	r2, r3
90021ca2:	f2c0 816e 	blt.w	90021f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021ca8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
90021caa:	931a      	str	r3, [sp, #104]	; 0x68
90021cac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021cae:	2b00      	cmp	r3, #0
90021cb0:	f340 8193 	ble.w	90021fda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90021cb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021cb6:	ea4f 4c25 	mov.w	ip, r5, asr #16
90021cba:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021cbe:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021cc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021cc4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
90021cc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021cca:	141b      	asrs	r3, r3, #16
90021ccc:	f100 81d6 	bmi.w	9002207c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021cd0:	f100 38ff 	add.w	r8, r0, #4294967295
90021cd4:	4543      	cmp	r3, r8
90021cd6:	f280 81d1 	bge.w	9002207c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021cda:	f1bc 0f00 	cmp.w	ip, #0
90021cde:	f2c0 81cd 	blt.w	9002207c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021ce2:	f10e 38ff 	add.w	r8, lr, #4294967295
90021ce6:	45c4      	cmp	ip, r8
90021ce8:	f280 81c8 	bge.w	9002207c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021cec:	b200      	sxth	r0, r0
90021cee:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021cf0:	fb0c 3300 	mla	r3, ip, r0, r3
90021cf4:	eb04 0803 	add.w	r8, r4, r3
90021cf8:	5ce3      	ldrb	r3, [r4, r3]
90021cfa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021cfe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90021d02:	2a00      	cmp	r2, #0
90021d04:	f000 81af 	beq.w	90022066 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90021d08:	f898 c001 	ldrb.w	ip, [r8, #1]
90021d0c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90021d10:	940e      	str	r4, [sp, #56]	; 0x38
90021d12:	0e24      	lsrs	r4, r4, #24
90021d14:	9415      	str	r4, [sp, #84]	; 0x54
90021d16:	b179      	cbz	r1, 90021d38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021d18:	eb08 0c00 	add.w	ip, r8, r0
90021d1c:	f818 0000 	ldrb.w	r0, [r8, r0]
90021d20:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021d24:	900a      	str	r0, [sp, #40]	; 0x28
90021d26:	0e00      	lsrs	r0, r0, #24
90021d28:	9013      	str	r0, [sp, #76]	; 0x4c
90021d2a:	f89c 0001 	ldrb.w	r0, [ip, #1]
90021d2e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021d32:	900f      	str	r0, [sp, #60]	; 0x3c
90021d34:	0e00      	lsrs	r0, r0, #24
90021d36:	9016      	str	r0, [sp, #88]	; 0x58
90021d38:	b292      	uxth	r2, r2
90021d3a:	9815      	ldr	r0, [sp, #84]	; 0x54
90021d3c:	b289      	uxth	r1, r1
90021d3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021d40:	fb02 f901 	mul.w	r9, r2, r1
90021d44:	0112      	lsls	r2, r2, #4
90021d46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021d4a:	eba2 0809 	sub.w	r8, r2, r9
90021d4e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021d52:	b289      	uxth	r1, r1
90021d54:	fa1f f888 	uxth.w	r8, r8
90021d58:	1a52      	subs	r2, r2, r1
90021d5a:	fb08 f000 	mul.w	r0, r8, r0
90021d5e:	b292      	uxth	r2, r2
90021d60:	fb02 000e 	mla	r0, r2, lr, r0
90021d64:	fb01 0004 	mla	r0, r1, r4, r0
90021d68:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021d6a:	fb09 0004 	mla	r0, r9, r4, r0
90021d6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
90021d72:	2800      	cmp	r0, #0
90021d74:	f000 80fa 	beq.w	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021d78:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90021d7c:	d01b      	beq.n	90021db6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021d7e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021d82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021d86:	fb0e fa0a 	mul.w	sl, lr, sl
90021d8a:	fb0e fe03 	mul.w	lr, lr, r3
90021d8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021d92:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021d96:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90021d9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021d9e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021da2:	4453      	add	r3, sl
90021da4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021da8:	0a1b      	lsrs	r3, r3, #8
90021daa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021dae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021db2:	ea43 030c 	orr.w	r3, r3, ip
90021db6:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021db8:	2cff      	cmp	r4, #255	; 0xff
90021dba:	d021      	beq.n	90021e00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90021dbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021dbe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021dc2:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021dc4:	fb04 fb0b 	mul.w	fp, r4, fp
90021dc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021dca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021dce:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021dd0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021dd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021dd8:	fb04 fa0a 	mul.w	sl, r4, sl
90021ddc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021de0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021de4:	44de      	add	lr, fp
90021de6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021dea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021dee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021df2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021df6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021dfa:	ea4e 040a 	orr.w	r4, lr, sl
90021dfe:	940e      	str	r4, [sp, #56]	; 0x38
90021e00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021e02:	2cff      	cmp	r4, #255	; 0xff
90021e04:	d021      	beq.n	90021e4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90021e06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021e08:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021e0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021e0e:	fb04 fb0b 	mul.w	fp, r4, fp
90021e12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021e14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021e18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021e1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021e1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021e22:	fb04 fa0a 	mul.w	sl, r4, sl
90021e26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021e2a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021e2e:	44de      	add	lr, fp
90021e30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021e34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021e38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021e3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021e40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021e44:	ea4e 040a 	orr.w	r4, lr, sl
90021e48:	940a      	str	r4, [sp, #40]	; 0x28
90021e4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021e4c:	2cff      	cmp	r4, #255	; 0xff
90021e4e:	d021      	beq.n	90021e94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
90021e50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021e52:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021e56:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021e58:	fb04 fb0b 	mul.w	fp, r4, fp
90021e5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021e5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021e62:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021e64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021e68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021e6c:	fb04 fa0a 	mul.w	sl, r4, sl
90021e70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021e74:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021e78:	44de      	add	lr, fp
90021e7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021e7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021e82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021e86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021e8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021e8e:	ea4e 040a 	orr.w	r4, lr, sl
90021e92:	940f      	str	r4, [sp, #60]	; 0x3c
90021e94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021e96:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
90021e9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021e9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021ea4:	fb08 fc0c 	mul.w	ip, r8, ip
90021ea8:	fb02 cc0e 	mla	ip, r2, lr, ip
90021eac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021eb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021eb2:	fb01 cc0e 	mla	ip, r1, lr, ip
90021eb6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021eba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021ebc:	fb09 cc0e 	mla	ip, r9, lr, ip
90021ec0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90021ec4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021ec6:	fb08 f80e 	mul.w	r8, r8, lr
90021eca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ece:	fb02 8303 	mla	r3, r2, r3, r8
90021ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021ed4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ed8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021edc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021ede:	fb01 330a 	mla	r3, r1, sl, r3
90021ee2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
90021ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90021ee8:	fb09 3901 	mla	r9, r9, r1, r3
90021eec:	883b      	ldrh	r3, [r7, #0]
90021eee:	4342      	muls	r2, r0
90021ef0:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021ef4:	1c50      	adds	r0, r2, #1
90021ef6:	1219      	asrs	r1, r3, #8
90021ef8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90021efc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90021f00:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021f04:	ea4c 0c09 	orr.w	ip, ip, r9
90021f08:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90021f0c:	ea4f 421c 	mov.w	r2, ip, lsr #16
90021f10:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90021f14:	b2c0      	uxtb	r0, r0
90021f16:	fb12 f204 	smulbb	r2, r2, r4
90021f1a:	fa5f fc8c 	uxtb.w	ip, ip
90021f1e:	fb1e fe04 	smulbb	lr, lr, r4
90021f22:	fb01 2100 	mla	r1, r1, r0, r2
90021f26:	10da      	asrs	r2, r3, #3
90021f28:	fb1c fc04 	smulbb	ip, ip, r4
90021f2c:	00db      	lsls	r3, r3, #3
90021f2e:	b289      	uxth	r1, r1
90021f30:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021f34:	b2db      	uxtb	r3, r3
90021f36:	fb02 e200 	mla	r2, r2, r0, lr
90021f3a:	fb03 c300 	mla	r3, r3, r0, ip
90021f3e:	b292      	uxth	r2, r2
90021f40:	fa1f fc83 	uxth.w	ip, r3
90021f44:	1c4b      	adds	r3, r1, #1
90021f46:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021f4a:	f10c 0301 	add.w	r3, ip, #1
90021f4e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021f52:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021f56:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021f5a:	430b      	orrs	r3, r1
90021f5c:	1c51      	adds	r1, r2, #1
90021f5e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021f62:	0952      	lsrs	r2, r2, #5
90021f64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021f68:	4313      	orrs	r3, r2
90021f6a:	803b      	strh	r3, [r7, #0]
90021f6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021f6e:	3702      	adds	r7, #2
90021f70:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021f72:	441a      	add	r2, r3
90021f74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021f76:	441d      	add	r5, r3
90021f78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021f7a:	9229      	str	r2, [sp, #164]	; 0xa4
90021f7c:	3b01      	subs	r3, #1
90021f7e:	931a      	str	r3, [sp, #104]	; 0x68
90021f80:	e694      	b.n	90021cac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90021f82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021f84:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021f86:	441c      	add	r4, r3
90021f88:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021f8a:	441d      	add	r5, r3
90021f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021f8e:	9429      	str	r4, [sp, #164]	; 0xa4
90021f90:	3b01      	subs	r3, #1
90021f92:	9309      	str	r3, [sp, #36]	; 0x24
90021f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021f96:	3302      	adds	r3, #2
90021f98:	930c      	str	r3, [sp, #48]	; 0x30
90021f9a:	e667      	b.n	90021c6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021f9c:	d024      	beq.n	90021fe8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
90021f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021fa0:	982b      	ldr	r0, [sp, #172]	; 0xac
90021fa2:	3b01      	subs	r3, #1
90021fa4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021fa6:	fb00 4003 	mla	r0, r0, r3, r4
90021faa:	1400      	asrs	r0, r0, #16
90021fac:	f53f ae7b 	bmi.w	90021ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021fb0:	3901      	subs	r1, #1
90021fb2:	4288      	cmp	r0, r1
90021fb4:	f6bf ae77 	bge.w	90021ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021fb8:	992c      	ldr	r1, [sp, #176]	; 0xb0
90021fba:	fb01 5303 	mla	r3, r1, r3, r5
90021fbe:	141b      	asrs	r3, r3, #16
90021fc0:	f53f ae71 	bmi.w	90021ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021fc4:	3a01      	subs	r2, #1
90021fc6:	4293      	cmp	r3, r2
90021fc8:	f6bf ae6d 	bge.w	90021ca6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021fcc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90021fd0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90021fd4:	f1bb 0f00 	cmp.w	fp, #0
90021fd8:	dc70      	bgt.n	900220bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90021fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021fdc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90021fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021fe2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90021fe6:	930c      	str	r3, [sp, #48]	; 0x30
90021fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021fea:	2b00      	cmp	r3, #0
90021fec:	f340 81be 	ble.w	9002236c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021ff4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021ff6:	ee30 0a04 	vadd.f32	s0, s0, s8
90021ffa:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021ffe:	eef0 6a62 	vmov.f32	s13, s5
90022002:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022006:	ee31 1a05 	vadd.f32	s2, s2, s10
9002200a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002200e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
90022012:	eef0 6a43 	vmov.f32	s13, s6
90022016:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002201a:	ee16 5a90 	vmov	r5, s13
9002201e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022022:	ee61 7a27 	vmul.f32	s15, s2, s15
90022026:	ee77 2a62 	vsub.f32	s5, s14, s5
9002202a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002202e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022032:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022036:	ee12 2a90 	vmov	r2, s5
9002203a:	eef0 2a47 	vmov.f32	s5, s14
9002203e:	fb92 f3f3 	sdiv	r3, r2, r3
90022042:	ee13 2a10 	vmov	r2, s6
90022046:	932b      	str	r3, [sp, #172]	; 0xac
90022048:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002204a:	eeb0 3a67 	vmov.f32	s6, s15
9002204e:	fb92 f3f3 	sdiv	r3, r2, r3
90022052:	932c      	str	r3, [sp, #176]	; 0xb0
90022054:	9b19      	ldr	r3, [sp, #100]	; 0x64
90022056:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90022058:	3b01      	subs	r3, #1
9002205a:	9319      	str	r3, [sp, #100]	; 0x64
9002205c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002205e:	bf08      	it	eq
90022060:	4613      	moveq	r3, r2
90022062:	9309      	str	r3, [sp, #36]	; 0x24
90022064:	e5f4      	b.n	90021c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90022066:	2900      	cmp	r1, #0
90022068:	f43f ae66 	beq.w	90021d38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9002206c:	f818 0000 	ldrb.w	r0, [r8, r0]
90022070:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90022074:	900a      	str	r0, [sp, #40]	; 0x28
90022076:	0e00      	lsrs	r0, r0, #24
90022078:	9013      	str	r0, [sp, #76]	; 0x4c
9002207a:	e65d      	b.n	90021d38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9002207c:	f113 0801 	adds.w	r8, r3, #1
90022080:	f53f af74 	bmi.w	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022084:	4540      	cmp	r0, r8
90022086:	f6ff af71 	blt.w	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002208a:	f11c 0801 	adds.w	r8, ip, #1
9002208e:	f53f af6d 	bmi.w	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022092:	45c6      	cmp	lr, r8
90022094:	f6ff af6a 	blt.w	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022098:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9002209a:	b200      	sxth	r0, r0
9002209c:	9302      	str	r3, [sp, #8]
9002209e:	fa0f f38e 	sxth.w	r3, lr
900220a2:	9000      	str	r0, [sp, #0]
900220a4:	9301      	str	r3, [sp, #4]
900220a6:	4633      	mov	r3, r6
900220a8:	981d      	ldr	r0, [sp, #116]	; 0x74
900220aa:	e9cd 1405 	strd	r1, r4, [sp, #20]
900220ae:	e9cd c203 	strd	ip, r2, [sp, #12]
900220b2:	4639      	mov	r1, r7
900220b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900220b6:	f7ff fc63 	bl	90021980 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
900220ba:	e757      	b.n	90021f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900220bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900220be:	f3c5 3003 	ubfx	r0, r5, #12, #4
900220c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
900220c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
900220c8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900220ca:	1427      	asrs	r7, r4, #16
900220cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
900220ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900220d2:	142b      	asrs	r3, r5, #16
900220d4:	fb01 7303 	mla	r3, r1, r3, r7
900220d8:	18e7      	adds	r7, r4, r3
900220da:	5ce3      	ldrb	r3, [r4, r3]
900220dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
900220e0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
900220e4:	2a00      	cmp	r2, #0
900220e6:	f000 8137 	beq.w	90022358 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
900220ea:	f897 e001 	ldrb.w	lr, [r7, #1]
900220ee:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
900220f2:	9410      	str	r4, [sp, #64]	; 0x40
900220f4:	0e24      	lsrs	r4, r4, #24
900220f6:	9417      	str	r4, [sp, #92]	; 0x5c
900220f8:	b170      	cbz	r0, 90022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
900220fa:	eb07 0e01 	add.w	lr, r7, r1
900220fe:	5c79      	ldrb	r1, [r7, r1]
90022100:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022104:	910b      	str	r1, [sp, #44]	; 0x2c
90022106:	0e09      	lsrs	r1, r1, #24
90022108:	9114      	str	r1, [sp, #80]	; 0x50
9002210a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9002210e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022112:	9111      	str	r1, [sp, #68]	; 0x44
90022114:	0e09      	lsrs	r1, r1, #24
90022116:	9118      	str	r1, [sp, #96]	; 0x60
90022118:	b292      	uxth	r2, r2
9002211a:	9917      	ldr	r1, [sp, #92]	; 0x5c
9002211c:	b280      	uxth	r0, r0
9002211e:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022120:	fb02 f800 	mul.w	r8, r2, r0
90022124:	0112      	lsls	r2, r2, #4
90022126:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9002212a:	eba2 0e08 	sub.w	lr, r2, r8
9002212e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022132:	b280      	uxth	r0, r0
90022134:	fa1f fe8e 	uxth.w	lr, lr
90022138:	1a12      	subs	r2, r2, r0
9002213a:	fb0e f101 	mul.w	r1, lr, r1
9002213e:	b292      	uxth	r2, r2
90022140:	fb02 110c 	mla	r1, r2, ip, r1
90022144:	fb00 1104 	mla	r1, r0, r4, r1
90022148:	9c18      	ldr	r4, [sp, #96]	; 0x60
9002214a:	fb08 1104 	mla	r1, r8, r4, r1
9002214e:	f3c1 2107 	ubfx	r1, r1, #8, #8
90022152:	2900      	cmp	r1, #0
90022154:	f000 80f5 	beq.w	90022342 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
90022158:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9002215c:	d019      	beq.n	90022192 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9002215e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022166:	fb0c fa0a 	mul.w	sl, ip, sl
9002216a:	fb0c fc03 	mul.w	ip, ip, r3
9002216e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022172:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022176:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002217a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002217e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90022182:	4453      	add	r3, sl
90022184:	0a3f      	lsrs	r7, r7, #8
90022186:	0a1b      	lsrs	r3, r3, #8
90022188:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9002218c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022190:	433b      	orrs	r3, r7
90022192:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022194:	2cff      	cmp	r4, #255	; 0xff
90022196:	d020      	beq.n	900221da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
90022198:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002219a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002219e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900221a0:	4367      	muls	r7, r4
900221a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
900221a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900221a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900221ac:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900221ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900221b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900221b6:	fb04 fa0a 	mul.w	sl, r4, sl
900221ba:	44bc      	add	ip, r7
900221bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900221c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900221c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900221c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900221cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900221d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900221d4:	ea4c 040a 	orr.w	r4, ip, sl
900221d8:	9410      	str	r4, [sp, #64]	; 0x40
900221da:	9c14      	ldr	r4, [sp, #80]	; 0x50
900221dc:	2cff      	cmp	r4, #255	; 0xff
900221de:	d020      	beq.n	90022222 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
900221e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900221e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900221e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
900221e8:	4367      	muls	r7, r4
900221ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900221ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900221f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900221f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
900221f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900221fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900221fe:	fb04 fa0a 	mul.w	sl, r4, sl
90022202:	44bc      	add	ip, r7
90022204:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002220c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022210:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022214:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022218:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002221c:	ea4c 040a 	orr.w	r4, ip, sl
90022220:	940b      	str	r4, [sp, #44]	; 0x2c
90022222:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022224:	2cff      	cmp	r4, #255	; 0xff
90022226:	d020      	beq.n	9002226a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
90022228:	9c11      	ldr	r4, [sp, #68]	; 0x44
9002222a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002222e:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022230:	4367      	muls	r7, r4
90022232:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022234:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022238:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002223c:	9c18      	ldr	r4, [sp, #96]	; 0x60
9002223e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022246:	fb04 fa0a 	mul.w	sl, r4, sl
9002224a:	44bc      	add	ip, r7
9002224c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022250:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022254:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022258:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002225c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022264:	ea4c 040a 	orr.w	r4, ip, sl
90022268:	9411      	str	r4, [sp, #68]	; 0x44
9002226a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002226c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022274:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002227a:	fb0e f707 	mul.w	r7, lr, r7
9002227e:	fb02 770c 	mla	r7, r2, ip, r7
90022282:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022286:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022288:	fb00 770c 	mla	r7, r0, ip, r7
9002228c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022290:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022292:	fb08 770c 	mla	r7, r8, ip, r7
90022296:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9002229a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002229c:	fb0e fe0c 	mul.w	lr, lr, ip
900222a0:	0a3f      	lsrs	r7, r7, #8
900222a2:	fb02 e303 	mla	r3, r2, r3, lr
900222a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900222a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900222ac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
900222b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
900222b2:	fb00 330a 	mla	r3, r0, sl, r3
900222b6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
900222ba:	f8b9 0000 	ldrh.w	r0, [r9]
900222be:	fb08 3c0c 	mla	ip, r8, ip, r3
900222c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900222c4:	1202      	asrs	r2, r0, #8
900222c6:	434b      	muls	r3, r1
900222c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900222cc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900222d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900222d4:	1c59      	adds	r1, r3, #1
900222d6:	ea47 070c 	orr.w	r7, r7, ip
900222da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900222de:	0c3b      	lsrs	r3, r7, #16
900222e0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
900222e4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
900222e8:	b2ff      	uxtb	r7, r7
900222ea:	fb13 f304 	smulbb	r3, r3, r4
900222ee:	b2c9      	uxtb	r1, r1
900222f0:	fb1c fc04 	smulbb	ip, ip, r4
900222f4:	fb02 3201 	mla	r2, r2, r1, r3
900222f8:	10c3      	asrs	r3, r0, #3
900222fa:	fb17 f704 	smulbb	r7, r7, r4
900222fe:	00c0      	lsls	r0, r0, #3
90022300:	b292      	uxth	r2, r2
90022302:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022306:	b2c0      	uxtb	r0, r0
90022308:	fb03 c301 	mla	r3, r3, r1, ip
9002230c:	f102 0c01 	add.w	ip, r2, #1
90022310:	fb00 7001 	mla	r0, r0, r1, r7
90022314:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
90022318:	b280      	uxth	r0, r0
9002231a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9002231e:	b29b      	uxth	r3, r3
90022320:	1c42      	adds	r2, r0, #1
90022322:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90022326:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9002232a:	ea42 020c 	orr.w	r2, r2, ip
9002232e:	f103 0c01 	add.w	ip, r3, #1
90022332:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90022336:	095b      	lsrs	r3, r3, #5
90022338:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002233c:	431a      	orrs	r2, r3
9002233e:	f8a9 2000 	strh.w	r2, [r9]
90022342:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90022344:	f109 0902 	add.w	r9, r9, #2
90022348:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002234a:	f10b 3bff 	add.w	fp, fp, #4294967295
9002234e:	441a      	add	r2, r3
90022350:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022352:	9229      	str	r2, [sp, #164]	; 0xa4
90022354:	441d      	add	r5, r3
90022356:	e63d      	b.n	90021fd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
90022358:	2800      	cmp	r0, #0
9002235a:	f43f aedd 	beq.w	90022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9002235e:	5c79      	ldrb	r1, [r7, r1]
90022360:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022364:	910b      	str	r1, [sp, #44]	; 0x2c
90022366:	0e09      	lsrs	r1, r1, #24
90022368:	9114      	str	r1, [sp, #80]	; 0x50
9002236a:	e6d5      	b.n	90022118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9002236c:	b01f      	add	sp, #124	; 0x7c
9002236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
90022372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022376:	b089      	sub	sp, #36	; 0x24
90022378:	9101      	str	r1, [sp, #4]
9002237a:	9801      	ldr	r0, [sp, #4]
9002237c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
90022380:	8800      	ldrh	r0, [r0, #0]
90022382:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
90022386:	1206      	asrs	r6, r0, #8
90022388:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9002238c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
90022390:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90022394:	9602      	str	r6, [sp, #8]
90022396:	10c6      	asrs	r6, r0, #3
90022398:	00c0      	lsls	r0, r0, #3
9002239a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9002239e:	b2c0      	uxtb	r0, r0
900223a0:	9603      	str	r6, [sp, #12]
900223a2:	9004      	str	r0, [sp, #16]
900223a4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
900223a8:	fb07 100c 	mla	r0, r7, ip, r1
900223ac:	2f00      	cmp	r7, #0
900223ae:	eb02 0e00 	add.w	lr, r2, r0
900223b2:	f2c0 810a 	blt.w	900225ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
900223b6:	45b8      	cmp	r8, r7
900223b8:	f340 8107 	ble.w	900225ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
900223bc:	2900      	cmp	r1, #0
900223be:	f2c0 8102 	blt.w	900225c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
900223c2:	458c      	cmp	ip, r1
900223c4:	f340 80ff 	ble.w	900225c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
900223c8:	5c12      	ldrb	r2, [r2, r0]
900223ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900223ce:	1c4a      	adds	r2, r1, #1
900223d0:	f100 80fe 	bmi.w	900225d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
900223d4:	4594      	cmp	ip, r2
900223d6:	f340 80fb 	ble.w	900225d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
900223da:	2d00      	cmp	r5, #0
900223dc:	f000 80fa 	beq.w	900225d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
900223e0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900223e4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
900223e8:	3701      	adds	r7, #1
900223ea:	f100 80f7 	bmi.w	900225dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
900223ee:	45b8      	cmp	r8, r7
900223f0:	f340 80f4 	ble.w	900225dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
900223f4:	2c00      	cmp	r4, #0
900223f6:	f000 80f4 	beq.w	900225e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
900223fa:	2900      	cmp	r1, #0
900223fc:	eb0e 020c 	add.w	r2, lr, ip
90022400:	f2c0 80ea 	blt.w	900225d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
90022404:	458c      	cmp	ip, r1
90022406:	f340 80e7 	ble.w	900225d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9002240a:	f81e 700c 	ldrb.w	r7, [lr, ip]
9002240e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
90022412:	3101      	adds	r1, #1
90022414:	f100 80e8 	bmi.w	900225e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
90022418:	458c      	cmp	ip, r1
9002241a:	f340 80e5 	ble.w	900225e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9002241e:	2d00      	cmp	r5, #0
90022420:	f000 80e4 	beq.w	900225ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
90022424:	7852      	ldrb	r2, [r2, #1]
90022426:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9002242a:	0e0b      	lsrs	r3, r1, #24
9002242c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
90022430:	ea4f 6a10 	mov.w	sl, r0, lsr #24
90022434:	9300      	str	r3, [sp, #0]
90022436:	b2a4      	uxth	r4, r4
90022438:	b2ab      	uxth	r3, r5
9002243a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9002243e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
90022442:	fb03 f904 	mul.w	r9, r3, r4
90022446:	011b      	lsls	r3, r3, #4
90022448:	fb0a f505 	mul.w	r5, sl, r5
9002244c:	ea4f 6817 	mov.w	r8, r7, lsr #24
90022450:	eba3 0e09 	sub.w	lr, r3, r9
90022454:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
90022458:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9002245c:	0a28      	lsrs	r0, r5, #8
9002245e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
90022462:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022466:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9002246a:	fb0a f303 	mul.w	r3, sl, r3
9002246e:	fb08 f707 	mul.w	r7, r8, r7
90022472:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
90022476:	4405      	add	r5, r0
90022478:	fb08 fc0c 	mul.w	ip, r8, ip
9002247c:	b2a4      	uxth	r4, r4
9002247e:	0a2d      	lsrs	r5, r5, #8
90022480:	fa1f fe8e 	uxth.w	lr, lr
90022484:	1b12      	subs	r2, r2, r4
90022486:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9002248a:	b292      	uxth	r2, r2
9002248c:	9005      	str	r0, [sp, #20]
9002248e:	f503 7080 	add.w	r0, r3, #256	; 0x100
90022492:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90022496:	ea4f 201c 	mov.w	r0, ip, lsr #8
9002249a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002249e:	0a1b      	lsrs	r3, r3, #8
900224a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
900224a4:	9306      	str	r3, [sp, #24]
900224a6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
900224aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
900224ae:	4460      	add	r0, ip
900224b0:	fb0b f303 	mul.w	r3, fp, r3
900224b4:	fb0b f606 	mul.w	r6, fp, r6
900224b8:	0a00      	lsrs	r0, r0, #8
900224ba:	0a1d      	lsrs	r5, r3, #8
900224bc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
900224c0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
900224c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900224c8:	441d      	add	r5, r3
900224ca:	f506 7380 	add.w	r3, r6, #256	; 0x100
900224ce:	eb03 2616 	add.w	r6, r3, r6, lsr #8
900224d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
900224d6:	0a2d      	lsrs	r5, r5, #8
900224d8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
900224dc:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
900224e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900224e4:	0a36      	lsrs	r6, r6, #8
900224e6:	0a1b      	lsrs	r3, r3, #8
900224e8:	fb05 f50e 	mul.w	r5, r5, lr
900224ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
900224f0:	9307      	str	r3, [sp, #28]
900224f2:	0e0b      	lsrs	r3, r1, #24
900224f4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900224f8:	fb0e f606 	mul.w	r6, lr, r6
900224fc:	435f      	muls	r7, r3
900224fe:	4359      	muls	r1, r3
90022500:	9b05      	ldr	r3, [sp, #20]
90022502:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022506:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002250a:	fb03 5502 	mla	r5, r3, r2, r5
9002250e:	9b06      	ldr	r3, [sp, #24]
90022510:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022514:	fb0e fe0b 	mul.w	lr, lr, fp
90022518:	44bc      	add	ip, r7
9002251a:	f501 7780 	add.w	r7, r1, #256	; 0x100
9002251e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022522:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90022526:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002252a:	0a09      	lsrs	r1, r1, #8
9002252c:	fb0c 5509 	mla	r5, ip, r9, r5
90022530:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90022534:	fb00 5504 	mla	r5, r0, r4, r5
90022538:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9002253c:	9b07      	ldr	r3, [sp, #28]
9002253e:	fb02 6000 	mla	r0, r2, r0, r6
90022542:	0a2d      	lsrs	r5, r5, #8
90022544:	fb02 e20a 	mla	r2, r2, sl, lr
90022548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002254c:	fb09 0001 	mla	r0, r9, r1, r0
90022550:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90022554:	fb04 0003 	mla	r0, r4, r3, r0
90022558:	9b00      	ldr	r3, [sp, #0]
9002255a:	fb04 2408 	mla	r4, r4, r8, r2
9002255e:	9a04      	ldr	r2, [sp, #16]
90022560:	0a00      	lsrs	r0, r0, #8
90022562:	fb09 4903 	mla	r9, r9, r3, r4
90022566:	9b02      	ldr	r3, [sp, #8]
90022568:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002256c:	ea6f 2929 	mvn.w	r9, r9, asr #8
90022570:	4305      	orrs	r5, r0
90022572:	fa5f f989 	uxtb.w	r9, r9
90022576:	fb03 f109 	mul.w	r1, r3, r9
9002257a:	9b03      	ldr	r3, [sp, #12]
9002257c:	fb03 f309 	mul.w	r3, r3, r9
90022580:	fb02 f909 	mul.w	r9, r2, r9
90022584:	1c4a      	adds	r2, r1, #1
90022586:	1c58      	adds	r0, r3, #1
90022588:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002258c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022590:	0c2a      	lsrs	r2, r5, #16
90022592:	0a2b      	lsrs	r3, r5, #8
90022594:	eb02 2211 	add.w	r2, r2, r1, lsr #8
90022598:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9002259c:	0212      	lsls	r2, r2, #8
9002259e:	00db      	lsls	r3, r3, #3
900225a0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900225a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900225a8:	4313      	orrs	r3, r2
900225aa:	f109 0201 	add.w	r2, r9, #1
900225ae:	eb02 2919 	add.w	r9, r2, r9, lsr #8
900225b2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
900225b6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900225ba:	431d      	orrs	r5, r3
900225bc:	9b01      	ldr	r3, [sp, #4]
900225be:	801d      	strh	r5, [r3, #0]
900225c0:	b009      	add	sp, #36	; 0x24
900225c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900225c6:	2000      	movs	r0, #0
900225c8:	e701      	b.n	900223ce <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
900225ca:	2600      	movs	r6, #0
900225cc:	4630      	mov	r0, r6
900225ce:	e70b      	b.n	900223e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
900225d0:	2600      	movs	r6, #0
900225d2:	e709      	b.n	900223e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
900225d4:	462e      	mov	r6, r5
900225d6:	e707      	b.n	900223e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
900225d8:	2700      	movs	r7, #0
900225da:	e71a      	b.n	90022412 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
900225dc:	2100      	movs	r1, #0
900225de:	460f      	mov	r7, r1
900225e0:	e723      	b.n	9002242a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
900225e2:	4621      	mov	r1, r4
900225e4:	4627      	mov	r7, r4
900225e6:	e720      	b.n	9002242a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
900225e8:	2100      	movs	r1, #0
900225ea:	e71e      	b.n	9002242a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
900225ec:	4629      	mov	r1, r5
900225ee:	e71c      	b.n	9002242a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

900225f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900225f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900225f4:	b09b      	sub	sp, #108	; 0x6c
900225f6:	9218      	str	r2, [sp, #96]	; 0x60
900225f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900225fa:	9019      	str	r0, [sp, #100]	; 0x64
900225fc:	9116      	str	r1, [sp, #88]	; 0x58
900225fe:	6850      	ldr	r0, [r2, #4]
90022600:	9307      	str	r3, [sp, #28]
90022602:	6812      	ldr	r2, [r2, #0]
90022604:	9d26      	ldr	r5, [sp, #152]	; 0x98
90022606:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002260a:	fb00 1303 	mla	r3, r0, r3, r1
9002260e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022612:	930a      	str	r3, [sp, #40]	; 0x28
90022614:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022616:	681b      	ldr	r3, [r3, #0]
90022618:	930f      	str	r3, [sp, #60]	; 0x3c
9002261a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002261c:	685e      	ldr	r6, [r3, #4]
9002261e:	3604      	adds	r6, #4
90022620:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022622:	2b00      	cmp	r3, #0
90022624:	dc03      	bgt.n	9002262e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90022626:	9b18      	ldr	r3, [sp, #96]	; 0x60
90022628:	2b00      	cmp	r3, #0
9002262a:	f340 8373 	ble.w	90022d14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9002262e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022630:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022634:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022638:	1e48      	subs	r0, r1, #1
9002263a:	1e57      	subs	r7, r2, #1
9002263c:	9b07      	ldr	r3, [sp, #28]
9002263e:	2b00      	cmp	r3, #0
90022640:	f340 818f 	ble.w	90022962 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
90022644:	9c25      	ldr	r4, [sp, #148]	; 0x94
90022646:	142b      	asrs	r3, r5, #16
90022648:	ea5f 4c24 	movs.w	ip, r4, asr #16
9002264c:	d406      	bmi.n	9002265c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9002264e:	4584      	cmp	ip, r0
90022650:	da04      	bge.n	9002265c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90022652:	2b00      	cmp	r3, #0
90022654:	db02      	blt.n	9002265c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90022656:	42bb      	cmp	r3, r7
90022658:	f2c0 8184 	blt.w	90022964 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9002265c:	f11c 0c01 	adds.w	ip, ip, #1
90022660:	f100 8172 	bmi.w	90022948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022664:	4561      	cmp	r1, ip
90022666:	f2c0 816f 	blt.w	90022948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002266a:	3301      	adds	r3, #1
9002266c:	f100 816c 	bmi.w	90022948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022670:	429a      	cmp	r2, r3
90022672:	f2c0 8169 	blt.w	90022948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022676:	9b07      	ldr	r3, [sp, #28]
90022678:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002267a:	9317      	str	r3, [sp, #92]	; 0x5c
9002267c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002267e:	2b00      	cmp	r3, #0
90022680:	f340 818e 	ble.w	900229a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90022684:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022686:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002268a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002268e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022692:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022694:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
90022698:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002269a:	141b      	asrs	r3, r3, #16
9002269c:	f100 81d1 	bmi.w	90022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900226a0:	f101 38ff 	add.w	r8, r1, #4294967295
900226a4:	4543      	cmp	r3, r8
900226a6:	f280 81cc 	bge.w	90022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900226aa:	f1bc 0f00 	cmp.w	ip, #0
900226ae:	f2c0 81c8 	blt.w	90022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900226b2:	f10e 38ff 	add.w	r8, lr, #4294967295
900226b6:	45c4      	cmp	ip, r8
900226b8:	f280 81c3 	bge.w	90022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900226bc:	b209      	sxth	r1, r1
900226be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
900226c0:	fb0c 3301 	mla	r3, ip, r1, r3
900226c4:	eb04 0803 	add.w	r8, r4, r3
900226c8:	5ce3      	ldrb	r3, [r4, r3]
900226ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
900226ce:	ea4f 6e13 	mov.w	lr, r3, lsr #24
900226d2:	2a00      	cmp	r2, #0
900226d4:	f000 81aa 	beq.w	90022a2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
900226d8:	f898 c001 	ldrb.w	ip, [r8, #1]
900226dc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
900226e0:	940b      	str	r4, [sp, #44]	; 0x2c
900226e2:	0e24      	lsrs	r4, r4, #24
900226e4:	9412      	str	r4, [sp, #72]	; 0x48
900226e6:	b178      	cbz	r0, 90022708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900226e8:	eb08 0c01 	add.w	ip, r8, r1
900226ec:	f818 1001 	ldrb.w	r1, [r8, r1]
900226f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900226f4:	9108      	str	r1, [sp, #32]
900226f6:	0e09      	lsrs	r1, r1, #24
900226f8:	9110      	str	r1, [sp, #64]	; 0x40
900226fa:	f89c 1001 	ldrb.w	r1, [ip, #1]
900226fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022702:	910c      	str	r1, [sp, #48]	; 0x30
90022704:	0e09      	lsrs	r1, r1, #24
90022706:	9113      	str	r1, [sp, #76]	; 0x4c
90022708:	b292      	uxth	r2, r2
9002270a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002270c:	b280      	uxth	r0, r0
9002270e:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022710:	fb02 f900 	mul.w	r9, r2, r0
90022714:	0112      	lsls	r2, r2, #4
90022716:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002271a:	eba2 0809 	sub.w	r8, r2, r9
9002271e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022722:	b280      	uxth	r0, r0
90022724:	fa1f f888 	uxth.w	r8, r8
90022728:	1a12      	subs	r2, r2, r0
9002272a:	fb08 f101 	mul.w	r1, r8, r1
9002272e:	b292      	uxth	r2, r2
90022730:	fb02 110e 	mla	r1, r2, lr, r1
90022734:	fb00 1104 	mla	r1, r0, r4, r1
90022738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002273a:	fb09 1104 	mla	r1, r9, r4, r1
9002273e:	f3c1 2107 	ubfx	r1, r1, #8, #8
90022742:	2900      	cmp	r1, #0
90022744:	f000 80f5 	beq.w	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022748:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9002274c:	d01b      	beq.n	90022786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9002274e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022756:	fb0e fa0a 	mul.w	sl, lr, sl
9002275a:	fb0e fe03 	mul.w	lr, lr, r3
9002275e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022762:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022766:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002276a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002276e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90022772:	4453      	add	r3, sl
90022774:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022778:	0a1b      	lsrs	r3, r3, #8
9002277a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002277e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022782:	ea43 030c 	orr.w	r3, r3, ip
90022786:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022788:	2cff      	cmp	r4, #255	; 0xff
9002278a:	d021      	beq.n	900227d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9002278c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002278e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022792:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022794:	fb04 fb0b 	mul.w	fp, r4, fp
90022798:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002279a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002279e:	9c12      	ldr	r4, [sp, #72]	; 0x48
900227a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900227a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900227a8:	fb04 fa0a 	mul.w	sl, r4, sl
900227ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900227b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900227b4:	44de      	add	lr, fp
900227b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900227ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900227be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900227c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900227c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900227ca:	ea4e 040a 	orr.w	r4, lr, sl
900227ce:	940b      	str	r4, [sp, #44]	; 0x2c
900227d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
900227d2:	2cff      	cmp	r4, #255	; 0xff
900227d4:	d021      	beq.n	9002281a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
900227d6:	9c08      	ldr	r4, [sp, #32]
900227d8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900227dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
900227de:	fb04 fb0b 	mul.w	fp, r4, fp
900227e2:	9c08      	ldr	r4, [sp, #32]
900227e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900227e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
900227ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900227ee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900227f2:	fb04 fa0a 	mul.w	sl, r4, sl
900227f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900227fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900227fe:	44de      	add	lr, fp
90022800:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022804:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022808:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002280c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022810:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022814:	ea4e 040a 	orr.w	r4, lr, sl
90022818:	9408      	str	r4, [sp, #32]
9002281a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002281c:	2cff      	cmp	r4, #255	; 0xff
9002281e:	d021      	beq.n	90022864 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
90022820:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022822:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022826:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022828:	fb04 fb0b 	mul.w	fp, r4, fp
9002282c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9002282e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022832:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022834:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022838:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002283c:	fb04 fa0a 	mul.w	sl, r4, sl
90022840:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022844:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022848:	44de      	add	lr, fp
9002284a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002284e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022852:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022856:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002285a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002285e:	ea4e 040a 	orr.w	r4, lr, sl
90022862:	940c      	str	r4, [sp, #48]	; 0x30
90022864:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022866:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9002286a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002286e:	43c9      	mvns	r1, r1
90022870:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022874:	9c08      	ldr	r4, [sp, #32]
90022876:	fb08 fc0c 	mul.w	ip, r8, ip
9002287a:	fb02 cc0e 	mla	ip, r2, lr, ip
9002287e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90022882:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022884:	fb00 cc0e 	mla	ip, r0, lr, ip
90022888:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002288c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002288e:	fb09 cc0e 	mla	ip, r9, lr, ip
90022892:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90022896:	fb08 f80e 	mul.w	r8, r8, lr
9002289a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002289e:	fa5f fe81 	uxtb.w	lr, r1
900228a2:	fb02 8303 	mla	r3, r2, r3, r8
900228a6:	9a08      	ldr	r2, [sp, #32]
900228a8:	f8b7 8000 	ldrh.w	r8, [r7]
900228ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900228b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
900228b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900228b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
900228ba:	fb00 330a 	mla	r3, r0, sl, r3
900228be:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
900228c2:	ea4f 2228 	mov.w	r2, r8, asr #8
900228c6:	fb09 3900 	mla	r9, r9, r0, r3
900228ca:	ea4f 00e8 	mov.w	r0, r8, asr #3
900228ce:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900228d2:	b2c9      	uxtb	r1, r1
900228d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
900228d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900228dc:	fb02 f20e 	mul.w	r2, r2, lr
900228e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900228e4:	fb00 f00e 	mul.w	r0, r0, lr
900228e8:	1c53      	adds	r3, r2, #1
900228ea:	fb01 f10e 	mul.w	r1, r1, lr
900228ee:	ea4c 0c09 	orr.w	ip, ip, r9
900228f2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
900228f6:	ea4f 431c 	mov.w	r3, ip, lsr #16
900228fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900228fe:	4a60      	ldr	r2, [pc, #384]	; (90022a80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
90022900:	b2db      	uxtb	r3, r3
90022902:	ea02 2203 	and.w	r2, r2, r3, lsl #8
90022906:	1c43      	adds	r3, r0, #1
90022908:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9002290c:	ea4f 231c 	mov.w	r3, ip, lsr #8
90022910:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90022914:	00db      	lsls	r3, r3, #3
90022916:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002291a:	4313      	orrs	r3, r2
9002291c:	1c4a      	adds	r2, r1, #1
9002291e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022922:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90022926:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9002292a:	ea4c 0c03 	orr.w	ip, ip, r3
9002292e:	f8a7 c000 	strh.w	ip, [r7]
90022932:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022934:	3702      	adds	r7, #2
90022936:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022938:	441a      	add	r2, r3
9002293a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002293c:	441d      	add	r5, r3
9002293e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90022940:	9225      	str	r2, [sp, #148]	; 0x94
90022942:	3b01      	subs	r3, #1
90022944:	9317      	str	r3, [sp, #92]	; 0x5c
90022946:	e699      	b.n	9002267c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90022948:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9002294a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002294c:	441c      	add	r4, r3
9002294e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022950:	441d      	add	r5, r3
90022952:	9b07      	ldr	r3, [sp, #28]
90022954:	9425      	str	r4, [sp, #148]	; 0x94
90022956:	3b01      	subs	r3, #1
90022958:	9307      	str	r3, [sp, #28]
9002295a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002295c:	3302      	adds	r3, #2
9002295e:	930a      	str	r3, [sp, #40]	; 0x28
90022960:	e66c      	b.n	9002263c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90022962:	d024      	beq.n	900229ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
90022964:	9b07      	ldr	r3, [sp, #28]
90022966:	9827      	ldr	r0, [sp, #156]	; 0x9c
90022968:	3b01      	subs	r3, #1
9002296a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002296c:	fb00 4003 	mla	r0, r0, r3, r4
90022970:	1400      	asrs	r0, r0, #16
90022972:	f53f ae80 	bmi.w	90022676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022976:	3901      	subs	r1, #1
90022978:	4288      	cmp	r0, r1
9002297a:	f6bf ae7c 	bge.w	90022676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002297e:	9928      	ldr	r1, [sp, #160]	; 0xa0
90022980:	fb01 5303 	mla	r3, r1, r3, r5
90022984:	141b      	asrs	r3, r3, #16
90022986:	f53f ae76 	bmi.w	90022676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002298a:	3a01      	subs	r2, #1
9002298c:	4293      	cmp	r3, r2
9002298e:	f6bf ae72 	bge.w	90022676 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022992:	f8dd b01c 	ldr.w	fp, [sp, #28]
90022996:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9002299a:	f1bb 0f00 	cmp.w	fp, #0
9002299e:	dc71      	bgt.n	90022a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
900229a0:	9b07      	ldr	r3, [sp, #28]
900229a2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900229a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900229a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
900229ac:	930a      	str	r3, [sp, #40]	; 0x28
900229ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
900229b0:	2b00      	cmp	r3, #0
900229b2:	f340 81af 	ble.w	90022d14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
900229b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900229ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
900229bc:	ee30 0a04 	vadd.f32	s0, s0, s8
900229c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900229c4:	eef0 6a62 	vmov.f32	s13, s5
900229c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
900229cc:	ee31 1a05 	vadd.f32	s2, s2, s10
900229d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900229d4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
900229d8:	eef0 6a43 	vmov.f32	s13, s6
900229dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900229e0:	ee16 5a90 	vmov	r5, s13
900229e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
900229e8:	ee61 7a27 	vmul.f32	s15, s2, s15
900229ec:	ee77 2a62 	vsub.f32	s5, s14, s5
900229f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
900229f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900229f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900229fc:	ee12 2a90 	vmov	r2, s5
90022a00:	eef0 2a47 	vmov.f32	s5, s14
90022a04:	fb92 f3f3 	sdiv	r3, r2, r3
90022a08:	ee13 2a10 	vmov	r2, s6
90022a0c:	9327      	str	r3, [sp, #156]	; 0x9c
90022a0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022a10:	eeb0 3a67 	vmov.f32	s6, s15
90022a14:	fb92 f3f3 	sdiv	r3, r2, r3
90022a18:	9328      	str	r3, [sp, #160]	; 0xa0
90022a1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022a1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
90022a1e:	3b01      	subs	r3, #1
90022a20:	9316      	str	r3, [sp, #88]	; 0x58
90022a22:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022a24:	bf08      	it	eq
90022a26:	4613      	moveq	r3, r2
90022a28:	9307      	str	r3, [sp, #28]
90022a2a:	e5f9      	b.n	90022620 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90022a2c:	2800      	cmp	r0, #0
90022a2e:	f43f ae6b 	beq.w	90022708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022a32:	f818 1001 	ldrb.w	r1, [r8, r1]
90022a36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022a3a:	9108      	str	r1, [sp, #32]
90022a3c:	0e09      	lsrs	r1, r1, #24
90022a3e:	9110      	str	r1, [sp, #64]	; 0x40
90022a40:	e662      	b.n	90022708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022a42:	f113 0801 	adds.w	r8, r3, #1
90022a46:	f53f af74 	bmi.w	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022a4a:	4541      	cmp	r1, r8
90022a4c:	f6ff af71 	blt.w	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022a50:	f11c 0801 	adds.w	r8, ip, #1
90022a54:	f53f af6d 	bmi.w	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022a58:	45c6      	cmp	lr, r8
90022a5a:	f6ff af6a 	blt.w	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022a5e:	b209      	sxth	r1, r1
90022a60:	e9cd 3c02 	strd	r3, ip, [sp, #8]
90022a64:	fa0f f38e 	sxth.w	r3, lr
90022a68:	9100      	str	r1, [sp, #0]
90022a6a:	4639      	mov	r1, r7
90022a6c:	9301      	str	r3, [sp, #4]
90022a6e:	4633      	mov	r3, r6
90022a70:	e9cd 2004 	strd	r2, r0, [sp, #16]
90022a74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022a76:	9819      	ldr	r0, [sp, #100]	; 0x64
90022a78:	f7ff fc7b 	bl	90022372 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
90022a7c:	e759      	b.n	90022932 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90022a7e:	bf00      	nop
90022a80:	fffff800 	.word	0xfffff800
90022a84:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022a86:	f3c5 3003 	ubfx	r0, r5, #12, #4
90022a8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
90022a8c:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022a90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022a92:	1427      	asrs	r7, r4, #16
90022a94:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022a96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022a9a:	142b      	asrs	r3, r5, #16
90022a9c:	fb01 7303 	mla	r3, r1, r3, r7
90022aa0:	18e7      	adds	r7, r4, r3
90022aa2:	5ce3      	ldrb	r3, [r4, r3]
90022aa4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022aa8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90022aac:	2a00      	cmp	r2, #0
90022aae:	f000 8127 	beq.w	90022d00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
90022ab2:	f897 e001 	ldrb.w	lr, [r7, #1]
90022ab6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90022aba:	940d      	str	r4, [sp, #52]	; 0x34
90022abc:	0e24      	lsrs	r4, r4, #24
90022abe:	9414      	str	r4, [sp, #80]	; 0x50
90022ac0:	b170      	cbz	r0, 90022ae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022ac2:	eb07 0e01 	add.w	lr, r7, r1
90022ac6:	5c79      	ldrb	r1, [r7, r1]
90022ac8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022acc:	9109      	str	r1, [sp, #36]	; 0x24
90022ace:	0e09      	lsrs	r1, r1, #24
90022ad0:	9111      	str	r1, [sp, #68]	; 0x44
90022ad2:	f89e 1001 	ldrb.w	r1, [lr, #1]
90022ad6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022ada:	910e      	str	r1, [sp, #56]	; 0x38
90022adc:	0e09      	lsrs	r1, r1, #24
90022ade:	9115      	str	r1, [sp, #84]	; 0x54
90022ae0:	b292      	uxth	r2, r2
90022ae2:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022ae4:	b280      	uxth	r0, r0
90022ae6:	fb02 f800 	mul.w	r8, r2, r0
90022aea:	0112      	lsls	r2, r2, #4
90022aec:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90022af0:	eba2 0e08 	sub.w	lr, r2, r8
90022af4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90022af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022afa:	b280      	uxth	r0, r0
90022afc:	fa1f fe8e 	uxth.w	lr, lr
90022b00:	1a09      	subs	r1, r1, r0
90022b02:	fb0e f202 	mul.w	r2, lr, r2
90022b06:	b289      	uxth	r1, r1
90022b08:	fb01 220c 	mla	r2, r1, ip, r2
90022b0c:	fb00 2204 	mla	r2, r0, r4, r2
90022b10:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022b12:	fb08 2204 	mla	r2, r8, r4, r2
90022b16:	f3c2 2207 	ubfx	r2, r2, #8, #8
90022b1a:	2a00      	cmp	r2, #0
90022b1c:	f000 80e5 	beq.w	90022cea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
90022b20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90022b24:	d019      	beq.n	90022b5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
90022b26:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022b2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022b2e:	fb0c fa0a 	mul.w	sl, ip, sl
90022b32:	fb0c fc03 	mul.w	ip, ip, r3
90022b36:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022b3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022b3e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90022b42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022b46:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90022b4a:	4453      	add	r3, sl
90022b4c:	0a3f      	lsrs	r7, r7, #8
90022b4e:	0a1b      	lsrs	r3, r3, #8
90022b50:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022b54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022b58:	433b      	orrs	r3, r7
90022b5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022b5c:	2cff      	cmp	r4, #255	; 0xff
90022b5e:	d020      	beq.n	90022ba2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
90022b60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022b62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022b66:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022b68:	4367      	muls	r7, r4
90022b6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022b6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022b70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022b74:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022b76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022b7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b7e:	fb04 fa0a 	mul.w	sl, r4, sl
90022b82:	44bc      	add	ip, r7
90022b84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022b88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022b8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022b90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022b94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022b98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b9c:	ea4c 040a 	orr.w	r4, ip, sl
90022ba0:	940d      	str	r4, [sp, #52]	; 0x34
90022ba2:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022ba4:	2cff      	cmp	r4, #255	; 0xff
90022ba6:	d020      	beq.n	90022bea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
90022ba8:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022baa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022bae:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022bb0:	4367      	muls	r7, r4
90022bb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022bb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022bb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022bbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022bbe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022bc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022bc6:	fb04 fa0a 	mul.w	sl, r4, sl
90022bca:	44bc      	add	ip, r7
90022bcc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022bd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022bd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022bd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022bdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022be0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022be4:	ea4c 040a 	orr.w	r4, ip, sl
90022be8:	9409      	str	r4, [sp, #36]	; 0x24
90022bea:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022bec:	2cff      	cmp	r4, #255	; 0xff
90022bee:	d020      	beq.n	90022c32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
90022bf0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022bf2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022bf6:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022bf8:	4367      	muls	r7, r4
90022bfa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022bfc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022c00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022c04:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022c06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022c0e:	fb04 fa0a 	mul.w	sl, r4, sl
90022c12:	44bc      	add	ip, r7
90022c14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022c1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022c20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022c24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022c28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022c2c:	ea4c 040a 	orr.w	r4, ip, sl
90022c30:	940e      	str	r4, [sp, #56]	; 0x38
90022c32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022c34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022c38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022c3c:	43d2      	mvns	r2, r2
90022c3e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022c42:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022c44:	b2d2      	uxtb	r2, r2
90022c46:	fb0e f707 	mul.w	r7, lr, r7
90022c4a:	fb01 770c 	mla	r7, r1, ip, r7
90022c4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022c52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022c54:	fb00 770c 	mla	r7, r0, ip, r7
90022c58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022c5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022c5e:	fb08 770c 	mla	r7, r8, ip, r7
90022c62:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90022c66:	fb0e fe0c 	mul.w	lr, lr, ip
90022c6a:	0a3f      	lsrs	r7, r7, #8
90022c6c:	fb01 e303 	mla	r3, r1, r3, lr
90022c70:	9909      	ldr	r1, [sp, #36]	; 0x24
90022c72:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022c76:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90022c7a:	990e      	ldr	r1, [sp, #56]	; 0x38
90022c7c:	fb00 330a 	mla	r3, r0, sl, r3
90022c80:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90022c84:	fb08 3c0c 	mla	ip, r8, ip, r3
90022c88:	f8b9 3000 	ldrh.w	r3, [r9]
90022c8c:	1218      	asrs	r0, r3, #8
90022c8e:	10d9      	asrs	r1, r3, #3
90022c90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022c94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022c98:	00db      	lsls	r3, r3, #3
90022c9a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022c9e:	4350      	muls	r0, r2
90022ca0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022ca4:	b2db      	uxtb	r3, r3
90022ca6:	4351      	muls	r1, r2
90022ca8:	ea47 070c 	orr.w	r7, r7, ip
90022cac:	4353      	muls	r3, r2
90022cae:	1c42      	adds	r2, r0, #1
90022cb0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022cb4:	0c3a      	lsrs	r2, r7, #16
90022cb6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022cba:	4a18      	ldr	r2, [pc, #96]	; (90022d1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
90022cbc:	b2c0      	uxtb	r0, r0
90022cbe:	ea02 2000 	and.w	r0, r2, r0, lsl #8
90022cc2:	1c4a      	adds	r2, r1, #1
90022cc4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022cc8:	0a3a      	lsrs	r2, r7, #8
90022cca:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022cce:	00c9      	lsls	r1, r1, #3
90022cd0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022cd4:	4301      	orrs	r1, r0
90022cd6:	1c58      	adds	r0, r3, #1
90022cd8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022cdc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90022ce0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
90022ce4:	4308      	orrs	r0, r1
90022ce6:	f8a9 0000 	strh.w	r0, [r9]
90022cea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022cec:	f109 0902 	add.w	r9, r9, #2
90022cf0:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022cf2:	f10b 3bff 	add.w	fp, fp, #4294967295
90022cf6:	441a      	add	r2, r3
90022cf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022cfa:	9225      	str	r2, [sp, #148]	; 0x94
90022cfc:	441d      	add	r5, r3
90022cfe:	e64c      	b.n	9002299a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022d00:	2800      	cmp	r0, #0
90022d02:	f43f aeed 	beq.w	90022ae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022d06:	5c79      	ldrb	r1, [r7, r1]
90022d08:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022d0c:	9109      	str	r1, [sp, #36]	; 0x24
90022d0e:	0e09      	lsrs	r1, r1, #24
90022d10:	9111      	str	r1, [sp, #68]	; 0x44
90022d12:	e6e5      	b.n	90022ae0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022d14:	b01b      	add	sp, #108	; 0x6c
90022d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022d1a:	bf00      	nop
90022d1c:	fffff800 	.word	0xfffff800

90022d20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90022d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022d24:	b085      	sub	sp, #20
90022d26:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
90022d2a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90022d2e:	2800      	cmp	r0, #0
90022d30:	9103      	str	r1, [sp, #12]
90022d32:	fb00 7406 	mla	r4, r0, r6, r7
90022d36:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
90022d3a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90022d3e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
90022d42:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
90022d46:	eb03 0904 	add.w	r9, r3, r4
90022d4a:	9501      	str	r5, [sp, #4]
90022d4c:	f2c0 8150 	blt.w	90022ff0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022d50:	4583      	cmp	fp, r0
90022d52:	f340 814d 	ble.w	90022ff0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022d56:	2f00      	cmp	r7, #0
90022d58:	f2c0 8146 	blt.w	90022fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022d5c:	42be      	cmp	r6, r7
90022d5e:	f340 8143 	ble.w	90022fe8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022d62:	f813 c004 	ldrb.w	ip, [r3, r4]
90022d66:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
90022d6a:	f64f 041f 	movw	r4, #63519	; 0xf81f
90022d6e:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022d72:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
90022d76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022d7a:	4355      	muls	r5, r2
90022d7c:	fb0c f203 	mul.w	r2, ip, r3
90022d80:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90022d84:	f605 0501 	addw	r5, r5, #2049	; 0x801
90022d88:	441d      	add	r5, r3
90022d8a:	f102 0320 	add.w	r3, r2, #32
90022d8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022d92:	ea04 1455 	and.w	r4, r4, r5, lsr #5
90022d96:	0a1b      	lsrs	r3, r3, #8
90022d98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022d9c:	431c      	orrs	r4, r3
90022d9e:	1c7b      	adds	r3, r7, #1
90022da0:	f100 812b 	bmi.w	90022ffa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022da4:	429e      	cmp	r6, r3
90022da6:	f340 8128 	ble.w	90022ffa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022daa:	2900      	cmp	r1, #0
90022dac:	f000 8128 	beq.w	90023000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
90022db0:	9a01      	ldr	r2, [sp, #4]
90022db2:	f899 3001 	ldrb.w	r3, [r9, #1]
90022db6:	8855      	ldrh	r5, [r2, #2]
90022db8:	ea4f 08e3 	mov.w	r8, r3, asr #3
90022dbc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90022dc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022dc4:	fb08 f802 	mul.w	r8, r8, r2
90022dc8:	f64f 021f 	movw	r2, #63519	; 0xf81f
90022dcc:	435d      	muls	r5, r3
90022dce:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90022dd2:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022dd6:	44d0      	add	r8, sl
90022dd8:	f105 0a20 	add.w	sl, r5, #32
90022ddc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90022de0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90022de4:	0a2d      	lsrs	r5, r5, #8
90022de6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022dea:	432a      	orrs	r2, r5
90022dec:	3001      	adds	r0, #1
90022dee:	f100 810d 	bmi.w	9002300c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022df2:	4583      	cmp	fp, r0
90022df4:	f340 810a 	ble.w	9002300c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022df8:	f1be 0f00 	cmp.w	lr, #0
90022dfc:	f000 810b 	beq.w	90023016 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
90022e00:	2f00      	cmp	r7, #0
90022e02:	f2c0 8100 	blt.w	90023006 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022e06:	42be      	cmp	r6, r7
90022e08:	f340 80fd 	ble.w	90023006 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022e0c:	9801      	ldr	r0, [sp, #4]
90022e0e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90022e12:	f819 5006 	ldrb.w	r5, [r9, r6]
90022e16:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
90022e1a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90022e1e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90022e22:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90022e26:	fb0a fa00 	mul.w	sl, sl, r0
90022e2a:	fb05 f808 	mul.w	r8, r5, r8
90022e2e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90022e32:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
90022e36:	4482      	add	sl, r0
90022e38:	f108 0020 	add.w	r0, r8, #32
90022e3c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022e40:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90022e44:	0a00      	lsrs	r0, r0, #8
90022e46:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022e4a:	ea4b 0b00 	orr.w	fp, fp, r0
90022e4e:	3701      	adds	r7, #1
90022e50:	f100 80e6 	bmi.w	90023020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022e54:	42be      	cmp	r6, r7
90022e56:	f340 80e3 	ble.w	90023020 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022e5a:	2900      	cmp	r1, #0
90022e5c:	f000 80e3 	beq.w	90023026 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
90022e60:	3601      	adds	r6, #1
90022e62:	9801      	ldr	r0, [sp, #4]
90022e64:	f819 7006 	ldrb.w	r7, [r9, r6]
90022e68:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90022e6c:	ea4f 09e7 	mov.w	r9, r7, asr #3
90022e70:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90022e74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022e78:	fb09 f906 	mul.w	r9, r9, r6
90022e7c:	fb07 f800 	mul.w	r8, r7, r0
90022e80:	f64f 001f 	movw	r0, #63519	; 0xf81f
90022e84:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
90022e88:	f609 0901 	addw	r9, r9, #2049	; 0x801
90022e8c:	44d1      	add	r9, sl
90022e8e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90022e92:	f108 0020 	add.w	r0, r8, #32
90022e96:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022e9a:	0a00      	lsrs	r0, r0, #8
90022e9c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022ea0:	4330      	orrs	r0, r6
90022ea2:	b28e      	uxth	r6, r1
90022ea4:	fa1f f98e 	uxth.w	r9, lr
90022ea8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90022eac:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90022eb0:	fb06 f809 	mul.w	r8, r6, r9
90022eb4:	0136      	lsls	r6, r6, #4
90022eb6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022eba:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90022ebe:	9601      	str	r6, [sp, #4]
90022ec0:	ea4a 0404 	orr.w	r4, sl, r4
90022ec4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022ec8:	fa1f f689 	uxth.w	r6, r9
90022ecc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022ed0:	fb11 f90e 	smulbb	r9, r1, lr
90022ed4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022ed8:	9602      	str	r6, [sp, #8]
90022eda:	4626      	mov	r6, r4
90022edc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90022ee0:	f1ce 0410 	rsb	r4, lr, #16
90022ee4:	ea4a 0202 	orr.w	r2, sl, r2
90022ee8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90022eec:	1a64      	subs	r4, r4, r1
90022eee:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90022ef2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022ef6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90022efa:	434a      	muls	r2, r1
90022efc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90022f00:	ea4a 0000 	orr.w	r0, sl, r0
90022f04:	9903      	ldr	r1, [sp, #12]
90022f06:	fb04 2406 	mla	r4, r4, r6, r2
90022f0a:	9e02      	ldr	r6, [sp, #8]
90022f0c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90022f10:	fb09 4200 	mla	r2, r9, r0, r4
90022f14:	ea4f 440b 	mov.w	r4, fp, lsl #16
90022f18:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90022f1c:	8808      	ldrh	r0, [r1, #0]
90022f1e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90022f22:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
90022f26:	ea44 0b0b 	orr.w	fp, r4, fp
90022f2a:	9c01      	ldr	r4, [sp, #4]
90022f2c:	b289      	uxth	r1, r1
90022f2e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
90022f32:	fb0e 2e0b 	mla	lr, lr, fp, r2
90022f36:	1ba4      	subs	r4, r4, r6
90022f38:	9e01      	ldr	r6, [sp, #4]
90022f3a:	ea4f 525e 	mov.w	r2, lr, lsr #21
90022f3e:	eba6 0608 	sub.w	r6, r6, r8
90022f42:	b2a4      	uxth	r4, r4
90022f44:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022f48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022f4c:	b2b6      	uxth	r6, r6
90022f4e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022f52:	4373      	muls	r3, r6
90022f54:	ea42 0e0e 	orr.w	lr, r2, lr
90022f58:	fb0c 3304 	mla	r3, ip, r4, r3
90022f5c:	9c02      	ldr	r4, [sp, #8]
90022f5e:	fa1f f28e 	uxth.w	r2, lr
90022f62:	fb04 3505 	mla	r5, r4, r5, r3
90022f66:	10d4      	asrs	r4, r2, #3
90022f68:	fb08 5707 	mla	r7, r8, r7, r5
90022f6c:	1215      	asrs	r5, r2, #8
90022f6e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90022f72:	00d2      	lsls	r2, r2, #3
90022f74:	f3c7 2707 	ubfx	r7, r7, #8, #8
90022f78:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90022f7c:	b2d2      	uxtb	r2, r2
90022f7e:	434f      	muls	r7, r1
90022f80:	1c7b      	adds	r3, r7, #1
90022f82:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90022f86:	1203      	asrs	r3, r0, #8
90022f88:	ea6f 2717 	mvn.w	r7, r7, lsr #8
90022f8c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022f90:	b2ff      	uxtb	r7, r7
90022f92:	fb13 f307 	smulbb	r3, r3, r7
90022f96:	fb05 3501 	mla	r5, r5, r1, r3
90022f9a:	10c3      	asrs	r3, r0, #3
90022f9c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022fa0:	b2ad      	uxth	r5, r5
90022fa2:	fb13 f307 	smulbb	r3, r3, r7
90022fa6:	fb04 3401 	mla	r4, r4, r1, r3
90022faa:	00c3      	lsls	r3, r0, #3
90022fac:	b2db      	uxtb	r3, r3
90022fae:	b2a4      	uxth	r4, r4
90022fb0:	fb13 f307 	smulbb	r3, r3, r7
90022fb4:	fb02 3101 	mla	r1, r2, r1, r3
90022fb8:	1c6b      	adds	r3, r5, #1
90022fba:	1c62      	adds	r2, r4, #1
90022fbc:	b289      	uxth	r1, r1
90022fbe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022fc2:	1c4b      	adds	r3, r1, #1
90022fc4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
90022fc8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022fcc:	9a03      	ldr	r2, [sp, #12]
90022fce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90022fd2:	0964      	lsrs	r4, r4, #5
90022fd4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022fd8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90022fdc:	432b      	orrs	r3, r5
90022fde:	4323      	orrs	r3, r4
90022fe0:	8013      	strh	r3, [r2, #0]
90022fe2:	b005      	add	sp, #20
90022fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022fe8:	f04f 0c00 	mov.w	ip, #0
90022fec:	4664      	mov	r4, ip
90022fee:	e6d6      	b.n	90022d9e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
90022ff0:	2300      	movs	r3, #0
90022ff2:	469c      	mov	ip, r3
90022ff4:	461a      	mov	r2, r3
90022ff6:	461c      	mov	r4, r3
90022ff8:	e6f8      	b.n	90022dec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022ffa:	2300      	movs	r3, #0
90022ffc:	461a      	mov	r2, r3
90022ffe:	e6f5      	b.n	90022dec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90023000:	460b      	mov	r3, r1
90023002:	460a      	mov	r2, r1
90023004:	e6f2      	b.n	90022dec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90023006:	2500      	movs	r5, #0
90023008:	46ab      	mov	fp, r5
9002300a:	e720      	b.n	90022e4e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9002300c:	2700      	movs	r7, #0
9002300e:	463d      	mov	r5, r7
90023010:	4638      	mov	r0, r7
90023012:	46bb      	mov	fp, r7
90023014:	e745      	b.n	90022ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90023016:	4677      	mov	r7, lr
90023018:	4675      	mov	r5, lr
9002301a:	4670      	mov	r0, lr
9002301c:	46f3      	mov	fp, lr
9002301e:	e740      	b.n	90022ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90023020:	2700      	movs	r7, #0
90023022:	4638      	mov	r0, r7
90023024:	e73d      	b.n	90022ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90023026:	460f      	mov	r7, r1
90023028:	4608      	mov	r0, r1
9002302a:	e73a      	b.n	90022ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9002302c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023030:	b097      	sub	sp, #92	; 0x5c
90023032:	9214      	str	r2, [sp, #80]	; 0x50
90023034:	9308      	str	r3, [sp, #32]
90023036:	9a25      	ldr	r2, [sp, #148]	; 0x94
90023038:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9002303c:	9015      	str	r0, [sp, #84]	; 0x54
9002303e:	9312      	str	r3, [sp, #72]	; 0x48
90023040:	6850      	ldr	r0, [r2, #4]
90023042:	9111      	str	r1, [sp, #68]	; 0x44
90023044:	6812      	ldr	r2, [r2, #0]
90023046:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9002304a:	fb00 1303 	mla	r3, r0, r3, r1
9002304e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023052:	9309      	str	r3, [sp, #36]	; 0x24
90023054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90023056:	681b      	ldr	r3, [r3, #0]
90023058:	930b      	str	r3, [sp, #44]	; 0x2c
9002305a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002305c:	685b      	ldr	r3, [r3, #4]
9002305e:	930c      	str	r3, [sp, #48]	; 0x30
90023060:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90023064:	930a      	str	r3, [sp, #40]	; 0x28
90023066:	9b11      	ldr	r3, [sp, #68]	; 0x44
90023068:	2b00      	cmp	r3, #0
9002306a:	dc03      	bgt.n	90023074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9002306c:	9b14      	ldr	r3, [sp, #80]	; 0x50
9002306e:	2b00      	cmp	r3, #0
90023070:	f340 83cd 	ble.w	9002380e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90023074:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90023076:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002307a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002307e:	1e48      	subs	r0, r1, #1
90023080:	1e55      	subs	r5, r2, #1
90023082:	9b08      	ldr	r3, [sp, #32]
90023084:	2b00      	cmp	r3, #0
90023086:	f340 81a5 	ble.w	900233d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9002308a:	9e21      	ldr	r6, [sp, #132]	; 0x84
9002308c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9002308e:	1436      	asrs	r6, r6, #16
90023090:	ea4f 4323 	mov.w	r3, r3, asr #16
90023094:	d406      	bmi.n	900230a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90023096:	4286      	cmp	r6, r0
90023098:	da04      	bge.n	900230a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002309a:	2b00      	cmp	r3, #0
9002309c:	db02      	blt.n	900230a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002309e:	42ab      	cmp	r3, r5
900230a0:	f2c0 8199 	blt.w	900233d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
900230a4:	3601      	adds	r6, #1
900230a6:	f100 8186 	bmi.w	900233b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900230aa:	42b1      	cmp	r1, r6
900230ac:	f2c0 8183 	blt.w	900233b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900230b0:	3301      	adds	r3, #1
900230b2:	f100 8180 	bmi.w	900233b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900230b6:	429a      	cmp	r2, r3
900230b8:	f2c0 817d 	blt.w	900233b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900230bc:	9b08      	ldr	r3, [sp, #32]
900230be:	f64f 061f 	movw	r6, #63519	; 0xf81f
900230c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
900230c4:	9313      	str	r3, [sp, #76]	; 0x4c
900230c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900230c8:	2b00      	cmp	r3, #0
900230ca:	f340 81a6 	ble.w	9002341a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
900230ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
900230d0:	9d21      	ldr	r5, [sp, #132]	; 0x84
900230d2:	1418      	asrs	r0, r3, #16
900230d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
900230d6:	142d      	asrs	r5, r5, #16
900230d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
900230dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
900230de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
900230e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900230e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
900230e8:	f100 81fa 	bmi.w	900234e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
900230ec:	f102 3eff 	add.w	lr, r2, #4294967295
900230f0:	4575      	cmp	r5, lr
900230f2:	f280 81f5 	bge.w	900234e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
900230f6:	2800      	cmp	r0, #0
900230f8:	f2c0 81f2 	blt.w	900234e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
900230fc:	f103 3eff 	add.w	lr, r3, #4294967295
90023100:	4570      	cmp	r0, lr
90023102:	f280 81ed 	bge.w	900234e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90023106:	b212      	sxth	r2, r2
90023108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002310a:	fa1f fe81 	uxth.w	lr, r1
9002310e:	fb00 5002 	mla	r0, r0, r2, r5
90023112:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023116:	eb03 0a00 	add.w	sl, r3, r0
9002311a:	f813 9000 	ldrb.w	r9, [r3, r0]
9002311e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023122:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023126:	b29b      	uxth	r3, r3
90023128:	f1bc 0f00 	cmp.w	ip, #0
9002312c:	f000 81bb 	beq.w	900234a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
90023130:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023134:	eb0a 0b02 	add.w	fp, sl, r2
90023138:	fa1f fa8c 	uxth.w	sl, ip
9002313c:	940d      	str	r4, [sp, #52]	; 0x34
9002313e:	fb0a fe0e 	mul.w	lr, sl, lr
90023142:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023146:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9002314a:	eba5 050e 	sub.w	r5, r5, lr
9002314e:	940e      	str	r4, [sp, #56]	; 0x38
90023150:	fa1f fa8a 	uxth.w	sl, sl
90023154:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90023156:	b2ad      	uxth	r5, r5
90023158:	eba3 030a 	sub.w	r3, r3, sl
9002315c:	fb08 f505 	mul.w	r5, r8, r5
90023160:	b29b      	uxth	r3, r3
90023162:	fb09 5303 	mla	r3, r9, r3, r5
90023166:	fb0a 3304 	mla	r3, sl, r4, r3
9002316a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002316c:	fb0e 3304 	mla	r3, lr, r4, r3
90023170:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023174:	2b00      	cmp	r3, #0
90023176:	f000 8111 	beq.w	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002317a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002317c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023180:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023184:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023188:	f000 8192 	beq.w	900234b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9002318c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023190:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023194:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023198:	fb0a fe0e 	mul.w	lr, sl, lr
9002319c:	fb09 f000 	mul.w	r0, r9, r0
900231a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
900231a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
900231a8:	f100 0b20 	add.w	fp, r0, #32
900231ac:	44ce      	add	lr, r9
900231ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
900231b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
900231b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
900231ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900231be:	ea4e 0909 	orr.w	r9, lr, r9
900231c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900231c6:	8868      	ldrh	r0, [r5, #2]
900231c8:	d019      	beq.n	900231fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
900231ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
900231ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
900231d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900231d6:	fb0a fe0e 	mul.w	lr, sl, lr
900231da:	fb08 f800 	mul.w	r8, r8, r0
900231de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
900231e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
900231e6:	f108 0b20 	add.w	fp, r8, #32
900231ea:	4486      	add	lr, r0
900231ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
900231f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
900231f4:	0a00      	lsrs	r0, r0, #8
900231f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900231fa:	ea4e 0000 	orr.w	r0, lr, r0
900231fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023202:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023206:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9002320a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002320e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023212:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023216:	ea4e 0909 	orr.w	r9, lr, r9
9002321a:	ea4a 0000 	orr.w	r0, sl, r0
9002321e:	f1bc 0f00 	cmp.w	ip, #0
90023222:	f000 8147 	beq.w	900234b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
90023226:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9002322a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002322c:	3a01      	subs	r2, #1
9002322e:	2cff      	cmp	r4, #255	; 0xff
90023230:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023234:	f102 0202 	add.w	r2, r2, #2
90023238:	eb05 0e02 	add.w	lr, r5, r2
9002323c:	5aaa      	ldrh	r2, [r5, r2]
9002323e:	d018      	beq.n	90023272 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90023240:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90023244:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023248:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002324c:	fb04 fa02 	mul.w	sl, r4, r2
90023250:	fb08 f805 	mul.w	r8, r8, r5
90023254:	f10a 0520 	add.w	r5, sl, #32
90023258:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9002325c:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023260:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023264:	4442      	add	r2, r8
90023266:	0a2d      	lsrs	r5, r5, #8
90023268:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9002326c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023270:	432a      	orrs	r2, r5
90023272:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90023274:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023278:	2cff      	cmp	r4, #255	; 0xff
9002327a:	d01a      	beq.n	900232b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9002327c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90023280:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023284:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023288:	fb04 fa05 	mul.w	sl, r4, r5
9002328c:	fb08 f80e 	mul.w	r8, r8, lr
90023290:	f10a 0e20 	add.w	lr, sl, #32
90023294:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023298:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002329c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
900232a0:	4445      	add	r5, r8
900232a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900232a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
900232aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
900232ae:	ea45 050e 	orr.w	r5, r5, lr
900232b2:	fb1c fe01 	smulbb	lr, ip, r1
900232b6:	f1cc 0810 	rsb	r8, ip, #16
900232ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
900232be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900232c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
900232c6:	eba8 0801 	sub.w	r8, r8, r1
900232ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
900232ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900232d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
900232d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
900232da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
900232de:	ea4a 0202 	orr.w	r2, sl, r2
900232e2:	4341      	muls	r1, r0
900232e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
900232e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900232ec:	fb09 1108 	mla	r1, r9, r8, r1
900232f0:	ea4b 0505 	orr.w	r5, fp, r5
900232f4:	fb0c 1102 	mla	r1, ip, r2, r1
900232f8:	fb0e 1e05 	mla	lr, lr, r5, r1
900232fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023300:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023304:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023308:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002330c:	ea42 0e0e 	orr.w	lr, r2, lr
90023310:	fa1f f28e 	uxth.w	r2, lr
90023314:	2bff      	cmp	r3, #255	; 0xff
90023316:	d103      	bne.n	90023320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90023318:	9912      	ldr	r1, [sp, #72]	; 0x48
9002331a:	29ff      	cmp	r1, #255	; 0xff
9002331c:	f000 80de 	beq.w	900234dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
90023320:	990a      	ldr	r1, [sp, #40]	; 0x28
90023322:	1215      	asrs	r5, r2, #8
90023324:	8838      	ldrh	r0, [r7, #0]
90023326:	434b      	muls	r3, r1
90023328:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002332c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002332e:	f103 0c01 	add.w	ip, r3, #1
90023332:	eb0c 2323 	add.w	r3, ip, r3, asr #8
90023336:	ea6f 2323 	mvn.w	r3, r3, asr #8
9002333a:	fa5f fc83 	uxtb.w	ip, r3
9002333e:	1203      	asrs	r3, r0, #8
90023340:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90023344:	fb13 f30c 	smulbb	r3, r3, ip
90023348:	fb05 3501 	mla	r5, r5, r1, r3
9002334c:	10c3      	asrs	r3, r0, #3
9002334e:	10d1      	asrs	r1, r2, #3
90023350:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90023354:	00d2      	lsls	r2, r2, #3
90023356:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002335a:	b2ad      	uxth	r5, r5
9002335c:	fb13 f30c 	smulbb	r3, r3, ip
90023360:	b2d2      	uxtb	r2, r2
90023362:	fb01 3104 	mla	r1, r1, r4, r3
90023366:	00c3      	lsls	r3, r0, #3
90023368:	b2db      	uxtb	r3, r3
9002336a:	b289      	uxth	r1, r1
9002336c:	fb13 f30c 	smulbb	r3, r3, ip
90023370:	fb02 3304 	mla	r3, r2, r4, r3
90023374:	b29a      	uxth	r2, r3
90023376:	1c6b      	adds	r3, r5, #1
90023378:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9002337c:	1c53      	adds	r3, r2, #1
9002337e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023382:	1c4a      	adds	r2, r1, #1
90023384:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90023388:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002338c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90023390:	0949      	lsrs	r1, r1, #5
90023392:	432b      	orrs	r3, r5
90023394:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023398:	430b      	orrs	r3, r1
9002339a:	803b      	strh	r3, [r7, #0]
9002339c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002339e:	3702      	adds	r7, #2
900233a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
900233a2:	4413      	add	r3, r2
900233a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
900233a6:	9321      	str	r3, [sp, #132]	; 0x84
900233a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900233aa:	441a      	add	r2, r3
900233ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900233ae:	3b01      	subs	r3, #1
900233b0:	9222      	str	r2, [sp, #136]	; 0x88
900233b2:	9313      	str	r3, [sp, #76]	; 0x4c
900233b4:	e687      	b.n	900230c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
900233b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
900233b8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
900233ba:	9c22      	ldr	r4, [sp, #136]	; 0x88
900233bc:	4433      	add	r3, r6
900233be:	9321      	str	r3, [sp, #132]	; 0x84
900233c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900233c2:	441c      	add	r4, r3
900233c4:	9b08      	ldr	r3, [sp, #32]
900233c6:	3b01      	subs	r3, #1
900233c8:	9422      	str	r4, [sp, #136]	; 0x88
900233ca:	9308      	str	r3, [sp, #32]
900233cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
900233ce:	3302      	adds	r3, #2
900233d0:	9309      	str	r3, [sp, #36]	; 0x24
900233d2:	e656      	b.n	90023082 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
900233d4:	d028      	beq.n	90023428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
900233d6:	9b08      	ldr	r3, [sp, #32]
900233d8:	9823      	ldr	r0, [sp, #140]	; 0x8c
900233da:	3b01      	subs	r3, #1
900233dc:	9d21      	ldr	r5, [sp, #132]	; 0x84
900233de:	fb00 5003 	mla	r0, r0, r3, r5
900233e2:	1400      	asrs	r0, r0, #16
900233e4:	f53f ae6a 	bmi.w	900230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233e8:	3901      	subs	r1, #1
900233ea:	4288      	cmp	r0, r1
900233ec:	f6bf ae66 	bge.w	900230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233f0:	9924      	ldr	r1, [sp, #144]	; 0x90
900233f2:	9822      	ldr	r0, [sp, #136]	; 0x88
900233f4:	fb01 0303 	mla	r3, r1, r3, r0
900233f8:	141b      	asrs	r3, r3, #16
900233fa:	f53f ae5f 	bmi.w	900230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233fe:	3a01      	subs	r2, #1
90023400:	4293      	cmp	r3, r2
90023402:	f6bf ae5b 	bge.w	900230bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023406:	9b08      	ldr	r3, [sp, #32]
90023408:	f64f 061f 	movw	r6, #63519	; 0xf81f
9002340c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90023410:	9313      	str	r3, [sp, #76]	; 0x4c
90023412:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023414:	2b00      	cmp	r3, #0
90023416:	f300 8082 	bgt.w	9002351e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9002341a:	9b08      	ldr	r3, [sp, #32]
9002341c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023420:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023422:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023426:	9309      	str	r3, [sp, #36]	; 0x24
90023428:	9b11      	ldr	r3, [sp, #68]	; 0x44
9002342a:	2b00      	cmp	r3, #0
9002342c:	f340 81ef 	ble.w	9002380e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90023430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023434:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023436:	ee30 0a04 	vadd.f32	s0, s0, s8
9002343a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002343e:	eef0 6a62 	vmov.f32	s13, s5
90023442:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023446:	ee31 1a05 	vadd.f32	s2, s2, s10
9002344a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002344e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
90023452:	eef0 6a43 	vmov.f32	s13, s6
90023456:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002345a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9002345e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023462:	ee61 7a27 	vmul.f32	s15, s2, s15
90023466:	ee77 2a62 	vsub.f32	s5, s14, s5
9002346a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002346e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023472:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023476:	ee12 2a90 	vmov	r2, s5
9002347a:	eef0 2a47 	vmov.f32	s5, s14
9002347e:	fb92 f3f3 	sdiv	r3, r2, r3
90023482:	ee13 2a10 	vmov	r2, s6
90023486:	9323      	str	r3, [sp, #140]	; 0x8c
90023488:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002348a:	eeb0 3a67 	vmov.f32	s6, s15
9002348e:	fb92 f3f3 	sdiv	r3, r2, r3
90023492:	9324      	str	r3, [sp, #144]	; 0x90
90023494:	9b11      	ldr	r3, [sp, #68]	; 0x44
90023496:	9a14      	ldr	r2, [sp, #80]	; 0x50
90023498:	3b01      	subs	r3, #1
9002349a:	9311      	str	r3, [sp, #68]	; 0x44
9002349c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002349e:	bf08      	it	eq
900234a0:	4613      	moveq	r3, r2
900234a2:	9308      	str	r3, [sp, #32]
900234a4:	e5df      	b.n	90023066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900234a6:	fb08 f505 	mul.w	r5, r8, r5
900234aa:	fb09 5303 	mla	r3, r9, r3, r5
900234ae:	e65f      	b.n	90023170 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
900234b0:	4681      	mov	r9, r0
900234b2:	e686      	b.n	900231c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900234b4:	f1c1 0210 	rsb	r2, r1, #16
900234b8:	4341      	muls	r1, r0
900234ba:	fb09 1902 	mla	r9, r9, r2, r1
900234be:	ea4f 0949 	mov.w	r9, r9, lsl #1
900234c2:	ea4f 5259 	mov.w	r2, r9, lsr #21
900234c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
900234ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900234ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900234d2:	ea42 0909 	orr.w	r9, r2, r9
900234d6:	fa1f f289 	uxth.w	r2, r9
900234da:	e71b      	b.n	90023314 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
900234dc:	803a      	strh	r2, [r7, #0]
900234de:	e75d      	b.n	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900234e0:	f115 0e01 	adds.w	lr, r5, #1
900234e4:	f53f af5a 	bmi.w	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900234e8:	4572      	cmp	r2, lr
900234ea:	f6ff af57 	blt.w	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900234ee:	f110 0e01 	adds.w	lr, r0, #1
900234f2:	f53f af53 	bmi.w	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900234f6:	4573      	cmp	r3, lr
900234f8:	f6ff af50 	blt.w	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900234fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
900234fe:	b21b      	sxth	r3, r3
90023500:	b212      	sxth	r2, r2
90023502:	9502      	str	r5, [sp, #8]
90023504:	9301      	str	r3, [sp, #4]
90023506:	9200      	str	r2, [sp, #0]
90023508:	e9cd 0103 	strd	r0, r1, [sp, #12]
9002350c:	e9cd c405 	strd	ip, r4, [sp, #20]
90023510:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
90023514:	4639      	mov	r1, r7
90023516:	9815      	ldr	r0, [sp, #84]	; 0x54
90023518:	f7ff fc02 	bl	90022d20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9002351c:	e73e      	b.n	9002339c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002351e:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023520:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023524:	9b22      	ldr	r3, [sp, #136]	; 0x88
90023526:	f3c3 3503 	ubfx	r5, r3, #12, #4
9002352a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002352c:	fa1f fc82 	uxth.w	ip, r2
90023530:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023534:	9b22      	ldr	r3, [sp, #136]	; 0x88
90023536:	ea4f 100c 	mov.w	r0, ip, lsl #4
9002353a:	141f      	asrs	r7, r3, #16
9002353c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002353e:	141b      	asrs	r3, r3, #16
90023540:	fb01 3707 	mla	r7, r1, r7, r3
90023544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90023546:	eb03 0a07 	add.w	sl, r3, r7
9002354a:	f813 9007 	ldrb.w	r9, [r3, r7]
9002354e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90023552:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023556:	b29b      	uxth	r3, r3
90023558:	2d00      	cmp	r5, #0
9002355a:	f000 813d 	beq.w	900237d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9002355e:	f81a 4001 	ldrb.w	r4, [sl, r1]
90023562:	eb0a 0b01 	add.w	fp, sl, r1
90023566:	fa1f fa85 	uxth.w	sl, r5
9002356a:	940f      	str	r4, [sp, #60]	; 0x3c
9002356c:	fb0a fc0c 	mul.w	ip, sl, ip
90023570:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023574:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023578:	eba0 000c 	sub.w	r0, r0, ip
9002357c:	9410      	str	r4, [sp, #64]	; 0x40
9002357e:	fa1f fa8a 	uxth.w	sl, sl
90023582:	b280      	uxth	r0, r0
90023584:	eba3 030a 	sub.w	r3, r3, sl
90023588:	fb08 f000 	mul.w	r0, r8, r0
9002358c:	b29b      	uxth	r3, r3
9002358e:	fb09 0303 	mla	r3, r9, r3, r0
90023592:	980f      	ldr	r0, [sp, #60]	; 0x3c
90023594:	fb0a 3300 	mla	r3, sl, r0, r3
90023598:	fb0c 3304 	mla	r3, ip, r4, r3
9002359c:	f3c3 2307 	ubfx	r3, r3, #8, #8
900235a0:	2b00      	cmp	r3, #0
900235a2:	f000 810b 	beq.w	900237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
900235a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
900235a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900235ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900235ae:	eb00 0047 	add.w	r0, r0, r7, lsl #1
900235b2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
900235b6:	f000 8114 	beq.w	900237e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
900235ba:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
900235be:	ea4f 0ae9 	mov.w	sl, r9, asr #3
900235c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900235c6:	fb0a fc0c 	mul.w	ip, sl, ip
900235ca:	fb09 f707 	mul.w	r7, r9, r7
900235ce:	ea06 195c 	and.w	r9, r6, ip, lsr #5
900235d2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
900235d6:	f107 0b20 	add.w	fp, r7, #32
900235da:	44cc      	add	ip, r9
900235dc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
900235e0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
900235e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
900235e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900235ec:	ea4c 0909 	orr.w	r9, ip, r9
900235f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900235f4:	8847      	ldrh	r7, [r0, #2]
900235f6:	d019      	beq.n	9002362c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
900235f8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
900235fc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023600:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023604:	fb0a fc0c 	mul.w	ip, sl, ip
90023608:	fb08 f807 	mul.w	r8, r8, r7
9002360c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023610:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023614:	f108 0b20 	add.w	fp, r8, #32
90023618:	44bc      	add	ip, r7
9002361a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9002361e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023622:	0a3f      	lsrs	r7, r7, #8
90023624:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023628:	ea4c 0707 	orr.w	r7, ip, r7
9002362c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023630:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023634:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023638:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002363c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90023640:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023644:	ea4c 0909 	orr.w	r9, ip, r9
90023648:	ea4a 0707 	orr.w	r7, sl, r7
9002364c:	2d00      	cmp	r5, #0
9002364e:	f000 80ca 	beq.w	900237e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
90023652:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90023656:	3901      	subs	r1, #1
90023658:	0049      	lsls	r1, r1, #1
9002365a:	3102      	adds	r1, #2
9002365c:	eb00 0c01 	add.w	ip, r0, r1
90023660:	5a41      	ldrh	r1, [r0, r1]
90023662:	980f      	ldr	r0, [sp, #60]	; 0x3c
90023664:	28ff      	cmp	r0, #255	; 0xff
90023666:	d019      	beq.n	9002369c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
90023668:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9002366c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9002366e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023672:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023676:	fb04 fa01 	mul.w	sl, r4, r1
9002367a:	fb08 f800 	mul.w	r8, r8, r0
9002367e:	f10a 0020 	add.w	r0, sl, #32
90023682:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023686:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002368a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9002368e:	4441      	add	r1, r8
90023690:	0a00      	lsrs	r0, r0, #8
90023692:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023696:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002369a:	4301      	orrs	r1, r0
9002369c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002369e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
900236a2:	2cff      	cmp	r4, #255	; 0xff
900236a4:	d01a      	beq.n	900236dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
900236a6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
900236aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900236ae:	ea4f 08e4 	mov.w	r8, r4, asr #3
900236b2:	fb04 fa00 	mul.w	sl, r4, r0
900236b6:	fb08 f80c 	mul.w	r8, r8, ip
900236ba:	f10a 0c20 	add.w	ip, sl, #32
900236be:	ea06 1058 	and.w	r0, r6, r8, lsr #5
900236c2:	f608 0801 	addw	r8, r8, #2049	; 0x801
900236c6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
900236ca:	4440      	add	r0, r8
900236cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900236d0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
900236d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900236d8:	ea40 000c 	orr.w	r0, r0, ip
900236dc:	fb15 fc02 	smulbb	ip, r5, r2
900236e0:	f1c5 0810 	rsb	r8, r5, #16
900236e4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900236e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900236ec:	ea4f 0cec 	mov.w	ip, ip, asr #3
900236f0:	eba8 0802 	sub.w	r8, r8, r2
900236f4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
900236f8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900236fc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90023700:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023704:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90023708:	ea4a 0101 	orr.w	r1, sl, r1
9002370c:	437a      	muls	r2, r7
9002370e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90023712:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023716:	fb09 2208 	mla	r2, r9, r8, r2
9002371a:	ea4b 0000 	orr.w	r0, fp, r0
9002371e:	fb05 2201 	mla	r2, r5, r1, r2
90023722:	fb0c 2200 	mla	r2, ip, r0, r2
90023726:	0d57      	lsrs	r7, r2, #21
90023728:	0952      	lsrs	r2, r2, #5
9002372a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002372e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023732:	433a      	orrs	r2, r7
90023734:	2bff      	cmp	r3, #255	; 0xff
90023736:	b292      	uxth	r2, r2
90023738:	d102      	bne.n	90023740 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9002373a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002373c:	29ff      	cmp	r1, #255	; 0xff
9002373e:	d063      	beq.n	90023808 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
90023740:	980a      	ldr	r0, [sp, #40]	; 0x28
90023742:	1215      	asrs	r5, r2, #8
90023744:	f8be 1000 	ldrh.w	r1, [lr]
90023748:	4343      	muls	r3, r0
9002374a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002374c:	10cf      	asrs	r7, r1, #3
9002374e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90023752:	1c58      	adds	r0, r3, #1
90023754:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90023758:	eb00 2323 	add.w	r3, r0, r3, asr #8
9002375c:	1208      	asrs	r0, r1, #8
9002375e:	ea6f 2323 	mvn.w	r3, r3, asr #8
90023762:	00c9      	lsls	r1, r1, #3
90023764:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023768:	b2db      	uxtb	r3, r3
9002376a:	b2c9      	uxtb	r1, r1
9002376c:	fb10 f003 	smulbb	r0, r0, r3
90023770:	fb11 f103 	smulbb	r1, r1, r3
90023774:	fb05 0504 	mla	r5, r5, r4, r0
90023778:	10d0      	asrs	r0, r2, #3
9002377a:	fb17 f703 	smulbb	r7, r7, r3
9002377e:	00d2      	lsls	r2, r2, #3
90023780:	b2ad      	uxth	r5, r5
90023782:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023786:	b2d2      	uxtb	r2, r2
90023788:	fb00 7004 	mla	r0, r0, r4, r7
9002378c:	1c6b      	adds	r3, r5, #1
9002378e:	fb02 1204 	mla	r2, r2, r4, r1
90023792:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023796:	b292      	uxth	r2, r2
90023798:	b280      	uxth	r0, r0
9002379a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002379e:	1c57      	adds	r7, r2, #1
900237a0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
900237a4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900237a8:	433d      	orrs	r5, r7
900237aa:	1c47      	adds	r7, r0, #1
900237ac:	eb07 2710 	add.w	r7, r7, r0, lsr #8
900237b0:	097f      	lsrs	r7, r7, #5
900237b2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900237b6:	433d      	orrs	r5, r7
900237b8:	f8ae 5000 	strh.w	r5, [lr]
900237bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
900237be:	f10e 0e02 	add.w	lr, lr, #2
900237c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
900237c4:	4413      	add	r3, r2
900237c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
900237c8:	9321      	str	r3, [sp, #132]	; 0x84
900237ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
900237cc:	441a      	add	r2, r3
900237ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900237d0:	3b01      	subs	r3, #1
900237d2:	9222      	str	r2, [sp, #136]	; 0x88
900237d4:	9313      	str	r3, [sp, #76]	; 0x4c
900237d6:	e61c      	b.n	90023412 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
900237d8:	fb08 f000 	mul.w	r0, r8, r0
900237dc:	fb09 0303 	mla	r3, r9, r3, r0
900237e0:	e6dc      	b.n	9002359c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
900237e2:	46b9      	mov	r9, r7
900237e4:	e704      	b.n	900235f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
900237e6:	f1c2 0110 	rsb	r1, r2, #16
900237ea:	437a      	muls	r2, r7
900237ec:	fb09 2901 	mla	r9, r9, r1, r2
900237f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
900237f4:	ea4f 5059 	mov.w	r0, r9, lsr #21
900237f8:	ea4f 1259 	mov.w	r2, r9, lsr #5
900237fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023800:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023804:	4302      	orrs	r2, r0
90023806:	e795      	b.n	90023734 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
90023808:	f8ae 2000 	strh.w	r2, [lr]
9002380c:	e7d6      	b.n	900237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9002380e:	b017      	add	sp, #92	; 0x5c
90023810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90023814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90023814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023818:	b085      	sub	sp, #20
9002381a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9002381e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90023822:	2800      	cmp	r0, #0
90023824:	9103      	str	r1, [sp, #12]
90023826:	fb00 7406 	mla	r4, r0, r6, r7
9002382a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9002382e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90023832:	eb03 0544 	add.w	r5, r3, r4, lsl #1
90023836:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9002383a:	eb02 0904 	add.w	r9, r2, r4
9002383e:	9501      	str	r5, [sp, #4]
90023840:	f2c0 8141 	blt.w	90023ac6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
90023844:	4583      	cmp	fp, r0
90023846:	f340 813e 	ble.w	90023ac6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9002384a:	2f00      	cmp	r7, #0
9002384c:	f2c0 8137 	blt.w	90023abe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
90023850:	42be      	cmp	r6, r7
90023852:	f340 8134 	ble.w	90023abe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
90023856:	f812 c004 	ldrb.w	ip, [r2, r4]
9002385a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9002385e:	f64f 041f 	movw	r4, #63519	; 0xf81f
90023862:	ea4f 02ec 	mov.w	r2, ip, asr #3
90023866:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9002386a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002386e:	4355      	muls	r5, r2
90023870:	fb0c f203 	mul.w	r2, ip, r3
90023874:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90023878:	f605 0501 	addw	r5, r5, #2049	; 0x801
9002387c:	441d      	add	r5, r3
9002387e:	f102 0320 	add.w	r3, r2, #32
90023882:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023886:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9002388a:	0a1b      	lsrs	r3, r3, #8
9002388c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023890:	431c      	orrs	r4, r3
90023892:	1c7b      	adds	r3, r7, #1
90023894:	f100 811c 	bmi.w	90023ad0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
90023898:	429e      	cmp	r6, r3
9002389a:	f340 8119 	ble.w	90023ad0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9002389e:	2900      	cmp	r1, #0
900238a0:	f000 8119 	beq.w	90023ad6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
900238a4:	9a01      	ldr	r2, [sp, #4]
900238a6:	f899 3001 	ldrb.w	r3, [r9, #1]
900238aa:	8855      	ldrh	r5, [r2, #2]
900238ac:	ea4f 08e3 	mov.w	r8, r3, asr #3
900238b0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
900238b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900238b8:	fb08 f802 	mul.w	r8, r8, r2
900238bc:	f64f 021f 	movw	r2, #63519	; 0xf81f
900238c0:	435d      	muls	r5, r3
900238c2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
900238c6:	f608 0801 	addw	r8, r8, #2049	; 0x801
900238ca:	44d0      	add	r8, sl
900238cc:	f105 0a20 	add.w	sl, r5, #32
900238d0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
900238d4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
900238d8:	0a2d      	lsrs	r5, r5, #8
900238da:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900238de:	432a      	orrs	r2, r5
900238e0:	3001      	adds	r0, #1
900238e2:	f100 80fe 	bmi.w	90023ae2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
900238e6:	4583      	cmp	fp, r0
900238e8:	f340 80fb 	ble.w	90023ae2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
900238ec:	f1be 0f00 	cmp.w	lr, #0
900238f0:	f000 80fc 	beq.w	90023aec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
900238f4:	2f00      	cmp	r7, #0
900238f6:	f2c0 80f1 	blt.w	90023adc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
900238fa:	42be      	cmp	r6, r7
900238fc:	f340 80ee 	ble.w	90023adc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
90023900:	9801      	ldr	r0, [sp, #4]
90023902:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90023906:	f819 5006 	ldrb.w	r5, [r9, r6]
9002390a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9002390e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90023912:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90023916:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9002391a:	fb0a fa00 	mul.w	sl, sl, r0
9002391e:	fb05 f808 	mul.w	r8, r5, r8
90023922:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90023926:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9002392a:	4482      	add	sl, r0
9002392c:	f108 0020 	add.w	r0, r8, #32
90023930:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90023934:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90023938:	0a00      	lsrs	r0, r0, #8
9002393a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002393e:	ea4b 0b00 	orr.w	fp, fp, r0
90023942:	3701      	adds	r7, #1
90023944:	f100 80d7 	bmi.w	90023af6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
90023948:	42be      	cmp	r6, r7
9002394a:	f340 80d4 	ble.w	90023af6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9002394e:	2900      	cmp	r1, #0
90023950:	f000 80d4 	beq.w	90023afc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
90023954:	3601      	adds	r6, #1
90023956:	9801      	ldr	r0, [sp, #4]
90023958:	f819 7006 	ldrb.w	r7, [r9, r6]
9002395c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90023960:	ea4f 09e7 	mov.w	r9, r7, asr #3
90023964:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90023968:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002396c:	fb09 f906 	mul.w	r9, r9, r6
90023970:	fb07 f800 	mul.w	r8, r7, r0
90023974:	f64f 001f 	movw	r0, #63519	; 0xf81f
90023978:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9002397c:	f609 0901 	addw	r9, r9, #2049	; 0x801
90023980:	44d1      	add	r9, sl
90023982:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90023986:	f108 0020 	add.w	r0, r8, #32
9002398a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9002398e:	0a00      	lsrs	r0, r0, #8
90023990:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023994:	4330      	orrs	r0, r6
90023996:	b28e      	uxth	r6, r1
90023998:	fa1f f98e 	uxth.w	r9, lr
9002399c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
900239a0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
900239a4:	fb06 f809 	mul.w	r8, r6, r9
900239a8:	0136      	lsls	r6, r6, #4
900239aa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900239ae:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
900239b2:	9601      	str	r6, [sp, #4]
900239b4:	ea4a 0404 	orr.w	r4, sl, r4
900239b8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
900239bc:	fa1f f689 	uxth.w	r6, r9
900239c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900239c4:	fb11 f90e 	smulbb	r9, r1, lr
900239c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900239cc:	9602      	str	r6, [sp, #8]
900239ce:	4626      	mov	r6, r4
900239d0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
900239d4:	f1ce 0410 	rsb	r4, lr, #16
900239d8:	ea4a 0202 	orr.w	r2, sl, r2
900239dc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
900239e0:	1a64      	subs	r4, r4, r1
900239e2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
900239e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900239ea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900239ee:	434a      	muls	r2, r1
900239f0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
900239f4:	ea4a 0000 	orr.w	r0, sl, r0
900239f8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
900239fc:	fb04 2406 	mla	r4, r4, r6, r2
90023a00:	9903      	ldr	r1, [sp, #12]
90023a02:	fb09 4200 	mla	r2, r9, r0, r4
90023a06:	ea4f 440b 	mov.w	r4, fp, lsl #16
90023a0a:	9801      	ldr	r0, [sp, #4]
90023a0c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90023a10:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90023a14:	8809      	ldrh	r1, [r1, #0]
90023a16:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
90023a1a:	ea44 0b0b 	orr.w	fp, r4, fp
90023a1e:	9c02      	ldr	r4, [sp, #8]
90023a20:	1b00      	subs	r0, r0, r4
90023a22:	9c01      	ldr	r4, [sp, #4]
90023a24:	fb0e 2e0b 	mla	lr, lr, fp, r2
90023a28:	eba4 0608 	sub.w	r6, r4, r8
90023a2c:	b280      	uxth	r0, r0
90023a2e:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023a32:	b2b6      	uxth	r6, r6
90023a34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023a38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023a3c:	4373      	muls	r3, r6
90023a3e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023a42:	fb0c 3300 	mla	r3, ip, r0, r3
90023a46:	9802      	ldr	r0, [sp, #8]
90023a48:	ea42 0e0e 	orr.w	lr, r2, lr
90023a4c:	fb00 3505 	mla	r5, r0, r5, r3
90023a50:	120b      	asrs	r3, r1, #8
90023a52:	10c8      	asrs	r0, r1, #3
90023a54:	fb08 5707 	mla	r7, r8, r7, r5
90023a58:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90023a5c:	00c9      	lsls	r1, r1, #3
90023a5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023a62:	ea6f 2727 	mvn.w	r7, r7, asr #8
90023a66:	fa1f f28e 	uxth.w	r2, lr
90023a6a:	b2c9      	uxtb	r1, r1
90023a6c:	b2ff      	uxtb	r7, r7
90023a6e:	437b      	muls	r3, r7
90023a70:	4378      	muls	r0, r7
90023a72:	434f      	muls	r7, r1
90023a74:	1c59      	adds	r1, r3, #1
90023a76:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90023a7a:	1213      	asrs	r3, r2, #8
90023a7c:	f023 0307 	bic.w	r3, r3, #7
90023a80:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90023a84:	1c41      	adds	r1, r0, #1
90023a86:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90023a8a:	10d1      	asrs	r1, r2, #3
90023a8c:	021b      	lsls	r3, r3, #8
90023a8e:	f021 0103 	bic.w	r1, r1, #3
90023a92:	00d2      	lsls	r2, r2, #3
90023a94:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90023a98:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023a9c:	00c9      	lsls	r1, r1, #3
90023a9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023aa2:	430b      	orrs	r3, r1
90023aa4:	1c79      	adds	r1, r7, #1
90023aa6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
90023aaa:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90023aae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023ab2:	431a      	orrs	r2, r3
90023ab4:	9b03      	ldr	r3, [sp, #12]
90023ab6:	801a      	strh	r2, [r3, #0]
90023ab8:	b005      	add	sp, #20
90023aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023abe:	f04f 0c00 	mov.w	ip, #0
90023ac2:	4664      	mov	r4, ip
90023ac4:	e6e5      	b.n	90023892 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
90023ac6:	2300      	movs	r3, #0
90023ac8:	469c      	mov	ip, r3
90023aca:	461a      	mov	r2, r3
90023acc:	461c      	mov	r4, r3
90023ace:	e707      	b.n	900238e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023ad0:	2300      	movs	r3, #0
90023ad2:	461a      	mov	r2, r3
90023ad4:	e704      	b.n	900238e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023ad6:	460b      	mov	r3, r1
90023ad8:	460a      	mov	r2, r1
90023ada:	e701      	b.n	900238e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023adc:	2500      	movs	r5, #0
90023ade:	46ab      	mov	fp, r5
90023ae0:	e72f      	b.n	90023942 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
90023ae2:	2700      	movs	r7, #0
90023ae4:	463d      	mov	r5, r7
90023ae6:	4638      	mov	r0, r7
90023ae8:	46bb      	mov	fp, r7
90023aea:	e754      	b.n	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023aec:	4677      	mov	r7, lr
90023aee:	4675      	mov	r5, lr
90023af0:	4670      	mov	r0, lr
90023af2:	46f3      	mov	fp, lr
90023af4:	e74f      	b.n	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023af6:	2700      	movs	r7, #0
90023af8:	4638      	mov	r0, r7
90023afa:	e74c      	b.n	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023afc:	460f      	mov	r7, r1
90023afe:	4608      	mov	r0, r1
90023b00:	e749      	b.n	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

90023b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023b08:	b093      	sub	sp, #76	; 0x4c
90023b0a:	9210      	str	r2, [sp, #64]	; 0x40
90023b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
90023b0e:	9011      	str	r0, [sp, #68]	; 0x44
90023b10:	910e      	str	r1, [sp, #56]	; 0x38
90023b12:	6850      	ldr	r0, [r2, #4]
90023b14:	9306      	str	r3, [sp, #24]
90023b16:	6812      	ldr	r2, [r2, #0]
90023b18:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
90023b1c:	fb00 1303 	mla	r3, r0, r3, r1
90023b20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023b24:	9307      	str	r3, [sp, #28]
90023b26:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023b28:	681b      	ldr	r3, [r3, #0]
90023b2a:	9308      	str	r3, [sp, #32]
90023b2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023b2e:	685b      	ldr	r3, [r3, #4]
90023b30:	9309      	str	r3, [sp, #36]	; 0x24
90023b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023b34:	2b00      	cmp	r3, #0
90023b36:	dc03      	bgt.n	90023b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90023b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
90023b3a:	2b00      	cmp	r3, #0
90023b3c:	f340 83b6 	ble.w	900242ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023b42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023b46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90023b4a:	1e48      	subs	r0, r1, #1
90023b4c:	1e55      	subs	r5, r2, #1
90023b4e:	9b06      	ldr	r3, [sp, #24]
90023b50:	2b00      	cmp	r3, #0
90023b52:	f340 8165 	ble.w	90023e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90023b56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
90023b58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023b5a:	1436      	asrs	r6, r6, #16
90023b5c:	ea4f 4323 	mov.w	r3, r3, asr #16
90023b60:	d406      	bmi.n	90023b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023b62:	4286      	cmp	r6, r0
90023b64:	da04      	bge.n	90023b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023b66:	2b00      	cmp	r3, #0
90023b68:	db02      	blt.n	90023b70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023b6a:	42ab      	cmp	r3, r5
90023b6c:	f2c0 8159 	blt.w	90023e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90023b70:	3601      	adds	r6, #1
90023b72:	f100 8146 	bmi.w	90023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023b76:	42b1      	cmp	r1, r6
90023b78:	f2c0 8143 	blt.w	90023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023b7c:	3301      	adds	r3, #1
90023b7e:	f100 8140 	bmi.w	90023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023b82:	429a      	cmp	r2, r3
90023b84:	f2c0 813d 	blt.w	90023e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023b88:	9b06      	ldr	r3, [sp, #24]
90023b8a:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023b8e:	9f07      	ldr	r7, [sp, #28]
90023b90:	930f      	str	r3, [sp, #60]	; 0x3c
90023b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023b94:	2b00      	cmp	r3, #0
90023b96:	f340 8166 	ble.w	90023e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90023b9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023b9c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023b9e:	1418      	asrs	r0, r3, #16
90023ba0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023ba2:	142d      	asrs	r5, r5, #16
90023ba4:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023ba8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023baa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90023bae:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023bb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023bb4:	f100 81f0 	bmi.w	90023f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023bb8:	f102 3eff 	add.w	lr, r2, #4294967295
90023bbc:	4575      	cmp	r5, lr
90023bbe:	f280 81eb 	bge.w	90023f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023bc2:	2800      	cmp	r0, #0
90023bc4:	f2c0 81e8 	blt.w	90023f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023bc8:	f103 3eff 	add.w	lr, r3, #4294967295
90023bcc:	4570      	cmp	r0, lr
90023bce:	f280 81e3 	bge.w	90023f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023bd2:	b212      	sxth	r2, r2
90023bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023bd6:	fa1f fe81 	uxth.w	lr, r1
90023bda:	fb00 5002 	mla	r0, r0, r2, r5
90023bde:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023be2:	eb03 0a00 	add.w	sl, r3, r0
90023be6:	f813 9000 	ldrb.w	r9, [r3, r0]
90023bea:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023bee:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023bf2:	b29b      	uxth	r3, r3
90023bf4:	f1bc 0f00 	cmp.w	ip, #0
90023bf8:	f000 817b 	beq.w	90023ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90023bfc:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023c00:	eb0a 0b02 	add.w	fp, sl, r2
90023c04:	fa1f fa8c 	uxth.w	sl, ip
90023c08:	940a      	str	r4, [sp, #40]	; 0x28
90023c0a:	fb0a fe0e 	mul.w	lr, sl, lr
90023c0e:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023c12:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90023c16:	eba5 050e 	sub.w	r5, r5, lr
90023c1a:	940b      	str	r4, [sp, #44]	; 0x2c
90023c1c:	fa1f fa8a 	uxth.w	sl, sl
90023c20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023c22:	b2ad      	uxth	r5, r5
90023c24:	eba3 030a 	sub.w	r3, r3, sl
90023c28:	fb08 f505 	mul.w	r5, r8, r5
90023c2c:	b29b      	uxth	r3, r3
90023c2e:	fb09 5303 	mla	r3, r9, r3, r5
90023c32:	fb0a 3304 	mla	r3, sl, r4, r3
90023c36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023c38:	fb0e 3304 	mla	r3, lr, r4, r3
90023c3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023c40:	2b00      	cmp	r3, #0
90023c42:	f000 80d1 	beq.w	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023c46:	9c08      	ldr	r4, [sp, #32]
90023c48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023c4c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023c50:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023c54:	f000 8152 	beq.w	90023efc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90023c58:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023c5c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023c60:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023c64:	fb0a fe0e 	mul.w	lr, sl, lr
90023c68:	fb09 f000 	mul.w	r0, r9, r0
90023c6c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023c70:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023c74:	f100 0b20 	add.w	fp, r0, #32
90023c78:	44ce      	add	lr, r9
90023c7a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023c7e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023c82:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023c86:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023c8a:	ea4e 0909 	orr.w	r9, lr, r9
90023c8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023c92:	8868      	ldrh	r0, [r5, #2]
90023c94:	d019      	beq.n	90023cca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90023c96:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023c9a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023c9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023ca2:	fb0a fe0e 	mul.w	lr, sl, lr
90023ca6:	fb08 f800 	mul.w	r8, r8, r0
90023caa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023cae:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023cb2:	f108 0b20 	add.w	fp, r8, #32
90023cb6:	4486      	add	lr, r0
90023cb8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023cbc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023cc0:	0a00      	lsrs	r0, r0, #8
90023cc2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023cc6:	ea4e 0000 	orr.w	r0, lr, r0
90023cca:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023cce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023cd2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023cd6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023cda:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023cde:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023ce2:	ea4e 0909 	orr.w	r9, lr, r9
90023ce6:	ea4a 0000 	orr.w	r0, sl, r0
90023cea:	f1bc 0f00 	cmp.w	ip, #0
90023cee:	f000 8107 	beq.w	90023f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023cf2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90023cf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023cf8:	3a01      	subs	r2, #1
90023cfa:	2cff      	cmp	r4, #255	; 0xff
90023cfc:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023d00:	f102 0202 	add.w	r2, r2, #2
90023d04:	eb05 0e02 	add.w	lr, r5, r2
90023d08:	5aaa      	ldrh	r2, [r5, r2]
90023d0a:	d018      	beq.n	90023d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
90023d0c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90023d10:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023d14:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023d18:	fb04 fa02 	mul.w	sl, r4, r2
90023d1c:	fb08 f805 	mul.w	r8, r8, r5
90023d20:	f10a 0520 	add.w	r5, sl, #32
90023d24:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90023d28:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023d2c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023d30:	4442      	add	r2, r8
90023d32:	0a2d      	lsrs	r5, r5, #8
90023d34:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90023d38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023d3c:	432a      	orrs	r2, r5
90023d3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023d40:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023d44:	2cff      	cmp	r4, #255	; 0xff
90023d46:	d01a      	beq.n	90023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90023d48:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90023d4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023d50:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023d54:	fb04 fa05 	mul.w	sl, r4, r5
90023d58:	fb08 f80e 	mul.w	r8, r8, lr
90023d5c:	f10a 0e20 	add.w	lr, sl, #32
90023d60:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023d64:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023d68:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90023d6c:	4445      	add	r5, r8
90023d6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023d72:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90023d76:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90023d7a:	ea45 050e 	orr.w	r5, r5, lr
90023d7e:	fb1c fe01 	smulbb	lr, ip, r1
90023d82:	f1cc 0810 	rsb	r8, ip, #16
90023d86:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90023d8a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023d8e:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023d92:	eba8 0801 	sub.w	r8, r8, r1
90023d96:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90023d9a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023d9e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023da2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023da6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90023daa:	ea4a 0202 	orr.w	r2, sl, r2
90023dae:	4341      	muls	r1, r0
90023db0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023db4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023db8:	fb09 1108 	mla	r1, r9, r8, r1
90023dbc:	ea4b 0505 	orr.w	r5, fp, r5
90023dc0:	fb0c 1102 	mla	r1, ip, r2, r1
90023dc4:	fb0e 1e05 	mla	lr, lr, r5, r1
90023dc8:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023dcc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023dd0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023dd4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023dd8:	ea42 0e0e 	orr.w	lr, r2, lr
90023ddc:	fa1f f28e 	uxth.w	r2, lr
90023de0:	2bff      	cmp	r3, #255	; 0xff
90023de2:	f040 80a1 	bne.w	90023f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
90023de6:	803a      	strh	r2, [r7, #0]
90023de8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023dea:	3702      	adds	r7, #2
90023dec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
90023dee:	4413      	add	r3, r2
90023df0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023df2:	931d      	str	r3, [sp, #116]	; 0x74
90023df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023df6:	441a      	add	r2, r3
90023df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023dfa:	3b01      	subs	r3, #1
90023dfc:	921e      	str	r2, [sp, #120]	; 0x78
90023dfe:	930f      	str	r3, [sp, #60]	; 0x3c
90023e00:	e6c7      	b.n	90023b92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90023e02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023e04:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90023e06:	9c1e      	ldr	r4, [sp, #120]	; 0x78
90023e08:	4433      	add	r3, r6
90023e0a:	931d      	str	r3, [sp, #116]	; 0x74
90023e0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023e0e:	441c      	add	r4, r3
90023e10:	9b06      	ldr	r3, [sp, #24]
90023e12:	3b01      	subs	r3, #1
90023e14:	941e      	str	r4, [sp, #120]	; 0x78
90023e16:	9306      	str	r3, [sp, #24]
90023e18:	9b07      	ldr	r3, [sp, #28]
90023e1a:	3302      	adds	r3, #2
90023e1c:	9307      	str	r3, [sp, #28]
90023e1e:	e696      	b.n	90023b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90023e20:	d028      	beq.n	90023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023e22:	9b06      	ldr	r3, [sp, #24]
90023e24:	981f      	ldr	r0, [sp, #124]	; 0x7c
90023e26:	3b01      	subs	r3, #1
90023e28:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023e2a:	fb00 5003 	mla	r0, r0, r3, r5
90023e2e:	1400      	asrs	r0, r0, #16
90023e30:	f53f aeaa 	bmi.w	90023b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023e34:	3901      	subs	r1, #1
90023e36:	4288      	cmp	r0, r1
90023e38:	f6bf aea6 	bge.w	90023b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023e3c:	9920      	ldr	r1, [sp, #128]	; 0x80
90023e3e:	981e      	ldr	r0, [sp, #120]	; 0x78
90023e40:	fb01 0303 	mla	r3, r1, r3, r0
90023e44:	141b      	asrs	r3, r3, #16
90023e46:	f53f ae9f 	bmi.w	90023b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023e4a:	3a01      	subs	r2, #1
90023e4c:	4293      	cmp	r3, r2
90023e4e:	f6bf ae9b 	bge.w	90023b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023e52:	9b06      	ldr	r3, [sp, #24]
90023e54:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023e58:	f8dd e01c 	ldr.w	lr, [sp, #28]
90023e5c:	930f      	str	r3, [sp, #60]	; 0x3c
90023e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023e60:	2b00      	cmp	r3, #0
90023e62:	f300 80b6 	bgt.w	90023fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
90023e66:	9b06      	ldr	r3, [sp, #24]
90023e68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023e6c:	9b07      	ldr	r3, [sp, #28]
90023e6e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023e72:	9307      	str	r3, [sp, #28]
90023e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023e76:	2b00      	cmp	r3, #0
90023e78:	f340 8218 	ble.w	900242ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023e80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023e82:	ee30 0a04 	vadd.f32	s0, s0, s8
90023e86:	ee70 0aa4 	vadd.f32	s1, s1, s9
90023e8a:	eef0 6a62 	vmov.f32	s13, s5
90023e8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023e92:	ee31 1a05 	vadd.f32	s2, s2, s10
90023e96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023e9a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
90023e9e:	eef0 6a43 	vmov.f32	s13, s6
90023ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023ea6:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
90023eaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023eae:	ee61 7a27 	vmul.f32	s15, s2, s15
90023eb2:	ee77 2a62 	vsub.f32	s5, s14, s5
90023eb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
90023eba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023ebe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023ec2:	ee12 2a90 	vmov	r2, s5
90023ec6:	eef0 2a47 	vmov.f32	s5, s14
90023eca:	fb92 f3f3 	sdiv	r3, r2, r3
90023ece:	ee13 2a10 	vmov	r2, s6
90023ed2:	931f      	str	r3, [sp, #124]	; 0x7c
90023ed4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023ed6:	eeb0 3a67 	vmov.f32	s6, s15
90023eda:	fb92 f3f3 	sdiv	r3, r2, r3
90023ede:	9320      	str	r3, [sp, #128]	; 0x80
90023ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023ee2:	9a10      	ldr	r2, [sp, #64]	; 0x40
90023ee4:	3b01      	subs	r3, #1
90023ee6:	930e      	str	r3, [sp, #56]	; 0x38
90023ee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023eea:	bf08      	it	eq
90023eec:	4613      	moveq	r3, r2
90023eee:	9306      	str	r3, [sp, #24]
90023ef0:	e61f      	b.n	90023b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90023ef2:	fb08 f505 	mul.w	r5, r8, r5
90023ef6:	fb09 5303 	mla	r3, r9, r3, r5
90023efa:	e69f      	b.n	90023c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
90023efc:	4681      	mov	r9, r0
90023efe:	e6c6      	b.n	90023c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
90023f00:	f1c1 0210 	rsb	r2, r1, #16
90023f04:	4341      	muls	r1, r0
90023f06:	fb09 1902 	mla	r9, r9, r2, r1
90023f0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023f0e:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023f12:	ea4f 1959 	mov.w	r9, r9, lsr #5
90023f16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023f1a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023f1e:	ea42 0909 	orr.w	r9, r2, r9
90023f22:	fa1f f289 	uxth.w	r2, r9
90023f26:	e75b      	b.n	90023de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
90023f28:	f8b7 c000 	ldrh.w	ip, [r7]
90023f2c:	43db      	mvns	r3, r3
90023f2e:	ea4f 202c 	mov.w	r0, ip, asr #8
90023f32:	fa5f fe83 	uxtb.w	lr, r3
90023f36:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023f3a:	ea4f 05ec 	mov.w	r5, ip, asr #3
90023f3e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
90023f42:	fb00 f00e 	mul.w	r0, r0, lr
90023f46:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023f4a:	b2db      	uxtb	r3, r3
90023f4c:	1c41      	adds	r1, r0, #1
90023f4e:	fb05 f50e 	mul.w	r5, r5, lr
90023f52:	fb03 f30e 	mul.w	r3, r3, lr
90023f56:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90023f5a:	1211      	asrs	r1, r2, #8
90023f5c:	f021 0107 	bic.w	r1, r1, #7
90023f60:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023f64:	48d3      	ldr	r0, [pc, #844]	; (900242b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023f66:	b2c9      	uxtb	r1, r1
90023f68:	ea00 2001 	and.w	r0, r0, r1, lsl #8
90023f6c:	1c69      	adds	r1, r5, #1
90023f6e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90023f72:	10d1      	asrs	r1, r2, #3
90023f74:	00d2      	lsls	r2, r2, #3
90023f76:	f021 0103 	bic.w	r1, r1, #3
90023f7a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90023f7e:	00c9      	lsls	r1, r1, #3
90023f80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023f84:	4301      	orrs	r1, r0
90023f86:	1c58      	adds	r0, r3, #1
90023f88:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90023f8c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90023f90:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023f94:	430a      	orrs	r2, r1
90023f96:	e726      	b.n	90023de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
90023f98:	f115 0e01 	adds.w	lr, r5, #1
90023f9c:	f53f af24 	bmi.w	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023fa0:	4572      	cmp	r2, lr
90023fa2:	f6ff af21 	blt.w	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023fa6:	f110 0e01 	adds.w	lr, r0, #1
90023faa:	f53f af1d 	bmi.w	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023fae:	4573      	cmp	r3, lr
90023fb0:	f6ff af1a 	blt.w	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023fb4:	b21b      	sxth	r3, r3
90023fb6:	b212      	sxth	r2, r2
90023fb8:	9301      	str	r3, [sp, #4]
90023fba:	9200      	str	r2, [sp, #0]
90023fbc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90023fc0:	e9cd 5002 	strd	r5, r0, [sp, #8]
90023fc4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90023fc8:	4639      	mov	r1, r7
90023fca:	9811      	ldr	r0, [sp, #68]	; 0x44
90023fcc:	f7ff fc22 	bl	90023814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90023fd0:	e70a      	b.n	90023de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023fd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023fd4:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023fd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023fda:	f3c3 3503 	ubfx	r5, r3, #12, #4
90023fde:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023fe0:	fa1f fc82 	uxth.w	ip, r2
90023fe4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023fe8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023fea:	ea4f 100c 	mov.w	r0, ip, lsl #4
90023fee:	141f      	asrs	r7, r3, #16
90023ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023ff2:	141b      	asrs	r3, r3, #16
90023ff4:	fb01 3707 	mla	r7, r1, r7, r3
90023ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023ffa:	eb03 0a07 	add.w	sl, r3, r7
90023ffe:	f813 9007 	ldrb.w	r9, [r3, r7]
90024002:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024006:	f89a 8001 	ldrb.w	r8, [sl, #1]
9002400a:	b29b      	uxth	r3, r3
9002400c:	2d00      	cmp	r5, #0
9002400e:	f000 80fe 	beq.w	9002420e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
90024012:	f81a 4001 	ldrb.w	r4, [sl, r1]
90024016:	eb0a 0b01 	add.w	fp, sl, r1
9002401a:	fa1f fa85 	uxth.w	sl, r5
9002401e:	940c      	str	r4, [sp, #48]	; 0x30
90024020:	fb0a fc0c 	mul.w	ip, sl, ip
90024024:	f89b 4001 	ldrb.w	r4, [fp, #1]
90024028:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9002402c:	eba0 000c 	sub.w	r0, r0, ip
90024030:	940d      	str	r4, [sp, #52]	; 0x34
90024032:	fa1f fa8a 	uxth.w	sl, sl
90024036:	b280      	uxth	r0, r0
90024038:	eba3 030a 	sub.w	r3, r3, sl
9002403c:	fb08 f000 	mul.w	r0, r8, r0
90024040:	b29b      	uxth	r3, r3
90024042:	fb09 0303 	mla	r3, r9, r3, r0
90024046:	980c      	ldr	r0, [sp, #48]	; 0x30
90024048:	fb0a 3300 	mla	r3, sl, r0, r3
9002404c:	fb0c 3304 	mla	r3, ip, r4, r3
90024050:	f3c3 2307 	ubfx	r3, r3, #8, #8
90024054:	2b00      	cmp	r3, #0
90024056:	f000 80cc 	beq.w	900241f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9002405a:	9808      	ldr	r0, [sp, #32]
9002405c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90024060:	9c08      	ldr	r4, [sp, #32]
90024062:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90024066:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9002406a:	f000 80d5 	beq.w	90024218 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9002406e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90024072:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90024076:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002407a:	fb0a fc0c 	mul.w	ip, sl, ip
9002407e:	fb09 f707 	mul.w	r7, r9, r7
90024082:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90024086:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9002408a:	f107 0b20 	add.w	fp, r7, #32
9002408e:	44cc      	add	ip, r9
90024090:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90024094:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90024098:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002409c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900240a0:	ea4c 0909 	orr.w	r9, ip, r9
900240a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900240a8:	8847      	ldrh	r7, [r0, #2]
900240aa:	d019      	beq.n	900240e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
900240ac:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
900240b0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
900240b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900240b8:	fb0a fc0c 	mul.w	ip, sl, ip
900240bc:	fb08 f807 	mul.w	r8, r8, r7
900240c0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
900240c4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
900240c8:	f108 0b20 	add.w	fp, r8, #32
900240cc:	44bc      	add	ip, r7
900240ce:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
900240d2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
900240d6:	0a3f      	lsrs	r7, r7, #8
900240d8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900240dc:	ea4c 0707 	orr.w	r7, ip, r7
900240e0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
900240e4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900240e8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
900240ec:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900240f0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900240f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900240f8:	ea4c 0909 	orr.w	r9, ip, r9
900240fc:	ea4a 0707 	orr.w	r7, sl, r7
90024100:	2d00      	cmp	r5, #0
90024102:	f000 808b 	beq.w	9002421c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
90024106:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9002410a:	3901      	subs	r1, #1
9002410c:	0049      	lsls	r1, r1, #1
9002410e:	3102      	adds	r1, #2
90024110:	eb00 0c01 	add.w	ip, r0, r1
90024114:	5a41      	ldrh	r1, [r0, r1]
90024116:	980c      	ldr	r0, [sp, #48]	; 0x30
90024118:	28ff      	cmp	r0, #255	; 0xff
9002411a:	d019      	beq.n	90024150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9002411c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90024120:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90024122:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024126:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002412a:	fb04 fa01 	mul.w	sl, r4, r1
9002412e:	fb08 f800 	mul.w	r8, r8, r0
90024132:	f10a 0020 	add.w	r0, sl, #32
90024136:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9002413a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002413e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90024142:	4441      	add	r1, r8
90024144:	0a00      	lsrs	r0, r0, #8
90024146:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9002414a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002414e:	4301      	orrs	r1, r0
90024150:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90024152:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90024156:	2cff      	cmp	r4, #255	; 0xff
90024158:	d01a      	beq.n	90024190 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9002415a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002415e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024162:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024166:	fb04 fa00 	mul.w	sl, r4, r0
9002416a:	fb08 f80c 	mul.w	r8, r8, ip
9002416e:	f10a 0c20 	add.w	ip, sl, #32
90024172:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90024176:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002417a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9002417e:	4440      	add	r0, r8
90024180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024184:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90024188:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9002418c:	ea40 000c 	orr.w	r0, r0, ip
90024190:	fb15 fc02 	smulbb	ip, r5, r2
90024194:	f1c5 0810 	rsb	r8, r5, #16
90024198:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9002419c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900241a0:	ea4f 0cec 	mov.w	ip, ip, asr #3
900241a4:	eba8 0802 	sub.w	r8, r8, r2
900241a8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
900241ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900241b0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
900241b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900241b8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
900241bc:	ea4a 0101 	orr.w	r1, sl, r1
900241c0:	437a      	muls	r2, r7
900241c2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
900241c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900241ca:	fb09 2208 	mla	r2, r9, r8, r2
900241ce:	ea4b 0000 	orr.w	r0, fp, r0
900241d2:	fb05 2201 	mla	r2, r5, r1, r2
900241d6:	fb0c 2200 	mla	r2, ip, r0, r2
900241da:	0d57      	lsrs	r7, r2, #21
900241dc:	0952      	lsrs	r2, r2, #5
900241de:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900241e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900241e6:	433a      	orrs	r2, r7
900241e8:	2bff      	cmp	r3, #255	; 0xff
900241ea:	b292      	uxth	r2, r2
900241ec:	d127      	bne.n	9002423e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
900241ee:	f8ae 2000 	strh.w	r2, [lr]
900241f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900241f4:	f10e 0e02 	add.w	lr, lr, #2
900241f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
900241fa:	4413      	add	r3, r2
900241fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
900241fe:	931d      	str	r3, [sp, #116]	; 0x74
90024200:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024202:	441a      	add	r2, r3
90024204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90024206:	3b01      	subs	r3, #1
90024208:	921e      	str	r2, [sp, #120]	; 0x78
9002420a:	930f      	str	r3, [sp, #60]	; 0x3c
9002420c:	e627      	b.n	90023e5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9002420e:	fb08 f000 	mul.w	r0, r8, r0
90024212:	fb09 0303 	mla	r3, r9, r3, r0
90024216:	e71b      	b.n	90024050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
90024218:	46b9      	mov	r9, r7
9002421a:	e743      	b.n	900240a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9002421c:	f1c2 0110 	rsb	r1, r2, #16
90024220:	437a      	muls	r2, r7
90024222:	fb09 2901 	mla	r9, r9, r1, r2
90024226:	ea4f 0949 	mov.w	r9, r9, lsl #1
9002422a:	ea4f 5059 	mov.w	r0, r9, lsr #21
9002422e:	ea4f 1259 	mov.w	r2, r9, lsr #5
90024232:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024236:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002423a:	4302      	orrs	r2, r0
9002423c:	e7d4      	b.n	900241e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9002423e:	f8be 7000 	ldrh.w	r7, [lr]
90024242:	43db      	mvns	r3, r3
90024244:	4c1b      	ldr	r4, [pc, #108]	; (900242b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90024246:	1238      	asrs	r0, r7, #8
90024248:	fa5f fc83 	uxtb.w	ip, r3
9002424c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024250:	10fd      	asrs	r5, r7, #3
90024252:	00fb      	lsls	r3, r7, #3
90024254:	fb00 f00c 	mul.w	r0, r0, ip
90024258:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9002425c:	b2db      	uxtb	r3, r3
9002425e:	fb05 f10c 	mul.w	r1, r5, ip
90024262:	1c45      	adds	r5, r0, #1
90024264:	fb03 f30c 	mul.w	r3, r3, ip
90024268:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002426c:	1215      	asrs	r5, r2, #8
9002426e:	f025 0507 	bic.w	r5, r5, #7
90024272:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90024276:	1c4d      	adds	r5, r1, #1
90024278:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9002427c:	10d1      	asrs	r1, r2, #3
9002427e:	b2c0      	uxtb	r0, r0
90024280:	f021 0103 	bic.w	r1, r1, #3
90024284:	00d2      	lsls	r2, r2, #3
90024286:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9002428a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002428e:	00c9      	lsls	r1, r1, #3
90024290:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024294:	4308      	orrs	r0, r1
90024296:	1c59      	adds	r1, r3, #1
90024298:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9002429c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900242a0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
900242a4:	4318      	orrs	r0, r3
900242a6:	f8ae 0000 	strh.w	r0, [lr]
900242aa:	e7a2      	b.n	900241f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
900242ac:	b013      	add	sp, #76	; 0x4c
900242ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900242b2:	bf00      	nop
900242b4:	fffff800 	.word	0xfffff800

900242b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
900242b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900242bc:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
900242c0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
900242c4:	fb05 4c03 	mla	ip, r5, r3, r4
900242c8:	2d00      	cmp	r5, #0
900242ca:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
900242ce:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900242d2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
900242d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
900242da:	8808      	ldrh	r0, [r1, #0]
900242dc:	f2c0 80a7 	blt.w	9002442e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
900242e0:	45aa      	cmp	sl, r5
900242e2:	f340 80a4 	ble.w	9002442e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
900242e6:	2c00      	cmp	r4, #0
900242e8:	f2c0 809f 	blt.w	9002442a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900242ec:	42a3      	cmp	r3, r4
900242ee:	f340 809c 	ble.w	9002442a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900242f2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
900242f6:	1c62      	adds	r2, r4, #1
900242f8:	f100 809c 	bmi.w	90024434 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900242fc:	4293      	cmp	r3, r2
900242fe:	f340 8099 	ble.w	90024434 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
90024302:	f1b9 0f00 	cmp.w	r9, #0
90024306:	f000 8095 	beq.w	90024434 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002430a:	f8be c002 	ldrh.w	ip, [lr, #2]
9002430e:	3501      	adds	r5, #1
90024310:	f100 8094 	bmi.w	9002443c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90024314:	45aa      	cmp	sl, r5
90024316:	f340 8091 	ble.w	9002443c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9002431a:	2f00      	cmp	r7, #0
9002431c:	f000 808e 	beq.w	9002443c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
90024320:	2c00      	cmp	r4, #0
90024322:	f2c0 8089 	blt.w	90024438 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
90024326:	42a3      	cmp	r3, r4
90024328:	f340 8086 	ble.w	90024438 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9002432c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
90024330:	3401      	adds	r4, #1
90024332:	f100 8086 	bmi.w	90024442 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90024336:	42a3      	cmp	r3, r4
90024338:	f340 8083 	ble.w	90024442 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9002433c:	f1b9 0f00 	cmp.w	r9, #0
90024340:	d07f      	beq.n	90024442 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
90024342:	3301      	adds	r3, #1
90024344:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
90024348:	ea4f 4408 	mov.w	r4, r8, lsl #16
9002434c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90024350:	fb19 fe07 	smulbb	lr, r9, r7
90024354:	f1c7 0210 	rsb	r2, r7, #16
90024358:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002435c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90024360:	eba2 0209 	sub.w	r2, r2, r9
90024364:	ea44 0808 	orr.w	r8, r4, r8
90024368:	ea4f 440c 	mov.w	r4, ip, lsl #16
9002436c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024370:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90024374:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90024378:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9002437c:	ea44 0c0c 	orr.w	ip, r4, ip
90024380:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90024384:	fb04 f40c 	mul.w	r4, r4, ip
90024388:	fb02 4808 	mla	r8, r2, r8, r4
9002438c:	041a      	lsls	r2, r3, #16
9002438e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024392:	b2b4      	uxth	r4, r6
90024394:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024398:	43f6      	mvns	r6, r6
9002439a:	4313      	orrs	r3, r2
9002439c:	042a      	lsls	r2, r5, #16
9002439e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
900243a2:	b2f6      	uxtb	r6, r6
900243a4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900243a8:	fb0e 8303 	mla	r3, lr, r3, r8
900243ac:	432a      	orrs	r2, r5
900243ae:	fb07 3202 	mla	r2, r7, r2, r3
900243b2:	10c7      	asrs	r7, r0, #3
900243b4:	0d53      	lsrs	r3, r2, #21
900243b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900243ba:	0952      	lsrs	r2, r2, #5
900243bc:	fb17 f706 	smulbb	r7, r7, r6
900243c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900243c4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900243c8:	431a      	orrs	r2, r3
900243ca:	b293      	uxth	r3, r2
900243cc:	1202      	asrs	r2, r0, #8
900243ce:	121d      	asrs	r5, r3, #8
900243d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900243d4:	00c0      	lsls	r0, r0, #3
900243d6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900243da:	fb12 f206 	smulbb	r2, r2, r6
900243de:	b2c0      	uxtb	r0, r0
900243e0:	fb05 2504 	mla	r5, r5, r4, r2
900243e4:	10da      	asrs	r2, r3, #3
900243e6:	fb10 f006 	smulbb	r0, r0, r6
900243ea:	00db      	lsls	r3, r3, #3
900243ec:	b2ad      	uxth	r5, r5
900243ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900243f2:	b2db      	uxtb	r3, r3
900243f4:	fb02 7204 	mla	r2, r2, r4, r7
900243f8:	fb03 0004 	mla	r0, r3, r4, r0
900243fc:	1c6b      	adds	r3, r5, #1
900243fe:	b292      	uxth	r2, r2
90024400:	b280      	uxth	r0, r0
90024402:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024406:	1c43      	adds	r3, r0, #1
90024408:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002440c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90024410:	1c50      	adds	r0, r2, #1
90024412:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90024416:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002441a:	0952      	lsrs	r2, r2, #5
9002441c:	432b      	orrs	r3, r5
9002441e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024422:	4313      	orrs	r3, r2
90024424:	800b      	strh	r3, [r1, #0]
90024426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002442a:	4680      	mov	r8, r0
9002442c:	e763      	b.n	900242f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
9002442e:	4684      	mov	ip, r0
90024430:	4680      	mov	r8, r0
90024432:	e76c      	b.n	9002430e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90024434:	4684      	mov	ip, r0
90024436:	e76a      	b.n	9002430e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
90024438:	4605      	mov	r5, r0
9002443a:	e779      	b.n	90024330 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
9002443c:	4603      	mov	r3, r0
9002443e:	4605      	mov	r5, r0
90024440:	e782      	b.n	90024348 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
90024442:	4603      	mov	r3, r0
90024444:	e780      	b.n	90024348 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

90024446 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002444a:	b093      	sub	sp, #76	; 0x4c
9002444c:	461d      	mov	r5, r3
9002444e:	9210      	str	r2, [sp, #64]	; 0x40
90024450:	9b21      	ldr	r3, [sp, #132]	; 0x84
90024452:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
90024456:	910a      	str	r1, [sp, #40]	; 0x28
90024458:	920b      	str	r2, [sp, #44]	; 0x2c
9002445a:	6859      	ldr	r1, [r3, #4]
9002445c:	681b      	ldr	r3, [r3, #0]
9002445e:	9011      	str	r0, [sp, #68]	; 0x44
90024460:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90024464:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90024468:	fb01 2707 	mla	r7, r1, r7, r2
9002446c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90024470:	9307      	str	r3, [sp, #28]
90024472:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024474:	681b      	ldr	r3, [r3, #0]
90024476:	9309      	str	r3, [sp, #36]	; 0x24
90024478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002447a:	43db      	mvns	r3, r3
9002447c:	b2db      	uxtb	r3, r3
9002447e:	9308      	str	r3, [sp, #32]
90024480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024482:	2b00      	cmp	r3, #0
90024484:	dc03      	bgt.n	9002448e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90024486:	9b10      	ldr	r3, [sp, #64]	; 0x40
90024488:	2b00      	cmp	r3, #0
9002448a:	f340 8205 	ble.w	90024898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002448e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024490:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024494:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024498:	1e48      	subs	r0, r1, #1
9002449a:	f102 3cff 	add.w	ip, r2, #4294967295
9002449e:	2d00      	cmp	r5, #0
900244a0:	f340 80da 	ble.w	90024658 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900244a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
900244a8:	ea4f 4326 	mov.w	r3, r6, asr #16
900244ac:	d406      	bmi.n	900244bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900244ae:	4586      	cmp	lr, r0
900244b0:	da04      	bge.n	900244bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900244b2:	2b00      	cmp	r3, #0
900244b4:	db02      	blt.n	900244bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900244b6:	4563      	cmp	r3, ip
900244b8:	f2c0 80cf 	blt.w	9002465a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
900244bc:	f11e 0e01 	adds.w	lr, lr, #1
900244c0:	f100 80c1 	bmi.w	90024646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900244c4:	4571      	cmp	r1, lr
900244c6:	f2c0 80be 	blt.w	90024646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900244ca:	3301      	adds	r3, #1
900244cc:	f100 80bb 	bmi.w	90024646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900244d0:	429a      	cmp	r2, r3
900244d2:	f2c0 80b8 	blt.w	90024646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
900244d6:	46a9      	mov	r9, r5
900244d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
900244dc:	f1b9 0f00 	cmp.w	r9, #0
900244e0:	f340 80d8 	ble.w	90024694 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
900244e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900244e6:	1421      	asrs	r1, r4, #16
900244e8:	ea4f 4026 	mov.w	r0, r6, asr #16
900244ec:	f3c4 3203 	ubfx	r2, r4, #12, #4
900244f0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
900244f4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900244f8:	f100 8112 	bmi.w	90024720 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900244fc:	f10e 3aff 	add.w	sl, lr, #4294967295
90024500:	4551      	cmp	r1, sl
90024502:	f280 810d 	bge.w	90024720 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90024506:	2800      	cmp	r0, #0
90024508:	f2c0 810a 	blt.w	90024720 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002450c:	f103 3aff 	add.w	sl, r3, #4294967295
90024510:	4550      	cmp	r0, sl
90024512:	f280 8105 	bge.w	90024720 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90024516:	fa0f f38e 	sxth.w	r3, lr
9002451a:	fb00 1103 	mla	r1, r0, r3, r1
9002451e:	9809      	ldr	r0, [sp, #36]	; 0x24
90024520:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90024524:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90024528:	f8ba 1002 	ldrh.w	r1, [sl, #2]
9002452c:	f1bc 0f00 	cmp.w	ip, #0
90024530:	d007      	beq.n	90024542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90024532:	005b      	lsls	r3, r3, #1
90024534:	eb0a 0003 	add.w	r0, sl, r3
90024538:	f83a 3003 	ldrh.w	r3, [sl, r3]
9002453c:	930c      	str	r3, [sp, #48]	; 0x30
9002453e:	8843      	ldrh	r3, [r0, #2]
90024540:	930d      	str	r3, [sp, #52]	; 0x34
90024542:	ea4f 400e 	mov.w	r0, lr, lsl #16
90024546:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002454a:	fb12 f30c 	smulbb	r3, r2, ip
9002454e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90024552:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024556:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002455a:	10db      	asrs	r3, r3, #3
9002455c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024560:	ea40 000e 	orr.w	r0, r0, lr
90024564:	f1cc 0e10 	rsb	lr, ip, #16
90024568:	ea4a 0101 	orr.w	r1, sl, r1
9002456c:	9f08      	ldr	r7, [sp, #32]
9002456e:	ebae 0e02 	sub.w	lr, lr, r2
90024572:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024576:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002457a:	4351      	muls	r1, r2
9002457c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9002457e:	fb0e 1e00 	mla	lr, lr, r0, r1
90024582:	990c      	ldr	r1, [sp, #48]	; 0x30
90024584:	0410      	lsls	r0, r2, #16
90024586:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002458a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002458e:	4310      	orrs	r0, r2
90024590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024592:	0412      	lsls	r2, r2, #16
90024594:	fb03 e000 	mla	r0, r3, r0, lr
90024598:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9002459c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
900245a0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900245a4:	ea42 020e 	orr.w	r2, r2, lr
900245a8:	fb03 0302 	mla	r3, r3, r2, r0
900245ac:	f8b8 0000 	ldrh.w	r0, [r8]
900245b0:	0d5a      	lsrs	r2, r3, #21
900245b2:	095b      	lsrs	r3, r3, #5
900245b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900245b8:	1201      	asrs	r1, r0, #8
900245ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900245be:	ea4f 0ee0 	mov.w	lr, r0, asr #3
900245c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900245c6:	00c0      	lsls	r0, r0, #3
900245c8:	4313      	orrs	r3, r2
900245ca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900245ce:	fb11 f107 	smulbb	r1, r1, r7
900245d2:	b2c0      	uxtb	r0, r0
900245d4:	b29b      	uxth	r3, r3
900245d6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900245da:	fb10 f007 	smulbb	r0, r0, r7
900245de:	fb1e fe07 	smulbb	lr, lr, r7
900245e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
900245e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900245ea:	fb0c 1c02 	mla	ip, ip, r2, r1
900245ee:	10d9      	asrs	r1, r3, #3
900245f0:	00db      	lsls	r3, r3, #3
900245f2:	fa1f fc8c 	uxth.w	ip, ip
900245f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900245fa:	b2db      	uxtb	r3, r3
900245fc:	fb01 e102 	mla	r1, r1, r2, lr
90024600:	fb03 0302 	mla	r3, r3, r2, r0
90024604:	b289      	uxth	r1, r1
90024606:	b29a      	uxth	r2, r3
90024608:	f10c 0301 	add.w	r3, ip, #1
9002460c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90024610:	1c53      	adds	r3, r2, #1
90024612:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024616:	1c4a      	adds	r2, r1, #1
90024618:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9002461c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90024620:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024624:	0949      	lsrs	r1, r1, #5
90024626:	ea43 030c 	orr.w	r3, r3, ip
9002462a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002462e:	430b      	orrs	r3, r1
90024630:	f8a8 3000 	strh.w	r3, [r8]
90024634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024636:	f108 0802 	add.w	r8, r8, #2
9002463a:	f109 39ff 	add.w	r9, r9, #4294967295
9002463e:	441c      	add	r4, r3
90024640:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024642:	441e      	add	r6, r3
90024644:	e74a      	b.n	900244dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90024646:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90024648:	3d01      	subs	r5, #1
9002464a:	441c      	add	r4, r3
9002464c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002464e:	441e      	add	r6, r3
90024650:	9b07      	ldr	r3, [sp, #28]
90024652:	3302      	adds	r3, #2
90024654:	9307      	str	r3, [sp, #28]
90024656:	e722      	b.n	9002449e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90024658:	d022      	beq.n	900246a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9002465a:	1e6b      	subs	r3, r5, #1
9002465c:	981f      	ldr	r0, [sp, #124]	; 0x7c
9002465e:	fb00 4003 	mla	r0, r0, r3, r4
90024662:	1400      	asrs	r0, r0, #16
90024664:	f53f af37 	bmi.w	900244d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024668:	3901      	subs	r1, #1
9002466a:	4288      	cmp	r0, r1
9002466c:	f6bf af33 	bge.w	900244d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024670:	9920      	ldr	r1, [sp, #128]	; 0x80
90024672:	fb01 6303 	mla	r3, r1, r3, r6
90024676:	141b      	asrs	r3, r3, #16
90024678:	f53f af2d 	bmi.w	900244d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002467c:	3a01      	subs	r2, #1
9002467e:	4293      	cmp	r3, r2
90024680:	f6bf af29 	bge.w	900244d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024684:	46a8      	mov	r8, r5
90024686:	f8dd 901c 	ldr.w	r9, [sp, #28]
9002468a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002468e:	f1b8 0f00 	cmp.w	r8, #0
90024692:	dc60      	bgt.n	90024756 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90024694:	9b07      	ldr	r3, [sp, #28]
90024696:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002469a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002469e:	9307      	str	r3, [sp, #28]
900246a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900246a2:	2b00      	cmp	r3, #0
900246a4:	f340 80f8 	ble.w	90024898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900246a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900246ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900246ae:	ee30 0a04 	vadd.f32	s0, s0, s8
900246b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900246b6:	eef0 6a62 	vmov.f32	s13, s5
900246ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
900246be:	ee31 1a05 	vadd.f32	s2, s2, s10
900246c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900246c6:	ee16 4a90 	vmov	r4, s13
900246ca:	eef0 6a43 	vmov.f32	s13, s6
900246ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900246d2:	ee16 6a90 	vmov	r6, s13
900246d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900246da:	ee61 7a27 	vmul.f32	s15, s2, s15
900246de:	ee77 2a62 	vsub.f32	s5, s14, s5
900246e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900246e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900246ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900246ee:	ee12 2a90 	vmov	r2, s5
900246f2:	eef0 2a47 	vmov.f32	s5, s14
900246f6:	fb92 f3f3 	sdiv	r3, r2, r3
900246fa:	ee13 2a10 	vmov	r2, s6
900246fe:	931f      	str	r3, [sp, #124]	; 0x7c
90024700:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024702:	eeb0 3a67 	vmov.f32	s6, s15
90024706:	fb92 f3f3 	sdiv	r3, r2, r3
9002470a:	9320      	str	r3, [sp, #128]	; 0x80
9002470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002470e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024710:	3b01      	subs	r3, #1
90024712:	930a      	str	r3, [sp, #40]	; 0x28
90024714:	bf08      	it	eq
90024716:	4615      	moveq	r5, r2
90024718:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002471a:	bf18      	it	ne
9002471c:	461d      	movne	r5, r3
9002471e:	e6af      	b.n	90024480 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90024720:	f111 0a01 	adds.w	sl, r1, #1
90024724:	d486      	bmi.n	90024634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024726:	45d6      	cmp	lr, sl
90024728:	db84      	blt.n	90024634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002472a:	f110 0a01 	adds.w	sl, r0, #1
9002472e:	d481      	bmi.n	90024634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024730:	4553      	cmp	r3, sl
90024732:	f6ff af7f 	blt.w	90024634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024736:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90024738:	b21b      	sxth	r3, r3
9002473a:	9101      	str	r1, [sp, #4]
9002473c:	4641      	mov	r1, r8
9002473e:	9300      	str	r3, [sp, #0]
90024740:	fa0f f38e 	sxth.w	r3, lr
90024744:	e9cd 0202 	strd	r0, r2, [sp, #8]
90024748:	e9cd c704 	strd	ip, r7, [sp, #16]
9002474c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002474e:	9811      	ldr	r0, [sp, #68]	; 0x44
90024750:	f7ff fdb2 	bl	900242b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
90024754:	e76e      	b.n	90024634 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90024756:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024758:	1430      	asrs	r0, r6, #16
9002475a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9002475c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024760:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024764:	1423      	asrs	r3, r4, #16
90024766:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002476a:	fb01 3000 	mla	r0, r1, r0, r3
9002476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024770:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90024774:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90024778:	8858      	ldrh	r0, [r3, #2]
9002477a:	f1be 0f00 	cmp.w	lr, #0
9002477e:	d00b      	beq.n	90024798 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90024780:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90024784:	3901      	subs	r1, #1
90024786:	0049      	lsls	r1, r1, #1
90024788:	3102      	adds	r1, #2
9002478a:	eb03 0b01 	add.w	fp, r3, r1
9002478e:	5a5b      	ldrh	r3, [r3, r1]
90024790:	930e      	str	r3, [sp, #56]	; 0x38
90024792:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024796:	930f      	str	r3, [sp, #60]	; 0x3c
90024798:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002479c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900247a0:	fb12 f30e 	smulbb	r3, r2, lr
900247a4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
900247a8:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
900247ac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900247b0:	10db      	asrs	r3, r3, #3
900247b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900247b6:	ea41 010c 	orr.w	r1, r1, ip
900247ba:	f1ce 0c10 	rsb	ip, lr, #16
900247be:	ea4b 0000 	orr.w	r0, fp, r0
900247c2:	9f08      	ldr	r7, [sp, #32]
900247c4:	ebac 0c02 	sub.w	ip, ip, r2
900247c8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900247cc:	f108 38ff 	add.w	r8, r8, #4294967295
900247d0:	4350      	muls	r0, r2
900247d2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900247d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900247d8:	fb0c 0c01 	mla	ip, ip, r1, r0
900247dc:	980e      	ldr	r0, [sp, #56]	; 0x38
900247de:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900247e2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
900247e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900247e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900247ec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900247f0:	0412      	lsls	r2, r2, #16
900247f2:	ea4b 0101 	orr.w	r1, fp, r1
900247f6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900247fa:	fb03 c101 	mla	r1, r3, r1, ip
900247fe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024802:	4302      	orrs	r2, r0
90024804:	fb03 1202 	mla	r2, r3, r2, r1
90024808:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9002480c:	0952      	lsrs	r2, r2, #5
9002480e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90024812:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
90024816:	f8b9 2000 	ldrh.w	r2, [r9]
9002481a:	ea4b 0303 	orr.w	r3, fp, r3
9002481e:	1211      	asrs	r1, r2, #8
90024820:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90024824:	b29b      	uxth	r3, r3
90024826:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002482a:	00d2      	lsls	r2, r2, #3
9002482c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90024830:	fb11 f107 	smulbb	r1, r1, r7
90024834:	1218      	asrs	r0, r3, #8
90024836:	fb1c fc07 	smulbb	ip, ip, r7
9002483a:	b2d2      	uxtb	r2, r2
9002483c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024840:	fb12 f207 	smulbb	r2, r2, r7
90024844:	fb00 100a 	mla	r0, r0, sl, r1
90024848:	10d9      	asrs	r1, r3, #3
9002484a:	00db      	lsls	r3, r3, #3
9002484c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90024850:	b280      	uxth	r0, r0
90024852:	b2db      	uxtb	r3, r3
90024854:	fb01 c10a 	mla	r1, r1, sl, ip
90024858:	fb03 230a 	mla	r3, r3, sl, r2
9002485c:	1c42      	adds	r2, r0, #1
9002485e:	b289      	uxth	r1, r1
90024860:	b29b      	uxth	r3, r3
90024862:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90024866:	f101 0c01 	add.w	ip, r1, #1
9002486a:	1c5a      	adds	r2, r3, #1
9002486c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90024870:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90024874:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90024878:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002487a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002487e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90024882:	441c      	add	r4, r3
90024884:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90024888:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002488a:	4310      	orrs	r0, r2
9002488c:	441e      	add	r6, r3
9002488e:	ea40 000c 	orr.w	r0, r0, ip
90024892:	f829 0b02 	strh.w	r0, [r9], #2
90024896:	e6fa      	b.n	9002468e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90024898:	b013      	add	sp, #76	; 0x4c
9002489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002489e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9002489e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900248a2:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
900248a6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
900248aa:	fb0e 4703 	mla	r7, lr, r3, r4
900248ae:	f1be 0f00 	cmp.w	lr, #0
900248b2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
900248b6:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
900248ba:	eb02 0847 	add.w	r8, r2, r7, lsl #1
900248be:	8808      	ldrh	r0, [r1, #0]
900248c0:	db60      	blt.n	90024984 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900248c2:	45f1      	cmp	r9, lr
900248c4:	dd5e      	ble.n	90024984 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
900248c6:	2c00      	cmp	r4, #0
900248c8:	db5a      	blt.n	90024980 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900248ca:	42a3      	cmp	r3, r4
900248cc:	dd58      	ble.n	90024980 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
900248ce:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
900248d2:	1c62      	adds	r2, r4, #1
900248d4:	d459      	bmi.n	9002498a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900248d6:	4293      	cmp	r3, r2
900248d8:	dd57      	ble.n	9002498a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900248da:	2d00      	cmp	r5, #0
900248dc:	d055      	beq.n	9002498a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
900248de:	f8b8 7002 	ldrh.w	r7, [r8, #2]
900248e2:	f11e 0e01 	adds.w	lr, lr, #1
900248e6:	d454      	bmi.n	90024992 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900248e8:	45f1      	cmp	r9, lr
900248ea:	dd52      	ble.n	90024992 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900248ec:	2e00      	cmp	r6, #0
900248ee:	d050      	beq.n	90024992 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
900248f0:	2c00      	cmp	r4, #0
900248f2:	db4c      	blt.n	9002498e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900248f4:	42a3      	cmp	r3, r4
900248f6:	dd4a      	ble.n	9002498e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
900248f8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
900248fc:	3401      	adds	r4, #1
900248fe:	d405      	bmi.n	9002490c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024900:	42a3      	cmp	r3, r4
90024902:	dd03      	ble.n	9002490c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024904:	b115      	cbz	r5, 9002490c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90024906:	3301      	adds	r3, #1
90024908:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
9002490c:	fb15 f406 	smulbb	r4, r5, r6
90024910:	ea4f 430c 	mov.w	r3, ip, lsl #16
90024914:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90024918:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9002491c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024920:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90024924:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90024928:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002492c:	ea43 0c0c 	orr.w	ip, r3, ip
90024930:	f1c6 0310 	rsb	r3, r6, #16
90024934:	ea4e 0707 	orr.w	r7, lr, r7
90024938:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9002493c:	1b5b      	subs	r3, r3, r5
9002493e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
90024942:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90024946:	437d      	muls	r5, r7
90024948:	fb03 5c0c 	mla	ip, r3, ip, r5
9002494c:	0403      	lsls	r3, r0, #16
9002494e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024952:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024956:	4318      	orrs	r0, r3
90024958:	0413      	lsls	r3, r2, #16
9002495a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002495e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024962:	fb04 c000 	mla	r0, r4, r0, ip
90024966:	4313      	orrs	r3, r2
90024968:	fb06 0003 	mla	r0, r6, r3, r0
9002496c:	0d43      	lsrs	r3, r0, #21
9002496e:	0940      	lsrs	r0, r0, #5
90024970:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024974:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024978:	4318      	orrs	r0, r3
9002497a:	8008      	strh	r0, [r1, #0]
9002497c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90024980:	4684      	mov	ip, r0
90024982:	e7a6      	b.n	900248d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90024984:	4607      	mov	r7, r0
90024986:	4684      	mov	ip, r0
90024988:	e7ab      	b.n	900248e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002498a:	4607      	mov	r7, r0
9002498c:	e7a9      	b.n	900248e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002498e:	4602      	mov	r2, r0
90024990:	e7b4      	b.n	900248fc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90024992:	4602      	mov	r2, r0
90024994:	e7ba      	b.n	9002490c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90024996 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002499a:	b08f      	sub	sp, #60	; 0x3c
9002499c:	461d      	mov	r5, r3
9002499e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900249a0:	9107      	str	r1, [sp, #28]
900249a2:	920c      	str	r2, [sp, #48]	; 0x30
900249a4:	6859      	ldr	r1, [r3, #4]
900249a6:	681b      	ldr	r3, [r3, #0]
900249a8:	900d      	str	r0, [sp, #52]	; 0x34
900249aa:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
900249ae:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
900249b2:	fb01 2707 	mla	r7, r1, r7, r2
900249b6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
900249ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
900249bc:	f8d3 8000 	ldr.w	r8, [r3]
900249c0:	9b07      	ldr	r3, [sp, #28]
900249c2:	2b00      	cmp	r3, #0
900249c4:	dc03      	bgt.n	900249ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900249c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900249c8:	2b00      	cmp	r3, #0
900249ca:	f340 8182 	ble.w	90024cd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900249ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
900249d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900249d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900249d8:	1e48      	subs	r0, r1, #1
900249da:	f102 3cff 	add.w	ip, r2, #4294967295
900249de:	2d00      	cmp	r5, #0
900249e0:	f340 809b 	ble.w	90024b1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
900249e4:	ea5f 4e24 	movs.w	lr, r4, asr #16
900249e8:	ea4f 4326 	mov.w	r3, r6, asr #16
900249ec:	d406      	bmi.n	900249fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900249ee:	4586      	cmp	lr, r0
900249f0:	da04      	bge.n	900249fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900249f2:	2b00      	cmp	r3, #0
900249f4:	db02      	blt.n	900249fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900249f6:	4563      	cmp	r3, ip
900249f8:	f2c0 8090 	blt.w	90024b1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900249fc:	f11e 0e01 	adds.w	lr, lr, #1
90024a00:	f100 8084 	bmi.w	90024b0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024a04:	4571      	cmp	r1, lr
90024a06:	f2c0 8081 	blt.w	90024b0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024a0a:	3301      	adds	r3, #1
90024a0c:	d47e      	bmi.n	90024b0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024a0e:	429a      	cmp	r2, r3
90024a10:	db7c      	blt.n	90024b0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90024a12:	46aa      	mov	sl, r5
90024a14:	46b9      	mov	r9, r7
90024a16:	f1ba 0f00 	cmp.w	sl, #0
90024a1a:	f340 8099 	ble.w	90024b50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90024a1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024a20:	1421      	asrs	r1, r4, #16
90024a22:	ea4f 4026 	mov.w	r0, r6, asr #16
90024a26:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024a2a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90024a2e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024a32:	f100 80d1 	bmi.w	90024bd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024a36:	f10e 3bff 	add.w	fp, lr, #4294967295
90024a3a:	4559      	cmp	r1, fp
90024a3c:	f280 80cc 	bge.w	90024bd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024a40:	2800      	cmp	r0, #0
90024a42:	f2c0 80c9 	blt.w	90024bd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024a46:	f103 3bff 	add.w	fp, r3, #4294967295
90024a4a:	4558      	cmp	r0, fp
90024a4c:	f280 80c4 	bge.w	90024bd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90024a50:	fa0f fe8e 	sxth.w	lr, lr
90024a54:	fb00 110e 	mla	r1, r0, lr, r1
90024a58:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024a5c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90024a60:	8841      	ldrh	r1, [r0, #2]
90024a62:	f1bc 0f00 	cmp.w	ip, #0
90024a66:	d00b      	beq.n	90024a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90024a68:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
90024a6c:	3b01      	subs	r3, #1
90024a6e:	005b      	lsls	r3, r3, #1
90024a70:	3302      	adds	r3, #2
90024a72:	eb00 0e03 	add.w	lr, r0, r3
90024a76:	5ac3      	ldrh	r3, [r0, r3]
90024a78:	9308      	str	r3, [sp, #32]
90024a7a:	f8be 3002 	ldrh.w	r3, [lr, #2]
90024a7e:	9309      	str	r3, [sp, #36]	; 0x24
90024a80:	ea4f 400b 	mov.w	r0, fp, lsl #16
90024a84:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90024a88:	fb12 f30c 	smulbb	r3, r2, ip
90024a8c:	f1cc 0e10 	rsb	lr, ip, #16
90024a90:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024a94:	10db      	asrs	r3, r3, #3
90024a96:	ebae 0e02 	sub.w	lr, lr, r2
90024a9a:	ea40 000b 	orr.w	r0, r0, fp
90024a9e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024aa2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024aa6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024aaa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024aae:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90024ab2:	ea4b 0101 	orr.w	r1, fp, r1
90024ab6:	4351      	muls	r1, r2
90024ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
90024aba:	fb0e 1e00 	mla	lr, lr, r0, r1
90024abe:	0410      	lsls	r0, r2, #16
90024ac0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024ac4:	9908      	ldr	r1, [sp, #32]
90024ac6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024aca:	4310      	orrs	r0, r2
90024acc:	9a08      	ldr	r2, [sp, #32]
90024ace:	0412      	lsls	r2, r2, #16
90024ad0:	fb03 e000 	mla	r0, r3, r0, lr
90024ad4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90024ad8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90024adc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024ae0:	ea42 020e 	orr.w	r2, r2, lr
90024ae4:	fb03 0302 	mla	r3, r3, r2, r0
90024ae8:	0d5a      	lsrs	r2, r3, #21
90024aea:	095b      	lsrs	r3, r3, #5
90024aec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024af0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024af4:	4313      	orrs	r3, r2
90024af6:	f8a9 3000 	strh.w	r3, [r9]
90024afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024afc:	f109 0902 	add.w	r9, r9, #2
90024b00:	f10a 3aff 	add.w	sl, sl, #4294967295
90024b04:	441c      	add	r4, r3
90024b06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024b08:	441e      	add	r6, r3
90024b0a:	e784      	b.n	90024a16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90024b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024b0e:	3d01      	subs	r5, #1
90024b10:	3702      	adds	r7, #2
90024b12:	441c      	add	r4, r3
90024b14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024b16:	441e      	add	r6, r3
90024b18:	e761      	b.n	900249de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90024b1a:	d01d      	beq.n	90024b58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90024b1c:	1e6b      	subs	r3, r5, #1
90024b1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
90024b20:	fb00 4003 	mla	r0, r0, r3, r4
90024b24:	1400      	asrs	r0, r0, #16
90024b26:	f53f af74 	bmi.w	90024a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024b2a:	3901      	subs	r1, #1
90024b2c:	4288      	cmp	r0, r1
90024b2e:	f6bf af70 	bge.w	90024a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024b32:	991c      	ldr	r1, [sp, #112]	; 0x70
90024b34:	fb01 6303 	mla	r3, r1, r3, r6
90024b38:	141b      	asrs	r3, r3, #16
90024b3a:	f53f af6a 	bmi.w	90024a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024b3e:	3a01      	subs	r2, #1
90024b40:	4293      	cmp	r3, r2
90024b42:	f6bf af66 	bge.w	90024a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90024b46:	46a9      	mov	r9, r5
90024b48:	46ba      	mov	sl, r7
90024b4a:	f1b9 0f00 	cmp.w	r9, #0
90024b4e:	dc5b      	bgt.n	90024c08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90024b50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90024b54:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90024b58:	9b07      	ldr	r3, [sp, #28]
90024b5a:	2b00      	cmp	r3, #0
90024b5c:	f340 80b9 	ble.w	90024cd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90024b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024b64:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024b66:	ee30 0a04 	vadd.f32	s0, s0, s8
90024b6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024b6e:	eef0 6a62 	vmov.f32	s13, s5
90024b72:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024b76:	ee31 1a05 	vadd.f32	s2, s2, s10
90024b7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024b7e:	ee16 4a90 	vmov	r4, s13
90024b82:	eef0 6a43 	vmov.f32	s13, s6
90024b86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024b8a:	ee16 6a90 	vmov	r6, s13
90024b8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024b92:	ee61 7a27 	vmul.f32	s15, s2, s15
90024b96:	ee77 2a62 	vsub.f32	s5, s14, s5
90024b9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024b9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024ba2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024ba6:	ee12 2a90 	vmov	r2, s5
90024baa:	eef0 2a47 	vmov.f32	s5, s14
90024bae:	fb92 f3f3 	sdiv	r3, r2, r3
90024bb2:	ee13 2a10 	vmov	r2, s6
90024bb6:	931b      	str	r3, [sp, #108]	; 0x6c
90024bb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024bba:	eeb0 3a67 	vmov.f32	s6, s15
90024bbe:	fb92 f3f3 	sdiv	r3, r2, r3
90024bc2:	931c      	str	r3, [sp, #112]	; 0x70
90024bc4:	9b07      	ldr	r3, [sp, #28]
90024bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024bc8:	3b01      	subs	r3, #1
90024bca:	9307      	str	r3, [sp, #28]
90024bcc:	bf08      	it	eq
90024bce:	4615      	moveq	r5, r2
90024bd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024bd2:	bf18      	it	ne
90024bd4:	461d      	movne	r5, r3
90024bd6:	e6f3      	b.n	900249c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90024bd8:	f111 0b01 	adds.w	fp, r1, #1
90024bdc:	d48d      	bmi.n	90024afa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024bde:	45de      	cmp	lr, fp
90024be0:	db8b      	blt.n	90024afa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024be2:	f110 0b01 	adds.w	fp, r0, #1
90024be6:	d488      	bmi.n	90024afa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024be8:	455b      	cmp	r3, fp
90024bea:	db86      	blt.n	90024afa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024bec:	b21b      	sxth	r3, r3
90024bee:	e9cd 1001 	strd	r1, r0, [sp, #4]
90024bf2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90024bf6:	9300      	str	r3, [sp, #0]
90024bf8:	4642      	mov	r2, r8
90024bfa:	fa0f f38e 	sxth.w	r3, lr
90024bfe:	4649      	mov	r1, r9
90024c00:	980d      	ldr	r0, [sp, #52]	; 0x34
90024c02:	f7ff fe4c 	bl	9002489e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90024c06:	e778      	b.n	90024afa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024c08:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024c0a:	1420      	asrs	r0, r4, #16
90024c0c:	1431      	asrs	r1, r6, #16
90024c0e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90024c16:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024c1a:	fb03 0101 	mla	r1, r3, r1, r0
90024c1e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024c22:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90024c26:	8841      	ldrh	r1, [r0, #2]
90024c28:	f1be 0f00 	cmp.w	lr, #0
90024c2c:	d00b      	beq.n	90024c46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90024c2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90024c32:	3b01      	subs	r3, #1
90024c34:	005b      	lsls	r3, r3, #1
90024c36:	3302      	adds	r3, #2
90024c38:	eb00 0b03 	add.w	fp, r0, r3
90024c3c:	5ac3      	ldrh	r3, [r0, r3]
90024c3e:	930a      	str	r3, [sp, #40]	; 0x28
90024c40:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024c44:	930b      	str	r3, [sp, #44]	; 0x2c
90024c46:	ea4f 400c 	mov.w	r0, ip, lsl #16
90024c4a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024c4e:	fb12 f30e 	smulbb	r3, r2, lr
90024c52:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024c56:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024c5a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024c5e:	10db      	asrs	r3, r3, #3
90024c60:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024c64:	ea40 000c 	orr.w	r0, r0, ip
90024c68:	f1ce 0c10 	rsb	ip, lr, #16
90024c6c:	ea4b 0101 	orr.w	r1, fp, r1
90024c70:	f109 39ff 	add.w	r9, r9, #4294967295
90024c74:	ebac 0c02 	sub.w	ip, ip, r2
90024c78:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024c7c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024c80:	4351      	muls	r1, r2
90024c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024c84:	fb0c 1c00 	mla	ip, ip, r0, r1
90024c88:	990a      	ldr	r1, [sp, #40]	; 0x28
90024c8a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024c8e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90024c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90024c94:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024c98:	0412      	lsls	r2, r2, #16
90024c9a:	ea4b 0000 	orr.w	r0, fp, r0
90024c9e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90024ca2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024ca6:	fb03 c000 	mla	r0, r3, r0, ip
90024caa:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024cae:	ea42 0b0b 	orr.w	fp, r2, fp
90024cb2:	fb03 000b 	mla	r0, r3, fp, r0
90024cb6:	0d43      	lsrs	r3, r0, #21
90024cb8:	0940      	lsrs	r0, r0, #5
90024cba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024cbe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024cc2:	4318      	orrs	r0, r3
90024cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024cc6:	441c      	add	r4, r3
90024cc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024cca:	f82a 0b02 	strh.w	r0, [sl], #2
90024cce:	441e      	add	r6, r3
90024cd0:	e73b      	b.n	90024b4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90024cd2:	b00f      	add	sp, #60	; 0x3c
90024cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90024cd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90024cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024cdc:	b085      	sub	sp, #20
90024cde:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90024ce2:	9102      	str	r1, [sp, #8]
90024ce4:	2c00      	cmp	r4, #0
90024ce6:	fb04 7103 	mla	r1, r4, r3, r7
90024cea:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90024cee:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90024cf2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90024cf6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90024cfa:	f2c0 811b 	blt.w	90024f34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024cfe:	45a6      	cmp	lr, r4
90024d00:	f340 8118 	ble.w	90024f34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024d04:	2f00      	cmp	r7, #0
90024d06:	f2c0 8113 	blt.w	90024f30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024d0a:	42bb      	cmp	r3, r7
90024d0c:	f340 8110 	ble.w	90024f30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024d10:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90024d14:	1c7a      	adds	r2, r7, #1
90024d16:	f100 8110 	bmi.w	90024f3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024d1a:	4293      	cmp	r3, r2
90024d1c:	f340 810d 	ble.w	90024f3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024d20:	2e00      	cmp	r6, #0
90024d22:	f000 810c 	beq.w	90024f3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90024d26:	f8dc 1004 	ldr.w	r1, [ip, #4]
90024d2a:	3401      	adds	r4, #1
90024d2c:	f100 810b 	bmi.w	90024f46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024d30:	45a6      	cmp	lr, r4
90024d32:	f340 8108 	ble.w	90024f46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024d36:	2800      	cmp	r0, #0
90024d38:	f000 8108 	beq.w	90024f4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90024d3c:	2f00      	cmp	r7, #0
90024d3e:	f2c0 8100 	blt.w	90024f42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024d42:	42bb      	cmp	r3, r7
90024d44:	f340 80fd 	ble.w	90024f42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024d48:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90024d4c:	3701      	adds	r7, #1
90024d4e:	f100 8100 	bmi.w	90024f52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024d52:	42bb      	cmp	r3, r7
90024d54:	f340 80fd 	ble.w	90024f52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024d58:	2e00      	cmp	r6, #0
90024d5a:	f000 80fc 	beq.w	90024f56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90024d5e:	3301      	adds	r3, #1
90024d60:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90024d64:	b2b6      	uxth	r6, r6
90024d66:	b280      	uxth	r0, r0
90024d68:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90024d6c:	fb00 fe06 	mul.w	lr, r0, r6
90024d70:	0136      	lsls	r6, r6, #4
90024d72:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90024d76:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90024d7a:	eba6 070e 	sub.w	r7, r6, lr
90024d7e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90024d82:	ea4f 6914 	mov.w	r9, r4, lsr #24
90024d86:	b280      	uxth	r0, r0
90024d88:	b2bf      	uxth	r7, r7
90024d8a:	1a1b      	subs	r3, r3, r0
90024d8c:	ea4f 6812 	mov.w	r8, r2, lsr #24
90024d90:	fb0a f607 	mul.w	r6, sl, r7
90024d94:	b29b      	uxth	r3, r3
90024d96:	fb0b 6603 	mla	r6, fp, r3, r6
90024d9a:	fb00 6609 	mla	r6, r0, r9, r6
90024d9e:	fb0e 6608 	mla	r6, lr, r8, r6
90024da2:	f3c6 2607 	ubfx	r6, r6, #8, #8
90024da6:	9600      	str	r6, [sp, #0]
90024da8:	2e00      	cmp	r6, #0
90024daa:	f000 80be 	beq.w	90024f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90024dae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024db2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90024db6:	9e02      	ldr	r6, [sp, #8]
90024db8:	fb0b fc0c 	mul.w	ip, fp, ip
90024dbc:	fb0b f505 	mul.w	r5, fp, r5
90024dc0:	8836      	ldrh	r6, [r6, #0]
90024dc2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90024dc6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024dca:	9501      	str	r5, [sp, #4]
90024dcc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90024dd0:	44dc      	add	ip, fp
90024dd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024dd6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90024dda:	9503      	str	r5, [sp, #12]
90024ddc:	9d01      	ldr	r5, [sp, #4]
90024dde:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90024de2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90024de6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90024dea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024dee:	fb0a fc0c 	mul.w	ip, sl, ip
90024df2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90024df6:	fb0a fa01 	mul.w	sl, sl, r1
90024dfa:	ea4f 251c 	mov.w	r5, ip, lsr #8
90024dfe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024e02:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90024e06:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024e0a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90024e0e:	4465      	add	r5, ip
90024e10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90024e14:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90024e18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024e1c:	fb09 fc0c 	mul.w	ip, r9, ip
90024e20:	0a2d      	lsrs	r5, r5, #8
90024e22:	fb09 f904 	mul.w	r9, r9, r4
90024e26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024e2a:	ea4f 211c 	mov.w	r1, ip, lsr #8
90024e2e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024e32:	f509 7480 	add.w	r4, r9, #256	; 0x100
90024e36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024e3a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024e3e:	437d      	muls	r5, r7
90024e40:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90024e44:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90024e48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024e4c:	4461      	add	r1, ip
90024e4e:	fb08 f404 	mul.w	r4, r8, r4
90024e52:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024e56:	fb08 f802 	mul.w	r8, r8, r2
90024e5a:	0a09      	lsrs	r1, r1, #8
90024e5c:	0a22      	lsrs	r2, r4, #8
90024e5e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90024e62:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024e66:	fb07 f70a 	mul.w	r7, r7, sl
90024e6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024e6e:	4414      	add	r4, r2
90024e70:	f508 7280 	add.w	r2, r8, #256	; 0x100
90024e74:	0a24      	lsrs	r4, r4, #8
90024e76:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90024e7a:	9a03      	ldr	r2, [sp, #12]
90024e7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90024e80:	fb02 5503 	mla	r5, r2, r3, r5
90024e84:	ea4f 2818 	mov.w	r8, r8, lsr #8
90024e88:	9a00      	ldr	r2, [sp, #0]
90024e8a:	fb04 540e 	mla	r4, r4, lr, r5
90024e8e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90024e92:	1235      	asrs	r5, r6, #8
90024e94:	fb01 4100 	mla	r1, r1, r0, r4
90024e98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90024e9c:	0a09      	lsrs	r1, r1, #8
90024e9e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90024ea2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90024ea6:	fb03 7101 	mla	r1, r3, r1, r7
90024eaa:	fb0e 1e08 	mla	lr, lr, r8, r1
90024eae:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90024eb2:	fb00 e101 	mla	r1, r0, r1, lr
90024eb6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90024eba:	b287      	uxth	r7, r0
90024ebc:	0a09      	lsrs	r1, r1, #8
90024ebe:	437a      	muls	r2, r7
90024ec0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024ec4:	1c53      	adds	r3, r2, #1
90024ec6:	4321      	orrs	r1, r4
90024ec8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024ecc:	0c0a      	lsrs	r2, r1, #16
90024ece:	f3c1 2407 	ubfx	r4, r1, #8, #8
90024ed2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90024ed6:	b2c8      	uxtb	r0, r1
90024ed8:	fb12 f207 	smulbb	r2, r2, r7
90024edc:	fb14 f407 	smulbb	r4, r4, r7
90024ee0:	b2db      	uxtb	r3, r3
90024ee2:	fb10 f007 	smulbb	r0, r0, r7
90024ee6:	fb05 2503 	mla	r5, r5, r3, r2
90024eea:	10f2      	asrs	r2, r6, #3
90024eec:	00f6      	lsls	r6, r6, #3
90024eee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024ef2:	b2ad      	uxth	r5, r5
90024ef4:	b2f6      	uxtb	r6, r6
90024ef6:	fb02 4203 	mla	r2, r2, r3, r4
90024efa:	fb06 0303 	mla	r3, r6, r3, r0
90024efe:	b294      	uxth	r4, r2
90024f00:	b299      	uxth	r1, r3
90024f02:	1c6b      	adds	r3, r5, #1
90024f04:	1c62      	adds	r2, r4, #1
90024f06:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024f0a:	1c4b      	adds	r3, r1, #1
90024f0c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90024f10:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90024f14:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90024f18:	0952      	lsrs	r2, r2, #5
90024f1a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024f1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024f22:	432b      	orrs	r3, r5
90024f24:	4313      	orrs	r3, r2
90024f26:	9a02      	ldr	r2, [sp, #8]
90024f28:	8013      	strh	r3, [r2, #0]
90024f2a:	b005      	add	sp, #20
90024f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024f30:	2500      	movs	r5, #0
90024f32:	e6ef      	b.n	90024d14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90024f34:	2100      	movs	r1, #0
90024f36:	460d      	mov	r5, r1
90024f38:	e6f7      	b.n	90024d2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024f3a:	2100      	movs	r1, #0
90024f3c:	e6f5      	b.n	90024d2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024f3e:	4631      	mov	r1, r6
90024f40:	e6f3      	b.n	90024d2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024f42:	2400      	movs	r4, #0
90024f44:	e702      	b.n	90024d4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90024f46:	2200      	movs	r2, #0
90024f48:	4614      	mov	r4, r2
90024f4a:	e70b      	b.n	90024d64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024f4c:	4602      	mov	r2, r0
90024f4e:	4604      	mov	r4, r0
90024f50:	e708      	b.n	90024d64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024f52:	2200      	movs	r2, #0
90024f54:	e706      	b.n	90024d64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024f56:	4632      	mov	r2, r6
90024f58:	e704      	b.n	90024d64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90024f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024f5e:	b09d      	sub	sp, #116	; 0x74
90024f60:	9219      	str	r2, [sp, #100]	; 0x64
90024f62:	9307      	str	r3, [sp, #28]
90024f64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90024f66:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90024f6a:	901b      	str	r0, [sp, #108]	; 0x6c
90024f6c:	931a      	str	r3, [sp, #104]	; 0x68
90024f6e:	6850      	ldr	r0, [r2, #4]
90024f70:	9117      	str	r1, [sp, #92]	; 0x5c
90024f72:	6812      	ldr	r2, [r2, #0]
90024f74:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90024f78:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90024f7c:	fb00 1303 	mla	r3, r0, r3, r1
90024f80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90024f84:	930a      	str	r3, [sp, #40]	; 0x28
90024f86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024f88:	681b      	ldr	r3, [r3, #0]
90024f8a:	9310      	str	r3, [sp, #64]	; 0x40
90024f8c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90024f90:	930b      	str	r3, [sp, #44]	; 0x2c
90024f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024f94:	2b00      	cmp	r3, #0
90024f96:	dc03      	bgt.n	90024fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90024f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
90024f9a:	2b00      	cmp	r3, #0
90024f9c:	f340 8375 	ble.w	9002568a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024fa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024fa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024fa6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024faa:	1e48      	subs	r0, r1, #1
90024fac:	1e57      	subs	r7, r2, #1
90024fae:	9b07      	ldr	r3, [sp, #28]
90024fb0:	2b00      	cmp	r3, #0
90024fb2:	f340 818e 	ble.w	900252d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90024fb6:	ea5f 4c24 	movs.w	ip, r4, asr #16
90024fba:	ea4f 4326 	mov.w	r3, r6, asr #16
90024fbe:	d406      	bmi.n	90024fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024fc0:	4584      	cmp	ip, r0
90024fc2:	da04      	bge.n	90024fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024fc4:	2b00      	cmp	r3, #0
90024fc6:	db02      	blt.n	90024fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024fc8:	42bb      	cmp	r3, r7
90024fca:	f2c0 8183 	blt.w	900252d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90024fce:	f11c 0c01 	adds.w	ip, ip, #1
90024fd2:	f100 8173 	bmi.w	900252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024fd6:	4561      	cmp	r1, ip
90024fd8:	f2c0 8170 	blt.w	900252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024fdc:	3301      	adds	r3, #1
90024fde:	f100 816d 	bmi.w	900252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024fe2:	429a      	cmp	r2, r3
90024fe4:	f2c0 816a 	blt.w	900252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024fe8:	9b07      	ldr	r3, [sp, #28]
90024fea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90024fec:	9318      	str	r3, [sp, #96]	; 0x60
90024fee:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024ff0:	2b00      	cmp	r3, #0
90024ff2:	f340 818c 	ble.w	9002530e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90024ff6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90024ff8:	ea4f 4c26 	mov.w	ip, r6, asr #16
90024ffc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024ffe:	f3c4 3003 	ubfx	r0, r4, #12, #4
90025002:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90025006:	1422      	asrs	r2, r4, #16
90025008:	f3c6 3103 	ubfx	r1, r6, #12, #4
9002500c:	689b      	ldr	r3, [r3, #8]
9002500e:	f100 81cd 	bmi.w	900253ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90025012:	f103 38ff 	add.w	r8, r3, #4294967295
90025016:	4542      	cmp	r2, r8
90025018:	f280 81c8 	bge.w	900253ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002501c:	f1bc 0f00 	cmp.w	ip, #0
90025020:	f2c0 81c4 	blt.w	900253ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90025024:	f10e 38ff 	add.w	r8, lr, #4294967295
90025028:	45c4      	cmp	ip, r8
9002502a:	f280 81bf 	bge.w	900253ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002502e:	b21b      	sxth	r3, r3
90025030:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025032:	fb0c 2203 	mla	r2, ip, r3, r2
90025036:	eb05 0882 	add.w	r8, r5, r2, lsl #2
9002503a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002503e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90025042:	2800      	cmp	r0, #0
90025044:	f000 81a9 	beq.w	9002539a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90025048:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002504c:	950c      	str	r5, [sp, #48]	; 0x30
9002504e:	0e2d      	lsrs	r5, r5, #24
90025050:	9513      	str	r5, [sp, #76]	; 0x4c
90025052:	b181      	cbz	r1, 90025076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90025054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90025058:	3b01      	subs	r3, #1
9002505a:	009b      	lsls	r3, r3, #2
9002505c:	3304      	adds	r3, #4
9002505e:	eb08 0c03 	add.w	ip, r8, r3
90025062:	f858 3003 	ldr.w	r3, [r8, r3]
90025066:	9308      	str	r3, [sp, #32]
90025068:	0e1b      	lsrs	r3, r3, #24
9002506a:	9311      	str	r3, [sp, #68]	; 0x44
9002506c:	f8dc 3004 	ldr.w	r3, [ip, #4]
90025070:	930d      	str	r3, [sp, #52]	; 0x34
90025072:	0e1b      	lsrs	r3, r3, #24
90025074:	9314      	str	r3, [sp, #80]	; 0x50
90025076:	b280      	uxth	r0, r0
90025078:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002507a:	b289      	uxth	r1, r1
9002507c:	fb00 f901 	mul.w	r9, r0, r1
90025080:	0100      	lsls	r0, r0, #4
90025082:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90025086:	eba0 0809 	sub.w	r8, r0, r9
9002508a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9002508e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90025090:	b289      	uxth	r1, r1
90025092:	fa1f f888 	uxth.w	r8, r8
90025096:	1a5b      	subs	r3, r3, r1
90025098:	fb08 f000 	mul.w	r0, r8, r0
9002509c:	b29b      	uxth	r3, r3
9002509e:	fb03 000e 	mla	r0, r3, lr, r0
900250a2:	fb01 0005 	mla	r0, r1, r5, r0
900250a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
900250a8:	fb09 0005 	mla	r0, r9, r5, r0
900250ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
900250b0:	2800      	cmp	r0, #0
900250b2:	f000 80fa 	beq.w	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900250b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900250ba:	d01b      	beq.n	900250f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900250bc:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900250c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900250c4:	fb0e fa0a 	mul.w	sl, lr, sl
900250c8:	fb0e fe02 	mul.w	lr, lr, r2
900250cc:	ea4f 221a 	mov.w	r2, sl, lsr #8
900250d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900250d4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900250d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900250dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900250e0:	4452      	add	r2, sl
900250e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900250e6:	0a12      	lsrs	r2, r2, #8
900250e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900250ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900250f0:	ea42 020c 	orr.w	r2, r2, ip
900250f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900250f6:	2dff      	cmp	r5, #255	; 0xff
900250f8:	d021      	beq.n	9002513e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
900250fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900250fc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025100:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025102:	fb05 fb0b 	mul.w	fp, r5, fp
90025106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025108:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002510c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9002510e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025112:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025116:	fb05 fa0a 	mul.w	sl, r5, sl
9002511a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002511e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025122:	44de      	add	lr, fp
90025124:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025128:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002512c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025130:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025134:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025138:	ea4e 050a 	orr.w	r5, lr, sl
9002513c:	950c      	str	r5, [sp, #48]	; 0x30
9002513e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025140:	2dff      	cmp	r5, #255	; 0xff
90025142:	d021      	beq.n	90025188 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90025144:	9d08      	ldr	r5, [sp, #32]
90025146:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002514a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002514c:	fb05 fb0b 	mul.w	fp, r5, fp
90025150:	9d08      	ldr	r5, [sp, #32]
90025152:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025156:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025158:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002515c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025160:	fb05 fa0a 	mul.w	sl, r5, sl
90025164:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025168:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002516c:	44de      	add	lr, fp
9002516e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025172:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025176:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002517a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002517e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025182:	ea4e 050a 	orr.w	r5, lr, sl
90025186:	9508      	str	r5, [sp, #32]
90025188:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002518a:	2dff      	cmp	r5, #255	; 0xff
9002518c:	d021      	beq.n	900251d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
9002518e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025190:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025194:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025196:	fb05 fb0b 	mul.w	fp, r5, fp
9002519a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002519c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900251a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
900251a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900251a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900251aa:	fb05 fa0a 	mul.w	sl, r5, sl
900251ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900251b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900251b6:	44de      	add	lr, fp
900251b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900251bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900251c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900251c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900251c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900251cc:	ea4e 050a 	orr.w	r5, lr, sl
900251d0:	950d      	str	r5, [sp, #52]	; 0x34
900251d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900251d4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
900251d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900251dc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900251e0:	9d08      	ldr	r5, [sp, #32]
900251e2:	fb08 fc0c 	mul.w	ip, r8, ip
900251e6:	fb03 cc0e 	mla	ip, r3, lr, ip
900251ea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900251ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900251f0:	fb01 cc0e 	mla	ip, r1, lr, ip
900251f4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900251f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900251fa:	fb09 cc0e 	mla	ip, r9, lr, ip
900251fe:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025202:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025204:	fb08 f80e 	mul.w	r8, r8, lr
90025208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002520c:	fb03 8202 	mla	r2, r3, r2, r8
90025210:	9b08      	ldr	r3, [sp, #32]
90025212:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025216:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
9002521a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002521c:	fb01 220a 	mla	r2, r1, sl, r2
90025220:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90025224:	883b      	ldrh	r3, [r7, #0]
90025226:	fb09 2901 	mla	r9, r9, r1, r2
9002522a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002522c:	1219      	asrs	r1, r3, #8
9002522e:	4342      	muls	r2, r0
90025230:	ea4f 2919 	mov.w	r9, r9, lsr #8
90025234:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90025238:	1c50      	adds	r0, r2, #1
9002523a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002523e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90025242:	ea4c 0c09 	orr.w	ip, ip, r9
90025246:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9002524a:	ea4f 421c 	mov.w	r2, ip, lsr #16
9002524e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90025252:	fa5f fc8c 	uxtb.w	ip, ip
90025256:	fb12 f205 	smulbb	r2, r2, r5
9002525a:	b2c0      	uxtb	r0, r0
9002525c:	fb1c fc05 	smulbb	ip, ip, r5
90025260:	fb01 2100 	mla	r1, r1, r0, r2
90025264:	10da      	asrs	r2, r3, #3
90025266:	fb1e fe05 	smulbb	lr, lr, r5
9002526a:	00db      	lsls	r3, r3, #3
9002526c:	b289      	uxth	r1, r1
9002526e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90025272:	b2db      	uxtb	r3, r3
90025274:	fb02 e200 	mla	r2, r2, r0, lr
90025278:	fb03 c300 	mla	r3, r3, r0, ip
9002527c:	b292      	uxth	r2, r2
9002527e:	fa1f fc83 	uxth.w	ip, r3
90025282:	1c4b      	adds	r3, r1, #1
90025284:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90025288:	f10c 0301 	add.w	r3, ip, #1
9002528c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90025290:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90025294:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90025298:	430b      	orrs	r3, r1
9002529a:	1c51      	adds	r1, r2, #1
9002529c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900252a0:	0952      	lsrs	r2, r2, #5
900252a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900252a6:	4313      	orrs	r3, r2
900252a8:	803b      	strh	r3, [r7, #0]
900252aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900252ac:	3702      	adds	r7, #2
900252ae:	441c      	add	r4, r3
900252b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900252b2:	441e      	add	r6, r3
900252b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
900252b6:	3b01      	subs	r3, #1
900252b8:	9318      	str	r3, [sp, #96]	; 0x60
900252ba:	e698      	b.n	90024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900252bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900252be:	441c      	add	r4, r3
900252c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900252c2:	441e      	add	r6, r3
900252c4:	9b07      	ldr	r3, [sp, #28]
900252c6:	3b01      	subs	r3, #1
900252c8:	9307      	str	r3, [sp, #28]
900252ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900252cc:	3302      	adds	r3, #2
900252ce:	930a      	str	r3, [sp, #40]	; 0x28
900252d0:	e66d      	b.n	90024fae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
900252d2:	d023      	beq.n	9002531c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
900252d4:	9b07      	ldr	r3, [sp, #28]
900252d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
900252d8:	3b01      	subs	r3, #1
900252da:	fb00 4003 	mla	r0, r0, r3, r4
900252de:	1400      	asrs	r0, r0, #16
900252e0:	f53f ae82 	bmi.w	90024fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900252e4:	3901      	subs	r1, #1
900252e6:	4288      	cmp	r0, r1
900252e8:	f6bf ae7e 	bge.w	90024fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900252ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
900252ee:	fb01 6303 	mla	r3, r1, r3, r6
900252f2:	141b      	asrs	r3, r3, #16
900252f4:	f53f ae78 	bmi.w	90024fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900252f8:	3a01      	subs	r2, #1
900252fa:	4293      	cmp	r3, r2
900252fc:	f6bf ae74 	bge.w	90024fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025300:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025304:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90025308:	f1bb 0f00 	cmp.w	fp, #0
9002530c:	dc6c      	bgt.n	900253e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
9002530e:	9b07      	ldr	r3, [sp, #28]
90025310:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025316:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002531a:	930a      	str	r3, [sp, #40]	; 0x28
9002531c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002531e:	2b00      	cmp	r3, #0
90025320:	f340 81b3 	ble.w	9002568a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90025324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025328:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002532a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002532e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025332:	eef0 6a62 	vmov.f32	s13, s5
90025336:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002533a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002533e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025342:	ee16 4a90 	vmov	r4, s13
90025346:	eef0 6a43 	vmov.f32	s13, s6
9002534a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002534e:	ee16 6a90 	vmov	r6, s13
90025352:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025356:	ee61 7a27 	vmul.f32	s15, s2, s15
9002535a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002535e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025362:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002536a:	ee12 2a90 	vmov	r2, s5
9002536e:	eef0 2a47 	vmov.f32	s5, s14
90025372:	fb92 f3f3 	sdiv	r3, r2, r3
90025376:	ee13 2a10 	vmov	r2, s6
9002537a:	9329      	str	r3, [sp, #164]	; 0xa4
9002537c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002537e:	eeb0 3a67 	vmov.f32	s6, s15
90025382:	fb92 f3f3 	sdiv	r3, r2, r3
90025386:	932a      	str	r3, [sp, #168]	; 0xa8
90025388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002538a:	9a19      	ldr	r2, [sp, #100]	; 0x64
9002538c:	3b01      	subs	r3, #1
9002538e:	9317      	str	r3, [sp, #92]	; 0x5c
90025390:	9b26      	ldr	r3, [sp, #152]	; 0x98
90025392:	bf08      	it	eq
90025394:	4613      	moveq	r3, r2
90025396:	9307      	str	r3, [sp, #28]
90025398:	e5fb      	b.n	90024f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002539a:	2900      	cmp	r1, #0
9002539c:	f43f ae6b 	beq.w	90025076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900253a0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
900253a4:	9308      	str	r3, [sp, #32]
900253a6:	0e1b      	lsrs	r3, r3, #24
900253a8:	9311      	str	r3, [sp, #68]	; 0x44
900253aa:	e664      	b.n	90025076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900253ac:	f112 0801 	adds.w	r8, r2, #1
900253b0:	f53f af7b 	bmi.w	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900253b4:	4543      	cmp	r3, r8
900253b6:	f6ff af78 	blt.w	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900253ba:	f11c 0801 	adds.w	r8, ip, #1
900253be:	f53f af74 	bmi.w	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900253c2:	45c6      	cmp	lr, r8
900253c4:	f6ff af71 	blt.w	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900253c8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
900253ca:	b21b      	sxth	r3, r3
900253cc:	9201      	str	r2, [sp, #4]
900253ce:	fa0f f28e 	sxth.w	r2, lr
900253d2:	e9cd 1504 	strd	r1, r5, [sp, #16]
900253d6:	e9cd c002 	strd	ip, r0, [sp, #8]
900253da:	9200      	str	r2, [sp, #0]
900253dc:	4639      	mov	r1, r7
900253de:	9a10      	ldr	r2, [sp, #64]	; 0x40
900253e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
900253e2:	f7ff fc79 	bl	90024cd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
900253e6:	e760      	b.n	900252aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900253e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900253ea:	1427      	asrs	r7, r4, #16
900253ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
900253ee:	f3c4 3203 	ubfx	r2, r4, #12, #4
900253f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900253f6:	1433      	asrs	r3, r6, #16
900253f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
900253fc:	fb01 7303 	mla	r3, r1, r3, r7
90025400:	eb05 0783 	add.w	r7, r5, r3, lsl #2
90025404:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025408:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002540c:	2a00      	cmp	r2, #0
9002540e:	f000 8133 	beq.w	90025678 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
90025412:	687d      	ldr	r5, [r7, #4]
90025414:	950e      	str	r5, [sp, #56]	; 0x38
90025416:	0e2d      	lsrs	r5, r5, #24
90025418:	9515      	str	r5, [sp, #84]	; 0x54
9002541a:	b178      	cbz	r0, 9002543c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002541c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90025420:	3901      	subs	r1, #1
90025422:	0089      	lsls	r1, r1, #2
90025424:	3104      	adds	r1, #4
90025426:	eb07 0e01 	add.w	lr, r7, r1
9002542a:	5879      	ldr	r1, [r7, r1]
9002542c:	9109      	str	r1, [sp, #36]	; 0x24
9002542e:	0e09      	lsrs	r1, r1, #24
90025430:	9112      	str	r1, [sp, #72]	; 0x48
90025432:	f8de 1004 	ldr.w	r1, [lr, #4]
90025436:	910f      	str	r1, [sp, #60]	; 0x3c
90025438:	0e09      	lsrs	r1, r1, #24
9002543a:	9116      	str	r1, [sp, #88]	; 0x58
9002543c:	b292      	uxth	r2, r2
9002543e:	9915      	ldr	r1, [sp, #84]	; 0x54
90025440:	b280      	uxth	r0, r0
90025442:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025444:	fb02 f800 	mul.w	r8, r2, r0
90025448:	0112      	lsls	r2, r2, #4
9002544a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9002544e:	eba2 0e08 	sub.w	lr, r2, r8
90025452:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90025456:	b280      	uxth	r0, r0
90025458:	fa1f fe8e 	uxth.w	lr, lr
9002545c:	1a12      	subs	r2, r2, r0
9002545e:	fb0e f101 	mul.w	r1, lr, r1
90025462:	b292      	uxth	r2, r2
90025464:	fb02 110c 	mla	r1, r2, ip, r1
90025468:	fb00 1105 	mla	r1, r0, r5, r1
9002546c:	9d16      	ldr	r5, [sp, #88]	; 0x58
9002546e:	fb08 1105 	mla	r1, r8, r5, r1
90025472:	f3c1 2107 	ubfx	r1, r1, #8, #8
90025476:	2900      	cmp	r1, #0
90025478:	f000 80f5 	beq.w	90025666 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9002547c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90025480:	d019      	beq.n	900254b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90025482:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025486:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002548a:	fb0c fa0a 	mul.w	sl, ip, sl
9002548e:	fb0c fc03 	mul.w	ip, ip, r3
90025492:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025496:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002549a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002549e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900254a2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900254a6:	4453      	add	r3, sl
900254a8:	0a3f      	lsrs	r7, r7, #8
900254aa:	0a1b      	lsrs	r3, r3, #8
900254ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900254b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900254b4:	433b      	orrs	r3, r7
900254b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
900254b8:	2dff      	cmp	r5, #255	; 0xff
900254ba:	d020      	beq.n	900254fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
900254bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900254be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900254c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
900254c4:	436f      	muls	r7, r5
900254c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900254c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900254cc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900254d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
900254d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900254d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900254da:	fb05 fa0a 	mul.w	sl, r5, sl
900254de:	44bc      	add	ip, r7
900254e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900254e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900254e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900254ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900254f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900254f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900254f8:	ea4c 050a 	orr.w	r5, ip, sl
900254fc:	950e      	str	r5, [sp, #56]	; 0x38
900254fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025500:	2dff      	cmp	r5, #255	; 0xff
90025502:	d020      	beq.n	90025546 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90025504:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025506:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002550a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002550c:	436f      	muls	r7, r5
9002550e:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025510:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025514:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025518:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002551a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002551e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025522:	fb05 fa0a 	mul.w	sl, r5, sl
90025526:	44bc      	add	ip, r7
90025528:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002552c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025530:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025534:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025538:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002553c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025540:	ea4c 050a 	orr.w	r5, ip, sl
90025544:	9509      	str	r5, [sp, #36]	; 0x24
90025546:	9d16      	ldr	r5, [sp, #88]	; 0x58
90025548:	2dff      	cmp	r5, #255	; 0xff
9002554a:	d020      	beq.n	9002558e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
9002554c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002554e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025552:	9d16      	ldr	r5, [sp, #88]	; 0x58
90025554:	436f      	muls	r7, r5
90025556:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025558:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002555c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025560:	9d16      	ldr	r5, [sp, #88]	; 0x58
90025562:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025566:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002556a:	fb05 fa0a 	mul.w	sl, r5, sl
9002556e:	44bc      	add	ip, r7
90025570:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025574:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025578:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002557c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025580:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025584:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025588:	ea4c 050a 	orr.w	r5, ip, sl
9002558c:	950f      	str	r5, [sp, #60]	; 0x3c
9002558e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025590:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025594:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025598:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002559c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002559e:	fb0e f707 	mul.w	r7, lr, r7
900255a2:	fb02 770c 	mla	r7, r2, ip, r7
900255a6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900255aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900255ac:	fb00 770c 	mla	r7, r0, ip, r7
900255b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900255b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900255b6:	fb08 770c 	mla	r7, r8, ip, r7
900255ba:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
900255be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900255c0:	fb0e fe0c 	mul.w	lr, lr, ip
900255c4:	0a3f      	lsrs	r7, r7, #8
900255c6:	fb02 e303 	mla	r3, r2, r3, lr
900255ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
900255cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900255d0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
900255d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900255d6:	fb00 330a 	mla	r3, r0, sl, r3
900255da:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
900255de:	f8b9 0000 	ldrh.w	r0, [r9]
900255e2:	fb08 3c0c 	mla	ip, r8, ip, r3
900255e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900255e8:	1202      	asrs	r2, r0, #8
900255ea:	4359      	muls	r1, r3
900255ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900255f0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
900255f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900255f8:	1c4b      	adds	r3, r1, #1
900255fa:	ea47 070c 	orr.w	r7, r7, ip
900255fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90025602:	0c3b      	lsrs	r3, r7, #16
90025604:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90025608:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9002560c:	b2ff      	uxtb	r7, r7
9002560e:	fb13 f305 	smulbb	r3, r3, r5
90025612:	b2c9      	uxtb	r1, r1
90025614:	fb17 f705 	smulbb	r7, r7, r5
90025618:	fb02 3201 	mla	r2, r2, r1, r3
9002561c:	10c3      	asrs	r3, r0, #3
9002561e:	fb1c fc05 	smulbb	ip, ip, r5
90025622:	00c0      	lsls	r0, r0, #3
90025624:	b292      	uxth	r2, r2
90025626:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002562a:	b2c0      	uxtb	r0, r0
9002562c:	fb03 c301 	mla	r3, r3, r1, ip
90025630:	fb00 7001 	mla	r0, r0, r1, r7
90025634:	1c51      	adds	r1, r2, #1
90025636:	b29b      	uxth	r3, r3
90025638:	b280      	uxth	r0, r0
9002563a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002563e:	f100 0c01 	add.w	ip, r0, #1
90025642:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90025646:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
9002564a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9002564e:	ea4c 0202 	orr.w	r2, ip, r2
90025652:	f103 0c01 	add.w	ip, r3, #1
90025656:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9002565a:	095b      	lsrs	r3, r3, #5
9002565c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025660:	431a      	orrs	r2, r3
90025662:	f8a9 2000 	strh.w	r2, [r9]
90025666:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90025668:	f109 0902 	add.w	r9, r9, #2
9002566c:	f10b 3bff 	add.w	fp, fp, #4294967295
90025670:	441c      	add	r4, r3
90025672:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025674:	441e      	add	r6, r3
90025676:	e647      	b.n	90025308 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90025678:	2800      	cmp	r0, #0
9002567a:	f43f aedf 	beq.w	9002543c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002567e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90025682:	9109      	str	r1, [sp, #36]	; 0x24
90025684:	0e09      	lsrs	r1, r1, #24
90025686:	9112      	str	r1, [sp, #72]	; 0x48
90025688:	e6d8      	b.n	9002543c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002568a:	b01d      	add	sp, #116	; 0x74
9002568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90025690 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90025690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025694:	b085      	sub	sp, #20
90025696:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002569a:	9102      	str	r1, [sp, #8]
9002569c:	2c00      	cmp	r4, #0
9002569e:	fb04 7103 	mla	r1, r4, r3, r7
900256a2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
900256a6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
900256aa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
900256ae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
900256b2:	f2c0 810c 	blt.w	900258ce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
900256b6:	45a6      	cmp	lr, r4
900256b8:	f340 8109 	ble.w	900258ce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
900256bc:	2f00      	cmp	r7, #0
900256be:	f2c0 8104 	blt.w	900258ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900256c2:	42bb      	cmp	r3, r7
900256c4:	f340 8101 	ble.w	900258ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
900256c8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
900256cc:	1c7a      	adds	r2, r7, #1
900256ce:	f100 8101 	bmi.w	900258d4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900256d2:	4293      	cmp	r3, r2
900256d4:	f340 80fe 	ble.w	900258d4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
900256d8:	2e00      	cmp	r6, #0
900256da:	f000 80fd 	beq.w	900258d8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
900256de:	f8dc 1004 	ldr.w	r1, [ip, #4]
900256e2:	3401      	adds	r4, #1
900256e4:	f100 80fc 	bmi.w	900258e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900256e8:	45a6      	cmp	lr, r4
900256ea:	f340 80f9 	ble.w	900258e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
900256ee:	2800      	cmp	r0, #0
900256f0:	f000 80f9 	beq.w	900258e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
900256f4:	2f00      	cmp	r7, #0
900256f6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
900256fa:	f2c0 80ef 	blt.w	900258dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900256fe:	42bb      	cmp	r3, r7
90025700:	f340 80ec 	ble.w	900258dc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90025704:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90025708:	3701      	adds	r7, #1
9002570a:	f100 80ef 	bmi.w	900258ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9002570e:	42bb      	cmp	r3, r7
90025710:	f340 80ec 	ble.w	900258ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90025714:	2e00      	cmp	r6, #0
90025716:	f000 80eb 	beq.w	900258f0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
9002571a:	6852      	ldr	r2, [r2, #4]
9002571c:	b2b6      	uxth	r6, r6
9002571e:	b280      	uxth	r0, r0
90025720:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90025724:	fb00 fe06 	mul.w	lr, r0, r6
90025728:	0136      	lsls	r6, r6, #4
9002572a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002572e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90025732:	eba6 070e 	sub.w	r7, r6, lr
90025736:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002573a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002573e:	b280      	uxth	r0, r0
90025740:	b2bf      	uxth	r7, r7
90025742:	1a1b      	subs	r3, r3, r0
90025744:	ea4f 6812 	mov.w	r8, r2, lsr #24
90025748:	fb07 f60a 	mul.w	r6, r7, sl
9002574c:	b29b      	uxth	r3, r3
9002574e:	fb0b 6603 	mla	r6, fp, r3, r6
90025752:	fb00 6609 	mla	r6, r0, r9, r6
90025756:	fb0e 6608 	mla	r6, lr, r8, r6
9002575a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002575e:	9600      	str	r6, [sp, #0]
90025760:	2e00      	cmp	r6, #0
90025762:	f000 80af 	beq.w	900258c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90025766:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002576a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002576e:	9e02      	ldr	r6, [sp, #8]
90025770:	fb0b fc0c 	mul.w	ip, fp, ip
90025774:	fb0b f505 	mul.w	r5, fp, r5
90025778:	8836      	ldrh	r6, [r6, #0]
9002577a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002577e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025782:	9501      	str	r5, [sp, #4]
90025784:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90025788:	44dc      	add	ip, fp
9002578a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002578e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90025792:	9503      	str	r5, [sp, #12]
90025794:	9d01      	ldr	r5, [sp, #4]
90025796:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002579a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002579e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
900257a2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900257a6:	fb0a fc0c 	mul.w	ip, sl, ip
900257aa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
900257ae:	fb0a fa01 	mul.w	sl, sl, r1
900257b2:	ea4f 251c 	mov.w	r5, ip, lsr #8
900257b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900257ba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
900257be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900257c2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900257c6:	4465      	add	r5, ip
900257c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900257cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900257d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900257d4:	fb09 fc0c 	mul.w	ip, r9, ip
900257d8:	0a2d      	lsrs	r5, r5, #8
900257da:	fb09 f904 	mul.w	r9, r9, r4
900257de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900257e2:	ea4f 211c 	mov.w	r1, ip, lsr #8
900257e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900257ea:	f509 7480 	add.w	r4, r9, #256	; 0x100
900257ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900257f2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900257f6:	437d      	muls	r5, r7
900257f8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900257fc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90025800:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025804:	4461      	add	r1, ip
90025806:	fb08 f404 	mul.w	r4, r8, r4
9002580a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002580e:	fb08 f802 	mul.w	r8, r8, r2
90025812:	0a09      	lsrs	r1, r1, #8
90025814:	0a22      	lsrs	r2, r4, #8
90025816:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9002581a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002581e:	fb07 f70a 	mul.w	r7, r7, sl
90025822:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025826:	4414      	add	r4, r2
90025828:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002582c:	0a24      	lsrs	r4, r4, #8
9002582e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90025832:	9a03      	ldr	r2, [sp, #12]
90025834:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025838:	fb02 5503 	mla	r5, r2, r3, r5
9002583c:	ea4f 2818 	mov.w	r8, r8, lsr #8
90025840:	fb04 540e 	mla	r4, r4, lr, r5
90025844:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90025848:	fb01 4100 	mla	r1, r1, r0, r4
9002584c:	0a09      	lsrs	r1, r1, #8
9002584e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90025852:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90025856:	fb03 7101 	mla	r1, r3, r1, r7
9002585a:	9b00      	ldr	r3, [sp, #0]
9002585c:	fb0e 1e08 	mla	lr, lr, r8, r1
90025860:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90025864:	43da      	mvns	r2, r3
90025866:	1233      	asrs	r3, r6, #8
90025868:	fb00 e101 	mla	r1, r0, r1, lr
9002586c:	10f0      	asrs	r0, r6, #3
9002586e:	b2d2      	uxtb	r2, r2
90025870:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90025874:	0a09      	lsrs	r1, r1, #8
90025876:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002587a:	00f6      	lsls	r6, r6, #3
9002587c:	4353      	muls	r3, r2
9002587e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025882:	4350      	muls	r0, r2
90025884:	b2f6      	uxtb	r6, r6
90025886:	4321      	orrs	r1, r4
90025888:	4356      	muls	r6, r2
9002588a:	1c5a      	adds	r2, r3, #1
9002588c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90025890:	0c0b      	lsrs	r3, r1, #16
90025892:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025896:	1c42      	adds	r2, r0, #1
90025898:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002589c:	0a0a      	lsrs	r2, r1, #8
9002589e:	021b      	lsls	r3, r3, #8
900258a0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
900258a4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900258a8:	00d2      	lsls	r2, r2, #3
900258aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900258ae:	4313      	orrs	r3, r2
900258b0:	1c72      	adds	r2, r6, #1
900258b2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
900258b6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
900258ba:	f3c1 01c4 	ubfx	r1, r1, #3, #5
900258be:	4319      	orrs	r1, r3
900258c0:	9b02      	ldr	r3, [sp, #8]
900258c2:	8019      	strh	r1, [r3, #0]
900258c4:	b005      	add	sp, #20
900258c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900258ca:	2500      	movs	r5, #0
900258cc:	e6fe      	b.n	900256cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
900258ce:	2100      	movs	r1, #0
900258d0:	460d      	mov	r5, r1
900258d2:	e706      	b.n	900256e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900258d4:	2100      	movs	r1, #0
900258d6:	e704      	b.n	900256e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900258d8:	4631      	mov	r1, r6
900258da:	e702      	b.n	900256e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
900258dc:	2400      	movs	r4, #0
900258de:	e713      	b.n	90025708 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
900258e0:	2200      	movs	r2, #0
900258e2:	4614      	mov	r4, r2
900258e4:	e71a      	b.n	9002571c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900258e6:	4602      	mov	r2, r0
900258e8:	4604      	mov	r4, r0
900258ea:	e717      	b.n	9002571c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900258ec:	2200      	movs	r2, #0
900258ee:	e715      	b.n	9002571c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
900258f0:	4632      	mov	r2, r6
900258f2:	e713      	b.n	9002571c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

900258f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900258f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900258f8:	b09b      	sub	sp, #108	; 0x6c
900258fa:	9218      	str	r2, [sp, #96]	; 0x60
900258fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900258fe:	9019      	str	r0, [sp, #100]	; 0x64
90025900:	9116      	str	r1, [sp, #88]	; 0x58
90025902:	6850      	ldr	r0, [r2, #4]
90025904:	9307      	str	r3, [sp, #28]
90025906:	6812      	ldr	r2, [r2, #0]
90025908:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9002590c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90025910:	fb00 1303 	mla	r3, r0, r3, r1
90025914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90025918:	930a      	str	r3, [sp, #40]	; 0x28
9002591a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002591c:	681b      	ldr	r3, [r3, #0]
9002591e:	930f      	str	r3, [sp, #60]	; 0x3c
90025920:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025922:	2b00      	cmp	r3, #0
90025924:	dc03      	bgt.n	9002592e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90025926:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025928:	2b00      	cmp	r3, #0
9002592a:	f340 8387 	ble.w	9002603c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002592e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025930:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025934:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025938:	1e48      	subs	r0, r1, #1
9002593a:	1e57      	subs	r7, r2, #1
9002593c:	9b07      	ldr	r3, [sp, #28]
9002593e:	2b00      	cmp	r3, #0
90025940:	f340 8166 	ble.w	90025c10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90025944:	ea5f 4c24 	movs.w	ip, r4, asr #16
90025948:	ea4f 4326 	mov.w	r3, r6, asr #16
9002594c:	d406      	bmi.n	9002595c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9002594e:	4584      	cmp	ip, r0
90025950:	da04      	bge.n	9002595c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90025952:	2b00      	cmp	r3, #0
90025954:	db02      	blt.n	9002595c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90025956:	42bb      	cmp	r3, r7
90025958:	f2c0 815b 	blt.w	90025c12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9002595c:	f11c 0c01 	adds.w	ip, ip, #1
90025960:	f100 814b 	bmi.w	90025bfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025964:	4561      	cmp	r1, ip
90025966:	f2c0 8148 	blt.w	90025bfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002596a:	3301      	adds	r3, #1
9002596c:	f100 8145 	bmi.w	90025bfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025970:	429a      	cmp	r2, r3
90025972:	f2c0 8142 	blt.w	90025bfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025976:	9b07      	ldr	r3, [sp, #28]
90025978:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002597a:	9317      	str	r3, [sp, #92]	; 0x5c
9002597c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002597e:	2b00      	cmp	r3, #0
90025980:	f340 8165 	ble.w	90025c4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90025984:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90025986:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002598a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002598c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90025990:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90025994:	1422      	asrs	r2, r4, #16
90025996:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002599a:	689b      	ldr	r3, [r3, #8]
9002599c:	f100 81d5 	bmi.w	90025d4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
900259a0:	f103 38ff 	add.w	r8, r3, #4294967295
900259a4:	4542      	cmp	r2, r8
900259a6:	f280 81d0 	bge.w	90025d4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
900259aa:	f1bc 0f00 	cmp.w	ip, #0
900259ae:	f2c0 81cc 	blt.w	90025d4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
900259b2:	f10e 38ff 	add.w	r8, lr, #4294967295
900259b6:	45c4      	cmp	ip, r8
900259b8:	f280 81c7 	bge.w	90025d4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
900259bc:	b21b      	sxth	r3, r3
900259be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900259c0:	fb0c 2203 	mla	r2, ip, r3, r2
900259c4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
900259c8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
900259cc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
900259d0:	2900      	cmp	r1, #0
900259d2:	f000 8182 	beq.w	90025cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
900259d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
900259da:	950b      	str	r5, [sp, #44]	; 0x2c
900259dc:	0e2d      	lsrs	r5, r5, #24
900259de:	9512      	str	r5, [sp, #72]	; 0x48
900259e0:	b180      	cbz	r0, 90025a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900259e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
900259e6:	3b01      	subs	r3, #1
900259e8:	009b      	lsls	r3, r3, #2
900259ea:	3304      	adds	r3, #4
900259ec:	eb08 0c03 	add.w	ip, r8, r3
900259f0:	f858 3003 	ldr.w	r3, [r8, r3]
900259f4:	9308      	str	r3, [sp, #32]
900259f6:	0e1b      	lsrs	r3, r3, #24
900259f8:	9310      	str	r3, [sp, #64]	; 0x40
900259fa:	f8dc 3004 	ldr.w	r3, [ip, #4]
900259fe:	930c      	str	r3, [sp, #48]	; 0x30
90025a00:	0e1b      	lsrs	r3, r3, #24
90025a02:	9313      	str	r3, [sp, #76]	; 0x4c
90025a04:	b289      	uxth	r1, r1
90025a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
90025a08:	b280      	uxth	r0, r0
90025a0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025a0c:	fb01 f900 	mul.w	r9, r1, r0
90025a10:	0109      	lsls	r1, r1, #4
90025a12:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025a16:	eba1 0809 	sub.w	r8, r1, r9
90025a1a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
90025a1e:	b280      	uxth	r0, r0
90025a20:	fa1f f888 	uxth.w	r8, r8
90025a24:	1a09      	subs	r1, r1, r0
90025a26:	fb08 f303 	mul.w	r3, r8, r3
90025a2a:	b289      	uxth	r1, r1
90025a2c:	fb01 330e 	mla	r3, r1, lr, r3
90025a30:	fb00 3305 	mla	r3, r0, r5, r3
90025a34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025a36:	fb09 3305 	mla	r3, r9, r5, r3
90025a3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025a3e:	2b00      	cmp	r3, #0
90025a40:	f000 80d2 	beq.w	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025a44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90025a48:	d01b      	beq.n	90025a82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
90025a4a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90025a4e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025a52:	fb0e fa0a 	mul.w	sl, lr, sl
90025a56:	fb0e fe02 	mul.w	lr, lr, r2
90025a5a:	ea4f 221a 	mov.w	r2, sl, lsr #8
90025a5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025a62:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90025a66:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025a6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90025a6e:	4452      	add	r2, sl
90025a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025a74:	0a12      	lsrs	r2, r2, #8
90025a76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025a7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025a7e:	ea42 020c 	orr.w	r2, r2, ip
90025a82:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025a84:	2dff      	cmp	r5, #255	; 0xff
90025a86:	d021      	beq.n	90025acc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90025a88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025a8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025a8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025a90:	fb05 fb0b 	mul.w	fp, r5, fp
90025a94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025a96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025a9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025a9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025aa0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025aa4:	fb05 fa0a 	mul.w	sl, r5, sl
90025aa8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025aac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025ab0:	44de      	add	lr, fp
90025ab2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025ab6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025aba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025abe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025ac2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025ac6:	ea4e 050a 	orr.w	r5, lr, sl
90025aca:	950b      	str	r5, [sp, #44]	; 0x2c
90025acc:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025ace:	2dff      	cmp	r5, #255	; 0xff
90025ad0:	d021      	beq.n	90025b16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90025ad2:	9d08      	ldr	r5, [sp, #32]
90025ad4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025ad8:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025ada:	fb05 fb0b 	mul.w	fp, r5, fp
90025ade:	9d08      	ldr	r5, [sp, #32]
90025ae0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025ae4:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025ae6:	fb05 fa0e 	mul.w	sl, r5, lr
90025aea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025aee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025af2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025af6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025afa:	44de      	add	lr, fp
90025afc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025b00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025b04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025b08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025b0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025b10:	ea4e 050a 	orr.w	r5, lr, sl
90025b14:	9508      	str	r5, [sp, #32]
90025b16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025b18:	2dff      	cmp	r5, #255	; 0xff
90025b1a:	d021      	beq.n	90025b60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90025b1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025b1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025b22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025b24:	fb05 fb0b 	mul.w	fp, r5, fp
90025b28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025b2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025b2e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90025b30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025b34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025b38:	fb05 fa0a 	mul.w	sl, r5, sl
90025b3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025b40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025b44:	44de      	add	lr, fp
90025b46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025b4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025b4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025b52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025b56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025b5a:	ea4e 050a 	orr.w	r5, lr, sl
90025b5e:	950c      	str	r5, [sp, #48]	; 0x30
90025b60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025b62:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025b66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025b6a:	2bff      	cmp	r3, #255	; 0xff
90025b6c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025b70:	9d08      	ldr	r5, [sp, #32]
90025b72:	fb08 fc0c 	mul.w	ip, r8, ip
90025b76:	fb01 cc0e 	mla	ip, r1, lr, ip
90025b7a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025b80:	fb00 cc0e 	mla	ip, r0, lr, ip
90025b84:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025b88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025b8a:	fb09 cc0e 	mla	ip, r9, lr, ip
90025b8e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025b92:	fb08 f80e 	mul.w	r8, r8, lr
90025b96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025b9a:	fb01 8202 	mla	r2, r1, r2, r8
90025b9e:	9908      	ldr	r1, [sp, #32]
90025ba0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025ba4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025ba8:	990c      	ldr	r1, [sp, #48]	; 0x30
90025baa:	fb00 220a 	mla	r2, r0, sl, r2
90025bae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90025bb2:	fb09 2900 	mla	r9, r9, r0, r2
90025bb6:	ea4f 2919 	mov.w	r9, r9, lsr #8
90025bba:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90025bbe:	ea4c 0c09 	orr.w	ip, ip, r9
90025bc2:	ea4f 221c 	mov.w	r2, ip, lsr #8
90025bc6:	f040 8091 	bne.w	90025cec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90025bca:	ea4f 135c 	mov.w	r3, ip, lsr #5
90025bce:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90025bd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025bd6:	f022 0207 	bic.w	r2, r2, #7
90025bda:	431a      	orrs	r2, r3
90025bdc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90025be0:	ea4c 0c02 	orr.w	ip, ip, r2
90025be4:	f8a7 c000 	strh.w	ip, [r7]
90025be8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025bea:	3702      	adds	r7, #2
90025bec:	441c      	add	r4, r3
90025bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025bf0:	441e      	add	r6, r3
90025bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90025bf4:	3b01      	subs	r3, #1
90025bf6:	9317      	str	r3, [sp, #92]	; 0x5c
90025bf8:	e6c0      	b.n	9002597c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
90025bfa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025bfc:	441c      	add	r4, r3
90025bfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025c00:	441e      	add	r6, r3
90025c02:	9b07      	ldr	r3, [sp, #28]
90025c04:	3b01      	subs	r3, #1
90025c06:	9307      	str	r3, [sp, #28]
90025c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025c0a:	3302      	adds	r3, #2
90025c0c:	930a      	str	r3, [sp, #40]	; 0x28
90025c0e:	e695      	b.n	9002593c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025c10:	d024      	beq.n	90025c5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90025c12:	9b07      	ldr	r3, [sp, #28]
90025c14:	9827      	ldr	r0, [sp, #156]	; 0x9c
90025c16:	3b01      	subs	r3, #1
90025c18:	fb00 4003 	mla	r0, r0, r3, r4
90025c1c:	1400      	asrs	r0, r0, #16
90025c1e:	f53f aeaa 	bmi.w	90025976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025c22:	3901      	subs	r1, #1
90025c24:	4288      	cmp	r0, r1
90025c26:	f6bf aea6 	bge.w	90025976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025c2a:	9928      	ldr	r1, [sp, #160]	; 0xa0
90025c2c:	fb01 6303 	mla	r3, r1, r3, r6
90025c30:	141b      	asrs	r3, r3, #16
90025c32:	f53f aea0 	bmi.w	90025976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025c36:	3a01      	subs	r2, #1
90025c38:	4293      	cmp	r3, r2
90025c3a:	f6bf ae9c 	bge.w	90025976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025c3e:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025c42:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90025c46:	f1bb 0f00 	cmp.w	fp, #0
90025c4a:	f300 809a 	bgt.w	90025d82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90025c4e:	9b07      	ldr	r3, [sp, #28]
90025c50:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025c56:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90025c5a:	930a      	str	r3, [sp, #40]	; 0x28
90025c5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025c5e:	2b00      	cmp	r3, #0
90025c60:	f340 81ec 	ble.w	9002603c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90025c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025c68:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025c6a:	ee30 0a04 	vadd.f32	s0, s0, s8
90025c6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025c72:	eef0 6a62 	vmov.f32	s13, s5
90025c76:	eec7 7a00 	vdiv.f32	s15, s14, s0
90025c7a:	ee31 1a05 	vadd.f32	s2, s2, s10
90025c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025c82:	ee16 4a90 	vmov	r4, s13
90025c86:	eef0 6a43 	vmov.f32	s13, s6
90025c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025c8e:	ee16 6a90 	vmov	r6, s13
90025c92:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025c96:	ee61 7a27 	vmul.f32	s15, s2, s15
90025c9a:	ee77 2a62 	vsub.f32	s5, s14, s5
90025c9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025ca2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025ca6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90025caa:	ee12 2a90 	vmov	r2, s5
90025cae:	eef0 2a47 	vmov.f32	s5, s14
90025cb2:	fb92 f3f3 	sdiv	r3, r2, r3
90025cb6:	ee13 2a10 	vmov	r2, s6
90025cba:	9327      	str	r3, [sp, #156]	; 0x9c
90025cbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025cbe:	eeb0 3a67 	vmov.f32	s6, s15
90025cc2:	fb92 f3f3 	sdiv	r3, r2, r3
90025cc6:	9328      	str	r3, [sp, #160]	; 0xa0
90025cc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
90025ccc:	3b01      	subs	r3, #1
90025cce:	9316      	str	r3, [sp, #88]	; 0x58
90025cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025cd2:	bf08      	it	eq
90025cd4:	4613      	moveq	r3, r2
90025cd6:	9307      	str	r3, [sp, #28]
90025cd8:	e622      	b.n	90025920 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90025cda:	2800      	cmp	r0, #0
90025cdc:	f43f ae92 	beq.w	90025a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025ce0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025ce4:	9308      	str	r3, [sp, #32]
90025ce6:	0e1b      	lsrs	r3, r3, #24
90025ce8:	9310      	str	r3, [sp, #64]	; 0x40
90025cea:	e68b      	b.n	90025a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025cec:	8839      	ldrh	r1, [r7, #0]
90025cee:	43db      	mvns	r3, r3
90025cf0:	4dd4      	ldr	r5, [pc, #848]	; (90026044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025cf2:	ea4f 2e21 	mov.w	lr, r1, asr #8
90025cf6:	fa5f f883 	uxtb.w	r8, r3
90025cfa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90025cfe:	10c8      	asrs	r0, r1, #3
90025d00:	00cb      	lsls	r3, r1, #3
90025d02:	fb0e fe08 	mul.w	lr, lr, r8
90025d06:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025d0a:	b2db      	uxtb	r3, r3
90025d0c:	f10e 0101 	add.w	r1, lr, #1
90025d10:	fb00 f008 	mul.w	r0, r0, r8
90025d14:	fb03 f308 	mul.w	r3, r3, r8
90025d18:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90025d1c:	ea4f 411c 	mov.w	r1, ip, lsr #16
90025d20:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90025d24:	f100 0e01 	add.w	lr, r0, #1
90025d28:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90025d2c:	b2c9      	uxtb	r1, r1
90025d2e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025d32:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90025d36:	00d2      	lsls	r2, r2, #3
90025d38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025d3c:	430a      	orrs	r2, r1
90025d3e:	1c59      	adds	r1, r3, #1
90025d40:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90025d44:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90025d48:	e748      	b.n	90025bdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90025d4a:	f112 0801 	adds.w	r8, r2, #1
90025d4e:	f53f af4b 	bmi.w	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025d52:	4543      	cmp	r3, r8
90025d54:	f6ff af48 	blt.w	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025d58:	f11c 0801 	adds.w	r8, ip, #1
90025d5c:	f53f af44 	bmi.w	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025d60:	45c6      	cmp	lr, r8
90025d62:	f6ff af41 	blt.w	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025d66:	b21b      	sxth	r3, r3
90025d68:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90025d6c:	fa0f f28e 	sxth.w	r2, lr
90025d70:	e9cd 1003 	strd	r1, r0, [sp, #12]
90025d74:	9200      	str	r2, [sp, #0]
90025d76:	4639      	mov	r1, r7
90025d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025d7a:	9819      	ldr	r0, [sp, #100]	; 0x64
90025d7c:	f7ff fc88 	bl	90025690 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90025d80:	e732      	b.n	90025be8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025d82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025d84:	1421      	asrs	r1, r4, #16
90025d86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025d88:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025d8c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90025d90:	1433      	asrs	r3, r6, #16
90025d92:	f3c6 3003 	ubfx	r0, r6, #12, #4
90025d96:	fb07 1303 	mla	r3, r7, r3, r1
90025d9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
90025d9c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90025da0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025da4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90025da8:	2a00      	cmp	r2, #0
90025daa:	f000 8108 	beq.w	90025fbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90025dae:	684d      	ldr	r5, [r1, #4]
90025db0:	950d      	str	r5, [sp, #52]	; 0x34
90025db2:	0e2d      	lsrs	r5, r5, #24
90025db4:	9514      	str	r5, [sp, #80]	; 0x50
90025db6:	b178      	cbz	r0, 90025dd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025db8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90025dbc:	3f01      	subs	r7, #1
90025dbe:	00bf      	lsls	r7, r7, #2
90025dc0:	3704      	adds	r7, #4
90025dc2:	eb01 0e07 	add.w	lr, r1, r7
90025dc6:	59c9      	ldr	r1, [r1, r7]
90025dc8:	9109      	str	r1, [sp, #36]	; 0x24
90025dca:	0e09      	lsrs	r1, r1, #24
90025dcc:	9111      	str	r1, [sp, #68]	; 0x44
90025dce:	f8de 1004 	ldr.w	r1, [lr, #4]
90025dd2:	910e      	str	r1, [sp, #56]	; 0x38
90025dd4:	0e09      	lsrs	r1, r1, #24
90025dd6:	9115      	str	r1, [sp, #84]	; 0x54
90025dd8:	b292      	uxth	r2, r2
90025dda:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025ddc:	b280      	uxth	r0, r0
90025dde:	fb02 f900 	mul.w	r9, r2, r0
90025de2:	0112      	lsls	r2, r2, #4
90025de4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025de8:	eba2 0e09 	sub.w	lr, r2, r9
90025dec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90025df0:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025df2:	b280      	uxth	r0, r0
90025df4:	fa1f fe8e 	uxth.w	lr, lr
90025df8:	1a09      	subs	r1, r1, r0
90025dfa:	fb0e f202 	mul.w	r2, lr, r2
90025dfe:	b289      	uxth	r1, r1
90025e00:	fb01 220c 	mla	r2, r1, ip, r2
90025e04:	fb00 2205 	mla	r2, r0, r5, r2
90025e08:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025e0a:	fb09 2205 	mla	r2, r9, r5, r2
90025e0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
90025e12:	2a00      	cmp	r2, #0
90025e14:	f000 80ca 	beq.w	90025fac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025e18:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90025e1c:	d019      	beq.n	90025e52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90025e1e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025e26:	fb0c fa0a 	mul.w	sl, ip, sl
90025e2a:	fb0c fc03 	mul.w	ip, ip, r3
90025e2e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025e32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025e36:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90025e3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025e3e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025e42:	4453      	add	r3, sl
90025e44:	0a3f      	lsrs	r7, r7, #8
90025e46:	0a1b      	lsrs	r3, r3, #8
90025e48:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90025e4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025e50:	433b      	orrs	r3, r7
90025e52:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025e54:	2dff      	cmp	r5, #255	; 0xff
90025e56:	d020      	beq.n	90025e9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90025e58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025e5a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025e5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025e60:	436f      	muls	r7, r5
90025e62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025e64:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025e68:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025e6c:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025e6e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025e72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e76:	fb05 fa0a 	mul.w	sl, r5, sl
90025e7a:	44bc      	add	ip, r7
90025e7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025e80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025e84:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025e88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025e8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025e90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025e94:	ea4c 050a 	orr.w	r5, ip, sl
90025e98:	950d      	str	r5, [sp, #52]	; 0x34
90025e9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025e9c:	2dff      	cmp	r5, #255	; 0xff
90025e9e:	d020      	beq.n	90025ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90025ea0:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025ea2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025ea6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025ea8:	436f      	muls	r7, r5
90025eaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025eac:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025eb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025eb2:	fb05 fa0c 	mul.w	sl, r5, ip
90025eb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025eba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025ebe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025ec2:	44bc      	add	ip, r7
90025ec4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025ec8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025ecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025ed0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025ed4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025ed8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025edc:	ea4c 050a 	orr.w	r5, ip, sl
90025ee0:	9509      	str	r5, [sp, #36]	; 0x24
90025ee2:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025ee4:	2dff      	cmp	r5, #255	; 0xff
90025ee6:	d020      	beq.n	90025f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90025ee8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025eea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025eee:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025ef0:	436f      	muls	r7, r5
90025ef2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025ef4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025ef8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025efc:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025efe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025f02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025f06:	fb05 fa0a 	mul.w	sl, r5, sl
90025f0a:	44bc      	add	ip, r7
90025f0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025f10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025f14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025f18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025f1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025f20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025f24:	ea4c 050a 	orr.w	r5, ip, sl
90025f28:	950e      	str	r5, [sp, #56]	; 0x38
90025f2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025f2c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025f34:	2aff      	cmp	r2, #255	; 0xff
90025f36:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025f3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025f3c:	fb0e f707 	mul.w	r7, lr, r7
90025f40:	fb01 770c 	mla	r7, r1, ip, r7
90025f44:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025f48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025f4a:	fb00 770c 	mla	r7, r0, ip, r7
90025f4e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025f52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025f54:	fb09 770c 	mla	r7, r9, ip, r7
90025f58:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025f5c:	fb0e fe0c 	mul.w	lr, lr, ip
90025f60:	ea4f 2717 	mov.w	r7, r7, lsr #8
90025f64:	fb01 e303 	mla	r3, r1, r3, lr
90025f68:	9909      	ldr	r1, [sp, #36]	; 0x24
90025f6a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025f6e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025f72:	990e      	ldr	r1, [sp, #56]	; 0x38
90025f74:	fb00 330a 	mla	r3, r0, sl, r3
90025f78:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90025f7c:	fb09 3c0c 	mla	ip, r9, ip, r3
90025f80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025f84:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025f88:	ea47 070c 	orr.w	r7, r7, ip
90025f8c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90025f90:	d11e      	bne.n	90025fd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90025f92:	097a      	lsrs	r2, r7, #5
90025f94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90025f98:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025f9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025fa0:	f023 0307 	bic.w	r3, r3, #7
90025fa4:	4313      	orrs	r3, r2
90025fa6:	431f      	orrs	r7, r3
90025fa8:	f8a8 7000 	strh.w	r7, [r8]
90025fac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025fae:	f108 0802 	add.w	r8, r8, #2
90025fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
90025fb6:	441c      	add	r4, r3
90025fb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025fba:	441e      	add	r6, r3
90025fbc:	e643      	b.n	90025c46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90025fbe:	2800      	cmp	r0, #0
90025fc0:	f43f af0a 	beq.w	90025dd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025fc4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90025fc8:	9109      	str	r1, [sp, #36]	; 0x24
90025fca:	0e09      	lsrs	r1, r1, #24
90025fcc:	9111      	str	r1, [sp, #68]	; 0x44
90025fce:	e703      	b.n	90025dd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025fd0:	f8b8 1000 	ldrh.w	r1, [r8]
90025fd4:	43d2      	mvns	r2, r2
90025fd6:	ea4f 2c21 	mov.w	ip, r1, asr #8
90025fda:	fa5f fe82 	uxtb.w	lr, r2
90025fde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90025fe2:	10c8      	asrs	r0, r1, #3
90025fe4:	00ca      	lsls	r2, r1, #3
90025fe6:	fb0c fc0e 	mul.w	ip, ip, lr
90025fea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025fee:	b2d2      	uxtb	r2, r2
90025ff0:	f10c 0101 	add.w	r1, ip, #1
90025ff4:	fb00 f00e 	mul.w	r0, r0, lr
90025ff8:	fb02 f20e 	mul.w	r2, r2, lr
90025ffc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026000:	0c39      	lsrs	r1, r7, #16
90026002:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026006:	490f      	ldr	r1, [pc, #60]	; (90026044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90026008:	fa5f fc8c 	uxtb.w	ip, ip
9002600c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90026010:	1c41      	adds	r1, r0, #1
90026012:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90026016:	1c51      	adds	r1, r2, #1
90026018:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9002601c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90026020:	00c0      	lsls	r0, r0, #3
90026022:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90026026:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002602a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
9002602e:	ea4c 0c00 	orr.w	ip, ip, r0
90026032:	ea47 0c0c 	orr.w	ip, r7, ip
90026036:	f8a8 c000 	strh.w	ip, [r8]
9002603a:	e7b7      	b.n	90025fac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
9002603c:	b01b      	add	sp, #108	; 0x6c
9002603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026042:	bf00      	nop
90026044:	fffff800 	.word	0xfffff800

90026048 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90026048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002604c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90026050:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90026054:	2d00      	cmp	r5, #0
90026056:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002605a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002605e:	fb05 0e03 	mla	lr, r5, r3, r0
90026062:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90026066:	f2c0 808c 	blt.w	90026182 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
9002606a:	45a9      	cmp	r9, r5
9002606c:	f340 8089 	ble.w	90026182 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90026070:	2800      	cmp	r0, #0
90026072:	f2c0 8084 	blt.w	9002617e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90026076:	4580      	cmp	r8, r0
90026078:	f340 8081 	ble.w	9002617e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
9002607c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90026080:	f01e 0f01 	tst.w	lr, #1
90026084:	5d16      	ldrb	r6, [r2, r4]
90026086:	bf0c      	ite	eq
90026088:	f006 060f 	andeq.w	r6, r6, #15
9002608c:	1136      	asrne	r6, r6, #4
9002608e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90026092:	b2f6      	uxtb	r6, r6
90026094:	1c44      	adds	r4, r0, #1
90026096:	d477      	bmi.n	90026188 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90026098:	45a0      	cmp	r8, r4
9002609a:	dd75      	ble.n	90026188 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
9002609c:	2f00      	cmp	r7, #0
9002609e:	d075      	beq.n	9002618c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
900260a0:	f10e 0a01 	add.w	sl, lr, #1
900260a4:	ea4f 045a 	mov.w	r4, sl, lsr #1
900260a8:	f01a 0f01 	tst.w	sl, #1
900260ac:	5d14      	ldrb	r4, [r2, r4]
900260ae:	bf0c      	ite	eq
900260b0:	f004 040f 	andeq.w	r4, r4, #15
900260b4:	1124      	asrne	r4, r4, #4
900260b6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900260ba:	b2e4      	uxtb	r4, r4
900260bc:	3501      	adds	r5, #1
900260be:	d469      	bmi.n	90026194 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
900260c0:	45a9      	cmp	r9, r5
900260c2:	dd67      	ble.n	90026194 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
900260c4:	f1bc 0f00 	cmp.w	ip, #0
900260c8:	d067      	beq.n	9002619a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
900260ca:	2800      	cmp	r0, #0
900260cc:	db60      	blt.n	90026190 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
900260ce:	4580      	cmp	r8, r0
900260d0:	dd5e      	ble.n	90026190 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
900260d2:	eb03 090e 	add.w	r9, r3, lr
900260d6:	ea4f 0559 	mov.w	r5, r9, lsr #1
900260da:	f019 0f01 	tst.w	r9, #1
900260de:	5d55      	ldrb	r5, [r2, r5]
900260e0:	bf0c      	ite	eq
900260e2:	f005 050f 	andeq.w	r5, r5, #15
900260e6:	112d      	asrne	r5, r5, #4
900260e8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900260ec:	b2ed      	uxtb	r5, r5
900260ee:	3001      	adds	r0, #1
900260f0:	d456      	bmi.n	900261a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900260f2:	4580      	cmp	r8, r0
900260f4:	dd54      	ble.n	900261a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900260f6:	2f00      	cmp	r7, #0
900260f8:	d054      	beq.n	900261a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
900260fa:	3301      	adds	r3, #1
900260fc:	449e      	add	lr, r3
900260fe:	ea4f 035e 	mov.w	r3, lr, lsr #1
90026102:	f01e 0f01 	tst.w	lr, #1
90026106:	5cd0      	ldrb	r0, [r2, r3]
90026108:	bf0c      	ite	eq
9002610a:	f000 000f 	andeq.w	r0, r0, #15
9002610e:	1100      	asrne	r0, r0, #4
90026110:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026114:	b2c3      	uxtb	r3, r0
90026116:	b2ba      	uxth	r2, r7
90026118:	fa1f fc8c 	uxth.w	ip, ip
9002611c:	fb02 f00c 	mul.w	r0, r2, ip
90026120:	0112      	lsls	r2, r2, #4
90026122:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90026126:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
9002612a:	1a12      	subs	r2, r2, r0
9002612c:	fa1f fc8c 	uxth.w	ip, ip
90026130:	b292      	uxth	r2, r2
90026132:	eba7 070c 	sub.w	r7, r7, ip
90026136:	4362      	muls	r2, r4
90026138:	b2bf      	uxth	r7, r7
9002613a:	fb06 2207 	mla	r2, r6, r7, r2
9002613e:	fb0c 2505 	mla	r5, ip, r5, r2
90026142:	fb00 5303 	mla	r3, r0, r3, r5
90026146:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002614a:	b1b3      	cbz	r3, 9002617a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
9002614c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90026150:	435a      	muls	r2, r3
90026152:	1c53      	adds	r3, r2, #1
90026154:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026158:	4a2d      	ldr	r2, [pc, #180]	; (90026210 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
9002615a:	121b      	asrs	r3, r3, #8
9002615c:	6812      	ldr	r2, [r2, #0]
9002615e:	2bff      	cmp	r3, #255	; 0xff
90026160:	ea4f 2612 	mov.w	r6, r2, lsr #8
90026164:	d120      	bne.n	900261a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90026166:	0950      	lsrs	r0, r2, #5
90026168:	4b2a      	ldr	r3, [pc, #168]	; (90026214 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
9002616a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002616e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90026172:	4033      	ands	r3, r6
90026174:	4318      	orrs	r0, r3
90026176:	4302      	orrs	r2, r0
90026178:	800a      	strh	r2, [r1, #0]
9002617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002617e:	2600      	movs	r6, #0
90026180:	e788      	b.n	90026094 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90026182:	2400      	movs	r4, #0
90026184:	4626      	mov	r6, r4
90026186:	e799      	b.n	900260bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90026188:	2400      	movs	r4, #0
9002618a:	e797      	b.n	900260bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
9002618c:	463c      	mov	r4, r7
9002618e:	e795      	b.n	900260bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90026190:	2500      	movs	r5, #0
90026192:	e7ac      	b.n	900260ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90026194:	2300      	movs	r3, #0
90026196:	461d      	mov	r5, r3
90026198:	e7bd      	b.n	90026116 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
9002619a:	4663      	mov	r3, ip
9002619c:	4665      	mov	r5, ip
9002619e:	e7ba      	b.n	90026116 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
900261a0:	2300      	movs	r3, #0
900261a2:	e7b8      	b.n	90026116 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
900261a4:	463b      	mov	r3, r7
900261a6:	e7b6      	b.n	90026116 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
900261a8:	880d      	ldrh	r5, [r1, #0]
900261aa:	b29f      	uxth	r7, r3
900261ac:	f3c2 4007 	ubfx	r0, r2, #16, #8
900261b0:	43db      	mvns	r3, r3
900261b2:	122c      	asrs	r4, r5, #8
900261b4:	fb10 f007 	smulbb	r0, r0, r7
900261b8:	b2db      	uxtb	r3, r3
900261ba:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
900261be:	b2f6      	uxtb	r6, r6
900261c0:	b2d2      	uxtb	r2, r2
900261c2:	fb04 0403 	mla	r4, r4, r3, r0
900261c6:	10e8      	asrs	r0, r5, #3
900261c8:	fb12 f207 	smulbb	r2, r2, r7
900261cc:	00ed      	lsls	r5, r5, #3
900261ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900261d2:	b2a4      	uxth	r4, r4
900261d4:	fb16 f607 	smulbb	r6, r6, r7
900261d8:	b2ed      	uxtb	r5, r5
900261da:	fb00 6603 	mla	r6, r0, r3, r6
900261de:	fb05 2303 	mla	r3, r5, r3, r2
900261e2:	b2b0      	uxth	r0, r6
900261e4:	b29a      	uxth	r2, r3
900261e6:	1c63      	adds	r3, r4, #1
900261e8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
900261ec:	1c53      	adds	r3, r2, #1
900261ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900261f2:	1c42      	adds	r2, r0, #1
900261f4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900261f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900261fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90026200:	0940      	lsrs	r0, r0, #5
90026202:	4323      	orrs	r3, r4
90026204:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90026208:	4303      	orrs	r3, r0
9002620a:	800b      	strh	r3, [r1, #0]
9002620c:	e7b5      	b.n	9002617a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
9002620e:	bf00      	nop
90026210:	240281fc 	.word	0x240281fc
90026214:	00fff800 	.word	0x00fff800

90026218 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002621c:	b097      	sub	sp, #92	; 0x5c
9002621e:	9214      	str	r2, [sp, #80]	; 0x50
90026220:	9309      	str	r3, [sp, #36]	; 0x24
90026222:	9a25      	ldr	r2, [sp, #148]	; 0x94
90026224:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90026228:	9015      	str	r0, [sp, #84]	; 0x54
9002622a:	910d      	str	r1, [sp, #52]	; 0x34
9002622c:	6850      	ldr	r0, [r2, #4]
9002622e:	930f      	str	r3, [sp, #60]	; 0x3c
90026230:	6812      	ldr	r2, [r2, #0]
90026232:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90026236:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
9002623a:	fb00 1303 	mla	r3, r0, r3, r1
9002623e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90026242:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90026244:	689b      	ldr	r3, [r3, #8]
90026246:	3301      	adds	r3, #1
90026248:	f023 0301 	bic.w	r3, r3, #1
9002624c:	930a      	str	r3, [sp, #40]	; 0x28
9002624e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90026250:	681f      	ldr	r7, [r3, #0]
90026252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90026254:	2b00      	cmp	r3, #0
90026256:	dc03      	bgt.n	90026260 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90026258:	9b14      	ldr	r3, [sp, #80]	; 0x50
9002625a:	2b00      	cmp	r3, #0
9002625c:	f340 8289 	ble.w	90026772 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90026260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90026262:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90026266:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002626a:	1e48      	subs	r0, r1, #1
9002626c:	f102 3cff 	add.w	ip, r2, #4294967295
90026270:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026272:	2b00      	cmp	r3, #0
90026274:	f340 80c5 	ble.w	90026402 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90026278:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002627c:	ea4f 4326 	mov.w	r3, r6, asr #16
90026280:	d406      	bmi.n	90026290 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90026282:	4586      	cmp	lr, r0
90026284:	da04      	bge.n	90026290 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90026286:	2b00      	cmp	r3, #0
90026288:	db02      	blt.n	90026290 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002628a:	4563      	cmp	r3, ip
9002628c:	f2c0 80ba 	blt.w	90026404 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90026290:	f11e 0e01 	adds.w	lr, lr, #1
90026294:	f100 80ab 	bmi.w	900263ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90026298:	4571      	cmp	r1, lr
9002629a:	f2c0 80a8 	blt.w	900263ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002629e:	3301      	adds	r3, #1
900262a0:	f100 80a5 	bmi.w	900263ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
900262a4:	429a      	cmp	r2, r3
900262a6:	f2c0 80a2 	blt.w	900263ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
900262aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900262ac:	46c8      	mov	r8, r9
900262ae:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
900262b2:	930e      	str	r3, [sp, #56]	; 0x38
900262b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900262b6:	2b00      	cmp	r3, #0
900262b8:	f340 80c4 	ble.w	90026444 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
900262bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900262be:	1430      	asrs	r0, r6, #16
900262c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
900262c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
900262c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900262cc:	1423      	asrs	r3, r4, #16
900262ce:	f100 814f 	bmi.w	90026570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900262d2:	f10c 3bff 	add.w	fp, ip, #4294967295
900262d6:	455b      	cmp	r3, fp
900262d8:	f280 814a 	bge.w	90026570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900262dc:	2800      	cmp	r0, #0
900262de:	f2c0 8147 	blt.w	90026570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900262e2:	f10e 3bff 	add.w	fp, lr, #4294967295
900262e6:	4558      	cmp	r0, fp
900262e8:	f280 8142 	bge.w	90026570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900262ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
900262ee:	fb00 3305 	mla	r3, r0, r5, r3
900262f2:	0858      	lsrs	r0, r3, #1
900262f4:	07dd      	lsls	r5, r3, #31
900262f6:	f817 c000 	ldrb.w	ip, [r7, r0]
900262fa:	bf54      	ite	pl
900262fc:	f00c 0c0f 	andpl.w	ip, ip, #15
90026300:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026304:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026308:	fa5f fc8c 	uxtb.w	ip, ip
9002630c:	2a00      	cmp	r2, #0
9002630e:	f000 80dd 	beq.w	900264cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90026312:	1c58      	adds	r0, r3, #1
90026314:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90026318:	07c0      	lsls	r0, r0, #31
9002631a:	f817 e00e 	ldrb.w	lr, [r7, lr]
9002631e:	bf54      	ite	pl
90026320:	f00e 0e0f 	andpl.w	lr, lr, #15
90026324:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90026328:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002632c:	fa5f f08e 	uxtb.w	r0, lr
90026330:	9010      	str	r0, [sp, #64]	; 0x40
90026332:	b1d9      	cbz	r1, 9002636c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90026334:	4453      	add	r3, sl
90026336:	0858      	lsrs	r0, r3, #1
90026338:	07dd      	lsls	r5, r3, #31
9002633a:	f103 0301 	add.w	r3, r3, #1
9002633e:	5c38      	ldrb	r0, [r7, r0]
90026340:	bf54      	ite	pl
90026342:	f000 000f 	andpl.w	r0, r0, #15
90026346:	1100      	asrmi	r0, r0, #4
90026348:	07dd      	lsls	r5, r3, #31
9002634a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
9002634e:	b2c0      	uxtb	r0, r0
90026350:	900b      	str	r0, [sp, #44]	; 0x2c
90026352:	ea4f 0053 	mov.w	r0, r3, lsr #1
90026356:	f817 e000 	ldrb.w	lr, [r7, r0]
9002635a:	bf54      	ite	pl
9002635c:	f00e 030f 	andpl.w	r3, lr, #15
90026360:	ea4f 132e 	movmi.w	r3, lr, asr #4
90026364:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026368:	b2db      	uxtb	r3, r3
9002636a:	9311      	str	r3, [sp, #68]	; 0x44
9002636c:	b292      	uxth	r2, r2
9002636e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026370:	b289      	uxth	r1, r1
90026372:	fb02 f301 	mul.w	r3, r2, r1
90026376:	0112      	lsls	r2, r2, #4
90026378:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002637c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90026380:	1ad2      	subs	r2, r2, r3
90026382:	b289      	uxth	r1, r1
90026384:	b292      	uxth	r2, r2
90026386:	1a40      	subs	r0, r0, r1
90026388:	436a      	muls	r2, r5
9002638a:	b280      	uxth	r0, r0
9002638c:	fb0c 2c00 	mla	ip, ip, r0, r2
90026390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90026392:	fb01 c102 	mla	r1, r1, r2, ip
90026396:	9a11      	ldr	r2, [sp, #68]	; 0x44
90026398:	fb03 1302 	mla	r3, r3, r2, r1
9002639c:	f3c3 2307 	ubfx	r3, r3, #8, #8
900263a0:	b1db      	cbz	r3, 900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900263a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900263a4:	4353      	muls	r3, r2
900263a6:	1c5a      	adds	r2, r3, #1
900263a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900263ac:	4ac6      	ldr	r2, [pc, #792]	; (900266c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900263ae:	121b      	asrs	r3, r3, #8
900263b0:	6812      	ldr	r2, [r2, #0]
900263b2:	2bff      	cmp	r3, #255	; 0xff
900263b4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
900263b8:	f040 8099 	bne.w	900264ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
900263bc:	0953      	lsrs	r3, r2, #5
900263be:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
900263c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900263c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900263ca:	f02c 0c07 	bic.w	ip, ip, #7
900263ce:	ea43 0c0c 	orr.w	ip, r3, ip
900263d2:	ea4c 0202 	orr.w	r2, ip, r2
900263d6:	f8a8 2000 	strh.w	r2, [r8]
900263da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900263dc:	f108 0802 	add.w	r8, r8, #2
900263e0:	441c      	add	r4, r3
900263e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263e4:	441e      	add	r6, r3
900263e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900263e8:	3b01      	subs	r3, #1
900263ea:	930e      	str	r3, [sp, #56]	; 0x38
900263ec:	e762      	b.n	900262b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900263ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900263f0:	f109 0902 	add.w	r9, r9, #2
900263f4:	441c      	add	r4, r3
900263f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900263f8:	441e      	add	r6, r3
900263fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900263fc:	3b01      	subs	r3, #1
900263fe:	9309      	str	r3, [sp, #36]	; 0x24
90026400:	e736      	b.n	90026270 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90026402:	d024      	beq.n	9002644e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90026404:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026406:	9823      	ldr	r0, [sp, #140]	; 0x8c
90026408:	3b01      	subs	r3, #1
9002640a:	fb00 4003 	mla	r0, r0, r3, r4
9002640e:	1400      	asrs	r0, r0, #16
90026410:	f53f af4b 	bmi.w	900262aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026414:	3901      	subs	r1, #1
90026416:	4288      	cmp	r0, r1
90026418:	f6bf af47 	bge.w	900262aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002641c:	9924      	ldr	r1, [sp, #144]	; 0x90
9002641e:	fb01 6303 	mla	r3, r1, r3, r6
90026422:	141b      	asrs	r3, r3, #16
90026424:	f53f af41 	bmi.w	900262aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026428:	3a01      	subs	r2, #1
9002642a:	4293      	cmp	r3, r2
9002642c:	f6bf af3d 	bge.w	900262aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026430:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90026434:	46c8      	mov	r8, r9
90026436:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9002643a:	930e      	str	r3, [sp, #56]	; 0x38
9002643c:	f1bb 0f00 	cmp.w	fp, #0
90026440:	f300 80b7 	bgt.w	900265b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
90026444:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026446:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002644a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9002644e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90026450:	2b00      	cmp	r3, #0
90026452:	f340 818e 	ble.w	90026772 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90026456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002645a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002645c:	ee30 0a04 	vadd.f32	s0, s0, s8
90026460:	ee70 0aa4 	vadd.f32	s1, s1, s9
90026464:	eef0 6a62 	vmov.f32	s13, s5
90026468:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002646c:	ee31 1a05 	vadd.f32	s2, s2, s10
90026470:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026474:	ee16 4a90 	vmov	r4, s13
90026478:	eef0 6a43 	vmov.f32	s13, s6
9002647c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026480:	ee16 6a90 	vmov	r6, s13
90026484:	ee20 7aa7 	vmul.f32	s14, s1, s15
90026488:	ee61 7a27 	vmul.f32	s15, s2, s15
9002648c:	ee77 2a62 	vsub.f32	s5, s14, s5
90026490:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026494:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90026498:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002649c:	ee12 2a90 	vmov	r2, s5
900264a0:	eef0 2a47 	vmov.f32	s5, s14
900264a4:	fb92 f3f3 	sdiv	r3, r2, r3
900264a8:	ee13 2a10 	vmov	r2, s6
900264ac:	9323      	str	r3, [sp, #140]	; 0x8c
900264ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
900264b0:	eeb0 3a67 	vmov.f32	s6, s15
900264b4:	fb92 f3f3 	sdiv	r3, r2, r3
900264b8:	9324      	str	r3, [sp, #144]	; 0x90
900264ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900264bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
900264be:	3b01      	subs	r3, #1
900264c0:	930d      	str	r3, [sp, #52]	; 0x34
900264c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
900264c4:	bf08      	it	eq
900264c6:	4613      	moveq	r3, r2
900264c8:	9309      	str	r3, [sp, #36]	; 0x24
900264ca:	e6c2      	b.n	90026252 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900264cc:	2900      	cmp	r1, #0
900264ce:	f43f af4d 	beq.w	9002636c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900264d2:	eb0a 0003 	add.w	r0, sl, r3
900264d6:	0843      	lsrs	r3, r0, #1
900264d8:	07c0      	lsls	r0, r0, #31
900264da:	5cfb      	ldrb	r3, [r7, r3]
900264dc:	bf54      	ite	pl
900264de:	f003 030f 	andpl.w	r3, r3, #15
900264e2:	111b      	asrmi	r3, r3, #4
900264e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900264e8:	b2db      	uxtb	r3, r3
900264ea:	930b      	str	r3, [sp, #44]	; 0x2c
900264ec:	e73e      	b.n	9002636c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900264ee:	f8b8 e000 	ldrh.w	lr, [r8]
900264f2:	fa1f fb83 	uxth.w	fp, r3
900264f6:	f3c2 4107 	ubfx	r1, r2, #16, #8
900264fa:	43db      	mvns	r3, r3
900264fc:	ea4f 202e 	mov.w	r0, lr, asr #8
90026500:	fb11 f10b 	smulbb	r1, r1, fp
90026504:	b2db      	uxtb	r3, r3
90026506:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002650a:	fa5f fc8c 	uxtb.w	ip, ip
9002650e:	b2d2      	uxtb	r2, r2
90026510:	fb00 1003 	mla	r0, r0, r3, r1
90026514:	ea4f 01ee 	mov.w	r1, lr, asr #3
90026518:	fb1c fc0b 	smulbb	ip, ip, fp
9002651c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026520:	b280      	uxth	r0, r0
90026522:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90026526:	fb12 fb0b 	smulbb	fp, r2, fp
9002652a:	fa5f fe8e 	uxtb.w	lr, lr
9002652e:	fb01 cc03 	mla	ip, r1, r3, ip
90026532:	fb0e bb03 	mla	fp, lr, r3, fp
90026536:	1c43      	adds	r3, r0, #1
90026538:	fa1f fc8c 	uxth.w	ip, ip
9002653c:	fa1f fb8b 	uxth.w	fp, fp
90026540:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90026544:	f10c 0101 	add.w	r1, ip, #1
90026548:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
9002654c:	f10b 0001 	add.w	r0, fp, #1
90026550:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026554:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90026558:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002655c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90026560:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90026564:	4318      	orrs	r0, r3
90026566:	ea40 000c 	orr.w	r0, r0, ip
9002656a:	f8a8 0000 	strh.w	r0, [r8]
9002656e:	e734      	b.n	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026570:	f113 0b01 	adds.w	fp, r3, #1
90026574:	f53f af31 	bmi.w	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026578:	45dc      	cmp	ip, fp
9002657a:	f6ff af2e 	blt.w	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002657e:	f110 0b01 	adds.w	fp, r0, #1
90026582:	f53f af2a 	bmi.w	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026586:	45de      	cmp	lr, fp
90026588:	f6ff af27 	blt.w	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002658c:	9302      	str	r3, [sp, #8]
9002658e:	fa0f f38e 	sxth.w	r3, lr
90026592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90026594:	9301      	str	r3, [sp, #4]
90026596:	fa0f f38c 	sxth.w	r3, ip
9002659a:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002659e:	e9cd 1505 	strd	r1, r5, [sp, #20]
900265a2:	9300      	str	r3, [sp, #0]
900265a4:	463a      	mov	r2, r7
900265a6:	4653      	mov	r3, sl
900265a8:	4641      	mov	r1, r8
900265aa:	9815      	ldr	r0, [sp, #84]	; 0x54
900265ac:	f7ff fd4c 	bl	90026048 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
900265b0:	e713      	b.n	900263da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900265b2:	1422      	asrs	r2, r4, #16
900265b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
900265b6:	1433      	asrs	r3, r6, #16
900265b8:	f3c4 3103 	ubfx	r1, r4, #12, #4
900265bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
900265c0:	fb05 2303 	mla	r3, r5, r3, r2
900265c4:	085a      	lsrs	r2, r3, #1
900265c6:	07dd      	lsls	r5, r3, #31
900265c8:	5cba      	ldrb	r2, [r7, r2]
900265ca:	bf54      	ite	pl
900265cc:	f002 020f 	andpl.w	r2, r2, #15
900265d0:	1112      	asrmi	r2, r2, #4
900265d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900265d6:	b2d2      	uxtb	r2, r2
900265d8:	2900      	cmp	r1, #0
900265da:	d077      	beq.n	900266cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
900265dc:	f103 0e01 	add.w	lr, r3, #1
900265e0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
900265e4:	f01e 0f01 	tst.w	lr, #1
900265e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
900265ec:	bf0c      	ite	eq
900265ee:	f00c 0c0f 	andeq.w	ip, ip, #15
900265f2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
900265f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900265fa:	fa5f f58c 	uxtb.w	r5, ip
900265fe:	9512      	str	r5, [sp, #72]	; 0x48
90026600:	b308      	cbz	r0, 90026646 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026602:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026604:	442b      	add	r3, r5
90026606:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002660a:	07dd      	lsls	r5, r3, #31
9002660c:	f103 0301 	add.w	r3, r3, #1
90026610:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026614:	bf54      	ite	pl
90026616:	f00c 0c0f 	andpl.w	ip, ip, #15
9002661a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002661e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026622:	fa5f f58c 	uxtb.w	r5, ip
90026626:	ea4f 0c53 	mov.w	ip, r3, lsr #1
9002662a:	950c      	str	r5, [sp, #48]	; 0x30
9002662c:	07dd      	lsls	r5, r3, #31
9002662e:	f817 c00c 	ldrb.w	ip, [r7, ip]
90026632:	bf54      	ite	pl
90026634:	f00c 0c0f 	andpl.w	ip, ip, #15
90026638:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
9002663c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026640:	fa5f f38c 	uxtb.w	r3, ip
90026644:	9313      	str	r3, [sp, #76]	; 0x4c
90026646:	b289      	uxth	r1, r1
90026648:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002664a:	b280      	uxth	r0, r0
9002664c:	fb01 f300 	mul.w	r3, r1, r0
90026650:	0109      	lsls	r1, r1, #4
90026652:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90026656:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
9002665a:	1ac9      	subs	r1, r1, r3
9002665c:	b280      	uxth	r0, r0
9002665e:	b289      	uxth	r1, r1
90026660:	ebac 0c00 	sub.w	ip, ip, r0
90026664:	4369      	muls	r1, r5
90026666:	fa1f fc8c 	uxth.w	ip, ip
9002666a:	fb02 120c 	mla	r2, r2, ip, r1
9002666e:	990c      	ldr	r1, [sp, #48]	; 0x30
90026670:	fb00 2001 	mla	r0, r0, r1, r2
90026674:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90026676:	fb03 0302 	mla	r3, r3, r2, r0
9002667a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002667e:	b1d3      	cbz	r3, 900266b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026682:	4353      	muls	r3, r2
90026684:	1c5a      	adds	r2, r3, #1
90026686:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002668a:	4a0f      	ldr	r2, [pc, #60]	; (900266c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002668c:	121b      	asrs	r3, r3, #8
9002668e:	6812      	ldr	r2, [r2, #0]
90026690:	2bff      	cmp	r3, #255	; 0xff
90026692:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90026696:	d12d      	bne.n	900266f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90026698:	0953      	lsrs	r3, r2, #5
9002669a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002669e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900266a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900266a6:	f02c 0c07 	bic.w	ip, ip, #7
900266aa:	ea43 0c0c 	orr.w	ip, r3, ip
900266ae:	ea4c 0202 	orr.w	r2, ip, r2
900266b2:	f8a8 2000 	strh.w	r2, [r8]
900266b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900266b8:	f108 0802 	add.w	r8, r8, #2
900266bc:	f10b 3bff 	add.w	fp, fp, #4294967295
900266c0:	441c      	add	r4, r3
900266c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900266c4:	441e      	add	r6, r3
900266c6:	e6b9      	b.n	9002643c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
900266c8:	240281fc 	.word	0x240281fc
900266cc:	2800      	cmp	r0, #0
900266ce:	d0ba      	beq.n	90026646 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900266d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900266d2:	442b      	add	r3, r5
900266d4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900266d8:	07db      	lsls	r3, r3, #31
900266da:	f817 c00c 	ldrb.w	ip, [r7, ip]
900266de:	bf54      	ite	pl
900266e0:	f00c 0c0f 	andpl.w	ip, ip, #15
900266e4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900266e8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900266ec:	fa5f f38c 	uxtb.w	r3, ip
900266f0:	930c      	str	r3, [sp, #48]	; 0x30
900266f2:	e7a8      	b.n	90026646 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900266f4:	f8b8 e000 	ldrh.w	lr, [r8]
900266f8:	fa1f fa83 	uxth.w	sl, r3
900266fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
90026700:	43db      	mvns	r3, r3
90026702:	ea4f 202e 	mov.w	r0, lr, asr #8
90026706:	fb11 f10a 	smulbb	r1, r1, sl
9002670a:	b2db      	uxtb	r3, r3
9002670c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90026710:	b2d2      	uxtb	r2, r2
90026712:	fa5f fc8c 	uxtb.w	ip, ip
90026716:	fb00 1003 	mla	r0, r0, r3, r1
9002671a:	ea4f 01ee 	mov.w	r1, lr, asr #3
9002671e:	fb12 f20a 	smulbb	r2, r2, sl
90026722:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90026726:	b280      	uxth	r0, r0
90026728:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002672c:	fb1c fc0a 	smulbb	ip, ip, sl
90026730:	fa5f fe8e 	uxtb.w	lr, lr
90026734:	fb0e 2203 	mla	r2, lr, r3, r2
90026738:	fb01 cc03 	mla	ip, r1, r3, ip
9002673c:	1c43      	adds	r3, r0, #1
9002673e:	b292      	uxth	r2, r2
90026740:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90026744:	1c51      	adds	r1, r2, #1
90026746:	fa1f fc8c 	uxth.w	ip, ip
9002674a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002674e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
90026752:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026756:	4308      	orrs	r0, r1
90026758:	f10c 0101 	add.w	r1, ip, #1
9002675c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026760:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90026764:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90026768:	ea40 000c 	orr.w	r0, r0, ip
9002676c:	f8a8 0000 	strh.w	r0, [r8]
90026770:	e7a1      	b.n	900266b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026772:	b017      	add	sp, #92	; 0x5c
90026774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90026778 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90026778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002677c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90026780:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90026784:	2d00      	cmp	r5, #0
90026786:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002678a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002678e:	fb05 0e03 	mla	lr, r5, r3, r0
90026792:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90026796:	f2c0 80b0 	blt.w	900268fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002679a:	45a9      	cmp	r9, r5
9002679c:	f340 80ad 	ble.w	900268fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
900267a0:	2800      	cmp	r0, #0
900267a2:	f2c0 80a8 	blt.w	900268f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
900267a6:	4580      	cmp	r8, r0
900267a8:	f340 80a5 	ble.w	900268f6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
900267ac:	ea4f 045e 	mov.w	r4, lr, lsr #1
900267b0:	f01e 0f01 	tst.w	lr, #1
900267b4:	5d16      	ldrb	r6, [r2, r4]
900267b6:	bf0c      	ite	eq
900267b8:	f006 060f 	andeq.w	r6, r6, #15
900267bc:	1136      	asrne	r6, r6, #4
900267be:	eb06 1606 	add.w	r6, r6, r6, lsl #4
900267c2:	b2f6      	uxtb	r6, r6
900267c4:	1c44      	adds	r4, r0, #1
900267c6:	f100 809b 	bmi.w	90026900 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900267ca:	45a0      	cmp	r8, r4
900267cc:	f340 8098 	ble.w	90026900 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
900267d0:	2f00      	cmp	r7, #0
900267d2:	f000 8097 	beq.w	90026904 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
900267d6:	f10e 0a01 	add.w	sl, lr, #1
900267da:	ea4f 045a 	mov.w	r4, sl, lsr #1
900267de:	f01a 0f01 	tst.w	sl, #1
900267e2:	5d14      	ldrb	r4, [r2, r4]
900267e4:	bf0c      	ite	eq
900267e6:	f004 040f 	andeq.w	r4, r4, #15
900267ea:	1124      	asrne	r4, r4, #4
900267ec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900267f0:	b2e4      	uxtb	r4, r4
900267f2:	3501      	adds	r5, #1
900267f4:	f100 808a 	bmi.w	9002690c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900267f8:	45a9      	cmp	r9, r5
900267fa:	f340 8087 	ble.w	9002690c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
900267fe:	f1bc 0f00 	cmp.w	ip, #0
90026802:	f000 8086 	beq.w	90026912 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90026806:	2800      	cmp	r0, #0
90026808:	db7e      	blt.n	90026908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002680a:	4580      	cmp	r8, r0
9002680c:	dd7c      	ble.n	90026908 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
9002680e:	eb03 090e 	add.w	r9, r3, lr
90026812:	ea4f 0559 	mov.w	r5, r9, lsr #1
90026816:	f019 0f01 	tst.w	r9, #1
9002681a:	5d55      	ldrb	r5, [r2, r5]
9002681c:	bf0c      	ite	eq
9002681e:	f005 050f 	andeq.w	r5, r5, #15
90026822:	112d      	asrne	r5, r5, #4
90026824:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90026828:	b2ed      	uxtb	r5, r5
9002682a:	3001      	adds	r0, #1
9002682c:	d474      	bmi.n	90026918 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002682e:	4580      	cmp	r8, r0
90026830:	dd72      	ble.n	90026918 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90026832:	2f00      	cmp	r7, #0
90026834:	d072      	beq.n	9002691c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90026836:	3301      	adds	r3, #1
90026838:	449e      	add	lr, r3
9002683a:	ea4f 035e 	mov.w	r3, lr, lsr #1
9002683e:	f01e 0f01 	tst.w	lr, #1
90026842:	5cd0      	ldrb	r0, [r2, r3]
90026844:	bf0c      	ite	eq
90026846:	f000 000f 	andeq.w	r0, r0, #15
9002684a:	1100      	asrne	r0, r0, #4
9002684c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026850:	b2c3      	uxtb	r3, r0
90026852:	b2ba      	uxth	r2, r7
90026854:	fa1f fc8c 	uxth.w	ip, ip
90026858:	fb02 f00c 	mul.w	r0, r2, ip
9002685c:	0112      	lsls	r2, r2, #4
9002685e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90026862:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90026866:	1a12      	subs	r2, r2, r0
90026868:	fa1f fc8c 	uxth.w	ip, ip
9002686c:	b292      	uxth	r2, r2
9002686e:	eba7 070c 	sub.w	r7, r7, ip
90026872:	4362      	muls	r2, r4
90026874:	b2bf      	uxth	r7, r7
90026876:	fb06 2207 	mla	r2, r6, r7, r2
9002687a:	fb0c 2505 	mla	r5, ip, r5, r2
9002687e:	fb00 5303 	mla	r3, r0, r3, r5
90026882:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026886:	b3a3      	cbz	r3, 900268f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90026888:	4a25      	ldr	r2, [pc, #148]	; (90026920 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002688a:	880e      	ldrh	r6, [r1, #0]
9002688c:	6815      	ldr	r5, [r2, #0]
9002688e:	b29a      	uxth	r2, r3
90026890:	1234      	asrs	r4, r6, #8
90026892:	43db      	mvns	r3, r3
90026894:	f3c5 4007 	ubfx	r0, r5, #16, #8
90026898:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002689c:	b2db      	uxtb	r3, r3
9002689e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
900268a2:	fb10 f002 	smulbb	r0, r0, r2
900268a6:	b2ed      	uxtb	r5, r5
900268a8:	fb17 f702 	smulbb	r7, r7, r2
900268ac:	fb04 0403 	mla	r4, r4, r3, r0
900268b0:	10f0      	asrs	r0, r6, #3
900268b2:	fb15 f202 	smulbb	r2, r5, r2
900268b6:	00f6      	lsls	r6, r6, #3
900268b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900268bc:	b2a4      	uxth	r4, r4
900268be:	b2f6      	uxtb	r6, r6
900268c0:	fb00 7003 	mla	r0, r0, r3, r7
900268c4:	fb06 2303 	mla	r3, r6, r3, r2
900268c8:	b280      	uxth	r0, r0
900268ca:	b29a      	uxth	r2, r3
900268cc:	1c63      	adds	r3, r4, #1
900268ce:	eb03 2414 	add.w	r4, r3, r4, lsr #8
900268d2:	1c53      	adds	r3, r2, #1
900268d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900268d8:	1c42      	adds	r2, r0, #1
900268da:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900268de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900268e2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900268e6:	0940      	lsrs	r0, r0, #5
900268e8:	4323      	orrs	r3, r4
900268ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900268ee:	4303      	orrs	r3, r0
900268f0:	800b      	strh	r3, [r1, #0]
900268f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900268f6:	2600      	movs	r6, #0
900268f8:	e764      	b.n	900267c4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
900268fa:	2400      	movs	r4, #0
900268fc:	4626      	mov	r6, r4
900268fe:	e778      	b.n	900267f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026900:	2400      	movs	r4, #0
90026902:	e776      	b.n	900267f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026904:	463c      	mov	r4, r7
90026906:	e774      	b.n	900267f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90026908:	2500      	movs	r5, #0
9002690a:	e78e      	b.n	9002682a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
9002690c:	2300      	movs	r3, #0
9002690e:	461d      	mov	r5, r3
90026910:	e79f      	b.n	90026852 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026912:	4663      	mov	r3, ip
90026914:	4665      	mov	r5, ip
90026916:	e79c      	b.n	90026852 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026918:	2300      	movs	r3, #0
9002691a:	e79a      	b.n	90026852 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
9002691c:	463b      	mov	r3, r7
9002691e:	e798      	b.n	90026852 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90026920:	240281fc 	.word	0x240281fc

90026924 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90026928:	b093      	sub	sp, #76	; 0x4c
9002692a:	461d      	mov	r5, r3
9002692c:	920c      	str	r2, [sp, #48]	; 0x30
9002692e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90026930:	9011      	str	r0, [sp, #68]	; 0x44
90026932:	9107      	str	r1, [sp, #28]
90026934:	6850      	ldr	r0, [r2, #4]
90026936:	6812      	ldr	r2, [r2, #0]
90026938:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002693c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90026940:	fb00 1303 	mla	r3, r0, r3, r1
90026944:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90026948:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002694a:	689b      	ldr	r3, [r3, #8]
9002694c:	3301      	adds	r3, #1
9002694e:	f023 0301 	bic.w	r3, r3, #1
90026952:	9306      	str	r3, [sp, #24]
90026954:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026956:	681f      	ldr	r7, [r3, #0]
90026958:	9b07      	ldr	r3, [sp, #28]
9002695a:	2b00      	cmp	r3, #0
9002695c:	dc03      	bgt.n	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9002695e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90026960:	2b00      	cmp	r3, #0
90026962:	f340 8267 	ble.w	90026e34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026966:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026968:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002696c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90026970:	1e48      	subs	r0, r1, #1
90026972:	f102 3cff 	add.w	ip, r2, #4294967295
90026976:	2d00      	cmp	r5, #0
90026978:	f340 80b7 	ble.w	90026aea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002697c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90026980:	ea4f 4326 	mov.w	r3, r6, asr #16
90026984:	d406      	bmi.n	90026994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90026986:	4586      	cmp	lr, r0
90026988:	da04      	bge.n	90026994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002698a:	2b00      	cmp	r3, #0
9002698c:	db02      	blt.n	90026994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002698e:	4563      	cmp	r3, ip
90026990:	f2c0 80ac 	blt.w	90026aec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90026994:	f11e 0e01 	adds.w	lr, lr, #1
90026998:	f100 809f 	bmi.w	90026ada <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002699c:	4571      	cmp	r1, lr
9002699e:	f2c0 809c 	blt.w	90026ada <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
900269a2:	3301      	adds	r3, #1
900269a4:	f100 8099 	bmi.w	90026ada <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
900269a8:	429a      	cmp	r2, r3
900269aa:	f2c0 8096 	blt.w	90026ada <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
900269ae:	46c8      	mov	r8, r9
900269b0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
900269b4:	9509      	str	r5, [sp, #36]	; 0x24
900269b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900269b8:	2b00      	cmp	r3, #0
900269ba:	f340 80b5 	ble.w	90026b28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900269be:	f3c4 3303 	ubfx	r3, r4, #12, #4
900269c2:	1430      	asrs	r0, r6, #16
900269c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
900269c8:	9308      	str	r3, [sp, #32]
900269ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
900269cc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900269d0:	1423      	asrs	r3, r4, #16
900269d2:	f100 813f 	bmi.w	90026c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900269d6:	f10c 3bff 	add.w	fp, ip, #4294967295
900269da:	455b      	cmp	r3, fp
900269dc:	f280 813a 	bge.w	90026c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900269e0:	2800      	cmp	r0, #0
900269e2:	f2c0 8137 	blt.w	90026c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900269e6:	f10e 3bff 	add.w	fp, lr, #4294967295
900269ea:	4558      	cmp	r0, fp
900269ec:	f280 8132 	bge.w	90026c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
900269f0:	9a06      	ldr	r2, [sp, #24]
900269f2:	fb00 3302 	mla	r3, r0, r2, r3
900269f6:	0858      	lsrs	r0, r3, #1
900269f8:	07da      	lsls	r2, r3, #31
900269fa:	9a08      	ldr	r2, [sp, #32]
900269fc:	f817 c000 	ldrb.w	ip, [r7, r0]
90026a00:	bf54      	ite	pl
90026a02:	f00c 0c0f 	andpl.w	ip, ip, #15
90026a06:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026a0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90026a0e:	fa5f fc8c 	uxtb.w	ip, ip
90026a12:	2a00      	cmp	r2, #0
90026a14:	f000 80cc 	beq.w	90026bb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90026a18:	1c58      	adds	r0, r3, #1
90026a1a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90026a1e:	07c0      	lsls	r0, r0, #31
90026a20:	f817 e00e 	ldrb.w	lr, [r7, lr]
90026a24:	bf54      	ite	pl
90026a26:	f00e 0e0f 	andpl.w	lr, lr, #15
90026a2a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90026a2e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90026a32:	fa5f fe8e 	uxtb.w	lr, lr
90026a36:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90026a3a:	b1b9      	cbz	r1, 90026a6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026a3c:	4453      	add	r3, sl
90026a3e:	0858      	lsrs	r0, r3, #1
90026a40:	07da      	lsls	r2, r3, #31
90026a42:	5c38      	ldrb	r0, [r7, r0]
90026a44:	bf54      	ite	pl
90026a46:	f000 000f 	andpl.w	r0, r0, #15
90026a4a:	1100      	asrmi	r0, r0, #4
90026a4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90026a50:	b2c0      	uxtb	r0, r0
90026a52:	900a      	str	r0, [sp, #40]	; 0x28
90026a54:	1c58      	adds	r0, r3, #1
90026a56:	0843      	lsrs	r3, r0, #1
90026a58:	07c2      	lsls	r2, r0, #31
90026a5a:	5cfb      	ldrb	r3, [r7, r3]
90026a5c:	bf54      	ite	pl
90026a5e:	f003 030f 	andpl.w	r3, r3, #15
90026a62:	111b      	asrmi	r3, r3, #4
90026a64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026a68:	b2db      	uxtb	r3, r3
90026a6a:	930e      	str	r3, [sp, #56]	; 0x38
90026a6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90026a70:	b289      	uxth	r1, r1
90026a72:	fb02 f301 	mul.w	r3, r2, r1
90026a76:	0112      	lsls	r2, r2, #4
90026a78:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90026a7c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90026a80:	1ad2      	subs	r2, r2, r3
90026a82:	b289      	uxth	r1, r1
90026a84:	b292      	uxth	r2, r2
90026a86:	1a40      	subs	r0, r0, r1
90026a88:	fa1f fe80 	uxth.w	lr, r0
90026a8c:	980d      	ldr	r0, [sp, #52]	; 0x34
90026a8e:	4342      	muls	r2, r0
90026a90:	fb0c 2c0e 	mla	ip, ip, lr, r2
90026a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90026a96:	fb01 c102 	mla	r1, r1, r2, ip
90026a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90026a9c:	fb03 1302 	mla	r3, r3, r2, r1
90026aa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026aa4:	2bff      	cmp	r3, #255	; 0xff
90026aa6:	f040 8094 	bne.w	90026bd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90026aaa:	4bbf      	ldr	r3, [pc, #764]	; (90026da8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026aac:	681a      	ldr	r2, [r3, #0]
90026aae:	4bbf      	ldr	r3, [pc, #764]	; (90026dac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026ab0:	0951      	lsrs	r1, r2, #5
90026ab2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026ab6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026aba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90026abe:	430b      	orrs	r3, r1
90026ac0:	4313      	orrs	r3, r2
90026ac2:	f8a8 3000 	strh.w	r3, [r8]
90026ac6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026ac8:	f108 0802 	add.w	r8, r8, #2
90026acc:	441c      	add	r4, r3
90026ace:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026ad0:	441e      	add	r6, r3
90026ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026ad4:	3b01      	subs	r3, #1
90026ad6:	9309      	str	r3, [sp, #36]	; 0x24
90026ad8:	e76d      	b.n	900269b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90026ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026adc:	3d01      	subs	r5, #1
90026ade:	f109 0902 	add.w	r9, r9, #2
90026ae2:	441c      	add	r4, r3
90026ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026ae6:	441e      	add	r6, r3
90026ae8:	e745      	b.n	90026976 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90026aea:	d021      	beq.n	90026b30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90026aec:	1e6b      	subs	r3, r5, #1
90026aee:	981f      	ldr	r0, [sp, #124]	; 0x7c
90026af0:	fb00 4003 	mla	r0, r0, r3, r4
90026af4:	1400      	asrs	r0, r0, #16
90026af6:	f53f af5a 	bmi.w	900269ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026afa:	3901      	subs	r1, #1
90026afc:	4288      	cmp	r0, r1
90026afe:	f6bf af56 	bge.w	900269ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026b02:	9920      	ldr	r1, [sp, #128]	; 0x80
90026b04:	fb01 6303 	mla	r3, r1, r3, r6
90026b08:	141b      	asrs	r3, r3, #16
90026b0a:	f53f af50 	bmi.w	900269ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026b0e:	3a01      	subs	r2, #1
90026b10:	4293      	cmp	r3, r2
90026b12:	f6bf af4c 	bge.w	900269ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90026b16:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90026b1a:	46a8      	mov	r8, r5
90026b1c:	46ce      	mov	lr, r9
90026b1e:	9308      	str	r3, [sp, #32]
90026b20:	f1b8 0f00 	cmp.w	r8, #0
90026b24:	f300 80b6 	bgt.w	90026c94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90026b28:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90026b2c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90026b30:	9b07      	ldr	r3, [sp, #28]
90026b32:	2b00      	cmp	r3, #0
90026b34:	f340 817e 	ble.w	90026e34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90026b3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026b3e:	ee30 0a04 	vadd.f32	s0, s0, s8
90026b42:	ee70 0aa4 	vadd.f32	s1, s1, s9
90026b46:	eef0 6a62 	vmov.f32	s13, s5
90026b4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
90026b4e:	ee31 1a05 	vadd.f32	s2, s2, s10
90026b52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026b56:	ee16 4a90 	vmov	r4, s13
90026b5a:	eef0 6a43 	vmov.f32	s13, s6
90026b5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026b62:	ee16 6a90 	vmov	r6, s13
90026b66:	ee20 7aa7 	vmul.f32	s14, s1, s15
90026b6a:	ee61 7a27 	vmul.f32	s15, s2, s15
90026b6e:	ee77 2a62 	vsub.f32	s5, s14, s5
90026b72:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026b76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90026b7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90026b7e:	ee12 2a90 	vmov	r2, s5
90026b82:	eef0 2a47 	vmov.f32	s5, s14
90026b86:	fb92 f3f3 	sdiv	r3, r2, r3
90026b8a:	ee13 2a10 	vmov	r2, s6
90026b8e:	931f      	str	r3, [sp, #124]	; 0x7c
90026b90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026b92:	eeb0 3a67 	vmov.f32	s6, s15
90026b96:	fb92 f3f3 	sdiv	r3, r2, r3
90026b9a:	9320      	str	r3, [sp, #128]	; 0x80
90026b9c:	9b07      	ldr	r3, [sp, #28]
90026b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90026ba0:	3b01      	subs	r3, #1
90026ba2:	9307      	str	r3, [sp, #28]
90026ba4:	bf08      	it	eq
90026ba6:	4615      	moveq	r5, r2
90026ba8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026baa:	bf18      	it	ne
90026bac:	461d      	movne	r5, r3
90026bae:	e6d3      	b.n	90026958 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90026bb0:	2900      	cmp	r1, #0
90026bb2:	f43f af5b 	beq.w	90026a6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026bb6:	eb0a 0003 	add.w	r0, sl, r3
90026bba:	0843      	lsrs	r3, r0, #1
90026bbc:	07c0      	lsls	r0, r0, #31
90026bbe:	5cfb      	ldrb	r3, [r7, r3]
90026bc0:	bf54      	ite	pl
90026bc2:	f003 030f 	andpl.w	r3, r3, #15
90026bc6:	111b      	asrmi	r3, r3, #4
90026bc8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026bcc:	b2db      	uxtb	r3, r3
90026bce:	930a      	str	r3, [sp, #40]	; 0x28
90026bd0:	e74c      	b.n	90026a6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026bd2:	2b00      	cmp	r3, #0
90026bd4:	f43f af77 	beq.w	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026bd8:	4a73      	ldr	r2, [pc, #460]	; (90026da8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026bda:	fa1f fe83 	uxth.w	lr, r3
90026bde:	f8b8 c000 	ldrh.w	ip, [r8]
90026be2:	43db      	mvns	r3, r3
90026be4:	6810      	ldr	r0, [r2, #0]
90026be6:	ea4f 212c 	mov.w	r1, ip, asr #8
90026bea:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026bee:	b2db      	uxtb	r3, r3
90026bf0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026bf4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026bf8:	fb12 f20e 	smulbb	r2, r2, lr
90026bfc:	b2c0      	uxtb	r0, r0
90026bfe:	fb1b fb0e 	smulbb	fp, fp, lr
90026c02:	fb01 2103 	mla	r1, r1, r3, r2
90026c06:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026c0a:	fb10 fe0e 	smulbb	lr, r0, lr
90026c0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026c12:	b289      	uxth	r1, r1
90026c14:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026c18:	fa5f fc8c 	uxtb.w	ip, ip
90026c1c:	fb02 b203 	mla	r2, r2, r3, fp
90026c20:	1c48      	adds	r0, r1, #1
90026c22:	fb0c e303 	mla	r3, ip, r3, lr
90026c26:	b292      	uxth	r2, r2
90026c28:	b29b      	uxth	r3, r3
90026c2a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90026c2e:	f102 0b01 	add.w	fp, r2, #1
90026c32:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90026c36:	1c59      	adds	r1, r3, #1
90026c38:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026c3c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90026c40:	0952      	lsrs	r2, r2, #5
90026c42:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026c46:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026c4a:	4301      	orrs	r1, r0
90026c4c:	4311      	orrs	r1, r2
90026c4e:	f8a8 1000 	strh.w	r1, [r8]
90026c52:	e738      	b.n	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c54:	f113 0b01 	adds.w	fp, r3, #1
90026c58:	f53f af35 	bmi.w	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c5c:	45dc      	cmp	ip, fp
90026c5e:	f6ff af32 	blt.w	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c62:	f110 0b01 	adds.w	fp, r0, #1
90026c66:	f53f af2e 	bmi.w	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c6a:	45de      	cmp	lr, fp
90026c6c:	f6ff af2b 	blt.w	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c70:	9302      	str	r3, [sp, #8]
90026c72:	fa0f f38e 	sxth.w	r3, lr
90026c76:	9a08      	ldr	r2, [sp, #32]
90026c78:	9301      	str	r3, [sp, #4]
90026c7a:	fa0f f38c 	sxth.w	r3, ip
90026c7e:	9105      	str	r1, [sp, #20]
90026c80:	4641      	mov	r1, r8
90026c82:	9300      	str	r3, [sp, #0]
90026c84:	4653      	mov	r3, sl
90026c86:	e9cd 0203 	strd	r0, r2, [sp, #12]
90026c8a:	463a      	mov	r2, r7
90026c8c:	9811      	ldr	r0, [sp, #68]	; 0x44
90026c8e:	f7ff fd73 	bl	90026778 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90026c92:	e718      	b.n	90026ac6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026c94:	1422      	asrs	r2, r4, #16
90026c96:	9906      	ldr	r1, [sp, #24]
90026c98:	1433      	asrs	r3, r6, #16
90026c9a:	f3c4 3003 	ubfx	r0, r4, #12, #4
90026c9e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90026ca2:	fb01 2303 	mla	r3, r1, r3, r2
90026ca6:	085a      	lsrs	r2, r3, #1
90026ca8:	07d9      	lsls	r1, r3, #31
90026caa:	5cba      	ldrb	r2, [r7, r2]
90026cac:	bf54      	ite	pl
90026cae:	f002 020f 	andpl.w	r2, r2, #15
90026cb2:	1112      	asrmi	r2, r2, #4
90026cb4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026cb8:	b2d2      	uxtb	r2, r2
90026cba:	2800      	cmp	r0, #0
90026cbc:	d063      	beq.n	90026d86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90026cbe:	f103 0a01 	add.w	sl, r3, #1
90026cc2:	ea4f 015a 	mov.w	r1, sl, lsr #1
90026cc6:	f01a 0f01 	tst.w	sl, #1
90026cca:	5c79      	ldrb	r1, [r7, r1]
90026ccc:	bf0c      	ite	eq
90026cce:	f001 010f 	andeq.w	r1, r1, #15
90026cd2:	1109      	asrne	r1, r1, #4
90026cd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026cd8:	b2c9      	uxtb	r1, r1
90026cda:	910f      	str	r1, [sp, #60]	; 0x3c
90026cdc:	f1bc 0f00 	cmp.w	ip, #0
90026ce0:	d01a      	beq.n	90026d18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026ce2:	9908      	ldr	r1, [sp, #32]
90026ce4:	440b      	add	r3, r1
90026ce6:	0859      	lsrs	r1, r3, #1
90026ce8:	f013 0f01 	tst.w	r3, #1
90026cec:	f103 0301 	add.w	r3, r3, #1
90026cf0:	5c79      	ldrb	r1, [r7, r1]
90026cf2:	bf0c      	ite	eq
90026cf4:	f001 010f 	andeq.w	r1, r1, #15
90026cf8:	1109      	asrne	r1, r1, #4
90026cfa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026cfe:	b2c9      	uxtb	r1, r1
90026d00:	910b      	str	r1, [sp, #44]	; 0x2c
90026d02:	0859      	lsrs	r1, r3, #1
90026d04:	07db      	lsls	r3, r3, #31
90026d06:	5c79      	ldrb	r1, [r7, r1]
90026d08:	bf54      	ite	pl
90026d0a:	f001 010f 	andpl.w	r1, r1, #15
90026d0e:	1109      	asrmi	r1, r1, #4
90026d10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026d14:	b2c9      	uxtb	r1, r1
90026d16:	9110      	str	r1, [sp, #64]	; 0x40
90026d18:	b280      	uxth	r0, r0
90026d1a:	fa1f fc8c 	uxth.w	ip, ip
90026d1e:	fb00 f30c 	mul.w	r3, r0, ip
90026d22:	0100      	lsls	r0, r0, #4
90026d24:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90026d28:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90026d2c:	1ac0      	subs	r0, r0, r3
90026d2e:	fa1f fc8c 	uxth.w	ip, ip
90026d32:	b280      	uxth	r0, r0
90026d34:	eba1 010c 	sub.w	r1, r1, ip
90026d38:	fa1f fa81 	uxth.w	sl, r1
90026d3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
90026d3e:	4348      	muls	r0, r1
90026d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
90026d42:	fb02 020a 	mla	r2, r2, sl, r0
90026d46:	fb0c 2c01 	mla	ip, ip, r1, r2
90026d4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90026d4c:	fb03 c302 	mla	r3, r3, r2, ip
90026d50:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026d54:	2bff      	cmp	r3, #255	; 0xff
90026d56:	d12b      	bne.n	90026db0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90026d58:	4b13      	ldr	r3, [pc, #76]	; (90026da8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026d5a:	681a      	ldr	r2, [r3, #0]
90026d5c:	4b13      	ldr	r3, [pc, #76]	; (90026dac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026d5e:	0951      	lsrs	r1, r2, #5
90026d60:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026d64:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026d68:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90026d6c:	430b      	orrs	r3, r1
90026d6e:	4313      	orrs	r3, r2
90026d70:	f8ae 3000 	strh.w	r3, [lr]
90026d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026d76:	f10e 0e02 	add.w	lr, lr, #2
90026d7a:	f108 38ff 	add.w	r8, r8, #4294967295
90026d7e:	441c      	add	r4, r3
90026d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026d82:	441e      	add	r6, r3
90026d84:	e6cc      	b.n	90026b20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90026d86:	f1bc 0f00 	cmp.w	ip, #0
90026d8a:	d0c5      	beq.n	90026d18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026d8c:	9908      	ldr	r1, [sp, #32]
90026d8e:	440b      	add	r3, r1
90026d90:	0859      	lsrs	r1, r3, #1
90026d92:	07db      	lsls	r3, r3, #31
90026d94:	5c79      	ldrb	r1, [r7, r1]
90026d96:	bf54      	ite	pl
90026d98:	f001 010f 	andpl.w	r1, r1, #15
90026d9c:	1109      	asrmi	r1, r1, #4
90026d9e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026da2:	b2c9      	uxtb	r1, r1
90026da4:	910b      	str	r1, [sp, #44]	; 0x2c
90026da6:	e7b7      	b.n	90026d18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026da8:	240281fc 	.word	0x240281fc
90026dac:	fffff800 	.word	0xfffff800
90026db0:	2b00      	cmp	r3, #0
90026db2:	d0df      	beq.n	90026d74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026db4:	4a21      	ldr	r2, [pc, #132]	; (90026e3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90026db6:	fa1f fa83 	uxth.w	sl, r3
90026dba:	f8be c000 	ldrh.w	ip, [lr]
90026dbe:	43db      	mvns	r3, r3
90026dc0:	6810      	ldr	r0, [r2, #0]
90026dc2:	ea4f 212c 	mov.w	r1, ip, asr #8
90026dc6:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026dca:	b2db      	uxtb	r3, r3
90026dcc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026dd0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026dd4:	fb12 f20a 	smulbb	r2, r2, sl
90026dd8:	b2c0      	uxtb	r0, r0
90026dda:	fb1b fb0a 	smulbb	fp, fp, sl
90026dde:	fb01 2103 	mla	r1, r1, r3, r2
90026de2:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026de6:	fb10 f00a 	smulbb	r0, r0, sl
90026dea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026dee:	b289      	uxth	r1, r1
90026df0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026df4:	fa5f fc8c 	uxtb.w	ip, ip
90026df8:	fb02 b203 	mla	r2, r2, r3, fp
90026dfc:	fb0c 0003 	mla	r0, ip, r3, r0
90026e00:	1c4b      	adds	r3, r1, #1
90026e02:	b292      	uxth	r2, r2
90026e04:	b280      	uxth	r0, r0
90026e06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90026e0a:	f100 0b01 	add.w	fp, r0, #1
90026e0e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90026e12:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90026e16:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90026e1a:	ea4b 0101 	orr.w	r1, fp, r1
90026e1e:	f102 0b01 	add.w	fp, r2, #1
90026e22:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026e26:	0952      	lsrs	r2, r2, #5
90026e28:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026e2c:	4311      	orrs	r1, r2
90026e2e:	f8ae 1000 	strh.w	r1, [lr]
90026e32:	e79f      	b.n	90026d74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026e34:	b013      	add	sp, #76	; 0x4c
90026e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026e3a:	bf00      	nop
90026e3c:	240281fc 	.word	0x240281fc

90026e40 <CRC_Lock>:
90026e40:	4a20      	ldr	r2, [pc, #128]	; (90026ec4 <CRC_Lock+0x84>)
90026e42:	b530      	push	{r4, r5, lr}
90026e44:	6813      	ldr	r3, [r2, #0]
90026e46:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90026e4a:	f24c 2540 	movw	r5, #49728	; 0xc240
90026e4e:	f023 0301 	bic.w	r3, r3, #1
90026e52:	6013      	str	r3, [r2, #0]
90026e54:	4b1c      	ldr	r3, [pc, #112]	; (90026ec8 <CRC_Lock+0x88>)
90026e56:	681a      	ldr	r2, [r3, #0]
90026e58:	4022      	ands	r2, r4
90026e5a:	42aa      	cmp	r2, r5
90026e5c:	d005      	beq.n	90026e6a <CRC_Lock+0x2a>
90026e5e:	681b      	ldr	r3, [r3, #0]
90026e60:	f24c 2270 	movw	r2, #49776	; 0xc270
90026e64:	4023      	ands	r3, r4
90026e66:	4293      	cmp	r3, r2
90026e68:	d124      	bne.n	90026eb4 <CRC_Lock+0x74>
90026e6a:	4b18      	ldr	r3, [pc, #96]	; (90026ecc <CRC_Lock+0x8c>)
90026e6c:	681b      	ldr	r3, [r3, #0]
90026e6e:	bb0b      	cbnz	r3, 90026eb4 <CRC_Lock+0x74>
90026e70:	4b17      	ldr	r3, [pc, #92]	; (90026ed0 <CRC_Lock+0x90>)
90026e72:	681a      	ldr	r2, [r3, #0]
90026e74:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026e78:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90026e7c:	d00d      	beq.n	90026e9a <CRC_Lock+0x5a>
90026e7e:	681a      	ldr	r2, [r3, #0]
90026e80:	f240 4483 	movw	r4, #1155	; 0x483
90026e84:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026e88:	42a2      	cmp	r2, r4
90026e8a:	d006      	beq.n	90026e9a <CRC_Lock+0x5a>
90026e8c:	681b      	ldr	r3, [r3, #0]
90026e8e:	f240 4285 	movw	r2, #1157	; 0x485
90026e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
90026e96:	4293      	cmp	r3, r2
90026e98:	d10c      	bne.n	90026eb4 <CRC_Lock+0x74>
90026e9a:	4b0e      	ldr	r3, [pc, #56]	; (90026ed4 <CRC_Lock+0x94>)
90026e9c:	2201      	movs	r2, #1
90026e9e:	601a      	str	r2, [r3, #0]
90026ea0:	681a      	ldr	r2, [r3, #0]
90026ea2:	2a00      	cmp	r2, #0
90026ea4:	d1fc      	bne.n	90026ea0 <CRC_Lock+0x60>
90026ea6:	4b0c      	ldr	r3, [pc, #48]	; (90026ed8 <CRC_Lock+0x98>)
90026ea8:	6018      	str	r0, [r3, #0]
90026eaa:	6818      	ldr	r0, [r3, #0]
90026eac:	1a43      	subs	r3, r0, r1
90026eae:	4258      	negs	r0, r3
90026eb0:	4158      	adcs	r0, r3
90026eb2:	bd30      	pop	{r4, r5, pc}
90026eb4:	4b09      	ldr	r3, [pc, #36]	; (90026edc <CRC_Lock+0x9c>)
90026eb6:	2201      	movs	r2, #1
90026eb8:	601a      	str	r2, [r3, #0]
90026eba:	681a      	ldr	r2, [r3, #0]
90026ebc:	2a00      	cmp	r2, #0
90026ebe:	d1fc      	bne.n	90026eba <CRC_Lock+0x7a>
90026ec0:	4b07      	ldr	r3, [pc, #28]	; (90026ee0 <CRC_Lock+0xa0>)
90026ec2:	e7f1      	b.n	90026ea8 <CRC_Lock+0x68>
90026ec4:	e0002000 	.word	0xe0002000
90026ec8:	e000ed00 	.word	0xe000ed00
90026ecc:	e0042000 	.word	0xe0042000
90026ed0:	5c001000 	.word	0x5c001000
90026ed4:	58024c08 	.word	0x58024c08
90026ed8:	58024c00 	.word	0x58024c00
90026edc:	40023008 	.word	0x40023008
90026ee0:	40023000 	.word	0x40023000

90026ee4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90026ee4:	6101      	str	r1, [r0, #16]
90026ee6:	4770      	bx	lr

90026ee8 <_ZN8touchgfx8Gestures4tickEv>:
90026ee8:	7b83      	ldrb	r3, [r0, #14]
90026eea:	b14b      	cbz	r3, 90026f00 <_ZN8touchgfx8Gestures4tickEv+0x18>
90026eec:	8903      	ldrh	r3, [r0, #8]
90026eee:	3301      	adds	r3, #1
90026ef0:	b29b      	uxth	r3, r3
90026ef2:	2b07      	cmp	r3, #7
90026ef4:	8103      	strh	r3, [r0, #8]
90026ef6:	bf81      	itttt	hi
90026ef8:	2300      	movhi	r3, #0
90026efa:	8143      	strhhi	r3, [r0, #10]
90026efc:	8183      	strhhi	r3, [r0, #12]
90026efe:	7383      	strbhi	r3, [r0, #14]
90026f00:	4770      	bx	lr
	...

90026f04 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90026f04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90026f08:	4698      	mov	r8, r3
90026f0a:	8883      	ldrh	r3, [r0, #4]
90026f0c:	4604      	mov	r4, r0
90026f0e:	4617      	mov	r7, r2
90026f10:	f8ad 3006 	strh.w	r3, [sp, #6]
90026f14:	eba8 0303 	sub.w	r3, r8, r3
90026f18:	4a19      	ldr	r2, [pc, #100]	; (90026f80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90026f1a:	460e      	mov	r6, r1
90026f1c:	b21b      	sxth	r3, r3
90026f1e:	88c1      	ldrh	r1, [r0, #6]
90026f20:	9200      	str	r2, [sp, #0]
90026f22:	2000      	movs	r0, #0
90026f24:	2b00      	cmp	r3, #0
90026f26:	8aa2      	ldrh	r2, [r4, #20]
90026f28:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90026f2c:	bfb8      	it	lt
90026f2e:	425b      	neglt	r3, r3
90026f30:	f88d 0004 	strb.w	r0, [sp, #4]
90026f34:	f8ad 1008 	strh.w	r1, [sp, #8]
90026f38:	b21b      	sxth	r3, r3
90026f3a:	f8ad 800a 	strh.w	r8, [sp, #10]
90026f3e:	f8ad 500c 	strh.w	r5, [sp, #12]
90026f42:	4293      	cmp	r3, r2
90026f44:	dc07      	bgt.n	90026f56 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90026f46:	1a69      	subs	r1, r5, r1
90026f48:	b209      	sxth	r1, r1
90026f4a:	2900      	cmp	r1, #0
90026f4c:	bfb8      	it	lt
90026f4e:	4249      	neglt	r1, r1
90026f50:	b209      	sxth	r1, r1
90026f52:	428a      	cmp	r2, r1
90026f54:	da10      	bge.n	90026f78 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90026f56:	6920      	ldr	r0, [r4, #16]
90026f58:	4669      	mov	r1, sp
90026f5a:	eba8 0606 	sub.w	r6, r8, r6
90026f5e:	1bef      	subs	r7, r5, r7
90026f60:	6803      	ldr	r3, [r0, #0]
90026f62:	685b      	ldr	r3, [r3, #4]
90026f64:	4798      	blx	r3
90026f66:	2300      	movs	r3, #0
90026f68:	2001      	movs	r0, #1
90026f6a:	8166      	strh	r6, [r4, #10]
90026f6c:	8123      	strh	r3, [r4, #8]
90026f6e:	81a7      	strh	r7, [r4, #12]
90026f70:	f8a4 8004 	strh.w	r8, [r4, #4]
90026f74:	80e5      	strh	r5, [r4, #6]
90026f76:	73a0      	strb	r0, [r4, #14]
90026f78:	b004      	add	sp, #16
90026f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026f7e:	bf00      	nop
90026f80:	9002c4dc 	.word	0x9002c4dc

90026f84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90026f84:	b5f0      	push	{r4, r5, r6, r7, lr}
90026f86:	461e      	mov	r6, r3
90026f88:	1e4b      	subs	r3, r1, #1
90026f8a:	b085      	sub	sp, #20
90026f8c:	4604      	mov	r4, r0
90026f8e:	2b01      	cmp	r3, #1
90026f90:	460d      	mov	r5, r1
90026f92:	4617      	mov	r7, r2
90026f94:	d84b      	bhi.n	9002702e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90026f96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90026f9a:	1cd3      	adds	r3, r2, #3
90026f9c:	b29b      	uxth	r3, r3
90026f9e:	2b06      	cmp	r3, #6
90026fa0:	d916      	bls.n	90026fd0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90026fa2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90027044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026fa6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026faa:	f8cd c004 	str.w	ip, [sp, #4]
90026fae:	f04f 0c00 	mov.w	ip, #0
90026fb2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026fb6:	6900      	ldr	r0, [r0, #16]
90026fb8:	f8ad 100c 	strh.w	r1, [sp, #12]
90026fbc:	a901      	add	r1, sp, #4
90026fbe:	f88d c008 	strb.w	ip, [sp, #8]
90026fc2:	f8ad 200a 	strh.w	r2, [sp, #10]
90026fc6:	f8ad 300e 	strh.w	r3, [sp, #14]
90026fca:	6803      	ldr	r3, [r0, #0]
90026fcc:	689b      	ldr	r3, [r3, #8]
90026fce:	4798      	blx	r3
90026fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90026fd4:	1cd3      	adds	r3, r2, #3
90026fd6:	b29b      	uxth	r3, r3
90026fd8:	2b06      	cmp	r3, #6
90026fda:	d916      	bls.n	9002700a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026fdc:	f8df c064 	ldr.w	ip, [pc, #100]	; 90027044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026fe0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026fe4:	f8cd c004 	str.w	ip, [sp, #4]
90026fe8:	f04f 0c01 	mov.w	ip, #1
90026fec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026ff0:	6920      	ldr	r0, [r4, #16]
90026ff2:	f8ad 100c 	strh.w	r1, [sp, #12]
90026ff6:	a901      	add	r1, sp, #4
90026ff8:	f88d c008 	strb.w	ip, [sp, #8]
90026ffc:	f8ad 200a 	strh.w	r2, [sp, #10]
90027000:	f8ad 300e 	strh.w	r3, [sp, #14]
90027004:	6803      	ldr	r3, [r0, #0]
90027006:	689b      	ldr	r3, [r3, #8]
90027008:	4798      	blx	r3
9002700a:	4b0d      	ldr	r3, [pc, #52]	; (90027040 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
9002700c:	a901      	add	r1, sp, #4
9002700e:	6920      	ldr	r0, [r4, #16]
90027010:	9301      	str	r3, [sp, #4]
90027012:	2300      	movs	r3, #0
90027014:	f88d 5008 	strb.w	r5, [sp, #8]
90027018:	f8ad 700a 	strh.w	r7, [sp, #10]
9002701c:	f8ad 600c 	strh.w	r6, [sp, #12]
90027020:	f8ad 300e 	strh.w	r3, [sp, #14]
90027024:	6803      	ldr	r3, [r0, #0]
90027026:	681b      	ldr	r3, [r3, #0]
90027028:	4798      	blx	r3
9002702a:	b005      	add	sp, #20
9002702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002702e:	2900      	cmp	r1, #0
90027030:	d1eb      	bne.n	9002700a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90027032:	80a2      	strh	r2, [r4, #4]
90027034:	80c6      	strh	r6, [r0, #6]
90027036:	60a1      	str	r1, [r4, #8]
90027038:	81a1      	strh	r1, [r4, #12]
9002703a:	73a1      	strb	r1, [r4, #14]
9002703c:	e7e5      	b.n	9002700a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002703e:	bf00      	nop
90027040:	9002c4c8 	.word	0x9002c4c8
90027044:	9002c4f0 	.word	0x9002c4f0

90027048 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
90027048:	10c9      	asrs	r1, r1, #3
9002704a:	2900      	cmp	r1, #0
9002704c:	bfb8      	it	lt
9002704e:	4249      	neglt	r1, r1
90027050:	2801      	cmp	r0, #1
90027052:	d108      	bne.n	90027066 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90027054:	f3c1 0008 	ubfx	r0, r1, #0, #9
90027058:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9002705c:	4601      	mov	r1, r0
9002705e:	dd02      	ble.n	90027066 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
90027060:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
90027064:	4770      	bx	lr
90027066:	29ff      	cmp	r1, #255	; 0xff
90027068:	bfa8      	it	ge
9002706a:	21ff      	movge	r1, #255	; 0xff
9002706c:	4608      	mov	r0, r1
9002706e:	4770      	bx	lr

90027070 <_ZN8touchgfx10Rasterizer6lineToEii>:
90027070:	b410      	push	{r4}
90027072:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
90027076:	429c      	cmp	r4, r3
90027078:	d803      	bhi.n	90027082 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
9002707a:	f85d 4b04 	ldr.w	r4, [sp], #4
9002707e:	f7ef ba63 	b.w	90016548 <_ZN8touchgfx7Outline6lineToEii>
90027082:	f85d 4b04 	ldr.w	r4, [sp], #4
90027086:	4770      	bx	lr

90027088 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
90027088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002708c:	b08b      	sub	sp, #44	; 0x2c
9002708e:	4606      	mov	r6, r0
90027090:	468a      	mov	sl, r1
90027092:	e9cd 2306 	strd	r2, r3, [sp, #24]
90027096:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
9002709a:	9308      	str	r3, [sp, #32]
9002709c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900270a0:	9309      	str	r3, [sp, #36]	; 0x24
900270a2:	f7ef fbbc 	bl	9001681e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
900270a6:	68b5      	ldr	r5, [r6, #8]
900270a8:	4604      	mov	r4, r0
900270aa:	2d00      	cmp	r5, #0
900270ac:	d044      	beq.n	90027138 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
900270ae:	6873      	ldr	r3, [r6, #4]
900270b0:	42ab      	cmp	r3, r5
900270b2:	d33d      	bcc.n	90027130 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
900270b4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
900270b8:	f04f 0800 	mov.w	r8, #0
900270bc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
900270c0:	eb02 0b03 	add.w	fp, r2, r3
900270c4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
900270c8:	fb02 1203 	mla	r2, r2, r3, r1
900270cc:	9205      	str	r2, [sp, #20]
900270ce:	1e6a      	subs	r2, r5, #1
900270d0:	9204      	str	r2, [sp, #16]
900270d2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
900270d6:	f9b4 7000 	ldrsh.w	r7, [r4]
900270da:	454b      	cmp	r3, r9
900270dc:	463a      	mov	r2, r7
900270de:	d008      	beq.n	900270f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
900270e0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
900270e4:	eb03 0b09 	add.w	fp, r3, r9
900270e8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
900270ec:	fb03 1309 	mla	r3, r3, r9, r1
900270f0:	9305      	str	r3, [sp, #20]
900270f2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900270f6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
900270fa:	4498      	add	r8, r3
900270fc:	9b04      	ldr	r3, [sp, #16]
900270fe:	3b01      	subs	r3, #1
90027100:	9304      	str	r3, [sp, #16]
90027102:	9b04      	ldr	r3, [sp, #16]
90027104:	3301      	adds	r3, #1
90027106:	d015      	beq.n	90027134 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
90027108:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
9002710c:	42bb      	cmp	r3, r7
9002710e:	d117      	bne.n	90027140 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
90027110:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
90027114:	9b04      	ldr	r3, [sp, #16]
90027116:	4548      	cmp	r0, r9
90027118:	f103 33ff 	add.w	r3, r3, #4294967295
9002711c:	d17d      	bne.n	9002721a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
9002711e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
90027122:	4401      	add	r1, r0
90027124:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90027128:	4480      	add	r8, r0
9002712a:	e7e9      	b.n	90027100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
9002712c:	461f      	mov	r7, r3
9002712e:	e042      	b.n	900271b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
90027130:	2000      	movs	r0, #0
90027132:	e002      	b.n	9002713a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
90027134:	2900      	cmp	r1, #0
90027136:	d16d      	bne.n	90027214 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
90027138:	2001      	movs	r0, #1
9002713a:	b00b      	add	sp, #44	; 0x2c
9002713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027140:	b379      	cbz	r1, 900271a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
90027142:	2f00      	cmp	r7, #0
90027144:	db29      	blt.n	9002719a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90027146:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
9002714a:	42bb      	cmp	r3, r7
9002714c:	dd25      	ble.n	9002719a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
9002714e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
90027152:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
90027156:	f7ff ff77 	bl	90027048 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
9002715a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002715c:	fb10 f003 	smulbb	r0, r0, r3
90027160:	b280      	uxth	r0, r0
90027162:	1c41      	adds	r1, r0, #1
90027164:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90027168:	1209      	asrs	r1, r1, #8
9002716a:	f011 0fff 	tst.w	r1, #255	; 0xff
9002716e:	d014      	beq.n	9002719a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
90027170:	b2c9      	uxtb	r1, r1
90027172:	9808      	ldr	r0, [sp, #32]
90027174:	b2ba      	uxth	r2, r7
90027176:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90027178:	9102      	str	r1, [sp, #8]
9002717a:	2101      	movs	r1, #1
9002717c:	4413      	add	r3, r2
9002717e:	4402      	add	r2, r0
90027180:	9101      	str	r1, [sp, #4]
90027182:	fa0f f18b 	sxth.w	r1, fp
90027186:	f8da 0000 	ldr.w	r0, [sl]
9002718a:	b21b      	sxth	r3, r3
9002718c:	9100      	str	r1, [sp, #0]
9002718e:	b212      	sxth	r2, r2
90027190:	6941      	ldr	r1, [r0, #20]
90027192:	4650      	mov	r0, sl
90027194:	460d      	mov	r5, r1
90027196:	9905      	ldr	r1, [sp, #20]
90027198:	47a8      	blx	r5
9002719a:	9b04      	ldr	r3, [sp, #16]
9002719c:	1c7a      	adds	r2, r7, #1
9002719e:	3301      	adds	r3, #1
900271a0:	d0ca      	beq.n	90027138 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
900271a2:	f9b4 7000 	ldrsh.w	r7, [r4]
900271a6:	1abb      	subs	r3, r7, r2
900271a8:	2b00      	cmp	r3, #0
900271aa:	dd31      	ble.n	90027210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
900271ac:	2a00      	cmp	r2, #0
900271ae:	dabd      	bge.n	9002712c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
900271b0:	2f00      	cmp	r7, #0
900271b2:	dd2d      	ble.n	90027210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
900271b4:	2200      	movs	r2, #0
900271b6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
900271ba:	19d1      	adds	r1, r2, r7
900271bc:	4299      	cmp	r1, r3
900271be:	db02      	blt.n	900271c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
900271c0:	1a9f      	subs	r7, r3, r2
900271c2:	2f00      	cmp	r7, #0
900271c4:	dd24      	ble.n	90027210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
900271c6:	ea4f 1188 	mov.w	r1, r8, lsl #6
900271ca:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
900271ce:	f7ff ff3b 	bl	90027048 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
900271d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900271d4:	fb10 f003 	smulbb	r0, r0, r3
900271d8:	b280      	uxth	r0, r0
900271da:	1c41      	adds	r1, r0, #1
900271dc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
900271e0:	1209      	asrs	r1, r1, #8
900271e2:	f011 0fff 	tst.w	r1, #255	; 0xff
900271e6:	d013      	beq.n	90027210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
900271e8:	b292      	uxth	r2, r2
900271ea:	9808      	ldr	r0, [sp, #32]
900271ec:	b2c9      	uxtb	r1, r1
900271ee:	8e73      	ldrh	r3, [r6, #50]	; 0x32
900271f0:	b23f      	sxth	r7, r7
900271f2:	4413      	add	r3, r2
900271f4:	9102      	str	r1, [sp, #8]
900271f6:	4402      	add	r2, r0
900271f8:	fa0f f18b 	sxth.w	r1, fp
900271fc:	f8da 0000 	ldr.w	r0, [sl]
90027200:	b21b      	sxth	r3, r3
90027202:	9100      	str	r1, [sp, #0]
90027204:	b212      	sxth	r2, r2
90027206:	9701      	str	r7, [sp, #4]
90027208:	9905      	ldr	r1, [sp, #20]
9002720a:	6947      	ldr	r7, [r0, #20]
9002720c:	4650      	mov	r0, sl
9002720e:	47b8      	blx	r7
90027210:	464b      	mov	r3, r9
90027212:	e75e      	b.n	900270d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
90027214:	2f00      	cmp	r7, #0
90027216:	da96      	bge.n	90027146 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
90027218:	e78e      	b.n	90027138 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
9002721a:	2900      	cmp	r1, #0
9002721c:	d0f8      	beq.n	90027210 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
9002721e:	e790      	b.n	90027142 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

90027220 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
90027220:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90027224:	4b4a      	ldr	r3, [pc, #296]	; (90027350 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
90027226:	2500      	movs	r5, #0
90027228:	f100 0620 	add.w	r6, r0, #32
9002722c:	4604      	mov	r4, r0
9002722e:	4690      	mov	r8, r2
90027230:	f100 0718 	add.w	r7, r0, #24
90027234:	e9c0 3100 	strd	r3, r1, [r0]
90027238:	e9c0 5502 	strd	r5, r5, [r0, #8]
9002723c:	e9c0 5504 	strd	r5, r5, [r0, #16]
90027240:	e9c0 5506 	strd	r5, r5, [r0, #24]
90027244:	4630      	mov	r0, r6
90027246:	f7ee fcc5 	bl	90015bd4 <_ZN8touchgfx7OutlineC1Ev>
9002724a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
9002724e:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
90027252:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
90027256:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
9002725a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
9002725e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
90027262:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
90027266:	f8d4 c004 	ldr.w	ip, [r4, #4]
9002726a:	9500      	str	r5, [sp, #0]
9002726c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
90027270:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
90027274:	f9b8 2000 	ldrsh.w	r2, [r8]
90027278:	f8b8 0004 	ldrh.w	r0, [r8, #4]
9002727c:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
90027280:	4410      	add	r0, r2
90027282:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
90027286:	b280      	uxth	r0, r0
90027288:	fa0f fa80 	sxth.w	sl, r0
9002728c:	45aa      	cmp	sl, r5
9002728e:	dd5c      	ble.n	9002734a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90027290:	4591      	cmp	r9, r2
90027292:	dd5a      	ble.n	9002734a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
90027294:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
90027298:	f8b8 3006 	ldrh.w	r3, [r8, #6]
9002729c:	440b      	add	r3, r1
9002729e:	b29b      	uxth	r3, r3
900272a0:	b21d      	sxth	r5, r3
900272a2:	2d00      	cmp	r5, #0
900272a4:	dd51      	ble.n	9002734a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
900272a6:	458e      	cmp	lr, r1
900272a8:	dd4f      	ble.n	9002734a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
900272aa:	45d1      	cmp	r9, sl
900272ac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
900272b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
900272b4:	bfb8      	it	lt
900272b6:	fa1f f089 	uxthlt.w	r0, r9
900272ba:	45ae      	cmp	lr, r5
900272bc:	f8ad 2000 	strh.w	r2, [sp]
900272c0:	bfb8      	it	lt
900272c2:	fa1f f38e 	uxthlt.w	r3, lr
900272c6:	1a80      	subs	r0, r0, r2
900272c8:	f8ad 1002 	strh.w	r1, [sp, #2]
900272cc:	1a5b      	subs	r3, r3, r1
900272ce:	f8ad 0004 	strh.w	r0, [sp, #4]
900272d2:	f8ad 3006 	strh.w	r3, [sp, #6]
900272d6:	466d      	mov	r5, sp
900272d8:	e895 0003 	ldmia.w	r5, {r0, r1}
900272dc:	e887 0003 	stmia.w	r7, {r0, r1}
900272e0:	f8dc 3000 	ldr.w	r3, [ip]
900272e4:	4660      	mov	r0, ip
900272e6:	4639      	mov	r1, r7
900272e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900272ea:	4798      	blx	r3
900272ec:	6861      	ldr	r1, [r4, #4]
900272ee:	4628      	mov	r0, r5
900272f0:	3104      	adds	r1, #4
900272f2:	f7f0 fe3f 	bl	90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
900272f6:	4638      	mov	r0, r7
900272f8:	f7f0 fe14 	bl	90017f24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900272fc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90027300:	f8bd 2000 	ldrh.w	r2, [sp]
90027304:	4630      	mov	r0, r6
90027306:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
9002730a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
9002730e:	f7ee fc45 	bl	90015b9c <_ZN8touchgfx7Outline5resetEv>
90027312:	f9bd 3000 	ldrsh.w	r3, [sp]
90027316:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
9002731a:	4620      	mov	r0, r4
9002731c:	015b      	lsls	r3, r3, #5
9002731e:	60a3      	str	r3, [r4, #8]
90027320:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
90027324:	015b      	lsls	r3, r3, #5
90027326:	60e3      	str	r3, [r4, #12]
90027328:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9002732c:	015b      	lsls	r3, r3, #5
9002732e:	6123      	str	r3, [r4, #16]
90027330:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
90027334:	015b      	lsls	r3, r3, #5
90027336:	6163      	str	r3, [r4, #20]
90027338:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
9002733c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
90027340:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
90027344:	b002      	add	sp, #8
90027346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002734a:	2300      	movs	r3, #0
9002734c:	9301      	str	r3, [sp, #4]
9002734e:	e7c2      	b.n	900272d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
90027350:	9002c7c0 	.word	0x9002c7c0

90027354 <_ZN8touchgfx6Canvas5closeEv>:
90027354:	b538      	push	{r3, r4, r5, lr}
90027356:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
9002735a:	4604      	mov	r4, r0
9002735c:	b193      	cbz	r3, 90027384 <_ZN8touchgfx6Canvas5closeEv+0x30>
9002735e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
90027362:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
90027366:	4213      	tst	r3, r2
90027368:	d10c      	bne.n	90027384 <_ZN8touchgfx6Canvas5closeEv+0x30>
9002736a:	f100 0520 	add.w	r5, r0, #32
9002736e:	b123      	cbz	r3, 9002737a <_ZN8touchgfx6Canvas5closeEv+0x26>
90027370:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
90027374:	4628      	mov	r0, r5
90027376:	f7ff fe7b 	bl	90027070 <_ZN8touchgfx10Rasterizer6lineToEii>
9002737a:	4628      	mov	r0, r5
9002737c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
90027380:	f7ff fe76 	bl	90027070 <_ZN8touchgfx10Rasterizer6lineToEii>
90027384:	2300      	movs	r3, #0
90027386:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
9002738a:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
9002738e:	4298      	cmp	r0, r3
90027390:	bf34      	ite	cc
90027392:	2000      	movcc	r0, #0
90027394:	2001      	movcs	r0, #1
90027396:	bd38      	pop	{r3, r4, r5, pc}

90027398 <_ZN8touchgfx6Canvas6renderEh>:
90027398:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
9002739c:	4604      	mov	r4, r0
9002739e:	6840      	ldr	r0, [r0, #4]
900273a0:	460d      	mov	r5, r1
900273a2:	6803      	ldr	r3, [r0, #0]
900273a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900273a6:	4798      	blx	r3
900273a8:	fb10 f105 	smulbb	r1, r0, r5
900273ac:	b289      	uxth	r1, r1
900273ae:	1c4d      	adds	r5, r1, #1
900273b0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
900273b4:	122d      	asrs	r5, r5, #8
900273b6:	f000 8097 	beq.w	900274e8 <_ZN8touchgfx6Canvas6renderEh+0x150>
900273ba:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
900273be:	2b00      	cmp	r3, #0
900273c0:	f000 8092 	beq.w	900274e8 <_ZN8touchgfx6Canvas6renderEh+0x150>
900273c4:	4620      	mov	r0, r4
900273c6:	f7ff ffc5 	bl	90027354 <_ZN8touchgfx6Canvas5closeEv>
900273ca:	4607      	mov	r7, r0
900273cc:	2800      	cmp	r0, #0
900273ce:	d043      	beq.n	90027458 <_ZN8touchgfx6Canvas6renderEh+0xc0>
900273d0:	6863      	ldr	r3, [r4, #4]
900273d2:	4e46      	ldr	r6, [pc, #280]	; (900274ec <_ZN8touchgfx6Canvas6renderEh+0x154>)
900273d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
900273d6:	6837      	ldr	r7, [r6, #0]
900273d8:	6803      	ldr	r3, [r0, #0]
900273da:	689b      	ldr	r3, [r3, #8]
900273dc:	4798      	blx	r3
900273de:	4601      	mov	r1, r0
900273e0:	4638      	mov	r0, r7
900273e2:	f7ec fc51 	bl	90013c88 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
900273e6:	4607      	mov	r7, r0
900273e8:	f7ec f812 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
900273ec:	6803      	ldr	r3, [r0, #0]
900273ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900273f0:	4798      	blx	r3
900273f2:	4680      	mov	r8, r0
900273f4:	f7ec f80c 	bl	90013410 <_ZN8touchgfx3HAL3lcdEv>
900273f8:	6803      	ldr	r3, [r0, #0]
900273fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900273fc:	4798      	blx	r3
900273fe:	280b      	cmp	r0, #11
90027400:	d857      	bhi.n	900274b2 <_ZN8touchgfx6Canvas6renderEh+0x11a>
90027402:	e8df f000 	tbb	[pc, r0]
90027406:	584d      	.short	0x584d
90027408:	2d560668 	.word	0x2d560668
9002740c:	6161613d 	.word	0x6161613d
90027410:	6161      	.short	0x6161
90027412:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90027416:	2208      	movs	r2, #8
90027418:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002741c:	fb91 f2f2 	sdiv	r2, r1, r2
90027420:	fb08 2303 	mla	r3, r8, r3, r2
90027424:	441f      	add	r7, r3
90027426:	424b      	negs	r3, r1
90027428:	f001 0107 	and.w	r1, r1, #7
9002742c:	f003 0307 	and.w	r3, r3, #7
90027430:	bf58      	it	pl
90027432:	4259      	negpl	r1, r3
90027434:	b2c9      	uxtb	r1, r1
90027436:	6860      	ldr	r0, [r4, #4]
90027438:	b2ed      	uxtb	r5, r5
9002743a:	fa0f f388 	sxth.w	r3, r8
9002743e:	463a      	mov	r2, r7
90027440:	e9cd 1500 	strd	r1, r5, [sp]
90027444:	6a81      	ldr	r1, [r0, #40]	; 0x28
90027446:	f104 0020 	add.w	r0, r4, #32
9002744a:	f7ff fe1d 	bl	90027088 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
9002744e:	4607      	mov	r7, r0
90027450:	6830      	ldr	r0, [r6, #0]
90027452:	6803      	ldr	r3, [r0, #0]
90027454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90027456:	4798      	blx	r3
90027458:	4638      	mov	r0, r7
9002745a:	b002      	add	sp, #8
9002745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90027460:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90027464:	2204      	movs	r2, #4
90027466:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002746a:	fb91 f2f2 	sdiv	r2, r1, r2
9002746e:	fb08 2303 	mla	r3, r8, r3, r2
90027472:	441f      	add	r7, r3
90027474:	424b      	negs	r3, r1
90027476:	f001 0103 	and.w	r1, r1, #3
9002747a:	f003 0303 	and.w	r3, r3, #3
9002747e:	e7d7      	b.n	90027430 <_ZN8touchgfx6Canvas6renderEh+0x98>
90027480:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
90027484:	2202      	movs	r2, #2
90027486:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
9002748a:	2900      	cmp	r1, #0
9002748c:	fb91 f2f2 	sdiv	r2, r1, r2
90027490:	f001 0101 	and.w	r1, r1, #1
90027494:	fb08 2303 	mla	r3, r8, r3, r2
90027498:	bfb8      	it	lt
9002749a:	4249      	neglt	r1, r1
9002749c:	441f      	add	r7, r3
9002749e:	e7c9      	b.n	90027434 <_ZN8touchgfx6Canvas6renderEh+0x9c>
900274a0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900274a4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
900274a8:	fb08 f303 	mul.w	r3, r8, r3
900274ac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
900274b0:	441f      	add	r7, r3
900274b2:	2100      	movs	r1, #0
900274b4:	e7bf      	b.n	90027436 <_ZN8touchgfx6Canvas6renderEh+0x9e>
900274b6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900274ba:	2103      	movs	r1, #3
900274bc:	fb08 f203 	mul.w	r2, r8, r3
900274c0:	8b23      	ldrh	r3, [r4, #24]
900274c2:	fb13 2301 	smlabb	r3, r3, r1, r2
900274c6:	e7f3      	b.n	900274b0 <_ZN8touchgfx6Canvas6renderEh+0x118>
900274c8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900274cc:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
900274d0:	fb08 2303 	mla	r3, r8, r3, r2
900274d4:	e7ec      	b.n	900274b0 <_ZN8touchgfx6Canvas6renderEh+0x118>
900274d6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
900274da:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
900274de:	fb08 f303 	mul.w	r3, r8, r3
900274e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
900274e6:	e7e3      	b.n	900274b0 <_ZN8touchgfx6Canvas6renderEh+0x118>
900274e8:	2701      	movs	r7, #1
900274ea:	e7b5      	b.n	90027458 <_ZN8touchgfx6Canvas6renderEh+0xc0>
900274ec:	240281ec 	.word	0x240281ec

900274f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
900274f0:	4b07      	ldr	r3, [pc, #28]	; (90027510 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
900274f2:	b510      	push	{r4, lr}
900274f4:	781b      	ldrb	r3, [r3, #0]
900274f6:	2b01      	cmp	r3, #1
900274f8:	d108      	bne.n	9002750c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
900274fa:	6843      	ldr	r3, [r0, #4]
900274fc:	6814      	ldr	r4, [r2, #0]
900274fe:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90027502:	680b      	ldr	r3, [r1, #0]
90027504:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
90027508:	6013      	str	r3, [r2, #0]
9002750a:	600c      	str	r4, [r1, #0]
9002750c:	bd10      	pop	{r4, pc}
9002750e:	bf00      	nop
90027510:	240281e4 	.word	0x240281e4

90027514 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
90027514:	b513      	push	{r0, r1, r4, lr}
90027516:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
9002751a:	4604      	mov	r4, r0
9002751c:	e9cd 2100 	strd	r2, r1, [sp]
90027520:	b9a3      	cbnz	r3, 9002754c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
90027522:	466a      	mov	r2, sp
90027524:	a901      	add	r1, sp, #4
90027526:	4620      	mov	r0, r4
90027528:	f7ff ffe2 	bl	900274f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
9002752c:	68a3      	ldr	r3, [r4, #8]
9002752e:	9901      	ldr	r1, [sp, #4]
90027530:	9a00      	ldr	r2, [sp, #0]
90027532:	1ac9      	subs	r1, r1, r3
90027534:	68e3      	ldr	r3, [r4, #12]
90027536:	1ad2      	subs	r2, r2, r3
90027538:	9101      	str	r1, [sp, #4]
9002753a:	2a00      	cmp	r2, #0
9002753c:	9200      	str	r2, [sp, #0]
9002753e:	da0b      	bge.n	90027558 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
90027540:	2301      	movs	r3, #1
90027542:	2900      	cmp	r1, #0
90027544:	da0e      	bge.n	90027564 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
90027546:	f043 0304 	orr.w	r3, r3, #4
9002754a:	e013      	b.n	90027574 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
9002754c:	f7ff ff02 	bl	90027354 <_ZN8touchgfx6Canvas5closeEv>
90027550:	2800      	cmp	r0, #0
90027552:	d1e6      	bne.n	90027522 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
90027554:	b002      	add	sp, #8
90027556:	bd10      	pop	{r4, pc}
90027558:	6963      	ldr	r3, [r4, #20]
9002755a:	429a      	cmp	r2, r3
9002755c:	bfac      	ite	ge
9002755e:	2302      	movge	r3, #2
90027560:	2300      	movlt	r3, #0
90027562:	e7ee      	b.n	90027542 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
90027564:	6920      	ldr	r0, [r4, #16]
90027566:	4281      	cmp	r1, r0
90027568:	bfac      	ite	ge
9002756a:	2008      	movge	r0, #8
9002756c:	2000      	movlt	r0, #0
9002756e:	4318      	orrs	r0, r3
90027570:	b2c3      	uxtb	r3, r0
90027572:	b158      	cbz	r0, 9002758c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
90027574:	2200      	movs	r2, #0
90027576:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
9002757a:	9901      	ldr	r1, [sp, #4]
9002757c:	9a00      	ldr	r2, [sp, #0]
9002757e:	66a1      	str	r1, [r4, #104]	; 0x68
90027580:	66e2      	str	r2, [r4, #108]	; 0x6c
90027582:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
90027586:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
9002758a:	e7e3      	b.n	90027554 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
9002758c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90027590:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90027594:	4298      	cmp	r0, r3
90027596:	d803      	bhi.n	900275a0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
90027598:	f104 0020 	add.w	r0, r4, #32
9002759c:	f7ee ffee 	bl	9001657c <_ZN8touchgfx7Outline6moveToEii>
900275a0:	2301      	movs	r3, #1
900275a2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
900275a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900275aa:	2300      	movs	r3, #0
900275ac:	e7e5      	b.n	9002757a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

900275ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
900275ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
900275b0:	ab02      	add	r3, sp, #8
900275b2:	4604      	mov	r4, r0
900275b4:	9101      	str	r1, [sp, #4]
900275b6:	a901      	add	r1, sp, #4
900275b8:	f843 2d08 	str.w	r2, [r3, #-8]!
900275bc:	461a      	mov	r2, r3
900275be:	f7ff ff97 	bl	900274f0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
900275c2:	68a3      	ldr	r3, [r4, #8]
900275c4:	9901      	ldr	r1, [sp, #4]
900275c6:	9a00      	ldr	r2, [sp, #0]
900275c8:	1ac9      	subs	r1, r1, r3
900275ca:	68e3      	ldr	r3, [r4, #12]
900275cc:	1ad2      	subs	r2, r2, r3
900275ce:	9101      	str	r1, [sp, #4]
900275d0:	2a00      	cmp	r2, #0
900275d2:	9200      	str	r2, [sp, #0]
900275d4:	db1c      	blt.n	90027610 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
900275d6:	6963      	ldr	r3, [r4, #20]
900275d8:	429a      	cmp	r2, r3
900275da:	bfac      	ite	ge
900275dc:	2002      	movge	r0, #2
900275de:	2000      	movlt	r0, #0
900275e0:	2900      	cmp	r1, #0
900275e2:	db17      	blt.n	90027614 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
900275e4:	6923      	ldr	r3, [r4, #16]
900275e6:	4299      	cmp	r1, r3
900275e8:	bfac      	ite	ge
900275ea:	2308      	movge	r3, #8
900275ec:	2300      	movlt	r3, #0
900275ee:	4303      	orrs	r3, r0
900275f0:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
900275f4:	b2dd      	uxtb	r5, r3
900275f6:	b978      	cbnz	r0, 90027618 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
900275f8:	f104 0020 	add.w	r0, r4, #32
900275fc:	f7ff fd38 	bl	90027070 <_ZN8touchgfx10Rasterizer6lineToEii>
90027600:	9b01      	ldr	r3, [sp, #4]
90027602:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
90027606:	65e3      	str	r3, [r4, #92]	; 0x5c
90027608:	9b00      	ldr	r3, [sp, #0]
9002760a:	6623      	str	r3, [r4, #96]	; 0x60
9002760c:	b002      	add	sp, #8
9002760e:	bd70      	pop	{r4, r5, r6, pc}
90027610:	2001      	movs	r0, #1
90027612:	e7e5      	b.n	900275e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
90027614:	2304      	movs	r3, #4
90027616:	e7ea      	b.n	900275ee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
90027618:	b113      	cbz	r3, 90027620 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
9002761a:	ea10 0305 	ands.w	r3, r0, r5
9002761e:	d11c      	bne.n	9002765a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
90027620:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
90027624:	f104 0620 	add.w	r6, r4, #32
90027628:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
9002762c:	b98b      	cbnz	r3, 90027652 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
9002762e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
90027632:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
90027636:	4298      	cmp	r0, r3
90027638:	d802      	bhi.n	90027640 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
9002763a:	4630      	mov	r0, r6
9002763c:	f7ee ff9e 	bl	9001657c <_ZN8touchgfx7Outline6moveToEii>
90027640:	2301      	movs	r3, #1
90027642:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
90027646:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9002764a:	4630      	mov	r0, r6
9002764c:	e9dd 2100 	ldrd	r2, r1, [sp]
90027650:	e7d4      	b.n	900275fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
90027652:	4630      	mov	r0, r6
90027654:	f7ff fd0c 	bl	90027070 <_ZN8touchgfx10Rasterizer6lineToEii>
90027658:	e7f7      	b.n	9002764a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
9002765a:	461d      	mov	r5, r3
9002765c:	e7d0      	b.n	90027600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

90027660 <_ZN8touchgfx6CanvasD1Ev>:
90027660:	4b04      	ldr	r3, [pc, #16]	; (90027674 <_ZN8touchgfx6CanvasD1Ev+0x14>)
90027662:	b510      	push	{r4, lr}
90027664:	4604      	mov	r4, r0
90027666:	f840 3b20 	str.w	r3, [r0], #32
9002766a:	f7ee fa8f 	bl	90015b8c <_ZN8touchgfx7OutlineD1Ev>
9002766e:	4620      	mov	r0, r4
90027670:	bd10      	pop	{r4, pc}
90027672:	bf00      	nop
90027674:	9002c7c0 	.word	0x9002c7c0

90027678 <_ZN8touchgfx6CanvasD0Ev>:
90027678:	b510      	push	{r4, lr}
9002767a:	4604      	mov	r4, r0
9002767c:	f7ff fff0 	bl	90027660 <_ZN8touchgfx6CanvasD1Ev>
90027680:	2170      	movs	r1, #112	; 0x70
90027682:	4620      	mov	r0, r4
90027684:	f000 f807 	bl	90027696 <_ZdlPvj>
90027688:	4620      	mov	r0, r4
9002768a:	bd10      	pop	{r4, pc}

9002768c <__aeabi_atexit>:
9002768c:	460b      	mov	r3, r1
9002768e:	4601      	mov	r1, r0
90027690:	4618      	mov	r0, r3
90027692:	f000 b90f 	b.w	900278b4 <__cxa_atexit>

90027696 <_ZdlPvj>:
90027696:	f000 b812 	b.w	900276be <_ZdlPv>

9002769a <__cxa_guard_acquire>:
9002769a:	6803      	ldr	r3, [r0, #0]
9002769c:	07db      	lsls	r3, r3, #31
9002769e:	d406      	bmi.n	900276ae <__cxa_guard_acquire+0x14>
900276a0:	7843      	ldrb	r3, [r0, #1]
900276a2:	b103      	cbz	r3, 900276a6 <__cxa_guard_acquire+0xc>
900276a4:	deff      	udf	#255	; 0xff
900276a6:	2301      	movs	r3, #1
900276a8:	7043      	strb	r3, [r0, #1]
900276aa:	4618      	mov	r0, r3
900276ac:	4770      	bx	lr
900276ae:	2000      	movs	r0, #0
900276b0:	4770      	bx	lr

900276b2 <__cxa_guard_release>:
900276b2:	2301      	movs	r3, #1
900276b4:	6003      	str	r3, [r0, #0]
900276b6:	4770      	bx	lr

900276b8 <__cxa_pure_virtual>:
900276b8:	b508      	push	{r3, lr}
900276ba:	f000 f80f 	bl	900276dc <_ZSt9terminatev>

900276be <_ZdlPv>:
900276be:	f000 b845 	b.w	9002774c <free>

900276c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
900276c2:	b508      	push	{r3, lr}
900276c4:	4780      	blx	r0
900276c6:	f000 f80e 	bl	900276e6 <abort>
	...

900276cc <_ZSt13get_terminatev>:
900276cc:	4b02      	ldr	r3, [pc, #8]	; (900276d8 <_ZSt13get_terminatev+0xc>)
900276ce:	6818      	ldr	r0, [r3, #0]
900276d0:	f3bf 8f5b 	dmb	ish
900276d4:	4770      	bx	lr
900276d6:	bf00      	nop
900276d8:	240000dc 	.word	0x240000dc

900276dc <_ZSt9terminatev>:
900276dc:	b508      	push	{r3, lr}
900276de:	f7ff fff5 	bl	900276cc <_ZSt13get_terminatev>
900276e2:	f7ff ffee 	bl	900276c2 <_ZN10__cxxabiv111__terminateEPFvvE>

900276e6 <abort>:
900276e6:	b508      	push	{r3, lr}
900276e8:	2006      	movs	r0, #6
900276ea:	f000 faf9 	bl	90027ce0 <raise>
900276ee:	2001      	movs	r0, #1
900276f0:	f7dd fbb0 	bl	90004e54 <_exit>

900276f4 <__assert_func>:
900276f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900276f6:	4614      	mov	r4, r2
900276f8:	461a      	mov	r2, r3
900276fa:	4b09      	ldr	r3, [pc, #36]	; (90027720 <__assert_func+0x2c>)
900276fc:	681b      	ldr	r3, [r3, #0]
900276fe:	4605      	mov	r5, r0
90027700:	68d8      	ldr	r0, [r3, #12]
90027702:	b14c      	cbz	r4, 90027718 <__assert_func+0x24>
90027704:	4b07      	ldr	r3, [pc, #28]	; (90027724 <__assert_func+0x30>)
90027706:	9100      	str	r1, [sp, #0]
90027708:	e9cd 3401 	strd	r3, r4, [sp, #4]
9002770c:	4906      	ldr	r1, [pc, #24]	; (90027728 <__assert_func+0x34>)
9002770e:	462b      	mov	r3, r5
90027710:	f000 f982 	bl	90027a18 <fiprintf>
90027714:	f7ff ffe7 	bl	900276e6 <abort>
90027718:	4b04      	ldr	r3, [pc, #16]	; (9002772c <__assert_func+0x38>)
9002771a:	461c      	mov	r4, r3
9002771c:	e7f3      	b.n	90027706 <__assert_func+0x12>
9002771e:	bf00      	nop
90027720:	24000138 	.word	0x24000138
90027724:	9002c7cc 	.word	0x9002c7cc
90027728:	9002c7d9 	.word	0x9002c7d9
9002772c:	9002c807 	.word	0x9002c807

90027730 <atexit>:
90027730:	2300      	movs	r3, #0
90027732:	4601      	mov	r1, r0
90027734:	461a      	mov	r2, r3
90027736:	4618      	mov	r0, r3
90027738:	f000 bb80 	b.w	90027e3c <__register_exitproc>

9002773c <malloc>:
9002773c:	4b02      	ldr	r3, [pc, #8]	; (90027748 <malloc+0xc>)
9002773e:	4601      	mov	r1, r0
90027740:	6818      	ldr	r0, [r3, #0]
90027742:	f000 b82b 	b.w	9002779c <_malloc_r>
90027746:	bf00      	nop
90027748:	24000138 	.word	0x24000138

9002774c <free>:
9002774c:	4b02      	ldr	r3, [pc, #8]	; (90027758 <free+0xc>)
9002774e:	4601      	mov	r1, r0
90027750:	6818      	ldr	r0, [r3, #0]
90027752:	f000 bbd1 	b.w	90027ef8 <_free_r>
90027756:	bf00      	nop
90027758:	24000138 	.word	0x24000138

9002775c <sbrk_aligned>:
9002775c:	b570      	push	{r4, r5, r6, lr}
9002775e:	4e0e      	ldr	r6, [pc, #56]	; (90027798 <sbrk_aligned+0x3c>)
90027760:	460c      	mov	r4, r1
90027762:	6831      	ldr	r1, [r6, #0]
90027764:	4605      	mov	r5, r0
90027766:	b911      	cbnz	r1, 9002776e <sbrk_aligned+0x12>
90027768:	f000 fb0a 	bl	90027d80 <_sbrk_r>
9002776c:	6030      	str	r0, [r6, #0]
9002776e:	4621      	mov	r1, r4
90027770:	4628      	mov	r0, r5
90027772:	f000 fb05 	bl	90027d80 <_sbrk_r>
90027776:	1c43      	adds	r3, r0, #1
90027778:	d00a      	beq.n	90027790 <sbrk_aligned+0x34>
9002777a:	1cc4      	adds	r4, r0, #3
9002777c:	f024 0403 	bic.w	r4, r4, #3
90027780:	42a0      	cmp	r0, r4
90027782:	d007      	beq.n	90027794 <sbrk_aligned+0x38>
90027784:	1a21      	subs	r1, r4, r0
90027786:	4628      	mov	r0, r5
90027788:	f000 fafa 	bl	90027d80 <_sbrk_r>
9002778c:	3001      	adds	r0, #1
9002778e:	d101      	bne.n	90027794 <sbrk_aligned+0x38>
90027790:	f04f 34ff 	mov.w	r4, #4294967295
90027794:	4620      	mov	r0, r4
90027796:	bd70      	pop	{r4, r5, r6, pc}
90027798:	240282f4 	.word	0x240282f4

9002779c <_malloc_r>:
9002779c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900277a0:	1ccd      	adds	r5, r1, #3
900277a2:	f025 0503 	bic.w	r5, r5, #3
900277a6:	3508      	adds	r5, #8
900277a8:	2d0c      	cmp	r5, #12
900277aa:	bf38      	it	cc
900277ac:	250c      	movcc	r5, #12
900277ae:	2d00      	cmp	r5, #0
900277b0:	4607      	mov	r7, r0
900277b2:	db01      	blt.n	900277b8 <_malloc_r+0x1c>
900277b4:	42a9      	cmp	r1, r5
900277b6:	d905      	bls.n	900277c4 <_malloc_r+0x28>
900277b8:	230c      	movs	r3, #12
900277ba:	603b      	str	r3, [r7, #0]
900277bc:	2600      	movs	r6, #0
900277be:	4630      	mov	r0, r6
900277c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900277c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 90027898 <_malloc_r+0xfc>
900277c8:	f000 f868 	bl	9002789c <__malloc_lock>
900277cc:	f8d8 3000 	ldr.w	r3, [r8]
900277d0:	461c      	mov	r4, r3
900277d2:	bb5c      	cbnz	r4, 9002782c <_malloc_r+0x90>
900277d4:	4629      	mov	r1, r5
900277d6:	4638      	mov	r0, r7
900277d8:	f7ff ffc0 	bl	9002775c <sbrk_aligned>
900277dc:	1c43      	adds	r3, r0, #1
900277de:	4604      	mov	r4, r0
900277e0:	d155      	bne.n	9002788e <_malloc_r+0xf2>
900277e2:	f8d8 4000 	ldr.w	r4, [r8]
900277e6:	4626      	mov	r6, r4
900277e8:	2e00      	cmp	r6, #0
900277ea:	d145      	bne.n	90027878 <_malloc_r+0xdc>
900277ec:	2c00      	cmp	r4, #0
900277ee:	d048      	beq.n	90027882 <_malloc_r+0xe6>
900277f0:	6823      	ldr	r3, [r4, #0]
900277f2:	4631      	mov	r1, r6
900277f4:	4638      	mov	r0, r7
900277f6:	eb04 0903 	add.w	r9, r4, r3
900277fa:	f000 fac1 	bl	90027d80 <_sbrk_r>
900277fe:	4581      	cmp	r9, r0
90027800:	d13f      	bne.n	90027882 <_malloc_r+0xe6>
90027802:	6821      	ldr	r1, [r4, #0]
90027804:	1a6d      	subs	r5, r5, r1
90027806:	4629      	mov	r1, r5
90027808:	4638      	mov	r0, r7
9002780a:	f7ff ffa7 	bl	9002775c <sbrk_aligned>
9002780e:	3001      	adds	r0, #1
90027810:	d037      	beq.n	90027882 <_malloc_r+0xe6>
90027812:	6823      	ldr	r3, [r4, #0]
90027814:	442b      	add	r3, r5
90027816:	6023      	str	r3, [r4, #0]
90027818:	f8d8 3000 	ldr.w	r3, [r8]
9002781c:	2b00      	cmp	r3, #0
9002781e:	d038      	beq.n	90027892 <_malloc_r+0xf6>
90027820:	685a      	ldr	r2, [r3, #4]
90027822:	42a2      	cmp	r2, r4
90027824:	d12b      	bne.n	9002787e <_malloc_r+0xe2>
90027826:	2200      	movs	r2, #0
90027828:	605a      	str	r2, [r3, #4]
9002782a:	e00f      	b.n	9002784c <_malloc_r+0xb0>
9002782c:	6822      	ldr	r2, [r4, #0]
9002782e:	1b52      	subs	r2, r2, r5
90027830:	d41f      	bmi.n	90027872 <_malloc_r+0xd6>
90027832:	2a0b      	cmp	r2, #11
90027834:	d917      	bls.n	90027866 <_malloc_r+0xca>
90027836:	1961      	adds	r1, r4, r5
90027838:	42a3      	cmp	r3, r4
9002783a:	6025      	str	r5, [r4, #0]
9002783c:	bf18      	it	ne
9002783e:	6059      	strne	r1, [r3, #4]
90027840:	6863      	ldr	r3, [r4, #4]
90027842:	bf08      	it	eq
90027844:	f8c8 1000 	streq.w	r1, [r8]
90027848:	5162      	str	r2, [r4, r5]
9002784a:	604b      	str	r3, [r1, #4]
9002784c:	4638      	mov	r0, r7
9002784e:	f104 060b 	add.w	r6, r4, #11
90027852:	f000 f829 	bl	900278a8 <__malloc_unlock>
90027856:	f026 0607 	bic.w	r6, r6, #7
9002785a:	1d23      	adds	r3, r4, #4
9002785c:	1af2      	subs	r2, r6, r3
9002785e:	d0ae      	beq.n	900277be <_malloc_r+0x22>
90027860:	1b9b      	subs	r3, r3, r6
90027862:	50a3      	str	r3, [r4, r2]
90027864:	e7ab      	b.n	900277be <_malloc_r+0x22>
90027866:	42a3      	cmp	r3, r4
90027868:	6862      	ldr	r2, [r4, #4]
9002786a:	d1dd      	bne.n	90027828 <_malloc_r+0x8c>
9002786c:	f8c8 2000 	str.w	r2, [r8]
90027870:	e7ec      	b.n	9002784c <_malloc_r+0xb0>
90027872:	4623      	mov	r3, r4
90027874:	6864      	ldr	r4, [r4, #4]
90027876:	e7ac      	b.n	900277d2 <_malloc_r+0x36>
90027878:	4634      	mov	r4, r6
9002787a:	6876      	ldr	r6, [r6, #4]
9002787c:	e7b4      	b.n	900277e8 <_malloc_r+0x4c>
9002787e:	4613      	mov	r3, r2
90027880:	e7cc      	b.n	9002781c <_malloc_r+0x80>
90027882:	230c      	movs	r3, #12
90027884:	603b      	str	r3, [r7, #0]
90027886:	4638      	mov	r0, r7
90027888:	f000 f80e 	bl	900278a8 <__malloc_unlock>
9002788c:	e797      	b.n	900277be <_malloc_r+0x22>
9002788e:	6025      	str	r5, [r4, #0]
90027890:	e7dc      	b.n	9002784c <_malloc_r+0xb0>
90027892:	605b      	str	r3, [r3, #4]
90027894:	deff      	udf	#255	; 0xff
90027896:	bf00      	nop
90027898:	240282f0 	.word	0x240282f0

9002789c <__malloc_lock>:
9002789c:	4801      	ldr	r0, [pc, #4]	; (900278a4 <__malloc_lock+0x8>)
9002789e:	f000 babc 	b.w	90027e1a <__retarget_lock_acquire_recursive>
900278a2:	bf00      	nop
900278a4:	24028439 	.word	0x24028439

900278a8 <__malloc_unlock>:
900278a8:	4801      	ldr	r0, [pc, #4]	; (900278b0 <__malloc_unlock+0x8>)
900278aa:	f000 bab7 	b.w	90027e1c <__retarget_lock_release_recursive>
900278ae:	bf00      	nop
900278b0:	24028439 	.word	0x24028439

900278b4 <__cxa_atexit>:
900278b4:	b510      	push	{r4, lr}
900278b6:	4c05      	ldr	r4, [pc, #20]	; (900278cc <__cxa_atexit+0x18>)
900278b8:	4613      	mov	r3, r2
900278ba:	b12c      	cbz	r4, 900278c8 <__cxa_atexit+0x14>
900278bc:	460a      	mov	r2, r1
900278be:	4601      	mov	r1, r0
900278c0:	2002      	movs	r0, #2
900278c2:	f000 fabb 	bl	90027e3c <__register_exitproc>
900278c6:	bd10      	pop	{r4, pc}
900278c8:	4620      	mov	r0, r4
900278ca:	e7fc      	b.n	900278c6 <__cxa_atexit+0x12>
900278cc:	90027e3d 	.word	0x90027e3d

900278d0 <std>:
900278d0:	2300      	movs	r3, #0
900278d2:	b510      	push	{r4, lr}
900278d4:	4604      	mov	r4, r0
900278d6:	e9c0 3300 	strd	r3, r3, [r0]
900278da:	e9c0 3304 	strd	r3, r3, [r0, #16]
900278de:	6083      	str	r3, [r0, #8]
900278e0:	8181      	strh	r1, [r0, #12]
900278e2:	6643      	str	r3, [r0, #100]	; 0x64
900278e4:	81c2      	strh	r2, [r0, #14]
900278e6:	6183      	str	r3, [r0, #24]
900278e8:	4619      	mov	r1, r3
900278ea:	2208      	movs	r2, #8
900278ec:	305c      	adds	r0, #92	; 0x5c
900278ee:	f000 f9b5 	bl	90027c5c <memset>
900278f2:	4b0d      	ldr	r3, [pc, #52]	; (90027928 <std+0x58>)
900278f4:	6263      	str	r3, [r4, #36]	; 0x24
900278f6:	4b0d      	ldr	r3, [pc, #52]	; (9002792c <std+0x5c>)
900278f8:	62a3      	str	r3, [r4, #40]	; 0x28
900278fa:	4b0d      	ldr	r3, [pc, #52]	; (90027930 <std+0x60>)
900278fc:	62e3      	str	r3, [r4, #44]	; 0x2c
900278fe:	4b0d      	ldr	r3, [pc, #52]	; (90027934 <std+0x64>)
90027900:	6323      	str	r3, [r4, #48]	; 0x30
90027902:	4b0d      	ldr	r3, [pc, #52]	; (90027938 <std+0x68>)
90027904:	6224      	str	r4, [r4, #32]
90027906:	429c      	cmp	r4, r3
90027908:	d006      	beq.n	90027918 <std+0x48>
9002790a:	f103 0268 	add.w	r2, r3, #104	; 0x68
9002790e:	4294      	cmp	r4, r2
90027910:	d002      	beq.n	90027918 <std+0x48>
90027912:	33d0      	adds	r3, #208	; 0xd0
90027914:	429c      	cmp	r4, r3
90027916:	d105      	bne.n	90027924 <std+0x54>
90027918:	f104 0058 	add.w	r0, r4, #88	; 0x58
9002791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027920:	f000 ba7a 	b.w	90027e18 <__retarget_lock_init_recursive>
90027924:	bd10      	pop	{r4, pc}
90027926:	bf00      	nop
90027928:	90027a79 	.word	0x90027a79
9002792c:	90027a9b 	.word	0x90027a9b
90027930:	90027ad3 	.word	0x90027ad3
90027934:	90027af7 	.word	0x90027af7
90027938:	240282f8 	.word	0x240282f8

9002793c <stdio_exit_handler>:
9002793c:	4a02      	ldr	r2, [pc, #8]	; (90027948 <stdio_exit_handler+0xc>)
9002793e:	4903      	ldr	r1, [pc, #12]	; (9002794c <stdio_exit_handler+0x10>)
90027940:	4803      	ldr	r0, [pc, #12]	; (90027950 <stdio_exit_handler+0x14>)
90027942:	f000 b87b 	b.w	90027a3c <_fwalk_sglue>
90027946:	bf00      	nop
90027948:	240000e0 	.word	0x240000e0
9002794c:	90028645 	.word	0x90028645
90027950:	240000ec 	.word	0x240000ec

90027954 <cleanup_stdio>:
90027954:	6841      	ldr	r1, [r0, #4]
90027956:	4b0c      	ldr	r3, [pc, #48]	; (90027988 <cleanup_stdio+0x34>)
90027958:	4299      	cmp	r1, r3
9002795a:	b510      	push	{r4, lr}
9002795c:	4604      	mov	r4, r0
9002795e:	d001      	beq.n	90027964 <cleanup_stdio+0x10>
90027960:	f000 fe70 	bl	90028644 <_fflush_r>
90027964:	68a1      	ldr	r1, [r4, #8]
90027966:	4b09      	ldr	r3, [pc, #36]	; (9002798c <cleanup_stdio+0x38>)
90027968:	4299      	cmp	r1, r3
9002796a:	d002      	beq.n	90027972 <cleanup_stdio+0x1e>
9002796c:	4620      	mov	r0, r4
9002796e:	f000 fe69 	bl	90028644 <_fflush_r>
90027972:	68e1      	ldr	r1, [r4, #12]
90027974:	4b06      	ldr	r3, [pc, #24]	; (90027990 <cleanup_stdio+0x3c>)
90027976:	4299      	cmp	r1, r3
90027978:	d004      	beq.n	90027984 <cleanup_stdio+0x30>
9002797a:	4620      	mov	r0, r4
9002797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027980:	f000 be60 	b.w	90028644 <_fflush_r>
90027984:	bd10      	pop	{r4, pc}
90027986:	bf00      	nop
90027988:	240282f8 	.word	0x240282f8
9002798c:	24028360 	.word	0x24028360
90027990:	240283c8 	.word	0x240283c8

90027994 <global_stdio_init.part.0>:
90027994:	b510      	push	{r4, lr}
90027996:	4b0b      	ldr	r3, [pc, #44]	; (900279c4 <global_stdio_init.part.0+0x30>)
90027998:	4c0b      	ldr	r4, [pc, #44]	; (900279c8 <global_stdio_init.part.0+0x34>)
9002799a:	4a0c      	ldr	r2, [pc, #48]	; (900279cc <global_stdio_init.part.0+0x38>)
9002799c:	601a      	str	r2, [r3, #0]
9002799e:	4620      	mov	r0, r4
900279a0:	2200      	movs	r2, #0
900279a2:	2104      	movs	r1, #4
900279a4:	f7ff ff94 	bl	900278d0 <std>
900279a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
900279ac:	2201      	movs	r2, #1
900279ae:	2109      	movs	r1, #9
900279b0:	f7ff ff8e 	bl	900278d0 <std>
900279b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
900279b8:	2202      	movs	r2, #2
900279ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900279be:	2112      	movs	r1, #18
900279c0:	f7ff bf86 	b.w	900278d0 <std>
900279c4:	24028430 	.word	0x24028430
900279c8:	240282f8 	.word	0x240282f8
900279cc:	9002793d 	.word	0x9002793d

900279d0 <__sfp_lock_acquire>:
900279d0:	4801      	ldr	r0, [pc, #4]	; (900279d8 <__sfp_lock_acquire+0x8>)
900279d2:	f000 ba22 	b.w	90027e1a <__retarget_lock_acquire_recursive>
900279d6:	bf00      	nop
900279d8:	2402843a 	.word	0x2402843a

900279dc <__sfp_lock_release>:
900279dc:	4801      	ldr	r0, [pc, #4]	; (900279e4 <__sfp_lock_release+0x8>)
900279de:	f000 ba1d 	b.w	90027e1c <__retarget_lock_release_recursive>
900279e2:	bf00      	nop
900279e4:	2402843a 	.word	0x2402843a

900279e8 <__sinit>:
900279e8:	b510      	push	{r4, lr}
900279ea:	4604      	mov	r4, r0
900279ec:	f7ff fff0 	bl	900279d0 <__sfp_lock_acquire>
900279f0:	6a23      	ldr	r3, [r4, #32]
900279f2:	b11b      	cbz	r3, 900279fc <__sinit+0x14>
900279f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900279f8:	f7ff bff0 	b.w	900279dc <__sfp_lock_release>
900279fc:	4b04      	ldr	r3, [pc, #16]	; (90027a10 <__sinit+0x28>)
900279fe:	6223      	str	r3, [r4, #32]
90027a00:	4b04      	ldr	r3, [pc, #16]	; (90027a14 <__sinit+0x2c>)
90027a02:	681b      	ldr	r3, [r3, #0]
90027a04:	2b00      	cmp	r3, #0
90027a06:	d1f5      	bne.n	900279f4 <__sinit+0xc>
90027a08:	f7ff ffc4 	bl	90027994 <global_stdio_init.part.0>
90027a0c:	e7f2      	b.n	900279f4 <__sinit+0xc>
90027a0e:	bf00      	nop
90027a10:	90027955 	.word	0x90027955
90027a14:	24028430 	.word	0x24028430

90027a18 <fiprintf>:
90027a18:	b40e      	push	{r1, r2, r3}
90027a1a:	b503      	push	{r0, r1, lr}
90027a1c:	4601      	mov	r1, r0
90027a1e:	ab03      	add	r3, sp, #12
90027a20:	4805      	ldr	r0, [pc, #20]	; (90027a38 <fiprintf+0x20>)
90027a22:	f853 2b04 	ldr.w	r2, [r3], #4
90027a26:	6800      	ldr	r0, [r0, #0]
90027a28:	9301      	str	r3, [sp, #4]
90027a2a:	f000 fadb 	bl	90027fe4 <_vfiprintf_r>
90027a2e:	b002      	add	sp, #8
90027a30:	f85d eb04 	ldr.w	lr, [sp], #4
90027a34:	b003      	add	sp, #12
90027a36:	4770      	bx	lr
90027a38:	24000138 	.word	0x24000138

90027a3c <_fwalk_sglue>:
90027a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027a40:	4607      	mov	r7, r0
90027a42:	4688      	mov	r8, r1
90027a44:	4614      	mov	r4, r2
90027a46:	2600      	movs	r6, #0
90027a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90027a4c:	f1b9 0901 	subs.w	r9, r9, #1
90027a50:	d505      	bpl.n	90027a5e <_fwalk_sglue+0x22>
90027a52:	6824      	ldr	r4, [r4, #0]
90027a54:	2c00      	cmp	r4, #0
90027a56:	d1f7      	bne.n	90027a48 <_fwalk_sglue+0xc>
90027a58:	4630      	mov	r0, r6
90027a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027a5e:	89ab      	ldrh	r3, [r5, #12]
90027a60:	2b01      	cmp	r3, #1
90027a62:	d907      	bls.n	90027a74 <_fwalk_sglue+0x38>
90027a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90027a68:	3301      	adds	r3, #1
90027a6a:	d003      	beq.n	90027a74 <_fwalk_sglue+0x38>
90027a6c:	4629      	mov	r1, r5
90027a6e:	4638      	mov	r0, r7
90027a70:	47c0      	blx	r8
90027a72:	4306      	orrs	r6, r0
90027a74:	3568      	adds	r5, #104	; 0x68
90027a76:	e7e9      	b.n	90027a4c <_fwalk_sglue+0x10>

90027a78 <__sread>:
90027a78:	b510      	push	{r4, lr}
90027a7a:	460c      	mov	r4, r1
90027a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027a80:	f000 f958 	bl	90027d34 <_read_r>
90027a84:	2800      	cmp	r0, #0
90027a86:	bfab      	itete	ge
90027a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90027a8a:	89a3      	ldrhlt	r3, [r4, #12]
90027a8c:	181b      	addge	r3, r3, r0
90027a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90027a92:	bfac      	ite	ge
90027a94:	6563      	strge	r3, [r4, #84]	; 0x54
90027a96:	81a3      	strhlt	r3, [r4, #12]
90027a98:	bd10      	pop	{r4, pc}

90027a9a <__swrite>:
90027a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90027a9e:	461f      	mov	r7, r3
90027aa0:	898b      	ldrh	r3, [r1, #12]
90027aa2:	05db      	lsls	r3, r3, #23
90027aa4:	4605      	mov	r5, r0
90027aa6:	460c      	mov	r4, r1
90027aa8:	4616      	mov	r6, r2
90027aaa:	d505      	bpl.n	90027ab8 <__swrite+0x1e>
90027aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027ab0:	2302      	movs	r3, #2
90027ab2:	2200      	movs	r2, #0
90027ab4:	f000 f92c 	bl	90027d10 <_lseek_r>
90027ab8:	89a3      	ldrh	r3, [r4, #12]
90027aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90027abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90027ac2:	81a3      	strh	r3, [r4, #12]
90027ac4:	4632      	mov	r2, r6
90027ac6:	463b      	mov	r3, r7
90027ac8:	4628      	mov	r0, r5
90027aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90027ace:	f000 b967 	b.w	90027da0 <_write_r>

90027ad2 <__sseek>:
90027ad2:	b510      	push	{r4, lr}
90027ad4:	460c      	mov	r4, r1
90027ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027ada:	f000 f919 	bl	90027d10 <_lseek_r>
90027ade:	1c43      	adds	r3, r0, #1
90027ae0:	89a3      	ldrh	r3, [r4, #12]
90027ae2:	bf15      	itete	ne
90027ae4:	6560      	strne	r0, [r4, #84]	; 0x54
90027ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90027aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90027aee:	81a3      	strheq	r3, [r4, #12]
90027af0:	bf18      	it	ne
90027af2:	81a3      	strhne	r3, [r4, #12]
90027af4:	bd10      	pop	{r4, pc}

90027af6 <__sclose>:
90027af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027afa:	f000 b8f9 	b.w	90027cf0 <_close_r>

90027afe <__swbuf_r>:
90027afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027b00:	460e      	mov	r6, r1
90027b02:	4614      	mov	r4, r2
90027b04:	4605      	mov	r5, r0
90027b06:	b118      	cbz	r0, 90027b10 <__swbuf_r+0x12>
90027b08:	6a03      	ldr	r3, [r0, #32]
90027b0a:	b90b      	cbnz	r3, 90027b10 <__swbuf_r+0x12>
90027b0c:	f7ff ff6c 	bl	900279e8 <__sinit>
90027b10:	69a3      	ldr	r3, [r4, #24]
90027b12:	60a3      	str	r3, [r4, #8]
90027b14:	89a3      	ldrh	r3, [r4, #12]
90027b16:	071a      	lsls	r2, r3, #28
90027b18:	d525      	bpl.n	90027b66 <__swbuf_r+0x68>
90027b1a:	6923      	ldr	r3, [r4, #16]
90027b1c:	b31b      	cbz	r3, 90027b66 <__swbuf_r+0x68>
90027b1e:	6823      	ldr	r3, [r4, #0]
90027b20:	6922      	ldr	r2, [r4, #16]
90027b22:	1a98      	subs	r0, r3, r2
90027b24:	6963      	ldr	r3, [r4, #20]
90027b26:	b2f6      	uxtb	r6, r6
90027b28:	4283      	cmp	r3, r0
90027b2a:	4637      	mov	r7, r6
90027b2c:	dc04      	bgt.n	90027b38 <__swbuf_r+0x3a>
90027b2e:	4621      	mov	r1, r4
90027b30:	4628      	mov	r0, r5
90027b32:	f000 fd87 	bl	90028644 <_fflush_r>
90027b36:	b9e0      	cbnz	r0, 90027b72 <__swbuf_r+0x74>
90027b38:	68a3      	ldr	r3, [r4, #8]
90027b3a:	3b01      	subs	r3, #1
90027b3c:	60a3      	str	r3, [r4, #8]
90027b3e:	6823      	ldr	r3, [r4, #0]
90027b40:	1c5a      	adds	r2, r3, #1
90027b42:	6022      	str	r2, [r4, #0]
90027b44:	701e      	strb	r6, [r3, #0]
90027b46:	6962      	ldr	r2, [r4, #20]
90027b48:	1c43      	adds	r3, r0, #1
90027b4a:	429a      	cmp	r2, r3
90027b4c:	d004      	beq.n	90027b58 <__swbuf_r+0x5a>
90027b4e:	89a3      	ldrh	r3, [r4, #12]
90027b50:	07db      	lsls	r3, r3, #31
90027b52:	d506      	bpl.n	90027b62 <__swbuf_r+0x64>
90027b54:	2e0a      	cmp	r6, #10
90027b56:	d104      	bne.n	90027b62 <__swbuf_r+0x64>
90027b58:	4621      	mov	r1, r4
90027b5a:	4628      	mov	r0, r5
90027b5c:	f000 fd72 	bl	90028644 <_fflush_r>
90027b60:	b938      	cbnz	r0, 90027b72 <__swbuf_r+0x74>
90027b62:	4638      	mov	r0, r7
90027b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90027b66:	4621      	mov	r1, r4
90027b68:	4628      	mov	r0, r5
90027b6a:	f000 f805 	bl	90027b78 <__swsetup_r>
90027b6e:	2800      	cmp	r0, #0
90027b70:	d0d5      	beq.n	90027b1e <__swbuf_r+0x20>
90027b72:	f04f 37ff 	mov.w	r7, #4294967295
90027b76:	e7f4      	b.n	90027b62 <__swbuf_r+0x64>

90027b78 <__swsetup_r>:
90027b78:	b538      	push	{r3, r4, r5, lr}
90027b7a:	4b2a      	ldr	r3, [pc, #168]	; (90027c24 <__swsetup_r+0xac>)
90027b7c:	4605      	mov	r5, r0
90027b7e:	6818      	ldr	r0, [r3, #0]
90027b80:	460c      	mov	r4, r1
90027b82:	b118      	cbz	r0, 90027b8c <__swsetup_r+0x14>
90027b84:	6a03      	ldr	r3, [r0, #32]
90027b86:	b90b      	cbnz	r3, 90027b8c <__swsetup_r+0x14>
90027b88:	f7ff ff2e 	bl	900279e8 <__sinit>
90027b8c:	89a3      	ldrh	r3, [r4, #12]
90027b8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027b92:	0718      	lsls	r0, r3, #28
90027b94:	d422      	bmi.n	90027bdc <__swsetup_r+0x64>
90027b96:	06d9      	lsls	r1, r3, #27
90027b98:	d407      	bmi.n	90027baa <__swsetup_r+0x32>
90027b9a:	2309      	movs	r3, #9
90027b9c:	602b      	str	r3, [r5, #0]
90027b9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90027ba2:	81a3      	strh	r3, [r4, #12]
90027ba4:	f04f 30ff 	mov.w	r0, #4294967295
90027ba8:	e034      	b.n	90027c14 <__swsetup_r+0x9c>
90027baa:	0758      	lsls	r0, r3, #29
90027bac:	d512      	bpl.n	90027bd4 <__swsetup_r+0x5c>
90027bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027bb0:	b141      	cbz	r1, 90027bc4 <__swsetup_r+0x4c>
90027bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027bb6:	4299      	cmp	r1, r3
90027bb8:	d002      	beq.n	90027bc0 <__swsetup_r+0x48>
90027bba:	4628      	mov	r0, r5
90027bbc:	f000 f99c 	bl	90027ef8 <_free_r>
90027bc0:	2300      	movs	r3, #0
90027bc2:	6363      	str	r3, [r4, #52]	; 0x34
90027bc4:	89a3      	ldrh	r3, [r4, #12]
90027bc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90027bca:	81a3      	strh	r3, [r4, #12]
90027bcc:	2300      	movs	r3, #0
90027bce:	6063      	str	r3, [r4, #4]
90027bd0:	6923      	ldr	r3, [r4, #16]
90027bd2:	6023      	str	r3, [r4, #0]
90027bd4:	89a3      	ldrh	r3, [r4, #12]
90027bd6:	f043 0308 	orr.w	r3, r3, #8
90027bda:	81a3      	strh	r3, [r4, #12]
90027bdc:	6923      	ldr	r3, [r4, #16]
90027bde:	b94b      	cbnz	r3, 90027bf4 <__swsetup_r+0x7c>
90027be0:	89a3      	ldrh	r3, [r4, #12]
90027be2:	f403 7320 	and.w	r3, r3, #640	; 0x280
90027be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90027bea:	d003      	beq.n	90027bf4 <__swsetup_r+0x7c>
90027bec:	4621      	mov	r1, r4
90027bee:	4628      	mov	r0, r5
90027bf0:	f000 fd76 	bl	900286e0 <__smakebuf_r>
90027bf4:	89a0      	ldrh	r0, [r4, #12]
90027bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027bfa:	f010 0301 	ands.w	r3, r0, #1
90027bfe:	d00a      	beq.n	90027c16 <__swsetup_r+0x9e>
90027c00:	2300      	movs	r3, #0
90027c02:	60a3      	str	r3, [r4, #8]
90027c04:	6963      	ldr	r3, [r4, #20]
90027c06:	425b      	negs	r3, r3
90027c08:	61a3      	str	r3, [r4, #24]
90027c0a:	6923      	ldr	r3, [r4, #16]
90027c0c:	b943      	cbnz	r3, 90027c20 <__swsetup_r+0xa8>
90027c0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90027c12:	d1c4      	bne.n	90027b9e <__swsetup_r+0x26>
90027c14:	bd38      	pop	{r3, r4, r5, pc}
90027c16:	0781      	lsls	r1, r0, #30
90027c18:	bf58      	it	pl
90027c1a:	6963      	ldrpl	r3, [r4, #20]
90027c1c:	60a3      	str	r3, [r4, #8]
90027c1e:	e7f4      	b.n	90027c0a <__swsetup_r+0x92>
90027c20:	2000      	movs	r0, #0
90027c22:	e7f7      	b.n	90027c14 <__swsetup_r+0x9c>
90027c24:	24000138 	.word	0x24000138

90027c28 <memmove>:
90027c28:	4288      	cmp	r0, r1
90027c2a:	b510      	push	{r4, lr}
90027c2c:	eb01 0402 	add.w	r4, r1, r2
90027c30:	d902      	bls.n	90027c38 <memmove+0x10>
90027c32:	4284      	cmp	r4, r0
90027c34:	4623      	mov	r3, r4
90027c36:	d807      	bhi.n	90027c48 <memmove+0x20>
90027c38:	1e43      	subs	r3, r0, #1
90027c3a:	42a1      	cmp	r1, r4
90027c3c:	d008      	beq.n	90027c50 <memmove+0x28>
90027c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
90027c42:	f803 2f01 	strb.w	r2, [r3, #1]!
90027c46:	e7f8      	b.n	90027c3a <memmove+0x12>
90027c48:	4402      	add	r2, r0
90027c4a:	4601      	mov	r1, r0
90027c4c:	428a      	cmp	r2, r1
90027c4e:	d100      	bne.n	90027c52 <memmove+0x2a>
90027c50:	bd10      	pop	{r4, pc}
90027c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90027c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
90027c5a:	e7f7      	b.n	90027c4c <memmove+0x24>

90027c5c <memset>:
90027c5c:	4402      	add	r2, r0
90027c5e:	4603      	mov	r3, r0
90027c60:	4293      	cmp	r3, r2
90027c62:	d100      	bne.n	90027c66 <memset+0xa>
90027c64:	4770      	bx	lr
90027c66:	f803 1b01 	strb.w	r1, [r3], #1
90027c6a:	e7f9      	b.n	90027c60 <memset+0x4>

90027c6c <strncmp>:
90027c6c:	b510      	push	{r4, lr}
90027c6e:	b16a      	cbz	r2, 90027c8c <strncmp+0x20>
90027c70:	3901      	subs	r1, #1
90027c72:	1884      	adds	r4, r0, r2
90027c74:	f810 2b01 	ldrb.w	r2, [r0], #1
90027c78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
90027c7c:	429a      	cmp	r2, r3
90027c7e:	d103      	bne.n	90027c88 <strncmp+0x1c>
90027c80:	42a0      	cmp	r0, r4
90027c82:	d001      	beq.n	90027c88 <strncmp+0x1c>
90027c84:	2a00      	cmp	r2, #0
90027c86:	d1f5      	bne.n	90027c74 <strncmp+0x8>
90027c88:	1ad0      	subs	r0, r2, r3
90027c8a:	bd10      	pop	{r4, pc}
90027c8c:	4610      	mov	r0, r2
90027c8e:	e7fc      	b.n	90027c8a <strncmp+0x1e>

90027c90 <_raise_r>:
90027c90:	291f      	cmp	r1, #31
90027c92:	b538      	push	{r3, r4, r5, lr}
90027c94:	4604      	mov	r4, r0
90027c96:	460d      	mov	r5, r1
90027c98:	d904      	bls.n	90027ca4 <_raise_r+0x14>
90027c9a:	2316      	movs	r3, #22
90027c9c:	6003      	str	r3, [r0, #0]
90027c9e:	f04f 30ff 	mov.w	r0, #4294967295
90027ca2:	bd38      	pop	{r3, r4, r5, pc}
90027ca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90027ca6:	b112      	cbz	r2, 90027cae <_raise_r+0x1e>
90027ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90027cac:	b94b      	cbnz	r3, 90027cc2 <_raise_r+0x32>
90027cae:	4620      	mov	r0, r4
90027cb0:	f000 f864 	bl	90027d7c <_getpid_r>
90027cb4:	462a      	mov	r2, r5
90027cb6:	4601      	mov	r1, r0
90027cb8:	4620      	mov	r0, r4
90027cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90027cbe:	f000 b84b 	b.w	90027d58 <_kill_r>
90027cc2:	2b01      	cmp	r3, #1
90027cc4:	d00a      	beq.n	90027cdc <_raise_r+0x4c>
90027cc6:	1c59      	adds	r1, r3, #1
90027cc8:	d103      	bne.n	90027cd2 <_raise_r+0x42>
90027cca:	2316      	movs	r3, #22
90027ccc:	6003      	str	r3, [r0, #0]
90027cce:	2001      	movs	r0, #1
90027cd0:	e7e7      	b.n	90027ca2 <_raise_r+0x12>
90027cd2:	2400      	movs	r4, #0
90027cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90027cd8:	4628      	mov	r0, r5
90027cda:	4798      	blx	r3
90027cdc:	2000      	movs	r0, #0
90027cde:	e7e0      	b.n	90027ca2 <_raise_r+0x12>

90027ce0 <raise>:
90027ce0:	4b02      	ldr	r3, [pc, #8]	; (90027cec <raise+0xc>)
90027ce2:	4601      	mov	r1, r0
90027ce4:	6818      	ldr	r0, [r3, #0]
90027ce6:	f7ff bfd3 	b.w	90027c90 <_raise_r>
90027cea:	bf00      	nop
90027cec:	24000138 	.word	0x24000138

90027cf0 <_close_r>:
90027cf0:	b538      	push	{r3, r4, r5, lr}
90027cf2:	4d06      	ldr	r5, [pc, #24]	; (90027d0c <_close_r+0x1c>)
90027cf4:	2300      	movs	r3, #0
90027cf6:	4604      	mov	r4, r0
90027cf8:	4608      	mov	r0, r1
90027cfa:	602b      	str	r3, [r5, #0]
90027cfc:	f7dd f8cc 	bl	90004e98 <_close>
90027d00:	1c43      	adds	r3, r0, #1
90027d02:	d102      	bne.n	90027d0a <_close_r+0x1a>
90027d04:	682b      	ldr	r3, [r5, #0]
90027d06:	b103      	cbz	r3, 90027d0a <_close_r+0x1a>
90027d08:	6023      	str	r3, [r4, #0]
90027d0a:	bd38      	pop	{r3, r4, r5, pc}
90027d0c:	24028434 	.word	0x24028434

90027d10 <_lseek_r>:
90027d10:	b538      	push	{r3, r4, r5, lr}
90027d12:	4d07      	ldr	r5, [pc, #28]	; (90027d30 <_lseek_r+0x20>)
90027d14:	4604      	mov	r4, r0
90027d16:	4608      	mov	r0, r1
90027d18:	4611      	mov	r1, r2
90027d1a:	2200      	movs	r2, #0
90027d1c:	602a      	str	r2, [r5, #0]
90027d1e:	461a      	mov	r2, r3
90027d20:	f7dd f8c6 	bl	90004eb0 <_lseek>
90027d24:	1c43      	adds	r3, r0, #1
90027d26:	d102      	bne.n	90027d2e <_lseek_r+0x1e>
90027d28:	682b      	ldr	r3, [r5, #0]
90027d2a:	b103      	cbz	r3, 90027d2e <_lseek_r+0x1e>
90027d2c:	6023      	str	r3, [r4, #0]
90027d2e:	bd38      	pop	{r3, r4, r5, pc}
90027d30:	24028434 	.word	0x24028434

90027d34 <_read_r>:
90027d34:	b538      	push	{r3, r4, r5, lr}
90027d36:	4d07      	ldr	r5, [pc, #28]	; (90027d54 <_read_r+0x20>)
90027d38:	4604      	mov	r4, r0
90027d3a:	4608      	mov	r0, r1
90027d3c:	4611      	mov	r1, r2
90027d3e:	2200      	movs	r2, #0
90027d40:	602a      	str	r2, [r5, #0]
90027d42:	461a      	mov	r2, r3
90027d44:	f7dd f88c 	bl	90004e60 <_read>
90027d48:	1c43      	adds	r3, r0, #1
90027d4a:	d102      	bne.n	90027d52 <_read_r+0x1e>
90027d4c:	682b      	ldr	r3, [r5, #0]
90027d4e:	b103      	cbz	r3, 90027d52 <_read_r+0x1e>
90027d50:	6023      	str	r3, [r4, #0]
90027d52:	bd38      	pop	{r3, r4, r5, pc}
90027d54:	24028434 	.word	0x24028434

90027d58 <_kill_r>:
90027d58:	b538      	push	{r3, r4, r5, lr}
90027d5a:	4d07      	ldr	r5, [pc, #28]	; (90027d78 <_kill_r+0x20>)
90027d5c:	2300      	movs	r3, #0
90027d5e:	4604      	mov	r4, r0
90027d60:	4608      	mov	r0, r1
90027d62:	4611      	mov	r1, r2
90027d64:	602b      	str	r3, [r5, #0]
90027d66:	f7dd f86b 	bl	90004e40 <_kill>
90027d6a:	1c43      	adds	r3, r0, #1
90027d6c:	d102      	bne.n	90027d74 <_kill_r+0x1c>
90027d6e:	682b      	ldr	r3, [r5, #0]
90027d70:	b103      	cbz	r3, 90027d74 <_kill_r+0x1c>
90027d72:	6023      	str	r3, [r4, #0]
90027d74:	bd38      	pop	{r3, r4, r5, pc}
90027d76:	bf00      	nop
90027d78:	24028434 	.word	0x24028434

90027d7c <_getpid_r>:
90027d7c:	f7dd b85e 	b.w	90004e3c <_getpid>

90027d80 <_sbrk_r>:
90027d80:	b538      	push	{r3, r4, r5, lr}
90027d82:	4d06      	ldr	r5, [pc, #24]	; (90027d9c <_sbrk_r+0x1c>)
90027d84:	2300      	movs	r3, #0
90027d86:	4604      	mov	r4, r0
90027d88:	4608      	mov	r0, r1
90027d8a:	602b      	str	r3, [r5, #0]
90027d8c:	f7dd f892 	bl	90004eb4 <_sbrk>
90027d90:	1c43      	adds	r3, r0, #1
90027d92:	d102      	bne.n	90027d9a <_sbrk_r+0x1a>
90027d94:	682b      	ldr	r3, [r5, #0]
90027d96:	b103      	cbz	r3, 90027d9a <_sbrk_r+0x1a>
90027d98:	6023      	str	r3, [r4, #0]
90027d9a:	bd38      	pop	{r3, r4, r5, pc}
90027d9c:	24028434 	.word	0x24028434

90027da0 <_write_r>:
90027da0:	b538      	push	{r3, r4, r5, lr}
90027da2:	4d07      	ldr	r5, [pc, #28]	; (90027dc0 <_write_r+0x20>)
90027da4:	4604      	mov	r4, r0
90027da6:	4608      	mov	r0, r1
90027da8:	4611      	mov	r1, r2
90027daa:	2200      	movs	r2, #0
90027dac:	602a      	str	r2, [r5, #0]
90027dae:	461a      	mov	r2, r3
90027db0:	f7dd f864 	bl	90004e7c <_write>
90027db4:	1c43      	adds	r3, r0, #1
90027db6:	d102      	bne.n	90027dbe <_write_r+0x1e>
90027db8:	682b      	ldr	r3, [r5, #0]
90027dba:	b103      	cbz	r3, 90027dbe <_write_r+0x1e>
90027dbc:	6023      	str	r3, [r4, #0]
90027dbe:	bd38      	pop	{r3, r4, r5, pc}
90027dc0:	24028434 	.word	0x24028434

90027dc4 <__errno>:
90027dc4:	4b01      	ldr	r3, [pc, #4]	; (90027dcc <__errno+0x8>)
90027dc6:	6818      	ldr	r0, [r3, #0]
90027dc8:	4770      	bx	lr
90027dca:	bf00      	nop
90027dcc:	24000138 	.word	0x24000138

90027dd0 <__libc_init_array>:
90027dd0:	b570      	push	{r4, r5, r6, lr}
90027dd2:	4d0d      	ldr	r5, [pc, #52]	; (90027e08 <__libc_init_array+0x38>)
90027dd4:	4c0d      	ldr	r4, [pc, #52]	; (90027e0c <__libc_init_array+0x3c>)
90027dd6:	1b64      	subs	r4, r4, r5
90027dd8:	10a4      	asrs	r4, r4, #2
90027dda:	2600      	movs	r6, #0
90027ddc:	42a6      	cmp	r6, r4
90027dde:	d109      	bne.n	90027df4 <__libc_init_array+0x24>
90027de0:	4d0b      	ldr	r5, [pc, #44]	; (90027e10 <__libc_init_array+0x40>)
90027de2:	4c0c      	ldr	r4, [pc, #48]	; (90027e14 <__libc_init_array+0x44>)
90027de4:	f000 fcda 	bl	9002879c <_init>
90027de8:	1b64      	subs	r4, r4, r5
90027dea:	10a4      	asrs	r4, r4, #2
90027dec:	2600      	movs	r6, #0
90027dee:	42a6      	cmp	r6, r4
90027df0:	d105      	bne.n	90027dfe <__libc_init_array+0x2e>
90027df2:	bd70      	pop	{r4, r5, r6, pc}
90027df4:	f855 3b04 	ldr.w	r3, [r5], #4
90027df8:	4798      	blx	r3
90027dfa:	3601      	adds	r6, #1
90027dfc:	e7ee      	b.n	90027ddc <__libc_init_array+0xc>
90027dfe:	f855 3b04 	ldr.w	r3, [r5], #4
90027e02:	4798      	blx	r3
90027e04:	3601      	adds	r6, #1
90027e06:	e7f2      	b.n	90027dee <__libc_init_array+0x1e>
90027e08:	9002c9f8 	.word	0x9002c9f8
90027e0c:	9002c9f8 	.word	0x9002c9f8
90027e10:	9002c9f8 	.word	0x9002c9f8
90027e14:	9002ca14 	.word	0x9002ca14

90027e18 <__retarget_lock_init_recursive>:
90027e18:	4770      	bx	lr

90027e1a <__retarget_lock_acquire_recursive>:
90027e1a:	4770      	bx	lr

90027e1c <__retarget_lock_release_recursive>:
90027e1c:	4770      	bx	lr

90027e1e <memcpy>:
90027e1e:	440a      	add	r2, r1
90027e20:	4291      	cmp	r1, r2
90027e22:	f100 33ff 	add.w	r3, r0, #4294967295
90027e26:	d100      	bne.n	90027e2a <memcpy+0xc>
90027e28:	4770      	bx	lr
90027e2a:	b510      	push	{r4, lr}
90027e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
90027e30:	f803 4f01 	strb.w	r4, [r3, #1]!
90027e34:	4291      	cmp	r1, r2
90027e36:	d1f9      	bne.n	90027e2c <memcpy+0xe>
90027e38:	bd10      	pop	{r4, pc}
	...

90027e3c <__register_exitproc>:
90027e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027e40:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90027ef4 <__register_exitproc+0xb8>
90027e44:	4606      	mov	r6, r0
90027e46:	f8d8 0000 	ldr.w	r0, [r8]
90027e4a:	461f      	mov	r7, r3
90027e4c:	460d      	mov	r5, r1
90027e4e:	4691      	mov	r9, r2
90027e50:	f7ff ffe3 	bl	90027e1a <__retarget_lock_acquire_recursive>
90027e54:	4b23      	ldr	r3, [pc, #140]	; (90027ee4 <__register_exitproc+0xa8>)
90027e56:	681c      	ldr	r4, [r3, #0]
90027e58:	b934      	cbnz	r4, 90027e68 <__register_exitproc+0x2c>
90027e5a:	4c23      	ldr	r4, [pc, #140]	; (90027ee8 <__register_exitproc+0xac>)
90027e5c:	601c      	str	r4, [r3, #0]
90027e5e:	4b23      	ldr	r3, [pc, #140]	; (90027eec <__register_exitproc+0xb0>)
90027e60:	b113      	cbz	r3, 90027e68 <__register_exitproc+0x2c>
90027e62:	681b      	ldr	r3, [r3, #0]
90027e64:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90027e68:	6863      	ldr	r3, [r4, #4]
90027e6a:	2b1f      	cmp	r3, #31
90027e6c:	dd07      	ble.n	90027e7e <__register_exitproc+0x42>
90027e6e:	f8d8 0000 	ldr.w	r0, [r8]
90027e72:	f7ff ffd3 	bl	90027e1c <__retarget_lock_release_recursive>
90027e76:	f04f 30ff 	mov.w	r0, #4294967295
90027e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027e7e:	b32e      	cbz	r6, 90027ecc <__register_exitproc+0x90>
90027e80:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90027e84:	b968      	cbnz	r0, 90027ea2 <__register_exitproc+0x66>
90027e86:	4b1a      	ldr	r3, [pc, #104]	; (90027ef0 <__register_exitproc+0xb4>)
90027e88:	2b00      	cmp	r3, #0
90027e8a:	d0f0      	beq.n	90027e6e <__register_exitproc+0x32>
90027e8c:	f44f 7084 	mov.w	r0, #264	; 0x108
90027e90:	f7ff fc54 	bl	9002773c <malloc>
90027e94:	2800      	cmp	r0, #0
90027e96:	d0ea      	beq.n	90027e6e <__register_exitproc+0x32>
90027e98:	2300      	movs	r3, #0
90027e9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90027e9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90027ea2:	6863      	ldr	r3, [r4, #4]
90027ea4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90027ea8:	2201      	movs	r2, #1
90027eaa:	409a      	lsls	r2, r3
90027eac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90027eb0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90027eb4:	4313      	orrs	r3, r2
90027eb6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90027eba:	2e02      	cmp	r6, #2
90027ebc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90027ec0:	bf02      	ittt	eq
90027ec2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90027ec6:	4313      	orreq	r3, r2
90027ec8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90027ecc:	6863      	ldr	r3, [r4, #4]
90027ece:	f8d8 0000 	ldr.w	r0, [r8]
90027ed2:	1c5a      	adds	r2, r3, #1
90027ed4:	3302      	adds	r3, #2
90027ed6:	6062      	str	r2, [r4, #4]
90027ed8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90027edc:	f7ff ff9e 	bl	90027e1c <__retarget_lock_release_recursive>
90027ee0:	2000      	movs	r0, #0
90027ee2:	e7ca      	b.n	90027e7a <__register_exitproc+0x3e>
90027ee4:	240284c8 	.word	0x240284c8
90027ee8:	2402843c 	.word	0x2402843c
90027eec:	9002c808 	.word	0x9002c808
90027ef0:	9002773d 	.word	0x9002773d
90027ef4:	2400013c 	.word	0x2400013c

90027ef8 <_free_r>:
90027ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
90027efa:	2900      	cmp	r1, #0
90027efc:	d044      	beq.n	90027f88 <_free_r+0x90>
90027efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
90027f02:	9001      	str	r0, [sp, #4]
90027f04:	2b00      	cmp	r3, #0
90027f06:	f1a1 0404 	sub.w	r4, r1, #4
90027f0a:	bfb8      	it	lt
90027f0c:	18e4      	addlt	r4, r4, r3
90027f0e:	f7ff fcc5 	bl	9002789c <__malloc_lock>
90027f12:	4a1e      	ldr	r2, [pc, #120]	; (90027f8c <_free_r+0x94>)
90027f14:	9801      	ldr	r0, [sp, #4]
90027f16:	6813      	ldr	r3, [r2, #0]
90027f18:	b933      	cbnz	r3, 90027f28 <_free_r+0x30>
90027f1a:	6063      	str	r3, [r4, #4]
90027f1c:	6014      	str	r4, [r2, #0]
90027f1e:	b003      	add	sp, #12
90027f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90027f24:	f7ff bcc0 	b.w	900278a8 <__malloc_unlock>
90027f28:	42a3      	cmp	r3, r4
90027f2a:	d908      	bls.n	90027f3e <_free_r+0x46>
90027f2c:	6825      	ldr	r5, [r4, #0]
90027f2e:	1961      	adds	r1, r4, r5
90027f30:	428b      	cmp	r3, r1
90027f32:	bf01      	itttt	eq
90027f34:	6819      	ldreq	r1, [r3, #0]
90027f36:	685b      	ldreq	r3, [r3, #4]
90027f38:	1949      	addeq	r1, r1, r5
90027f3a:	6021      	streq	r1, [r4, #0]
90027f3c:	e7ed      	b.n	90027f1a <_free_r+0x22>
90027f3e:	461a      	mov	r2, r3
90027f40:	685b      	ldr	r3, [r3, #4]
90027f42:	b10b      	cbz	r3, 90027f48 <_free_r+0x50>
90027f44:	42a3      	cmp	r3, r4
90027f46:	d9fa      	bls.n	90027f3e <_free_r+0x46>
90027f48:	6811      	ldr	r1, [r2, #0]
90027f4a:	1855      	adds	r5, r2, r1
90027f4c:	42a5      	cmp	r5, r4
90027f4e:	d10b      	bne.n	90027f68 <_free_r+0x70>
90027f50:	6824      	ldr	r4, [r4, #0]
90027f52:	4421      	add	r1, r4
90027f54:	1854      	adds	r4, r2, r1
90027f56:	42a3      	cmp	r3, r4
90027f58:	6011      	str	r1, [r2, #0]
90027f5a:	d1e0      	bne.n	90027f1e <_free_r+0x26>
90027f5c:	681c      	ldr	r4, [r3, #0]
90027f5e:	685b      	ldr	r3, [r3, #4]
90027f60:	6053      	str	r3, [r2, #4]
90027f62:	440c      	add	r4, r1
90027f64:	6014      	str	r4, [r2, #0]
90027f66:	e7da      	b.n	90027f1e <_free_r+0x26>
90027f68:	d902      	bls.n	90027f70 <_free_r+0x78>
90027f6a:	230c      	movs	r3, #12
90027f6c:	6003      	str	r3, [r0, #0]
90027f6e:	e7d6      	b.n	90027f1e <_free_r+0x26>
90027f70:	6825      	ldr	r5, [r4, #0]
90027f72:	1961      	adds	r1, r4, r5
90027f74:	428b      	cmp	r3, r1
90027f76:	bf04      	itt	eq
90027f78:	6819      	ldreq	r1, [r3, #0]
90027f7a:	685b      	ldreq	r3, [r3, #4]
90027f7c:	6063      	str	r3, [r4, #4]
90027f7e:	bf04      	itt	eq
90027f80:	1949      	addeq	r1, r1, r5
90027f82:	6021      	streq	r1, [r4, #0]
90027f84:	6054      	str	r4, [r2, #4]
90027f86:	e7ca      	b.n	90027f1e <_free_r+0x26>
90027f88:	b003      	add	sp, #12
90027f8a:	bd30      	pop	{r4, r5, pc}
90027f8c:	240282f0 	.word	0x240282f0

90027f90 <__sfputc_r>:
90027f90:	6893      	ldr	r3, [r2, #8]
90027f92:	3b01      	subs	r3, #1
90027f94:	2b00      	cmp	r3, #0
90027f96:	b410      	push	{r4}
90027f98:	6093      	str	r3, [r2, #8]
90027f9a:	da08      	bge.n	90027fae <__sfputc_r+0x1e>
90027f9c:	6994      	ldr	r4, [r2, #24]
90027f9e:	42a3      	cmp	r3, r4
90027fa0:	db01      	blt.n	90027fa6 <__sfputc_r+0x16>
90027fa2:	290a      	cmp	r1, #10
90027fa4:	d103      	bne.n	90027fae <__sfputc_r+0x1e>
90027fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
90027faa:	f7ff bda8 	b.w	90027afe <__swbuf_r>
90027fae:	6813      	ldr	r3, [r2, #0]
90027fb0:	1c58      	adds	r0, r3, #1
90027fb2:	6010      	str	r0, [r2, #0]
90027fb4:	7019      	strb	r1, [r3, #0]
90027fb6:	4608      	mov	r0, r1
90027fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
90027fbc:	4770      	bx	lr

90027fbe <__sfputs_r>:
90027fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027fc0:	4606      	mov	r6, r0
90027fc2:	460f      	mov	r7, r1
90027fc4:	4614      	mov	r4, r2
90027fc6:	18d5      	adds	r5, r2, r3
90027fc8:	42ac      	cmp	r4, r5
90027fca:	d101      	bne.n	90027fd0 <__sfputs_r+0x12>
90027fcc:	2000      	movs	r0, #0
90027fce:	e007      	b.n	90027fe0 <__sfputs_r+0x22>
90027fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
90027fd4:	463a      	mov	r2, r7
90027fd6:	4630      	mov	r0, r6
90027fd8:	f7ff ffda 	bl	90027f90 <__sfputc_r>
90027fdc:	1c43      	adds	r3, r0, #1
90027fde:	d1f3      	bne.n	90027fc8 <__sfputs_r+0xa>
90027fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90027fe4 <_vfiprintf_r>:
90027fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90027fe8:	460d      	mov	r5, r1
90027fea:	b09d      	sub	sp, #116	; 0x74
90027fec:	4614      	mov	r4, r2
90027fee:	4698      	mov	r8, r3
90027ff0:	4606      	mov	r6, r0
90027ff2:	b118      	cbz	r0, 90027ffc <_vfiprintf_r+0x18>
90027ff4:	6a03      	ldr	r3, [r0, #32]
90027ff6:	b90b      	cbnz	r3, 90027ffc <_vfiprintf_r+0x18>
90027ff8:	f7ff fcf6 	bl	900279e8 <__sinit>
90027ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027ffe:	07d9      	lsls	r1, r3, #31
90028000:	d405      	bmi.n	9002800e <_vfiprintf_r+0x2a>
90028002:	89ab      	ldrh	r3, [r5, #12]
90028004:	059a      	lsls	r2, r3, #22
90028006:	d402      	bmi.n	9002800e <_vfiprintf_r+0x2a>
90028008:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002800a:	f7ff ff06 	bl	90027e1a <__retarget_lock_acquire_recursive>
9002800e:	89ab      	ldrh	r3, [r5, #12]
90028010:	071b      	lsls	r3, r3, #28
90028012:	d501      	bpl.n	90028018 <_vfiprintf_r+0x34>
90028014:	692b      	ldr	r3, [r5, #16]
90028016:	b99b      	cbnz	r3, 90028040 <_vfiprintf_r+0x5c>
90028018:	4629      	mov	r1, r5
9002801a:	4630      	mov	r0, r6
9002801c:	f7ff fdac 	bl	90027b78 <__swsetup_r>
90028020:	b170      	cbz	r0, 90028040 <_vfiprintf_r+0x5c>
90028022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90028024:	07dc      	lsls	r4, r3, #31
90028026:	d504      	bpl.n	90028032 <_vfiprintf_r+0x4e>
90028028:	f04f 30ff 	mov.w	r0, #4294967295
9002802c:	b01d      	add	sp, #116	; 0x74
9002802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90028032:	89ab      	ldrh	r3, [r5, #12]
90028034:	0598      	lsls	r0, r3, #22
90028036:	d4f7      	bmi.n	90028028 <_vfiprintf_r+0x44>
90028038:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002803a:	f7ff feef 	bl	90027e1c <__retarget_lock_release_recursive>
9002803e:	e7f3      	b.n	90028028 <_vfiprintf_r+0x44>
90028040:	2300      	movs	r3, #0
90028042:	9309      	str	r3, [sp, #36]	; 0x24
90028044:	2320      	movs	r3, #32
90028046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9002804a:	f8cd 800c 	str.w	r8, [sp, #12]
9002804e:	2330      	movs	r3, #48	; 0x30
90028050:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 90028204 <_vfiprintf_r+0x220>
90028054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90028058:	f04f 0901 	mov.w	r9, #1
9002805c:	4623      	mov	r3, r4
9002805e:	469a      	mov	sl, r3
90028060:	f813 2b01 	ldrb.w	r2, [r3], #1
90028064:	b10a      	cbz	r2, 9002806a <_vfiprintf_r+0x86>
90028066:	2a25      	cmp	r2, #37	; 0x25
90028068:	d1f9      	bne.n	9002805e <_vfiprintf_r+0x7a>
9002806a:	ebba 0b04 	subs.w	fp, sl, r4
9002806e:	d00b      	beq.n	90028088 <_vfiprintf_r+0xa4>
90028070:	465b      	mov	r3, fp
90028072:	4622      	mov	r2, r4
90028074:	4629      	mov	r1, r5
90028076:	4630      	mov	r0, r6
90028078:	f7ff ffa1 	bl	90027fbe <__sfputs_r>
9002807c:	3001      	adds	r0, #1
9002807e:	f000 80a9 	beq.w	900281d4 <_vfiprintf_r+0x1f0>
90028082:	9a09      	ldr	r2, [sp, #36]	; 0x24
90028084:	445a      	add	r2, fp
90028086:	9209      	str	r2, [sp, #36]	; 0x24
90028088:	f89a 3000 	ldrb.w	r3, [sl]
9002808c:	2b00      	cmp	r3, #0
9002808e:	f000 80a1 	beq.w	900281d4 <_vfiprintf_r+0x1f0>
90028092:	2300      	movs	r3, #0
90028094:	f04f 32ff 	mov.w	r2, #4294967295
90028098:	e9cd 2305 	strd	r2, r3, [sp, #20]
9002809c:	f10a 0a01 	add.w	sl, sl, #1
900280a0:	9304      	str	r3, [sp, #16]
900280a2:	9307      	str	r3, [sp, #28]
900280a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900280a8:	931a      	str	r3, [sp, #104]	; 0x68
900280aa:	4654      	mov	r4, sl
900280ac:	2205      	movs	r2, #5
900280ae:	f814 1b01 	ldrb.w	r1, [r4], #1
900280b2:	4854      	ldr	r0, [pc, #336]	; (90028204 <_vfiprintf_r+0x220>)
900280b4:	f7d8 f924 	bl	90000300 <memchr>
900280b8:	9a04      	ldr	r2, [sp, #16]
900280ba:	b9d8      	cbnz	r0, 900280f4 <_vfiprintf_r+0x110>
900280bc:	06d1      	lsls	r1, r2, #27
900280be:	bf44      	itt	mi
900280c0:	2320      	movmi	r3, #32
900280c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900280c6:	0713      	lsls	r3, r2, #28
900280c8:	bf44      	itt	mi
900280ca:	232b      	movmi	r3, #43	; 0x2b
900280cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900280d0:	f89a 3000 	ldrb.w	r3, [sl]
900280d4:	2b2a      	cmp	r3, #42	; 0x2a
900280d6:	d015      	beq.n	90028104 <_vfiprintf_r+0x120>
900280d8:	9a07      	ldr	r2, [sp, #28]
900280da:	4654      	mov	r4, sl
900280dc:	2000      	movs	r0, #0
900280de:	f04f 0c0a 	mov.w	ip, #10
900280e2:	4621      	mov	r1, r4
900280e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900280e8:	3b30      	subs	r3, #48	; 0x30
900280ea:	2b09      	cmp	r3, #9
900280ec:	d94d      	bls.n	9002818a <_vfiprintf_r+0x1a6>
900280ee:	b1b0      	cbz	r0, 9002811e <_vfiprintf_r+0x13a>
900280f0:	9207      	str	r2, [sp, #28]
900280f2:	e014      	b.n	9002811e <_vfiprintf_r+0x13a>
900280f4:	eba0 0308 	sub.w	r3, r0, r8
900280f8:	fa09 f303 	lsl.w	r3, r9, r3
900280fc:	4313      	orrs	r3, r2
900280fe:	9304      	str	r3, [sp, #16]
90028100:	46a2      	mov	sl, r4
90028102:	e7d2      	b.n	900280aa <_vfiprintf_r+0xc6>
90028104:	9b03      	ldr	r3, [sp, #12]
90028106:	1d19      	adds	r1, r3, #4
90028108:	681b      	ldr	r3, [r3, #0]
9002810a:	9103      	str	r1, [sp, #12]
9002810c:	2b00      	cmp	r3, #0
9002810e:	bfbb      	ittet	lt
90028110:	425b      	neglt	r3, r3
90028112:	f042 0202 	orrlt.w	r2, r2, #2
90028116:	9307      	strge	r3, [sp, #28]
90028118:	9307      	strlt	r3, [sp, #28]
9002811a:	bfb8      	it	lt
9002811c:	9204      	strlt	r2, [sp, #16]
9002811e:	7823      	ldrb	r3, [r4, #0]
90028120:	2b2e      	cmp	r3, #46	; 0x2e
90028122:	d10c      	bne.n	9002813e <_vfiprintf_r+0x15a>
90028124:	7863      	ldrb	r3, [r4, #1]
90028126:	2b2a      	cmp	r3, #42	; 0x2a
90028128:	d134      	bne.n	90028194 <_vfiprintf_r+0x1b0>
9002812a:	9b03      	ldr	r3, [sp, #12]
9002812c:	1d1a      	adds	r2, r3, #4
9002812e:	681b      	ldr	r3, [r3, #0]
90028130:	9203      	str	r2, [sp, #12]
90028132:	2b00      	cmp	r3, #0
90028134:	bfb8      	it	lt
90028136:	f04f 33ff 	movlt.w	r3, #4294967295
9002813a:	3402      	adds	r4, #2
9002813c:	9305      	str	r3, [sp, #20]
9002813e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90028214 <_vfiprintf_r+0x230>
90028142:	7821      	ldrb	r1, [r4, #0]
90028144:	2203      	movs	r2, #3
90028146:	4650      	mov	r0, sl
90028148:	f7d8 f8da 	bl	90000300 <memchr>
9002814c:	b138      	cbz	r0, 9002815e <_vfiprintf_r+0x17a>
9002814e:	9b04      	ldr	r3, [sp, #16]
90028150:	eba0 000a 	sub.w	r0, r0, sl
90028154:	2240      	movs	r2, #64	; 0x40
90028156:	4082      	lsls	r2, r0
90028158:	4313      	orrs	r3, r2
9002815a:	3401      	adds	r4, #1
9002815c:	9304      	str	r3, [sp, #16]
9002815e:	f814 1b01 	ldrb.w	r1, [r4], #1
90028162:	4829      	ldr	r0, [pc, #164]	; (90028208 <_vfiprintf_r+0x224>)
90028164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90028168:	2206      	movs	r2, #6
9002816a:	f7d8 f8c9 	bl	90000300 <memchr>
9002816e:	2800      	cmp	r0, #0
90028170:	d03f      	beq.n	900281f2 <_vfiprintf_r+0x20e>
90028172:	4b26      	ldr	r3, [pc, #152]	; (9002820c <_vfiprintf_r+0x228>)
90028174:	bb1b      	cbnz	r3, 900281be <_vfiprintf_r+0x1da>
90028176:	9b03      	ldr	r3, [sp, #12]
90028178:	3307      	adds	r3, #7
9002817a:	f023 0307 	bic.w	r3, r3, #7
9002817e:	3308      	adds	r3, #8
90028180:	9303      	str	r3, [sp, #12]
90028182:	9b09      	ldr	r3, [sp, #36]	; 0x24
90028184:	443b      	add	r3, r7
90028186:	9309      	str	r3, [sp, #36]	; 0x24
90028188:	e768      	b.n	9002805c <_vfiprintf_r+0x78>
9002818a:	fb0c 3202 	mla	r2, ip, r2, r3
9002818e:	460c      	mov	r4, r1
90028190:	2001      	movs	r0, #1
90028192:	e7a6      	b.n	900280e2 <_vfiprintf_r+0xfe>
90028194:	2300      	movs	r3, #0
90028196:	3401      	adds	r4, #1
90028198:	9305      	str	r3, [sp, #20]
9002819a:	4619      	mov	r1, r3
9002819c:	f04f 0c0a 	mov.w	ip, #10
900281a0:	4620      	mov	r0, r4
900281a2:	f810 2b01 	ldrb.w	r2, [r0], #1
900281a6:	3a30      	subs	r2, #48	; 0x30
900281a8:	2a09      	cmp	r2, #9
900281aa:	d903      	bls.n	900281b4 <_vfiprintf_r+0x1d0>
900281ac:	2b00      	cmp	r3, #0
900281ae:	d0c6      	beq.n	9002813e <_vfiprintf_r+0x15a>
900281b0:	9105      	str	r1, [sp, #20]
900281b2:	e7c4      	b.n	9002813e <_vfiprintf_r+0x15a>
900281b4:	fb0c 2101 	mla	r1, ip, r1, r2
900281b8:	4604      	mov	r4, r0
900281ba:	2301      	movs	r3, #1
900281bc:	e7f0      	b.n	900281a0 <_vfiprintf_r+0x1bc>
900281be:	ab03      	add	r3, sp, #12
900281c0:	9300      	str	r3, [sp, #0]
900281c2:	462a      	mov	r2, r5
900281c4:	4b12      	ldr	r3, [pc, #72]	; (90028210 <_vfiprintf_r+0x22c>)
900281c6:	a904      	add	r1, sp, #16
900281c8:	4630      	mov	r0, r6
900281ca:	f3af 8000 	nop.w
900281ce:	4607      	mov	r7, r0
900281d0:	1c78      	adds	r0, r7, #1
900281d2:	d1d6      	bne.n	90028182 <_vfiprintf_r+0x19e>
900281d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900281d6:	07d9      	lsls	r1, r3, #31
900281d8:	d405      	bmi.n	900281e6 <_vfiprintf_r+0x202>
900281da:	89ab      	ldrh	r3, [r5, #12]
900281dc:	059a      	lsls	r2, r3, #22
900281de:	d402      	bmi.n	900281e6 <_vfiprintf_r+0x202>
900281e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
900281e2:	f7ff fe1b 	bl	90027e1c <__retarget_lock_release_recursive>
900281e6:	89ab      	ldrh	r3, [r5, #12]
900281e8:	065b      	lsls	r3, r3, #25
900281ea:	f53f af1d 	bmi.w	90028028 <_vfiprintf_r+0x44>
900281ee:	9809      	ldr	r0, [sp, #36]	; 0x24
900281f0:	e71c      	b.n	9002802c <_vfiprintf_r+0x48>
900281f2:	ab03      	add	r3, sp, #12
900281f4:	9300      	str	r3, [sp, #0]
900281f6:	462a      	mov	r2, r5
900281f8:	4b05      	ldr	r3, [pc, #20]	; (90028210 <_vfiprintf_r+0x22c>)
900281fa:	a904      	add	r1, sp, #16
900281fc:	4630      	mov	r0, r6
900281fe:	f000 f879 	bl	900282f4 <_printf_i>
90028202:	e7e4      	b.n	900281ce <_vfiprintf_r+0x1ea>
90028204:	9002c80c 	.word	0x9002c80c
90028208:	9002c816 	.word	0x9002c816
9002820c:	00000000 	.word	0x00000000
90028210:	90027fbf 	.word	0x90027fbf
90028214:	9002c812 	.word	0x9002c812

90028218 <_printf_common>:
90028218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002821c:	4616      	mov	r6, r2
9002821e:	4699      	mov	r9, r3
90028220:	688a      	ldr	r2, [r1, #8]
90028222:	690b      	ldr	r3, [r1, #16]
90028224:	f8dd 8020 	ldr.w	r8, [sp, #32]
90028228:	4293      	cmp	r3, r2
9002822a:	bfb8      	it	lt
9002822c:	4613      	movlt	r3, r2
9002822e:	6033      	str	r3, [r6, #0]
90028230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90028234:	4607      	mov	r7, r0
90028236:	460c      	mov	r4, r1
90028238:	b10a      	cbz	r2, 9002823e <_printf_common+0x26>
9002823a:	3301      	adds	r3, #1
9002823c:	6033      	str	r3, [r6, #0]
9002823e:	6823      	ldr	r3, [r4, #0]
90028240:	0699      	lsls	r1, r3, #26
90028242:	bf42      	ittt	mi
90028244:	6833      	ldrmi	r3, [r6, #0]
90028246:	3302      	addmi	r3, #2
90028248:	6033      	strmi	r3, [r6, #0]
9002824a:	6825      	ldr	r5, [r4, #0]
9002824c:	f015 0506 	ands.w	r5, r5, #6
90028250:	d106      	bne.n	90028260 <_printf_common+0x48>
90028252:	f104 0a19 	add.w	sl, r4, #25
90028256:	68e3      	ldr	r3, [r4, #12]
90028258:	6832      	ldr	r2, [r6, #0]
9002825a:	1a9b      	subs	r3, r3, r2
9002825c:	42ab      	cmp	r3, r5
9002825e:	dc26      	bgt.n	900282ae <_printf_common+0x96>
90028260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90028264:	1e13      	subs	r3, r2, #0
90028266:	6822      	ldr	r2, [r4, #0]
90028268:	bf18      	it	ne
9002826a:	2301      	movne	r3, #1
9002826c:	0692      	lsls	r2, r2, #26
9002826e:	d42b      	bmi.n	900282c8 <_printf_common+0xb0>
90028270:	f104 0243 	add.w	r2, r4, #67	; 0x43
90028274:	4649      	mov	r1, r9
90028276:	4638      	mov	r0, r7
90028278:	47c0      	blx	r8
9002827a:	3001      	adds	r0, #1
9002827c:	d01e      	beq.n	900282bc <_printf_common+0xa4>
9002827e:	6823      	ldr	r3, [r4, #0]
90028280:	6922      	ldr	r2, [r4, #16]
90028282:	f003 0306 	and.w	r3, r3, #6
90028286:	2b04      	cmp	r3, #4
90028288:	bf02      	ittt	eq
9002828a:	68e5      	ldreq	r5, [r4, #12]
9002828c:	6833      	ldreq	r3, [r6, #0]
9002828e:	1aed      	subeq	r5, r5, r3
90028290:	68a3      	ldr	r3, [r4, #8]
90028292:	bf0c      	ite	eq
90028294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90028298:	2500      	movne	r5, #0
9002829a:	4293      	cmp	r3, r2
9002829c:	bfc4      	itt	gt
9002829e:	1a9b      	subgt	r3, r3, r2
900282a0:	18ed      	addgt	r5, r5, r3
900282a2:	2600      	movs	r6, #0
900282a4:	341a      	adds	r4, #26
900282a6:	42b5      	cmp	r5, r6
900282a8:	d11a      	bne.n	900282e0 <_printf_common+0xc8>
900282aa:	2000      	movs	r0, #0
900282ac:	e008      	b.n	900282c0 <_printf_common+0xa8>
900282ae:	2301      	movs	r3, #1
900282b0:	4652      	mov	r2, sl
900282b2:	4649      	mov	r1, r9
900282b4:	4638      	mov	r0, r7
900282b6:	47c0      	blx	r8
900282b8:	3001      	adds	r0, #1
900282ba:	d103      	bne.n	900282c4 <_printf_common+0xac>
900282bc:	f04f 30ff 	mov.w	r0, #4294967295
900282c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900282c4:	3501      	adds	r5, #1
900282c6:	e7c6      	b.n	90028256 <_printf_common+0x3e>
900282c8:	18e1      	adds	r1, r4, r3
900282ca:	1c5a      	adds	r2, r3, #1
900282cc:	2030      	movs	r0, #48	; 0x30
900282ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
900282d2:	4422      	add	r2, r4
900282d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900282d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900282dc:	3302      	adds	r3, #2
900282de:	e7c7      	b.n	90028270 <_printf_common+0x58>
900282e0:	2301      	movs	r3, #1
900282e2:	4622      	mov	r2, r4
900282e4:	4649      	mov	r1, r9
900282e6:	4638      	mov	r0, r7
900282e8:	47c0      	blx	r8
900282ea:	3001      	adds	r0, #1
900282ec:	d0e6      	beq.n	900282bc <_printf_common+0xa4>
900282ee:	3601      	adds	r6, #1
900282f0:	e7d9      	b.n	900282a6 <_printf_common+0x8e>
	...

900282f4 <_printf_i>:
900282f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900282f8:	7e0f      	ldrb	r7, [r1, #24]
900282fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900282fc:	2f78      	cmp	r7, #120	; 0x78
900282fe:	4691      	mov	r9, r2
90028300:	4680      	mov	r8, r0
90028302:	460c      	mov	r4, r1
90028304:	469a      	mov	sl, r3
90028306:	f101 0243 	add.w	r2, r1, #67	; 0x43
9002830a:	d807      	bhi.n	9002831c <_printf_i+0x28>
9002830c:	2f62      	cmp	r7, #98	; 0x62
9002830e:	d80a      	bhi.n	90028326 <_printf_i+0x32>
90028310:	2f00      	cmp	r7, #0
90028312:	f000 80d4 	beq.w	900284be <_printf_i+0x1ca>
90028316:	2f58      	cmp	r7, #88	; 0x58
90028318:	f000 80c0 	beq.w	9002849c <_printf_i+0x1a8>
9002831c:	f104 0542 	add.w	r5, r4, #66	; 0x42
90028320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90028324:	e03a      	b.n	9002839c <_printf_i+0xa8>
90028326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9002832a:	2b15      	cmp	r3, #21
9002832c:	d8f6      	bhi.n	9002831c <_printf_i+0x28>
9002832e:	a101      	add	r1, pc, #4	; (adr r1, 90028334 <_printf_i+0x40>)
90028330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90028334:	9002838d 	.word	0x9002838d
90028338:	900283a1 	.word	0x900283a1
9002833c:	9002831d 	.word	0x9002831d
90028340:	9002831d 	.word	0x9002831d
90028344:	9002831d 	.word	0x9002831d
90028348:	9002831d 	.word	0x9002831d
9002834c:	900283a1 	.word	0x900283a1
90028350:	9002831d 	.word	0x9002831d
90028354:	9002831d 	.word	0x9002831d
90028358:	9002831d 	.word	0x9002831d
9002835c:	9002831d 	.word	0x9002831d
90028360:	900284a5 	.word	0x900284a5
90028364:	900283cd 	.word	0x900283cd
90028368:	9002845f 	.word	0x9002845f
9002836c:	9002831d 	.word	0x9002831d
90028370:	9002831d 	.word	0x9002831d
90028374:	900284c7 	.word	0x900284c7
90028378:	9002831d 	.word	0x9002831d
9002837c:	900283cd 	.word	0x900283cd
90028380:	9002831d 	.word	0x9002831d
90028384:	9002831d 	.word	0x9002831d
90028388:	90028467 	.word	0x90028467
9002838c:	682b      	ldr	r3, [r5, #0]
9002838e:	1d1a      	adds	r2, r3, #4
90028390:	681b      	ldr	r3, [r3, #0]
90028392:	602a      	str	r2, [r5, #0]
90028394:	f104 0542 	add.w	r5, r4, #66	; 0x42
90028398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9002839c:	2301      	movs	r3, #1
9002839e:	e09f      	b.n	900284e0 <_printf_i+0x1ec>
900283a0:	6820      	ldr	r0, [r4, #0]
900283a2:	682b      	ldr	r3, [r5, #0]
900283a4:	0607      	lsls	r7, r0, #24
900283a6:	f103 0104 	add.w	r1, r3, #4
900283aa:	6029      	str	r1, [r5, #0]
900283ac:	d501      	bpl.n	900283b2 <_printf_i+0xbe>
900283ae:	681e      	ldr	r6, [r3, #0]
900283b0:	e003      	b.n	900283ba <_printf_i+0xc6>
900283b2:	0646      	lsls	r6, r0, #25
900283b4:	d5fb      	bpl.n	900283ae <_printf_i+0xba>
900283b6:	f9b3 6000 	ldrsh.w	r6, [r3]
900283ba:	2e00      	cmp	r6, #0
900283bc:	da03      	bge.n	900283c6 <_printf_i+0xd2>
900283be:	232d      	movs	r3, #45	; 0x2d
900283c0:	4276      	negs	r6, r6
900283c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900283c6:	485a      	ldr	r0, [pc, #360]	; (90028530 <_printf_i+0x23c>)
900283c8:	230a      	movs	r3, #10
900283ca:	e012      	b.n	900283f2 <_printf_i+0xfe>
900283cc:	682b      	ldr	r3, [r5, #0]
900283ce:	6820      	ldr	r0, [r4, #0]
900283d0:	1d19      	adds	r1, r3, #4
900283d2:	6029      	str	r1, [r5, #0]
900283d4:	0605      	lsls	r5, r0, #24
900283d6:	d501      	bpl.n	900283dc <_printf_i+0xe8>
900283d8:	681e      	ldr	r6, [r3, #0]
900283da:	e002      	b.n	900283e2 <_printf_i+0xee>
900283dc:	0641      	lsls	r1, r0, #25
900283de:	d5fb      	bpl.n	900283d8 <_printf_i+0xe4>
900283e0:	881e      	ldrh	r6, [r3, #0]
900283e2:	4853      	ldr	r0, [pc, #332]	; (90028530 <_printf_i+0x23c>)
900283e4:	2f6f      	cmp	r7, #111	; 0x6f
900283e6:	bf0c      	ite	eq
900283e8:	2308      	moveq	r3, #8
900283ea:	230a      	movne	r3, #10
900283ec:	2100      	movs	r1, #0
900283ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900283f2:	6865      	ldr	r5, [r4, #4]
900283f4:	60a5      	str	r5, [r4, #8]
900283f6:	2d00      	cmp	r5, #0
900283f8:	bfa2      	ittt	ge
900283fa:	6821      	ldrge	r1, [r4, #0]
900283fc:	f021 0104 	bicge.w	r1, r1, #4
90028400:	6021      	strge	r1, [r4, #0]
90028402:	b90e      	cbnz	r6, 90028408 <_printf_i+0x114>
90028404:	2d00      	cmp	r5, #0
90028406:	d04b      	beq.n	900284a0 <_printf_i+0x1ac>
90028408:	4615      	mov	r5, r2
9002840a:	fbb6 f1f3 	udiv	r1, r6, r3
9002840e:	fb03 6711 	mls	r7, r3, r1, r6
90028412:	5dc7      	ldrb	r7, [r0, r7]
90028414:	f805 7d01 	strb.w	r7, [r5, #-1]!
90028418:	4637      	mov	r7, r6
9002841a:	42bb      	cmp	r3, r7
9002841c:	460e      	mov	r6, r1
9002841e:	d9f4      	bls.n	9002840a <_printf_i+0x116>
90028420:	2b08      	cmp	r3, #8
90028422:	d10b      	bne.n	9002843c <_printf_i+0x148>
90028424:	6823      	ldr	r3, [r4, #0]
90028426:	07de      	lsls	r6, r3, #31
90028428:	d508      	bpl.n	9002843c <_printf_i+0x148>
9002842a:	6923      	ldr	r3, [r4, #16]
9002842c:	6861      	ldr	r1, [r4, #4]
9002842e:	4299      	cmp	r1, r3
90028430:	bfde      	ittt	le
90028432:	2330      	movle	r3, #48	; 0x30
90028434:	f805 3c01 	strble.w	r3, [r5, #-1]
90028438:	f105 35ff 	addle.w	r5, r5, #4294967295
9002843c:	1b52      	subs	r2, r2, r5
9002843e:	6122      	str	r2, [r4, #16]
90028440:	f8cd a000 	str.w	sl, [sp]
90028444:	464b      	mov	r3, r9
90028446:	aa03      	add	r2, sp, #12
90028448:	4621      	mov	r1, r4
9002844a:	4640      	mov	r0, r8
9002844c:	f7ff fee4 	bl	90028218 <_printf_common>
90028450:	3001      	adds	r0, #1
90028452:	d14a      	bne.n	900284ea <_printf_i+0x1f6>
90028454:	f04f 30ff 	mov.w	r0, #4294967295
90028458:	b004      	add	sp, #16
9002845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002845e:	6823      	ldr	r3, [r4, #0]
90028460:	f043 0320 	orr.w	r3, r3, #32
90028464:	6023      	str	r3, [r4, #0]
90028466:	4833      	ldr	r0, [pc, #204]	; (90028534 <_printf_i+0x240>)
90028468:	2778      	movs	r7, #120	; 0x78
9002846a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9002846e:	6823      	ldr	r3, [r4, #0]
90028470:	6829      	ldr	r1, [r5, #0]
90028472:	061f      	lsls	r7, r3, #24
90028474:	f851 6b04 	ldr.w	r6, [r1], #4
90028478:	d402      	bmi.n	90028480 <_printf_i+0x18c>
9002847a:	065f      	lsls	r7, r3, #25
9002847c:	bf48      	it	mi
9002847e:	b2b6      	uxthmi	r6, r6
90028480:	07df      	lsls	r7, r3, #31
90028482:	bf48      	it	mi
90028484:	f043 0320 	orrmi.w	r3, r3, #32
90028488:	6029      	str	r1, [r5, #0]
9002848a:	bf48      	it	mi
9002848c:	6023      	strmi	r3, [r4, #0]
9002848e:	b91e      	cbnz	r6, 90028498 <_printf_i+0x1a4>
90028490:	6823      	ldr	r3, [r4, #0]
90028492:	f023 0320 	bic.w	r3, r3, #32
90028496:	6023      	str	r3, [r4, #0]
90028498:	2310      	movs	r3, #16
9002849a:	e7a7      	b.n	900283ec <_printf_i+0xf8>
9002849c:	4824      	ldr	r0, [pc, #144]	; (90028530 <_printf_i+0x23c>)
9002849e:	e7e4      	b.n	9002846a <_printf_i+0x176>
900284a0:	4615      	mov	r5, r2
900284a2:	e7bd      	b.n	90028420 <_printf_i+0x12c>
900284a4:	682b      	ldr	r3, [r5, #0]
900284a6:	6826      	ldr	r6, [r4, #0]
900284a8:	6961      	ldr	r1, [r4, #20]
900284aa:	1d18      	adds	r0, r3, #4
900284ac:	6028      	str	r0, [r5, #0]
900284ae:	0635      	lsls	r5, r6, #24
900284b0:	681b      	ldr	r3, [r3, #0]
900284b2:	d501      	bpl.n	900284b8 <_printf_i+0x1c4>
900284b4:	6019      	str	r1, [r3, #0]
900284b6:	e002      	b.n	900284be <_printf_i+0x1ca>
900284b8:	0670      	lsls	r0, r6, #25
900284ba:	d5fb      	bpl.n	900284b4 <_printf_i+0x1c0>
900284bc:	8019      	strh	r1, [r3, #0]
900284be:	2300      	movs	r3, #0
900284c0:	6123      	str	r3, [r4, #16]
900284c2:	4615      	mov	r5, r2
900284c4:	e7bc      	b.n	90028440 <_printf_i+0x14c>
900284c6:	682b      	ldr	r3, [r5, #0]
900284c8:	1d1a      	adds	r2, r3, #4
900284ca:	602a      	str	r2, [r5, #0]
900284cc:	681d      	ldr	r5, [r3, #0]
900284ce:	6862      	ldr	r2, [r4, #4]
900284d0:	2100      	movs	r1, #0
900284d2:	4628      	mov	r0, r5
900284d4:	f7d7 ff14 	bl	90000300 <memchr>
900284d8:	b108      	cbz	r0, 900284de <_printf_i+0x1ea>
900284da:	1b40      	subs	r0, r0, r5
900284dc:	6060      	str	r0, [r4, #4]
900284de:	6863      	ldr	r3, [r4, #4]
900284e0:	6123      	str	r3, [r4, #16]
900284e2:	2300      	movs	r3, #0
900284e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900284e8:	e7aa      	b.n	90028440 <_printf_i+0x14c>
900284ea:	6923      	ldr	r3, [r4, #16]
900284ec:	462a      	mov	r2, r5
900284ee:	4649      	mov	r1, r9
900284f0:	4640      	mov	r0, r8
900284f2:	47d0      	blx	sl
900284f4:	3001      	adds	r0, #1
900284f6:	d0ad      	beq.n	90028454 <_printf_i+0x160>
900284f8:	6823      	ldr	r3, [r4, #0]
900284fa:	079b      	lsls	r3, r3, #30
900284fc:	d413      	bmi.n	90028526 <_printf_i+0x232>
900284fe:	68e0      	ldr	r0, [r4, #12]
90028500:	9b03      	ldr	r3, [sp, #12]
90028502:	4298      	cmp	r0, r3
90028504:	bfb8      	it	lt
90028506:	4618      	movlt	r0, r3
90028508:	e7a6      	b.n	90028458 <_printf_i+0x164>
9002850a:	2301      	movs	r3, #1
9002850c:	4632      	mov	r2, r6
9002850e:	4649      	mov	r1, r9
90028510:	4640      	mov	r0, r8
90028512:	47d0      	blx	sl
90028514:	3001      	adds	r0, #1
90028516:	d09d      	beq.n	90028454 <_printf_i+0x160>
90028518:	3501      	adds	r5, #1
9002851a:	68e3      	ldr	r3, [r4, #12]
9002851c:	9903      	ldr	r1, [sp, #12]
9002851e:	1a5b      	subs	r3, r3, r1
90028520:	42ab      	cmp	r3, r5
90028522:	dcf2      	bgt.n	9002850a <_printf_i+0x216>
90028524:	e7eb      	b.n	900284fe <_printf_i+0x20a>
90028526:	2500      	movs	r5, #0
90028528:	f104 0619 	add.w	r6, r4, #25
9002852c:	e7f5      	b.n	9002851a <_printf_i+0x226>
9002852e:	bf00      	nop
90028530:	9002c81d 	.word	0x9002c81d
90028534:	9002c82e 	.word	0x9002c82e

90028538 <__sflush_r>:
90028538:	898a      	ldrh	r2, [r1, #12]
9002853a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002853e:	4605      	mov	r5, r0
90028540:	0710      	lsls	r0, r2, #28
90028542:	460c      	mov	r4, r1
90028544:	d458      	bmi.n	900285f8 <__sflush_r+0xc0>
90028546:	684b      	ldr	r3, [r1, #4]
90028548:	2b00      	cmp	r3, #0
9002854a:	dc05      	bgt.n	90028558 <__sflush_r+0x20>
9002854c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9002854e:	2b00      	cmp	r3, #0
90028550:	dc02      	bgt.n	90028558 <__sflush_r+0x20>
90028552:	2000      	movs	r0, #0
90028554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90028558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9002855a:	2e00      	cmp	r6, #0
9002855c:	d0f9      	beq.n	90028552 <__sflush_r+0x1a>
9002855e:	2300      	movs	r3, #0
90028560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90028564:	682f      	ldr	r7, [r5, #0]
90028566:	6a21      	ldr	r1, [r4, #32]
90028568:	602b      	str	r3, [r5, #0]
9002856a:	d032      	beq.n	900285d2 <__sflush_r+0x9a>
9002856c:	6d60      	ldr	r0, [r4, #84]	; 0x54
9002856e:	89a3      	ldrh	r3, [r4, #12]
90028570:	075a      	lsls	r2, r3, #29
90028572:	d505      	bpl.n	90028580 <__sflush_r+0x48>
90028574:	6863      	ldr	r3, [r4, #4]
90028576:	1ac0      	subs	r0, r0, r3
90028578:	6b63      	ldr	r3, [r4, #52]	; 0x34
9002857a:	b10b      	cbz	r3, 90028580 <__sflush_r+0x48>
9002857c:	6c23      	ldr	r3, [r4, #64]	; 0x40
9002857e:	1ac0      	subs	r0, r0, r3
90028580:	2300      	movs	r3, #0
90028582:	4602      	mov	r2, r0
90028584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90028586:	6a21      	ldr	r1, [r4, #32]
90028588:	4628      	mov	r0, r5
9002858a:	47b0      	blx	r6
9002858c:	1c43      	adds	r3, r0, #1
9002858e:	89a3      	ldrh	r3, [r4, #12]
90028590:	d106      	bne.n	900285a0 <__sflush_r+0x68>
90028592:	6829      	ldr	r1, [r5, #0]
90028594:	291d      	cmp	r1, #29
90028596:	d82b      	bhi.n	900285f0 <__sflush_r+0xb8>
90028598:	4a29      	ldr	r2, [pc, #164]	; (90028640 <__sflush_r+0x108>)
9002859a:	410a      	asrs	r2, r1
9002859c:	07d6      	lsls	r6, r2, #31
9002859e:	d427      	bmi.n	900285f0 <__sflush_r+0xb8>
900285a0:	2200      	movs	r2, #0
900285a2:	6062      	str	r2, [r4, #4]
900285a4:	04d9      	lsls	r1, r3, #19
900285a6:	6922      	ldr	r2, [r4, #16]
900285a8:	6022      	str	r2, [r4, #0]
900285aa:	d504      	bpl.n	900285b6 <__sflush_r+0x7e>
900285ac:	1c42      	adds	r2, r0, #1
900285ae:	d101      	bne.n	900285b4 <__sflush_r+0x7c>
900285b0:	682b      	ldr	r3, [r5, #0]
900285b2:	b903      	cbnz	r3, 900285b6 <__sflush_r+0x7e>
900285b4:	6560      	str	r0, [r4, #84]	; 0x54
900285b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
900285b8:	602f      	str	r7, [r5, #0]
900285ba:	2900      	cmp	r1, #0
900285bc:	d0c9      	beq.n	90028552 <__sflush_r+0x1a>
900285be:	f104 0344 	add.w	r3, r4, #68	; 0x44
900285c2:	4299      	cmp	r1, r3
900285c4:	d002      	beq.n	900285cc <__sflush_r+0x94>
900285c6:	4628      	mov	r0, r5
900285c8:	f7ff fc96 	bl	90027ef8 <_free_r>
900285cc:	2000      	movs	r0, #0
900285ce:	6360      	str	r0, [r4, #52]	; 0x34
900285d0:	e7c0      	b.n	90028554 <__sflush_r+0x1c>
900285d2:	2301      	movs	r3, #1
900285d4:	4628      	mov	r0, r5
900285d6:	47b0      	blx	r6
900285d8:	1c41      	adds	r1, r0, #1
900285da:	d1c8      	bne.n	9002856e <__sflush_r+0x36>
900285dc:	682b      	ldr	r3, [r5, #0]
900285de:	2b00      	cmp	r3, #0
900285e0:	d0c5      	beq.n	9002856e <__sflush_r+0x36>
900285e2:	2b1d      	cmp	r3, #29
900285e4:	d001      	beq.n	900285ea <__sflush_r+0xb2>
900285e6:	2b16      	cmp	r3, #22
900285e8:	d101      	bne.n	900285ee <__sflush_r+0xb6>
900285ea:	602f      	str	r7, [r5, #0]
900285ec:	e7b1      	b.n	90028552 <__sflush_r+0x1a>
900285ee:	89a3      	ldrh	r3, [r4, #12]
900285f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900285f4:	81a3      	strh	r3, [r4, #12]
900285f6:	e7ad      	b.n	90028554 <__sflush_r+0x1c>
900285f8:	690f      	ldr	r7, [r1, #16]
900285fa:	2f00      	cmp	r7, #0
900285fc:	d0a9      	beq.n	90028552 <__sflush_r+0x1a>
900285fe:	0793      	lsls	r3, r2, #30
90028600:	680e      	ldr	r6, [r1, #0]
90028602:	bf08      	it	eq
90028604:	694b      	ldreq	r3, [r1, #20]
90028606:	600f      	str	r7, [r1, #0]
90028608:	bf18      	it	ne
9002860a:	2300      	movne	r3, #0
9002860c:	eba6 0807 	sub.w	r8, r6, r7
90028610:	608b      	str	r3, [r1, #8]
90028612:	f1b8 0f00 	cmp.w	r8, #0
90028616:	dd9c      	ble.n	90028552 <__sflush_r+0x1a>
90028618:	6a21      	ldr	r1, [r4, #32]
9002861a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9002861c:	4643      	mov	r3, r8
9002861e:	463a      	mov	r2, r7
90028620:	4628      	mov	r0, r5
90028622:	47b0      	blx	r6
90028624:	2800      	cmp	r0, #0
90028626:	dc06      	bgt.n	90028636 <__sflush_r+0xfe>
90028628:	89a3      	ldrh	r3, [r4, #12]
9002862a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002862e:	81a3      	strh	r3, [r4, #12]
90028630:	f04f 30ff 	mov.w	r0, #4294967295
90028634:	e78e      	b.n	90028554 <__sflush_r+0x1c>
90028636:	4407      	add	r7, r0
90028638:	eba8 0800 	sub.w	r8, r8, r0
9002863c:	e7e9      	b.n	90028612 <__sflush_r+0xda>
9002863e:	bf00      	nop
90028640:	dfbffffe 	.word	0xdfbffffe

90028644 <_fflush_r>:
90028644:	b538      	push	{r3, r4, r5, lr}
90028646:	690b      	ldr	r3, [r1, #16]
90028648:	4605      	mov	r5, r0
9002864a:	460c      	mov	r4, r1
9002864c:	b913      	cbnz	r3, 90028654 <_fflush_r+0x10>
9002864e:	2500      	movs	r5, #0
90028650:	4628      	mov	r0, r5
90028652:	bd38      	pop	{r3, r4, r5, pc}
90028654:	b118      	cbz	r0, 9002865e <_fflush_r+0x1a>
90028656:	6a03      	ldr	r3, [r0, #32]
90028658:	b90b      	cbnz	r3, 9002865e <_fflush_r+0x1a>
9002865a:	f7ff f9c5 	bl	900279e8 <__sinit>
9002865e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028662:	2b00      	cmp	r3, #0
90028664:	d0f3      	beq.n	9002864e <_fflush_r+0xa>
90028666:	6e62      	ldr	r2, [r4, #100]	; 0x64
90028668:	07d0      	lsls	r0, r2, #31
9002866a:	d404      	bmi.n	90028676 <_fflush_r+0x32>
9002866c:	0599      	lsls	r1, r3, #22
9002866e:	d402      	bmi.n	90028676 <_fflush_r+0x32>
90028670:	6da0      	ldr	r0, [r4, #88]	; 0x58
90028672:	f7ff fbd2 	bl	90027e1a <__retarget_lock_acquire_recursive>
90028676:	4628      	mov	r0, r5
90028678:	4621      	mov	r1, r4
9002867a:	f7ff ff5d 	bl	90028538 <__sflush_r>
9002867e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90028680:	07da      	lsls	r2, r3, #31
90028682:	4605      	mov	r5, r0
90028684:	d4e4      	bmi.n	90028650 <_fflush_r+0xc>
90028686:	89a3      	ldrh	r3, [r4, #12]
90028688:	059b      	lsls	r3, r3, #22
9002868a:	d4e1      	bmi.n	90028650 <_fflush_r+0xc>
9002868c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9002868e:	f7ff fbc5 	bl	90027e1c <__retarget_lock_release_recursive>
90028692:	e7dd      	b.n	90028650 <_fflush_r+0xc>

90028694 <__swhatbuf_r>:
90028694:	b570      	push	{r4, r5, r6, lr}
90028696:	460c      	mov	r4, r1
90028698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002869c:	2900      	cmp	r1, #0
9002869e:	b096      	sub	sp, #88	; 0x58
900286a0:	4615      	mov	r5, r2
900286a2:	461e      	mov	r6, r3
900286a4:	da0d      	bge.n	900286c2 <__swhatbuf_r+0x2e>
900286a6:	89a3      	ldrh	r3, [r4, #12]
900286a8:	f013 0f80 	tst.w	r3, #128	; 0x80
900286ac:	f04f 0100 	mov.w	r1, #0
900286b0:	bf0c      	ite	eq
900286b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
900286b6:	2340      	movne	r3, #64	; 0x40
900286b8:	2000      	movs	r0, #0
900286ba:	6031      	str	r1, [r6, #0]
900286bc:	602b      	str	r3, [r5, #0]
900286be:	b016      	add	sp, #88	; 0x58
900286c0:	bd70      	pop	{r4, r5, r6, pc}
900286c2:	466a      	mov	r2, sp
900286c4:	f000 f848 	bl	90028758 <_fstat_r>
900286c8:	2800      	cmp	r0, #0
900286ca:	dbec      	blt.n	900286a6 <__swhatbuf_r+0x12>
900286cc:	9901      	ldr	r1, [sp, #4]
900286ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
900286d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
900286d6:	4259      	negs	r1, r3
900286d8:	4159      	adcs	r1, r3
900286da:	f44f 6380 	mov.w	r3, #1024	; 0x400
900286de:	e7eb      	b.n	900286b8 <__swhatbuf_r+0x24>

900286e0 <__smakebuf_r>:
900286e0:	898b      	ldrh	r3, [r1, #12]
900286e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
900286e4:	079d      	lsls	r5, r3, #30
900286e6:	4606      	mov	r6, r0
900286e8:	460c      	mov	r4, r1
900286ea:	d507      	bpl.n	900286fc <__smakebuf_r+0x1c>
900286ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
900286f0:	6023      	str	r3, [r4, #0]
900286f2:	6123      	str	r3, [r4, #16]
900286f4:	2301      	movs	r3, #1
900286f6:	6163      	str	r3, [r4, #20]
900286f8:	b002      	add	sp, #8
900286fa:	bd70      	pop	{r4, r5, r6, pc}
900286fc:	ab01      	add	r3, sp, #4
900286fe:	466a      	mov	r2, sp
90028700:	f7ff ffc8 	bl	90028694 <__swhatbuf_r>
90028704:	9900      	ldr	r1, [sp, #0]
90028706:	4605      	mov	r5, r0
90028708:	4630      	mov	r0, r6
9002870a:	f7ff f847 	bl	9002779c <_malloc_r>
9002870e:	b948      	cbnz	r0, 90028724 <__smakebuf_r+0x44>
90028710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028714:	059a      	lsls	r2, r3, #22
90028716:	d4ef      	bmi.n	900286f8 <__smakebuf_r+0x18>
90028718:	f023 0303 	bic.w	r3, r3, #3
9002871c:	f043 0302 	orr.w	r3, r3, #2
90028720:	81a3      	strh	r3, [r4, #12]
90028722:	e7e3      	b.n	900286ec <__smakebuf_r+0xc>
90028724:	89a3      	ldrh	r3, [r4, #12]
90028726:	6020      	str	r0, [r4, #0]
90028728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002872c:	81a3      	strh	r3, [r4, #12]
9002872e:	9b00      	ldr	r3, [sp, #0]
90028730:	6163      	str	r3, [r4, #20]
90028732:	9b01      	ldr	r3, [sp, #4]
90028734:	6120      	str	r0, [r4, #16]
90028736:	b15b      	cbz	r3, 90028750 <__smakebuf_r+0x70>
90028738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002873c:	4630      	mov	r0, r6
9002873e:	f000 f81d 	bl	9002877c <_isatty_r>
90028742:	b128      	cbz	r0, 90028750 <__smakebuf_r+0x70>
90028744:	89a3      	ldrh	r3, [r4, #12]
90028746:	f023 0303 	bic.w	r3, r3, #3
9002874a:	f043 0301 	orr.w	r3, r3, #1
9002874e:	81a3      	strh	r3, [r4, #12]
90028750:	89a3      	ldrh	r3, [r4, #12]
90028752:	431d      	orrs	r5, r3
90028754:	81a5      	strh	r5, [r4, #12]
90028756:	e7cf      	b.n	900286f8 <__smakebuf_r+0x18>

90028758 <_fstat_r>:
90028758:	b538      	push	{r3, r4, r5, lr}
9002875a:	4d07      	ldr	r5, [pc, #28]	; (90028778 <_fstat_r+0x20>)
9002875c:	2300      	movs	r3, #0
9002875e:	4604      	mov	r4, r0
90028760:	4608      	mov	r0, r1
90028762:	4611      	mov	r1, r2
90028764:	602b      	str	r3, [r5, #0]
90028766:	f7dc fb9b 	bl	90004ea0 <_fstat>
9002876a:	1c43      	adds	r3, r0, #1
9002876c:	d102      	bne.n	90028774 <_fstat_r+0x1c>
9002876e:	682b      	ldr	r3, [r5, #0]
90028770:	b103      	cbz	r3, 90028774 <_fstat_r+0x1c>
90028772:	6023      	str	r3, [r4, #0]
90028774:	bd38      	pop	{r3, r4, r5, pc}
90028776:	bf00      	nop
90028778:	24028434 	.word	0x24028434

9002877c <_isatty_r>:
9002877c:	b538      	push	{r3, r4, r5, lr}
9002877e:	4d06      	ldr	r5, [pc, #24]	; (90028798 <_isatty_r+0x1c>)
90028780:	2300      	movs	r3, #0
90028782:	4604      	mov	r4, r0
90028784:	4608      	mov	r0, r1
90028786:	602b      	str	r3, [r5, #0]
90028788:	f7dc fb90 	bl	90004eac <_isatty>
9002878c:	1c43      	adds	r3, r0, #1
9002878e:	d102      	bne.n	90028796 <_isatty_r+0x1a>
90028790:	682b      	ldr	r3, [r5, #0]
90028792:	b103      	cbz	r3, 90028796 <_isatty_r+0x1a>
90028794:	6023      	str	r3, [r4, #0]
90028796:	bd38      	pop	{r3, r4, r5, pc}
90028798:	24028434 	.word	0x24028434

9002879c <_init>:
9002879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002879e:	bf00      	nop
900287a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900287a2:	bc08      	pop	{r3}
900287a4:	469e      	mov	lr, r3
900287a6:	4770      	bx	lr

900287a8 <_fini>:
900287a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900287aa:	bf00      	nop
900287ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
900287ae:	bc08      	pop	{r3}
900287b0:	469e      	mov	lr, r3
900287b2:	4770      	bx	lr
